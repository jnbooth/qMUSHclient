#include "qt_core_c_global.h"
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QTimeLine_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QTimeLine_State() { }

Q_SIGNALS:
    void emit_(QTimeLine::State arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_qint64() { }

Q_SIGNALS:
    void emit_(qint64 arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref() { }

Q_SIGNALS:
    void emit_(QList< QPersistentModelIndex > const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref() { }

Q_SIGNALS:
    void emit_(QVariant const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_ : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_() { }

Q_SIGNALS:
    void emit_();
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int() { }

Q_SIGNALS:
    void emit_(Qt::Orientation arg0, int arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction() { }

Q_SIGNALS:
    void emit_(QAbstractAnimation::Direction arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_int() { }

Q_SIGNALS:
    void emit_(int arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int() { }

Q_SIGNALS:
    void emit_(Qt::Orientation arg0, int arg1, int arg2);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr() { }

Q_SIGNALS:
    void emit_(QAbstractItemModel * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, QModelIndex const & arg1, QVector< int > const & arg2);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, int arg1, int arg2, QModelIndex const & arg3);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State() { }

Q_SIGNALS:
    void emit_(QAbstractAnimation::State arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref() { }

Q_SIGNALS:
    void emit_(QItemSelection const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_double : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_double() { }

Q_SIGNALS:
    void emit_(double arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, QModelIndex const & arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QString_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QString_const_ref() { }

Q_SIGNALS:
    void emit_(QString const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, int arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint() { }

Q_SIGNALS:
    void emit_(QList< QPersistentModelIndex > const & arg0, QAbstractItemModel::LayoutChangeHint arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr() { }

Q_SIGNALS:
    void emit_(QAbstractAnimation * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus() { }

Q_SIGNALS:
    void emit_(int arg0, QProcess::ExitStatus arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_int_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_int_qint64() { }

Q_SIGNALS:
    void emit_(int arg0, qint64 arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_bool : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_bool() { }

Q_SIGNALS:
    void emit_(bool arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_int_int() { }

Q_SIGNALS:
    void emit_(int arg0, int arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State() { }

Q_SIGNALS:
    void emit_(QAbstractAnimation::State arg0, QAbstractAnimation::State arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState() { }

Q_SIGNALS:
    void emit_(QProcess::ProcessState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, int arg1, int arg2);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QObject_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QObject_ptr() { }

Q_SIGNALS:
    void emit_(QObject * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref() { }

Q_SIGNALS:
    void emit_(QItemSelection const & arg0, QItemSelection const & arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QWidget_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QWidget_ptr() { }

Q_SIGNALS:
    void emit_(QWidget * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_Qt_Orientation : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_Qt_Orientation() { }

Q_SIGNALS:
    void emit_(Qt::Orientation arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int() { }

Q_SIGNALS:
    void emit_(QModelIndex const & arg0, int arg1, int arg2, QModelIndex const & arg3, int arg4);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError() { }

Q_SIGNALS:
    void emit_(QProcess::ProcessError arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int(QObject* parent, void (*callback)(void *, Qt::Orientation, int, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::Orientation, int, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::Orientation arg0, int arg1, int arg2) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1, arg2);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::Orientation, int, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_double : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_double(QObject* parent, void (*callback)(void *, double), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, double), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(double arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, double)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int(QObject* parent, void (*callback)(void *, Qt::Orientation, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::Orientation, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::Orientation arg0, int arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::Orientation, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State(QObject* parent, void (*callback)(void *, QAbstractAnimation::State), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractAnimation::State), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractAnimation::State arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractAnimation::State)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref(QObject* parent, void (*callback)(void *, QModelIndex const *, QModelIndex const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, QModelIndex const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, QModelIndex const & arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, &arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, QModelIndex const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_int_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_int_qint64(QObject* parent, void (*callback)(void *, int, qint64), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int, qint64), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(int arg0, qint64 arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, int, qint64)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError(QObject* parent, void (*callback)(void *, QProcess::ProcessError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QProcess::ProcessError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QProcess::ProcessError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QProcess::ProcessError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref(QObject* parent, void (*callback)(void *, QModelIndex const *, QModelIndex const *, QVector< int > const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, QModelIndex const *, QVector< int > const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, QModelIndex const & arg1, QVector< int > const & arg2) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, &arg1, &arg2);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, QModelIndex const *, QVector< int > const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int(QObject* parent, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, int arg1, int arg2, QModelIndex const & arg3, int arg4) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1, arg2, &arg3, arg4);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, int, int, QModelIndex const *, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref(QObject* parent, void (*callback)(void *, QItemSelection const *, QItemSelection const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QItemSelection const *, QItemSelection const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QItemSelection const & arg0, QItemSelection const & arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, &arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QItemSelection const *, QItemSelection const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref(QObject* parent, void (*callback)(void *, QList< QPersistentModelIndex > const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QList< QPersistentModelIndex > const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QList< QPersistentModelIndex > const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QList< QPersistentModelIndex > const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_qint64(QObject* parent, void (*callback)(void *, qint64), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, qint64), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(qint64 arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, qint64)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_int(QObject* parent, void (*callback)(void *, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(int arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref(QObject* parent, void (*callback)(void *, QVariant const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QVariant const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QVariant const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QVariant const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint(QObject* parent, void (*callback)(void *, QList< QPersistentModelIndex > const *, QAbstractItemModel::LayoutChangeHint), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QList< QPersistentModelIndex > const *, QAbstractItemModel::LayoutChangeHint), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QList< QPersistentModelIndex > const & arg0, QAbstractItemModel::LayoutChangeHint arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QList< QPersistentModelIndex > const *, QAbstractItemModel::LayoutChangeHint)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QWidget_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QWidget_ptr(QObject* parent, void (*callback)(void *, QWidget *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QWidget *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QWidget * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QWidget *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_bool : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_bool(QObject* parent, void (*callback)(void *, bool), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, bool), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(bool arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, bool)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int(QObject* parent, void (*callback)(void *, QModelIndex const *, int, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, int, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, int arg1, int arg2) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1, arg2);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, int, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref(QObject* parent, void (*callback)(void *, QModelIndex const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_Qt_Orientation : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_Qt_Orientation(QObject* parent, void (*callback)(void *, Qt::Orientation), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::Orientation), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::Orientation arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::Orientation)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr(QObject* parent, void (*callback)(void *, QAbstractAnimation *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractAnimation *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractAnimation * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractAnimation *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_ : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_(QObject* parent, void (*callback)(void *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_() {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data());
        }
    }

private:
    ritual::Callback<void (*)(void *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QObject_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QObject_ptr(QObject* parent, void (*callback)(void *, QObject *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QObject *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QObject * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QObject *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref(QObject* parent, void (*callback)(void *, QItemSelection const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QItemSelection const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QItemSelection const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QItemSelection const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_int_int(QObject* parent, void (*callback)(void *, int, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(int arg0, int arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, int, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QTimeLine_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QTimeLine_State(QObject* parent, void (*callback)(void *, QTimeLine::State), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QTimeLine::State), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QTimeLine::State arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QTimeLine::State)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus(QObject* parent, void (*callback)(void *, int, QProcess::ExitStatus), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int, QProcess::ExitStatus), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(int arg0, QProcess::ExitStatus arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, int, QProcess::ExitStatus)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QString_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QString_const_ref(QObject* parent, void (*callback)(void *, QString const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QString const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QString const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QString const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State(QObject* parent, void (*callback)(void *, QAbstractAnimation::State, QAbstractAnimation::State), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractAnimation::State, QAbstractAnimation::State), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractAnimation::State arg0, QAbstractAnimation::State arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractAnimation::State, QAbstractAnimation::State)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState(QObject* parent, void (*callback)(void *, QProcess::ProcessState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QProcess::ProcessState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QProcess::ProcessState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QProcess::ProcessState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int(QObject* parent, void (*callback)(void *, QModelIndex const *, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, int arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr(QObject* parent, void (*callback)(void *, QAbstractItemModel *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractItemModel *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractItemModel * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractItemModel *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction(QObject* parent, void (*callback)(void *, QAbstractAnimation::Direction), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractAnimation::Direction), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractAnimation::Direction arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractAnimation::Direction)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref(QObject* parent, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QModelIndex const & arg0, int arg1, int arg2, QModelIndex const & arg3) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1, arg2, &arg3);
        }
    }

private:
    ritual::Callback<void (*)(void *, QModelIndex const *, int, int, QModelIndex const *)> m_callback;
};
extern "C" {
RITUAL_EXPORT QSysInfo::WinVersion ctr_qt_core_ffi_QSysInfo_WindowsVersion() {
  return QSysInfo::WindowsVersion;
}


RITUAL_EXPORT QSysInfo::MacVersion ctr_qt_core_ffi_QSysInfo_MacintoshVersion() {
  return QSysInfo::MacintoshVersion;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMessageLogContext_version(QMessageLogContext const * this_ptr) {
  return this_ptr->version;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QMessageLogContext_version(QMessageLogContext * this_ptr, int value) {
  this_ptr->version = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMessageLogContext_line(QMessageLogContext const * this_ptr) {
  return this_ptr->line;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QMessageLogContext_line(QMessageLogContext * this_ptr, int value) {
  this_ptr->line = value;
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMessageLogContext_file(QMessageLogContext const * this_ptr) {
  return this_ptr->file;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QMessageLogContext_file(QMessageLogContext * this_ptr, char const * value) {
  this_ptr->file = value;
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMessageLogContext_function(QMessageLogContext const * this_ptr) {
  return this_ptr->function;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QMessageLogContext_function(QMessageLogContext * this_ptr, char const * value) {
  this_ptr->function = value;
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMessageLogContext_category(QMessageLogContext const * this_ptr) {
  return this_ptr->category;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QMessageLogContext_category(QMessageLogContext * this_ptr, char const * value) {
  this_ptr->category = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QObject_staticMetaObject() {
  return &QObject::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractAnimation_staticMetaObject() {
  return &QAbstractAnimation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAnimationDriver_staticMetaObject() {
  return &QAnimationDriver::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEventLoop_staticMetaObject() {
  return &QEventLoop::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractEventDispatcher_staticMetaObject() {
  return &QAbstractEventDispatcher::staticMetaObject;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_timerId(QAbstractEventDispatcher::TimerInfo const * this_ptr) {
  return this_ptr->timerId;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QAbstractEventDispatcher_TimerInfo_timerId(QAbstractEventDispatcher::TimerInfo * this_ptr, int value) {
  this_ptr->timerId = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_interval(QAbstractEventDispatcher::TimerInfo const * this_ptr) {
  return this_ptr->interval;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QAbstractEventDispatcher_TimerInfo_interval(QAbstractEventDispatcher::TimerInfo * this_ptr, int value) {
  this_ptr->interval = value;
}


RITUAL_EXPORT Qt::TimerType ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_timerType(QAbstractEventDispatcher::TimerInfo const * this_ptr) {
  return this_ptr->timerType;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QAbstractEventDispatcher_TimerInfo_timerType(QAbstractEventDispatcher::TimerInfo * this_ptr, Qt::TimerType value) {
  this_ptr->timerType = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractItemModel_staticMetaObject() {
  return &QAbstractItemModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractTableModel_staticMetaObject() {
  return &QAbstractTableModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractListModel_staticMetaObject() {
  return &QAbstractListModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractProxyModel_staticMetaObject() {
  return &QAbstractProxyModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractState_staticMetaObject() {
  return &QAbstractState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractTransition_staticMetaObject() {
  return &QAbstractTransition::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAnimationGroup_staticMetaObject() {
  return &QAnimationGroup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QIODevice_staticMetaObject() {
  return &QIODevice::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QBuffer_staticMetaObject() {
  return &QBuffer::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QLocale_staticMetaObject() {
  return &QLocale::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEvent_staticMetaObject() {
  return &QEvent::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCoreApplication_staticMetaObject() {
  return &QCoreApplication::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCryptographicHash_staticMetaObject() {
  return &QCryptographicHash::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileDevice_staticMetaObject() {
  return &QFileDevice::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFile_staticMetaObject() {
  return &QFile::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEasingCurve_staticMetaObject() {
  return &QEasingCurve::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEventTransition_staticMetaObject() {
  return &QEventTransition::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileSelector_staticMetaObject() {
  return &QFileSelector::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileSystemWatcher_staticMetaObject() {
  return &QFileSystemWatcher::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFinalState_staticMetaObject() {
  return &QFinalState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFutureWatcherBase_staticMetaObject() {
  return &QFutureWatcherBase::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QHistoryState_staticMetaObject() {
  return &QHistoryState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QIdentityProxyModel_staticMetaObject() {
  return &QIdentityProxyModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QItemSelectionModel_staticMetaObject() {
  return &QItemSelectionModel::staticMetaObject;
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_iterator_a(QJsonArray::iterator const * this_ptr) {
  return this_ptr->a;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonArray_iterator_a(QJsonArray::iterator * this_ptr, QJsonArray * value) {
  this_ptr->a = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_iterator_i(QJsonArray::iterator const * this_ptr) {
  return this_ptr->i;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonArray_iterator_i(QJsonArray::iterator * this_ptr, int value) {
  this_ptr->i = value;
}


RITUAL_EXPORT QJsonArray const * ctr_qt_core_ffi_QJsonArray_const_iterator_a(QJsonArray::const_iterator const * this_ptr) {
  return this_ptr->a;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonArray_const_iterator_a(QJsonArray::const_iterator * this_ptr, QJsonArray const * value) {
  this_ptr->a = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_const_iterator_i(QJsonArray::const_iterator const * this_ptr) {
  return this_ptr->i;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonArray_const_iterator_i(QJsonArray::const_iterator * this_ptr, int value) {
  this_ptr->i = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonParseError_offset(QJsonParseError const * this_ptr) {
  return this_ptr->offset;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonParseError_offset(QJsonParseError * this_ptr, int value) {
  this_ptr->offset = value;
}


RITUAL_EXPORT QJsonParseError::ParseError ctr_qt_core_ffi_QJsonParseError_error(QJsonParseError const * this_ptr) {
  return this_ptr->error;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QJsonParseError_error(QJsonParseError * this_ptr, QJsonParseError::ParseError value) {
  this_ptr->error = value;
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QJsonDocument_BinaryFormatTag() {
  return QJsonDocument::BinaryFormatTag;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QLibrary_staticMetaObject() {
  return &QLibrary::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMimeData_staticMetaObject() {
  return &QMimeData::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QObjectCleanupHandler_staticMetaObject() {
  return &QObjectCleanupHandler::staticMetaObject;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_Windows7() {
  return &QOperatingSystemVersion::Windows7;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_Windows8() {
  return &QOperatingSystemVersion::Windows8;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_Windows8_1() {
  return &QOperatingSystemVersion::Windows8_1;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_Windows10() {
  return &QOperatingSystemVersion::Windows10;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_OSXMavericks() {
  return &QOperatingSystemVersion::OSXMavericks;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_OSXYosemite() {
  return &QOperatingSystemVersion::OSXYosemite;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_OSXElCapitan() {
  return &QOperatingSystemVersion::OSXElCapitan;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_MacOSSierra() {
  return &QOperatingSystemVersion::MacOSSierra;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_MacOSHighSierra() {
  return &QOperatingSystemVersion::MacOSHighSierra;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidJellyBean() {
  return &QOperatingSystemVersion::AndroidJellyBean;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidJellyBean_MR1() {
  return &QOperatingSystemVersion::AndroidJellyBean_MR1;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidJellyBean_MR2() {
  return &QOperatingSystemVersion::AndroidJellyBean_MR2;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidKitKat() {
  return &QOperatingSystemVersion::AndroidKitKat;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidLollipop() {
  return &QOperatingSystemVersion::AndroidLollipop;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidLollipop_MR1() {
  return &QOperatingSystemVersion::AndroidLollipop_MR1;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidMarshmallow() {
  return &QOperatingSystemVersion::AndroidMarshmallow;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidNougat() {
  return &QOperatingSystemVersion::AndroidNougat;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidNougat_MR1() {
  return &QOperatingSystemVersion::AndroidNougat_MR1;
}


RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_AndroidOreo() {
  return &QOperatingSystemVersion::AndroidOreo;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QParallelAnimationGroup_staticMetaObject() {
  return &QParallelAnimationGroup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPauseAnimation_staticMetaObject() {
  return &QPauseAnimation::staticMetaObject;
}


RITUAL_EXPORT QObject * (*ctr_qt_core_ffi_QStaticPlugin_instance(QStaticPlugin const * this_ptr))() {
  return this_ptr->instance;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QStaticPlugin_instance(QStaticPlugin * this_ptr, QObject * (*value)()) {
  this_ptr->instance = value;
}


RITUAL_EXPORT char const * (*ctr_qt_core_ffi_QStaticPlugin_rawMetaData(QStaticPlugin const * this_ptr))() {
  return this_ptr->rawMetaData;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QStaticPlugin_rawMetaData(QStaticPlugin * this_ptr, char const * (*value)()) {
  this_ptr->rawMetaData = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPluginLoader_staticMetaObject() {
  return &QPluginLoader::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QProcess_staticMetaObject() {
  return &QProcess::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QVariantAnimation_staticMetaObject() {
  return &QVariantAnimation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPropertyAnimation_staticMetaObject() {
  return &QPropertyAnimation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSaveFile_staticMetaObject() {
  return &QSaveFile::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSequentialAnimationGroup_staticMetaObject() {
  return &QSequentialAnimationGroup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSettings_staticMetaObject() {
  return &QSettings::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSharedMemory_staticMetaObject() {
  return &QSharedMemory::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSignalMapper_staticMetaObject() {
  return &QSignalMapper::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSignalTransition_staticMetaObject() {
  return &QSignalTransition::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSocketNotifier_staticMetaObject() {
  return &QSocketNotifier::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSortFilterProxyModel_staticMetaObject() {
  return &QSortFilterProxyModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QStandardPaths_staticMetaObject() {
  return &QStandardPaths::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QState_staticMetaObject() {
  return &QState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QStateMachine_staticMetaObject() {
  return &QStateMachine::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QStringListModel_staticMetaObject() {
  return &QStringListModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTemporaryFile_staticMetaObject() {
  return &QTemporaryFile::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QThread_staticMetaObject() {
  return &QThread::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QThreadPool_staticMetaObject() {
  return &QThreadPool::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTimeLine_staticMetaObject() {
  return &QTimeLine::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTimer_staticMetaObject() {
  return &QTimer::staticMetaObject;
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QTimeZone_OffsetData_abbreviation(QTimeZone::OffsetData const * this_ptr) {
  return &this_ptr->abbreviation;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_OffsetData_abbreviation_mut(QTimeZone::OffsetData * this_ptr) {
  return &this_ptr->abbreviation;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QTimeZone_OffsetData_abbreviation(QTimeZone::OffsetData * this_ptr, QString const * value) {
  this_ptr->abbreviation = *value;
}


RITUAL_EXPORT QDateTime const * ctr_qt_core_ffi_QTimeZone_OffsetData_atUtc(QTimeZone::OffsetData const * this_ptr) {
  return &this_ptr->atUtc;
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QTimeZone_OffsetData_atUtc_mut(QTimeZone::OffsetData * this_ptr) {
  return &this_ptr->atUtc;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QTimeZone_OffsetData_atUtc(QTimeZone::OffsetData * this_ptr, QDateTime const * value) {
  this_ptr->atUtc = *value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_OffsetData_offsetFromUtc(QTimeZone::OffsetData const * this_ptr) {
  return this_ptr->offsetFromUtc;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QTimeZone_OffsetData_offsetFromUtc(QTimeZone::OffsetData * this_ptr, int value) {
  this_ptr->offsetFromUtc = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_OffsetData_standardTimeOffset(QTimeZone::OffsetData const * this_ptr) {
  return this_ptr->standardTimeOffset;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QTimeZone_OffsetData_standardTimeOffset(QTimeZone::OffsetData * this_ptr, int value) {
  this_ptr->standardTimeOffset = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_OffsetData_daylightTimeOffset(QTimeZone::OffsetData const * this_ptr) {
  return this_ptr->daylightTimeOffset;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QTimeZone_OffsetData_daylightTimeOffset(QTimeZone::OffsetData * this_ptr, int value) {
  this_ptr->daylightTimeOffset = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTranslator_staticMetaObject() {
  return &QTranslator::staticMetaObject;
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QUuid_data1(QUuid const * this_ptr) {
  return this_ptr->data1;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QUuid_data1(QUuid * this_ptr, unsigned int value) {
  this_ptr->data1 = value;
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QUuid_data2(QUuid const * this_ptr) {
  return this_ptr->data2;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QUuid_data2(QUuid * this_ptr, unsigned short value) {
  this_ptr->data2 = value;
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QUuid_data3(QUuid const * this_ptr) {
  return this_ptr->data3;
}


RITUAL_EXPORT void ctr_qt_core_ffi_set_QUuid_data3(QUuid * this_ptr, unsigned short value) {
  this_ptr->data3 = value;
}


RITUAL_EXPORT int ctr_qt_core_ffi_qRound(double d) {
  return qRound(d);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qRound1(float d) {
  return qRound(d);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_qRound64(double d) {
  return qRound64(d);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_qRound641(float d) {
  return qRound64(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qSharedBuild() {
  return qSharedBuild();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyCompare(double p1, double p2) {
  return qFuzzyCompare(p1, p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyCompare1(float p1, float p2) {
  return qFuzzyCompare(p1, p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyIsNull(double d) {
  return qFuzzyIsNull(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyIsNull1(float f) {
  return qFuzzyIsNull(f);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNull(double d) {
  return qIsNull(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNull1(float f) {
  return qIsNull(f);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_qMallocAligned(unsigned long size, unsigned long alignment) {
  return qMallocAligned(size, alignment);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_qReallocAligned(void * ptr, unsigned long size, unsigned long oldsize, unsigned long alignment) {
  return qReallocAligned(ptr, size, oldsize, alignment);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qFreeAligned(void * ptr) {
  qFreeAligned(ptr);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_qtTrId(char const * id, int n) {
  return new QString(qtTrId(id, n));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qgetenv(char const * varName) {
  return new QByteArray(qgetenv(varName));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qputenv(char const * varName, QByteArray const * value) {
  return qputenv(varName, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qunsetenv(char const * varName) {
  return qunsetenv(varName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qEnvironmentVariableIsEmpty(char const * varName) {
  return qEnvironmentVariableIsEmpty(varName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qEnvironmentVariableIsSet(char const * varName) {
  return qEnvironmentVariableIsSet(varName);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qEnvironmentVariableIntValue(char const * varName, bool * ok) {
  return qEnvironmentVariableIntValue(varName, ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qIntCast(double f) {
  return qIntCast(f);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qIntCast1(float f) {
  return qIntCast(f);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qsrand(unsigned int seed) {
  qsrand(seed);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qrand() {
  return qrand();
}


RITUAL_EXPORT QSysInfo::WinVersion ctr_qt_core_ffi_QSysInfo_windowsVersion() {
  return QSysInfo::windowsVersion();
}


RITUAL_EXPORT QSysInfo::MacVersion ctr_qt_core_ffi_QSysInfo_macVersion() {
  return QSysInfo::macVersion();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_buildCpuArchitecture() {
  return new QString(QSysInfo::buildCpuArchitecture());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_currentCpuArchitecture() {
  return new QString(QSysInfo::currentCpuArchitecture());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_buildAbi() {
  return new QString(QSysInfo::buildAbi());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_kernelType() {
  return new QString(QSysInfo::kernelType());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_kernelVersion() {
  return new QString(QSysInfo::kernelVersion());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_productType() {
  return new QString(QSysInfo::productType());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_productVersion() {
  return new QString(QSysInfo::productVersion());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_prettyProductName() {
  return new QString(QSysInfo::prettyProductName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSysInfo_machineHostName() {
  return new QString(QSysInfo::machineHostName());
}


RITUAL_EXPORT QMessageLogContext * ctr_qt_core_ffi_QMessageLogContext_QMessageLogContext() {
  return new QMessageLogContext();
}


RITUAL_EXPORT QMessageLogContext * ctr_qt_core_ffi_QMessageLogContext_QMessageLogContext1(char const * fileName, int lineNumber, char const * functionName, char const * categoryName) {
  return new QMessageLogContext(fileName, lineNumber, functionName, categoryName);
}


RITUAL_EXPORT QMessageLogger * ctr_qt_core_ffi_QMessageLogger_QMessageLogger() {
  return new QMessageLogger();
}


RITUAL_EXPORT QMessageLogger * ctr_qt_core_ffi_QMessageLogger_QMessageLogger1(char const * file, int line, char const * function) {
  return new QMessageLogger(file, line, function);
}


RITUAL_EXPORT QMessageLogger * ctr_qt_core_ffi_QMessageLogger_QMessageLogger2(char const * file, int line, char const * function, char const * category) {
  return new QMessageLogger(file, line, function, category);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_debug3(QMessageLogger const * this_ptr) {
  return new QDebug(this_ptr->debug());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_debug4(QMessageLogger const * this_ptr, QLoggingCategory const * cat) {
  return new QDebug(this_ptr->debug(*cat));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_info3(QMessageLogger const * this_ptr) {
  return new QDebug(this_ptr->info());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_info4(QMessageLogger const * this_ptr, QLoggingCategory const * cat) {
  return new QDebug(this_ptr->info(*cat));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_warning3(QMessageLogger const * this_ptr) {
  return new QDebug(this_ptr->warning());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_warning4(QMessageLogger const * this_ptr, QLoggingCategory const * cat) {
  return new QDebug(this_ptr->warning(*cat));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_critical3(QMessageLogger const * this_ptr) {
  return new QDebug(this_ptr->critical());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QMessageLogger_critical4(QMessageLogger const * this_ptr, QLoggingCategory const * cat) {
  return new QDebug(this_ptr->critical(*cat));
}


RITUAL_EXPORT void ctr_qt_core_ffi_qt_message_output(QtMsgType arg1, QMessageLogContext const * context, QString const * message) {
  qt_message_output(arg1, *context, *message);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qSetMessagePattern(QString const * messagePattern) {
  qSetMessagePattern(*messagePattern);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_qFormatLogMessage(QtMsgType type, QMessageLogContext const * context, QString const * buf) {
  return new QString(qFormatLogMessage(type, *context, *buf));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsInf(double d) {
  return qIsInf(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNaN(double d) {
  return qIsNaN(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsFinite(double d) {
  return qIsFinite(d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsInf1(float f) {
  return qIsInf(f);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNaN1(float f) {
  return qIsNaN(f);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_qIsFinite1(float f) {
  return qIsFinite(f);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qSNaN() {
  return qSNaN();
}


RITUAL_EXPORT double ctr_qt_core_ffi_qQNaN() {
  return qQNaN();
}


RITUAL_EXPORT double ctr_qt_core_ffi_qInf() {
  return qInf();
}


RITUAL_EXPORT quint32 ctr_qt_core_ffi_qFloatDistance(float a, float b) {
  return qFloatDistance(a, b);
}


RITUAL_EXPORT quint64 ctr_qt_core_ffi_qFloatDistance1(double a, double b) {
  return qFloatDistance(a, b);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_qt_getQtMetaObject() {
  return qt_getQtMetaObject();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaObject_className(QMetaObject const * this_ptr) {
  return this_ptr->className();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaObject_superClass(QMetaObject const * this_ptr) {
  return this_ptr->superClass();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaObject_inherits(QMetaObject const * this_ptr, QMetaObject const * metaObject) {
  return this_ptr->inherits(metaObject);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QMetaObject_cast(QMetaObject const * this_ptr, QObject * obj) {
  return this_ptr->cast(obj);
}


RITUAL_EXPORT QObject const * ctr_qt_core_ffi_QMetaObject_cast1(QMetaObject const * this_ptr, QObject const * obj) {
  return this_ptr->cast(obj);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMetaObject_tr(QMetaObject const * this_ptr, char const * s, char const * c, int n) {
  return new QString(this_ptr->tr(s, c, n));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_methodOffset(QMetaObject const * this_ptr) {
  return this_ptr->methodOffset();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_enumeratorOffset(QMetaObject const * this_ptr) {
  return this_ptr->enumeratorOffset();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_propertyOffset(QMetaObject const * this_ptr) {
  return this_ptr->propertyOffset();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_classInfoOffset(QMetaObject const * this_ptr) {
  return this_ptr->classInfoOffset();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_constructorCount(QMetaObject const * this_ptr) {
  return this_ptr->constructorCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_methodCount(QMetaObject const * this_ptr) {
  return this_ptr->methodCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_enumeratorCount(QMetaObject const * this_ptr) {
  return this_ptr->enumeratorCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_propertyCount(QMetaObject const * this_ptr) {
  return this_ptr->propertyCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_classInfoCount(QMetaObject const * this_ptr) {
  return this_ptr->classInfoCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfConstructor(QMetaObject const * this_ptr, char const * constructor) {
  return this_ptr->indexOfConstructor(constructor);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfMethod(QMetaObject const * this_ptr, char const * method) {
  return this_ptr->indexOfMethod(method);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfSignal(QMetaObject const * this_ptr, char const * signal) {
  return this_ptr->indexOfSignal(signal);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfSlot(QMetaObject const * this_ptr, char const * slot) {
  return this_ptr->indexOfSlot(slot);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfEnumerator(QMetaObject const * this_ptr, char const * name) {
  return this_ptr->indexOfEnumerator(name);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfProperty(QMetaObject const * this_ptr, char const * name) {
  return this_ptr->indexOfProperty(name);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_indexOfClassInfo(QMetaObject const * this_ptr, char const * name) {
  return this_ptr->indexOfClassInfo(name);
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaObject_constructor(QMetaObject const * this_ptr, int index) {
  return new QMetaMethod(this_ptr->constructor(index));
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaObject_method(QMetaObject const * this_ptr, int index) {
  return new QMetaMethod(this_ptr->method(index));
}


RITUAL_EXPORT QMetaEnum * ctr_qt_core_ffi_QMetaObject_enumerator(QMetaObject const * this_ptr, int index) {
  return new QMetaEnum(this_ptr->enumerator(index));
}


RITUAL_EXPORT QMetaProperty * ctr_qt_core_ffi_QMetaObject_property(QMetaObject const * this_ptr, int index) {
  return new QMetaProperty(this_ptr->property(index));
}


RITUAL_EXPORT QMetaClassInfo * ctr_qt_core_ffi_QMetaObject_classInfo(QMetaObject const * this_ptr, int index) {
  return new QMetaClassInfo(this_ptr->classInfo(index));
}


RITUAL_EXPORT QMetaProperty * ctr_qt_core_ffi_QMetaObject_userProperty(QMetaObject const * this_ptr) {
  return new QMetaProperty(this_ptr->userProperty());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaObject_checkConnectArgs(char const * signal, char const * method) {
  return QMetaObject::checkConnectArgs(signal, method);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaObject_checkConnectArgs1(QMetaMethod const * signal, QMetaMethod const * method) {
  return QMetaObject::checkConnectArgs(*signal, *method);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMetaObject_normalizedSignature(char const * method) {
  return new QByteArray(QMetaObject::normalizedSignature(method));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMetaObject_normalizedType(char const * type) {
  return new QByteArray(QMetaObject::normalizedType(type));
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_connect(QObject const * sender, int signal_index, QObject const * receiver, int method_index, int type, int * types) {
  return new QMetaObject::Connection(QMetaObject::connect(sender, signal_index, receiver, method_index, type, types));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaObject_disconnect(QObject const * sender, int signal_index, QObject const * receiver, int method_index) {
  return QMetaObject::disconnect(sender, signal_index, receiver, method_index);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaObject_disconnectOne(QObject const * sender, int signal_index, QObject const * receiver, int method_index) {
  return QMetaObject::disconnectOne(sender, signal_index, receiver, method_index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_connectSlotsByName(QObject * o) {
  QMetaObject::connectSlotsByName(o);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_activate(QObject * sender, int signal_index, void * * argv) {
  QMetaObject::activate(sender, signal_index, argv);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_activate1(QObject * sender, QMetaObject const * arg2, int local_signal_index, void * * argv) {
  QMetaObject::activate(sender, arg2, local_signal_index, argv);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_activate2(QObject * sender, int signal_offset, int local_signal_index, void * * argv) {
  QMetaObject::activate(sender, signal_offset, local_signal_index, argv);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_static_metacall(QMetaObject const * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->static_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaObject_metacall(QObject * arg1, QMetaObject::Call arg2, int arg3, void * * arg4) {
  return QMetaObject::metacall(arg1, arg2, arg3, arg4);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_Connection_dConnection(QMetaObject::Connection * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_Connection_Connection() {
  return new QMetaObject::Connection();
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_Connection_Connection1(QMetaObject::Connection const * other) {
  return new QMetaObject::Connection(*other);
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_Connection_operator_(QMetaObject::Connection * this_ptr, QMetaObject::Connection const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1Char_QLatin1Char(char c) {
  return new QLatin1Char(c);
}


RITUAL_EXPORT char ctr_qt_core_ffi_QLatin1Char_toLatin1(QLatin1Char const * this_ptr) {
  return this_ptr->toLatin1();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLatin1Char_unicode(QLatin1Char const * this_ptr) {
  return this_ptr->unicode();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar() {
  return new QChar();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar1(unsigned short rc) {
  return new QChar(rc);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar2(unsigned char c, unsigned char r) {
  return new QChar(c, r);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar3(short rc) {
  return new QChar(rc);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar4(unsigned int rc) {
  return new QChar(rc);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar5(int rc) {
  return new QChar(rc);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar6(QChar::SpecialCharacter s) {
  return new QChar(s);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar7(QLatin1Char const * ch) {
  return new QChar(*ch);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar8(char c) {
  return new QChar(c);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar9(unsigned char c) {
  return new QChar(c);
}


RITUAL_EXPORT QChar::Category ctr_qt_core_ffi_QChar_category(QChar const * this_ptr) {
  return this_ptr->category();
}


RITUAL_EXPORT QChar::Direction ctr_qt_core_ffi_QChar_direction(QChar const * this_ptr) {
  return this_ptr->direction();
}


RITUAL_EXPORT QChar::JoiningType ctr_qt_core_ffi_QChar_joiningType(QChar const * this_ptr) {
  return this_ptr->joiningType();
}


RITUAL_EXPORT QChar::Joining ctr_qt_core_ffi_QChar_joining(QChar const * this_ptr) {
  return this_ptr->joining();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QChar_combiningClass(QChar const * this_ptr) {
  return this_ptr->combiningClass();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_mirroredChar(QChar const * this_ptr) {
  return new QChar(this_ptr->mirroredChar());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_hasMirrored(QChar const * this_ptr) {
  return this_ptr->hasMirrored();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QChar_decomposition(QChar const * this_ptr) {
  return new QString(this_ptr->decomposition());
}


RITUAL_EXPORT QChar::Decomposition ctr_qt_core_ffi_QChar_decompositionTag(QChar const * this_ptr) {
  return this_ptr->decompositionTag();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QChar_digitValue(QChar const * this_ptr) {
  return this_ptr->digitValue();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_toLower(QChar const * this_ptr) {
  return new QChar(this_ptr->toLower());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_toUpper(QChar const * this_ptr) {
  return new QChar(this_ptr->toUpper());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_toTitleCase(QChar const * this_ptr) {
  return new QChar(this_ptr->toTitleCase());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_toCaseFolded(QChar const * this_ptr) {
  return new QChar(this_ptr->toCaseFolded());
}


RITUAL_EXPORT QChar::Script ctr_qt_core_ffi_QChar_script(QChar const * this_ptr) {
  return this_ptr->script();
}


RITUAL_EXPORT QChar::UnicodeVersion ctr_qt_core_ffi_QChar_unicodeVersion(QChar const * this_ptr) {
  return this_ptr->unicodeVersion();
}


RITUAL_EXPORT char ctr_qt_core_ffi_QChar_toLatin1(QChar const * this_ptr) {
  return this_ptr->toLatin1();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QChar_unicode(QChar const * this_ptr) {
  return this_ptr->unicode();
}


RITUAL_EXPORT unsigned short * ctr_qt_core_ffi_QChar_unicode1(QChar * this_ptr) {
  return &this_ptr->unicode();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_fromLatin1(char c) {
  return new QChar(QChar::fromLatin1(c));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isNull(QChar const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isPrint(QChar const * this_ptr) {
  return this_ptr->isPrint();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSpace(QChar const * this_ptr) {
  return this_ptr->isSpace();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isMark(QChar const * this_ptr) {
  return this_ptr->isMark();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isPunct(QChar const * this_ptr) {
  return this_ptr->isPunct();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSymbol(QChar const * this_ptr) {
  return this_ptr->isSymbol();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLetter(QChar const * this_ptr) {
  return this_ptr->isLetter();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isNumber(QChar const * this_ptr) {
  return this_ptr->isNumber();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLetterOrNumber(QChar const * this_ptr) {
  return this_ptr->isLetterOrNumber();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isDigit(QChar const * this_ptr) {
  return this_ptr->isDigit();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLower(QChar const * this_ptr) {
  return this_ptr->isLower();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isUpper(QChar const * this_ptr) {
  return this_ptr->isUpper();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isTitleCase(QChar const * this_ptr) {
  return this_ptr->isTitleCase();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isNonCharacter(QChar const * this_ptr) {
  return this_ptr->isNonCharacter();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isHighSurrogate(QChar const * this_ptr) {
  return this_ptr->isHighSurrogate();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLowSurrogate(QChar const * this_ptr) {
  return this_ptr->isLowSurrogate();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSurrogate(QChar const * this_ptr) {
  return this_ptr->isSurrogate();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QChar_cell(QChar const * this_ptr) {
  return this_ptr->cell();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QChar_row(QChar const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QChar_setCell(QChar * this_ptr, unsigned char acell) {
  this_ptr->setCell(acell);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QChar_setRow(QChar * this_ptr, unsigned char arow) {
  this_ptr->setRow(arow);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isNonCharacter1(unsigned int ucs4) {
  return QChar::isNonCharacter(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isHighSurrogate1(unsigned int ucs4) {
  return QChar::isHighSurrogate(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLowSurrogate1(unsigned int ucs4) {
  return QChar::isLowSurrogate(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSurrogate1(unsigned int ucs4) {
  return QChar::isSurrogate(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_requiresSurrogates(unsigned int ucs4) {
  return QChar::requiresSurrogates(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_surrogateToUcs4(unsigned short high, unsigned short low) {
  return QChar::surrogateToUcs4(high, low);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_surrogateToUcs41(QChar const * high, QChar const * low) {
  return QChar::surrogateToUcs4(*high, *low);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QChar_highSurrogate(unsigned int ucs4) {
  return QChar::highSurrogate(ucs4);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QChar_lowSurrogate(unsigned int ucs4) {
  return QChar::lowSurrogate(ucs4);
}


RITUAL_EXPORT QChar::Category ctr_qt_core_ffi_QChar_category1(unsigned int ucs4) {
  return QChar::category(ucs4);
}


RITUAL_EXPORT QChar::Direction ctr_qt_core_ffi_QChar_direction1(unsigned int ucs4) {
  return QChar::direction(ucs4);
}


RITUAL_EXPORT QChar::JoiningType ctr_qt_core_ffi_QChar_joiningType1(unsigned int ucs4) {
  return QChar::joiningType(ucs4);
}


RITUAL_EXPORT QChar::Joining ctr_qt_core_ffi_QChar_joining1(unsigned int ucs4) {
  return QChar::joining(ucs4);
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QChar_combiningClass1(unsigned int ucs4) {
  return QChar::combiningClass(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_mirroredChar1(unsigned int ucs4) {
  return QChar::mirroredChar(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_hasMirrored1(unsigned int ucs4) {
  return QChar::hasMirrored(ucs4);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QChar_decomposition1(unsigned int ucs4) {
  return new QString(QChar::decomposition(ucs4));
}


RITUAL_EXPORT QChar::Decomposition ctr_qt_core_ffi_QChar_decompositionTag1(unsigned int ucs4) {
  return QChar::decompositionTag(ucs4);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QChar_digitValue1(unsigned int ucs4) {
  return QChar::digitValue(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_toLower1(unsigned int ucs4) {
  return QChar::toLower(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_toUpper1(unsigned int ucs4) {
  return QChar::toUpper(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_toTitleCase1(unsigned int ucs4) {
  return QChar::toTitleCase(ucs4);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QChar_toCaseFolded1(unsigned int ucs4) {
  return QChar::toCaseFolded(ucs4);
}


RITUAL_EXPORT QChar::Script ctr_qt_core_ffi_QChar_script1(unsigned int ucs4) {
  return QChar::script(ucs4);
}


RITUAL_EXPORT QChar::UnicodeVersion ctr_qt_core_ffi_QChar_unicodeVersion1(unsigned int ucs4) {
  return QChar::unicodeVersion(ucs4);
}


RITUAL_EXPORT QChar::UnicodeVersion ctr_qt_core_ffi_QChar_currentUnicodeVersion() {
  return QChar::currentUnicodeVersion();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isPrint1(unsigned int ucs4) {
  return QChar::isPrint(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSpace1(unsigned int ucs4) {
  return QChar::isSpace(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isMark1(unsigned int ucs4) {
  return QChar::isMark(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isPunct1(unsigned int ucs4) {
  return QChar::isPunct(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isSymbol1(unsigned int ucs4) {
  return QChar::isSymbol(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLetter1(unsigned int ucs4) {
  return QChar::isLetter(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isNumber1(unsigned int ucs4) {
  return QChar::isNumber(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLetterOrNumber1(unsigned int ucs4) {
  return QChar::isLetterOrNumber(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isDigit1(unsigned int ucs4) {
  return QChar::isDigit(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isLower1(unsigned int ucs4) {
  return QChar::isLower(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isUpper1(unsigned int ucs4) {
  return QChar::isUpper(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChar_isTitleCase1(unsigned int ucs4) {
  return QChar::isTitleCase(ucs4);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__(QChar const * c1, QChar const * c2) {
  return operator==(*c1, *c2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_(QChar const * c1, QChar const * c2) {
  return operator<(*c1, *c2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__2(QChar const * c1, QChar const * c2) {
  return operator>=(*c1, *c2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_1(QChar const * c1, QChar const * c2) {
  return operator>(*c1, *c2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__3(QChar const * c1, QChar const * c2) {
  return operator<=(*c1, *c2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__4(QDataStream * arg1, QChar const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__5(QDataStream * arg1, QChar * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT char * ctr_qt_core_ffi_qstrdup(char const * arg1) {
  return qstrdup(arg1);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qstrlen(char const * str) {
  return qstrlen(str);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qstrnlen(char const * str, unsigned int maxlen) {
  return qstrnlen(str, maxlen);
}


RITUAL_EXPORT char * ctr_qt_core_ffi_qstrcpy(char * dst, char const * src) {
  return qstrcpy(dst, src);
}


RITUAL_EXPORT char * ctr_qt_core_ffi_qstrncpy(char * dst, char const * src, unsigned int len) {
  return qstrncpy(dst, src, len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrcmp(char const * str1, char const * str2) {
  return qstrcmp(str1, str2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrcmp1(QByteArray const * str1, QByteArray const * str2) {
  return qstrcmp(*str1, *str2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrcmp2(QByteArray const * str1, char const * str2) {
  return qstrcmp(*str1, str2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrcmp3(char const * str1, QByteArray const * str2) {
  return qstrcmp(str1, *str2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrncmp(char const * str1, char const * str2, unsigned int len) {
  return qstrncmp(str1, str2, len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstricmp(char const * arg1, char const * arg2) {
  return qstricmp(arg1, arg2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qstrnicmp(char const * arg1, char const * arg2, unsigned int len) {
  return qstrnicmp(arg1, arg2, len);
}


RITUAL_EXPORT quint16 ctr_qt_core_ffi_qChecksum(char const * s, unsigned int len) {
  return qChecksum(s, len);
}


RITUAL_EXPORT quint16 ctr_qt_core_ffi_qChecksum1(char const * s, unsigned int len, Qt::ChecksumType standard) {
  return qChecksum(s, len, standard);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_QByteArray() {
  return new QByteArray();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_QByteArray1(char const * arg1, int size) {
  return new QByteArray(arg1, size);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_QByteArray2(int size, char c) {
  return new QByteArray(size, c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_QByteArray3(QByteArray const * arg1) {
  return new QByteArray(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_dQByteArray(QByteArray * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator_(QByteArray * this_ptr, QByteArray const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator_1(QByteArray * this_ptr, char const * str) {
  return &this_ptr->operator=(str);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_swap(QByteArray * this_ptr, QByteArray * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_size(QByteArray const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isEmpty(QByteArray const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_resize(QByteArray * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fill(QByteArray * this_ptr, char c, int size) {
  return &this_ptr->fill(c, size);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_capacity(QByteArray const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_reserve(QByteArray * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_squeeze(QByteArray * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_operator_const_char_(QByteArray const * this_ptr) {
  return this_ptr->operator const char*();
}


RITUAL_EXPORT void const * ctr_qt_core_ffi_QByteArray_operator_const_void_(QByteArray const * this_ptr) {
  return this_ptr->operator const void*();
}


RITUAL_EXPORT char * ctr_qt_core_ffi_QByteArray_data(QByteArray * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_data1(QByteArray const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_constData(QByteArray const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_detach(QByteArray * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isDetached(QByteArray const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isSharedWith(QByteArray const * this_ptr, QByteArray const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_clear(QByteArray * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT char ctr_qt_core_ffi_QByteArray_at(QByteArray const * this_ptr, int i) {
  return this_ptr->at(i);
}


RITUAL_EXPORT char ctr_qt_core_ffi_QByteArray_operator__(QByteArray const * this_ptr, int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT char ctr_qt_core_ffi_QByteArray_operator__1(QByteArray const * this_ptr, unsigned int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteArray_operator__2(QByteArray * this_ptr, int i) {
  return new QByteRef(this_ptr->operator[](i));
}


RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteArray_operator__3(QByteArray * this_ptr, unsigned int i) {
  return new QByteRef(this_ptr->operator[](i));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf(QByteArray const * this_ptr, char c, int from) {
  return this_ptr->indexOf(c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf1(QByteArray const * this_ptr, char const * c, int from) {
  return this_ptr->indexOf(c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf2(QByteArray const * this_ptr, QByteArray const * a, int from) {
  return this_ptr->indexOf(*a, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf(QByteArray const * this_ptr, char c, int from) {
  return this_ptr->lastIndexOf(c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf1(QByteArray const * this_ptr, char const * c, int from) {
  return this_ptr->lastIndexOf(c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf2(QByteArray const * this_ptr, QByteArray const * a, int from) {
  return this_ptr->lastIndexOf(*a, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_contains(QByteArray const * this_ptr, char c) {
  return this_ptr->contains(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_contains1(QByteArray const * this_ptr, char const * a) {
  return this_ptr->contains(a);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_contains2(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->contains(*a);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_count(QByteArray const * this_ptr, char c) {
  return this_ptr->count(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_count1(QByteArray const * this_ptr, char const * a) {
  return this_ptr->count(a);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_count2(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->count(*a);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_left(QByteArray const * this_ptr, int len) {
  return new QByteArray(this_ptr->left(len));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_right(QByteArray const * this_ptr, int len) {
  return new QByteArray(this_ptr->right(len));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_mid(QByteArray const * this_ptr, int index, int len) {
  return new QByteArray(this_ptr->mid(index, len));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_startsWith(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->startsWith(*a);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_startsWith1(QByteArray const * this_ptr, char c) {
  return this_ptr->startsWith(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_startsWith2(QByteArray const * this_ptr, char const * c) {
  return this_ptr->startsWith(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_endsWith(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->endsWith(*a);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_endsWith1(QByteArray const * this_ptr, char c) {
  return this_ptr->endsWith(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_endsWith2(QByteArray const * this_ptr, char const * c) {
  return this_ptr->endsWith(c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_truncate(QByteArray * this_ptr, int pos) {
  this_ptr->truncate(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_chop(QByteArray * this_ptr, int n) {
  this_ptr->chop(n);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toLower(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->toLower());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toLower1(QByteArray * this_ptr) {
  return new QByteArray(this_ptr->toLower());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toUpper(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->toUpper());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toUpper1(QByteArray * this_ptr) {
  return new QByteArray(this_ptr->toUpper());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_trimmed(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->trimmed());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_trimmed1(QByteArray * this_ptr) {
  return new QByteArray(this_ptr->trimmed());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_simplified(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->simplified());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_simplified1(QByteArray * this_ptr) {
  return new QByteArray(this_ptr->simplified());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_leftJustified(QByteArray const * this_ptr, int width, char fill, bool truncate) {
  return new QByteArray(this_ptr->leftJustified(width, fill, truncate));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_rightJustified(QByteArray const * this_ptr, int width, char fill, bool truncate) {
  return new QByteArray(this_ptr->rightJustified(width, fill, truncate));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_prepend(QByteArray * this_ptr, char c) {
  return &this_ptr->prepend(c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_prepend1(QByteArray * this_ptr, int count, char c) {
  return &this_ptr->prepend(count, c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_prepend2(QByteArray * this_ptr, char const * s) {
  return &this_ptr->prepend(s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_prepend3(QByteArray * this_ptr, char const * s, int len) {
  return &this_ptr->prepend(s, len);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_prepend4(QByteArray * this_ptr, QByteArray const * a) {
  return &this_ptr->prepend(*a);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append(QByteArray * this_ptr, char c) {
  return &this_ptr->append(c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append1(QByteArray * this_ptr, int count, char c) {
  return &this_ptr->append(count, c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append2(QByteArray * this_ptr, char const * s) {
  return &this_ptr->append(s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append3(QByteArray * this_ptr, char const * s, int len) {
  return &this_ptr->append(s, len);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append4(QByteArray * this_ptr, QByteArray const * a) {
  return &this_ptr->append(*a);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert(QByteArray * this_ptr, int i, char c) {
  return &this_ptr->insert(i, c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert1(QByteArray * this_ptr, int i, int count, char c) {
  return &this_ptr->insert(i, count, c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert2(QByteArray * this_ptr, int i, char const * s) {
  return &this_ptr->insert(i, s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert3(QByteArray * this_ptr, int i, char const * s, int len) {
  return &this_ptr->insert(i, s, len);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert4(QByteArray * this_ptr, int i, QByteArray const * a) {
  return &this_ptr->insert(i, *a);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_remove(QByteArray * this_ptr, int index, int len) {
  return &this_ptr->remove(index, len);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace(QByteArray * this_ptr, int index, int len, char const * s) {
  return &this_ptr->replace(index, len, s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace1(QByteArray * this_ptr, int index, int len, char const * s, int alen) {
  return &this_ptr->replace(index, len, s, alen);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace2(QByteArray * this_ptr, int index, int len, QByteArray const * s) {
  return &this_ptr->replace(index, len, *s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace3(QByteArray * this_ptr, char before, char const * after) {
  return &this_ptr->replace(before, after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace4(QByteArray * this_ptr, char before, QByteArray const * after) {
  return &this_ptr->replace(before, *after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace5(QByteArray * this_ptr, char const * before, char const * after) {
  return &this_ptr->replace(before, after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace6(QByteArray * this_ptr, char const * before, int bsize, char const * after, int asize) {
  return &this_ptr->replace(before, bsize, after, asize);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace7(QByteArray * this_ptr, QByteArray const * before, QByteArray const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace8(QByteArray * this_ptr, QByteArray const * before, char const * after) {
  return &this_ptr->replace(*before, after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace9(QByteArray * this_ptr, char const * before, QByteArray const * after) {
  return &this_ptr->replace(before, *after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace10(QByteArray * this_ptr, char before, char after) {
  return &this_ptr->replace(before, after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator__4(QByteArray * this_ptr, char c) {
  return &this_ptr->operator+=(c);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator__5(QByteArray * this_ptr, char const * s) {
  return &this_ptr->operator+=(s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator__6(QByteArray * this_ptr, QByteArray const * a) {
  return &this_ptr->operator+=(*a);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QByteArray_split(QByteArray const * this_ptr, char sep) {
  return new QList< QByteArray >(this_ptr->split(sep));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_repeated(QByteArray const * this_ptr, int times) {
  return new QByteArray(this_ptr->repeated(times));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_append5(QByteArray * this_ptr, QString const * s) {
  return &this_ptr->append(*s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_insert5(QByteArray * this_ptr, int i, QString const * s) {
  return &this_ptr->insert(i, *s);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace11(QByteArray * this_ptr, QString const * before, char const * after) {
  return &this_ptr->replace(*before, after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace12(QByteArray * this_ptr, char c, QString const * after) {
  return &this_ptr->replace(c, *after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_replace13(QByteArray * this_ptr, QString const * before, QByteArray const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_operator__7(QByteArray * this_ptr, QString const * s) {
  return &this_ptr->operator+=(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf3(QByteArray const * this_ptr, QString const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf3(QByteArray const * this_ptr, QString const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_operator__8(QByteArray const * this_ptr, QString const * s2) {
  return this_ptr->operator==(*s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_operator_3(QByteArray const * this_ptr, QString const * s2) {
  return this_ptr->operator<(*s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_operator_4(QByteArray const * this_ptr, QString const * s2) {
  return this_ptr->operator>(*s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_operator__10(QByteArray const * this_ptr, QString const * s2) {
  return this_ptr->operator<=(*s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_operator__11(QByteArray const * this_ptr, QString const * s2) {
  return this_ptr->operator>=(*s2);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QByteArray_toShort(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toShort(ok, base);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QByteArray_toUShort(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toUShort(ok, base);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_toInt(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toInt(ok, base);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QByteArray_toUInt(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toUInt(ok, base);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QByteArray_toLong(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toLong(ok, base);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QByteArray_toULong(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toULong(ok, base);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QByteArray_toLongLong(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toLongLong(ok, base);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QByteArray_toULongLong(QByteArray const * this_ptr, bool * ok, int base) {
  return this_ptr->toULongLong(ok, base);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QByteArray_toFloat(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toFloat(ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QByteArray_toDouble(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toDouble(ok);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toBase64(QByteArray const * this_ptr, int options) {
  return new QByteArray(this_ptr->toBase64(QFlags< QByteArray::Base64Option >(options)));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toBase641(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->toBase64());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toHex(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->toHex());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toHex1(QByteArray const * this_ptr, char separator) {
  return new QByteArray(this_ptr->toHex(separator));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toPercentEncoding(QByteArray const * this_ptr, QByteArray const * exclude, QByteArray const * include, char percent) {
  return new QByteArray(this_ptr->toPercentEncoding(*exclude, *include, percent));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum(QByteArray * this_ptr, short arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum1(QByteArray * this_ptr, unsigned short arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum2(QByteArray * this_ptr, int arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum3(QByteArray * this_ptr, unsigned int arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum4(QByteArray * this_ptr, qlonglong arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum5(QByteArray * this_ptr, qulonglong arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum6(QByteArray * this_ptr, float arg1, char f, int prec) {
  return &this_ptr->setNum(arg1, f, prec);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum7(QByteArray * this_ptr, double arg1, char f, int prec) {
  return &this_ptr->setNum(arg1, f, prec);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setRawData(QByteArray * this_ptr, char const * a, unsigned int n) {
  return &this_ptr->setRawData(a, n);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number(int arg1, int base) {
  return new QByteArray(QByteArray::number(arg1, base));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number1(unsigned int arg1, int base) {
  return new QByteArray(QByteArray::number(arg1, base));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number2(qlonglong arg1, int base) {
  return new QByteArray(QByteArray::number(arg1, base));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number3(qulonglong arg1, int base) {
  return new QByteArray(QByteArray::number(arg1, base));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number4(double arg1, char f, int prec) {
  return new QByteArray(QByteArray::number(arg1, f, prec));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromRawData(char const * arg1, int size) {
  return new QByteArray(QByteArray::fromRawData(arg1, size));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromBase64(QByteArray const * base64, int options) {
  return new QByteArray(QByteArray::fromBase64(*base64, QFlags< QByteArray::Base64Option >(options)));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromBase641(QByteArray const * base64) {
  return new QByteArray(QByteArray::fromBase64(*base64));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromHex(QByteArray const * hexEncoded) {
  return new QByteArray(QByteArray::fromHex(*hexEncoded));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromPercentEncoding(QByteArray const * pctEncoded, char percent) {
  return new QByteArray(QByteArray::fromPercentEncoding(*pctEncoded, percent));
}


RITUAL_EXPORT char * ctr_qt_core_ffi_QByteArray_begin(QByteArray * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_begin1(QByteArray const * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_cbegin(QByteArray const * this_ptr) {
  return this_ptr->cbegin();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_constBegin(QByteArray const * this_ptr) {
  return this_ptr->constBegin();
}


RITUAL_EXPORT char * ctr_qt_core_ffi_QByteArray_end(QByteArray * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_end1(QByteArray const * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_cend(QByteArray const * this_ptr) {
  return this_ptr->cend();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QByteArray_constEnd(QByteArray const * this_ptr) {
  return this_ptr->constEnd();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_back(QByteArray * this_ptr, char c) {
  this_ptr->push_back(c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_back1(QByteArray * this_ptr, char const * c) {
  this_ptr->push_back(c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_back2(QByteArray * this_ptr, QByteArray const * a) {
  this_ptr->push_back(*a);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_front(QByteArray * this_ptr, char c) {
  this_ptr->push_front(c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_front1(QByteArray * this_ptr, char const * c) {
  this_ptr->push_front(c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_push_front2(QByteArray * this_ptr, QByteArray const * a) {
  this_ptr->push_front(*a);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_count3(QByteArray const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_length(QByteArray const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isNull(QByteArray const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT char ctr_qt_core_ffi_QByteRef_operator_char(QByteRef const * this_ptr) {
  return this_ptr->operator char();
}


RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteRef_operator_(QByteRef * this_ptr, char c) {
  return &this_ptr->operator=(c);
}


RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteRef_operator_1(QByteRef * this_ptr, QByteRef const * c) {
  return &this_ptr->operator=(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteRef_operator__(QByteRef const * this_ptr, char c) {
  return this_ptr->operator==(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteRef_operator_2(QByteRef const * this_ptr, char c) {
  return this_ptr->operator>(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteRef_operator__2(QByteRef const * this_ptr, char c) {
  return this_ptr->operator>=(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteRef_operator_3(QByteRef const * this_ptr, char c) {
  return this_ptr->operator<(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QByteRef_operator__3(QByteRef const * this_ptr, char c) {
  return this_ptr->operator<=(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__6(QByteArray const * a1, QByteArray const * a2) {
  return operator==(*a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__7(QByteArray const * a1, char const * a2) {
  return operator==(*a1, a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__8(char const * a1, QByteArray const * a2) {
  return operator==(a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_2(QByteArray const * a1, QByteArray const * a2) {
  return operator<(*a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_3(QByteArray const * a1, char const * a2) {
  return operator<(*a1, a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_4(char const * a1, QByteArray const * a2) {
  return operator<(a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__12(QByteArray const * a1, QByteArray const * a2) {
  return operator<=(*a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__13(QByteArray const * a1, char const * a2) {
  return operator<=(*a1, a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__14(char const * a1, QByteArray const * a2) {
  return operator<=(a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_5(QByteArray const * a1, QByteArray const * a2) {
  return operator>(*a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_6(QByteArray const * a1, char const * a2) {
  return operator>(*a1, a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_7(char const * a1, QByteArray const * a2) {
  return operator>(a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__15(QByteArray const * a1, QByteArray const * a2) {
  return operator>=(*a1, *a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__16(QByteArray const * a1, char const * a2) {
  return operator>=(*a1, a2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__17(char const * a1, QByteArray const * a2) {
  return operator>=(a1, *a2);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_operator_8(QByteArray const * a1, QByteArray const * a2) {
  return new QByteArray(operator+(*a1, *a2));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_operator_9(QByteArray const * a1, char const * a2) {
  return new QByteArray(operator+(*a1, a2));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_operator_10(QByteArray const * a1, char a2) {
  return new QByteArray(operator+(*a1, a2));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_operator_11(char const * a1, QByteArray const * a2) {
  return new QByteArray(operator+(a1, *a2));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_operator_12(char a1, QByteArray const * a2) {
  return new QByteArray(operator+(a1, *a2));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__18(QDataStream * arg1, QByteArray const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__19(QDataStream * arg1, QByteArray * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qCompress(unsigned char const * data, int nbytes, int compressionLevel) {
  return new QByteArray(qCompress(data, nbytes, compressionLevel));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qUncompress(unsigned char const * data, int nbytes) {
  return new QByteArray(qUncompress(data, nbytes));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qCompress1(QByteArray const * data, int compressionLevel) {
  return new QByteArray(qCompress(*data, compressionLevel));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qUncompress1(QByteArray const * data) {
  return new QByteArray(qUncompress(*data));
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String() {
  return new QLatin1String();
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String1(char const * s) {
  return new QLatin1String(s);
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String2(char const * s, int sz) {
  return new QLatin1String(s, sz);
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String3(QByteArray const * s) {
  return new QLatin1String(*s);
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_latin1(QLatin1String const * this_ptr) {
  return this_ptr->latin1();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_size(QLatin1String const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_data(QLatin1String const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1String_at(QLatin1String const * this_ptr, int i) {
  return new QLatin1Char(this_ptr->at(i));
}


RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1String_operator__(QLatin1String const * this_ptr, int i) {
  return new QLatin1Char(this_ptr->operator[](i));
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_mid(QLatin1String const * this_ptr, int pos) {
  return new QLatin1String(this_ptr->mid(pos));
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_mid1(QLatin1String const * this_ptr, int pos, int n) {
  return new QLatin1String(this_ptr->mid(pos, n));
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_left(QLatin1String const * this_ptr, int n) {
  return new QLatin1String(this_ptr->left(n));
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_right(QLatin1String const * this_ptr, int n) {
  return new QLatin1String(this_ptr->right(n));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__1(QLatin1String const * this_ptr, QString const * s) {
  return this_ptr->operator==(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_(QLatin1String const * this_ptr, QString const * s) {
  return this_ptr->operator>(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_1(QLatin1String const * this_ptr, QString const * s) {
  return this_ptr->operator<(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__3(QLatin1String const * this_ptr, QString const * s) {
  return this_ptr->operator>=(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__4(QLatin1String const * this_ptr, QString const * s) {
  return this_ptr->operator<=(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__5(QLatin1String const * this_ptr, char const * s) {
  return this_ptr->operator==(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_2(QLatin1String const * this_ptr, char const * s) {
  return this_ptr->operator<(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_3(QLatin1String const * this_ptr, char const * s) {
  return this_ptr->operator>(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__7(QLatin1String const * this_ptr, char const * s) {
  return this_ptr->operator<=(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__8(QLatin1String const * this_ptr, char const * s) {
  return this_ptr->operator>=(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__9(QLatin1String const * this_ptr, QByteArray const * s) {
  return this_ptr->operator==(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_4(QLatin1String const * this_ptr, QByteArray const * s) {
  return this_ptr->operator<(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator_5(QLatin1String const * this_ptr, QByteArray const * s) {
  return this_ptr->operator>(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__11(QLatin1String const * this_ptr, QByteArray const * s) {
  return this_ptr->operator<=(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_operator__12(QLatin1String const * this_ptr, QByteArray const * s) {
  return this_ptr->operator>=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString() {
  return new QString();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString1(QChar const * unicode, int size) {
  return new QString(unicode, size);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString2(QChar const * c) {
  return new QString(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString3(int size, QChar const * c) {
  return new QString(size, *c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString4(QLatin1String const * latin1) {
  return new QString(*latin1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString5(QString const * arg1) {
  return new QString(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_dQString(QString * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_(QString * this_ptr, QChar const * c) {
  return &this_ptr->operator=(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_1(QString * this_ptr, QString const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_2(QString * this_ptr, QLatin1String const * latin1) {
  return &this_ptr->operator=(*latin1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_swap(QString * this_ptr, QString * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_size(QString const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count(QString const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_length(QString const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isEmpty(QString const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_resize(QString * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_resize1(QString * this_ptr, int size, QChar const * fillChar) {
  this_ptr->resize(size, *fillChar);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fill(QString * this_ptr, QChar const * c, int size) {
  return &this_ptr->fill(*c, size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_truncate(QString * this_ptr, int pos) {
  this_ptr->truncate(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_chop(QString * this_ptr, int n) {
  this_ptr->chop(n);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_capacity(QString const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_reserve(QString * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_squeeze(QString * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_unicode(QString const * this_ptr) {
  return this_ptr->unicode();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_data(QString * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_data1(QString const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_constData(QString const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_detach(QString * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isDetached(QString const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isSharedWith(QString const * this_ptr, QString const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_clear(QString * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_at(QString const * this_ptr, int i) {
  return new QChar(this_ptr->at(i));
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_operator__(QString const * this_ptr, int i) {
  return new QChar(this_ptr->operator[](i));
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QString_operator__1(QString * this_ptr, int i) {
  return new QCharRef(this_ptr->operator[](i));
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_operator__2(QString const * this_ptr, unsigned int i) {
  return new QChar(this_ptr->operator[](i));
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QString_operator__3(QString * this_ptr, unsigned int i) {
  return new QCharRef(this_ptr->operator[](i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg(QString const * this_ptr, qlonglong a, int fieldwidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldwidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg1(QString const * this_ptr, qulonglong a, int fieldwidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldwidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg2(QString const * this_ptr, long a, int fieldwidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldwidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg3(QString const * this_ptr, unsigned long a, int fieldwidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldwidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg4(QString const * this_ptr, int a, int fieldWidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg5(QString const * this_ptr, unsigned int a, int fieldWidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg6(QString const * this_ptr, short a, int fieldWidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg7(QString const * this_ptr, unsigned short a, int fieldWidth, int base, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, base, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg8(QString const * this_ptr, double a, int fieldWidth, char fmt, int prec, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, fmt, prec, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg9(QString const * this_ptr, char a, int fieldWidth, QChar const * fillChar) {
  return new QString(this_ptr->arg(a, fieldWidth, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg10(QString const * this_ptr, QChar const * a, int fieldWidth, QChar const * fillChar) {
  return new QString(this_ptr->arg(*a, fieldWidth, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg11(QString const * this_ptr, QString const * a, int fieldWidth, QChar const * fillChar) {
  return new QString(this_ptr->arg(*a, fieldWidth, *fillChar));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg12(QString const * this_ptr, QString const * a1, QString const * a2) {
  return new QString(this_ptr->arg(*a1, *a2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg13(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3) {
  return new QString(this_ptr->arg(*a1, *a2, *a3));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg14(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg15(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4, QString const * a5) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4, *a5));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg16(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4, QString const * a5, QString const * a6) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4, *a5, *a6));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg17(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4, QString const * a5, QString const * a6, QString const * a7) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4, *a5, *a6, *a7));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg18(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4, QString const * a5, QString const * a6, QString const * a7, QString const * a8) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg19(QString const * this_ptr, QString const * a1, QString const * a2, QString const * a3, QString const * a4, QString const * a5, QString const * a6, QString const * a7, QString const * a8, QString const * a9) {
  return new QString(this_ptr->arg(*a1, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf(QString const * this_ptr, QChar const * c, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*c, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf1(QString const * this_ptr, QString const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf2(QString const * this_ptr, QLatin1String const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf3(QString const * this_ptr, QStringRef const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf(QString const * this_ptr, QChar const * c, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*c, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf1(QString const * this_ptr, QString const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf2(QString const * this_ptr, QLatin1String const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf3(QString const * this_ptr, QStringRef const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains(QString const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*c, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains1(QString const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains2(QString const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains3(QString const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count1(QString const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->count(*c, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count2(QString const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->count(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count3(QString const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->count(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf4(QString const * this_ptr, QRegExp const * arg1, int from) {
  return this_ptr->indexOf(*arg1, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf4(QString const * this_ptr, QRegExp const * arg1, int from) {
  return this_ptr->lastIndexOf(*arg1, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains4(QString const * this_ptr, QRegExp const * rx) {
  return this_ptr->contains(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count4(QString const * this_ptr, QRegExp const * arg1) {
  return this_ptr->count(*arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf5(QString const * this_ptr, QRegExp * arg1, int from) {
  return this_ptr->indexOf(*arg1, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf5(QString const * this_ptr, QRegExp * arg1, int from) {
  return this_ptr->lastIndexOf(*arg1, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains5(QString const * this_ptr, QRegExp * rx) {
  return this_ptr->contains(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf6(QString const * this_ptr, QRegularExpression const * re, int from) {
  return this_ptr->indexOf(*re, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf7(QString const * this_ptr, QRegularExpression const * re, int from, QRegularExpressionMatch * rmatch) {
  return this_ptr->indexOf(*re, from, rmatch);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf6(QString const * this_ptr, QRegularExpression const * re, int from) {
  return this_ptr->lastIndexOf(*re, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf7(QString const * this_ptr, QRegularExpression const * re, int from, QRegularExpressionMatch * rmatch) {
  return this_ptr->lastIndexOf(*re, from, rmatch);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains6(QString const * this_ptr, QRegularExpression const * re) {
  return this_ptr->contains(*re);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains7(QString const * this_ptr, QRegularExpression const * re, QRegularExpressionMatch * match) {
  return this_ptr->contains(*re, match);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count5(QString const * this_ptr, QRegularExpression const * re) {
  return this_ptr->count(*re);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section(QString const * this_ptr, QChar const * sep, int start, int end, int flags) {
  return new QString(this_ptr->section(*sep, start, end, QFlags< QString::SectionFlag >(flags)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section1(QString const * this_ptr, QString const * in_sep, int start, int end, int flags) {
  return new QString(this_ptr->section(*in_sep, start, end, QFlags< QString::SectionFlag >(flags)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section2(QString const * this_ptr, QRegExp const * reg, int start, int end, int flags) {
  return new QString(this_ptr->section(*reg, start, end, QFlags< QString::SectionFlag >(flags)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section3(QString const * this_ptr, QRegularExpression const * re, int start, int end, int flags) {
  return new QString(this_ptr->section(*re, start, end, QFlags< QString::SectionFlag >(flags)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_left(QString const * this_ptr, int n) {
  return new QString(this_ptr->left(n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_right(QString const * this_ptr, int n) {
  return new QString(this_ptr->right(n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_mid(QString const * this_ptr, int position, int n) {
  return new QString(this_ptr->mid(position, n));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QString_leftRef(QString const * this_ptr, int n) {
  return new QStringRef(this_ptr->leftRef(n));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QString_rightRef(QString const * this_ptr, int n) {
  return new QStringRef(this_ptr->rightRef(n));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QString_midRef(QString const * this_ptr, int position, int n) {
  return new QStringRef(this_ptr->midRef(position, n));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith(QString const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith1(QString const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith2(QString const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith3(QString const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*c, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith(QString const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith1(QString const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith2(QString const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith3(QString const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*c, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_leftJustified(QString const * this_ptr, int width, QChar const * fill, bool trunc) {
  return new QString(this_ptr->leftJustified(width, *fill, trunc));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_rightJustified(QString const * this_ptr, int width, QChar const * fill, bool trunc) {
  return new QString(this_ptr->rightJustified(width, *fill, trunc));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toLower(QString const * this_ptr) {
  return new QString(this_ptr->toLower());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toLower1(QString * this_ptr) {
  return new QString(this_ptr->toLower());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toUpper(QString const * this_ptr) {
  return new QString(this_ptr->toUpper());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toUpper1(QString * this_ptr) {
  return new QString(this_ptr->toUpper());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toCaseFolded(QString const * this_ptr) {
  return new QString(this_ptr->toCaseFolded());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toCaseFolded1(QString * this_ptr) {
  return new QString(this_ptr->toCaseFolded());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_trimmed(QString const * this_ptr) {
  return new QString(this_ptr->trimmed());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_trimmed1(QString * this_ptr) {
  return new QString(this_ptr->trimmed());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_simplified(QString const * this_ptr) {
  return new QString(this_ptr->simplified());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_simplified1(QString * this_ptr) {
  return new QString(this_ptr->simplified());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_toHtmlEscaped(QString const * this_ptr) {
  return new QString(this_ptr->toHtmlEscaped());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert(QString * this_ptr, int i, QChar const * c) {
  return &this_ptr->insert(i, *c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert1(QString * this_ptr, int i, QChar const * uc, int len) {
  return &this_ptr->insert(i, uc, len);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert2(QString * this_ptr, int i, QString const * s) {
  return &this_ptr->insert(i, *s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert3(QString * this_ptr, int i, QStringRef const * s) {
  return &this_ptr->insert(i, *s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert4(QString * this_ptr, int i, QLatin1String const * s) {
  return &this_ptr->insert(i, *s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append(QString * this_ptr, QChar const * c) {
  return &this_ptr->append(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append1(QString * this_ptr, QChar const * uc, int len) {
  return &this_ptr->append(uc, len);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append2(QString * this_ptr, QString const * s) {
  return &this_ptr->append(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append3(QString * this_ptr, QStringRef const * s) {
  return &this_ptr->append(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append4(QString * this_ptr, QLatin1String const * s) {
  return &this_ptr->append(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend(QString * this_ptr, QChar const * c) {
  return &this_ptr->prepend(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend1(QString * this_ptr, QChar const * uc, int len) {
  return &this_ptr->prepend(uc, len);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend2(QString * this_ptr, QString const * s) {
  return &this_ptr->prepend(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend3(QString * this_ptr, QStringRef const * s) {
  return &this_ptr->prepend(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend4(QString * this_ptr, QLatin1String const * s) {
  return &this_ptr->prepend(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__4(QString * this_ptr, QChar const * c) {
  return &this_ptr->operator+=(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__5(QString * this_ptr, QChar::SpecialCharacter c) {
  return &this_ptr->operator+=(c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__6(QString * this_ptr, QString const * s) {
  return &this_ptr->operator+=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__7(QString * this_ptr, QStringRef const * s) {
  return &this_ptr->operator+=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__8(QString * this_ptr, QLatin1String const * s) {
  return &this_ptr->operator+=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove(QString * this_ptr, int i, int len) {
  return &this_ptr->remove(i, len);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove1(QString * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return &this_ptr->remove(*c, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove2(QString * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return &this_ptr->remove(*s, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace(QString * this_ptr, int i, int len, QChar const * after) {
  return &this_ptr->replace(i, len, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace1(QString * this_ptr, int i, int len, QChar const * s, int slen) {
  return &this_ptr->replace(i, len, s, slen);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace2(QString * this_ptr, int i, int len, QString const * after) {
  return &this_ptr->replace(i, len, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace3(QString * this_ptr, QChar const * before, QChar const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*before, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace4(QString * this_ptr, QChar const * before, int blen, QChar const * after, int alen, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(before, blen, after, alen, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace5(QString * this_ptr, QLatin1String const * before, QLatin1String const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*before, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace6(QString * this_ptr, QLatin1String const * before, QString const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*before, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace7(QString * this_ptr, QString const * before, QLatin1String const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*before, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace8(QString * this_ptr, QString const * before, QString const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*before, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace9(QString * this_ptr, QChar const * c, QString const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*c, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace10(QString * this_ptr, QChar const * c, QLatin1String const * after, Qt::CaseSensitivity cs) {
  return &this_ptr->replace(*c, *after, cs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace11(QString * this_ptr, QRegExp const * rx, QString const * after) {
  return &this_ptr->replace(*rx, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove3(QString * this_ptr, QRegExp const * rx) {
  return &this_ptr->remove(*rx);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace12(QString * this_ptr, QRegularExpression const * re, QString const * after) {
  return &this_ptr->replace(*re, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove4(QString * this_ptr, QRegularExpression const * re) {
  return &this_ptr->remove(*re);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split(QString const * this_ptr, QString const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QStringList(this_ptr->split(*sep, behavior, cs));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef(QString const * this_ptr, QString const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior, cs));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split1(QString const * this_ptr, QChar const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QStringList(this_ptr->split(*sep, behavior, cs));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef1(QString const * this_ptr, QChar const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior, cs));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split2(QString const * this_ptr, QRegExp const * sep, QString::SplitBehavior behavior) {
  return new QStringList(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef2(QString const * this_ptr, QRegExp const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split3(QString const * this_ptr, QRegularExpression const * sep, QString::SplitBehavior behavior) {
  return new QStringList(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef3(QString const * this_ptr, QRegularExpression const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_normalized(QString const * this_ptr, QString::NormalizationForm mode, QChar::UnicodeVersion version) {
  return new QString(this_ptr->normalized(mode, version));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_repeated(QString const * this_ptr, int times) {
  return new QString(this_ptr->repeated(times));
}


RITUAL_EXPORT unsigned short const * ctr_qt_core_ffi_QString_utf16(QString const * this_ptr) {
  return this_ptr->utf16();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toLatin1(QString const * this_ptr) {
  return new QByteArray(this_ptr->toLatin1());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toLatin11(QString * this_ptr) {
  return new QByteArray(this_ptr->toLatin1());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toUtf8(QString const * this_ptr) {
  return new QByteArray(this_ptr->toUtf8());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toUtf81(QString * this_ptr) {
  return new QByteArray(this_ptr->toUtf8());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toLocal8Bit(QString const * this_ptr) {
  return new QByteArray(this_ptr->toLocal8Bit());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QString_toLocal8Bit1(QString * this_ptr) {
  return new QByteArray(this_ptr->toLocal8Bit());
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QString_toUcs4(QString const * this_ptr) {
  return new QVector< unsigned int >(this_ptr->toUcs4());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLatin1(char const * str, int size) {
  return new QString(QString::fromLatin1(str, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf8(char const * str, int size) {
  return new QString(QString::fromUtf8(str, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLocal8Bit(char const * str, int size) {
  return new QString(QString::fromLocal8Bit(str, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLatin11(QByteArray const * str) {
  return new QString(QString::fromLatin1(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf81(QByteArray const * str) {
  return new QString(QString::fromUtf8(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLocal8Bit1(QByteArray const * str) {
  return new QString(QString::fromLocal8Bit(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf16(unsigned short const * arg1, int size) {
  return new QString(QString::fromUtf16(arg1, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUcs4(unsigned int const * arg1, int size) {
  return new QString(QString::fromUcs4(arg1, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromRawData(QChar const * arg1, int size) {
  return new QString(QString::fromRawData(arg1, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf161(char16_t const * str, int size) {
  return new QString(QString::fromUtf16(str, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUcs41(char32_t const * str, int size) {
  return new QString(QString::fromUcs4(str, size));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_toWCharArray(QString const * this_ptr, wchar_t * array) {
  return this_ptr->toWCharArray(array);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromWCharArray(wchar_t const * string, int size) {
  return new QString(QString::fromWCharArray(string, size));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setRawData(QString * this_ptr, QChar const * unicode, int size) {
  return &this_ptr->setRawData(unicode, size);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setUnicode(QString * this_ptr, QChar const * unicode, int size) {
  return &this_ptr->setUnicode(unicode, size);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setUtf16(QString * this_ptr, unsigned short const * utf16, int size) {
  return &this_ptr->setUtf16(utf16, size);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare(QString const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare1(QString const * this_ptr, QLatin1String const * other, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*other, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare2(QString const * s1, QString const * s2, Qt::CaseSensitivity cs) {
  return QString::compare(*s1, *s2, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare3(QString const * s1, QLatin1String const * s2, Qt::CaseSensitivity cs) {
  return QString::compare(*s1, *s2, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare4(QLatin1String const * s1, QString const * s2, Qt::CaseSensitivity cs) {
  return QString::compare(*s1, *s2, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare5(QString const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare6(QString const * s1, QStringRef const * s2, Qt::CaseSensitivity arg3) {
  return QString::compare(*s1, *s2, arg3);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_localeAwareCompare(QString const * this_ptr, QString const * s) {
  return this_ptr->localeAwareCompare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_localeAwareCompare1(QString const * s1, QString const * s2) {
  return QString::localeAwareCompare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_localeAwareCompare2(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->localeAwareCompare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_localeAwareCompare3(QString const * s1, QStringRef const * s2) {
  return QString::localeAwareCompare(*s1, *s2);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QString_toShort(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toShort(ok, base);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QString_toUShort(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toUShort(ok, base);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_toInt(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toInt(ok, base);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QString_toUInt(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toUInt(ok, base);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QString_toLong(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toLong(ok, base);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QString_toULong(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toULong(ok, base);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QString_toLongLong(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toLongLong(ok, base);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QString_toULongLong(QString const * this_ptr, bool * ok, int base) {
  return this_ptr->toULongLong(ok, base);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QString_toFloat(QString const * this_ptr, bool * ok) {
  return this_ptr->toFloat(ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QString_toDouble(QString const * this_ptr, bool * ok) {
  return this_ptr->toDouble(ok);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum(QString * this_ptr, short arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum1(QString * this_ptr, unsigned short arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum2(QString * this_ptr, int arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum3(QString * this_ptr, unsigned int arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum4(QString * this_ptr, long arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum5(QString * this_ptr, unsigned long arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum6(QString * this_ptr, qlonglong arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum7(QString * this_ptr, qulonglong arg1, int base) {
  return &this_ptr->setNum(arg1, base);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum8(QString * this_ptr, float arg1, char f, int prec) {
  return &this_ptr->setNum(arg1, f, prec);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum9(QString * this_ptr, double arg1, char f, int prec) {
  return &this_ptr->setNum(arg1, f, prec);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number(int arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number1(unsigned int arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number2(long arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number3(unsigned long arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number4(qlonglong arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number5(qulonglong arg1, int base) {
  return new QString(QString::number(arg1, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number6(double arg1, char f, int prec) {
  return new QString(QString::number(arg1, f, prec));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__9(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->operator==(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_4(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->operator<(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_5(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->operator>(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__11(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->operator<=(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__12(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->operator>=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString7(char const * ch) {
  return new QString(ch);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString8(QByteArray const * a) {
  return new QString(*a);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_6(QString * this_ptr, char const * ch) {
  return &this_ptr->operator=(ch);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_7(QString * this_ptr, QByteArray const * a) {
  return &this_ptr->operator=(*a);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator_8(QString * this_ptr, char c) {
  return &this_ptr->operator=(c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend5(QString * this_ptr, char const * s) {
  return &this_ptr->prepend(s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_prepend6(QString * this_ptr, QByteArray const * s) {
  return &this_ptr->prepend(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append5(QString * this_ptr, char const * s) {
  return &this_ptr->append(s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_append6(QString * this_ptr, QByteArray const * s) {
  return &this_ptr->append(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert5(QString * this_ptr, int i, char const * s) {
  return &this_ptr->insert(i, s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_insert6(QString * this_ptr, int i, QByteArray const * s) {
  return &this_ptr->insert(i, *s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__13(QString * this_ptr, char const * s) {
  return &this_ptr->operator+=(s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__14(QString * this_ptr, QByteArray const * s) {
  return &this_ptr->operator+=(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_operator__15(QString * this_ptr, char c) {
  return &this_ptr->operator+=(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__16(QString const * this_ptr, char const * s) {
  return this_ptr->operator==(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_9(QString const * this_ptr, char const * s) {
  return this_ptr->operator<(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__18(QString const * this_ptr, char const * s) {
  return this_ptr->operator<=(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_10(QString const * this_ptr, char const * s) {
  return this_ptr->operator>(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__19(QString const * this_ptr, char const * s) {
  return this_ptr->operator>=(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__20(QString const * this_ptr, QByteArray const * s) {
  return this_ptr->operator==(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_11(QString const * this_ptr, QByteArray const * s) {
  return this_ptr->operator<(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator_12(QString const * this_ptr, QByteArray const * s) {
  return this_ptr->operator>(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__22(QString const * this_ptr, QByteArray const * s) {
  return this_ptr->operator<=(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_operator__23(QString const * this_ptr, QByteArray const * s) {
  return this_ptr->operator>=(*s);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_begin(QString * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_begin1(QString const * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_cbegin(QString const * this_ptr) {
  return this_ptr->cbegin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_constBegin(QString const * this_ptr) {
  return this_ptr->constBegin();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_end(QString * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_end1(QString const * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_cend(QString const * this_ptr) {
  return this_ptr->cend();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QString_constEnd(QString const * this_ptr) {
  return this_ptr->constEnd();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_push_back(QString * this_ptr, QChar const * c) {
  this_ptr->push_back(*c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_push_back1(QString * this_ptr, QString const * s) {
  this_ptr->push_back(*s);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_push_front(QString * this_ptr, QChar const * c) {
  this_ptr->push_front(*c);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QString_push_front1(QString * this_ptr, QString const * s) {
  this_ptr->push_front(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isNull(QString const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isSimpleText(QString const * this_ptr) {
  return this_ptr->isSimpleText();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isRightToLeft(QString const * this_ptr) {
  return this_ptr->isRightToLeft();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QCharRef_operator_QChar(QCharRef const * this_ptr) {
  return new QChar(this_ptr->operator QChar());
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_(QCharRef * this_ptr, QChar const * c) {
  return &this_ptr->operator=(*c);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_1(QCharRef * this_ptr, char c) {
  return &this_ptr->operator=(c);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_2(QCharRef * this_ptr, unsigned char c) {
  return &this_ptr->operator=(c);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_3(QCharRef * this_ptr, QCharRef const * c) {
  return &this_ptr->operator=(*c);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_4(QCharRef * this_ptr, unsigned short rc) {
  return &this_ptr->operator=(rc);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_5(QCharRef * this_ptr, short rc) {
  return &this_ptr->operator=(rc);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_6(QCharRef * this_ptr, unsigned int rc) {
  return &this_ptr->operator=(rc);
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_operator_7(QCharRef * this_ptr, int rc) {
  return &this_ptr->operator=(rc);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isNull(QCharRef const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isPrint(QCharRef const * this_ptr) {
  return this_ptr->isPrint();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isPunct(QCharRef const * this_ptr) {
  return this_ptr->isPunct();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isSpace(QCharRef const * this_ptr) {
  return this_ptr->isSpace();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isMark(QCharRef const * this_ptr) {
  return this_ptr->isMark();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isLetter(QCharRef const * this_ptr) {
  return this_ptr->isLetter();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isNumber(QCharRef const * this_ptr) {
  return this_ptr->isNumber();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isLetterOrNumber(QCharRef * this_ptr) {
  return this_ptr->isLetterOrNumber();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isDigit(QCharRef const * this_ptr) {
  return this_ptr->isDigit();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isLower(QCharRef const * this_ptr) {
  return this_ptr->isLower();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isUpper(QCharRef const * this_ptr) {
  return this_ptr->isUpper();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_isTitleCase(QCharRef const * this_ptr) {
  return this_ptr->isTitleCase();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCharRef_digitValue(QCharRef const * this_ptr) {
  return this_ptr->digitValue();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QCharRef_toLower(QCharRef const * this_ptr) {
  return new QChar(this_ptr->toLower());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QCharRef_toUpper(QCharRef const * this_ptr) {
  return new QChar(this_ptr->toUpper());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QCharRef_toTitleCase(QCharRef const * this_ptr) {
  return new QChar(this_ptr->toTitleCase());
}


RITUAL_EXPORT QChar::Category ctr_qt_core_ffi_QCharRef_category(QCharRef const * this_ptr) {
  return this_ptr->category();
}


RITUAL_EXPORT QChar::Direction ctr_qt_core_ffi_QCharRef_direction(QCharRef const * this_ptr) {
  return this_ptr->direction();
}


RITUAL_EXPORT QChar::JoiningType ctr_qt_core_ffi_QCharRef_joiningType(QCharRef const * this_ptr) {
  return this_ptr->joiningType();
}


RITUAL_EXPORT QChar::Joining ctr_qt_core_ffi_QCharRef_joining(QCharRef const * this_ptr) {
  return this_ptr->joining();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCharRef_hasMirrored(QCharRef const * this_ptr) {
  return this_ptr->hasMirrored();
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QCharRef_mirroredChar(QCharRef const * this_ptr) {
  return new QChar(this_ptr->mirroredChar());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCharRef_decomposition(QCharRef const * this_ptr) {
  return new QString(this_ptr->decomposition());
}


RITUAL_EXPORT QChar::Decomposition ctr_qt_core_ffi_QCharRef_decompositionTag(QCharRef const * this_ptr) {
  return this_ptr->decompositionTag();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QCharRef_combiningClass(QCharRef const * this_ptr) {
  return this_ptr->combiningClass();
}


RITUAL_EXPORT QChar::Script ctr_qt_core_ffi_QCharRef_script(QCharRef const * this_ptr) {
  return this_ptr->script();
}


RITUAL_EXPORT QChar::UnicodeVersion ctr_qt_core_ffi_QCharRef_unicodeVersion(QCharRef const * this_ptr) {
  return this_ptr->unicodeVersion();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QCharRef_cell(QCharRef const * this_ptr) {
  return this_ptr->cell();
}


RITUAL_EXPORT unsigned char ctr_qt_core_ffi_QCharRef_row(QCharRef const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCharRef_setCell(QCharRef * this_ptr, unsigned char cell) {
  this_ptr->setCell(cell);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCharRef_setRow(QCharRef * this_ptr, unsigned char row) {
  this_ptr->setRow(row);
}


RITUAL_EXPORT char ctr_qt_core_ffi_QCharRef_toLatin1(QCharRef const * this_ptr) {
  return this_ptr->toLatin1();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QCharRef_unicode(QCharRef const * this_ptr) {
  return this_ptr->unicode();
}


RITUAL_EXPORT unsigned short * ctr_qt_core_ffi_QCharRef_unicode1(QCharRef * this_ptr) {
  return &this_ptr->unicode();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__20(QLatin1String const * s1, QLatin1String const * s2) {
  return operator==(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_13(QLatin1String const * s1, QLatin1String const * s2) {
  return operator<(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_14(QLatin1String const * s1, QLatin1String const * s2) {
  return operator>(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__22(QLatin1String const * s1, QLatin1String const * s2) {
  return operator<=(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__23(QLatin1String const * s1, QLatin1String const * s2) {
  return operator>=(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__24(char const * s1, QString const * s2) {
  return operator==(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_15(char const * s1, QString const * s2) {
  return operator<(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_16(char const * s1, QString const * s2) {
  return operator>(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__26(char const * s1, QString const * s2) {
  return operator<=(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__27(char const * s1, QString const * s2) {
  return operator>=(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__28(char const * s1, QLatin1String const * s2) {
  return operator==(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_17(char const * s1, QLatin1String const * s2) {
  return operator<(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_18(char const * s1, QLatin1String const * s2) {
  return operator>(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__30(char const * s1, QLatin1String const * s2) {
  return operator<=(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__31(char const * s1, QLatin1String const * s2) {
  return operator>=(s1, *s2);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_19(QString const * s1, QString const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_20(QString const * s1, QChar const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_21(QChar const * s1, QString const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_22(QString const * s1, char const * s2) {
  return new QString(operator+(*s1, s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_23(char const * s1, QString const * s2) {
  return new QString(operator+(s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_24(char c, QString const * s) {
  return new QString(operator+(c, *s));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_25(QString const * s, char c) {
  return new QString(operator+(*s, c));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_26(QByteArray const * ba, QString const * s) {
  return new QString(operator+(*ba, *s));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_27(QString const * s, QByteArray const * ba) {
  return new QString(operator+(*s, *ba));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__32(QDataStream * arg1, QString const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__33(QDataStream * arg1, QString * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_QStringRef() {
  return new QStringRef();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_QStringRef1(QString const * string, int position, int size) {
  return new QStringRef(string, position, size);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_QStringRef2(QString const * string) {
  return new QStringRef(string);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_QStringRef3(QStringRef const * other) {
  return new QStringRef(*other);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_operator_1(QStringRef * this_ptr, QStringRef const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringRef_dQStringRef(QStringRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QStringRef_string(QStringRef const * this_ptr) {
  return this_ptr->string();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_position(QStringRef const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_size(QStringRef const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count(QStringRef const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_length(QStringRef const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf(QStringRef const * this_ptr, QString const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*str, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf1(QStringRef const * this_ptr, QChar const * ch, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*ch, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf2(QStringRef const * this_ptr, QLatin1String const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*str, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf3(QStringRef const * this_ptr, QStringRef const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*str, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf(QStringRef const * this_ptr, QString const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*str, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf1(QStringRef const * this_ptr, QChar const * ch, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*ch, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf2(QStringRef const * this_ptr, QLatin1String const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*str, from, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf3(QStringRef const * this_ptr, QStringRef const * str, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*str, from, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains(QStringRef const * this_ptr, QString const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains1(QStringRef const * this_ptr, QChar const * ch, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*ch, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains2(QStringRef const * this_ptr, QLatin1String const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains3(QStringRef const * this_ptr, QStringRef const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count1(QStringRef const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->count(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count2(QStringRef const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->count(*c, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count3(QStringRef const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->count(*s, cs);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split(QStringRef const * this_ptr, QString const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->split(*sep, behavior, cs));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split1(QStringRef const * this_ptr, QChar const * sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->split(*sep, behavior, cs));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_left(QStringRef const * this_ptr, int n) {
  return new QStringRef(this_ptr->left(n));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_right(QStringRef const * this_ptr, int n) {
  return new QStringRef(this_ptr->right(n));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_mid(QStringRef const * this_ptr, int pos, int n) {
  return new QStringRef(this_ptr->mid(pos, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringRef_truncate(QStringRef * this_ptr, int pos) {
  this_ptr->truncate(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringRef_chop(QStringRef * this_ptr, int n) {
  this_ptr->chop(n);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_isRightToLeft(QStringRef const * this_ptr) {
  return this_ptr->isRightToLeft();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith(QStringRef const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith1(QStringRef const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith2(QStringRef const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*c, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith3(QStringRef const * this_ptr, QStringRef const * c, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*c, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith(QStringRef const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith1(QStringRef const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith2(QStringRef const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*c, cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith3(QStringRef const * this_ptr, QStringRef const * c, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*c, cs);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_operator_2(QStringRef * this_ptr, QString const * string) {
  return &this_ptr->operator=(string);
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_unicode(QStringRef const * this_ptr) {
  return this_ptr->unicode();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_data(QStringRef const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_constData(QStringRef const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_begin(QStringRef const * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_cbegin(QStringRef const * this_ptr) {
  return this_ptr->cbegin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_constBegin(QStringRef const * this_ptr) {
  return this_ptr->constBegin();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_end(QStringRef const * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_cend(QStringRef const * this_ptr) {
  return this_ptr->cend();
}


RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringRef_constEnd(QStringRef const * this_ptr) {
  return this_ptr->constEnd();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringRef_toLatin1(QStringRef const * this_ptr) {
  return new QByteArray(this_ptr->toLatin1());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringRef_toUtf8(QStringRef const * this_ptr) {
  return new QByteArray(this_ptr->toUtf8());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringRef_toLocal8Bit(QStringRef const * this_ptr) {
  return new QByteArray(this_ptr->toLocal8Bit());
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QStringRef_toUcs4(QStringRef const * this_ptr) {
  return new QVector< unsigned int >(this_ptr->toUcs4());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringRef_clear(QStringRef * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStringRef_toString(QStringRef const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_isEmpty(QStringRef const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_isNull(QStringRef const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_appendTo(QStringRef const * this_ptr, QString * string) {
  return new QStringRef(this_ptr->appendTo(string));
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringRef_at(QStringRef const * this_ptr, int i) {
  return new QChar(this_ptr->at(i));
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringRef_operator__(QStringRef const * this_ptr, int i) {
  return new QChar(this_ptr->operator[](i));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_operator__1(QStringRef const * this_ptr, char const * s) {
  return this_ptr->operator==(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_operator_3(QStringRef const * this_ptr, char const * s) {
  return this_ptr->operator<(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_operator__3(QStringRef const * this_ptr, char const * s) {
  return this_ptr->operator<=(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_operator_4(QStringRef const * this_ptr, char const * s) {
  return this_ptr->operator>(s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_operator__4(QStringRef const * this_ptr, char const * s) {
  return this_ptr->operator>=(s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare(QStringRef const * this_ptr, QString const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare1(QStringRef const * this_ptr, QStringRef const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare2(QStringRef const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare3(QStringRef const * this_ptr, QByteArray const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare4(QStringRef const * s1, QString const * s2, Qt::CaseSensitivity arg3) {
  return QStringRef::compare(*s1, *s2, arg3);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare5(QStringRef const * s1, QStringRef const * s2, Qt::CaseSensitivity arg3) {
  return QStringRef::compare(*s1, *s2, arg3);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare6(QStringRef const * s1, QLatin1String const * s2, Qt::CaseSensitivity cs) {
  return QStringRef::compare(*s1, *s2, cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_localeAwareCompare(QStringRef const * this_ptr, QString const * s) {
  return this_ptr->localeAwareCompare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_localeAwareCompare1(QStringRef const * this_ptr, QStringRef const * s) {
  return this_ptr->localeAwareCompare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_localeAwareCompare2(QStringRef const * s1, QString const * s2) {
  return QStringRef::localeAwareCompare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_localeAwareCompare3(QStringRef const * s1, QStringRef const * s2) {
  return QStringRef::localeAwareCompare(*s1, *s2);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_trimmed(QStringRef const * this_ptr) {
  return new QStringRef(this_ptr->trimmed());
}


RITUAL_EXPORT short ctr_qt_core_ffi_QStringRef_toShort(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toShort(ok, base);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QStringRef_toUShort(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toUShort(ok, base);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_toInt(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toInt(ok, base);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QStringRef_toUInt(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toUInt(ok, base);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QStringRef_toLong(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toLong(ok, base);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QStringRef_toULong(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toULong(ok, base);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QStringRef_toLongLong(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toLongLong(ok, base);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QStringRef_toULongLong(QStringRef const * this_ptr, bool * ok, int base) {
  return this_ptr->toULongLong(ok, base);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QStringRef_toFloat(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toFloat(ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QStringRef_toDouble(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toDouble(ok);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__34(QStringRef const * s1, QStringRef const * s2) {
  return operator==(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_28(QStringRef const * s1, QStringRef const * s2) {
  return operator<(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_29(QStringRef const * s1, QStringRef const * s2) {
  return operator>(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__36(QStringRef const * s1, QStringRef const * s2) {
  return operator<=(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__37(QStringRef const * s1, QStringRef const * s2) {
  return operator>=(*s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__38(QString const * lhs, QStringRef const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_30(QString const * lhs, QStringRef const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_31(QString const * lhs, QStringRef const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__40(QString const * lhs, QStringRef const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__41(QString const * lhs, QStringRef const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__42(QStringRef const * lhs, QString const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_32(QStringRef const * lhs, QString const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_33(QStringRef const * lhs, QString const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__44(QStringRef const * lhs, QString const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__45(QStringRef const * lhs, QString const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__46(QLatin1String const * lhs, QStringRef const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_34(QLatin1String const * lhs, QStringRef const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_35(QLatin1String const * lhs, QStringRef const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__48(QLatin1String const * lhs, QStringRef const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__49(QLatin1String const * lhs, QStringRef const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__50(QStringRef const * lhs, QLatin1String const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_36(QStringRef const * lhs, QLatin1String const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_37(QStringRef const * lhs, QLatin1String const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__52(QStringRef const * lhs, QLatin1String const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__53(QStringRef const * lhs, QLatin1String const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__54(QChar const * lhs, QString const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_38(QChar const * lhs, QString const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_39(QChar const * lhs, QString const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__56(QChar const * lhs, QString const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__57(QChar const * lhs, QString const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__58(QString const * lhs, QChar const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_40(QString const * lhs, QChar const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_41(QString const * lhs, QChar const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__60(QString const * lhs, QChar const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__61(QString const * lhs, QChar const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__62(QChar const * lhs, QStringRef const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_42(QChar const * lhs, QStringRef const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_43(QChar const * lhs, QStringRef const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__64(QChar const * lhs, QStringRef const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__65(QChar const * lhs, QStringRef const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__66(QStringRef const * lhs, QChar const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_44(QStringRef const * lhs, QChar const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_45(QStringRef const * lhs, QChar const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__68(QStringRef const * lhs, QChar const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__69(QStringRef const * lhs, QChar const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__70(QChar const * lhs, QLatin1String const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_46(QChar const * lhs, QLatin1String const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_47(QChar const * lhs, QLatin1String const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__72(QChar const * lhs, QLatin1String const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__73(QChar const * lhs, QLatin1String const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__74(QLatin1String const * lhs, QChar const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_48(QLatin1String const * lhs, QChar const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_49(QLatin1String const * lhs, QChar const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__76(QLatin1String const * lhs, QChar const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__77(QLatin1String const * lhs, QChar const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__78(QStringRef const * lhs, QByteArray const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_50(QStringRef const * lhs, QByteArray const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_51(QStringRef const * lhs, QByteArray const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__80(QStringRef const * lhs, QByteArray const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__81(QStringRef const * lhs, QByteArray const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__82(QByteArray const * lhs, QStringRef const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_52(QByteArray const * lhs, QStringRef const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_53(QByteArray const * lhs, QStringRef const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__84(QByteArray const * lhs, QStringRef const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__85(QByteArray const * lhs, QStringRef const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__86(char const * s1, QStringRef const * s2) {
  return operator==(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_54(char const * s1, QStringRef const * s2) {
  return operator<(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__88(char const * s1, QStringRef const * s2) {
  return operator<=(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_55(char const * s1, QStringRef const * s2) {
  return operator>(s1, *s2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__89(char const * s1, QStringRef const * s2) {
  return operator>=(s1, *s2);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_56(QString const * s1, QStringRef const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_57(QStringRef const * s1, QString const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_58(QStringRef const * s1, QLatin1String const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_59(QLatin1String const * s1, QStringRef const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_60(QStringRef const * s1, QStringRef const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_61(QStringRef const * s1, QChar const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_operator_62(QChar const * s1, QStringRef const * s2) {
  return new QString(operator+(*s1, *s2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qPopulationCount(quint32 v) {
  return qPopulationCount(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qPopulationCount1(quint8 v) {
  return qPopulationCount(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qPopulationCount2(quint16 v) {
  return qPopulationCount(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qPopulationCount3(quint64 v) {
  return qPopulationCount(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qPopulationCount4(unsigned long v) {
  return qPopulationCount(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountTrailingZeroBits(quint32 v) {
  return qCountTrailingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountTrailingZeroBits1(quint8 v) {
  return qCountTrailingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountTrailingZeroBits2(quint16 v) {
  return qCountTrailingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountTrailingZeroBits3(quint64 v) {
  return qCountTrailingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountTrailingZeroBits4(unsigned long v) {
  return qCountTrailingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountLeadingZeroBits(quint32 v) {
  return qCountLeadingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountLeadingZeroBits1(quint8 v) {
  return qCountLeadingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountLeadingZeroBits2(quint16 v) {
  return qCountLeadingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountLeadingZeroBits3(quint64 v) {
  return qCountLeadingZeroBits(v);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qCountLeadingZeroBits4(unsigned long v) {
  return qCountLeadingZeroBits(v);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qGlobalQHashSeed() {
  return qGlobalQHashSeed();
}


RITUAL_EXPORT void ctr_qt_core_ffi_qSetGlobalQHashSeed(int newSeed) {
  qSetGlobalQHashSeed(newSeed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHashBits(void const * p, unsigned long size, unsigned int seed) {
  return qHashBits(p, size, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash(char key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash1(unsigned char key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash2(signed char key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash3(unsigned short key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash4(short key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash5(unsigned int key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash6(int key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash7(unsigned long key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash8(long key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash9(quint64 key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash10(qint64 key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash11(float key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash12(double key, unsigned int seed) {
  return qHash(key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash14(QChar const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash15(QByteArray const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash16(QString const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash17(QStringRef const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash18(QBitArray const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash19(QLatin1String const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash20(QRegExp const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_QRegExp() {
  return new QRegExp();
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_QRegExp1(QString const * pattern, Qt::CaseSensitivity cs, QRegExp::PatternSyntax syntax) {
  return new QRegExp(*pattern, cs, syntax);
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_QRegExp2(QRegExp const * rx) {
  return new QRegExp(*rx);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_dQRegExp(QRegExp * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_operator_(QRegExp * this_ptr, QRegExp const * rx) {
  return &this_ptr->operator=(*rx);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_swap(QRegExp * this_ptr, QRegExp * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegExp_operator__(QRegExp const * this_ptr, QRegExp const * rx) {
  return this_ptr->operator==(*rx);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegExp_isEmpty(QRegExp const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegExp_isValid(QRegExp const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_pattern(QRegExp const * this_ptr) {
  return new QString(this_ptr->pattern());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_setPattern(QRegExp * this_ptr, QString const * pattern) {
  this_ptr->setPattern(*pattern);
}


RITUAL_EXPORT Qt::CaseSensitivity ctr_qt_core_ffi_QRegExp_caseSensitivity(QRegExp const * this_ptr) {
  return this_ptr->caseSensitivity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_setCaseSensitivity(QRegExp * this_ptr, Qt::CaseSensitivity cs) {
  this_ptr->setCaseSensitivity(cs);
}


RITUAL_EXPORT QRegExp::PatternSyntax ctr_qt_core_ffi_QRegExp_patternSyntax(QRegExp const * this_ptr) {
  return this_ptr->patternSyntax();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_setPatternSyntax(QRegExp * this_ptr, QRegExp::PatternSyntax syntax) {
  this_ptr->setPatternSyntax(syntax);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegExp_isMinimal(QRegExp const * this_ptr) {
  return this_ptr->isMinimal();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegExp_setMinimal(QRegExp * this_ptr, bool minimal) {
  this_ptr->setMinimal(minimal);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegExp_exactMatch(QRegExp const * this_ptr, QString const * str) {
  return this_ptr->exactMatch(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_indexIn(QRegExp const * this_ptr, QString const * str, int offset, QRegExp::CaretMode caretMode) {
  return this_ptr->indexIn(*str, offset, caretMode);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_lastIndexIn(QRegExp const * this_ptr, QString const * str, int offset, QRegExp::CaretMode caretMode) {
  return this_ptr->lastIndexIn(*str, offset, caretMode);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_matchedLength(QRegExp const * this_ptr) {
  return this_ptr->matchedLength();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_captureCount(QRegExp const * this_ptr) {
  return this_ptr->captureCount();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QRegExp_capturedTexts(QRegExp const * this_ptr) {
  return new QStringList(this_ptr->capturedTexts());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QRegExp_capturedTexts1(QRegExp * this_ptr) {
  return new QStringList(this_ptr->capturedTexts());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_cap(QRegExp const * this_ptr, int nth) {
  return new QString(this_ptr->cap(nth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_cap1(QRegExp * this_ptr, int nth) {
  return new QString(this_ptr->cap(nth));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_pos(QRegExp const * this_ptr, int nth) {
  return this_ptr->pos(nth);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_pos1(QRegExp * this_ptr, int nth) {
  return this_ptr->pos(nth);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_errorString(QRegExp const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_errorString1(QRegExp * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_escape(QString const * str) {
  return new QString(QRegExp::escape(*str));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__90(QDataStream * out, QRegExp const * regExp) {
  return &operator<<(*out, *regExp);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__91(QDataStream * in, QRegExp * regExp) {
  return &operator>>(*in, *regExp);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__92(QDebug const * arg1, QRegExp const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher() {
  return new QStringMatcher();
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher1(QString const * pattern, Qt::CaseSensitivity cs) {
  return new QStringMatcher(*pattern, cs);
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher2(QChar const * uc, int len, Qt::CaseSensitivity cs) {
  return new QStringMatcher(uc, len, cs);
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher3(QStringMatcher const * other) {
  return new QStringMatcher(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringMatcher_dQStringMatcher(QStringMatcher * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_operator_(QStringMatcher * this_ptr, QStringMatcher const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringMatcher_setPattern(QStringMatcher * this_ptr, QString const * pattern) {
  this_ptr->setPattern(*pattern);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringMatcher_setCaseSensitivity(QStringMatcher * this_ptr, Qt::CaseSensitivity cs) {
  this_ptr->setCaseSensitivity(cs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringMatcher_indexIn(QStringMatcher const * this_ptr, QString const * str, int from) {
  return this_ptr->indexIn(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringMatcher_indexIn1(QStringMatcher const * this_ptr, QChar const * str, int length, int from) {
  return this_ptr->indexIn(str, length, from);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStringMatcher_pattern(QStringMatcher const * this_ptr) {
  return new QString(this_ptr->pattern());
}


RITUAL_EXPORT Qt::CaseSensitivity ctr_qt_core_ffi_QStringMatcher_caseSensitivity(QStringMatcher const * this_ptr) {
  return this_ptr->caseSensitivity();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_QStringList() {
  return new QStringList();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_QStringList1(QString const * i) {
  return new QStringList(*i);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_QStringList2(QList< QString > const * l) {
  return new QStringList(*l);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator_(QStringList * this_ptr, QList< QString > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains(QStringList const * this_ptr, QString const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator_2(QStringList const * this_ptr, QStringList const * other) {
  return new QStringList(this_ptr->operator+(*other));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator__(QStringList * this_ptr, QString const * str) {
  return &this_ptr->operator<<(*str);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator__1(QStringList * this_ptr, QStringList const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator__2(QStringList * this_ptr, QList< QString > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf(QStringList const * this_ptr, QRegExp const * rx, int from) {
  return this_ptr->indexOf(*rx, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf(QStringList const * this_ptr, QRegExp const * rx, int from) {
  return this_ptr->lastIndexOf(*rx, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf1(QStringList const * this_ptr, QRegExp * rx, int from) {
  return this_ptr->indexOf(*rx, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf1(QStringList const * this_ptr, QRegExp * rx, int from) {
  return this_ptr->lastIndexOf(*rx, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf2(QStringList const * this_ptr, QRegularExpression const * re, int from) {
  return this_ptr->indexOf(*re, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf2(QStringList const * this_ptr, QRegularExpression const * re, int from) {
  return this_ptr->lastIndexOf(*re, from);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_operator_63(QList< QString > const * one, QStringList const * other) {
  return new QStringList(operator+(*one, *other));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerType(char const * typeName, void (*deleter)(void *), void * (*creator)(void const *)) {
  return QMetaType::registerType(typeName, deleter, creator);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerType1(char const * typeName, void (*deleter)(void *), void * (*creator)(void const *), void (*destructor)(void *), void * (*constructor)(void *, void const *), int size, int flags, QMetaObject const * metaObject) {
  return QMetaType::registerType(typeName, deleter, creator, destructor, constructor, size, QFlags< QMetaType::TypeFlag >(flags), metaObject);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_unregisterType(int type) {
  return QMetaType::unregisterType(type);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerNormalizedType(QByteArray const * normalizedTypeName, void (*deleter)(void *), void * (*creator)(void const *), void (*destructor)(void *), void * (*constructor)(void *, void const *), int size, int flags, QMetaObject const * metaObject) {
  return QMetaType::registerNormalizedType(*normalizedTypeName, deleter, creator, destructor, constructor, size, QFlags< QMetaType::TypeFlag >(flags), metaObject);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerNormalizedType1(QByteArray const * normalizedTypeName, void (*destructor)(void *), void * (*constructor)(void *, void const *), int size, int flags, QMetaObject const * metaObject) {
  return QMetaType::registerNormalizedType(*normalizedTypeName, destructor, constructor, size, QFlags< QMetaType::TypeFlag >(flags), metaObject);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerTypedef(char const * typeName, int aliasId) {
  return QMetaType::registerTypedef(typeName, aliasId);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerNormalizedTypedef(QByteArray const * normalizedTypeName, int aliasId) {
  return QMetaType::registerNormalizedTypedef(*normalizedTypeName, aliasId);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_type(char const * typeName) {
  return QMetaType::type(typeName);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_type1(QByteArray const * typeName) {
  return QMetaType::type(*typeName);
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaType_typeName(int type) {
  return QMetaType::typeName(type);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_sizeOf(int type) {
  return QMetaType::sizeOf(type);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_typeFlags(int type) {
  return int(QMetaType::typeFlags(type));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaType_metaObjectForType(int type) {
  return QMetaType::metaObjectForType(type);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_isRegistered(int type) {
  return QMetaType::isRegistered(type);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_create(int type, void const * copy) {
  return QMetaType::create(type, copy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaType_destroy(int type, void * data) {
  QMetaType::destroy(type, data);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_construct(int type, void * where, void const * copy) {
  return QMetaType::construct(type, where, copy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaType_destruct(int type, void * where) {
  QMetaType::destruct(type, where);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_save(QDataStream * stream, int type, void const * data) {
  return QMetaType::save(*stream, type, data);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_load(QDataStream * stream, int type, void * data) {
  return QMetaType::load(*stream, type, data);
}


RITUAL_EXPORT QMetaType * ctr_qt_core_ffi_QMetaType_QMetaType(int type) {
  return new QMetaType(type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaType_dQMetaType(QMetaType * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_isValid(QMetaType const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_isRegistered1(QMetaType const * this_ptr) {
  return this_ptr->isRegistered();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_sizeOf1(QMetaType const * this_ptr) {
  return this_ptr->sizeOf();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_flags(QMetaType const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaType_metaObject(QMetaType const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_create1(QMetaType const * this_ptr, void const * copy) {
  return this_ptr->create(copy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaType_destroy1(QMetaType const * this_ptr, void * data) {
  this_ptr->destroy(data);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_construct1(QMetaType const * this_ptr, void * where, void const * copy) {
  return this_ptr->construct(where, copy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaType_destruct1(QMetaType const * this_ptr, void * data) {
  this_ptr->destruct(data);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_hasRegisteredComparators(int typeId) {
  return QMetaType::hasRegisteredComparators(typeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_hasRegisteredDebugStreamOperator(int typeId) {
  return QMetaType::hasRegisteredDebugStreamOperator(typeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_convert(void const * from, int fromTypeId, void * to, int toTypeId) {
  return QMetaType::convert(from, fromTypeId, to, toTypeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_compare(void const * lhs, void const * rhs, int typeId, int * result) {
  return QMetaType::compare(lhs, rhs, typeId, result);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_equals(void const * lhs, void const * rhs, int typeId, int * result) {
  return QMetaType::equals(lhs, rhs, typeId, result);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_debugStream(QDebug * dbg, void const * rhs, int typeId) {
  return QMetaType::debugStream(*dbg, rhs, typeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaType_hasRegisteredConverterFunction(int fromTypeId, int toTypeId) {
  return QMetaType::hasRegisteredConverterFunction(fromTypeId, toTypeId);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QObject_metaObject(QObject const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QObject_qt_metacast(QObject * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QObject_qt_metacall(QObject * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QObject_tr(char const * s, char const * c, int n) {
  return new QString(QObject::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QObject_trUtf8(char const * s, char const * c, int n) {
  return new QString(QObject::trUtf8(s, c, n));
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_QObject(QObject * parent) {
  return new QObject(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_dQObject(QObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_event(QObject * this_ptr, QEvent * event) {
  return this_ptr->event(event);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_eventFilter(QObject * this_ptr, QObject * watched, QEvent * event) {
  return this_ptr->eventFilter(watched, event);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QObject_objectName(QObject const * this_ptr) {
  return new QString(this_ptr->objectName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_setObjectName(QObject * this_ptr, QString const * name) {
  this_ptr->setObjectName(*name);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_isWidgetType(QObject const * this_ptr) {
  return this_ptr->isWidgetType();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_isWindowType(QObject const * this_ptr) {
  return this_ptr->isWindowType();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_signalsBlocked(QObject const * this_ptr) {
  return this_ptr->signalsBlocked();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_blockSignals(QObject * this_ptr, bool b) {
  return this_ptr->blockSignals(b);
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_QObject_thread(QObject const * this_ptr) {
  return this_ptr->thread();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_moveToThread(QObject * this_ptr, QThread * thread) {
  this_ptr->moveToThread(thread);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QObject_startTimer(QObject * this_ptr, int interval, Qt::TimerType timerType) {
  return this_ptr->startTimer(interval, timerType);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_killTimer(QObject * this_ptr, int id) {
  this_ptr->killTimer(id);
}


RITUAL_EXPORT QList< QObject * > const * ctr_qt_core_ffi_QObject_children(QObject const * this_ptr) {
  return &this_ptr->children();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_setParent(QObject * this_ptr, QObject * parent) {
  this_ptr->setParent(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_installEventFilter(QObject * this_ptr, QObject * filterObj) {
  this_ptr->installEventFilter(filterObj);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_removeEventFilter(QObject * this_ptr, QObject * obj) {
  this_ptr->removeEventFilter(obj);
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QObject_connect(QObject const * sender, char const * signal, QObject const * receiver, char const * member, Qt::ConnectionType arg5) {
  return new QMetaObject::Connection(QObject::connect(sender, signal, receiver, member, arg5));
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QObject_connect1(QObject const * sender, QMetaMethod const * signal, QObject const * receiver, QMetaMethod const * method, Qt::ConnectionType type) {
  return new QMetaObject::Connection(QObject::connect(sender, *signal, receiver, *method, type));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect(QObject const * sender, char const * signal, QObject const * receiver, char const * member) {
  return QObject::disconnect(sender, signal, receiver, member);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect1(QObject const * sender, QMetaMethod const * signal, QObject const * receiver, QMetaMethod const * member) {
  return QObject::disconnect(sender, *signal, receiver, *member);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect2(QObject const * this_ptr, char const * signal, QObject const * receiver, char const * member) {
  return this_ptr->disconnect(signal, receiver, member);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect3(QObject const * this_ptr, QObject const * receiver, char const * member) {
  return this_ptr->disconnect(receiver, member);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect4(QMetaObject::Connection const * arg1) {
  return QObject::disconnect(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_dumpObjectTree(QObject * this_ptr) {
  this_ptr->dumpObjectTree();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_dumpObjectInfo(QObject * this_ptr) {
  this_ptr->dumpObjectInfo();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_dumpObjectTree1(QObject const * this_ptr) {
  this_ptr->dumpObjectTree();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_dumpObjectInfo1(QObject const * this_ptr) {
  this_ptr->dumpObjectInfo();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_setProperty(QObject * this_ptr, char const * name, QVariant const * value) {
  return this_ptr->setProperty(name, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QObject_property(QObject const * this_ptr, char const * name) {
  return new QVariant(this_ptr->property(name));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QObject_dynamicPropertyNames(QObject const * this_ptr) {
  return new QList< QByteArray >(this_ptr->dynamicPropertyNames());
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_parent(QObject const * this_ptr) {
  return this_ptr->parent();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_inherits(QObject const * this_ptr, char const * classname) {
  return this_ptr->inherits(classname);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObject_deleteLater(QObject * this_ptr) {
  this_ptr->deleteLater();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__93(QDebug const * arg1, QObject const * arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QSignalBlocker * ctr_qt_core_ffi_QSignalBlocker_QSignalBlocker(QObject * o) {
  return new QSignalBlocker(o);
}


RITUAL_EXPORT QSignalBlocker * ctr_qt_core_ffi_QSignalBlocker_QSignalBlocker1(QObject * o) {
  return new QSignalBlocker(*o);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalBlocker_dQSignalBlocker(QSignalBlocker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalBlocker_reblock(QSignalBlocker * this_ptr) {
  this_ptr->reblock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalBlocker_unblock(QSignalBlocker * this_ptr) {
  this_ptr->unblock();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractAnimation_metaObject(QAbstractAnimation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractAnimation_qt_metacast(QAbstractAnimation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_qt_metacall(QAbstractAnimation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractAnimation_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractAnimation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractAnimation_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractAnimation::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_dQAbstractAnimation(QAbstractAnimation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractAnimation::State ctr_qt_core_ffi_QAbstractAnimation_state(QAbstractAnimation const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_QAbstractAnimation_group(QAbstractAnimation const * this_ptr) {
  return this_ptr->group();
}


RITUAL_EXPORT QAbstractAnimation::Direction ctr_qt_core_ffi_QAbstractAnimation_direction(QAbstractAnimation const * this_ptr) {
  return this_ptr->direction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_setDirection(QAbstractAnimation * this_ptr, QAbstractAnimation::Direction direction) {
  this_ptr->setDirection(direction);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_currentTime(QAbstractAnimation const * this_ptr) {
  return this_ptr->currentTime();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_currentLoopTime(QAbstractAnimation const * this_ptr) {
  return this_ptr->currentLoopTime();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_loopCount(QAbstractAnimation const * this_ptr) {
  return this_ptr->loopCount();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_setLoopCount(QAbstractAnimation * this_ptr, int loopCount) {
  this_ptr->setLoopCount(loopCount);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_currentLoop(QAbstractAnimation const * this_ptr) {
  return this_ptr->currentLoop();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_duration(QAbstractAnimation const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractAnimation_totalDuration(QAbstractAnimation const * this_ptr) {
  return this_ptr->totalDuration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_start(QAbstractAnimation * this_ptr, QAbstractAnimation::DeletionPolicy policy) {
  this_ptr->start(policy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_pause(QAbstractAnimation * this_ptr) {
  this_ptr->pause();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_resume(QAbstractAnimation * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_setPaused(QAbstractAnimation * this_ptr, bool arg1) {
  this_ptr->setPaused(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_stop(QAbstractAnimation * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_setCurrentTime(QAbstractAnimation * this_ptr, int msecs) {
  this_ptr->setCurrentTime(msecs);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAnimationDriver_metaObject(QAnimationDriver const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAnimationDriver_qt_metacast(QAnimationDriver * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAnimationDriver_qt_metacall(QAnimationDriver * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAnimationDriver_tr(char const * s, char const * c, int n) {
  return new QString(QAnimationDriver::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAnimationDriver_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAnimationDriver::trUtf8(s, c, n));
}


RITUAL_EXPORT QAnimationDriver * ctr_qt_core_ffi_QAnimationDriver_QAnimationDriver(QObject * parent) {
  return new QAnimationDriver(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationDriver_dQAnimationDriver(QAnimationDriver * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationDriver_advance(QAnimationDriver * this_ptr) {
  this_ptr->advance();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationDriver_install(QAnimationDriver * this_ptr) {
  this_ptr->install();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationDriver_uninstall(QAnimationDriver * this_ptr) {
  this_ptr->uninstall();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAnimationDriver_isRunning(QAnimationDriver const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QAnimationDriver_elapsed(QAnimationDriver const * this_ptr) {
  return this_ptr->elapsed();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationDriver_setStartTime(QAnimationDriver * this_ptr, qint64 startTime) {
  this_ptr->setStartTime(startTime);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QAnimationDriver_startTime(QAnimationDriver const * this_ptr) {
  return this_ptr->startTime();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEventLoop_metaObject(QEventLoop const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QEventLoop_qt_metacast(QEventLoop * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEventLoop_qt_metacall(QEventLoop * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QEventLoop_tr(char const * s, char const * c, int n) {
  return new QString(QEventLoop::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QEventLoop_trUtf8(char const * s, char const * c, int n) {
  return new QString(QEventLoop::trUtf8(s, c, n));
}


RITUAL_EXPORT QEventLoop * ctr_qt_core_ffi_QEventLoop_QEventLoop(QObject * parent) {
  return new QEventLoop(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_dQEventLoop(QEventLoop * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEventLoop_processEvents(QEventLoop * this_ptr, int flags) {
  return this_ptr->processEvents(QFlags< QEventLoop::ProcessEventsFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_processEvents1(QEventLoop * this_ptr, int flags, int maximumTime) {
  this_ptr->processEvents(QFlags< QEventLoop::ProcessEventsFlag >(flags), maximumTime);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEventLoop_exec(QEventLoop * this_ptr, int flags) {
  return this_ptr->exec(QFlags< QEventLoop::ProcessEventsFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_exit(QEventLoop * this_ptr, int returnCode) {
  this_ptr->exit(returnCode);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEventLoop_isRunning(QEventLoop const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_wakeUp(QEventLoop * this_ptr) {
  this_ptr->wakeUp();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEventLoop_event(QEventLoop * this_ptr, QEvent * event) {
  return this_ptr->event(event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_quit(QEventLoop * this_ptr) {
  this_ptr->quit();
}


RITUAL_EXPORT QEventLoopLocker * ctr_qt_core_ffi_QEventLoopLocker_QEventLoopLocker() {
  return new QEventLoopLocker();
}


RITUAL_EXPORT QEventLoopLocker * ctr_qt_core_ffi_QEventLoopLocker_QEventLoopLocker1(QEventLoop * loop) {
  return new QEventLoopLocker(loop);
}


RITUAL_EXPORT QEventLoopLocker * ctr_qt_core_ffi_QEventLoopLocker_QEventLoopLocker2(QThread * thread) {
  return new QEventLoopLocker(thread);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoopLocker_dQEventLoopLocker(QEventLoopLocker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractEventDispatcher_metaObject(QAbstractEventDispatcher const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractEventDispatcher_qt_metacast(QAbstractEventDispatcher * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractEventDispatcher_qt_metacall(QAbstractEventDispatcher * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractEventDispatcher_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractEventDispatcher::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractEventDispatcher_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractEventDispatcher::trUtf8(s, c, n));
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_TimerInfo(int id, int i, Qt::TimerType t) {
  return new QAbstractEventDispatcher::TimerInfo(id, i, t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_dQAbstractEventDispatcher(QAbstractEventDispatcher * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_QAbstractEventDispatcher_instance(QThread * thread) {
  return QAbstractEventDispatcher::instance(thread);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractEventDispatcher_processEvents(QAbstractEventDispatcher * this_ptr, int flags) {
  return this_ptr->processEvents(QFlags< QEventLoop::ProcessEventsFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractEventDispatcher_hasPendingEvents(QAbstractEventDispatcher * this_ptr) {
  return this_ptr->hasPendingEvents();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_registerSocketNotifier(QAbstractEventDispatcher * this_ptr, QSocketNotifier * notifier) {
  this_ptr->registerSocketNotifier(notifier);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_unregisterSocketNotifier(QAbstractEventDispatcher * this_ptr, QSocketNotifier * notifier) {
  this_ptr->unregisterSocketNotifier(notifier);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractEventDispatcher_registerTimer(QAbstractEventDispatcher * this_ptr, int interval, Qt::TimerType timerType, QObject * object) {
  return this_ptr->registerTimer(interval, timerType, object);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_registerTimer1(QAbstractEventDispatcher * this_ptr, int timerId, int interval, Qt::TimerType timerType, QObject * object) {
  this_ptr->registerTimer(timerId, interval, timerType, object);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractEventDispatcher_unregisterTimer(QAbstractEventDispatcher * this_ptr, int timerId) {
  return this_ptr->unregisterTimer(timerId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractEventDispatcher_unregisterTimers(QAbstractEventDispatcher * this_ptr, QObject * object) {
  return this_ptr->unregisterTimers(object);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QAbstractEventDispatcher_registeredTimers(QAbstractEventDispatcher const * this_ptr, QObject * object) {
  return new QList< QAbstractEventDispatcher::TimerInfo >(this_ptr->registeredTimers(object));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractEventDispatcher_remainingTime(QAbstractEventDispatcher * this_ptr, int timerId) {
  return this_ptr->remainingTime(timerId);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_wakeUp(QAbstractEventDispatcher * this_ptr) {
  this_ptr->wakeUp();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_interrupt(QAbstractEventDispatcher * this_ptr) {
  this_ptr->interrupt();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_flush(QAbstractEventDispatcher * this_ptr) {
  this_ptr->flush();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_startingUp(QAbstractEventDispatcher * this_ptr) {
  this_ptr->startingUp();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_closingDown(QAbstractEventDispatcher * this_ptr) {
  this_ptr->closingDown();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_installNativeEventFilter(QAbstractEventDispatcher * this_ptr, QAbstractNativeEventFilter * filterObj) {
  this_ptr->installNativeEventFilter(filterObj);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_removeNativeEventFilter(QAbstractEventDispatcher * this_ptr, QAbstractNativeEventFilter * filterObj) {
  this_ptr->removeNativeEventFilter(filterObj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractEventDispatcher_filterNativeEvent(QAbstractEventDispatcher * this_ptr, QByteArray const * eventType, void * message, long * result) {
  return this_ptr->filterNativeEvent(*eventType, message, result);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant() {
  return new QVariant();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_dQVariant(QVariant * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant1(QVariant::Type type) {
  return new QVariant(type);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant2(int typeId, void const * copy) {
  return new QVariant(typeId, copy);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant3(int typeId, void const * copy, unsigned int flags) {
  return new QVariant(typeId, copy, flags);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant4(QVariant const * other) {
  return new QVariant(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant5(QDataStream * s) {
  return new QVariant(*s);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant6(int i) {
  return new QVariant(i);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant7(unsigned int ui) {
  return new QVariant(ui);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant8(qlonglong ll) {
  return new QVariant(ll);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant9(qulonglong ull) {
  return new QVariant(ull);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant10(bool b) {
  return new QVariant(b);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant11(double d) {
  return new QVariant(d);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant12(float f) {
  return new QVariant(f);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant13(char const * str) {
  return new QVariant(str);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant14(QByteArray const * bytearray) {
  return new QVariant(*bytearray);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant15(QBitArray const * bitarray) {
  return new QVariant(*bitarray);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant16(QString const * string) {
  return new QVariant(*string);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant17(QLatin1String const * string) {
  return new QVariant(*string);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant18(QStringList const * stringlist) {
  return new QVariant(*stringlist);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant19(QChar const * qchar) {
  return new QVariant(*qchar);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant20(QDate const * date) {
  return new QVariant(*date);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant21(QTime const * time) {
  return new QVariant(*time);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant22(QDateTime const * datetime) {
  return new QVariant(*datetime);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant23(QList< QVariant > const * list) {
  return new QVariant(*list);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant24(QMap< QString, QVariant > const * map) {
  return new QVariant(*map);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant25(QHash< QString, QVariant > const * hash) {
  return new QVariant(*hash);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant26(QSize const * size) {
  return new QVariant(*size);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant27(QSizeF const * size) {
  return new QVariant(*size);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant28(QPoint const * pt) {
  return new QVariant(*pt);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant29(QPointF const * pt) {
  return new QVariant(*pt);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant30(QLine const * line) {
  return new QVariant(*line);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant31(QLineF const * line) {
  return new QVariant(*line);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant32(QRect const * rect) {
  return new QVariant(*rect);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant33(QRectF const * rect) {
  return new QVariant(*rect);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant34(QLocale const * locale) {
  return new QVariant(*locale);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant35(QRegExp const * regExp) {
  return new QVariant(*regExp);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant36(QRegularExpression const * re) {
  return new QVariant(*re);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant37(QUrl const * url) {
  return new QVariant(*url);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant38(QEasingCurve const * easing) {
  return new QVariant(*easing);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant39(QUuid const * uuid) {
  return new QVariant(*uuid);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant40(QModelIndex const * modelIndex) {
  return new QVariant(*modelIndex);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant41(QPersistentModelIndex const * modelIndex) {
  return new QVariant(*modelIndex);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant42(QJsonValue const * jsonValue) {
  return new QVariant(*jsonValue);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant43(QJsonObject const * jsonObject) {
  return new QVariant(*jsonObject);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant44(QJsonArray const * jsonArray) {
  return new QVariant(*jsonArray);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_QVariant45(QJsonDocument const * jsonDocument) {
  return new QVariant(*jsonDocument);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_operator_(QVariant * this_ptr, QVariant const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_swap(QVariant * this_ptr, QVariant * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant::Type ctr_qt_core_ffi_QVariant_type(QVariant const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVariant_userType(QVariant const * this_ptr) {
  return this_ptr->userType();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QVariant_typeName(QVariant const * this_ptr) {
  return this_ptr->typeName();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_canConvert(QVariant const * this_ptr, int targetTypeId) {
  return this_ptr->canConvert(targetTypeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_convert(QVariant * this_ptr, int targetTypeId) {
  return this_ptr->convert(targetTypeId);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_isValid(QVariant const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_isNull(QVariant const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_clear(QVariant * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_detach(QVariant * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_isDetached(QVariant const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVariant_toInt(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toInt(ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVariant_toUInt(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toUInt(ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QVariant_toLongLong(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toLongLong(ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QVariant_toULongLong(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toULongLong(ok);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_toBool(QVariant const * this_ptr) {
  return this_ptr->toBool();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QVariant_toDouble(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toDouble(ok);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QVariant_toFloat(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toFloat(ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QVariant_toReal(QVariant const * this_ptr, bool * ok) {
  return this_ptr->toReal(ok);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QVariant_toByteArray(QVariant const * this_ptr) {
  return new QByteArray(this_ptr->toByteArray());
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QVariant_toBitArray(QVariant const * this_ptr) {
  return new QBitArray(this_ptr->toBitArray());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QVariant_toString(QVariant const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QVariant_toStringList(QVariant const * this_ptr) {
  return new QStringList(this_ptr->toStringList());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QVariant_toChar(QVariant const * this_ptr) {
  return new QChar(this_ptr->toChar());
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QVariant_toDate(QVariant const * this_ptr) {
  return new QDate(this_ptr->toDate());
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QVariant_toTime(QVariant const * this_ptr) {
  return new QTime(this_ptr->toTime());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QVariant_toDateTime(QVariant const * this_ptr) {
  return new QDateTime(this_ptr->toDateTime());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QVariant_toList(QVariant const * this_ptr) {
  return new QList< QVariant >(this_ptr->toList());
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QVariant_toMap(QVariant const * this_ptr) {
  return new QMap< QString, QVariant >(this_ptr->toMap());
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QVariant_toHash(QVariant const * this_ptr) {
  return new QHash< QString, QVariant >(this_ptr->toHash());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QVariant_toPoint(QVariant const * this_ptr) {
  return new QPoint(this_ptr->toPoint());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVariant_toPointF(QVariant const * this_ptr) {
  return new QPointF(this_ptr->toPointF());
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QVariant_toRect(QVariant const * this_ptr) {
  return new QRect(this_ptr->toRect());
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QVariant_toSize(QVariant const * this_ptr) {
  return new QSize(this_ptr->toSize());
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QVariant_toSizeF(QVariant const * this_ptr) {
  return new QSizeF(this_ptr->toSizeF());
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QVariant_toLine(QVariant const * this_ptr) {
  return new QLine(this_ptr->toLine());
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QVariant_toLineF(QVariant const * this_ptr) {
  return new QLineF(this_ptr->toLineF());
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QVariant_toRectF(QVariant const * this_ptr) {
  return new QRectF(this_ptr->toRectF());
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QVariant_toLocale(QVariant const * this_ptr) {
  return new QLocale(this_ptr->toLocale());
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QVariant_toRegExp(QVariant const * this_ptr) {
  return new QRegExp(this_ptr->toRegExp());
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QVariant_toRegularExpression(QVariant const * this_ptr) {
  return new QRegularExpression(this_ptr->toRegularExpression());
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QVariant_toUrl(QVariant const * this_ptr) {
  return new QUrl(this_ptr->toUrl());
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QVariant_toEasingCurve(QVariant const * this_ptr) {
  return new QEasingCurve(this_ptr->toEasingCurve());
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QVariant_toUuid(QVariant const * this_ptr) {
  return new QUuid(this_ptr->toUuid());
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QVariant_toModelIndex(QVariant const * this_ptr) {
  return new QModelIndex(this_ptr->toModelIndex());
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QVariant_toPersistentModelIndex(QVariant const * this_ptr) {
  return new QPersistentModelIndex(this_ptr->toPersistentModelIndex());
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QVariant_toJsonValue(QVariant const * this_ptr) {
  return new QJsonValue(this_ptr->toJsonValue());
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QVariant_toJsonObject(QVariant const * this_ptr) {
  return new QJsonObject(this_ptr->toJsonObject());
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QVariant_toJsonArray(QVariant const * this_ptr) {
  return new QJsonArray(this_ptr->toJsonArray());
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QVariant_toJsonDocument(QVariant const * this_ptr) {
  return new QJsonDocument(this_ptr->toJsonDocument());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_load(QVariant * this_ptr, QDataStream * ds) {
  this_ptr->load(*ds);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_save(QVariant const * this_ptr, QDataStream * ds) {
  this_ptr->save(*ds);
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QVariant_typeToName(int typeId) {
  return QVariant::typeToName(typeId);
}


RITUAL_EXPORT QVariant::Type ctr_qt_core_ffi_QVariant_nameToType(char const * name) {
  return QVariant::nameToType(name);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QVariant_data(QVariant * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT void const * ctr_qt_core_ffi_QVariant_constData(QVariant const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void const * ctr_qt_core_ffi_QVariant_data1(QVariant const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_operator__(QVariant const * this_ptr, QVariant const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_operator_2(QVariant const * this_ptr, QVariant const * v) {
  return this_ptr->operator<(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_operator__2(QVariant const * this_ptr, QVariant const * v) {
  return this_ptr->operator<=(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_operator_3(QVariant const * this_ptr, QVariant const * v) {
  return this_ptr->operator>(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVariant_operator__3(QVariant const * this_ptr, QVariant const * v) {
  return this_ptr->operator>=(*v);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_qVariantFromValue(QVariant const * t) {
  return new QVariant(qVariantFromValue(*t));
}


RITUAL_EXPORT void ctr_qt_core_ffi_qVariantSetValue(QVariant * v, QVariant const * t) {
  qVariantSetValue(*v, *t);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__94(QDataStream * s, QVariant * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__95(QDataStream * s, QVariant const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__96(QDataStream * s, QVariant::Type * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__97(QDataStream * s, QVariant::Type p) {
  return &operator<<(*s, p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSequentialIterable_const_iterator_dconst_iterator(QSequentialIterable::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_const_iterator(QSequentialIterable::const_iterator const * other) {
  return new QSequentialIterable::const_iterator(*other);
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator_(QSequentialIterable::const_iterator * this_ptr, QSequentialIterable::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator_1(QSequentialIterable::const_iterator const * this_ptr) {
  return new QVariant(this_ptr->operator*());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__(QSequentialIterable::const_iterator const * this_ptr, QSequentialIterable::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__2(QSequentialIterable::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__3(QSequentialIterable::const_iterator * this_ptr, int arg1) {
  return new QSequentialIterable::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__4(QSequentialIterable::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__5(QSequentialIterable::const_iterator * this_ptr, int arg1) {
  return new QSequentialIterable::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__6(QSequentialIterable::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator__7(QSequentialIterable::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator_2(QSequentialIterable::const_iterator const * this_ptr, int j) {
  return new QSequentialIterable::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_const_iterator_operator_3(QSequentialIterable::const_iterator const * this_ptr, int j) {
  return new QSequentialIterable::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_begin(QSequentialIterable const * this_ptr) {
  return new QSequentialIterable::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QSequentialIterable::const_iterator * ctr_qt_core_ffi_QSequentialIterable_end(QSequentialIterable const * this_ptr) {
  return new QSequentialIterable::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSequentialIterable_at(QSequentialIterable const * this_ptr, int idx) {
  return new QVariant(this_ptr->at(idx));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSequentialIterable_size(QSequentialIterable const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSequentialIterable_canReverseIterate(QSequentialIterable const * this_ptr) {
  return this_ptr->canReverseIterate();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAssociativeIterable_const_iterator_dconst_iterator(QAssociativeIterable::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_const_iterator(QAssociativeIterable::const_iterator const * other) {
  return new QAssociativeIterable::const_iterator(*other);
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator_(QAssociativeIterable::const_iterator * this_ptr, QAssociativeIterable::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_key(QAssociativeIterable::const_iterator const * this_ptr) {
  return new QVariant(this_ptr->key());
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_value(QAssociativeIterable::const_iterator const * this_ptr) {
  return new QVariant(this_ptr->value());
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator_1(QAssociativeIterable::const_iterator const * this_ptr) {
  return new QVariant(this_ptr->operator*());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__(QAssociativeIterable::const_iterator const * this_ptr, QAssociativeIterable::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__2(QAssociativeIterable::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__3(QAssociativeIterable::const_iterator * this_ptr, int arg1) {
  return new QAssociativeIterable::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__4(QAssociativeIterable::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__5(QAssociativeIterable::const_iterator * this_ptr, int arg1) {
  return new QAssociativeIterable::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__6(QAssociativeIterable::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator__7(QAssociativeIterable::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator_2(QAssociativeIterable::const_iterator const * this_ptr, int j) {
  return new QAssociativeIterable::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_const_iterator_operator_3(QAssociativeIterable::const_iterator const * this_ptr, int j) {
  return new QAssociativeIterable::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_begin(QAssociativeIterable const * this_ptr) {
  return new QAssociativeIterable::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_end(QAssociativeIterable const * this_ptr) {
  return new QAssociativeIterable::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QAssociativeIterable::const_iterator * ctr_qt_core_ffi_QAssociativeIterable_find(QAssociativeIterable const * this_ptr, QVariant const * key) {
  return new QAssociativeIterable::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAssociativeIterable_value(QAssociativeIterable const * this_ptr, QVariant const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAssociativeIterable_size(QAssociativeIterable const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__98(QDebug const * arg1, QVariant const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__99(QDebug const * arg1, QVariant::Type arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_QModelIndex() {
  return new QModelIndex();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QModelIndex_row(QModelIndex const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QModelIndex_column(QModelIndex const * this_ptr) {
  return this_ptr->column();
}


RITUAL_EXPORT quintptr ctr_qt_core_ffi_QModelIndex_internalId(QModelIndex const * this_ptr) {
  return this_ptr->internalId();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QModelIndex_internalPointer(QModelIndex const * this_ptr) {
  return this_ptr->internalPointer();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_parent(QModelIndex const * this_ptr) {
  return new QModelIndex(this_ptr->parent());
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_sibling(QModelIndex const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->sibling(row, column));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_child(QModelIndex const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->child(row, column));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QModelIndex_data(QModelIndex const * this_ptr, int role) {
  return new QVariant(this_ptr->data(role));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QModelIndex_flags(QModelIndex const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QAbstractItemModel const * ctr_qt_core_ffi_QModelIndex_model(QModelIndex const * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QModelIndex_isValid(QModelIndex const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QModelIndex_operator__(QModelIndex const * this_ptr, QModelIndex const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QModelIndex_operator_(QModelIndex const * this_ptr, QModelIndex const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__100(QDebug const * arg1, QModelIndex const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash21(QPersistentModelIndex const * index, unsigned int seed) {
  return qHash(*index, seed);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_QPersistentModelIndex() {
  return new QPersistentModelIndex();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_QPersistentModelIndex1(QModelIndex const * index) {
  return new QPersistentModelIndex(*index);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_QPersistentModelIndex2(QPersistentModelIndex const * other) {
  return new QPersistentModelIndex(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPersistentModelIndex_dQPersistentModelIndex(QPersistentModelIndex * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPersistentModelIndex_operator_(QPersistentModelIndex const * this_ptr, QPersistentModelIndex const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPersistentModelIndex_operator__(QPersistentModelIndex const * this_ptr, QPersistentModelIndex const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_operator_1(QPersistentModelIndex * this_ptr, QPersistentModelIndex const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPersistentModelIndex_swap(QPersistentModelIndex * this_ptr, QPersistentModelIndex * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPersistentModelIndex_operator__2(QPersistentModelIndex const * this_ptr, QModelIndex const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_operator_3(QPersistentModelIndex * this_ptr, QModelIndex const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QPersistentModelIndex_operator_const_QModelIndex_(QPersistentModelIndex const * this_ptr) {
  return &this_ptr->operator const QModelIndex&();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPersistentModelIndex_row(QPersistentModelIndex const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPersistentModelIndex_column(QPersistentModelIndex const * this_ptr) {
  return this_ptr->column();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_parent(QPersistentModelIndex const * this_ptr) {
  return new QModelIndex(this_ptr->parent());
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_sibling(QPersistentModelIndex const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->sibling(row, column));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QPersistentModelIndex_child(QPersistentModelIndex const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->child(row, column));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QPersistentModelIndex_data(QPersistentModelIndex const * this_ptr, int role) {
  return new QVariant(this_ptr->data(role));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPersistentModelIndex_flags(QPersistentModelIndex const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QAbstractItemModel const * ctr_qt_core_ffi_QPersistentModelIndex_model(QPersistentModelIndex const * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPersistentModelIndex_isValid(QPersistentModelIndex const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__101(QDebug const * arg1, QPersistentModelIndex const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractItemModel_metaObject(QAbstractItemModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractItemModel_qt_metacast(QAbstractItemModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_qt_metacall(QAbstractItemModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractItemModel_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractItemModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractItemModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractItemModel::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractItemModel_dQAbstractItemModel(QAbstractItemModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_hasIndex(QAbstractItemModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return this_ptr->hasIndex(row, column, *parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractItemModel_index(QAbstractItemModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractItemModel_parent(QAbstractItemModel const * this_ptr, QModelIndex const * child) {
  return new QModelIndex(this_ptr->parent(*child));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractItemModel_sibling(QAbstractItemModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_rowCount(QAbstractItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_columnCount(QAbstractItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_hasChildren(QAbstractItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->hasChildren(*parent);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractItemModel_data(QAbstractItemModel const * this_ptr, QModelIndex const * index, int role) {
  return new QVariant(this_ptr->data(*index, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_setData(QAbstractItemModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractItemModel_headerData(QAbstractItemModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_setHeaderData(QAbstractItemModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value, int role) {
  return this_ptr->setHeaderData(section, orientation, *value, role);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QAbstractItemModel_itemData(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return new QMap< int, QVariant >(this_ptr->itemData(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_setItemData(QAbstractItemModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QAbstractItemModel_mimeTypes(QAbstractItemModel const * this_ptr) {
  return new QStringList(this_ptr->mimeTypes());
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_QAbstractItemModel_mimeData(QAbstractItemModel const * this_ptr, QList< QModelIndex > const * indexes) {
  return this_ptr->mimeData(*indexes);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_canDropMimeData(QAbstractItemModel const * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->canDropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_dropMimeData(QAbstractItemModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_supportedDropActions(QAbstractItemModel const * this_ptr) {
  return int(this_ptr->supportedDropActions());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_supportedDragActions(QAbstractItemModel const * this_ptr) {
  return int(this_ptr->supportedDragActions());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertRows(QAbstractItemModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertColumns(QAbstractItemModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->insertColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeRows(QAbstractItemModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeColumns(QAbstractItemModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->removeColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_moveRows(QAbstractItemModel * this_ptr, QModelIndex const * sourceParent, int sourceRow, int count, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveRows(*sourceParent, sourceRow, count, *destinationParent, destinationChild);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_moveColumns(QAbstractItemModel * this_ptr, QModelIndex const * sourceParent, int sourceColumn, int count, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveColumns(*sourceParent, sourceColumn, count, *destinationParent, destinationChild);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertRow(QAbstractItemModel * this_ptr, int row, QModelIndex const * parent) {
  return this_ptr->insertRow(row, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertColumn(QAbstractItemModel * this_ptr, int column, QModelIndex const * parent) {
  return this_ptr->insertColumn(column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeRow(QAbstractItemModel * this_ptr, int row, QModelIndex const * parent) {
  return this_ptr->removeRow(row, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeColumn(QAbstractItemModel * this_ptr, int column, QModelIndex const * parent) {
  return this_ptr->removeColumn(column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_moveRow(QAbstractItemModel * this_ptr, QModelIndex const * sourceParent, int sourceRow, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveRow(*sourceParent, sourceRow, *destinationParent, destinationChild);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_moveColumn(QAbstractItemModel * this_ptr, QModelIndex const * sourceParent, int sourceColumn, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveColumn(*sourceParent, sourceColumn, *destinationParent, destinationChild);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractItemModel_fetchMore(QAbstractItemModel * this_ptr, QModelIndex const * parent) {
  this_ptr->fetchMore(*parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_canFetchMore(QAbstractItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->canFetchMore(*parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_flags(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractItemModel_sort(QAbstractItemModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractItemModel_buddy(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return new QModelIndex(this_ptr->buddy(*index));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QAbstractItemModel_match(QAbstractItemModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits, int flags) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits, QFlags< Qt::MatchFlag >(flags)));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QAbstractItemModel_span(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return new QSize(this_ptr->span(*index));
}


RITUAL_EXPORT QHash< int, QByteArray > * ctr_qt_core_ffi_QAbstractItemModel_roleNames(QAbstractItemModel const * this_ptr) {
  return new QHash< int, QByteArray >(this_ptr->roleNames());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_submit(QAbstractItemModel * this_ptr) {
  return this_ptr->submit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractItemModel_revert(QAbstractItemModel * this_ptr) {
  this_ptr->revert();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractTableModel_metaObject(QAbstractTableModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractTableModel_qt_metacast(QAbstractTableModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractTableModel_qt_metacall(QAbstractTableModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractTableModel_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractTableModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractTableModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractTableModel::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTableModel_dQAbstractTableModel(QAbstractTableModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractTableModel_index(QAbstractTableModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractTableModel_sibling(QAbstractTableModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractTableModel_dropMimeData(QAbstractTableModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractTableModel_flags(QAbstractTableModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractListModel_metaObject(QAbstractListModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractListModel_qt_metacast(QAbstractListModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractListModel_qt_metacall(QAbstractListModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractListModel_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractListModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractListModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractListModel::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractListModel_dQAbstractListModel(QAbstractListModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractListModel_index(QAbstractListModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractListModel_sibling(QAbstractListModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractListModel_dropMimeData(QAbstractListModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractListModel_flags(QAbstractListModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash22(QModelIndex const * index) {
  return qHash(*index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractNativeEventFilter_dQAbstractNativeEventFilter(QAbstractNativeEventFilter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractNativeEventFilter_nativeEventFilter(QAbstractNativeEventFilter * this_ptr, QByteArray const * eventType, void * message, long * result) {
  return this_ptr->nativeEventFilter(*eventType, message, result);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractProxyModel_metaObject(QAbstractProxyModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractProxyModel_qt_metacast(QAbstractProxyModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractProxyModel_qt_metacall(QAbstractProxyModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractProxyModel_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractProxyModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractProxyModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractProxyModel::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_dQAbstractProxyModel(QAbstractProxyModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_setSourceModel(QAbstractProxyModel * this_ptr, QAbstractItemModel * sourceModel) {
  this_ptr->setSourceModel(sourceModel);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_QAbstractProxyModel_sourceModel(QAbstractProxyModel const * this_ptr) {
  return this_ptr->sourceModel();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractProxyModel_mapToSource(QAbstractProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QModelIndex(this_ptr->mapToSource(*proxyIndex));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractProxyModel_mapFromSource(QAbstractProxyModel const * this_ptr, QModelIndex const * sourceIndex) {
  return new QModelIndex(this_ptr->mapFromSource(*sourceIndex));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QAbstractProxyModel_mapSelectionToSource(QAbstractProxyModel const * this_ptr, QItemSelection const * selection) {
  return new QItemSelection(this_ptr->mapSelectionToSource(*selection));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QAbstractProxyModel_mapSelectionFromSource(QAbstractProxyModel const * this_ptr, QItemSelection const * selection) {
  return new QItemSelection(this_ptr->mapSelectionFromSource(*selection));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_submit(QAbstractProxyModel * this_ptr) {
  return this_ptr->submit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_revert(QAbstractProxyModel * this_ptr) {
  this_ptr->revert();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractProxyModel_data(QAbstractProxyModel const * this_ptr, QModelIndex const * proxyIndex, int role) {
  return new QVariant(this_ptr->data(*proxyIndex, role));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractProxyModel_headerData(QAbstractProxyModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QAbstractProxyModel_itemData(QAbstractProxyModel const * this_ptr, QModelIndex const * index) {
  return new QMap< int, QVariant >(this_ptr->itemData(*index));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractProxyModel_flags(QAbstractProxyModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_setData(QAbstractProxyModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_setItemData(QAbstractProxyModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_setHeaderData(QAbstractProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value, int role) {
  return this_ptr->setHeaderData(section, orientation, *value, role);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractProxyModel_buddy(QAbstractProxyModel const * this_ptr, QModelIndex const * index) {
  return new QModelIndex(this_ptr->buddy(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_canFetchMore(QAbstractProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->canFetchMore(*parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_fetchMore(QAbstractProxyModel * this_ptr, QModelIndex const * parent) {
  this_ptr->fetchMore(*parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_sort(QAbstractProxyModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QAbstractProxyModel_span(QAbstractProxyModel const * this_ptr, QModelIndex const * index) {
  return new QSize(this_ptr->span(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_hasChildren(QAbstractProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->hasChildren(*parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractProxyModel_sibling(QAbstractProxyModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_QAbstractProxyModel_mimeData(QAbstractProxyModel const * this_ptr, QList< QModelIndex > const * indexes) {
  return this_ptr->mimeData(*indexes);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_canDropMimeData(QAbstractProxyModel const * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->canDropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_dropMimeData(QAbstractProxyModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QAbstractProxyModel_mimeTypes(QAbstractProxyModel const * this_ptr) {
  return new QStringList(this_ptr->mimeTypes());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractProxyModel_supportedDragActions(QAbstractProxyModel const * this_ptr) {
  return int(this_ptr->supportedDragActions());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractProxyModel_supportedDropActions(QAbstractProxyModel const * this_ptr) {
  return int(this_ptr->supportedDropActions());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractState_metaObject(QAbstractState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractState_qt_metacast(QAbstractState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractState_qt_metacall(QAbstractState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractState_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractState_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractState::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractState_dQAbstractState(QAbstractState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QAbstractState_parentState(QAbstractState const * this_ptr) {
  return this_ptr->parentState();
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QAbstractState_machine(QAbstractState const * this_ptr) {
  return this_ptr->machine();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractState_active(QAbstractState const * this_ptr) {
  return this_ptr->active();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAbstractTransition_metaObject(QAbstractTransition const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAbstractTransition_qt_metacast(QAbstractTransition * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractTransition_qt_metacall(QAbstractTransition * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractTransition_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractTransition::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAbstractTransition_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractTransition::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_dQAbstractTransition(QAbstractTransition * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QAbstractTransition_sourceState(QAbstractTransition const * this_ptr) {
  return this_ptr->sourceState();
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QAbstractTransition_targetState(QAbstractTransition const * this_ptr) {
  return this_ptr->targetState();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_setTargetState(QAbstractTransition * this_ptr, QAbstractState * target) {
  this_ptr->setTargetState(target);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QAbstractTransition_targetStates(QAbstractTransition const * this_ptr) {
  return new QList< QAbstractState * >(this_ptr->targetStates());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_setTargetStates(QAbstractTransition * this_ptr, QList< QAbstractState * > const * targets) {
  this_ptr->setTargetStates(*targets);
}


RITUAL_EXPORT QAbstractTransition::TransitionType ctr_qt_core_ffi_QAbstractTransition_transitionType(QAbstractTransition const * this_ptr) {
  return this_ptr->transitionType();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_setTransitionType(QAbstractTransition * this_ptr, QAbstractTransition::TransitionType type) {
  this_ptr->setTransitionType(type);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QAbstractTransition_machine(QAbstractTransition const * this_ptr) {
  return this_ptr->machine();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_addAnimation(QAbstractTransition * this_ptr, QAbstractAnimation * animation) {
  this_ptr->addAnimation(animation);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractTransition_removeAnimation(QAbstractTransition * this_ptr, QAbstractAnimation * animation) {
  this_ptr->removeAnimation(animation);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QAbstractTransition_animations(QAbstractTransition const * this_ptr) {
  return new QList< QAbstractAnimation * >(this_ptr->animations());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QAnimationGroup_metaObject(QAnimationGroup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QAnimationGroup_qt_metacast(QAnimationGroup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAnimationGroup_qt_metacall(QAnimationGroup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAnimationGroup_tr(char const * s, char const * c, int n) {
  return new QString(QAnimationGroup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QAnimationGroup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAnimationGroup::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationGroup_dQAnimationGroup(QAnimationGroup * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QAnimationGroup_animationAt(QAnimationGroup const * this_ptr, int index) {
  return this_ptr->animationAt(index);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAnimationGroup_animationCount(QAnimationGroup const * this_ptr) {
  return this_ptr->animationCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAnimationGroup_indexOfAnimation(QAnimationGroup const * this_ptr, QAbstractAnimation * animation) {
  return this_ptr->indexOfAnimation(animation);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationGroup_addAnimation(QAnimationGroup * this_ptr, QAbstractAnimation * animation) {
  this_ptr->addAnimation(animation);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationGroup_insertAnimation(QAnimationGroup * this_ptr, int index, QAbstractAnimation * animation) {
  this_ptr->insertAnimation(index, animation);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationGroup_removeAnimation(QAnimationGroup * this_ptr, QAbstractAnimation * animation) {
  this_ptr->removeAnimation(animation);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QAnimationGroup_takeAnimation(QAnimationGroup * this_ptr, int index) {
  return this_ptr->takeAnimation(index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAnimationGroup_clear(QAnimationGroup * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QBasicTimer * ctr_qt_core_ffi_QBasicTimer_QBasicTimer() {
  return new QBasicTimer();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicTimer_dQBasicTimer(QBasicTimer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBasicTimer_isActive(QBasicTimer const * this_ptr) {
  return this_ptr->isActive();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QBasicTimer_timerId(QBasicTimer const * this_ptr) {
  return this_ptr->timerId();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicTimer_start(QBasicTimer * this_ptr, int msec, QObject * obj) {
  this_ptr->start(msec, obj);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicTimer_start1(QBasicTimer * this_ptr, int msec, Qt::TimerType timerType, QObject * obj) {
  this_ptr->start(msec, timerType, obj);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicTimer_stop(QBasicTimer * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_QBitArray() {
  return new QBitArray();
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_QBitArray1(int size, bool val) {
  return new QBitArray(size, val);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_QBitArray2(QBitArray const * other) {
  return new QBitArray(*other);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_operator_(QBitArray * this_ptr, QBitArray const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_swap(QBitArray * this_ptr, QBitArray * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QBitArray_size(QBitArray const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QBitArray_count(QBitArray const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QBitArray_count1(QBitArray const * this_ptr, bool on) {
  return this_ptr->count(on);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_isEmpty(QBitArray const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_isNull(QBitArray const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_resize(QBitArray * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_detach(QBitArray * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_isDetached(QBitArray const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_clear(QBitArray * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_testBit(QBitArray const * this_ptr, int i) {
  return this_ptr->testBit(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_setBit(QBitArray * this_ptr, int i) {
  this_ptr->setBit(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_setBit1(QBitArray * this_ptr, int i, bool val) {
  this_ptr->setBit(i, val);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_clearBit(QBitArray * this_ptr, int i) {
  this_ptr->clearBit(i);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_toggleBit(QBitArray * this_ptr, int i) {
  return this_ptr->toggleBit(i);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_at(QBitArray const * this_ptr, int i) {
  return this_ptr->at(i);
}


RITUAL_EXPORT QBitRef * ctr_qt_core_ffi_QBitArray_operator__(QBitArray * this_ptr, int i) {
  return new QBitRef(this_ptr->operator[](i));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_operator__1(QBitArray const * this_ptr, int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT QBitRef * ctr_qt_core_ffi_QBitArray_operator__2(QBitArray * this_ptr, unsigned int i) {
  return new QBitRef(this_ptr->operator[](i));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_operator__3(QBitArray const * this_ptr, unsigned int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_operator__4(QBitArray * this_ptr, QBitArray const * arg1) {
  return &this_ptr->operator&=(*arg1);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_operator__5(QBitArray * this_ptr, QBitArray const * arg1) {
  return &this_ptr->operator|=(*arg1);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_operator__6(QBitArray * this_ptr, QBitArray const * arg1) {
  return &this_ptr->operator^=(*arg1);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_operatord(QBitArray const * this_ptr) {
  return new QBitArray(this_ptr->operator~());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_operator__7(QBitArray const * this_ptr, QBitArray const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_fill(QBitArray * this_ptr, bool val, int size) {
  return this_ptr->fill(val, size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_fill1(QBitArray * this_ptr, bool val, int first, int last) {
  this_ptr->fill(val, first, last);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_truncate(QBitArray * this_ptr, int pos) {
  this_ptr->truncate(pos);
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_operator_64(QBitArray const * arg1, QBitArray const * arg2) {
  return new QBitArray(operator&(*arg1, *arg2));
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_operator_65(QBitArray const * arg1, QBitArray const * arg2) {
  return new QBitArray(operator|(*arg1, *arg2));
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_operator_66(QBitArray const * arg1, QBitArray const * arg2) {
  return new QBitArray(operator^(*arg1, *arg2));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitRef_operator_bool(QBitRef const * this_ptr) {
  return this_ptr->operator bool();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitRef_operator_(QBitRef const * this_ptr) {
  return this_ptr->operator!();
}


RITUAL_EXPORT QBitRef * ctr_qt_core_ffi_QBitRef_operator_1(QBitRef * this_ptr, QBitRef const * val) {
  return &this_ptr->operator=(*val);
}


RITUAL_EXPORT QBitRef * ctr_qt_core_ffi_QBitRef_operator_2(QBitRef * this_ptr, bool val) {
  return &this_ptr->operator=(val);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__102(QDataStream * arg1, QBitArray const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__103(QDataStream * arg1, QBitArray * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__104(QDebug const * arg1, QBitArray const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QIODevice_metaObject(QIODevice const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QIODevice_qt_metacast(QIODevice * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_qt_metacall(QIODevice * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QIODevice_tr(char const * s, char const * c, int n) {
  return new QString(QIODevice::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QIODevice_trUtf8(char const * s, char const * c, int n) {
  return new QString(QIODevice::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_dQIODevice(QIODevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_openMode(QIODevice const * this_ptr) {
  return int(this_ptr->openMode());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_setTextModeEnabled(QIODevice * this_ptr, bool enabled) {
  this_ptr->setTextModeEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isTextModeEnabled(QIODevice const * this_ptr) {
  return this_ptr->isTextModeEnabled();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isOpen(QIODevice const * this_ptr) {
  return this_ptr->isOpen();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isReadable(QIODevice const * this_ptr) {
  return this_ptr->isReadable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isWritable(QIODevice const * this_ptr) {
  return this_ptr->isWritable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isSequential(QIODevice const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_readChannelCount(QIODevice const * this_ptr) {
  return this_ptr->readChannelCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_writeChannelCount(QIODevice const * this_ptr) {
  return this_ptr->writeChannelCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_currentReadChannel(QIODevice const * this_ptr) {
  return this_ptr->currentReadChannel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_setCurrentReadChannel(QIODevice * this_ptr, int channel) {
  this_ptr->setCurrentReadChannel(channel);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIODevice_currentWriteChannel(QIODevice const * this_ptr) {
  return this_ptr->currentWriteChannel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_setCurrentWriteChannel(QIODevice * this_ptr, int channel) {
  this_ptr->setCurrentWriteChannel(channel);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_open(QIODevice * this_ptr, int mode) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_close(QIODevice * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_pos(QIODevice const * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_size(QIODevice const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_seek(QIODevice * this_ptr, qint64 pos) {
  return this_ptr->seek(pos);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_atEnd(QIODevice const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_reset(QIODevice * this_ptr) {
  return this_ptr->reset();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_bytesAvailable(QIODevice const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_bytesToWrite(QIODevice const * this_ptr) {
  return this_ptr->bytesToWrite();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_read(QIODevice * this_ptr, char * data, qint64 maxlen) {
  return this_ptr->read(data, maxlen);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QIODevice_read1(QIODevice * this_ptr, qint64 maxlen) {
  return new QByteArray(this_ptr->read(maxlen));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QIODevice_readAll(QIODevice * this_ptr) {
  return new QByteArray(this_ptr->readAll());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_readLine(QIODevice * this_ptr, char * data, qint64 maxlen) {
  return this_ptr->readLine(data, maxlen);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QIODevice_readLine1(QIODevice * this_ptr, qint64 maxlen) {
  return new QByteArray(this_ptr->readLine(maxlen));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_canReadLine(QIODevice const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_startTransaction(QIODevice * this_ptr) {
  this_ptr->startTransaction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_commitTransaction(QIODevice * this_ptr) {
  this_ptr->commitTransaction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_rollbackTransaction(QIODevice * this_ptr) {
  this_ptr->rollbackTransaction();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_isTransactionStarted(QIODevice const * this_ptr) {
  return this_ptr->isTransactionStarted();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_write(QIODevice * this_ptr, char const * data, qint64 len) {
  return this_ptr->write(data, len);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_write1(QIODevice * this_ptr, char const * data) {
  return this_ptr->write(data);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_write2(QIODevice * this_ptr, QByteArray const * data) {
  return this_ptr->write(*data);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_peek(QIODevice * this_ptr, char * data, qint64 maxlen) {
  return this_ptr->peek(data, maxlen);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QIODevice_peek1(QIODevice * this_ptr, qint64 maxlen) {
  return new QByteArray(this_ptr->peek(maxlen));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_waitForReadyRead(QIODevice * this_ptr, int msecs) {
  return this_ptr->waitForReadyRead(msecs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_waitForBytesWritten(QIODevice * this_ptr, int msecs) {
  return this_ptr->waitForBytesWritten(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIODevice_ungetChar(QIODevice * this_ptr, char c) {
  this_ptr->ungetChar(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_putChar(QIODevice * this_ptr, char c) {
  return this_ptr->putChar(c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIODevice_getChar(QIODevice * this_ptr, char * c) {
  return this_ptr->getChar(c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QIODevice_errorString(QIODevice const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QBuffer_metaObject(QBuffer const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QBuffer_qt_metacast(QBuffer * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QBuffer_qt_metacall(QBuffer * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QBuffer_tr(char const * s, char const * c, int n) {
  return new QString(QBuffer::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QBuffer_trUtf8(char const * s, char const * c, int n) {
  return new QString(QBuffer::trUtf8(s, c, n));
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_QBuffer_QBuffer(QObject * parent) {
  return new QBuffer(parent);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_QBuffer_QBuffer1(QByteArray * buf, QObject * parent) {
  return new QBuffer(buf, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBuffer_dQBuffer(QBuffer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QBuffer_buffer(QBuffer * this_ptr) {
  return &this_ptr->buffer();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QBuffer_buffer1(QBuffer const * this_ptr) {
  return &this_ptr->buffer();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBuffer_setBuffer(QBuffer * this_ptr, QByteArray * a) {
  this_ptr->setBuffer(a);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBuffer_setData(QBuffer * this_ptr, QByteArray const * data) {
  this_ptr->setData(*data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBuffer_setData1(QBuffer * this_ptr, char const * data, int len) {
  this_ptr->setData(data, len);
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QBuffer_data(QBuffer const * this_ptr) {
  return &this_ptr->data();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBuffer_open(QBuffer * this_ptr, int openMode) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBuffer_close(QBuffer * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QBuffer_size(QBuffer const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QBuffer_pos(QBuffer const * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBuffer_seek(QBuffer * this_ptr, qint64 off) {
  return this_ptr->seek(off);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBuffer_atEnd(QBuffer const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBuffer_canReadLine(QBuffer const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT QByteArrayMatcher * ctr_qt_core_ffi_QByteArrayMatcher_QByteArrayMatcher() {
  return new QByteArrayMatcher();
}


RITUAL_EXPORT QByteArrayMatcher * ctr_qt_core_ffi_QByteArrayMatcher_QByteArrayMatcher1(QByteArray const * pattern) {
  return new QByteArrayMatcher(*pattern);
}


RITUAL_EXPORT QByteArrayMatcher * ctr_qt_core_ffi_QByteArrayMatcher_QByteArrayMatcher2(char const * pattern, int length) {
  return new QByteArrayMatcher(pattern, length);
}


RITUAL_EXPORT QByteArrayMatcher * ctr_qt_core_ffi_QByteArrayMatcher_QByteArrayMatcher3(QByteArrayMatcher const * other) {
  return new QByteArrayMatcher(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArrayMatcher_dQByteArrayMatcher(QByteArrayMatcher * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteArrayMatcher * ctr_qt_core_ffi_QByteArrayMatcher_operator_(QByteArrayMatcher * this_ptr, QByteArrayMatcher const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteArrayMatcher_setPattern(QByteArrayMatcher * this_ptr, QByteArray const * pattern) {
  this_ptr->setPattern(*pattern);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArrayMatcher_indexIn(QByteArrayMatcher const * this_ptr, QByteArray const * ba, int from) {
  return this_ptr->indexIn(*ba, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArrayMatcher_indexIn1(QByteArrayMatcher const * this_ptr, char const * str, int len, int from) {
  return this_ptr->indexIn(str, len, from);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArrayMatcher_pattern(QByteArrayMatcher const * this_ptr) {
  return new QByteArray(this_ptr->pattern());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash23(QLocale const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale() {
  return new QLocale();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale1(QString const * name) {
  return new QLocale(*name);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale2(QLocale::Language language, QLocale::Country country) {
  return new QLocale(language, country);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale3(QLocale::Language language, QLocale::Script script, QLocale::Country country) {
  return new QLocale(language, script, country);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale4(QLocale const * other) {
  return new QLocale(*other);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_operator_1(QLocale * this_ptr, QLocale const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLocale_dQLocale(QLocale * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLocale_swap(QLocale * this_ptr, QLocale * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QLocale::Language ctr_qt_core_ffi_QLocale_language(QLocale const * this_ptr) {
  return this_ptr->language();
}


RITUAL_EXPORT QLocale::Script ctr_qt_core_ffi_QLocale_script(QLocale const * this_ptr) {
  return this_ptr->script();
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QLocale_country(QLocale const * this_ptr) {
  return this_ptr->country();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_name(QLocale const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_bcp47Name(QLocale const * this_ptr) {
  return new QString(this_ptr->bcp47Name());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_nativeLanguageName(QLocale const * this_ptr) {
  return new QString(this_ptr->nativeLanguageName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_nativeCountryName(QLocale const * this_ptr) {
  return new QString(this_ptr->nativeCountryName());
}


RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toShort(*s, ok);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toUShort(*s, ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toInt(*s, ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toUInt(*s, ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toLongLong(*s, ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toULongLong(*s, ok);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toFloat(*s, ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toDouble(*s, ok);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toShort(*s, ok);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toUShort(*s, ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toInt(*s, ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toUInt(*s, ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toLongLong(*s, ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toULongLong(*s, ok);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toFloat(*s, ok);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toDouble(*s, ok);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString(QLocale const * this_ptr, qlonglong i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString1(QLocale const * this_ptr, qulonglong i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString2(QLocale const * this_ptr, short i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString3(QLocale const * this_ptr, unsigned short i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString4(QLocale const * this_ptr, int i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString5(QLocale const * this_ptr, unsigned int i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString6(QLocale const * this_ptr, double i, char f, int prec) {
  return new QString(this_ptr->toString(i, f, prec));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString7(QLocale const * this_ptr, float i, char f, int prec) {
  return new QString(this_ptr->toString(i, f, prec));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString8(QLocale const * this_ptr, QDate const * date, QString const * formatStr) {
  return new QString(this_ptr->toString(*date, *formatStr));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString9(QLocale const * this_ptr, QDate const * date, QLocale::FormatType format) {
  return new QString(this_ptr->toString(*date, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString10(QLocale const * this_ptr, QTime const * time, QString const * formatStr) {
  return new QString(this_ptr->toString(*time, *formatStr));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString11(QLocale const * this_ptr, QTime const * time, QLocale::FormatType format) {
  return new QString(this_ptr->toString(*time, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString12(QLocale const * this_ptr, QDateTime const * dateTime, QLocale::FormatType format) {
  return new QString(this_ptr->toString(*dateTime, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString13(QLocale const * this_ptr, QDateTime const * dateTime, QString const * format) {
  return new QString(this_ptr->toString(*dateTime, *format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dateFormat(QLocale const * this_ptr, QLocale::FormatType format) {
  return new QString(this_ptr->dateFormat(format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_timeFormat(QLocale const * this_ptr, QLocale::FormatType format) {
  return new QString(this_ptr->timeFormat(format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dateTimeFormat(QLocale const * this_ptr, QLocale::FormatType format) {
  return new QString(this_ptr->dateTimeFormat(format));
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLocale_toDate(QLocale const * this_ptr, QString const * string, QLocale::FormatType arg2) {
  return new QDate(this_ptr->toDate(*string, arg2));
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QLocale_toTime(QLocale const * this_ptr, QString const * string, QLocale::FormatType arg2) {
  return new QTime(this_ptr->toTime(*string, arg2));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QLocale_toDateTime(QLocale const * this_ptr, QString const * string, QLocale::FormatType format) {
  return new QDateTime(this_ptr->toDateTime(*string, format));
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLocale_toDate1(QLocale const * this_ptr, QString const * string, QString const * format) {
  return new QDate(this_ptr->toDate(*string, *format));
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QLocale_toTime1(QLocale const * this_ptr, QString const * string, QString const * format) {
  return new QTime(this_ptr->toTime(*string, *format));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QLocale_toDateTime1(QLocale const * this_ptr, QString const * string, QString const * format) {
  return new QDateTime(this_ptr->toDateTime(*string, *format));
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_decimalPoint(QLocale const * this_ptr) {
  return new QChar(this_ptr->decimalPoint());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_groupSeparator(QLocale const * this_ptr) {
  return new QChar(this_ptr->groupSeparator());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_percent(QLocale const * this_ptr) {
  return new QChar(this_ptr->percent());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_zeroDigit(QLocale const * this_ptr) {
  return new QChar(this_ptr->zeroDigit());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_negativeSign(QLocale const * this_ptr) {
  return new QChar(this_ptr->negativeSign());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_positiveSign(QLocale const * this_ptr) {
  return new QChar(this_ptr->positiveSign());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QLocale_exponential(QLocale const * this_ptr) {
  return new QChar(this_ptr->exponential());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_monthName(QLocale const * this_ptr, int arg1, QLocale::FormatType format) {
  return new QString(this_ptr->monthName(arg1, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_standaloneMonthName(QLocale const * this_ptr, int arg1, QLocale::FormatType format) {
  return new QString(this_ptr->standaloneMonthName(arg1, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dayName(QLocale const * this_ptr, int arg1, QLocale::FormatType format) {
  return new QString(this_ptr->dayName(arg1, format));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_standaloneDayName(QLocale const * this_ptr, int arg1, QLocale::FormatType format) {
  return new QString(this_ptr->standaloneDayName(arg1, format));
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QLocale_firstDayOfWeek(QLocale const * this_ptr) {
  return this_ptr->firstDayOfWeek();
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QLocale_weekdays(QLocale const * this_ptr) {
  return new QList< Qt::DayOfWeek >(this_ptr->weekdays());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_amText(QLocale const * this_ptr) {
  return new QString(this_ptr->amText());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_pmText(QLocale const * this_ptr) {
  return new QString(this_ptr->pmText());
}


RITUAL_EXPORT QLocale::MeasurementSystem ctr_qt_core_ffi_QLocale_measurementSystem(QLocale const * this_ptr) {
  return this_ptr->measurementSystem();
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_core_ffi_QLocale_textDirection(QLocale const * this_ptr) {
  return this_ptr->textDirection();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toUpper(QLocale const * this_ptr, QString const * str) {
  return new QString(this_ptr->toUpper(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toLower(QLocale const * this_ptr, QString const * str) {
  return new QString(this_ptr->toLower(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_currencySymbol(QLocale const * this_ptr, QLocale::CurrencySymbolFormat arg1) {
  return new QString(this_ptr->currencySymbol(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString(QLocale const * this_ptr, qlonglong arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString1(QLocale const * this_ptr, qulonglong arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString2(QLocale const * this_ptr, short arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString3(QLocale const * this_ptr, unsigned short arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString4(QLocale const * this_ptr, int arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString5(QLocale const * this_ptr, unsigned int arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString6(QLocale const * this_ptr, double arg1, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString7(QLocale const * this_ptr, double arg1, QString const * symbol, int precision) {
  return new QString(this_ptr->toCurrencyString(arg1, *symbol, precision));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString8(QLocale const * this_ptr, float i, QString const * symbol) {
  return new QString(this_ptr->toCurrencyString(i, *symbol));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString9(QLocale const * this_ptr, float i, QString const * symbol, int precision) {
  return new QString(this_ptr->toCurrencyString(i, *symbol, precision));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QLocale_uiLanguages(QLocale const * this_ptr) {
  return new QStringList(this_ptr->uiLanguages());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLocale_operator__(QLocale const * this_ptr, QLocale const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_languageToString(QLocale::Language language) {
  return new QString(QLocale::languageToString(language));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_countryToString(QLocale::Country country) {
  return new QString(QLocale::countryToString(country));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_scriptToString(QLocale::Script script) {
  return new QString(QLocale::scriptToString(script));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLocale_setDefault(QLocale const * locale) {
  QLocale::setDefault(*locale);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_c() {
  return new QLocale(QLocale::c());
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_system() {
  return new QLocale(QLocale::system());
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QLocale_matchingLocales(QLocale::Language language, QLocale::Script script, QLocale::Country country) {
  return new QList< QLocale >(QLocale::matchingLocales(language, script, country));
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QLocale_countriesForLanguage(QLocale::Language lang) {
  return new QList< QLocale::Country >(QLocale::countriesForLanguage(lang));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLocale_setNumberOptions(QLocale * this_ptr, int options) {
  this_ptr->setNumberOptions(QFlags< QLocale::NumberOption >(options));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_numberOptions(QLocale const * this_ptr) {
  return int(this_ptr->numberOptions());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_quoteString(QLocale const * this_ptr, QString const * str, QLocale::QuotationStyle style) {
  return new QString(this_ptr->quoteString(*str, style));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_quoteString1(QLocale const * this_ptr, QStringRef const * str, QLocale::QuotationStyle style) {
  return new QString(this_ptr->quoteString(*str, style));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_createSeparatedList(QLocale const * this_ptr, QStringList const * strl) {
  return new QString(this_ptr->createSeparatedList(*strl));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__105(QDataStream * arg1, QLocale const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__106(QDataStream * arg1, QLocale * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__107(QDebug const * arg1, QLocale const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QCollatorSortKey * ctr_qt_core_ffi_QCollatorSortKey_QCollatorSortKey(QCollatorSortKey const * other) {
  return new QCollatorSortKey(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollatorSortKey_dQCollatorSortKey(QCollatorSortKey * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QCollatorSortKey * ctr_qt_core_ffi_QCollatorSortKey_operator_(QCollatorSortKey * this_ptr, QCollatorSortKey const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollatorSortKey_swap(QCollatorSortKey * this_ptr, QCollatorSortKey * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCollatorSortKey_compare(QCollatorSortKey const * this_ptr, QCollatorSortKey const * key) {
  return this_ptr->compare(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_67(QCollatorSortKey const * lhs, QCollatorSortKey const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT QCollator * ctr_qt_core_ffi_QCollator_QCollator(QLocale const * locale) {
  return new QCollator(*locale);
}


RITUAL_EXPORT QCollator * ctr_qt_core_ffi_QCollator_QCollator1(QCollator const * arg1) {
  return new QCollator(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_dQCollator(QCollator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QCollator * ctr_qt_core_ffi_QCollator_operator_(QCollator * this_ptr, QCollator const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_swap(QCollator * this_ptr, QCollator * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_setLocale(QCollator * this_ptr, QLocale const * locale) {
  this_ptr->setLocale(*locale);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QCollator_locale(QCollator const * this_ptr) {
  return new QLocale(this_ptr->locale());
}


RITUAL_EXPORT Qt::CaseSensitivity ctr_qt_core_ffi_QCollator_caseSensitivity(QCollator const * this_ptr) {
  return this_ptr->caseSensitivity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_setCaseSensitivity(QCollator * this_ptr, Qt::CaseSensitivity cs) {
  this_ptr->setCaseSensitivity(cs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_setNumericMode(QCollator * this_ptr, bool on) {
  this_ptr->setNumericMode(on);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCollator_numericMode(QCollator const * this_ptr) {
  return this_ptr->numericMode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCollator_setIgnorePunctuation(QCollator * this_ptr, bool on) {
  this_ptr->setIgnorePunctuation(on);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCollator_ignorePunctuation(QCollator const * this_ptr) {
  return this_ptr->ignorePunctuation();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCollator_compare(QCollator const * this_ptr, QString const * s1, QString const * s2) {
  return this_ptr->compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCollator_compare1(QCollator const * this_ptr, QStringRef const * s1, QStringRef const * s2) {
  return this_ptr->compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCollator_compare2(QCollator const * this_ptr, QChar const * s1, int len1, QChar const * s2, int len2) {
  return this_ptr->compare(s1, len1, s2, len2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCollator_operator__(QCollator const * this_ptr, QString const * s1, QString const * s2) {
  return this_ptr->operator()(*s1, *s2);
}


RITUAL_EXPORT QCollatorSortKey * ctr_qt_core_ffi_QCollator_sortKey(QCollator const * this_ptr, QString const * string) {
  return new QCollatorSortKey(this_ptr->sortKey(*string));
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption(QString const * name) {
  return new QCommandLineOption(*name);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption1(QStringList const * names) {
  return new QCommandLineOption(*names);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption2(QString const * name, QString const * description, QString const * valueName, QString const * defaultValue) {
  return new QCommandLineOption(*name, *description, *valueName, *defaultValue);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption3(QStringList const * names, QString const * description, QString const * valueName, QString const * defaultValue) {
  return new QCommandLineOption(*names, *description, *valueName, *defaultValue);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption4(QCommandLineOption const * other) {
  return new QCommandLineOption(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_dQCommandLineOption(QCommandLineOption * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_operator_(QCommandLineOption * this_ptr, QCommandLineOption const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_swap(QCommandLineOption * this_ptr, QCommandLineOption * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineOption_names(QCommandLineOption const * this_ptr) {
  return new QStringList(this_ptr->names());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setValueName(QCommandLineOption * this_ptr, QString const * name) {
  this_ptr->setValueName(*name);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineOption_valueName(QCommandLineOption const * this_ptr) {
  return new QString(this_ptr->valueName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setDescription(QCommandLineOption * this_ptr, QString const * description) {
  this_ptr->setDescription(*description);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineOption_description(QCommandLineOption const * this_ptr) {
  return new QString(this_ptr->description());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setDefaultValue(QCommandLineOption * this_ptr, QString const * defaultValue) {
  this_ptr->setDefaultValue(*defaultValue);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setDefaultValues(QCommandLineOption * this_ptr, QStringList const * defaultValues) {
  this_ptr->setDefaultValues(*defaultValues);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineOption_defaultValues(QCommandLineOption const * this_ptr) {
  return new QStringList(this_ptr->defaultValues());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCommandLineOption_flags(QCommandLineOption const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setFlags(QCommandLineOption * this_ptr, int aflags) {
  this_ptr->setFlags(QFlags< QCommandLineOption::Flag >(aflags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineOption_setHidden(QCommandLineOption * this_ptr, bool hidden) {
  this_ptr->setHidden(hidden);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineOption_isHidden(QCommandLineOption const * this_ptr) {
  return this_ptr->isHidden();
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_QEvent_QEvent(QEvent::Type type) {
  return new QEvent(type);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_QEvent_QEvent1(QEvent const * other) {
  return new QEvent(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEvent_dQEvent(QEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_QEvent_operator_(QEvent * this_ptr, QEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QEvent::Type ctr_qt_core_ffi_QEvent_type(QEvent const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEvent_spontaneous(QEvent const * this_ptr) {
  return this_ptr->spontaneous();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEvent_setAccepted(QEvent * this_ptr, bool accepted) {
  this_ptr->setAccepted(accepted);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEvent_isAccepted(QEvent const * this_ptr) {
  return this_ptr->isAccepted();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEvent_accept(QEvent * this_ptr) {
  this_ptr->accept();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEvent_ignore(QEvent * this_ptr) {
  this_ptr->ignore();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEvent_registerEventType(int hint) {
  return QEvent::registerEventType(hint);
}


RITUAL_EXPORT QTimerEvent * ctr_qt_core_ffi_QTimerEvent_QTimerEvent(int timerId) {
  return new QTimerEvent(timerId);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimerEvent_dQTimerEvent(QTimerEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimerEvent_timerId(QTimerEvent const * this_ptr) {
  return this_ptr->timerId();
}


RITUAL_EXPORT QChildEvent * ctr_qt_core_ffi_QChildEvent_QChildEvent(QEvent::Type type, QObject * child) {
  return new QChildEvent(type, child);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QChildEvent_dQChildEvent(QChildEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QChildEvent_child(QChildEvent const * this_ptr) {
  return this_ptr->child();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChildEvent_added(QChildEvent const * this_ptr) {
  return this_ptr->added();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChildEvent_polished(QChildEvent const * this_ptr) {
  return this_ptr->polished();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QChildEvent_removed(QChildEvent const * this_ptr) {
  return this_ptr->removed();
}


RITUAL_EXPORT QDynamicPropertyChangeEvent * ctr_qt_core_ffi_QDynamicPropertyChangeEvent_QDynamicPropertyChangeEvent(QByteArray const * name) {
  return new QDynamicPropertyChangeEvent(*name);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDynamicPropertyChangeEvent_dQDynamicPropertyChangeEvent(QDynamicPropertyChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QDynamicPropertyChangeEvent_propertyName(QDynamicPropertyChangeEvent const * this_ptr) {
  return new QByteArray(this_ptr->propertyName());
}


RITUAL_EXPORT QDeferredDeleteEvent * ctr_qt_core_ffi_QDeferredDeleteEvent_QDeferredDeleteEvent() {
  return new QDeferredDeleteEvent();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeferredDeleteEvent_dQDeferredDeleteEvent(QDeferredDeleteEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDeferredDeleteEvent_loopLevel(QDeferredDeleteEvent const * this_ptr) {
  return this_ptr->loopLevel();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCoreApplication_metaObject(QCoreApplication const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QCoreApplication_qt_metacast(QCoreApplication * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCoreApplication_qt_metacall(QCoreApplication * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_tr(char const * s, char const * c, int n) {
  return new QString(QCoreApplication::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_trUtf8(char const * s, char const * c, int n) {
  return new QString(QCoreApplication::trUtf8(s, c, n));
}


RITUAL_EXPORT QCoreApplication * ctr_qt_core_ffi_QCoreApplication_QCoreApplication(int * argc, char * * argv, int arg3) {
  return new QCoreApplication(*argc, argv, arg3);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_dQCoreApplication(QCoreApplication * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCoreApplication_arguments() {
  return new QStringList(QCoreApplication::arguments());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setAttribute(Qt::ApplicationAttribute attribute, bool on) {
  QCoreApplication::setAttribute(attribute, on);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_testAttribute(Qt::ApplicationAttribute attribute) {
  return QCoreApplication::testAttribute(attribute);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setOrganizationDomain(QString const * orgDomain) {
  QCoreApplication::setOrganizationDomain(*orgDomain);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_organizationDomain() {
  return new QString(QCoreApplication::organizationDomain());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setOrganizationName(QString const * orgName) {
  QCoreApplication::setOrganizationName(*orgName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_organizationName() {
  return new QString(QCoreApplication::organizationName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setApplicationName(QString const * application) {
  QCoreApplication::setApplicationName(*application);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_applicationName() {
  return new QString(QCoreApplication::applicationName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setApplicationVersion(QString const * version) {
  QCoreApplication::setApplicationVersion(*version);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_applicationVersion() {
  return new QString(QCoreApplication::applicationVersion());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setSetuidAllowed(bool allow) {
  QCoreApplication::setSetuidAllowed(allow);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_isSetuidAllowed() {
  return QCoreApplication::isSetuidAllowed();
}


RITUAL_EXPORT QCoreApplication * ctr_qt_core_ffi_QCoreApplication_instance() {
  return QCoreApplication::instance();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QCoreApplication_exec() {
  return QCoreApplication::exec();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_processEvents(int flags) {
  QCoreApplication::processEvents(QFlags< QEventLoop::ProcessEventsFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_processEvents1(int flags, int maxtime) {
  QCoreApplication::processEvents(QFlags< QEventLoop::ProcessEventsFlag >(flags), maxtime);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_exit(int retcode) {
  QCoreApplication::exit(retcode);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_sendEvent(QObject * receiver, QEvent * event) {
  return QCoreApplication::sendEvent(receiver, event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_postEvent(QObject * receiver, QEvent * event, int priority) {
  QCoreApplication::postEvent(receiver, event, priority);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_sendPostedEvents(QObject * receiver, int event_type) {
  QCoreApplication::sendPostedEvents(receiver, event_type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_removePostedEvents(QObject * receiver, int eventType) {
  QCoreApplication::removePostedEvents(receiver, eventType);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_hasPendingEvents() {
  return QCoreApplication::hasPendingEvents();
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_QCoreApplication_eventDispatcher() {
  return QCoreApplication::eventDispatcher();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setEventDispatcher(QAbstractEventDispatcher * eventDispatcher) {
  QCoreApplication::setEventDispatcher(eventDispatcher);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_notify(QCoreApplication * this_ptr, QObject * arg1, QEvent * arg2) {
  return this_ptr->notify(arg1, arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_startingUp() {
  return QCoreApplication::startingUp();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_closingDown() {
  return QCoreApplication::closingDown();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_applicationDirPath() {
  return new QString(QCoreApplication::applicationDirPath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_applicationFilePath() {
  return new QString(QCoreApplication::applicationFilePath());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCoreApplication_applicationPid() {
  return QCoreApplication::applicationPid();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setLibraryPaths(QStringList const * arg1) {
  QCoreApplication::setLibraryPaths(*arg1);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCoreApplication_libraryPaths() {
  return new QStringList(QCoreApplication::libraryPaths());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_addLibraryPath(QString const * arg1) {
  QCoreApplication::addLibraryPath(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_removeLibraryPath(QString const * arg1) {
  QCoreApplication::removeLibraryPath(*arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_installTranslator(QTranslator * messageFile) {
  return QCoreApplication::installTranslator(messageFile);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_removeTranslator(QTranslator * messageFile) {
  return QCoreApplication::removeTranslator(messageFile);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_translate(char const * context, char const * key, char const * disambiguation, int n) {
  return new QString(QCoreApplication::translate(context, key, disambiguation, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_flush() {
  QCoreApplication::flush();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_installNativeEventFilter(QCoreApplication * this_ptr, QAbstractNativeEventFilter * filterObj) {
  this_ptr->installNativeEventFilter(filterObj);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_removeNativeEventFilter(QCoreApplication * this_ptr, QAbstractNativeEventFilter * filterObj) {
  this_ptr->removeNativeEventFilter(filterObj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCoreApplication_isQuitLockEnabled() {
  return QCoreApplication::isQuitLockEnabled();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setQuitLockEnabled(bool enabled) {
  QCoreApplication::setQuitLockEnabled(enabled);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_quit() {
  QCoreApplication::quit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_qAddPreRoutine(void (*arg1)()) {
  qAddPreRoutine(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qAddPostRoutine(void (*arg1)()) {
  qAddPostRoutine(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qRemovePostRoutine(void (*arg1)()) {
  qRemovePostRoutine(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_qAppName() {
  return new QString(qAppName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_tr(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QCommandLineParser::tr(sourceText, disambiguation, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_trUtf8(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QCommandLineParser::trUtf8(sourceText, disambiguation, n));
}


RITUAL_EXPORT QCommandLineParser * ctr_qt_core_ffi_QCommandLineParser_QCommandLineParser() {
  return new QCommandLineParser();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_dQCommandLineParser(QCommandLineParser * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_setSingleDashWordOptionMode(QCommandLineParser * this_ptr, QCommandLineParser::SingleDashWordOptionMode parsingMode) {
  this_ptr->setSingleDashWordOptionMode(parsingMode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(QCommandLineParser * this_ptr, QCommandLineParser::OptionsAfterPositionalArgumentsMode mode) {
  this_ptr->setOptionsAfterPositionalArgumentsMode(mode);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineParser_addOption(QCommandLineParser * this_ptr, QCommandLineOption const * commandLineOption) {
  return this_ptr->addOption(*commandLineOption);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineParser_addOptions(QCommandLineParser * this_ptr, QList< QCommandLineOption > const * options) {
  return this_ptr->addOptions(*options);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineParser_addVersionOption(QCommandLineParser * this_ptr) {
  return new QCommandLineOption(this_ptr->addVersionOption());
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineParser_addHelpOption(QCommandLineParser * this_ptr) {
  return new QCommandLineOption(this_ptr->addHelpOption());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_setApplicationDescription(QCommandLineParser * this_ptr, QString const * description) {
  this_ptr->setApplicationDescription(*description);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_applicationDescription(QCommandLineParser const * this_ptr) {
  return new QString(this_ptr->applicationDescription());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_addPositionalArgument(QCommandLineParser * this_ptr, QString const * name, QString const * description, QString const * syntax) {
  this_ptr->addPositionalArgument(*name, *description, *syntax);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_clearPositionalArguments(QCommandLineParser * this_ptr) {
  this_ptr->clearPositionalArguments();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_process(QCommandLineParser * this_ptr, QStringList const * arguments) {
  this_ptr->process(*arguments);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_process1(QCommandLineParser * this_ptr, QCoreApplication const * app) {
  this_ptr->process(*app);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineParser_parse(QCommandLineParser * this_ptr, QStringList const * arguments) {
  return this_ptr->parse(*arguments);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_errorText(QCommandLineParser const * this_ptr) {
  return new QString(this_ptr->errorText());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineParser_isSet(QCommandLineParser const * this_ptr, QString const * name) {
  return this_ptr->isSet(*name);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_value(QCommandLineParser const * this_ptr, QString const * name) {
  return new QString(this_ptr->value(*name));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineParser_values(QCommandLineParser const * this_ptr, QString const * name) {
  return new QStringList(this_ptr->values(*name));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCommandLineParser_isSet1(QCommandLineParser const * this_ptr, QCommandLineOption const * option) {
  return this_ptr->isSet(*option);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_value1(QCommandLineParser const * this_ptr, QCommandLineOption const * option) {
  return new QString(this_ptr->value(*option));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineParser_values1(QCommandLineParser const * this_ptr, QCommandLineOption const * option) {
  return new QStringList(this_ptr->values(*option));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineParser_positionalArguments(QCommandLineParser const * this_ptr) {
  return new QStringList(this_ptr->positionalArguments());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineParser_optionNames(QCommandLineParser const * this_ptr) {
  return new QStringList(this_ptr->optionNames());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCommandLineParser_unknownOptionNames(QCommandLineParser const * this_ptr) {
  return new QStringList(this_ptr->unknownOptionNames());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_showVersion(QCommandLineParser * this_ptr) {
  this_ptr->showVersion();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_showHelp(QCommandLineParser * this_ptr, int exitCode) {
  this_ptr->showHelp(exitCode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCommandLineParser_helpText(QCommandLineParser const * this_ptr) {
  return new QString(this_ptr->helpText());
}


RITUAL_EXPORT QCryptographicHash * ctr_qt_core_ffi_QCryptographicHash_QCryptographicHash(QCryptographicHash::Algorithm method) {
  return new QCryptographicHash(method);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCryptographicHash_dQCryptographicHash(QCryptographicHash * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCryptographicHash_reset(QCryptographicHash * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCryptographicHash_addData(QCryptographicHash * this_ptr, char const * data, int length) {
  this_ptr->addData(data, length);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCryptographicHash_addData1(QCryptographicHash * this_ptr, QByteArray const * data) {
  this_ptr->addData(*data);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QCryptographicHash_addData2(QCryptographicHash * this_ptr, QIODevice * device) {
  return this_ptr->addData(device);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCryptographicHash_result(QCryptographicHash const * this_ptr) {
  return new QByteArray(this_ptr->result());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCryptographicHash_hash(QByteArray const * data, QCryptographicHash::Algorithm method) {
  return new QByteArray(QCryptographicHash::hash(*data, method));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_QDataStream() {
  return new QDataStream();
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_QDataStream1(QIODevice * arg1) {
  return new QDataStream(arg1);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_QDataStream2(QByteArray * arg1, int flags) {
  return new QDataStream(arg1, QFlags< QIODevice::OpenModeFlag >(flags));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_QDataStream3(QByteArray const * arg1) {
  return new QDataStream(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_dQDataStream(QDataStream * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QDataStream_device(QDataStream const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_setDevice(QDataStream * this_ptr, QIODevice * arg1) {
  this_ptr->setDevice(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_unsetDevice(QDataStream * this_ptr) {
  this_ptr->unsetDevice();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDataStream_atEnd(QDataStream const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT QDataStream::Status ctr_qt_core_ffi_QDataStream_status(QDataStream const * this_ptr) {
  return this_ptr->status();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_setStatus(QDataStream * this_ptr, QDataStream::Status status) {
  this_ptr->setStatus(status);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_resetStatus(QDataStream * this_ptr) {
  this_ptr->resetStatus();
}


RITUAL_EXPORT QDataStream::FloatingPointPrecision ctr_qt_core_ffi_QDataStream_floatingPointPrecision(QDataStream const * this_ptr) {
  return this_ptr->floatingPointPrecision();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_setFloatingPointPrecision(QDataStream * this_ptr, QDataStream::FloatingPointPrecision precision) {
  this_ptr->setFloatingPointPrecision(precision);
}


RITUAL_EXPORT QDataStream::ByteOrder ctr_qt_core_ffi_QDataStream_byteOrder(QDataStream const * this_ptr) {
  return this_ptr->byteOrder();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_setByteOrder(QDataStream * this_ptr, QDataStream::ByteOrder arg1) {
  this_ptr->setByteOrder(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDataStream_version(QDataStream const * this_ptr) {
  return this_ptr->version();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_setVersion(QDataStream * this_ptr, int arg1) {
  this_ptr->setVersion(arg1);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__(QDataStream * this_ptr, qint8 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__1(QDataStream * this_ptr, quint8 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__2(QDataStream * this_ptr, qint16 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__3(QDataStream * this_ptr, quint16 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__4(QDataStream * this_ptr, qint32 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__5(QDataStream * this_ptr, quint32 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__6(QDataStream * this_ptr, qint64 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__7(QDataStream * this_ptr, quint64 * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__8(QDataStream * this_ptr, bool * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__9(QDataStream * this_ptr, qfloat16 * f) {
  return &this_ptr->operator>>(*f);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__10(QDataStream * this_ptr, float * f) {
  return &this_ptr->operator>>(*f);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__11(QDataStream * this_ptr, double * f) {
  return &this_ptr->operator>>(*f);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__12(QDataStream * this_ptr, char * * str) {
  return &this_ptr->operator>>(*str);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__13(QDataStream * this_ptr, qint8 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__14(QDataStream * this_ptr, quint8 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__15(QDataStream * this_ptr, qint16 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__16(QDataStream * this_ptr, quint16 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__17(QDataStream * this_ptr, qint32 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__18(QDataStream * this_ptr, quint32 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__19(QDataStream * this_ptr, qint64 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__20(QDataStream * this_ptr, quint64 i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__21(QDataStream * this_ptr, bool i) {
  return &this_ptr->operator<<(i);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__22(QDataStream * this_ptr, qfloat16 const * f) {
  return &this_ptr->operator<<(*f);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__23(QDataStream * this_ptr, float f) {
  return &this_ptr->operator<<(f);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__24(QDataStream * this_ptr, double f) {
  return &this_ptr->operator<<(f);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_operator__25(QDataStream * this_ptr, char const * str) {
  return &this_ptr->operator<<(str);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_readBytes(QDataStream * this_ptr, char * * arg1, unsigned int * len) {
  return &this_ptr->readBytes(*arg1, *len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDataStream_readRawData(QDataStream * this_ptr, char * arg1, int len) {
  return this_ptr->readRawData(arg1, len);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_QDataStream_writeBytes(QDataStream * this_ptr, char const * arg1, unsigned int len) {
  return &this_ptr->writeBytes(arg1, len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDataStream_writeRawData(QDataStream * this_ptr, char const * arg1, int len) {
  return this_ptr->writeRawData(arg1, len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDataStream_skipRawData(QDataStream * this_ptr, int len) {
  return this_ptr->skipRawData(len);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_startTransaction(QDataStream * this_ptr) {
  this_ptr->startTransaction();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDataStream_commitTransaction(QDataStream * this_ptr) {
  return this_ptr->commitTransaction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_rollbackTransaction(QDataStream * this_ptr) {
  this_ptr->rollbackTransaction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDataStream_abortTransaction(QDataStream * this_ptr) {
  this_ptr->abortTransaction();
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_QDate() {
  return new QDate();
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_QDate1(int y, int m, int d) {
  return new QDate(y, m, d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_isNull(QDate const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_isValid(QDate const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_year(QDate const * this_ptr) {
  return this_ptr->year();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_month(QDate const * this_ptr) {
  return this_ptr->month();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_day(QDate const * this_ptr) {
  return this_ptr->day();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_dayOfWeek(QDate const * this_ptr) {
  return this_ptr->dayOfWeek();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_dayOfYear(QDate const * this_ptr) {
  return this_ptr->dayOfYear();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_daysInMonth(QDate const * this_ptr) {
  return this_ptr->daysInMonth();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_daysInYear(QDate const * this_ptr) {
  return this_ptr->daysInYear();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_weekNumber(QDate const * this_ptr, int * yearNum) {
  return this_ptr->weekNumber(yearNum);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_shortMonthName(int month, QDate::MonthNameType type) {
  return new QString(QDate::shortMonthName(month, type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_shortDayName(int weekday, QDate::MonthNameType type) {
  return new QString(QDate::shortDayName(weekday, type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_longMonthName(int month, QDate::MonthNameType type) {
  return new QString(QDate::longMonthName(month, type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_longDayName(int weekday, QDate::MonthNameType type) {
  return new QString(QDate::longDayName(weekday, type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString(QDate const * this_ptr, Qt::DateFormat f) {
  return new QString(this_ptr->toString(f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString1(QDate const * this_ptr, QString const * format) {
  return new QString(this_ptr->toString(*format));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_setDate(QDate * this_ptr, int year, int month, int day) {
  return this_ptr->setDate(year, month, day);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDate_getDate(QDate * this_ptr, int * year, int * month, int * day) {
  this_ptr->getDate(year, month, day);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDate_getDate1(QDate const * this_ptr, int * year, int * month, int * day) {
  this_ptr->getDate(year, month, day);
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_addDays(QDate const * this_ptr, qint64 days) {
  return new QDate(this_ptr->addDays(days));
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_addMonths(QDate const * this_ptr, int months) {
  return new QDate(this_ptr->addMonths(months));
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_addYears(QDate const * this_ptr, int years) {
  return new QDate(this_ptr->addYears(years));
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDate_daysTo(QDate const * this_ptr, QDate const * arg1) {
  return this_ptr->daysTo(*arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_operator__(QDate const * this_ptr, QDate const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_operator_(QDate const * this_ptr, QDate const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_operator__2(QDate const * this_ptr, QDate const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_operator_1(QDate const * this_ptr, QDate const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_operator__3(QDate const * this_ptr, QDate const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_currentDate() {
  return new QDate(QDate::currentDate());
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_fromString(QString const * s, Qt::DateFormat f) {
  return new QDate(QDate::fromString(*s, f));
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_fromString1(QString const * s, QString const * format) {
  return new QDate(QDate::fromString(*s, *format));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_isValid1(int y, int m, int d) {
  return QDate::isValid(y, m, d);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_isLeapYear(int year) {
  return QDate::isLeapYear(year);
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_fromJulianDay(qint64 jd_) {
  return new QDate(QDate::fromJulianDay(jd_));
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDate_toJulianDay(QDate const * this_ptr) {
  return this_ptr->toJulianDay();
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_QTime() {
  return new QTime();
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_QTime1(int h, int m, int s, int ms) {
  return new QTime(h, m, s, ms);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_isNull(QTime const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_isValid(QTime const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_hour(QTime const * this_ptr) {
  return this_ptr->hour();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_minute(QTime const * this_ptr) {
  return this_ptr->minute();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_second(QTime const * this_ptr) {
  return this_ptr->second();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_msec(QTime const * this_ptr) {
  return this_ptr->msec();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTime_toString(QTime const * this_ptr, Qt::DateFormat f) {
  return new QString(this_ptr->toString(f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTime_toString1(QTime const * this_ptr, QString const * format) {
  return new QString(this_ptr->toString(*format));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_setHMS(QTime * this_ptr, int h, int m, int s, int ms) {
  return this_ptr->setHMS(h, m, s, ms);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_addSecs(QTime const * this_ptr, int secs) {
  return new QTime(this_ptr->addSecs(secs));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_secsTo(QTime const * this_ptr, QTime const * arg1) {
  return this_ptr->secsTo(*arg1);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_addMSecs(QTime const * this_ptr, int ms) {
  return new QTime(this_ptr->addMSecs(ms));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_msecsTo(QTime const * this_ptr, QTime const * arg1) {
  return this_ptr->msecsTo(*arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_operator__(QTime const * this_ptr, QTime const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_operator_(QTime const * this_ptr, QTime const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_operator__2(QTime const * this_ptr, QTime const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_operator_1(QTime const * this_ptr, QTime const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_operator__3(QTime const * this_ptr, QTime const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_fromMSecsSinceStartOfDay(int msecs) {
  return new QTime(QTime::fromMSecsSinceStartOfDay(msecs));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_msecsSinceStartOfDay(QTime const * this_ptr) {
  return this_ptr->msecsSinceStartOfDay();
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_currentTime() {
  return new QTime(QTime::currentTime());
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_fromString(QString const * s, Qt::DateFormat f) {
  return new QTime(QTime::fromString(*s, f));
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_fromString1(QString const * s, QString const * format) {
  return new QTime(QTime::fromString(*s, *format));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_isValid1(int h, int m, int s, int ms) {
  return QTime::isValid(h, m, s, ms);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTime_start(QTime * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_restart(QTime * this_ptr) {
  return this_ptr->restart();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTime_elapsed(QTime const * this_ptr) {
  return this_ptr->elapsed();
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime() {
  return new QDateTime();
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime1(QDate const * arg1) {
  return new QDateTime(*arg1);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime2(QDate const * arg1, QTime const * arg2, Qt::TimeSpec spec) {
  return new QDateTime(*arg1, *arg2, spec);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime3(QDate const * date, QTime const * time, Qt::TimeSpec spec, int offsetSeconds) {
  return new QDateTime(*date, *time, spec, offsetSeconds);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime4(QDate const * date, QTime const * time, QTimeZone const * timeZone) {
  return new QDateTime(*date, *time, *timeZone);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime5(QDateTime const * other) {
  return new QDateTime(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_dQDateTime(QDateTime * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_operator_1(QDateTime * this_ptr, QDateTime const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_swap(QDateTime * this_ptr, QDateTime * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_isNull(QDateTime const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_isValid(QDateTime const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDateTime_date(QDateTime const * this_ptr) {
  return new QDate(this_ptr->date());
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QDateTime_time(QDateTime const * this_ptr) {
  return new QTime(this_ptr->time());
}


RITUAL_EXPORT Qt::TimeSpec ctr_qt_core_ffi_QDateTime_timeSpec(QDateTime const * this_ptr) {
  return this_ptr->timeSpec();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDateTime_offsetFromUtc(QDateTime const * this_ptr) {
  return this_ptr->offsetFromUtc();
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QDateTime_timeZone(QDateTime const * this_ptr) {
  return new QTimeZone(this_ptr->timeZone());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDateTime_timeZoneAbbreviation(QDateTime const * this_ptr) {
  return new QString(this_ptr->timeZoneAbbreviation());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_isDaylightTime(QDateTime const * this_ptr) {
  return this_ptr->isDaylightTime();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_toMSecsSinceEpoch(QDateTime const * this_ptr) {
  return this_ptr->toMSecsSinceEpoch();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_toSecsSinceEpoch(QDateTime const * this_ptr) {
  return this_ptr->toSecsSinceEpoch();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setDate(QDateTime * this_ptr, QDate const * date) {
  this_ptr->setDate(*date);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setTime(QDateTime * this_ptr, QTime const * time) {
  this_ptr->setTime(*time);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setTimeSpec(QDateTime * this_ptr, Qt::TimeSpec spec) {
  this_ptr->setTimeSpec(spec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setOffsetFromUtc(QDateTime * this_ptr, int offsetSeconds) {
  this_ptr->setOffsetFromUtc(offsetSeconds);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setTimeZone(QDateTime * this_ptr, QTimeZone const * toZone) {
  this_ptr->setTimeZone(*toZone);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setMSecsSinceEpoch(QDateTime * this_ptr, qint64 msecs) {
  this_ptr->setMSecsSinceEpoch(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setSecsSinceEpoch(QDateTime * this_ptr, qint64 secs) {
  this_ptr->setSecsSinceEpoch(secs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDateTime_toString(QDateTime const * this_ptr, Qt::DateFormat f) {
  return new QString(this_ptr->toString(f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDateTime_toString1(QDateTime const * this_ptr, QString const * format) {
  return new QString(this_ptr->toString(*format));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_addDays(QDateTime const * this_ptr, qint64 days) {
  return new QDateTime(this_ptr->addDays(days));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_addMonths(QDateTime const * this_ptr, int months) {
  return new QDateTime(this_ptr->addMonths(months));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_addYears(QDateTime const * this_ptr, int years) {
  return new QDateTime(this_ptr->addYears(years));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_addSecs(QDateTime const * this_ptr, qint64 secs) {
  return new QDateTime(this_ptr->addSecs(secs));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_addMSecs(QDateTime const * this_ptr, qint64 msecs) {
  return new QDateTime(this_ptr->addMSecs(msecs));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_toTimeSpec(QDateTime const * this_ptr, Qt::TimeSpec spec) {
  return new QDateTime(this_ptr->toTimeSpec(spec));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_toLocalTime(QDateTime const * this_ptr) {
  return new QDateTime(this_ptr->toLocalTime());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_toUTC(QDateTime const * this_ptr) {
  return new QDateTime(this_ptr->toUTC());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_toOffsetFromUtc(QDateTime const * this_ptr, int offsetSeconds) {
  return new QDateTime(this_ptr->toOffsetFromUtc(offsetSeconds));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_toTimeZone(QDateTime const * this_ptr, QTimeZone const * toZone) {
  return new QDateTime(this_ptr->toTimeZone(*toZone));
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_daysTo(QDateTime const * this_ptr, QDateTime const * arg1) {
  return this_ptr->daysTo(*arg1);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_secsTo(QDateTime const * this_ptr, QDateTime const * arg1) {
  return this_ptr->secsTo(*arg1);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_msecsTo(QDateTime const * this_ptr, QDateTime const * arg1) {
  return this_ptr->msecsTo(*arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_operator__(QDateTime const * this_ptr, QDateTime const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_operator_2(QDateTime const * this_ptr, QDateTime const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_operator__2(QDateTime const * this_ptr, QDateTime const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_operator_3(QDateTime const * this_ptr, QDateTime const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDateTime_operator__3(QDateTime const * this_ptr, QDateTime const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setUtcOffset(QDateTime * this_ptr, int seconds) {
  this_ptr->setUtcOffset(seconds);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDateTime_utcOffset(QDateTime const * this_ptr) {
  return this_ptr->utcOffset();
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_currentDateTime() {
  return new QDateTime(QDateTime::currentDateTime());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_currentDateTimeUtc() {
  return new QDateTime(QDateTime::currentDateTimeUtc());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromString(QString const * s, Qt::DateFormat f) {
  return new QDateTime(QDateTime::fromString(*s, f));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromString1(QString const * s, QString const * format) {
  return new QDateTime(QDateTime::fromString(*s, *format));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QDateTime_toTime_t(QDateTime const * this_ptr) {
  return this_ptr->toTime_t();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDateTime_setTime_t(QDateTime * this_ptr, unsigned int secsSince1Jan1970UTC) {
  this_ptr->setTime_t(secsSince1Jan1970UTC);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromTime_t(unsigned int secsSince1Jan1970UTC) {
  return new QDateTime(QDateTime::fromTime_t(secsSince1Jan1970UTC));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromTime_t1(unsigned int secsSince1Jan1970UTC, Qt::TimeSpec spec, int offsetFromUtc) {
  return new QDateTime(QDateTime::fromTime_t(secsSince1Jan1970UTC, spec, offsetFromUtc));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromTime_t2(unsigned int secsSince1Jan1970UTC, QTimeZone const * timeZone) {
  return new QDateTime(QDateTime::fromTime_t(secsSince1Jan1970UTC, *timeZone));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromMSecsSinceEpoch(qint64 msecs) {
  return new QDateTime(QDateTime::fromMSecsSinceEpoch(msecs));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromMSecsSinceEpoch1(qint64 msecs, Qt::TimeSpec spec, int offsetFromUtc) {
  return new QDateTime(QDateTime::fromMSecsSinceEpoch(msecs, spec, offsetFromUtc));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromSecsSinceEpoch(qint64 secs, Qt::TimeSpec spe, int offsetFromUtc) {
  return new QDateTime(QDateTime::fromSecsSinceEpoch(secs, spe, offsetFromUtc));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromMSecsSinceEpoch2(qint64 msecs, QTimeZone const * timeZone) {
  return new QDateTime(QDateTime::fromMSecsSinceEpoch(msecs, *timeZone));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromSecsSinceEpoch1(qint64 secs, QTimeZone const * timeZone) {
  return new QDateTime(QDateTime::fromSecsSinceEpoch(secs, *timeZone));
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_currentMSecsSinceEpoch() {
  return QDateTime::currentMSecsSinceEpoch();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDateTime_currentSecsSinceEpoch() {
  return QDateTime::currentSecsSinceEpoch();
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__108(QDataStream * arg1, QDate const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__109(QDataStream * arg1, QDate * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__110(QDataStream * arg1, QTime const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__111(QDataStream * arg1, QTime * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__112(QDataStream * arg1, QDateTime const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__113(QDataStream * arg1, QDateTime * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__114(QDebug const * arg1, QDate const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__115(QDebug const * arg1, QTime const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__116(QDebug const * arg1, QDateTime const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash24(QDateTime const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash25(QDate const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash26(QTime const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QElapsedTimer * ctr_qt_core_ffi_QElapsedTimer_QElapsedTimer() {
  return new QElapsedTimer();
}


RITUAL_EXPORT QElapsedTimer::ClockType ctr_qt_core_ffi_QElapsedTimer_clockType() {
  return QElapsedTimer::clockType();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QElapsedTimer_isMonotonic() {
  return QElapsedTimer::isMonotonic();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QElapsedTimer_start(QElapsedTimer * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_restart(QElapsedTimer * this_ptr) {
  return this_ptr->restart();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QElapsedTimer_invalidate(QElapsedTimer * this_ptr) {
  this_ptr->invalidate();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QElapsedTimer_isValid(QElapsedTimer const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_nsecsElapsed(QElapsedTimer const * this_ptr) {
  return this_ptr->nsecsElapsed();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_elapsed(QElapsedTimer const * this_ptr) {
  return this_ptr->elapsed();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QElapsedTimer_hasExpired(QElapsedTimer const * this_ptr, qint64 timeout) {
  return this_ptr->hasExpired(timeout);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_msecsSinceReference(QElapsedTimer const * this_ptr) {
  return this_ptr->msecsSinceReference();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_msecsTo(QElapsedTimer const * this_ptr, QElapsedTimer const * other) {
  return this_ptr->msecsTo(*other);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QElapsedTimer_secsTo(QElapsedTimer const * this_ptr, QElapsedTimer const * other) {
  return this_ptr->secsTo(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QElapsedTimer_operator__(QElapsedTimer const * this_ptr, QElapsedTimer const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer(Qt::TimerType type_) {
  return new QDeadlineTimer(type_);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer1(QDeadlineTimer::ForeverConstant arg1, Qt::TimerType type_) {
  return new QDeadlineTimer(arg1, type_);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer2(qint64 msecs, Qt::TimerType type) {
  return new QDeadlineTimer(msecs, type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_swap(QDeadlineTimer * this_ptr, QDeadlineTimer * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDeadlineTimer_isForever(QDeadlineTimer const * this_ptr) {
  return this_ptr->isForever();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDeadlineTimer_hasExpired(QDeadlineTimer const * this_ptr) {
  return this_ptr->hasExpired();
}


RITUAL_EXPORT Qt::TimerType ctr_qt_core_ffi_QDeadlineTimer_timerType(QDeadlineTimer const * this_ptr) {
  return this_ptr->timerType();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setTimerType(QDeadlineTimer * this_ptr, Qt::TimerType type) {
  this_ptr->setTimerType(type);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDeadlineTimer_remainingTime(QDeadlineTimer const * this_ptr) {
  return this_ptr->remainingTime();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDeadlineTimer_remainingTimeNSecs(QDeadlineTimer const * this_ptr) {
  return this_ptr->remainingTimeNSecs();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setRemainingTime(QDeadlineTimer * this_ptr, qint64 msecs, Qt::TimerType type) {
  this_ptr->setRemainingTime(msecs, type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseRemainingTime(QDeadlineTimer * this_ptr, qint64 secs, qint64 nsecs, Qt::TimerType type) {
  this_ptr->setPreciseRemainingTime(secs, nsecs, type);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDeadlineTimer_deadline(QDeadlineTimer const * this_ptr) {
  return this_ptr->deadline();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QDeadlineTimer_deadlineNSecs(QDeadlineTimer const * this_ptr) {
  return this_ptr->deadlineNSecs();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setDeadline(QDeadlineTimer * this_ptr, qint64 msecs, Qt::TimerType timerType) {
  this_ptr->setDeadline(msecs, timerType);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseDeadline(QDeadlineTimer * this_ptr, qint64 secs, qint64 nsecs, Qt::TimerType type) {
  this_ptr->setPreciseDeadline(secs, nsecs, type);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_addNSecs(QDeadlineTimer const * dt, qint64 nsecs) {
  return new QDeadlineTimer(QDeadlineTimer::addNSecs(*dt, nsecs));
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_current(Qt::TimerType timerType) {
  return new QDeadlineTimer(QDeadlineTimer::current(timerType));
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_operator__(QDeadlineTimer * this_ptr, qint64 msecs) {
  return &this_ptr->operator+=(msecs);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_operator__1(QDeadlineTimer * this_ptr, qint64 msecs) {
  return &this_ptr->operator-=(msecs);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream() {
  return new QTextStream();
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream1(QIODevice * device) {
  return new QTextStream(device);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream2(QString * string, int openMode) {
  return new QTextStream(string, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream3(QByteArray * array, int openMode) {
  return new QTextStream(array, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream4(QByteArray const * array, int openMode) {
  return new QTextStream(*array, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_dQTextStream(QTextStream * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setCodec(QTextStream * this_ptr, QTextCodec * codec) {
  this_ptr->setCodec(codec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setCodec1(QTextStream * this_ptr, char const * codecName) {
  this_ptr->setCodec(codecName);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextStream_codec(QTextStream const * this_ptr) {
  return this_ptr->codec();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setAutoDetectUnicode(QTextStream * this_ptr, bool enabled) {
  this_ptr->setAutoDetectUnicode(enabled);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_autoDetectUnicode(QTextStream const * this_ptr) {
  return this_ptr->autoDetectUnicode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setGenerateByteOrderMark(QTextStream * this_ptr, bool generate) {
  this_ptr->setGenerateByteOrderMark(generate);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_generateByteOrderMark(QTextStream const * this_ptr) {
  return this_ptr->generateByteOrderMark();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setLocale(QTextStream * this_ptr, QLocale const * locale) {
  this_ptr->setLocale(*locale);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QTextStream_locale(QTextStream const * this_ptr) {
  return new QLocale(this_ptr->locale());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setDevice(QTextStream * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QTextStream_device(QTextStream const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setString(QTextStream * this_ptr, QString * string, int openMode) {
  this_ptr->setString(string, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextStream_string(QTextStream const * this_ptr) {
  return this_ptr->string();
}


RITUAL_EXPORT QTextStream::Status ctr_qt_core_ffi_QTextStream_status(QTextStream const * this_ptr) {
  return this_ptr->status();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setStatus(QTextStream * this_ptr, QTextStream::Status status) {
  this_ptr->setStatus(status);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_resetStatus(QTextStream * this_ptr) {
  this_ptr->resetStatus();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_atEnd(QTextStream const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_reset(QTextStream * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_flush(QTextStream * this_ptr) {
  this_ptr->flush();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_seek(QTextStream * this_ptr, qint64 pos) {
  return this_ptr->seek(pos);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QTextStream_pos(QTextStream const * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_skipWhiteSpace(QTextStream * this_ptr) {
  this_ptr->skipWhiteSpace();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextStream_readLine(QTextStream * this_ptr, qint64 maxlen) {
  return new QString(this_ptr->readLine(maxlen));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_readLineInto(QTextStream * this_ptr, QString * line, qint64 maxlen) {
  return this_ptr->readLineInto(line, maxlen);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextStream_readAll(QTextStream * this_ptr) {
  return new QString(this_ptr->readAll());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextStream_read(QTextStream * this_ptr, qint64 maxlen) {
  return new QString(this_ptr->read(maxlen));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setFieldAlignment(QTextStream * this_ptr, QTextStream::FieldAlignment alignment) {
  this_ptr->setFieldAlignment(alignment);
}


RITUAL_EXPORT QTextStream::FieldAlignment ctr_qt_core_ffi_QTextStream_fieldAlignment(QTextStream const * this_ptr) {
  return this_ptr->fieldAlignment();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setPadChar(QTextStream * this_ptr, QChar const * ch) {
  this_ptr->setPadChar(*ch);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QTextStream_padChar(QTextStream const * this_ptr) {
  return new QChar(this_ptr->padChar());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setFieldWidth(QTextStream * this_ptr, int width) {
  this_ptr->setFieldWidth(width);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextStream_fieldWidth(QTextStream const * this_ptr) {
  return this_ptr->fieldWidth();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setNumberFlags(QTextStream * this_ptr, int flags) {
  this_ptr->setNumberFlags(QFlags< QTextStream::NumberFlag >(flags));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextStream_numberFlags(QTextStream const * this_ptr) {
  return int(this_ptr->numberFlags());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setIntegerBase(QTextStream * this_ptr, int base) {
  this_ptr->setIntegerBase(base);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextStream_integerBase(QTextStream const * this_ptr) {
  return this_ptr->integerBase();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setRealNumberNotation(QTextStream * this_ptr, QTextStream::RealNumberNotation notation) {
  this_ptr->setRealNumberNotation(notation);
}


RITUAL_EXPORT QTextStream::RealNumberNotation ctr_qt_core_ffi_QTextStream_realNumberNotation(QTextStream const * this_ptr) {
  return this_ptr->realNumberNotation();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setRealNumberPrecision(QTextStream * this_ptr, int precision) {
  this_ptr->setRealNumberPrecision(precision);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextStream_realNumberPrecision(QTextStream const * this_ptr) {
  return this_ptr->realNumberPrecision();
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__(QTextStream * this_ptr, QChar * ch) {
  return &this_ptr->operator>>(*ch);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__1(QTextStream * this_ptr, char * ch) {
  return &this_ptr->operator>>(*ch);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__2(QTextStream * this_ptr, short * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__3(QTextStream * this_ptr, unsigned short * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__4(QTextStream * this_ptr, int * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__5(QTextStream * this_ptr, unsigned int * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__6(QTextStream * this_ptr, long * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__7(QTextStream * this_ptr, unsigned long * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__8(QTextStream * this_ptr, qlonglong * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__9(QTextStream * this_ptr, qulonglong * i) {
  return &this_ptr->operator>>(*i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__10(QTextStream * this_ptr, float * f) {
  return &this_ptr->operator>>(*f);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__11(QTextStream * this_ptr, double * f) {
  return &this_ptr->operator>>(*f);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__12(QTextStream * this_ptr, QString * s) {
  return &this_ptr->operator>>(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__13(QTextStream * this_ptr, QByteArray * array) {
  return &this_ptr->operator>>(*array);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__14(QTextStream * this_ptr, char * c) {
  return &this_ptr->operator>>(c);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__15(QTextStream * this_ptr, QChar const * ch) {
  return &this_ptr->operator<<(*ch);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__16(QTextStream * this_ptr, char ch) {
  return &this_ptr->operator<<(ch);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__17(QTextStream * this_ptr, short i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__18(QTextStream * this_ptr, unsigned short i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__19(QTextStream * this_ptr, int i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__20(QTextStream * this_ptr, unsigned int i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__21(QTextStream * this_ptr, long i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__22(QTextStream * this_ptr, unsigned long i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__23(QTextStream * this_ptr, qlonglong i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__24(QTextStream * this_ptr, qulonglong i) {
  return &this_ptr->operator<<(i);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__25(QTextStream * this_ptr, float f) {
  return &this_ptr->operator<<(f);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__26(QTextStream * this_ptr, double f) {
  return &this_ptr->operator<<(f);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__27(QTextStream * this_ptr, QString const * s) {
  return &this_ptr->operator<<(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__28(QTextStream * this_ptr, QLatin1String const * s) {
  return &this_ptr->operator<<(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__29(QTextStream * this_ptr, QStringRef const * s) {
  return &this_ptr->operator<<(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__30(QTextStream * this_ptr, QByteArray const * array) {
  return &this_ptr->operator<<(*array);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__31(QTextStream * this_ptr, char const * c) {
  return &this_ptr->operator<<(c);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__32(QTextStream * this_ptr, void const * ptr) {
  return &this_ptr->operator<<(ptr);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStreamManipulator_exec(QTextStreamManipulator * this_ptr, QTextStream * s) {
  this_ptr->exec(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_operator__119(QTextStream * s, QTextStreamManipulator const * m) {
  return &operator<<(*s, *m);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_bin(QTextStream * s) {
  return &bin(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_oct(QTextStream * s) {
  return &oct(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_dec(QTextStream * s) {
  return &dec(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_hex(QTextStream * s) {
  return &hex(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_showbase(QTextStream * s) {
  return &showbase(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_forcesign(QTextStream * s) {
  return &forcesign(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_forcepoint(QTextStream * s) {
  return &forcepoint(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_noshowbase(QTextStream * s) {
  return &noshowbase(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_noforcesign(QTextStream * s) {
  return &noforcesign(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_noforcepoint(QTextStream * s) {
  return &noforcepoint(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_uppercasebase(QTextStream * s) {
  return &uppercasebase(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_uppercasedigits(QTextStream * s) {
  return &uppercasedigits(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_lowercasebase(QTextStream * s) {
  return &lowercasebase(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_lowercasedigits(QTextStream * s) {
  return &lowercasedigits(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_fixed(QTextStream * s) {
  return &fixed(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_scientific(QTextStream * s) {
  return &scientific(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_left(QTextStream * s) {
  return &left(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_right(QTextStream * s) {
  return &right(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_center(QTextStream * s) {
  return &center(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_endl(QTextStream * s) {
  return &endl(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_flush(QTextStream * s) {
  return &flush(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_reset(QTextStream * s) {
  return &reset(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_bom(QTextStream * s) {
  return &bom(*s);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_ws(QTextStream * s) {
  return &ws(*s);
}


RITUAL_EXPORT QTextStreamManipulator * ctr_qt_core_ffi_qSetFieldWidth(int width) {
  return new QTextStreamManipulator(qSetFieldWidth(width));
}


RITUAL_EXPORT QTextStreamManipulator * ctr_qt_core_ffi_qSetPadChar(QChar const * ch) {
  return new QTextStreamManipulator(qSetPadChar(*ch));
}


RITUAL_EXPORT QTextStreamManipulator * ctr_qt_core_ffi_qSetRealNumberPrecision(int precision) {
  return new QTextStreamManipulator(qSetRealNumberPrecision(precision));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_QDebug(QIODevice * device) {
  return new QDebug(device);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_QDebug1(QString * string) {
  return new QDebug(string);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_QDebug2(QtMsgType t) {
  return new QDebug(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_QDebug3(QDebug const * o) {
  return new QDebug(*o);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator_(QDebug * this_ptr, QDebug const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDebug_dQDebug(QDebug * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDebug_swap(QDebug * this_ptr, QDebug * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_resetFormat(QDebug * this_ptr) {
  return &this_ptr->resetFormat();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_space(QDebug * this_ptr) {
  return &this_ptr->space();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_nospace(QDebug * this_ptr) {
  return &this_ptr->nospace();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_maybeSpace(QDebug * this_ptr) {
  return &this_ptr->maybeSpace();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDebug_verbosity(QDebug const * this_ptr) {
  return this_ptr->verbosity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDebug_setVerbosity(QDebug * this_ptr, int verbosityLevel) {
  this_ptr->setVerbosity(verbosityLevel);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDebug_autoInsertSpaces(QDebug const * this_ptr) {
  return this_ptr->autoInsertSpaces();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDebug_setAutoInsertSpaces(QDebug * this_ptr, bool b) {
  this_ptr->setAutoInsertSpaces(b);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_quote(QDebug * this_ptr) {
  return &this_ptr->quote();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_noquote(QDebug * this_ptr) {
  return &this_ptr->noquote();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_maybeQuote(QDebug * this_ptr, char c) {
  return &this_ptr->maybeQuote(c);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__(QDebug * this_ptr, QChar const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__1(QDebug * this_ptr, bool t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__2(QDebug * this_ptr, char t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__3(QDebug * this_ptr, short t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__4(QDebug * this_ptr, unsigned short t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__5(QDebug * this_ptr, char16_t t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__6(QDebug * this_ptr, char32_t t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__7(QDebug * this_ptr, int t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__8(QDebug * this_ptr, unsigned int t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__9(QDebug * this_ptr, long t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__10(QDebug * this_ptr, unsigned long t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__11(QDebug * this_ptr, qint64 t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__12(QDebug * this_ptr, quint64 t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__13(QDebug * this_ptr, float t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__14(QDebug * this_ptr, double t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__15(QDebug * this_ptr, char const * t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__16(QDebug * this_ptr, QString const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__17(QDebug * this_ptr, QStringRef const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__18(QDebug * this_ptr, QLatin1String const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__19(QDebug * this_ptr, QByteArray const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__20(QDebug * this_ptr, void const * t) {
  return &this_ptr->operator<<(t);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__22(QDebug * this_ptr, QTextStreamManipulator const * m) {
  return &this_ptr->operator<<(*m);
}


RITUAL_EXPORT QDebugStateSaver * ctr_qt_core_ffi_QDebugStateSaver_QDebugStateSaver(QDebug * dbg) {
  return new QDebugStateSaver(*dbg);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDebugStateSaver_dQDebugStateSaver(QDebugStateSaver * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_qt_QMetaEnum_flagDebugOperator(QDebug * debug, unsigned long sizeofT, int value) {
  qt_QMetaEnum_flagDebugOperator(*debug, sizeofT, value);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_qt_QMetaEnum_debugOperator(QDebug * arg1, int value, QMetaObject const * meta, char const * name) {
  return new QDebug(qt_QMetaEnum_debugOperator(*arg1, value, meta, name));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_qt_QMetaEnum_flagDebugOperator1(QDebug * dbg, quint64 value, QMetaObject const * meta, char const * name) {
  return new QDebug(qt_QMetaEnum_flagDebugOperator(*dbg, value, meta, name));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileDevice_metaObject(QFileDevice const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFileDevice_qt_metacast(QFileDevice * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileDevice_qt_metacall(QFileDevice * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileDevice_tr(char const * s, char const * c, int n) {
  return new QString(QFileDevice::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileDevice_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFileDevice::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileDevice_dQFileDevice(QFileDevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFileDevice::FileError ctr_qt_core_ffi_QFileDevice_error(QFileDevice const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileDevice_unsetError(QFileDevice * this_ptr) {
  this_ptr->unsetError();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileDevice_close(QFileDevice * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_isSequential(QFileDevice const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileDevice_handle(QFileDevice const * this_ptr) {
  return this_ptr->handle();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileDevice_fileName(QFileDevice const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QFileDevice_pos(QFileDevice const * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_seek(QFileDevice * this_ptr, qint64 offset) {
  return this_ptr->seek(offset);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_atEnd(QFileDevice const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_flush(QFileDevice * this_ptr) {
  return this_ptr->flush();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QFileDevice_size(QFileDevice const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_resize(QFileDevice * this_ptr, qint64 sz) {
  return this_ptr->resize(sz);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileDevice_permissions(QFileDevice const * this_ptr) {
  return int(this_ptr->permissions());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_setPermissions(QFileDevice * this_ptr, int permissionSpec) {
  return this_ptr->setPermissions(QFlags< QFileDevice::Permission >(permissionSpec));
}


RITUAL_EXPORT unsigned char * ctr_qt_core_ffi_QFileDevice_map(QFileDevice * this_ptr, qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags) {
  return this_ptr->map(offset, size, flags);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_unmap(QFileDevice * this_ptr, unsigned char * address) {
  return this_ptr->unmap(address);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFile_metaObject(QFile const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFile_qt_metacast(QFile * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFile_qt_metacall(QFile * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_tr(char const * s, char const * c, int n) {
  return new QString(QFile::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFile::trUtf8(s, c, n));
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_QFile_QFile() {
  return new QFile();
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_QFile_QFile1(QString const * name) {
  return new QFile(*name);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_QFile_QFile2(QObject * parent) {
  return new QFile(parent);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_QFile_QFile3(QString const * name, QObject * parent) {
  return new QFile(*name, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFile_dQFile(QFile * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_fileName(QFile const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFile_setFileName(QFile * this_ptr, QString const * name) {
  this_ptr->setFileName(*name);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QFile_encodeName(QString const * fileName) {
  return new QByteArray(QFile::encodeName(*fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_decodeName(QByteArray const * localFileName) {
  return new QString(QFile::decodeName(*localFileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_decodeName1(char const * localFileName) {
  return new QString(QFile::decodeName(localFileName));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_exists(QFile const * this_ptr) {
  return this_ptr->exists();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_exists1(QString const * fileName) {
  return QFile::exists(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_readLink(QFile const * this_ptr) {
  return new QString(this_ptr->readLink());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_readLink1(QString const * fileName) {
  return new QString(QFile::readLink(*fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_symLinkTarget(QFile const * this_ptr) {
  return new QString(this_ptr->symLinkTarget());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFile_symLinkTarget1(QString const * fileName) {
  return new QString(QFile::symLinkTarget(*fileName));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_remove(QFile * this_ptr) {
  return this_ptr->remove();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_remove1(QString const * fileName) {
  return QFile::remove(*fileName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_rename(QFile * this_ptr, QString const * newName) {
  return this_ptr->rename(*newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_rename1(QString const * oldName, QString const * newName) {
  return QFile::rename(*oldName, *newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_link(QFile * this_ptr, QString const * newName) {
  return this_ptr->link(*newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_link1(QString const * oldname, QString const * newName) {
  return QFile::link(*oldname, *newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_copy(QFile * this_ptr, QString const * newName) {
  return this_ptr->copy(*newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_copy1(QString const * fileName, QString const * newName) {
  return QFile::copy(*fileName, *newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_open(QFile * this_ptr, int flags) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_open1(QFile * this_ptr, int fd, int ioFlags, int handleFlags) {
  return this_ptr->open(fd, QFlags< QIODevice::OpenModeFlag >(ioFlags), QFlags< QFileDevice::FileHandleFlag >(handleFlags));
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QFile_size(QFile const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_resize(QFile * this_ptr, qint64 sz) {
  return this_ptr->resize(sz);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_resize1(QString const * filename, qint64 sz) {
  return QFile::resize(*filename, sz);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFile_permissions(QFile const * this_ptr) {
  return int(this_ptr->permissions());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFile_permissions1(QString const * filename) {
  return int(QFile::permissions(*filename));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_setPermissions(QFile * this_ptr, int permissionSpec) {
  return this_ptr->setPermissions(QFlags< QFileDevice::Permission >(permissionSpec));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_setPermissions1(QString const * filename, int permissionSpec) {
  return QFile::setPermissions(*filename, QFlags< QFileDevice::Permission >(permissionSpec));
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_QFileInfo1() {
  return new QFileInfo();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_QFileInfo2(QString const * file) {
  return new QFileInfo(*file);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_QFileInfo3(QFile const * file) {
  return new QFileInfo(*file);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_QFileInfo4(QDir const * dir, QString const * file) {
  return new QFileInfo(*dir, *file);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_QFileInfo5(QFileInfo const * fileinfo) {
  return new QFileInfo(*fileinfo);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_dQFileInfo(QFileInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QFileInfo_operator_(QFileInfo * this_ptr, QFileInfo const * fileinfo) {
  return &this_ptr->operator=(*fileinfo);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_swap(QFileInfo * this_ptr, QFileInfo * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_operator__(QFileInfo const * this_ptr, QFileInfo const * fileinfo) {
  return this_ptr->operator==(*fileinfo);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_setFile(QFileInfo * this_ptr, QString const * file) {
  this_ptr->setFile(*file);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_setFile1(QFileInfo * this_ptr, QFile const * file) {
  this_ptr->setFile(*file);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_setFile2(QFileInfo * this_ptr, QDir const * dir, QString const * file) {
  this_ptr->setFile(*dir, *file);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_exists(QFileInfo const * this_ptr) {
  return this_ptr->exists();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_exists1(QString const * file) {
  return QFileInfo::exists(*file);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_refresh(QFileInfo * this_ptr) {
  this_ptr->refresh();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_filePath(QFileInfo const * this_ptr) {
  return new QString(this_ptr->filePath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_absoluteFilePath(QFileInfo const * this_ptr) {
  return new QString(this_ptr->absoluteFilePath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_canonicalFilePath(QFileInfo const * this_ptr) {
  return new QString(this_ptr->canonicalFilePath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_fileName(QFileInfo const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_baseName(QFileInfo const * this_ptr) {
  return new QString(this_ptr->baseName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_completeBaseName(QFileInfo const * this_ptr) {
  return new QString(this_ptr->completeBaseName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_suffix(QFileInfo const * this_ptr) {
  return new QString(this_ptr->suffix());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_bundleName(QFileInfo const * this_ptr) {
  return new QString(this_ptr->bundleName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_completeSuffix(QFileInfo const * this_ptr) {
  return new QString(this_ptr->completeSuffix());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_path(QFileInfo const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_absolutePath(QFileInfo const * this_ptr) {
  return new QString(this_ptr->absolutePath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_canonicalPath(QFileInfo const * this_ptr) {
  return new QString(this_ptr->canonicalPath());
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QFileInfo_dir(QFileInfo const * this_ptr) {
  return new QDir(this_ptr->dir());
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QFileInfo_absoluteDir(QFileInfo const * this_ptr) {
  return new QDir(this_ptr->absoluteDir());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isReadable(QFileInfo const * this_ptr) {
  return this_ptr->isReadable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isWritable(QFileInfo const * this_ptr) {
  return this_ptr->isWritable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isExecutable(QFileInfo const * this_ptr) {
  return this_ptr->isExecutable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isHidden(QFileInfo const * this_ptr) {
  return this_ptr->isHidden();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isNativePath(QFileInfo const * this_ptr) {
  return this_ptr->isNativePath();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isRelative(QFileInfo const * this_ptr) {
  return this_ptr->isRelative();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isAbsolute(QFileInfo const * this_ptr) {
  return this_ptr->isAbsolute();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_makeAbsolute(QFileInfo * this_ptr) {
  return this_ptr->makeAbsolute();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isFile(QFileInfo const * this_ptr) {
  return this_ptr->isFile();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isDir(QFileInfo const * this_ptr) {
  return this_ptr->isDir();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isSymLink(QFileInfo const * this_ptr) {
  return this_ptr->isSymLink();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isRoot(QFileInfo const * this_ptr) {
  return this_ptr->isRoot();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isBundle(QFileInfo const * this_ptr) {
  return this_ptr->isBundle();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_readLink(QFileInfo const * this_ptr) {
  return new QString(this_ptr->readLink());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_symLinkTarget(QFileInfo const * this_ptr) {
  return new QString(this_ptr->symLinkTarget());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_owner(QFileInfo const * this_ptr) {
  return new QString(this_ptr->owner());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QFileInfo_ownerId(QFileInfo const * this_ptr) {
  return this_ptr->ownerId();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileInfo_group(QFileInfo const * this_ptr) {
  return new QString(this_ptr->group());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QFileInfo_groupId(QFileInfo const * this_ptr) {
  return this_ptr->groupId();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_permission(QFileInfo const * this_ptr, int permissions) {
  return this_ptr->permission(QFlags< QFileDevice::Permission >(permissions));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileInfo_permissions(QFileInfo const * this_ptr) {
  return int(this_ptr->permissions());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QFileInfo_size(QFileInfo const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_created(QFileInfo const * this_ptr) {
  return new QDateTime(this_ptr->created());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_lastModified(QFileInfo const * this_ptr) {
  return new QDateTime(this_ptr->lastModified());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_lastRead(QFileInfo const * this_ptr) {
  return new QDateTime(this_ptr->lastRead());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_caching(QFileInfo const * this_ptr) {
  return this_ptr->caching();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileInfo_setCaching(QFileInfo * this_ptr, bool on) {
  this_ptr->setCaching(on);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir(QDir const * arg1) {
  return new QDir(*arg1);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir1(QString const * path) {
  return new QDir(*path);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir2(QString const * path, QString const * nameFilter, int sort, int filter) {
  return new QDir(*path, *nameFilter, QFlags< QDir::SortFlag >(sort), QFlags< QDir::Filter >(filter));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_dQDir(QDir * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_operator_(QDir * this_ptr, QDir const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_operator_1(QDir * this_ptr, QString const * path) {
  return &this_ptr->operator=(*path);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_swap(QDir * this_ptr, QDir * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_setPath(QDir * this_ptr, QString const * path) {
  this_ptr->setPath(*path);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_path(QDir const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_absolutePath(QDir const * this_ptr) {
  return new QString(this_ptr->absolutePath());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_canonicalPath(QDir const * this_ptr) {
  return new QString(this_ptr->canonicalPath());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_addResourceSearchPath(QString const * path) {
  QDir::addResourceSearchPath(*path);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_setSearchPaths(QString const * prefix, QStringList const * searchPaths) {
  QDir::setSearchPaths(*prefix, *searchPaths);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_addSearchPath(QString const * prefix, QString const * path) {
  QDir::addSearchPath(*prefix, *path);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_searchPaths(QString const * prefix) {
  return new QStringList(QDir::searchPaths(*prefix));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_dirName(QDir const * this_ptr) {
  return new QString(this_ptr->dirName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_filePath(QDir const * this_ptr, QString const * fileName) {
  return new QString(this_ptr->filePath(*fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_absoluteFilePath(QDir const * this_ptr, QString const * fileName) {
  return new QString(this_ptr->absoluteFilePath(*fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_relativeFilePath(QDir const * this_ptr, QString const * fileName) {
  return new QString(this_ptr->relativeFilePath(*fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_toNativeSeparators(QString const * pathName) {
  return new QString(QDir::toNativeSeparators(*pathName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_fromNativeSeparators(QString const * pathName) {
  return new QString(QDir::fromNativeSeparators(*pathName));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_cd(QDir * this_ptr, QString const * dirName) {
  return this_ptr->cd(*dirName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_cdUp(QDir * this_ptr) {
  return this_ptr->cdUp();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_nameFilters(QDir const * this_ptr) {
  return new QStringList(this_ptr->nameFilters());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_setNameFilters(QDir * this_ptr, QStringList const * nameFilters) {
  this_ptr->setNameFilters(*nameFilters);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDir_filter(QDir const * this_ptr) {
  return int(this_ptr->filter());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_setFilter(QDir * this_ptr, int filter) {
  this_ptr->setFilter(QFlags< QDir::Filter >(filter));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDir_sorting(QDir const * this_ptr) {
  return int(this_ptr->sorting());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_setSorting(QDir * this_ptr, int sort) {
  this_ptr->setSorting(QFlags< QDir::SortFlag >(sort));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QDir_count(QDir const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isEmpty(QDir const * this_ptr, int filters) {
  return this_ptr->isEmpty(QFlags< QDir::Filter >(filters));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_operator__(QDir const * this_ptr, int arg1) {
  return new QString(this_ptr->operator[](arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_nameFiltersFromString(QString const * nameFilter) {
  return new QStringList(QDir::nameFiltersFromString(*nameFilter));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList(QDir const * this_ptr, int filters, int sort) {
  return new QStringList(this_ptr->entryList(QFlags< QDir::Filter >(filters), QFlags< QDir::SortFlag >(sort)));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList1(QDir const * this_ptr, QStringList const * nameFilters, int filters, int sort) {
  return new QStringList(this_ptr->entryList(*nameFilters, QFlags< QDir::Filter >(filters), QFlags< QDir::SortFlag >(sort)));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList(QDir const * this_ptr, int filters, int sort) {
  return new QList< QFileInfo >(this_ptr->entryInfoList(QFlags< QDir::Filter >(filters), QFlags< QDir::SortFlag >(sort)));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList1(QDir const * this_ptr, QStringList const * nameFilters, int filters, int sort) {
  return new QList< QFileInfo >(this_ptr->entryInfoList(*nameFilters, QFlags< QDir::Filter >(filters), QFlags< QDir::SortFlag >(sort)));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_mkdir(QDir const * this_ptr, QString const * dirName) {
  return this_ptr->mkdir(*dirName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_rmdir(QDir const * this_ptr, QString const * dirName) {
  return this_ptr->rmdir(*dirName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_mkpath(QDir const * this_ptr, QString const * dirPath) {
  return this_ptr->mkpath(*dirPath);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_rmpath(QDir const * this_ptr, QString const * dirPath) {
  return this_ptr->rmpath(*dirPath);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_removeRecursively(QDir * this_ptr) {
  return this_ptr->removeRecursively();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isReadable(QDir const * this_ptr) {
  return this_ptr->isReadable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_exists(QDir const * this_ptr) {
  return this_ptr->exists();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isRoot(QDir const * this_ptr) {
  return this_ptr->isRoot();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isRelativePath(QString const * path) {
  return QDir::isRelativePath(*path);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isAbsolutePath(QString const * path) {
  return QDir::isAbsolutePath(*path);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isRelative(QDir const * this_ptr) {
  return this_ptr->isRelative();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isAbsolute(QDir const * this_ptr) {
  return this_ptr->isAbsolute();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_makeAbsolute(QDir * this_ptr) {
  return this_ptr->makeAbsolute();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_operator__1(QDir const * this_ptr, QDir const * dir) {
  return this_ptr->operator==(*dir);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_remove(QDir * this_ptr, QString const * fileName) {
  return this_ptr->remove(*fileName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_rename(QDir * this_ptr, QString const * oldName, QString const * newName) {
  return this_ptr->rename(*oldName, *newName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_exists1(QDir const * this_ptr, QString const * name) {
  return this_ptr->exists(*name);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_drives() {
  return new QList< QFileInfo >(QDir::drives());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QDir_listSeparator() {
  return new QChar(QDir::listSeparator());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QDir_separator() {
  return new QChar(QDir::separator());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_setCurrent(QString const * path) {
  return QDir::setCurrent(*path);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_current() {
  return new QDir(QDir::current());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_currentPath() {
  return new QString(QDir::currentPath());
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_home() {
  return new QDir(QDir::home());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_homePath() {
  return new QString(QDir::homePath());
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_root() {
  return new QDir(QDir::root());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_rootPath() {
  return new QString(QDir::rootPath());
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_temp() {
  return new QDir(QDir::temp());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_tempPath() {
  return new QString(QDir::tempPath());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_match(QStringList const * filters, QString const * fileName) {
  return QDir::match(*filters, *fileName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_match1(QString const * filter, QString const * fileName) {
  return QDir::match(*filter, *fileName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDir_cleanPath(QString const * path) {
  return new QString(QDir::cleanPath(*path));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDir_refresh(QDir const * this_ptr) {
  this_ptr->refresh();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__120(QDebug const * debug, QDir const * dir) {
  return new QDebug(operator<<(*debug, *dir));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator(QDir const * dir, int flags) {
  return new QDirIterator(*dir, QFlags< QDirIterator::IteratorFlag >(flags));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator1(QString const * path, int flags) {
  return new QDirIterator(*path, QFlags< QDirIterator::IteratorFlag >(flags));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator2(QString const * path, int filter, int flags) {
  return new QDirIterator(*path, QFlags< QDir::Filter >(filter), QFlags< QDirIterator::IteratorFlag >(flags));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator3(QString const * path, QStringList const * nameFilters, int filters, int flags) {
  return new QDirIterator(*path, *nameFilters, QFlags< QDir::Filter >(filters), QFlags< QDirIterator::IteratorFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDirIterator_dQDirIterator(QDirIterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDirIterator_next(QDirIterator * this_ptr) {
  return new QString(this_ptr->next());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDirIterator_hasNext(QDirIterator const * this_ptr) {
  return this_ptr->hasNext();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDirIterator_fileName(QDirIterator const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDirIterator_filePath(QDirIterator const * this_ptr) {
  return new QString(this_ptr->filePath());
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QDirIterator_fileInfo(QDirIterator const * this_ptr) {
  return new QFileInfo(this_ptr->fileInfo());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDirIterator_path(QDirIterator const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QEasingCurve_QEasingCurve(QEasingCurve::Type type) {
  return new QEasingCurve(type);
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QEasingCurve_QEasingCurve1(QEasingCurve const * other) {
  return new QEasingCurve(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_dQEasingCurve(QEasingCurve * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QEasingCurve_operator_(QEasingCurve * this_ptr, QEasingCurve const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_swap(QEasingCurve * this_ptr, QEasingCurve * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEasingCurve_operator__(QEasingCurve const * this_ptr, QEasingCurve const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QEasingCurve_amplitude(QEasingCurve const * this_ptr) {
  return this_ptr->amplitude();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_setAmplitude(QEasingCurve * this_ptr, double amplitude) {
  this_ptr->setAmplitude(amplitude);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QEasingCurve_period(QEasingCurve const * this_ptr) {
  return this_ptr->period();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_setPeriod(QEasingCurve * this_ptr, double period) {
  this_ptr->setPeriod(period);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QEasingCurve_overshoot(QEasingCurve const * this_ptr) {
  return this_ptr->overshoot();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_setOvershoot(QEasingCurve * this_ptr, double overshoot) {
  this_ptr->setOvershoot(overshoot);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_addCubicBezierSegment(QEasingCurve * this_ptr, QPointF const * c1, QPointF const * c2, QPointF const * endPoint) {
  this_ptr->addCubicBezierSegment(*c1, *c2, *endPoint);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_addTCBSegment(QEasingCurve * this_ptr, QPointF const * nextPoint, double t, double c, double b) {
  this_ptr->addTCBSegment(*nextPoint, t, c, b);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QEasingCurve_toCubicSpline(QEasingCurve const * this_ptr) {
  return new QVector< QPointF >(this_ptr->toCubicSpline());
}


RITUAL_EXPORT QEasingCurve::Type ctr_qt_core_ffi_QEasingCurve_type(QEasingCurve const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_setType(QEasingCurve * this_ptr, QEasingCurve::Type type) {
  this_ptr->setType(type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEasingCurve_setCustomType(QEasingCurve * this_ptr, double (*func)(double)) {
  this_ptr->setCustomType(func);
}


RITUAL_EXPORT double (*ctr_qt_core_ffi_QEasingCurve_customType(QEasingCurve const * this_ptr))(double) {
  return this_ptr->customType();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QEasingCurve_valueForProgress(QEasingCurve const * this_ptr, double progress) {
  return this_ptr->valueForProgress(progress);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__121(QDebug const * debug, QEasingCurve const * item) {
  return new QDebug(operator<<(*debug, *item));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__122(QDataStream * arg1, QEasingCurve const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__123(QDataStream * arg1, QEasingCurve * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT quint64 ctr_qt_core_ffi_qbswap(quint64 source) {
  return qbswap(source);
}


RITUAL_EXPORT quint32 ctr_qt_core_ffi_qbswap1(quint32 source) {
  return qbswap(source);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap2(quint64 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap3(quint32 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT quint16 ctr_qt_core_ffi_qbswap4(quint16 source) {
  return qbswap(source);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap5(quint16 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_qbswap6(qint64 source) {
  return qbswap(source);
}


RITUAL_EXPORT qint32 ctr_qt_core_ffi_qbswap7(qint32 source) {
  return qbswap(source);
}


RITUAL_EXPORT qint16 ctr_qt_core_ffi_qbswap8(qint16 source) {
  return qbswap(source);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap9(qint64 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap10(qint32 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qbswap11(qint16 source, void * dest) {
  qbswap(source, dest);
}


RITUAL_EXPORT quint8 ctr_qt_core_ffi_qbswap12(quint8 source) {
  return qbswap(source);
}


RITUAL_EXPORT qint8 ctr_qt_core_ffi_qbswap13(qint8 source) {
  return qbswap(source);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QEventTransition_metaObject(QEventTransition const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QEventTransition_qt_metacast(QEventTransition * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEventTransition_qt_metacall(QEventTransition * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QEventTransition_tr(char const * s, char const * c, int n) {
  return new QString(QEventTransition::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QEventTransition_trUtf8(char const * s, char const * c, int n) {
  return new QString(QEventTransition::trUtf8(s, c, n));
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_QEventTransition_QEventTransition(QState * sourceState) {
  return new QEventTransition(sourceState);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_QEventTransition_QEventTransition1(QObject * object, QEvent::Type type, QState * sourceState) {
  return new QEventTransition(object, type, sourceState);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventTransition_dQEventTransition(QEventTransition * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QEventTransition_eventSource(QEventTransition const * this_ptr) {
  return this_ptr->eventSource();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventTransition_setEventSource(QEventTransition * this_ptr, QObject * object) {
  this_ptr->setEventSource(object);
}


RITUAL_EXPORT QEvent::Type ctr_qt_core_ffi_QEventTransition_eventType(QEventTransition const * this_ptr) {
  return this_ptr->eventType();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventTransition_setEventType(QEventTransition * this_ptr, QEvent::Type type) {
  this_ptr->setEventType(type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QException_dQException(QException * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QException_raise(QException const * this_ptr) {
  this_ptr->raise();
}


RITUAL_EXPORT QException * ctr_qt_core_ffi_QException_clone(QException const * this_ptr) {
  return this_ptr->clone();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUnhandledException_dQUnhandledException(QUnhandledException * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUnhandledException_raise(QUnhandledException const * this_ptr) {
  this_ptr->raise();
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_QUnhandledException_clone(QUnhandledException const * this_ptr) {
  return this_ptr->clone();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFactoryInterface_dQFactoryInterface(QFactoryInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFactoryInterface_keys(QFactoryInterface const * this_ptr) {
  return new QStringList(this_ptr->keys());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileSelector_metaObject(QFileSelector const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFileSelector_qt_metacast(QFileSelector * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileSelector_qt_metacall(QFileSelector * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileSelector_tr(char const * s, char const * c, int n) {
  return new QString(QFileSelector::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileSelector_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFileSelector::trUtf8(s, c, n));
}


RITUAL_EXPORT QFileSelector * ctr_qt_core_ffi_QFileSelector_QFileSelector(QObject * parent) {
  return new QFileSelector(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileSelector_dQFileSelector(QFileSelector * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileSelector_select(QFileSelector const * this_ptr, QString const * filePath) {
  return new QString(this_ptr->select(*filePath));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QFileSelector_select1(QFileSelector const * this_ptr, QUrl const * filePath) {
  return new QUrl(this_ptr->select(*filePath));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSelector_extraSelectors(QFileSelector const * this_ptr) {
  return new QStringList(this_ptr->extraSelectors());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileSelector_setExtraSelectors(QFileSelector * this_ptr, QStringList const * list) {
  this_ptr->setExtraSelectors(*list);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSelector_allSelectors(QFileSelector const * this_ptr) {
  return new QStringList(this_ptr->allSelectors());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFileSystemWatcher_metaObject(QFileSystemWatcher const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFileSystemWatcher_qt_metacast(QFileSystemWatcher * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFileSystemWatcher_qt_metacall(QFileSystemWatcher * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileSystemWatcher_tr(char const * s, char const * c, int n) {
  return new QString(QFileSystemWatcher::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFileSystemWatcher_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFileSystemWatcher::trUtf8(s, c, n));
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_QFileSystemWatcher_QFileSystemWatcher(QObject * parent) {
  return new QFileSystemWatcher(parent);
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_QFileSystemWatcher_QFileSystemWatcher1(QStringList const * paths, QObject * parent) {
  return new QFileSystemWatcher(*paths, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFileSystemWatcher_dQFileSystemWatcher(QFileSystemWatcher * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileSystemWatcher_addPath(QFileSystemWatcher * this_ptr, QString const * file) {
  return this_ptr->addPath(*file);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSystemWatcher_addPaths(QFileSystemWatcher * this_ptr, QStringList const * files) {
  return new QStringList(this_ptr->addPaths(*files));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFileSystemWatcher_removePath(QFileSystemWatcher * this_ptr, QString const * file) {
  return this_ptr->removePath(*file);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSystemWatcher_removePaths(QFileSystemWatcher * this_ptr, QStringList const * files) {
  return new QStringList(this_ptr->removePaths(*files));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSystemWatcher_files(QFileSystemWatcher const * this_ptr) {
  return new QStringList(this_ptr->files());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QFileSystemWatcher_directories(QFileSystemWatcher const * this_ptr) {
  return new QStringList(this_ptr->directories());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFinalState_metaObject(QFinalState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFinalState_qt_metacast(QFinalState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFinalState_qt_metacall(QFinalState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFinalState_tr(char const * s, char const * c, int n) {
  return new QString(QFinalState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFinalState_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFinalState::trUtf8(s, c, n));
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_QFinalState_QFinalState(QState * parent) {
  return new QFinalState(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFinalState_dQFinalState(QFinalState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRunnable_run(QRunnable * this_ptr) {
  this_ptr->run();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRunnable_dQRunnable(QRunnable * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRunnable_autoDelete(QRunnable const * this_ptr) {
  return this_ptr->autoDelete();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRunnable_setAutoDelete(QRunnable * this_ptr, bool _autoDelete) {
  this_ptr->setAutoDelete(_autoDelete);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicMutex_lock(QBasicMutex * this_ptr) {
  this_ptr->lock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicMutex_unlock(QBasicMutex * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBasicMutex_tryLock(QBasicMutex * this_ptr) {
  return this_ptr->tryLock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBasicMutex_try_lock(QBasicMutex * this_ptr) {
  return this_ptr->try_lock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBasicMutex_isRecursive(QBasicMutex * this_ptr) {
  return this_ptr->isRecursive();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBasicMutex_isRecursive1(QBasicMutex const * this_ptr) {
  return this_ptr->isRecursive();
}


RITUAL_EXPORT QMutex * ctr_qt_core_ffi_QMutex_QMutex(QMutex::RecursionMode mode) {
  return new QMutex(mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutex_dQMutex(QMutex * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutex_lock(QMutex * this_ptr) {
  this_ptr->lock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMutex_tryLock(QMutex * this_ptr, int timeout) {
  return this_ptr->tryLock(timeout);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutex_unlock(QMutex * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMutex_try_lock(QMutex * this_ptr) {
  return this_ptr->try_lock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMutex_isRecursive(QMutex const * this_ptr) {
  return this_ptr->isRecursive();
}


RITUAL_EXPORT QMutexLocker * ctr_qt_core_ffi_QMutexLocker_QMutexLocker(QBasicMutex * m) {
  return new QMutexLocker(m);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutexLocker_dQMutexLocker(QMutexLocker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutexLocker_unlock(QMutexLocker * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMutexLocker_relock(QMutexLocker * this_ptr) {
  this_ptr->relock();
}


RITUAL_EXPORT QMutex * ctr_qt_core_ffi_QMutexLocker_mutex(QMutexLocker const * this_ptr) {
  return this_ptr->mutex();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QFutureWatcherBase_metaObject(QFutureWatcherBase const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QFutureWatcherBase_qt_metacast(QFutureWatcherBase * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFutureWatcherBase_qt_metacall(QFutureWatcherBase * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFutureWatcherBase_tr(char const * s, char const * c, int n) {
  return new QString(QFutureWatcherBase::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFutureWatcherBase_trUtf8(char const * s, char const * c, int n) {
  return new QString(QFutureWatcherBase::trUtf8(s, c, n));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFutureWatcherBase_progressValue(QFutureWatcherBase const * this_ptr) {
  return this_ptr->progressValue();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFutureWatcherBase_progressMinimum(QFutureWatcherBase const * this_ptr) {
  return this_ptr->progressMinimum();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFutureWatcherBase_progressMaximum(QFutureWatcherBase const * this_ptr) {
  return this_ptr->progressMaximum();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFutureWatcherBase_progressText(QFutureWatcherBase const * this_ptr) {
  return new QString(this_ptr->progressText());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_isStarted(QFutureWatcherBase const * this_ptr) {
  return this_ptr->isStarted();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_isFinished(QFutureWatcherBase const * this_ptr) {
  return this_ptr->isFinished();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_isRunning(QFutureWatcherBase const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_isCanceled(QFutureWatcherBase const * this_ptr) {
  return this_ptr->isCanceled();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_isPaused(QFutureWatcherBase const * this_ptr) {
  return this_ptr->isPaused();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_waitForFinished(QFutureWatcherBase * this_ptr) {
  this_ptr->waitForFinished();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_setPendingResultsLimit(QFutureWatcherBase * this_ptr, int limit) {
  this_ptr->setPendingResultsLimit(limit);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFutureWatcherBase_event(QFutureWatcherBase * this_ptr, QEvent * event) {
  return this_ptr->event(event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_cancel(QFutureWatcherBase * this_ptr) {
  this_ptr->cancel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_setPaused(QFutureWatcherBase * this_ptr, bool paused) {
  this_ptr->setPaused(paused);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_pause(QFutureWatcherBase * this_ptr) {
  this_ptr->pause();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_resume(QFutureWatcherBase * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_togglePaused(QFutureWatcherBase * this_ptr) {
  this_ptr->togglePaused();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QHistoryState_metaObject(QHistoryState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QHistoryState_qt_metacast(QHistoryState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHistoryState_qt_metacall(QHistoryState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QHistoryState_tr(char const * s, char const * c, int n) {
  return new QString(QHistoryState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QHistoryState_trUtf8(char const * s, char const * c, int n) {
  return new QString(QHistoryState::trUtf8(s, c, n));
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_QHistoryState_QHistoryState(QState * parent) {
  return new QHistoryState(parent);
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_QHistoryState_QHistoryState1(QHistoryState::HistoryType type, QState * parent) {
  return new QHistoryState(type, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHistoryState_dQHistoryState(QHistoryState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QHistoryState_defaultTransition(QHistoryState const * this_ptr) {
  return this_ptr->defaultTransition();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHistoryState_setDefaultTransition(QHistoryState * this_ptr, QAbstractTransition * transition) {
  this_ptr->setDefaultTransition(transition);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QHistoryState_defaultState(QHistoryState const * this_ptr) {
  return this_ptr->defaultState();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHistoryState_setDefaultState(QHistoryState * this_ptr, QAbstractState * state) {
  this_ptr->setDefaultState(state);
}


RITUAL_EXPORT QHistoryState::HistoryType ctr_qt_core_ffi_QHistoryState_historyType(QHistoryState const * this_ptr) {
  return this_ptr->historyType();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHistoryState_setHistoryType(QHistoryState * this_ptr, QHistoryState::HistoryType type) {
  this_ptr->setHistoryType(type);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QIdentityProxyModel_metaObject(QIdentityProxyModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QIdentityProxyModel_qt_metacast(QIdentityProxyModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIdentityProxyModel_qt_metacall(QIdentityProxyModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QIdentityProxyModel_tr(char const * s, char const * c, int n) {
  return new QString(QIdentityProxyModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QIdentityProxyModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QIdentityProxyModel::trUtf8(s, c, n));
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_QIdentityProxyModel_QIdentityProxyModel(QObject * parent) {
  return new QIdentityProxyModel(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIdentityProxyModel_dQIdentityProxyModel(QIdentityProxyModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIdentityProxyModel_columnCount(QIdentityProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_index(QIdentityProxyModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_mapFromSource(QIdentityProxyModel const * this_ptr, QModelIndex const * sourceIndex) {
  return new QModelIndex(this_ptr->mapFromSource(*sourceIndex));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_mapToSource(QIdentityProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QModelIndex(this_ptr->mapToSource(*proxyIndex));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_parent(QIdentityProxyModel const * this_ptr, QModelIndex const * child) {
  return new QModelIndex(this_ptr->parent(*child));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIdentityProxyModel_rowCount(QIdentityProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QIdentityProxyModel_headerData(QIdentityProxyModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_dropMimeData(QIdentityProxyModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_sibling(QIdentityProxyModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QIdentityProxyModel_mapSelectionFromSource(QIdentityProxyModel const * this_ptr, QItemSelection const * selection) {
  return new QItemSelection(this_ptr->mapSelectionFromSource(*selection));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QIdentityProxyModel_mapSelectionToSource(QIdentityProxyModel const * this_ptr, QItemSelection const * selection) {
  return new QItemSelection(this_ptr->mapSelectionToSource(*selection));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QIdentityProxyModel_match(QIdentityProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits, int flags) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits, QFlags< Qt::MatchFlag >(flags)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QIdentityProxyModel_setSourceModel(QIdentityProxyModel * this_ptr, QAbstractItemModel * sourceModel) {
  this_ptr->setSourceModel(sourceModel);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_insertColumns(QIdentityProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->insertColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_insertRows(QIdentityProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_removeColumns(QIdentityProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->removeColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_removeRows(QIdentityProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_QItemSelectionRange() {
  return new QItemSelectionRange();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_QItemSelectionRange1(QItemSelectionRange const * other) {
  return new QItemSelectionRange(*other);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_operator_1(QItemSelectionRange * this_ptr, QItemSelectionRange const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_QItemSelectionRange3(QModelIndex const * topL, QModelIndex const * bottomR) {
  return new QItemSelectionRange(*topL, *bottomR);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_QItemSelectionRange4(QModelIndex const * index) {
  return new QItemSelectionRange(*index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionRange_swap(QItemSelectionRange * this_ptr, QItemSelectionRange * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_top(QItemSelectionRange const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_left(QItemSelectionRange const * this_ptr) {
  return this_ptr->left();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_bottom(QItemSelectionRange const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_right(QItemSelectionRange const * this_ptr) {
  return this_ptr->right();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_width(QItemSelectionRange const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionRange_height(QItemSelectionRange const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QItemSelectionRange_topLeft(QItemSelectionRange const * this_ptr) {
  return &this_ptr->topLeft();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QItemSelectionRange_bottomRight(QItemSelectionRange const * this_ptr) {
  return &this_ptr->bottomRight();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QItemSelectionRange_parent(QItemSelectionRange const * this_ptr) {
  return new QModelIndex(this_ptr->parent());
}


RITUAL_EXPORT QAbstractItemModel const * ctr_qt_core_ffi_QItemSelectionRange_model(QItemSelectionRange const * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_contains(QItemSelectionRange const * this_ptr, QModelIndex const * index) {
  return this_ptr->contains(*index);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_contains1(QItemSelectionRange const * this_ptr, int row, int column, QModelIndex const * parentIndex) {
  return this_ptr->contains(row, column, *parentIndex);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_intersects(QItemSelectionRange const * this_ptr, QItemSelectionRange const * other) {
  return this_ptr->intersects(*other);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QItemSelectionRange_intersected(QItemSelectionRange const * this_ptr, QItemSelectionRange const * other) {
  return new QItemSelectionRange(this_ptr->intersected(*other));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_operator__(QItemSelectionRange const * this_ptr, QItemSelectionRange const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_operator_2(QItemSelectionRange const * this_ptr, QItemSelectionRange const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_isValid(QItemSelectionRange const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionRange_isEmpty(QItemSelectionRange const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionRange_indexes(QItemSelectionRange const * this_ptr) {
  return new QList< QModelIndex >(this_ptr->indexes());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QItemSelectionModel_metaObject(QItemSelectionModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QItemSelectionModel_qt_metacast(QItemSelectionModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QItemSelectionModel_qt_metacall(QItemSelectionModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QItemSelectionModel_tr(char const * s, char const * c, int n) {
  return new QString(QItemSelectionModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QItemSelectionModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QItemSelectionModel::trUtf8(s, c, n));
}


RITUAL_EXPORT QItemSelectionModel * ctr_qt_core_ffi_QItemSelectionModel_QItemSelectionModel(QAbstractItemModel * model) {
  return new QItemSelectionModel(model);
}


RITUAL_EXPORT QItemSelectionModel * ctr_qt_core_ffi_QItemSelectionModel_QItemSelectionModel1(QAbstractItemModel * model, QObject * parent) {
  return new QItemSelectionModel(model, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_dQItemSelectionModel(QItemSelectionModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QItemSelectionModel_currentIndex(QItemSelectionModel const * this_ptr) {
  return new QModelIndex(this_ptr->currentIndex());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_isSelected(QItemSelectionModel const * this_ptr, QModelIndex const * index) {
  return this_ptr->isSelected(*index);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_isRowSelected(QItemSelectionModel const * this_ptr, int row, QModelIndex const * parent) {
  return this_ptr->isRowSelected(row, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_isColumnSelected(QItemSelectionModel const * this_ptr, int column, QModelIndex const * parent) {
  return this_ptr->isColumnSelected(column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_rowIntersectsSelection(QItemSelectionModel const * this_ptr, int row, QModelIndex const * parent) {
  return this_ptr->rowIntersectsSelection(row, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_columnIntersectsSelection(QItemSelectionModel const * this_ptr, int column, QModelIndex const * parent) {
  return this_ptr->columnIntersectsSelection(column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelectionModel_hasSelection(QItemSelectionModel const * this_ptr) {
  return this_ptr->hasSelection();
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionModel_selectedIndexes(QItemSelectionModel const * this_ptr) {
  return new QList< QModelIndex >(this_ptr->selectedIndexes());
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionModel_selectedRows(QItemSelectionModel const * this_ptr, int column) {
  return new QList< QModelIndex >(this_ptr->selectedRows(column));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionModel_selectedColumns(QItemSelectionModel const * this_ptr, int row) {
  return new QList< QModelIndex >(this_ptr->selectedColumns(row));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QItemSelectionModel_selection(QItemSelectionModel const * this_ptr) {
  return new QItemSelection(this_ptr->selection());
}


RITUAL_EXPORT QAbstractItemModel const * ctr_qt_core_ffi_QItemSelectionModel_model(QItemSelectionModel const * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_QItemSelectionModel_model1(QItemSelectionModel * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_setModel(QItemSelectionModel * this_ptr, QAbstractItemModel * model) {
  this_ptr->setModel(model);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_setCurrentIndex(QItemSelectionModel * this_ptr, QModelIndex const * index, int command) {
  this_ptr->setCurrentIndex(*index, QFlags< QItemSelectionModel::SelectionFlag >(command));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_select(QItemSelectionModel * this_ptr, QModelIndex const * index, int command) {
  this_ptr->select(*index, QFlags< QItemSelectionModel::SelectionFlag >(command));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_select1(QItemSelectionModel * this_ptr, QItemSelection const * selection, int command) {
  this_ptr->select(*selection, QFlags< QItemSelectionModel::SelectionFlag >(command));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_clear(QItemSelectionModel * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_reset(QItemSelectionModel * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_clearSelection(QItemSelectionModel * this_ptr) {
  this_ptr->clearSelection();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionModel_clearCurrentIndex(QItemSelectionModel * this_ptr) {
  this_ptr->clearCurrentIndex();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash27(QItemSelectionRange const * arg1) {
  return qHash(*arg1);
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QItemSelection_QItemSelection() {
  return new QItemSelection();
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QItemSelection_QItemSelection1(QModelIndex const * topLeft, QModelIndex const * bottomRight) {
  return new QItemSelection(*topLeft, *bottomRight);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelection_select(QItemSelection * this_ptr, QModelIndex const * topLeft, QModelIndex const * bottomRight) {
  this_ptr->select(*topLeft, *bottomRight);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QItemSelection_contains(QItemSelection const * this_ptr, QModelIndex const * index) {
  return this_ptr->contains(*index);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelection_indexes(QItemSelection const * this_ptr) {
  return new QList< QModelIndex >(this_ptr->indexes());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelection_merge(QItemSelection * this_ptr, QItemSelection const * other, int command) {
  this_ptr->merge(*other, QFlags< QItemSelectionModel::SelectionFlag >(command));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelection_split(QItemSelectionRange const * range, QItemSelectionRange const * other, QItemSelection * result) {
  QItemSelection::split(*range, *other, result);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__124(QDebug const * arg1, QItemSelectionRange const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue(QJsonValue::Type arg1) {
  return new QJsonValue(arg1);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue1(bool b) {
  return new QJsonValue(b);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue2(double n) {
  return new QJsonValue(n);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue3(int n) {
  return new QJsonValue(n);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue4(qint64 n) {
  return new QJsonValue(n);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue5(QString const * s) {
  return new QJsonValue(*s);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue6(QLatin1String const * s) {
  return new QJsonValue(*s);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue7(char const * s) {
  return new QJsonValue(s);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue8(QJsonArray const * a) {
  return new QJsonValue(*a);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue9(QJsonObject const * o) {
  return new QJsonValue(*o);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonValue_dQJsonValue(QJsonValue * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue10(QJsonValue const * other) {
  return new QJsonValue(*other);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_operator_(QJsonValue * this_ptr, QJsonValue const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_fromVariant(QVariant const * variant) {
  return new QJsonValue(QJsonValue::fromVariant(*variant));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QJsonValue_toVariant(QJsonValue const * this_ptr) {
  return new QVariant(this_ptr->toVariant());
}


RITUAL_EXPORT QJsonValue::Type ctr_qt_core_ffi_QJsonValue_type(QJsonValue const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isNull(QJsonValue const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isBool(QJsonValue const * this_ptr) {
  return this_ptr->isBool();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isDouble(QJsonValue const * this_ptr) {
  return this_ptr->isDouble();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isString(QJsonValue const * this_ptr) {
  return this_ptr->isString();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isArray(QJsonValue const * this_ptr) {
  return this_ptr->isArray();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isObject(QJsonValue const * this_ptr) {
  return this_ptr->isObject();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_isUndefined(QJsonValue const * this_ptr) {
  return this_ptr->isUndefined();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_toBool(QJsonValue const * this_ptr, bool defaultValue) {
  return this_ptr->toBool(defaultValue);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonValue_toInt(QJsonValue const * this_ptr, int defaultValue) {
  return this_ptr->toInt(defaultValue);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QJsonValue_toDouble(QJsonValue const * this_ptr, double defaultValue) {
  return this_ptr->toDouble(defaultValue);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonValue_toString(QJsonValue const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonValue_toString1(QJsonValue const * this_ptr, QString const * defaultValue) {
  return new QString(this_ptr->toString(*defaultValue));
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonValue_toArray(QJsonValue const * this_ptr) {
  return new QJsonArray(this_ptr->toArray());
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonValue_toArray1(QJsonValue const * this_ptr, QJsonArray const * defaultValue) {
  return new QJsonArray(this_ptr->toArray(*defaultValue));
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonValue_toObject(QJsonValue const * this_ptr) {
  return new QJsonObject(this_ptr->toObject());
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonValue_toObject1(QJsonValue const * this_ptr, QJsonObject const * defaultValue) {
  return new QJsonObject(this_ptr->toObject(*defaultValue));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_operator__(QJsonValue const * this_ptr, QJsonValue const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonValueRef_QJsonValueRef(QJsonArray * array, int idx) {
  return new QJsonValueRef(array, idx);
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonValueRef_QJsonValueRef1(QJsonObject * object, int idx) {
  return new QJsonValueRef(object, idx);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValueRef_operator_QJsonValue(QJsonValueRef const * this_ptr) {
  return new QJsonValue(this_ptr->operator QJsonValue());
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonValueRef_operator_(QJsonValueRef * this_ptr, QJsonValue const * val) {
  return &this_ptr->operator=(*val);
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonValueRef_operator_1(QJsonValueRef * this_ptr, QJsonValueRef const * val) {
  return &this_ptr->operator=(*val);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QJsonValueRef_toVariant(QJsonValueRef const * this_ptr) {
  return new QVariant(this_ptr->toVariant());
}


RITUAL_EXPORT QJsonValue::Type ctr_qt_core_ffi_QJsonValueRef_type(QJsonValueRef const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isNull(QJsonValueRef const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isBool(QJsonValueRef const * this_ptr) {
  return this_ptr->isBool();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isDouble(QJsonValueRef const * this_ptr) {
  return this_ptr->isDouble();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isString(QJsonValueRef const * this_ptr) {
  return this_ptr->isString();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isArray(QJsonValueRef const * this_ptr) {
  return this_ptr->isArray();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isObject(QJsonValueRef const * this_ptr) {
  return this_ptr->isObject();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_isUndefined(QJsonValueRef const * this_ptr) {
  return this_ptr->isUndefined();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_toBool(QJsonValueRef const * this_ptr) {
  return this_ptr->toBool();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonValueRef_toInt(QJsonValueRef const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QJsonValueRef_toDouble(QJsonValueRef const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonValueRef_toString(QJsonValueRef const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonValueRef_toArray(QJsonValueRef const * this_ptr) {
  return new QJsonArray(this_ptr->toArray());
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonValueRef_toObject(QJsonValueRef const * this_ptr) {
  return new QJsonObject(this_ptr->toObject());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_toBool1(QJsonValueRef const * this_ptr, bool defaultValue) {
  return this_ptr->toBool(defaultValue);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonValueRef_toInt1(QJsonValueRef const * this_ptr, int defaultValue) {
  return this_ptr->toInt(defaultValue);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QJsonValueRef_toDouble1(QJsonValueRef const * this_ptr, double defaultValue) {
  return this_ptr->toDouble(defaultValue);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonValueRef_toString1(QJsonValueRef const * this_ptr, QString const * defaultValue) {
  return new QString(this_ptr->toString(*defaultValue));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValueRef_operator__(QJsonValueRef const * this_ptr, QJsonValue const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__125(QDebug const * arg1, QJsonValue const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_QJsonArray() {
  return new QJsonArray();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_dQJsonArray(QJsonArray * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_QJsonArray2(QJsonArray const * other) {
  return new QJsonArray(*other);
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_operator_(QJsonArray * this_ptr, QJsonArray const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_fromStringList(QStringList const * list) {
  return new QJsonArray(QJsonArray::fromStringList(*list));
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_fromVariantList(QList< QVariant > const * list) {
  return new QJsonArray(QJsonArray::fromVariantList(*list));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QJsonArray_toVariantList(QJsonArray const * this_ptr) {
  return new QList< QVariant >(this_ptr->toVariantList());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_size(QJsonArray const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_count(QJsonArray const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_isEmpty(QJsonArray const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_at(QJsonArray const * this_ptr, int i) {
  return new QJsonValue(this_ptr->at(i));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_first(QJsonArray const * this_ptr) {
  return new QJsonValue(this_ptr->first());
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_last(QJsonArray const * this_ptr) {
  return new QJsonValue(this_ptr->last());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_prepend(QJsonArray * this_ptr, QJsonValue const * value) {
  this_ptr->prepend(*value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_append(QJsonArray * this_ptr, QJsonValue const * value) {
  this_ptr->append(*value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_removeAt(QJsonArray * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_takeAt(QJsonArray * this_ptr, int i) {
  return new QJsonValue(this_ptr->takeAt(i));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_removeFirst(QJsonArray * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_removeLast(QJsonArray * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_insert(QJsonArray * this_ptr, int i, QJsonValue const * value) {
  this_ptr->insert(i, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_replace(QJsonArray * this_ptr, int i, QJsonValue const * value) {
  this_ptr->replace(i, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_contains(QJsonArray const * this_ptr, QJsonValue const * element) {
  return this_ptr->contains(*element);
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonArray_operator__(QJsonArray * this_ptr, int i) {
  return new QJsonValueRef(this_ptr->operator[](i));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_operator__1(QJsonArray const * this_ptr, int i) {
  return new QJsonValue(this_ptr->operator[](i));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_operator__2(QJsonArray const * this_ptr, QJsonArray const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_iterator() {
  return new QJsonArray::iterator();
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_iterator1(QJsonArray * array, int index) {
  return new QJsonArray::iterator(array, index);
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonArray_iterator_operator_(QJsonArray::iterator const * this_ptr) {
  return new QJsonValueRef(this_ptr->operator*());
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonArray_iterator_operator__(QJsonArray::iterator const * this_ptr, int j) {
  return new QJsonValueRef(this_ptr->operator[](j));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__1(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator_1(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__3(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator_2(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__4(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__5(QJsonArray::iterator const * this_ptr, QJsonArray::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator_3(QJsonArray::iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__7(QJsonArray::iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator_4(QJsonArray::iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_iterator_operator__8(QJsonArray::iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__9(QJsonArray::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__10(QJsonArray::iterator * this_ptr, int arg1) {
  return new QJsonArray::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__11(QJsonArray::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__12(QJsonArray::iterator * this_ptr, int arg1) {
  return new QJsonArray::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__13(QJsonArray::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator__14(QJsonArray::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator_5(QJsonArray::iterator const * this_ptr, int j) {
  return new QJsonArray::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator_6(QJsonArray::iterator const * this_ptr, int j) {
  return new QJsonArray::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_iterator_operator_7(QJsonArray::iterator const * this_ptr, QJsonArray::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_const_iterator() {
  return new QJsonArray::const_iterator();
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_const_iterator1(QJsonArray const * array, int index) {
  return new QJsonArray::const_iterator(array, index);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_const_iterator2(QJsonArray::const_iterator const * o) {
  return new QJsonArray::const_iterator(*o);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_const_iterator3(QJsonArray::iterator const * o) {
  return new QJsonArray::const_iterator(*o);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_const_iterator_operator_(QJsonArray::const_iterator const * this_ptr) {
  return new QJsonValue(this_ptr->operator*());
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__(QJsonArray::const_iterator const * this_ptr, int j) {
  return new QJsonValue(this_ptr->operator[](j));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_const_iterator_operator__1(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_const_iterator_operator_1(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_const_iterator_operator__3(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_const_iterator_operator_2(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_const_iterator_operator__4(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__5(QJsonArray::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__6(QJsonArray::const_iterator * this_ptr, int arg1) {
  return new QJsonArray::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__7(QJsonArray::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__8(QJsonArray::const_iterator * this_ptr, int arg1) {
  return new QJsonArray::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__9(QJsonArray::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator__10(QJsonArray::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator_3(QJsonArray::const_iterator const * this_ptr, int j) {
  return new QJsonArray::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator_4(QJsonArray::const_iterator const * this_ptr, int j) {
  return new QJsonArray::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonArray_const_iterator_operator_5(QJsonArray::const_iterator const * this_ptr, QJsonArray::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_begin(QJsonArray * this_ptr) {
  return new QJsonArray::iterator(this_ptr->begin());
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_begin1(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_constBegin(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_end(QJsonArray * this_ptr) {
  return new QJsonArray::iterator(this_ptr->end());
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_end1(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_constEnd(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_insert1(QJsonArray * this_ptr, QJsonArray::iterator const * before, QJsonValue const * value) {
  return new QJsonArray::iterator(this_ptr->insert(*before, *value));
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_erase(QJsonArray * this_ptr, QJsonArray::iterator const * it) {
  return new QJsonArray::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_operator_1(QJsonArray const * this_ptr, QJsonValue const * v) {
  return new QJsonArray(this_ptr->operator+(*v));
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_operator__4(QJsonArray * this_ptr, QJsonValue const * v) {
  return &this_ptr->operator+=(*v);
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonArray_operator__5(QJsonArray * this_ptr, QJsonValue const * v) {
  return &this_ptr->operator<<(*v);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_push_back(QJsonArray * this_ptr, QJsonValue const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_push_front(QJsonArray * this_ptr, QJsonValue const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_pop_front(QJsonArray * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_pop_back(QJsonArray * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonArray_empty(QJsonArray const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__126(QDebug const * arg1, QJsonArray const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonParseError_errorString(QJsonParseError const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_QJsonDocument() {
  return new QJsonDocument();
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_QJsonDocument1(QJsonObject const * object) {
  return new QJsonDocument(*object);
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_QJsonDocument2(QJsonArray const * array) {
  return new QJsonDocument(*array);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonDocument_dQJsonDocument(QJsonDocument * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_QJsonDocument3(QJsonDocument const * other) {
  return new QJsonDocument(*other);
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_operator_(QJsonDocument * this_ptr, QJsonDocument const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromRawData(char const * data, int size, QJsonDocument::DataValidation validation) {
  return new QJsonDocument(QJsonDocument::fromRawData(data, size, validation));
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QJsonDocument_rawData(QJsonDocument const * this_ptr, int * size) {
  return this_ptr->rawData(size);
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromBinaryData(QByteArray const * data, QJsonDocument::DataValidation validation) {
  return new QJsonDocument(QJsonDocument::fromBinaryData(*data, validation));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QJsonDocument_toBinaryData(QJsonDocument const * this_ptr) {
  return new QByteArray(this_ptr->toBinaryData());
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromVariant(QVariant const * variant) {
  return new QJsonDocument(QJsonDocument::fromVariant(*variant));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QJsonDocument_toVariant(QJsonDocument const * this_ptr) {
  return new QVariant(this_ptr->toVariant());
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromJson(QByteArray const * json, QJsonParseError * error) {
  return new QJsonDocument(QJsonDocument::fromJson(*json, error));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QJsonDocument_toJson(QJsonDocument const * this_ptr) {
  return new QByteArray(this_ptr->toJson());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QJsonDocument_toJson1(QJsonDocument const * this_ptr, QJsonDocument::JsonFormat format) {
  return new QByteArray(this_ptr->toJson(format));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonDocument_isEmpty(QJsonDocument const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonDocument_isArray(QJsonDocument const * this_ptr) {
  return this_ptr->isArray();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonDocument_isObject(QJsonDocument const * this_ptr) {
  return this_ptr->isObject();
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonDocument_object(QJsonDocument const * this_ptr) {
  return new QJsonObject(this_ptr->object());
}


RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QJsonDocument_array(QJsonDocument const * this_ptr) {
  return new QJsonArray(this_ptr->array());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonDocument_setObject(QJsonDocument * this_ptr, QJsonObject const * object) {
  this_ptr->setObject(*object);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonDocument_setArray(QJsonDocument * this_ptr, QJsonArray const * array) {
  this_ptr->setArray(*array);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonDocument_operator__(QJsonDocument const * this_ptr, QJsonDocument const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonDocument_isNull(QJsonDocument const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__127(QDebug const * arg1, QJsonDocument const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonObject_QJsonObject() {
  return new QJsonObject();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_dQJsonObject(QJsonObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonObject_QJsonObject2(QJsonObject const * other) {
  return new QJsonObject(*other);
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonObject_operator_(QJsonObject * this_ptr, QJsonObject const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonObject_fromVariantMap(QMap< QString, QVariant > const * map) {
  return new QJsonObject(QJsonObject::fromVariantMap(*map));
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QJsonObject_toVariantMap(QJsonObject const * this_ptr) {
  return new QMap< QString, QVariant >(this_ptr->toVariantMap());
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QJsonObject_fromVariantHash(QHash< QString, QVariant > const * map) {
  return new QJsonObject(QJsonObject::fromVariantHash(*map));
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QJsonObject_toVariantHash(QJsonObject const * this_ptr) {
  return new QHash< QString, QVariant >(this_ptr->toVariantHash());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QJsonObject_keys(QJsonObject const * this_ptr) {
  return new QStringList(this_ptr->keys());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonObject_size(QJsonObject const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonObject_count(QJsonObject const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonObject_length(QJsonObject const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_isEmpty(QJsonObject const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_value(QJsonObject const * this_ptr, QString const * key) {
  return new QJsonValue(this_ptr->value(*key));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_value1(QJsonObject const * this_ptr, QLatin1String const * key) {
  return new QJsonValue(this_ptr->value(*key));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_operator__(QJsonObject const * this_ptr, QString const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_operator__1(QJsonObject const * this_ptr, QLatin1String const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonObject_operator__2(QJsonObject * this_ptr, QString const * key) {
  return new QJsonValueRef(this_ptr->operator[](*key));
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonObject_operator__3(QJsonObject * this_ptr, QLatin1String const * key) {
  return new QJsonValueRef(this_ptr->operator[](*key));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_remove(QJsonObject * this_ptr, QString const * key) {
  this_ptr->remove(*key);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_take(QJsonObject * this_ptr, QString const * key) {
  return new QJsonValue(this_ptr->take(*key));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_contains(QJsonObject const * this_ptr, QString const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_contains1(QJsonObject const * this_ptr, QLatin1String const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_operator__4(QJsonObject const * this_ptr, QJsonObject const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_iterator() {
  return new QJsonObject::iterator();
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_iterator1(QJsonObject * obj, int index) {
  return new QJsonObject::iterator(obj, index);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonObject_iterator_key(QJsonObject::iterator const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonObject_iterator_value(QJsonObject::iterator const * this_ptr) {
  return new QJsonValueRef(this_ptr->value());
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonObject_iterator_operator_(QJsonObject::iterator const * this_ptr) {
  return new QJsonValueRef(this_ptr->operator*());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_iterator_operator__(QJsonObject::iterator const * this_ptr, QJsonObject::iterator const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__2(QJsonObject::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__3(QJsonObject::iterator * this_ptr, int arg1) {
  return new QJsonObject::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__4(QJsonObject::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__5(QJsonObject::iterator * this_ptr, int arg1) {
  return new QJsonObject::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator_1(QJsonObject::iterator const * this_ptr, int j) {
  return new QJsonObject::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator_2(QJsonObject::iterator const * this_ptr, int j) {
  return new QJsonObject::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__6(QJsonObject::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator__7(QJsonObject::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_iterator_operator__8(QJsonObject::iterator const * this_ptr, QJsonObject::const_iterator const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_const_iterator() {
  return new QJsonObject::const_iterator();
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_const_iterator1(QJsonObject const * obj, int index) {
  return new QJsonObject::const_iterator(obj, index);
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_const_iterator2(QJsonObject::iterator const * other) {
  return new QJsonObject::const_iterator(*other);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QJsonObject_const_iterator_key(QJsonObject::const_iterator const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_const_iterator_value(QJsonObject::const_iterator const * this_ptr) {
  return new QJsonValue(this_ptr->value());
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_const_iterator_operator_(QJsonObject::const_iterator const * this_ptr) {
  return new QJsonValue(this_ptr->operator*());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_const_iterator_operator__(QJsonObject::const_iterator const * this_ptr, QJsonObject::const_iterator const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__2(QJsonObject::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__3(QJsonObject::const_iterator * this_ptr, int arg1) {
  return new QJsonObject::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__4(QJsonObject::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__5(QJsonObject::const_iterator * this_ptr, int arg1) {
  return new QJsonObject::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator_1(QJsonObject::const_iterator const * this_ptr, int j) {
  return new QJsonObject::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator_2(QJsonObject::const_iterator const * this_ptr, int j) {
  return new QJsonObject::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__6(QJsonObject::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator__7(QJsonObject::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_const_iterator_operator__8(QJsonObject::const_iterator const * this_ptr, QJsonObject::iterator const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_begin(QJsonObject * this_ptr) {
  return new QJsonObject::iterator(this_ptr->begin());
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_begin1(QJsonObject const * this_ptr) {
  return new QJsonObject::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_constBegin(QJsonObject const * this_ptr) {
  return new QJsonObject::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_end(QJsonObject * this_ptr) {
  return new QJsonObject::iterator(this_ptr->end());
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_end1(QJsonObject const * this_ptr) {
  return new QJsonObject::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_constEnd(QJsonObject const * this_ptr) {
  return new QJsonObject::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_erase(QJsonObject * this_ptr, QJsonObject::iterator const * it) {
  return new QJsonObject::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_find(QJsonObject * this_ptr, QString const * key) {
  return new QJsonObject::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_find1(QJsonObject * this_ptr, QLatin1String const * key) {
  return new QJsonObject::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_find2(QJsonObject const * this_ptr, QString const * key) {
  return new QJsonObject::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_find3(QJsonObject const * this_ptr, QLatin1String const * key) {
  return new QJsonObject::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_constFind(QJsonObject const * this_ptr, QString const * key) {
  return new QJsonObject::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_constFind1(QJsonObject const * this_ptr, QLatin1String const * key) {
  return new QJsonObject::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_insert(QJsonObject * this_ptr, QString const * key, QJsonValue const * value) {
  return new QJsonObject::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_empty(QJsonObject const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__128(QDebug const * arg1, QJsonObject const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QLibrary_metaObject(QLibrary const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QLibrary_qt_metacast(QLibrary * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLibrary_qt_metacall(QLibrary * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibrary_tr(char const * s, char const * c, int n) {
  return new QString(QLibrary::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibrary_trUtf8(char const * s, char const * c, int n) {
  return new QString(QLibrary::trUtf8(s, c, n));
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary(QObject * parent) {
  return new QLibrary(parent);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary1(QString const * fileName, QObject * parent) {
  return new QLibrary(*fileName, parent);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary2(QString const * fileName, int verNum, QObject * parent) {
  return new QLibrary(*fileName, verNum, parent);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary3(QString const * fileName, QString const * version, QObject * parent) {
  return new QLibrary(*fileName, *version, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibrary_dQLibrary(QLibrary * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void (*ctr_qt_core_ffi_QLibrary_resolve(QLibrary * this_ptr, char const * symbol))() {
  return this_ptr->resolve(symbol);
}


RITUAL_EXPORT void (*ctr_qt_core_ffi_QLibrary_resolve1(QString const * fileName, char const * symbol))() {
  return QLibrary::resolve(*fileName, symbol);
}


RITUAL_EXPORT void (*ctr_qt_core_ffi_QLibrary_resolve2(QString const * fileName, int verNum, char const * symbol))() {
  return QLibrary::resolve(*fileName, verNum, symbol);
}


RITUAL_EXPORT void (*ctr_qt_core_ffi_QLibrary_resolve3(QString const * fileName, QString const * version, char const * symbol))() {
  return QLibrary::resolve(*fileName, *version, symbol);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLibrary_load(QLibrary * this_ptr) {
  return this_ptr->load();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLibrary_unload(QLibrary * this_ptr) {
  return this_ptr->unload();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLibrary_isLoaded(QLibrary const * this_ptr) {
  return this_ptr->isLoaded();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLibrary_isLibrary(QString const * fileName) {
  return QLibrary::isLibrary(*fileName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibrary_setFileName(QLibrary * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibrary_fileName(QLibrary const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibrary_setFileNameAndVersion(QLibrary * this_ptr, QString const * fileName, int verNum) {
  this_ptr->setFileNameAndVersion(*fileName, verNum);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibrary_setFileNameAndVersion1(QLibrary * this_ptr, QString const * fileName, QString const * version) {
  this_ptr->setFileNameAndVersion(*fileName, *version);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibrary_errorString(QLibrary const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibrary_setLoadHints(QLibrary * this_ptr, int hints) {
  this_ptr->setLoadHints(QFlags< QLibrary::LoadHint >(hints));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLibrary_loadHints(QLibrary const * this_ptr) {
  return int(this_ptr->loadHints());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash28(QVersionNumber const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__129(QDataStream * out, QVersionNumber const * version) {
  return &operator<<(*out, *version);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__130(QDataStream * in, QVersionNumber * version) {
  return &operator>>(*in, *version);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber() {
  return new QVersionNumber();
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber1(QVector< int > const * seg) {
  return new QVersionNumber(*seg);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber4(int maj) {
  return new QVersionNumber(maj);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber5(int maj, int min) {
  return new QVersionNumber(maj, min);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber6(int maj, int min, int mic) {
  return new QVersionNumber(maj, min, mic);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVersionNumber_isNull(QVersionNumber const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVersionNumber_isNormalized(QVersionNumber const * this_ptr) {
  return this_ptr->isNormalized();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_majorVersion(QVersionNumber const * this_ptr) {
  return this_ptr->majorVersion();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_minorVersion(QVersionNumber const * this_ptr) {
  return this_ptr->minorVersion();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_microVersion(QVersionNumber const * this_ptr) {
  return this_ptr->microVersion();
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_normalized(QVersionNumber const * this_ptr) {
  return new QVersionNumber(this_ptr->normalized());
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVersionNumber_segments(QVersionNumber const * this_ptr) {
  return new QVector< int >(this_ptr->segments());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_segmentAt(QVersionNumber const * this_ptr, int index) {
  return this_ptr->segmentAt(index);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_segmentCount(QVersionNumber const * this_ptr) {
  return this_ptr->segmentCount();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVersionNumber_isPrefixOf(QVersionNumber const * this_ptr, QVersionNumber const * other) {
  return this_ptr->isPrefixOf(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVersionNumber_compare(QVersionNumber const * v1, QVersionNumber const * v2) {
  return QVersionNumber::compare(*v1, *v2);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_commonPrefix(QVersionNumber const * v1, QVersionNumber const * v2) {
  return new QVersionNumber(QVersionNumber::commonPrefix(*v1, *v2));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QVersionNumber_toString(QVersionNumber const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString(QString const * string, int * suffixIndex) {
  return new QVersionNumber(QVersionNumber::fromString(*string, suffixIndex));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__131(QDebug const * arg1, QVersionNumber const * version) {
  return new QDebug(operator<<(*arg1, *version));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_68(QVersionNumber const * lhs, QVersionNumber const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__132(QVersionNumber const * lhs, QVersionNumber const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_69(QVersionNumber const * lhs, QVersionNumber const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__133(QVersionNumber const * lhs, QVersionNumber const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__134(QVersionNumber const * lhs, QVersionNumber const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibraryInfo_licensee() {
  return new QString(QLibraryInfo::licensee());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibraryInfo_licensedProducts() {
  return new QString(QLibraryInfo::licensedProducts());
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLibraryInfo_buildDate() {
  return new QDate(QLibraryInfo::buildDate());
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QLibraryInfo_build() {
  return QLibraryInfo::build();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLibraryInfo_isDebugBuild() {
  return QLibraryInfo::isDebugBuild();
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QLibraryInfo_version() {
  return new QVersionNumber(QLibraryInfo::version());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLibraryInfo_location(QLibraryInfo::LibraryLocation arg1) {
  return new QString(QLibraryInfo::location(arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QLibraryInfo_platformPluginArguments(QString const * platformName) {
  return new QStringList(QLibraryInfo::platformPluginArguments(*platformName));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_QPoint() {
  return new QPoint();
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_QPoint1(int xpos, int ypos) {
  return new QPoint(xpos, ypos);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPoint_isNull(QPoint const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPoint_x(QPoint const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPoint_y(QPoint const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPoint_setX(QPoint * this_ptr, int x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPoint_setY(QPoint * this_ptr, int y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPoint_manhattanLength(QPoint const * this_ptr) {
  return this_ptr->manhattanLength();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QPoint_rx(QPoint * this_ptr) {
  return &this_ptr->rx();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QPoint_ry(QPoint * this_ptr) {
  return &this_ptr->ry();
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__(QPoint * this_ptr, QPoint const * p) {
  return &this_ptr->operator+=(*p);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__1(QPoint * this_ptr, QPoint const * p) {
  return &this_ptr->operator-=(*p);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__2(QPoint * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__3(QPoint * this_ptr, double factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__4(QPoint * this_ptr, int factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator__5(QPoint * this_ptr, double divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPoint_dotProduct(QPoint const * p1, QPoint const * p2) {
  return QPoint::dotProduct(*p1, *p2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__136(QDataStream * arg1, QPoint const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__137(QDataStream * arg1, QPoint * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__138(QPoint const * p1, QPoint const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_70(QPoint const * p1, QPoint const * p2) {
  return new QPoint(operator+(*p1, *p2));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_71(QPoint const * p1, QPoint const * p2) {
  return new QPoint(operator-(*p1, *p2));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_72(QPoint const * p, float factor) {
  return new QPoint(operator*(*p, factor));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_73(QPoint const * p, double factor) {
  return new QPoint(operator*(*p, factor));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_74(QPoint const * p, int factor) {
  return new QPoint(operator*(*p, factor));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_75(float factor, QPoint const * p) {
  return new QPoint(operator*(factor, *p));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_76(double factor, QPoint const * p) {
  return new QPoint(operator*(factor, *p));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_77(int factor, QPoint const * p) {
  return new QPoint(operator*(factor, *p));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_78(QPoint const * p) {
  return new QPoint(operator+(*p));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_79(QPoint const * p) {
  return new QPoint(operator-(*p));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_operator_80(QPoint const * p, double c) {
  return new QPoint(operator/(*p, c));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__140(QDebug const * arg1, QPoint const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_QPointF() {
  return new QPointF();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_QPointF1(QPoint const * p) {
  return new QPointF(*p);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_QPointF2(double xpos, double ypos) {
  return new QPointF(xpos, ypos);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QPointF_manhattanLength(QPointF const * this_ptr) {
  return this_ptr->manhattanLength();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPointF_isNull(QPointF const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QPointF_x(QPointF const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QPointF_y(QPointF const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointF_setX(QPointF * this_ptr, double x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointF_setY(QPointF * this_ptr, double y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT double * ctr_qt_core_ffi_QPointF_rx(QPointF * this_ptr) {
  return &this_ptr->rx();
}


RITUAL_EXPORT double * ctr_qt_core_ffi_QPointF_ry(QPointF * this_ptr) {
  return &this_ptr->ry();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_operator__(QPointF * this_ptr, QPointF const * p) {
  return &this_ptr->operator+=(*p);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_operator__1(QPointF * this_ptr, QPointF const * p) {
  return &this_ptr->operator-=(*p);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_operator__2(QPointF * this_ptr, double c) {
  return &this_ptr->operator*=(c);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_operator__3(QPointF * this_ptr, double c) {
  return &this_ptr->operator/=(c);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QPointF_dotProduct(QPointF const * p1, QPointF const * p2) {
  return QPointF::dotProduct(*p1, *p2);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPointF_toPoint(QPointF const * this_ptr) {
  return new QPoint(this_ptr->toPoint());
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__141(QDataStream * arg1, QPointF const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__142(QDataStream * arg1, QPointF * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__143(QPointF const * p1, QPointF const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_81(QPointF const * p1, QPointF const * p2) {
  return new QPointF(operator+(*p1, *p2));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_82(QPointF const * p1, QPointF const * p2) {
  return new QPointF(operator-(*p1, *p2));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_83(QPointF const * p, double c) {
  return new QPointF(operator*(*p, c));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_84(double c, QPointF const * p) {
  return new QPointF(operator*(c, *p));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_85(QPointF const * p) {
  return new QPointF(operator+(*p));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_86(QPointF const * p) {
  return new QPointF(operator-(*p));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_operator_87(QPointF const * p, double divisor) {
  return new QPointF(operator/(*p, divisor));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__145(QDebug const * d, QPointF const * p) {
  return new QDebug(operator<<(*d, *p));
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_QLine() {
  return new QLine();
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_QLine1(QPoint const * pt1, QPoint const * pt2) {
  return new QLine(*pt1, *pt2);
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_QLine2(int x1, int y1, int x2, int y2) {
  return new QLine(x1, y1, x2, y2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLine_isNull(QLine const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QLine_p1(QLine const * this_ptr) {
  return new QPoint(this_ptr->p1());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QLine_p2(QLine const * this_ptr) {
  return new QPoint(this_ptr->p2());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_x1(QLine const * this_ptr) {
  return this_ptr->x1();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_y1(QLine const * this_ptr) {
  return this_ptr->y1();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_x2(QLine const * this_ptr) {
  return this_ptr->x2();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_y2(QLine const * this_ptr) {
  return this_ptr->y2();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_dx(QLine const * this_ptr) {
  return this_ptr->dx();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLine_dy(QLine const * this_ptr) {
  return this_ptr->dy();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_translate(QLine * this_ptr, QPoint const * p) {
  this_ptr->translate(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_translate1(QLine * this_ptr, int dx, int dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_translated(QLine const * this_ptr, QPoint const * p) {
  return new QLine(this_ptr->translated(*p));
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_translated1(QLine const * this_ptr, int dx, int dy) {
  return new QLine(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QLine_center(QLine const * this_ptr) {
  return new QPoint(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_setP1(QLine * this_ptr, QPoint const * p1) {
  this_ptr->setP1(*p1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_setP2(QLine * this_ptr, QPoint const * p2) {
  this_ptr->setP2(*p2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_setPoints(QLine * this_ptr, QPoint const * p1, QPoint const * p2) {
  this_ptr->setPoints(*p1, *p2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_setLine(QLine * this_ptr, int x1, int y1, int x2, int y2) {
  this_ptr->setLine(x1, y1, x2, y2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLine_operator__(QLine const * this_ptr, QLine const * d) {
  return this_ptr->operator==(*d);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__146(QDebug const * d, QLine const * p) {
  return new QDebug(operator<<(*d, *p));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__147(QDataStream * arg1, QLine const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__148(QDataStream * arg1, QLine * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_QLineF() {
  return new QLineF();
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_QLineF1(QPointF const * pt1, QPointF const * pt2) {
  return new QLineF(*pt1, *pt2);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_QLineF2(double x1, double y1, double x2, double y2) {
  return new QLineF(x1, y1, x2, y2);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_QLineF3(QLine const * line) {
  return new QLineF(*line);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_fromPolar(double length, double angle) {
  return new QLineF(QLineF::fromPolar(length, angle));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLineF_isNull(QLineF const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QLineF_p1(QLineF const * this_ptr) {
  return new QPointF(this_ptr->p1());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QLineF_p2(QLineF const * this_ptr) {
  return new QPointF(this_ptr->p2());
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_x1(QLineF const * this_ptr) {
  return this_ptr->x1();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_y1(QLineF const * this_ptr) {
  return this_ptr->y1();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_x2(QLineF const * this_ptr) {
  return this_ptr->x2();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_y2(QLineF const * this_ptr) {
  return this_ptr->y2();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_dx(QLineF const * this_ptr) {
  return this_ptr->dx();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_dy(QLineF const * this_ptr) {
  return this_ptr->dy();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_length(QLineF const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setLength(QLineF * this_ptr, double len) {
  this_ptr->setLength(len);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_angle(QLineF const * this_ptr) {
  return this_ptr->angle();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setAngle(QLineF * this_ptr, double angle) {
  this_ptr->setAngle(angle);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_angleTo(QLineF const * this_ptr, QLineF const * l) {
  return this_ptr->angleTo(*l);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_unitVector(QLineF const * this_ptr) {
  return new QLineF(this_ptr->unitVector());
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_normalVector(QLineF const * this_ptr) {
  return new QLineF(this_ptr->normalVector());
}


RITUAL_EXPORT QLineF::IntersectType ctr_qt_core_ffi_QLineF_intersect(QLineF const * this_ptr, QLineF const * l, QPointF * intersectionPoint) {
  return this_ptr->intersect(*l, intersectionPoint);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLineF_angle1(QLineF const * this_ptr, QLineF const * l) {
  return this_ptr->angle(*l);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QLineF_pointAt(QLineF const * this_ptr, double t) {
  return new QPointF(this_ptr->pointAt(t));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_translate(QLineF * this_ptr, QPointF const * p) {
  this_ptr->translate(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_translate1(QLineF * this_ptr, double dx, double dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_translated(QLineF const * this_ptr, QPointF const * p) {
  return new QLineF(this_ptr->translated(*p));
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_translated1(QLineF const * this_ptr, double dx, double dy) {
  return new QLineF(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QLineF_center(QLineF const * this_ptr) {
  return new QPointF(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setP1(QLineF * this_ptr, QPointF const * p1) {
  this_ptr->setP1(*p1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setP2(QLineF * this_ptr, QPointF const * p2) {
  this_ptr->setP2(*p2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setPoints(QLineF * this_ptr, QPointF const * p1, QPointF const * p2) {
  this_ptr->setPoints(*p1, *p2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_setLine(QLineF * this_ptr, double x1, double y1, double x2, double y2) {
  this_ptr->setLine(x1, y1, x2, y2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLineF_operator__(QLineF const * this_ptr, QLineF const * d) {
  return this_ptr->operator==(*d);
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLineF_toLine(QLineF const * this_ptr) {
  return new QLine(this_ptr->toLine());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__149(QDebug const * d, QLineF const * p) {
  return new QDebug(operator<<(*d, *p));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__150(QDataStream * arg1, QLineF const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__151(QDataStream * arg1, QLineF * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QLockFile * ctr_qt_core_ffi_QLockFile_QLockFile(QString const * fileName) {
  return new QLockFile(*fileName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLockFile_dQLockFile(QLockFile * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_lock(QLockFile * this_ptr) {
  return this_ptr->lock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_tryLock(QLockFile * this_ptr, int timeout) {
  return this_ptr->tryLock(timeout);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLockFile_unlock(QLockFile * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLockFile_setStaleLockTime(QLockFile * this_ptr, int arg1) {
  this_ptr->setStaleLockTime(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLockFile_staleLockTime(QLockFile const * this_ptr) {
  return this_ptr->staleLockTime();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_isLocked(QLockFile const * this_ptr) {
  return this_ptr->isLocked();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_getLockInfo(QLockFile const * this_ptr, qint64 * pid, QString * hostname, QString * appname) {
  return this_ptr->getLockInfo(pid, hostname, appname);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_removeStaleLockFile(QLockFile * this_ptr) {
  return this_ptr->removeStaleLockFile();
}


RITUAL_EXPORT QLockFile::LockError ctr_qt_core_ffi_QLockFile_error(QLockFile const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QLoggingCategory * ctr_qt_core_ffi_QLoggingCategory_QLoggingCategory(char const * category) {
  return new QLoggingCategory(category);
}


RITUAL_EXPORT QLoggingCategory * ctr_qt_core_ffi_QLoggingCategory_QLoggingCategory1(char const * category, QtMsgType severityLevel) {
  return new QLoggingCategory(category, severityLevel);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLoggingCategory_dQLoggingCategory(QLoggingCategory * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLoggingCategory_isEnabled(QLoggingCategory const * this_ptr, QtMsgType type) {
  return this_ptr->isEnabled(type);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLoggingCategory_setEnabled(QLoggingCategory * this_ptr, QtMsgType type, bool enable) {
  this_ptr->setEnabled(type, enable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLoggingCategory_isDebugEnabled(QLoggingCategory const * this_ptr) {
  return this_ptr->isDebugEnabled();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLoggingCategory_isInfoEnabled(QLoggingCategory const * this_ptr) {
  return this_ptr->isInfoEnabled();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLoggingCategory_isWarningEnabled(QLoggingCategory const * this_ptr) {
  return this_ptr->isWarningEnabled();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLoggingCategory_isCriticalEnabled(QLoggingCategory const * this_ptr) {
  return this_ptr->isCriticalEnabled();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QLoggingCategory_categoryName(QLoggingCategory const * this_ptr) {
  return this_ptr->categoryName();
}


RITUAL_EXPORT QLoggingCategory * ctr_qt_core_ffi_QLoggingCategory_operator__(QLoggingCategory * this_ptr) {
  return &this_ptr->operator()();
}


RITUAL_EXPORT QLoggingCategory const * ctr_qt_core_ffi_QLoggingCategory_operator__1(QLoggingCategory const * this_ptr) {
  return &this_ptr->operator()();
}


RITUAL_EXPORT QLoggingCategory * ctr_qt_core_ffi_QLoggingCategory_defaultCategory() {
  return QLoggingCategory::defaultCategory();
}


RITUAL_EXPORT void (*ctr_qt_core_ffi_QLoggingCategory_installFilter(void (*arg1)(QLoggingCategory *)))(QLoggingCategory *) {
  return QLoggingCategory::installFilter(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLoggingCategory_setFilterRules(QString const * rules) {
  QLoggingCategory::setFilterRules(*rules);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_QMargins() {
  return new QMargins();
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_QMargins1(int left, int top, int right, int bottom) {
  return new QMargins(left, top, right, bottom);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMargins_isNull(QMargins const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMargins_left(QMargins const * this_ptr) {
  return this_ptr->left();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMargins_top(QMargins const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMargins_right(QMargins const * this_ptr) {
  return this_ptr->right();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMargins_bottom(QMargins const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMargins_setLeft(QMargins * this_ptr, int left) {
  this_ptr->setLeft(left);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMargins_setTop(QMargins * this_ptr, int top) {
  this_ptr->setTop(top);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMargins_setRight(QMargins * this_ptr, int right) {
  this_ptr->setRight(right);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMargins_setBottom(QMargins * this_ptr, int bottom) {
  this_ptr->setBottom(bottom);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__(QMargins * this_ptr, QMargins const * margins) {
  return &this_ptr->operator+=(*margins);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__1(QMargins * this_ptr, QMargins const * margins) {
  return &this_ptr->operator-=(*margins);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__2(QMargins * this_ptr, int arg1) {
  return &this_ptr->operator+=(arg1);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__3(QMargins * this_ptr, int arg1) {
  return &this_ptr->operator-=(arg1);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__4(QMargins * this_ptr, int arg1) {
  return &this_ptr->operator*=(arg1);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__5(QMargins * this_ptr, int arg1) {
  return &this_ptr->operator/=(arg1);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__6(QMargins * this_ptr, double arg1) {
  return &this_ptr->operator*=(arg1);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator__7(QMargins * this_ptr, double arg1) {
  return &this_ptr->operator/=(arg1);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__152(QDataStream * arg1, QMargins const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__153(QDataStream * arg1, QMargins * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__154(QMargins const * m1, QMargins const * m2) {
  return operator==(*m1, *m2);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_88(QMargins const * m1, QMargins const * m2) {
  return new QMargins(operator+(*m1, *m2));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_89(QMargins const * m1, QMargins const * m2) {
  return new QMargins(operator-(*m1, *m2));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_90(QMargins const * lhs, int rhs) {
  return new QMargins(operator+(*lhs, rhs));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_91(int lhs, QMargins const * rhs) {
  return new QMargins(operator+(lhs, *rhs));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_92(QMargins const * lhs, int rhs) {
  return new QMargins(operator-(*lhs, rhs));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_93(QMargins const * margins, int factor) {
  return new QMargins(operator*(*margins, factor));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_94(int factor, QMargins const * margins) {
  return new QMargins(operator*(factor, *margins));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_95(QMargins const * margins, double factor) {
  return new QMargins(operator*(*margins, factor));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_96(double factor, QMargins const * margins) {
  return new QMargins(operator*(factor, *margins));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_97(QMargins const * margins, int divisor) {
  return new QMargins(operator/(*margins, divisor));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_98(QMargins const * margins, double divisor) {
  return new QMargins(operator/(*margins, divisor));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_99(QMargins const * margins) {
  return new QMargins(operator+(*margins));
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_operator_100(QMargins const * margins) {
  return new QMargins(operator-(*margins));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__156(QDebug const * arg1, QMargins const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_QMarginsF() {
  return new QMarginsF();
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_QMarginsF1(double left, double top, double right, double bottom) {
  return new QMarginsF(left, top, right, bottom);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_QMarginsF2(QMargins const * margins) {
  return new QMarginsF(*margins);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMarginsF_isNull(QMarginsF const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QMarginsF_left(QMarginsF const * this_ptr) {
  return this_ptr->left();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QMarginsF_top(QMarginsF const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QMarginsF_right(QMarginsF const * this_ptr) {
  return this_ptr->right();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QMarginsF_bottom(QMarginsF const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMarginsF_setLeft(QMarginsF * this_ptr, double left) {
  this_ptr->setLeft(left);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMarginsF_setTop(QMarginsF * this_ptr, double top) {
  this_ptr->setTop(top);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMarginsF_setRight(QMarginsF * this_ptr, double right) {
  this_ptr->setRight(right);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMarginsF_setBottom(QMarginsF * this_ptr, double bottom) {
  this_ptr->setBottom(bottom);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__(QMarginsF * this_ptr, QMarginsF const * margins) {
  return &this_ptr->operator+=(*margins);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__1(QMarginsF * this_ptr, QMarginsF const * margins) {
  return &this_ptr->operator-=(*margins);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__2(QMarginsF * this_ptr, double addend) {
  return &this_ptr->operator+=(addend);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__3(QMarginsF * this_ptr, double subtrahend) {
  return &this_ptr->operator-=(subtrahend);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__4(QMarginsF * this_ptr, double factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator__5(QMarginsF * this_ptr, double divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMarginsF_toMargins(QMarginsF const * this_ptr) {
  return new QMargins(this_ptr->toMargins());
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__157(QDataStream * arg1, QMarginsF const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__158(QDataStream * arg1, QMarginsF * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__159(QMarginsF const * lhs, QMarginsF const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_101(QMarginsF const * lhs, QMarginsF const * rhs) {
  return new QMarginsF(operator+(*lhs, *rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_102(QMarginsF const * lhs, QMarginsF const * rhs) {
  return new QMarginsF(operator-(*lhs, *rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_103(QMarginsF const * lhs, double rhs) {
  return new QMarginsF(operator+(*lhs, rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_104(double lhs, QMarginsF const * rhs) {
  return new QMarginsF(operator+(lhs, *rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_105(QMarginsF const * lhs, double rhs) {
  return new QMarginsF(operator-(*lhs, rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_106(QMarginsF const * lhs, double rhs) {
  return new QMarginsF(operator*(*lhs, rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_107(double lhs, QMarginsF const * rhs) {
  return new QMarginsF(operator*(lhs, *rhs));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_108(QMarginsF const * lhs, double divisor) {
  return new QMarginsF(operator/(*lhs, divisor));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_109(QMarginsF const * margins) {
  return new QMarginsF(operator+(*margins));
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_operator_110(QMarginsF const * margins) {
  return new QMarginsF(operator-(*margins));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__161(QDebug const * arg1, QMarginsF const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT int ctr_qt_core_ffi_qCeil(double v) {
  return qCeil(v);
}


RITUAL_EXPORT int ctr_qt_core_ffi_qFloor(double v) {
  return qFloor(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qFabs(double v) {
  return qFabs(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qSin(double v) {
  return qSin(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qCos(double v) {
  return qCos(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qTan(double v) {
  return qTan(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qAcos(double v) {
  return qAcos(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qAsin(double v) {
  return qAsin(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qAtan(double v) {
  return qAtan(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qAtan2(double y, double x) {
  return qAtan2(y, x);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qSqrt(double v) {
  return qSqrt(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qLn(double v) {
  return qLn(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qExp(double v) {
  return qExp(v);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qPow(double x, double y) {
  return qPow(x, y);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qFastSin(double x) {
  return qFastSin(x);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qFastCos(double x) {
  return qFastCos(x);
}


RITUAL_EXPORT float ctr_qt_core_ffi_qDegreesToRadians(float degrees) {
  return qDegreesToRadians(degrees);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qDegreesToRadians1(double degrees) {
  return qDegreesToRadians(degrees);
}


RITUAL_EXPORT float ctr_qt_core_ffi_qRadiansToDegrees(float radians) {
  return qRadiansToDegrees(radians);
}


RITUAL_EXPORT double ctr_qt_core_ffi_qRadiansToDegrees1(double radians) {
  return qRadiansToDegrees(radians);
}


RITUAL_EXPORT quint32 ctr_qt_core_ffi_qNextPowerOfTwo(quint32 v) {
  return qNextPowerOfTwo(v);
}


RITUAL_EXPORT quint64 ctr_qt_core_ffi_qNextPowerOfTwo1(quint64 v) {
  return qNextPowerOfTwo(v);
}


RITUAL_EXPORT quint32 ctr_qt_core_ffi_qNextPowerOfTwo2(qint32 v) {
  return qNextPowerOfTwo(v);
}


RITUAL_EXPORT quint64 ctr_qt_core_ffi_qNextPowerOfTwo3(qint64 v) {
  return qNextPowerOfTwo(v);
}


RITUAL_EXPORT QMessageAuthenticationCode * ctr_qt_core_ffi_QMessageAuthenticationCode_QMessageAuthenticationCode(QCryptographicHash::Algorithm method, QByteArray const * key) {
  return new QMessageAuthenticationCode(method, *key);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageAuthenticationCode_dQMessageAuthenticationCode(QMessageAuthenticationCode * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageAuthenticationCode_reset(QMessageAuthenticationCode * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageAuthenticationCode_setKey(QMessageAuthenticationCode * this_ptr, QByteArray const * key) {
  this_ptr->setKey(*key);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageAuthenticationCode_addData(QMessageAuthenticationCode * this_ptr, char const * data, int length) {
  this_ptr->addData(data, length);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageAuthenticationCode_addData1(QMessageAuthenticationCode * this_ptr, QByteArray const * data) {
  this_ptr->addData(*data);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMessageAuthenticationCode_addData2(QMessageAuthenticationCode * this_ptr, QIODevice * device) {
  return this_ptr->addData(device);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMessageAuthenticationCode_result(QMessageAuthenticationCode const * this_ptr) {
  return new QByteArray(this_ptr->result());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMessageAuthenticationCode_hash(QByteArray const * message, QByteArray const * key, QCryptographicHash::Algorithm method) {
  return new QByteArray(QMessageAuthenticationCode::hash(*message, *key, method));
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaMethod_QMetaMethod() {
  return new QMetaMethod();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMetaMethod_methodSignature(QMetaMethod const * this_ptr) {
  return new QByteArray(this_ptr->methodSignature());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMetaMethod_name(QMetaMethod const * this_ptr) {
  return new QByteArray(this_ptr->name());
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaMethod_typeName(QMetaMethod const * this_ptr) {
  return this_ptr->typeName();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_returnType(QMetaMethod const * this_ptr) {
  return this_ptr->returnType();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_parameterCount(QMetaMethod const * this_ptr) {
  return this_ptr->parameterCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_parameterType(QMetaMethod const * this_ptr, int index) {
  return this_ptr->parameterType(index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaMethod_getParameterTypes(QMetaMethod const * this_ptr, int * types) {
  this_ptr->getParameterTypes(types);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QMetaMethod_parameterTypes(QMetaMethod const * this_ptr) {
  return new QList< QByteArray >(this_ptr->parameterTypes());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QMetaMethod_parameterNames(QMetaMethod const * this_ptr) {
  return new QList< QByteArray >(this_ptr->parameterNames());
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaMethod_tag(QMetaMethod const * this_ptr) {
  return this_ptr->tag();
}


RITUAL_EXPORT QMetaMethod::Access ctr_qt_core_ffi_QMetaMethod_access(QMetaMethod const * this_ptr) {
  return this_ptr->access();
}


RITUAL_EXPORT QMetaMethod::MethodType ctr_qt_core_ffi_QMetaMethod_methodType(QMetaMethod const * this_ptr) {
  return this_ptr->methodType();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_attributes(QMetaMethod const * this_ptr) {
  return this_ptr->attributes();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_methodIndex(QMetaMethod const * this_ptr) {
  return this_ptr->methodIndex();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaMethod_revision(QMetaMethod const * this_ptr) {
  return this_ptr->revision();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaMethod_enclosingMetaObject(QMetaMethod const * this_ptr) {
  return this_ptr->enclosingMetaObject();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaMethod_isValid(QMetaMethod const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__162(QMetaMethod const * m1, QMetaMethod const * m2) {
  return operator==(*m1, *m2);
}


RITUAL_EXPORT QMetaEnum * ctr_qt_core_ffi_QMetaEnum_QMetaEnum() {
  return new QMetaEnum();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaEnum_name(QMetaEnum const * this_ptr) {
  return this_ptr->name();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaEnum_isFlag(QMetaEnum const * this_ptr) {
  return this_ptr->isFlag();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaEnum_isScoped(QMetaEnum const * this_ptr) {
  return this_ptr->isScoped();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_keyCount(QMetaEnum const * this_ptr) {
  return this_ptr->keyCount();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaEnum_key(QMetaEnum const * this_ptr, int index) {
  return this_ptr->key(index);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_value(QMetaEnum const * this_ptr, int index) {
  return this_ptr->value(index);
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaEnum_scope(QMetaEnum const * this_ptr) {
  return this_ptr->scope();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_keyToValue(QMetaEnum const * this_ptr, char const * key, bool * ok) {
  return this_ptr->keyToValue(key, ok);
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaEnum_valueToKey(QMetaEnum const * this_ptr, int value) {
  return this_ptr->valueToKey(value);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_keysToValue(QMetaEnum const * this_ptr, char const * keys, bool * ok) {
  return this_ptr->keysToValue(keys, ok);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMetaEnum_valueToKeys(QMetaEnum const * this_ptr, int value) {
  return new QByteArray(this_ptr->valueToKeys(value));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaEnum_enclosingMetaObject(QMetaEnum const * this_ptr) {
  return this_ptr->enclosingMetaObject();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaEnum_isValid(QMetaEnum const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QMetaProperty * ctr_qt_core_ffi_QMetaProperty_QMetaProperty() {
  return new QMetaProperty();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaProperty_name(QMetaProperty const * this_ptr) {
  return this_ptr->name();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaProperty_typeName(QMetaProperty const * this_ptr) {
  return this_ptr->typeName();
}


RITUAL_EXPORT QVariant::Type ctr_qt_core_ffi_QMetaProperty_type(QMetaProperty const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaProperty_userType(QMetaProperty const * this_ptr) {
  return this_ptr->userType();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaProperty_propertyIndex(QMetaProperty const * this_ptr) {
  return this_ptr->propertyIndex();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isReadable(QMetaProperty const * this_ptr) {
  return this_ptr->isReadable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isWritable(QMetaProperty const * this_ptr) {
  return this_ptr->isWritable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isResettable(QMetaProperty const * this_ptr) {
  return this_ptr->isResettable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isDesignable(QMetaProperty const * this_ptr, QObject const * obj) {
  return this_ptr->isDesignable(obj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isScriptable(QMetaProperty const * this_ptr, QObject const * obj) {
  return this_ptr->isScriptable(obj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isStored(QMetaProperty const * this_ptr, QObject const * obj) {
  return this_ptr->isStored(obj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isEditable(QMetaProperty const * this_ptr, QObject const * obj) {
  return this_ptr->isEditable(obj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isUser(QMetaProperty const * this_ptr, QObject const * obj) {
  return this_ptr->isUser(obj);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isConstant(QMetaProperty const * this_ptr) {
  return this_ptr->isConstant();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isFinal(QMetaProperty const * this_ptr) {
  return this_ptr->isFinal();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isFlagType(QMetaProperty const * this_ptr) {
  return this_ptr->isFlagType();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isEnumType(QMetaProperty const * this_ptr) {
  return this_ptr->isEnumType();
}


RITUAL_EXPORT QMetaEnum * ctr_qt_core_ffi_QMetaProperty_enumerator(QMetaProperty const * this_ptr) {
  return new QMetaEnum(this_ptr->enumerator());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_hasNotifySignal(QMetaProperty const * this_ptr) {
  return this_ptr->hasNotifySignal();
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaProperty_notifySignal(QMetaProperty const * this_ptr) {
  return new QMetaMethod(this_ptr->notifySignal());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaProperty_notifySignalIndex(QMetaProperty const * this_ptr) {
  return this_ptr->notifySignalIndex();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaProperty_revision(QMetaProperty const * this_ptr) {
  return this_ptr->revision();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMetaProperty_read(QMetaProperty const * this_ptr, QObject const * obj) {
  return new QVariant(this_ptr->read(obj));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_write(QMetaProperty const * this_ptr, QObject * obj, QVariant const * value) {
  return this_ptr->write(obj, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_reset(QMetaProperty const * this_ptr, QObject * obj) {
  return this_ptr->reset(obj);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMetaProperty_readOnGadget(QMetaProperty const * this_ptr, void const * gadget) {
  return new QVariant(this_ptr->readOnGadget(gadget));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_writeOnGadget(QMetaProperty const * this_ptr, void * gadget, QVariant const * value) {
  return this_ptr->writeOnGadget(gadget, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_resetOnGadget(QMetaProperty const * this_ptr, void * gadget) {
  return this_ptr->resetOnGadget(gadget);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_hasStdCppSet(QMetaProperty const * this_ptr) {
  return this_ptr->hasStdCppSet();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isValid(QMetaProperty const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaProperty_enclosingMetaObject(QMetaProperty const * this_ptr) {
  return this_ptr->enclosingMetaObject();
}


RITUAL_EXPORT QMetaClassInfo * ctr_qt_core_ffi_QMetaClassInfo_QMetaClassInfo() {
  return new QMetaClassInfo();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaClassInfo_name(QMetaClassInfo const * this_ptr) {
  return this_ptr->name();
}


RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaClassInfo_value(QMetaClassInfo const * this_ptr) {
  return this_ptr->value();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaClassInfo_enclosingMetaObject(QMetaClassInfo const * this_ptr) {
  return this_ptr->enclosingMetaObject();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMimeData_metaObject(QMimeData const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMimeData_qt_metacast(QMimeData * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMimeData_qt_metacall(QMimeData * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeData_tr(char const * s, char const * c, int n) {
  return new QString(QMimeData::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeData_trUtf8(char const * s, char const * c, int n) {
  return new QString(QMimeData::trUtf8(s, c, n));
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_QMimeData_QMimeData() {
  return new QMimeData();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_dQMimeData(QMimeData * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QMimeData_urls(QMimeData const * this_ptr) {
  return new QList< QUrl >(this_ptr->urls());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setUrls(QMimeData * this_ptr, QList< QUrl > const * urls) {
  this_ptr->setUrls(*urls);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasUrls(QMimeData const * this_ptr) {
  return this_ptr->hasUrls();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeData_text(QMimeData const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setText(QMimeData * this_ptr, QString const * text) {
  this_ptr->setText(*text);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasText(QMimeData const * this_ptr) {
  return this_ptr->hasText();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeData_html(QMimeData const * this_ptr) {
  return new QString(this_ptr->html());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setHtml(QMimeData * this_ptr, QString const * html) {
  this_ptr->setHtml(*html);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasHtml(QMimeData const * this_ptr) {
  return this_ptr->hasHtml();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMimeData_imageData(QMimeData const * this_ptr) {
  return new QVariant(this_ptr->imageData());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setImageData(QMimeData * this_ptr, QVariant const * image) {
  this_ptr->setImageData(*image);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasImage(QMimeData const * this_ptr) {
  return this_ptr->hasImage();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMimeData_colorData(QMimeData const * this_ptr) {
  return new QVariant(this_ptr->colorData());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setColorData(QMimeData * this_ptr, QVariant const * color) {
  this_ptr->setColorData(*color);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasColor(QMimeData const * this_ptr) {
  return this_ptr->hasColor();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QMimeData_data(QMimeData const * this_ptr, QString const * mimetype) {
  return new QByteArray(this_ptr->data(*mimetype));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_setData(QMimeData * this_ptr, QString const * mimetype, QByteArray const * data) {
  this_ptr->setData(*mimetype, *data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_removeFormat(QMimeData * this_ptr, QString const * mimetype) {
  this_ptr->removeFormat(*mimetype);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeData_hasFormat(QMimeData const * this_ptr, QString const * mimetype) {
  return this_ptr->hasFormat(*mimetype);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeData_formats(QMimeData const * this_ptr) {
  return new QStringList(this_ptr->formats());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeData_clear(QMimeData * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash29(QMimeType const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeType_QMimeType() {
  return new QMimeType();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeType_QMimeType1(QMimeType const * other) {
  return new QMimeType(*other);
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeType_operator_(QMimeType * this_ptr, QMimeType const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeType_swap(QMimeType * this_ptr, QMimeType * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeType_dQMimeType(QMimeType * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeType_operator__(QMimeType const * this_ptr, QMimeType const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeType_isValid(QMimeType const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeType_isDefault(QMimeType const * this_ptr) {
  return this_ptr->isDefault();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_name(QMimeType const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_comment(QMimeType const * this_ptr) {
  return new QString(this_ptr->comment());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_genericIconName(QMimeType const * this_ptr) {
  return new QString(this_ptr->genericIconName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_iconName(QMimeType const * this_ptr) {
  return new QString(this_ptr->iconName());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeType_globPatterns(QMimeType const * this_ptr) {
  return new QStringList(this_ptr->globPatterns());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeType_parentMimeTypes(QMimeType const * this_ptr) {
  return new QStringList(this_ptr->parentMimeTypes());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeType_allAncestors(QMimeType const * this_ptr) {
  return new QStringList(this_ptr->allAncestors());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeType_aliases(QMimeType const * this_ptr) {
  return new QStringList(this_ptr->aliases());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QMimeType_suffixes(QMimeType const * this_ptr) {
  return new QStringList(this_ptr->suffixes());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_preferredSuffix(QMimeType const * this_ptr) {
  return new QString(this_ptr->preferredSuffix());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMimeType_inherits(QMimeType const * this_ptr, QString const * mimeTypeName) {
  return this_ptr->inherits(*mimeTypeName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeType_filterString(QMimeType const * this_ptr) {
  return new QString(this_ptr->filterString());
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__164(QDebug const * debug, QMimeType const * mime) {
  return new QDebug(operator<<(*debug, *mime));
}


RITUAL_EXPORT QMimeDatabase * ctr_qt_core_ffi_QMimeDatabase_QMimeDatabase() {
  return new QMimeDatabase();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMimeDatabase_dQMimeDatabase(QMimeDatabase * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForName(QMimeDatabase const * this_ptr, QString const * nameOrAlias) {
  return new QMimeType(this_ptr->mimeTypeForName(*nameOrAlias));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFile(QMimeDatabase const * this_ptr, QString const * fileName, QMimeDatabase::MatchMode mode) {
  return new QMimeType(this_ptr->mimeTypeForFile(*fileName, mode));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFile1(QMimeDatabase const * this_ptr, QFileInfo const * fileInfo, QMimeDatabase::MatchMode mode) {
  return new QMimeType(this_ptr->mimeTypeForFile(*fileInfo, mode));
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QMimeDatabase_mimeTypesForFileName(QMimeDatabase const * this_ptr, QString const * fileName) {
  return new QList< QMimeType >(this_ptr->mimeTypesForFileName(*fileName));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForData(QMimeDatabase const * this_ptr, QByteArray const * data) {
  return new QMimeType(this_ptr->mimeTypeForData(*data));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForData1(QMimeDatabase const * this_ptr, QIODevice * device) {
  return new QMimeType(this_ptr->mimeTypeForData(device));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForUrl(QMimeDatabase const * this_ptr, QUrl const * url) {
  return new QMimeType(this_ptr->mimeTypeForUrl(*url));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFileNameAndData(QMimeDatabase const * this_ptr, QString const * fileName, QIODevice * device) {
  return new QMimeType(this_ptr->mimeTypeForFileNameAndData(*fileName, device));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFileNameAndData1(QMimeDatabase const * this_ptr, QString const * fileName, QByteArray const * data) {
  return new QMimeType(this_ptr->mimeTypeForFileNameAndData(*fileName, *data));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMimeDatabase_suffixForFileName(QMimeDatabase const * this_ptr, QString const * fileName) {
  return new QString(this_ptr->suffixForFileName(*fileName));
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QMimeDatabase_allMimeTypes(QMimeDatabase const * this_ptr) {
  return new QList< QMimeType >(this_ptr->allMimeTypes());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QObjectCleanupHandler_metaObject(QObjectCleanupHandler const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QObjectCleanupHandler_qt_metacast(QObjectCleanupHandler * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QObjectCleanupHandler_qt_metacall(QObjectCleanupHandler * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QObjectCleanupHandler_tr(char const * s, char const * c, int n) {
  return new QString(QObjectCleanupHandler::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QObjectCleanupHandler_trUtf8(char const * s, char const * c, int n) {
  return new QString(QObjectCleanupHandler::trUtf8(s, c, n));
}


RITUAL_EXPORT QObjectCleanupHandler * ctr_qt_core_ffi_QObjectCleanupHandler_QObjectCleanupHandler() {
  return new QObjectCleanupHandler();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObjectCleanupHandler_dQObjectCleanupHandler(QObjectCleanupHandler * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObjectCleanupHandler_add(QObjectCleanupHandler * this_ptr, QObject * object) {
  return this_ptr->add(object);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObjectCleanupHandler_remove(QObjectCleanupHandler * this_ptr, QObject * object) {
  this_ptr->remove(object);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObjectCleanupHandler_isEmpty(QObjectCleanupHandler const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QObjectCleanupHandler_clear(QObjectCleanupHandler * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_QOperatingSystemVersion(QOperatingSystemVersion::OSType osType, int vmajor, int vminor, int vmicro) {
  return new QOperatingSystemVersion(osType, vmajor, vminor, vmicro);
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_current() {
  return new QOperatingSystemVersion(QOperatingSystemVersion::current());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QOperatingSystemVersion_majorVersion(QOperatingSystemVersion const * this_ptr) {
  return this_ptr->majorVersion();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QOperatingSystemVersion_minorVersion(QOperatingSystemVersion const * this_ptr) {
  return this_ptr->minorVersion();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QOperatingSystemVersion_microVersion(QOperatingSystemVersion const * this_ptr) {
  return this_ptr->microVersion();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QOperatingSystemVersion_segmentCount(QOperatingSystemVersion const * this_ptr) {
  return this_ptr->segmentCount();
}


RITUAL_EXPORT QOperatingSystemVersion::OSType ctr_qt_core_ffi_QOperatingSystemVersion_type(QOperatingSystemVersion const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QOperatingSystemVersion_name(QOperatingSystemVersion const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QParallelAnimationGroup_metaObject(QParallelAnimationGroup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QParallelAnimationGroup_qt_metacast(QParallelAnimationGroup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QParallelAnimationGroup_qt_metacall(QParallelAnimationGroup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QParallelAnimationGroup_tr(char const * s, char const * c, int n) {
  return new QString(QParallelAnimationGroup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QParallelAnimationGroup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QParallelAnimationGroup::trUtf8(s, c, n));
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_QParallelAnimationGroup_QParallelAnimationGroup(QObject * parent) {
  return new QParallelAnimationGroup(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QParallelAnimationGroup_dQParallelAnimationGroup(QParallelAnimationGroup * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QParallelAnimationGroup_duration(QParallelAnimationGroup const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPauseAnimation_metaObject(QPauseAnimation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QPauseAnimation_qt_metacast(QPauseAnimation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPauseAnimation_qt_metacall(QPauseAnimation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPauseAnimation_tr(char const * s, char const * c, int n) {
  return new QString(QPauseAnimation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPauseAnimation_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPauseAnimation::trUtf8(s, c, n));
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QPauseAnimation_QPauseAnimation(QObject * parent) {
  return new QPauseAnimation(parent);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QPauseAnimation_QPauseAnimation1(int msecs, QObject * parent) {
  return new QPauseAnimation(msecs, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPauseAnimation_dQPauseAnimation(QPauseAnimation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPauseAnimation_duration(QPauseAnimation const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPauseAnimation_setDuration(QPauseAnimation * this_ptr, int msecs) {
  this_ptr->setDuration(msecs);
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QStaticPlugin_metaData(QStaticPlugin const * this_ptr) {
  return new QJsonObject(this_ptr->metaData());
}


RITUAL_EXPORT void ctr_qt_core_ffi_qRegisterStaticPluginFunction(QStaticPlugin const * staticPlugin) {
  qRegisterStaticPluginFunction(*staticPlugin);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPluginLoader_metaObject(QPluginLoader const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QPluginLoader_qt_metacast(QPluginLoader * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPluginLoader_qt_metacall(QPluginLoader * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPluginLoader_tr(char const * s, char const * c, int n) {
  return new QString(QPluginLoader::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPluginLoader_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPluginLoader::trUtf8(s, c, n));
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_QPluginLoader_QPluginLoader(QObject * parent) {
  return new QPluginLoader(parent);
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_QPluginLoader_QPluginLoader1(QString const * fileName, QObject * parent) {
  return new QPluginLoader(*fileName, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPluginLoader_dQPluginLoader(QPluginLoader * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPluginLoader_instance(QPluginLoader * this_ptr) {
  return this_ptr->instance();
}


RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QPluginLoader_metaData(QPluginLoader const * this_ptr) {
  return new QJsonObject(this_ptr->metaData());
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QPluginLoader_staticInstances() {
  return new QList< QObject * >(QPluginLoader::staticInstances());
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QPluginLoader_staticPlugins() {
  return new QVector< QStaticPlugin >(QPluginLoader::staticPlugins());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPluginLoader_load(QPluginLoader * this_ptr) {
  return this_ptr->load();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPluginLoader_unload(QPluginLoader * this_ptr) {
  return this_ptr->unload();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPluginLoader_isLoaded(QPluginLoader const * this_ptr) {
  return this_ptr->isLoaded();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPluginLoader_setFileName(QPluginLoader * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPluginLoader_fileName(QPluginLoader const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPluginLoader_errorString(QPluginLoader const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPluginLoader_setLoadHints(QPluginLoader * this_ptr, int loadHints) {
  this_ptr->setLoadHints(QFlags< QLibrary::LoadHint >(loadHints));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPluginLoader_loadHints(QPluginLoader const * this_ptr) {
  return int(this_ptr->loadHints());
}


RITUAL_EXPORT QProcessEnvironment * ctr_qt_core_ffi_QProcessEnvironment_QProcessEnvironment() {
  return new QProcessEnvironment();
}


RITUAL_EXPORT QProcessEnvironment * ctr_qt_core_ffi_QProcessEnvironment_QProcessEnvironment1(QProcessEnvironment const * other) {
  return new QProcessEnvironment(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_dQProcessEnvironment(QProcessEnvironment * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QProcessEnvironment * ctr_qt_core_ffi_QProcessEnvironment_operator_1(QProcessEnvironment * this_ptr, QProcessEnvironment const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_swap(QProcessEnvironment * this_ptr, QProcessEnvironment * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcessEnvironment_operator__(QProcessEnvironment const * this_ptr, QProcessEnvironment const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcessEnvironment_isEmpty(QProcessEnvironment const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_clear(QProcessEnvironment * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcessEnvironment_contains(QProcessEnvironment const * this_ptr, QString const * name) {
  return this_ptr->contains(*name);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_insert(QProcessEnvironment * this_ptr, QString const * name, QString const * value) {
  this_ptr->insert(*name, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_remove(QProcessEnvironment * this_ptr, QString const * name) {
  this_ptr->remove(*name);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcessEnvironment_value(QProcessEnvironment const * this_ptr, QString const * name, QString const * defaultValue) {
  return new QString(this_ptr->value(*name, *defaultValue));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QProcessEnvironment_toStringList(QProcessEnvironment const * this_ptr) {
  return new QStringList(this_ptr->toStringList());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QProcessEnvironment_keys(QProcessEnvironment const * this_ptr) {
  return new QStringList(this_ptr->keys());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcessEnvironment_insert1(QProcessEnvironment * this_ptr, QProcessEnvironment const * e) {
  this_ptr->insert(*e);
}


RITUAL_EXPORT QProcessEnvironment * ctr_qt_core_ffi_QProcessEnvironment_systemEnvironment() {
  return new QProcessEnvironment(QProcessEnvironment::systemEnvironment());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QProcess_metaObject(QProcess const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QProcess_qt_metacast(QProcess * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QProcess_qt_metacall(QProcess * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcess_tr(char const * s, char const * c, int n) {
  return new QString(QProcess::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcess_trUtf8(char const * s, char const * c, int n) {
  return new QString(QProcess::trUtf8(s, c, n));
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_QProcess_QProcess(QObject * parent) {
  return new QProcess(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_dQProcess(QProcess * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start(QProcess * this_ptr, QString const * program, QStringList const * arguments, int mode) {
  this_ptr->start(*program, *arguments, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start1(QProcess * this_ptr, QString const * command, int mode) {
  this_ptr->start(*command, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start2(QProcess * this_ptr, int mode) {
  this_ptr->start(QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_open(QProcess * this_ptr, int mode) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcess_program(QProcess const * this_ptr) {
  return new QString(this_ptr->program());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setProgram(QProcess * this_ptr, QString const * program) {
  this_ptr->setProgram(*program);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QProcess_arguments(QProcess const * this_ptr) {
  return new QStringList(this_ptr->arguments());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setArguments(QProcess * this_ptr, QStringList const * arguments) {
  this_ptr->setArguments(*arguments);
}


RITUAL_EXPORT QProcess::ProcessChannelMode ctr_qt_core_ffi_QProcess_readChannelMode(QProcess const * this_ptr) {
  return this_ptr->readChannelMode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setReadChannelMode(QProcess * this_ptr, QProcess::ProcessChannelMode mode) {
  this_ptr->setReadChannelMode(mode);
}


RITUAL_EXPORT QProcess::ProcessChannelMode ctr_qt_core_ffi_QProcess_processChannelMode(QProcess const * this_ptr) {
  return this_ptr->processChannelMode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setProcessChannelMode(QProcess * this_ptr, QProcess::ProcessChannelMode mode) {
  this_ptr->setProcessChannelMode(mode);
}


RITUAL_EXPORT QProcess::InputChannelMode ctr_qt_core_ffi_QProcess_inputChannelMode(QProcess const * this_ptr) {
  return this_ptr->inputChannelMode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setInputChannelMode(QProcess * this_ptr, QProcess::InputChannelMode mode) {
  this_ptr->setInputChannelMode(mode);
}


RITUAL_EXPORT QProcess::ProcessChannel ctr_qt_core_ffi_QProcess_readChannel(QProcess const * this_ptr) {
  return this_ptr->readChannel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setReadChannel(QProcess * this_ptr, QProcess::ProcessChannel channel) {
  this_ptr->setReadChannel(channel);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_closeReadChannel(QProcess * this_ptr, QProcess::ProcessChannel channel) {
  this_ptr->closeReadChannel(channel);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_closeWriteChannel(QProcess * this_ptr) {
  this_ptr->closeWriteChannel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardInputFile(QProcess * this_ptr, QString const * fileName) {
  this_ptr->setStandardInputFile(*fileName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardOutputFile(QProcess * this_ptr, QString const * fileName, int mode) {
  this_ptr->setStandardOutputFile(*fileName, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardErrorFile(QProcess * this_ptr, QString const * fileName, int mode) {
  this_ptr->setStandardErrorFile(*fileName, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardOutputProcess(QProcess * this_ptr, QProcess * destination) {
  this_ptr->setStandardOutputProcess(destination);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcess_workingDirectory(QProcess const * this_ptr) {
  return new QString(this_ptr->workingDirectory());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setWorkingDirectory(QProcess * this_ptr, QString const * dir) {
  this_ptr->setWorkingDirectory(*dir);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setEnvironment(QProcess * this_ptr, QStringList const * environment) {
  this_ptr->setEnvironment(*environment);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QProcess_environment(QProcess const * this_ptr) {
  return new QStringList(this_ptr->environment());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setProcessEnvironment(QProcess * this_ptr, QProcessEnvironment const * environment) {
  this_ptr->setProcessEnvironment(*environment);
}


RITUAL_EXPORT QProcessEnvironment * ctr_qt_core_ffi_QProcess_processEnvironment(QProcess const * this_ptr) {
  return new QProcessEnvironment(this_ptr->processEnvironment());
}


RITUAL_EXPORT QProcess::ProcessError ctr_qt_core_ffi_QProcess_error(QProcess const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QProcess::ProcessState ctr_qt_core_ffi_QProcess_state(QProcess const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QProcess_processId(QProcess const * this_ptr) {
  return this_ptr->processId();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForStarted(QProcess * this_ptr, int msecs) {
  return this_ptr->waitForStarted(msecs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForReadyRead(QProcess * this_ptr, int msecs) {
  return this_ptr->waitForReadyRead(msecs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForBytesWritten(QProcess * this_ptr, int msecs) {
  return this_ptr->waitForBytesWritten(msecs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForFinished(QProcess * this_ptr, int msecs) {
  return this_ptr->waitForFinished(msecs);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QProcess_readAllStandardOutput(QProcess * this_ptr) {
  return new QByteArray(this_ptr->readAllStandardOutput());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QProcess_readAllStandardError(QProcess * this_ptr) {
  return new QByteArray(this_ptr->readAllStandardError());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QProcess_exitCode(QProcess const * this_ptr) {
  return this_ptr->exitCode();
}


RITUAL_EXPORT QProcess::ExitStatus ctr_qt_core_ffi_QProcess_exitStatus(QProcess const * this_ptr) {
  return this_ptr->exitStatus();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QProcess_bytesAvailable(QProcess const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QProcess_bytesToWrite(QProcess const * this_ptr) {
  return this_ptr->bytesToWrite();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_isSequential(QProcess const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_canReadLine(QProcess const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_close(QProcess * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_atEnd(QProcess const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QProcess_execute(QString const * program, QStringList const * arguments) {
  return QProcess::execute(*program, *arguments);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QProcess_execute1(QString const * command) {
  return QProcess::execute(*command);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached(QString const * program, QStringList const * arguments, QString const * workingDirectory, qint64 * pid) {
  return QProcess::startDetached(*program, *arguments, *workingDirectory, pid);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached1(QString const * program, QStringList const * arguments) {
  return QProcess::startDetached(*program, *arguments);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached2(QString const * command) {
  return QProcess::startDetached(*command);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QProcess_systemEnvironment() {
  return new QStringList(QProcess::systemEnvironment());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcess_nullDevice() {
  return new QString(QProcess::nullDevice());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_terminate(QProcess * this_ptr) {
  this_ptr->terminate();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_kill(QProcess * this_ptr) {
  this_ptr->kill();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QVariantAnimation_metaObject(QVariantAnimation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QVariantAnimation_qt_metacast(QVariantAnimation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVariantAnimation_qt_metacall(QVariantAnimation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QVariantAnimation_tr(char const * s, char const * c, int n) {
  return new QString(QVariantAnimation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QVariantAnimation_trUtf8(char const * s, char const * c, int n) {
  return new QString(QVariantAnimation::trUtf8(s, c, n));
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_QVariantAnimation_QVariantAnimation(QObject * parent) {
  return new QVariantAnimation(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_dQVariantAnimation(QVariantAnimation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariantAnimation_startValue(QVariantAnimation const * this_ptr) {
  return new QVariant(this_ptr->startValue());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setStartValue(QVariantAnimation * this_ptr, QVariant const * value) {
  this_ptr->setStartValue(*value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariantAnimation_endValue(QVariantAnimation const * this_ptr) {
  return new QVariant(this_ptr->endValue());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setEndValue(QVariantAnimation * this_ptr, QVariant const * value) {
  this_ptr->setEndValue(*value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariantAnimation_keyValueAt(QVariantAnimation const * this_ptr, double step) {
  return new QVariant(this_ptr->keyValueAt(step));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setKeyValueAt(QVariantAnimation * this_ptr, double step, QVariant const * value) {
  this_ptr->setKeyValueAt(step, *value);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVariantAnimation_keyValues(QVariantAnimation const * this_ptr) {
  return new QVector< QPair< double, QVariant > >(this_ptr->keyValues());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setKeyValues(QVariantAnimation * this_ptr, QVector< QPair< double, QVariant > > const * values) {
  this_ptr->setKeyValues(*values);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariantAnimation_currentValue(QVariantAnimation const * this_ptr) {
  return new QVariant(this_ptr->currentValue());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVariantAnimation_duration(QVariantAnimation const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setDuration(QVariantAnimation * this_ptr, int msecs) {
  this_ptr->setDuration(msecs);
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QVariantAnimation_easingCurve(QVariantAnimation const * this_ptr) {
  return new QEasingCurve(this_ptr->easingCurve());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariantAnimation_setEasingCurve(QVariantAnimation * this_ptr, QEasingCurve const * easing) {
  this_ptr->setEasingCurve(*easing);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QPropertyAnimation_metaObject(QPropertyAnimation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QPropertyAnimation_qt_metacast(QPropertyAnimation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QPropertyAnimation_qt_metacall(QPropertyAnimation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPropertyAnimation_tr(char const * s, char const * c, int n) {
  return new QString(QPropertyAnimation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QPropertyAnimation_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPropertyAnimation::trUtf8(s, c, n));
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_QPropertyAnimation_QPropertyAnimation(QObject * parent) {
  return new QPropertyAnimation(parent);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_QPropertyAnimation_QPropertyAnimation1(QObject * target, QByteArray const * propertyName, QObject * parent) {
  return new QPropertyAnimation(target, *propertyName, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPropertyAnimation_dQPropertyAnimation(QPropertyAnimation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPropertyAnimation_targetObject(QPropertyAnimation const * this_ptr) {
  return this_ptr->targetObject();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPropertyAnimation_setTargetObject(QPropertyAnimation * this_ptr, QObject * target) {
  this_ptr->setTargetObject(target);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QPropertyAnimation_propertyName(QPropertyAnimation const * this_ptr) {
  return new QByteArray(this_ptr->propertyName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPropertyAnimation_setPropertyName(QPropertyAnimation * this_ptr, QByteArray const * propertyName) {
  this_ptr->setPropertyName(*propertyName);
}


RITUAL_EXPORT QReadWriteLock * ctr_qt_core_ffi_QReadWriteLock_QReadWriteLock(QReadWriteLock::RecursionMode recursionMode) {
  return new QReadWriteLock(recursionMode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadWriteLock_dQReadWriteLock(QReadWriteLock * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadWriteLock_lockForRead(QReadWriteLock * this_ptr) {
  this_ptr->lockForRead();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QReadWriteLock_tryLockForRead(QReadWriteLock * this_ptr) {
  return this_ptr->tryLockForRead();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QReadWriteLock_tryLockForRead1(QReadWriteLock * this_ptr, int timeout) {
  return this_ptr->tryLockForRead(timeout);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadWriteLock_lockForWrite(QReadWriteLock * this_ptr) {
  this_ptr->lockForWrite();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QReadWriteLock_tryLockForWrite(QReadWriteLock * this_ptr) {
  return this_ptr->tryLockForWrite();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QReadWriteLock_tryLockForWrite1(QReadWriteLock * this_ptr, int timeout) {
  return this_ptr->tryLockForWrite(timeout);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadWriteLock_unlock(QReadWriteLock * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT QReadLocker * ctr_qt_core_ffi_QReadLocker_QReadLocker(QReadWriteLock * readWriteLock) {
  return new QReadLocker(readWriteLock);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadLocker_dQReadLocker(QReadLocker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadLocker_unlock(QReadLocker * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QReadLocker_relock(QReadLocker * this_ptr) {
  this_ptr->relock();
}


RITUAL_EXPORT QReadWriteLock * ctr_qt_core_ffi_QReadLocker_readWriteLock(QReadLocker const * this_ptr) {
  return this_ptr->readWriteLock();
}


RITUAL_EXPORT QWriteLocker * ctr_qt_core_ffi_QWriteLocker_QWriteLocker(QReadWriteLock * readWriteLock) {
  return new QWriteLocker(readWriteLock);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWriteLocker_dQWriteLocker(QWriteLocker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWriteLocker_unlock(QWriteLocker * this_ptr) {
  this_ptr->unlock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWriteLocker_relock(QWriteLocker * this_ptr) {
  this_ptr->relock();
}


RITUAL_EXPORT QReadWriteLock * ctr_qt_core_ffi_QWriteLocker_readWriteLock(QWriteLocker const * this_ptr) {
  return this_ptr->readWriteLock();
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_QSize() {
  return new QSize();
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_QSize1(int w, int h) {
  return new QSize(w, h);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSize_isNull(QSize const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSize_isEmpty(QSize const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSize_isValid(QSize const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSize_width(QSize const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSize_height(QSize const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_setWidth(QSize * this_ptr, int w) {
  this_ptr->setWidth(w);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_setHeight(QSize * this_ptr, int h) {
  this_ptr->setHeight(h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_transpose(QSize * this_ptr) {
  this_ptr->transpose();
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_transposed(QSize const * this_ptr) {
  return new QSize(this_ptr->transposed());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_scale(QSize * this_ptr, int w, int h, Qt::AspectRatioMode mode) {
  this_ptr->scale(w, h, mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_scale1(QSize * this_ptr, QSize const * s, Qt::AspectRatioMode mode) {
  this_ptr->scale(*s, mode);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_scaled(QSize const * this_ptr, int w, int h, Qt::AspectRatioMode mode) {
  return new QSize(this_ptr->scaled(w, h, mode));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_scaled1(QSize const * this_ptr, QSize const * s, Qt::AspectRatioMode mode) {
  return new QSize(this_ptr->scaled(*s, mode));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_expandedTo(QSize const * this_ptr, QSize const * arg1) {
  return new QSize(this_ptr->expandedTo(*arg1));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_boundedTo(QSize const * this_ptr, QSize const * arg1) {
  return new QSize(this_ptr->boundedTo(*arg1));
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QSize_rwidth(QSize * this_ptr) {
  return &this_ptr->rwidth();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QSize_rheight(QSize * this_ptr) {
  return &this_ptr->rheight();
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_operator__(QSize * this_ptr, QSize const * arg1) {
  return &this_ptr->operator+=(*arg1);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_operator__1(QSize * this_ptr, QSize const * arg1) {
  return &this_ptr->operator-=(*arg1);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_operator__2(QSize * this_ptr, double c) {
  return &this_ptr->operator*=(c);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_operator__3(QSize * this_ptr, double c) {
  return &this_ptr->operator/=(c);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__165(QDataStream * arg1, QSize const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__166(QDataStream * arg1, QSize * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__167(QSize const * s1, QSize const * s2) {
  return operator==(*s1, *s2);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_operator_111(QSize const * s1, QSize const * s2) {
  return new QSize(operator+(*s1, *s2));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_operator_112(QSize const * s1, QSize const * s2) {
  return new QSize(operator-(*s1, *s2));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_operator_113(QSize const * s, double c) {
  return new QSize(operator*(*s, c));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_operator_114(double c, QSize const * s) {
  return new QSize(operator*(c, *s));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_operator_115(QSize const * s, double c) {
  return new QSize(operator/(*s, c));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__169(QDebug const * arg1, QSize const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_QSizeF() {
  return new QSizeF();
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_QSizeF1(QSize const * sz) {
  return new QSizeF(*sz);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_QSizeF2(double w, double h) {
  return new QSizeF(w, h);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSizeF_isNull(QSizeF const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSizeF_isEmpty(QSizeF const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSizeF_isValid(QSizeF const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QSizeF_width(QSizeF const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QSizeF_height(QSizeF const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_setWidth(QSizeF * this_ptr, double w) {
  this_ptr->setWidth(w);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_setHeight(QSizeF * this_ptr, double h) {
  this_ptr->setHeight(h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_transpose(QSizeF * this_ptr) {
  this_ptr->transpose();
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_transposed(QSizeF const * this_ptr) {
  return new QSizeF(this_ptr->transposed());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_scale(QSizeF * this_ptr, double w, double h, Qt::AspectRatioMode mode) {
  this_ptr->scale(w, h, mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_scale1(QSizeF * this_ptr, QSizeF const * s, Qt::AspectRatioMode mode) {
  this_ptr->scale(*s, mode);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_scaled(QSizeF const * this_ptr, double w, double h, Qt::AspectRatioMode mode) {
  return new QSizeF(this_ptr->scaled(w, h, mode));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_scaled1(QSizeF const * this_ptr, QSizeF const * s, Qt::AspectRatioMode mode) {
  return new QSizeF(this_ptr->scaled(*s, mode));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_expandedTo(QSizeF const * this_ptr, QSizeF const * arg1) {
  return new QSizeF(this_ptr->expandedTo(*arg1));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_boundedTo(QSizeF const * this_ptr, QSizeF const * arg1) {
  return new QSizeF(this_ptr->boundedTo(*arg1));
}


RITUAL_EXPORT double * ctr_qt_core_ffi_QSizeF_rwidth(QSizeF * this_ptr) {
  return &this_ptr->rwidth();
}


RITUAL_EXPORT double * ctr_qt_core_ffi_QSizeF_rheight(QSizeF * this_ptr) {
  return &this_ptr->rheight();
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_operator__(QSizeF * this_ptr, QSizeF const * arg1) {
  return &this_ptr->operator+=(*arg1);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_operator__1(QSizeF * this_ptr, QSizeF const * arg1) {
  return &this_ptr->operator-=(*arg1);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_operator__2(QSizeF * this_ptr, double c) {
  return &this_ptr->operator*=(c);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_operator__3(QSizeF * this_ptr, double c) {
  return &this_ptr->operator/=(c);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSizeF_toSize(QSizeF const * this_ptr) {
  return new QSize(this_ptr->toSize());
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__170(QDataStream * arg1, QSizeF const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__171(QDataStream * arg1, QSizeF * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__172(QSizeF const * s1, QSizeF const * s2) {
  return operator==(*s1, *s2);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_operator_116(QSizeF const * s1, QSizeF const * s2) {
  return new QSizeF(operator+(*s1, *s2));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_operator_117(QSizeF const * s1, QSizeF const * s2) {
  return new QSizeF(operator-(*s1, *s2));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_operator_118(QSizeF const * s, double c) {
  return new QSizeF(operator*(*s, c));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_operator_119(double c, QSizeF const * s) {
  return new QSizeF(operator*(c, *s));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_operator_120(QSizeF const * s, double c) {
  return new QSizeF(operator/(*s, c));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__174(QDebug const * arg1, QSizeF const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_QRect() {
  return new QRect();
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_QRect1(QPoint const * topleft, QPoint const * bottomright) {
  return new QRect(*topleft, *bottomright);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_QRect2(QPoint const * topleft, QSize const * size) {
  return new QRect(*topleft, *size);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_QRect3(int left, int top, int width, int height) {
  return new QRect(left, top, width, height);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_isNull(QRect const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_isEmpty(QRect const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_isValid(QRect const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_left(QRect const * this_ptr) {
  return this_ptr->left();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_top(QRect const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_right(QRect const * this_ptr) {
  return this_ptr->right();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_bottom(QRect const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_normalized(QRect const * this_ptr) {
  return new QRect(this_ptr->normalized());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_x(QRect const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_y(QRect const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setLeft(QRect * this_ptr, int pos) {
  this_ptr->setLeft(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setTop(QRect * this_ptr, int pos) {
  this_ptr->setTop(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setRight(QRect * this_ptr, int pos) {
  this_ptr->setRight(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setBottom(QRect * this_ptr, int pos) {
  this_ptr->setBottom(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setX(QRect * this_ptr, int x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setY(QRect * this_ptr, int y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setTopLeft(QRect * this_ptr, QPoint const * p) {
  this_ptr->setTopLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setBottomRight(QRect * this_ptr, QPoint const * p) {
  this_ptr->setBottomRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setTopRight(QRect * this_ptr, QPoint const * p) {
  this_ptr->setTopRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setBottomLeft(QRect * this_ptr, QPoint const * p) {
  this_ptr->setBottomLeft(*p);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QRect_topLeft(QRect const * this_ptr) {
  return new QPoint(this_ptr->topLeft());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QRect_bottomRight(QRect const * this_ptr) {
  return new QPoint(this_ptr->bottomRight());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QRect_topRight(QRect const * this_ptr) {
  return new QPoint(this_ptr->topRight());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QRect_bottomLeft(QRect const * this_ptr) {
  return new QPoint(this_ptr->bottomLeft());
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QRect_center(QRect const * this_ptr) {
  return new QPoint(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveLeft(QRect * this_ptr, int pos) {
  this_ptr->moveLeft(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveTop(QRect * this_ptr, int pos) {
  this_ptr->moveTop(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveRight(QRect * this_ptr, int pos) {
  this_ptr->moveRight(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveBottom(QRect * this_ptr, int pos) {
  this_ptr->moveBottom(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveTopLeft(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveTopLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveBottomRight(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveBottomRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveTopRight(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveTopRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveBottomLeft(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveBottomLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveCenter(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveCenter(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_translate(QRect * this_ptr, int dx, int dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_translate1(QRect * this_ptr, QPoint const * p) {
  this_ptr->translate(*p);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_translated(QRect const * this_ptr, int dx, int dy) {
  return new QRect(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_translated1(QRect const * this_ptr, QPoint const * p) {
  return new QRect(this_ptr->translated(*p));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_transposed(QRect const * this_ptr) {
  return new QRect(this_ptr->transposed());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveTo(QRect * this_ptr, int x, int t) {
  this_ptr->moveTo(x, t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_moveTo1(QRect * this_ptr, QPoint const * p) {
  this_ptr->moveTo(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setRect(QRect * this_ptr, int x, int y, int w, int h) {
  this_ptr->setRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_getRect(QRect const * this_ptr, int * x, int * y, int * w, int * h) {
  this_ptr->getRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setCoords(QRect * this_ptr, int x1, int y1, int x2, int y2) {
  this_ptr->setCoords(x1, y1, x2, y2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_getCoords(QRect const * this_ptr, int * x1, int * y1, int * x2, int * y2) {
  this_ptr->getCoords(x1, y1, x2, y2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_adjust(QRect * this_ptr, int x1, int y1, int x2, int y2) {
  this_ptr->adjust(x1, y1, x2, y2);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_adjusted(QRect const * this_ptr, int x1, int y1, int x2, int y2) {
  return new QRect(this_ptr->adjusted(x1, y1, x2, y2));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QRect_size(QRect const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_width(QRect const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRect_height(QRect const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setWidth(QRect * this_ptr, int w) {
  this_ptr->setWidth(w);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setHeight(QRect * this_ptr, int h) {
  this_ptr->setHeight(h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_setSize(QRect * this_ptr, QSize const * s) {
  this_ptr->setSize(*s);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator_(QRect const * this_ptr, QRect const * r) {
  return new QRect(this_ptr->operator|(*r));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator_1(QRect const * this_ptr, QRect const * r) {
  return new QRect(this_ptr->operator&(*r));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator__(QRect * this_ptr, QRect const * r) {
  return &this_ptr->operator|=(*r);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator__1(QRect * this_ptr, QRect const * r) {
  return &this_ptr->operator&=(*r);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains(QRect const * this_ptr, QRect const * r, bool proper) {
  return this_ptr->contains(*r, proper);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains1(QRect const * this_ptr, QPoint const * p, bool proper) {
  return this_ptr->contains(*p, proper);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains2(QRect const * this_ptr, int x, int y) {
  return this_ptr->contains(x, y);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains3(QRect const * this_ptr, int x, int y, bool proper) {
  return this_ptr->contains(x, y, proper);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_united(QRect const * this_ptr, QRect const * other) {
  return new QRect(this_ptr->united(*other));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_intersected(QRect const * this_ptr, QRect const * other) {
  return new QRect(this_ptr->intersected(*other));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_intersects(QRect const * this_ptr, QRect const * r) {
  return this_ptr->intersects(*r);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_marginsAdded(QRect const * this_ptr, QMargins const * margins) {
  return new QRect(this_ptr->marginsAdded(*margins));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_marginsRemoved(QRect const * this_ptr, QMargins const * margins) {
  return new QRect(this_ptr->marginsRemoved(*margins));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator__2(QRect * this_ptr, QMargins const * margins) {
  return &this_ptr->operator+=(*margins);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator__3(QRect * this_ptr, QMargins const * margins) {
  return &this_ptr->operator-=(*margins);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__175(QRect const * arg1, QRect const * arg2) {
  return operator==(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__177(QDataStream * arg1, QRect const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__178(QDataStream * arg1, QRect * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_operator_121(QRect const * rectangle, QMargins const * margins) {
  return new QRect(operator+(*rectangle, *margins));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_operator_122(QMargins const * margins, QRect const * rectangle) {
  return new QRect(operator+(*margins, *rectangle));
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_operator_123(QRect const * lhs, QMargins const * rhs) {
  return new QRect(operator-(*lhs, *rhs));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__179(QDebug const * arg1, QRect const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF() {
  return new QRectF();
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF1(QPointF const * topleft, QSizeF const * size) {
  return new QRectF(*topleft, *size);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF2(QPointF const * topleft, QPointF const * bottomRight) {
  return new QRectF(*topleft, *bottomRight);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF3(double left, double top, double width, double height) {
  return new QRectF(left, top, width, height);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF4(QRect const * rect) {
  return new QRectF(*rect);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_isNull(QRectF const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_isEmpty(QRectF const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_isValid(QRectF const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_normalized(QRectF const * this_ptr) {
  return new QRectF(this_ptr->normalized());
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_left(QRectF const * this_ptr) {
  return this_ptr->left();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_top(QRectF const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_right(QRectF const * this_ptr) {
  return this_ptr->right();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_bottom(QRectF const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_x(QRectF const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_y(QRectF const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setLeft(QRectF * this_ptr, double pos) {
  this_ptr->setLeft(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setTop(QRectF * this_ptr, double pos) {
  this_ptr->setTop(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setRight(QRectF * this_ptr, double pos) {
  this_ptr->setRight(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setBottom(QRectF * this_ptr, double pos) {
  this_ptr->setBottom(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setX(QRectF * this_ptr, double pos) {
  this_ptr->setX(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setY(QRectF * this_ptr, double pos) {
  this_ptr->setY(pos);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QRectF_topLeft(QRectF const * this_ptr) {
  return new QPointF(this_ptr->topLeft());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QRectF_bottomRight(QRectF const * this_ptr) {
  return new QPointF(this_ptr->bottomRight());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QRectF_topRight(QRectF const * this_ptr) {
  return new QPointF(this_ptr->topRight());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QRectF_bottomLeft(QRectF const * this_ptr) {
  return new QPointF(this_ptr->bottomLeft());
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QRectF_center(QRectF const * this_ptr) {
  return new QPointF(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setTopLeft(QRectF * this_ptr, QPointF const * p) {
  this_ptr->setTopLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setBottomRight(QRectF * this_ptr, QPointF const * p) {
  this_ptr->setBottomRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setTopRight(QRectF * this_ptr, QPointF const * p) {
  this_ptr->setTopRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setBottomLeft(QRectF * this_ptr, QPointF const * p) {
  this_ptr->setBottomLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveLeft(QRectF * this_ptr, double pos) {
  this_ptr->moveLeft(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveTop(QRectF * this_ptr, double pos) {
  this_ptr->moveTop(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveRight(QRectF * this_ptr, double pos) {
  this_ptr->moveRight(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveBottom(QRectF * this_ptr, double pos) {
  this_ptr->moveBottom(pos);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveTopLeft(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveTopLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveBottomRight(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveBottomRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveTopRight(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveTopRight(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveBottomLeft(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveBottomLeft(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveCenter(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveCenter(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_translate(QRectF * this_ptr, double dx, double dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_translate1(QRectF * this_ptr, QPointF const * p) {
  this_ptr->translate(*p);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_translated(QRectF const * this_ptr, double dx, double dy) {
  return new QRectF(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_translated1(QRectF const * this_ptr, QPointF const * p) {
  return new QRectF(this_ptr->translated(*p));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_transposed(QRectF const * this_ptr) {
  return new QRectF(this_ptr->transposed());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveTo(QRectF * this_ptr, double x, double y) {
  this_ptr->moveTo(x, y);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_moveTo1(QRectF * this_ptr, QPointF const * p) {
  this_ptr->moveTo(*p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setRect(QRectF * this_ptr, double x, double y, double w, double h) {
  this_ptr->setRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_getRect(QRectF const * this_ptr, double * x, double * y, double * w, double * h) {
  this_ptr->getRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setCoords(QRectF * this_ptr, double x1, double y1, double x2, double y2) {
  this_ptr->setCoords(x1, y1, x2, y2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_getCoords(QRectF const * this_ptr, double * x1, double * y1, double * x2, double * y2) {
  this_ptr->getCoords(x1, y1, x2, y2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_adjust(QRectF * this_ptr, double x1, double y1, double x2, double y2) {
  this_ptr->adjust(x1, y1, x2, y2);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_adjusted(QRectF const * this_ptr, double x1, double y1, double x2, double y2) {
  return new QRectF(this_ptr->adjusted(x1, y1, x2, y2));
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QRectF_size(QRectF const * this_ptr) {
  return new QSizeF(this_ptr->size());
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_width(QRectF const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QRectF_height(QRectF const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setWidth(QRectF * this_ptr, double w) {
  this_ptr->setWidth(w);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setHeight(QRectF * this_ptr, double h) {
  this_ptr->setHeight(h);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_setSize(QRectF * this_ptr, QSizeF const * s) {
  this_ptr->setSize(*s);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator_(QRectF const * this_ptr, QRectF const * r) {
  return new QRectF(this_ptr->operator|(*r));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator_1(QRectF const * this_ptr, QRectF const * r) {
  return new QRectF(this_ptr->operator&(*r));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator__(QRectF * this_ptr, QRectF const * r) {
  return &this_ptr->operator|=(*r);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator__1(QRectF * this_ptr, QRectF const * r) {
  return &this_ptr->operator&=(*r);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_contains(QRectF const * this_ptr, QRectF const * r) {
  return this_ptr->contains(*r);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_contains1(QRectF const * this_ptr, QPointF const * p) {
  return this_ptr->contains(*p);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_contains2(QRectF const * this_ptr, double x, double y) {
  return this_ptr->contains(x, y);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_united(QRectF const * this_ptr, QRectF const * other) {
  return new QRectF(this_ptr->united(*other));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_intersected(QRectF const * this_ptr, QRectF const * other) {
  return new QRectF(this_ptr->intersected(*other));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRectF_intersects(QRectF const * this_ptr, QRectF const * r) {
  return this_ptr->intersects(*r);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_marginsAdded(QRectF const * this_ptr, QMarginsF const * margins) {
  return new QRectF(this_ptr->marginsAdded(*margins));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_marginsRemoved(QRectF const * this_ptr, QMarginsF const * margins) {
  return new QRectF(this_ptr->marginsRemoved(*margins));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator__2(QRectF * this_ptr, QMarginsF const * margins) {
  return &this_ptr->operator+=(*margins);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator__3(QRectF * this_ptr, QMarginsF const * margins) {
  return &this_ptr->operator-=(*margins);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRectF_toRect(QRectF const * this_ptr) {
  return new QRect(this_ptr->toRect());
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRectF_toAlignedRect(QRectF const * this_ptr) {
  return new QRect(this_ptr->toAlignedRect());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__180(QRectF const * arg1, QRectF const * arg2) {
  return operator==(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__182(QDataStream * arg1, QRectF const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__183(QDataStream * arg1, QRectF * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_operator_124(QRectF const * lhs, QMarginsF const * rhs) {
  return new QRectF(operator+(*lhs, *rhs));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_operator_125(QMarginsF const * lhs, QRectF const * rhs) {
  return new QRectF(operator+(*lhs, *rhs));
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_operator_126(QRectF const * lhs, QMarginsF const * rhs) {
  return new QRectF(operator-(*lhs, *rhs));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__184(QDebug const * arg1, QRectF const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash30(QRegularExpression const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpression_patternOptions(QRegularExpression const * this_ptr) {
  return int(this_ptr->patternOptions());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpression_setPatternOptions(QRegularExpression * this_ptr, int options) {
  this_ptr->setPatternOptions(QFlags< QRegularExpression::PatternOption >(options));
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpression_QRegularExpression() {
  return new QRegularExpression();
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpression_QRegularExpression1(QString const * pattern, int options) {
  return new QRegularExpression(*pattern, QFlags< QRegularExpression::PatternOption >(options));
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpression_QRegularExpression2(QRegularExpression const * re) {
  return new QRegularExpression(*re);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpression_dQRegularExpression(QRegularExpression * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpression_operator_(QRegularExpression * this_ptr, QRegularExpression const * re) {
  return &this_ptr->operator=(*re);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpression_swap(QRegularExpression * this_ptr, QRegularExpression * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpression_pattern(QRegularExpression const * this_ptr) {
  return new QString(this_ptr->pattern());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpression_setPattern(QRegularExpression * this_ptr, QString const * pattern) {
  this_ptr->setPattern(*pattern);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpression_isValid(QRegularExpression const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpression_patternErrorOffset(QRegularExpression const * this_ptr) {
  return this_ptr->patternErrorOffset();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpression_errorString(QRegularExpression const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpression_captureCount(QRegularExpression const * this_ptr) {
  return this_ptr->captureCount();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QRegularExpression_namedCaptureGroups(QRegularExpression const * this_ptr) {
  return new QStringList(this_ptr->namedCaptureGroups());
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match(QRegularExpression const * this_ptr, QString const * subject, int offset, QRegularExpression::MatchType matchType, int matchOptions) {
  return new QRegularExpressionMatch(this_ptr->match(*subject, offset, matchType, QFlags< QRegularExpression::MatchOption >(matchOptions)));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match1(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset, QRegularExpression::MatchType matchType, int matchOptions) {
  return new QRegularExpressionMatch(this_ptr->match(*subjectRef, offset, matchType, QFlags< QRegularExpression::MatchOption >(matchOptions)));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch(QRegularExpression const * this_ptr, QString const * subject, int offset, QRegularExpression::MatchType matchType, int matchOptions) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subject, offset, matchType, QFlags< QRegularExpression::MatchOption >(matchOptions)));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch1(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset, QRegularExpression::MatchType matchType, int matchOptions) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subjectRef, offset, matchType, QFlags< QRegularExpression::MatchOption >(matchOptions)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpression_optimize(QRegularExpression const * this_ptr) {
  this_ptr->optimize();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpression_escape(QString const * str) {
  return new QString(QRegularExpression::escape(*str));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpression_operator__(QRegularExpression const * this_ptr, QRegularExpression const * re) {
  return this_ptr->operator==(*re);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__185(QDataStream * out, QRegularExpression const * re) {
  return &operator<<(*out, *re);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__186(QDataStream * in, QRegularExpression * re) {
  return &operator>>(*in, *re);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__187(QDebug const * debug, QRegularExpression const * re) {
  return new QDebug(operator<<(*debug, *re));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpressionMatch_QRegularExpressionMatch() {
  return new QRegularExpressionMatch();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpressionMatch_dQRegularExpressionMatch(QRegularExpressionMatch * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpressionMatch_QRegularExpressionMatch1(QRegularExpressionMatch const * match) {
  return new QRegularExpressionMatch(*match);
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpressionMatch_operator_(QRegularExpressionMatch * this_ptr, QRegularExpressionMatch const * match) {
  return &this_ptr->operator=(*match);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpressionMatch_swap(QRegularExpressionMatch * this_ptr, QRegularExpressionMatch * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpressionMatch_regularExpression(QRegularExpressionMatch const * this_ptr) {
  return new QRegularExpression(this_ptr->regularExpression());
}


RITUAL_EXPORT QRegularExpression::MatchType ctr_qt_core_ffi_QRegularExpressionMatch_matchType(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->matchType();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_matchOptions(QRegularExpressionMatch const * this_ptr) {
  return int(this_ptr->matchOptions());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpressionMatch_hasMatch(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->hasMatch();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpressionMatch_hasPartialMatch(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->hasPartialMatch();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpressionMatch_isValid(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_lastCapturedIndex(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->lastCapturedIndex();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpressionMatch_captured(QRegularExpressionMatch const * this_ptr, int nth) {
  return new QString(this_ptr->captured(nth));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QRegularExpressionMatch_capturedRef(QRegularExpressionMatch const * this_ptr, int nth) {
  return new QStringRef(this_ptr->capturedRef(nth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpressionMatch_captured1(QRegularExpressionMatch const * this_ptr, QString const * name) {
  return new QString(this_ptr->captured(*name));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QRegularExpressionMatch_capturedRef1(QRegularExpressionMatch const * this_ptr, QString const * name) {
  return new QStringRef(this_ptr->capturedRef(*name));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QRegularExpressionMatch_capturedTexts(QRegularExpressionMatch const * this_ptr) {
  return new QStringList(this_ptr->capturedTexts());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedStart(QRegularExpressionMatch const * this_ptr, int nth) {
  return this_ptr->capturedStart(nth);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedLength(QRegularExpressionMatch const * this_ptr, int nth) {
  return this_ptr->capturedLength(nth);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedEnd(QRegularExpressionMatch const * this_ptr, int nth) {
  return this_ptr->capturedEnd(nth);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedStart1(QRegularExpressionMatch const * this_ptr, QString const * name) {
  return this_ptr->capturedStart(*name);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedLength1(QRegularExpressionMatch const * this_ptr, QString const * name) {
  return this_ptr->capturedLength(*name);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedEnd1(QRegularExpressionMatch const * this_ptr, QString const * name) {
  return this_ptr->capturedEnd(*name);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__188(QDebug const * debug, QRegularExpressionMatch const * match) {
  return new QDebug(operator<<(*debug, *match));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpressionMatchIterator_QRegularExpressionMatchIterator() {
  return new QRegularExpressionMatchIterator();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpressionMatchIterator_dQRegularExpressionMatchIterator(QRegularExpressionMatchIterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpressionMatchIterator_QRegularExpressionMatchIterator1(QRegularExpressionMatchIterator const * iterator) {
  return new QRegularExpressionMatchIterator(*iterator);
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpressionMatchIterator_operator_(QRegularExpressionMatchIterator * this_ptr, QRegularExpressionMatchIterator const * iterator) {
  return &this_ptr->operator=(*iterator);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRegularExpressionMatchIterator_swap(QRegularExpressionMatchIterator * this_ptr, QRegularExpressionMatchIterator * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpressionMatchIterator_isValid(QRegularExpressionMatchIterator const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRegularExpressionMatchIterator_hasNext(QRegularExpressionMatchIterator const * this_ptr) {
  return this_ptr->hasNext();
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpressionMatchIterator_next(QRegularExpressionMatchIterator * this_ptr) {
  return new QRegularExpressionMatch(this_ptr->next());
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpressionMatchIterator_peekNext(QRegularExpressionMatchIterator const * this_ptr) {
  return new QRegularExpressionMatch(this_ptr->peekNext());
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpressionMatchIterator_regularExpression(QRegularExpressionMatchIterator const * this_ptr) {
  return new QRegularExpression(this_ptr->regularExpression());
}


RITUAL_EXPORT QRegularExpression::MatchType ctr_qt_core_ffi_QRegularExpressionMatchIterator_matchType(QRegularExpressionMatchIterator const * this_ptr) {
  return this_ptr->matchType();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatchIterator_matchOptions(QRegularExpressionMatchIterator const * this_ptr) {
  return int(this_ptr->matchOptions());
}


RITUAL_EXPORT QResource * ctr_qt_core_ffi_QResource_QResource(QString const * file, QLocale const * locale) {
  return new QResource(*file, *locale);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QResource_dQResource(QResource * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QResource_setFileName(QResource * this_ptr, QString const * file) {
  this_ptr->setFileName(*file);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QResource_fileName(QResource const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QResource_absoluteFilePath(QResource const * this_ptr) {
  return new QString(this_ptr->absoluteFilePath());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QResource_setLocale(QResource * this_ptr, QLocale const * locale) {
  this_ptr->setLocale(*locale);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QResource_locale(QResource const * this_ptr) {
  return new QLocale(this_ptr->locale());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_isValid(QResource const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_isCompressed(QResource const * this_ptr) {
  return this_ptr->isCompressed();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QResource_size(QResource const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT unsigned char const * ctr_qt_core_ffi_QResource_data(QResource const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QResource_lastModified(QResource const * this_ptr) {
  return new QDateTime(this_ptr->lastModified());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QResource_addSearchPath(QString const * path) {
  QResource::addSearchPath(*path);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QResource_searchPaths() {
  return new QStringList(QResource::searchPaths());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_registerResource(QString const * rccFilename, QString const * resourceRoot) {
  return QResource::registerResource(*rccFilename, *resourceRoot);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_unregisterResource(QString const * rccFilename, QString const * resourceRoot) {
  return QResource::unregisterResource(*rccFilename, *resourceRoot);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_registerResource1(unsigned char const * rccData, QString const * resourceRoot) {
  return QResource::registerResource(rccData, *resourceRoot);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_unregisterResource1(unsigned char const * rccData, QString const * resourceRoot) {
  return QResource::unregisterResource(rccData, *resourceRoot);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSaveFile_metaObject(QSaveFile const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSaveFile_qt_metacast(QSaveFile * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSaveFile_qt_metacall(QSaveFile * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSaveFile_tr(char const * s, char const * c, int n) {
  return new QString(QSaveFile::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSaveFile_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSaveFile::trUtf8(s, c, n));
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_QSaveFile_QSaveFile(QString const * name) {
  return new QSaveFile(*name);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_QSaveFile_QSaveFile1(QObject * parent) {
  return new QSaveFile(parent);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_QSaveFile_QSaveFile2(QString const * name, QObject * parent) {
  return new QSaveFile(*name, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSaveFile_dQSaveFile(QSaveFile * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSaveFile_fileName(QSaveFile const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSaveFile_setFileName(QSaveFile * this_ptr, QString const * name) {
  this_ptr->setFileName(*name);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSaveFile_open(QSaveFile * this_ptr, int flags) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSaveFile_commit(QSaveFile * this_ptr) {
  return this_ptr->commit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSaveFile_cancelWriting(QSaveFile * this_ptr) {
  this_ptr->cancelWriting();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSaveFile_setDirectWriteFallback(QSaveFile * this_ptr, bool enabled) {
  this_ptr->setDirectWriteFallback(enabled);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSaveFile_directWriteFallback(QSaveFile const * this_ptr) {
  return this_ptr->directWriteFallback();
}


RITUAL_EXPORT QSemaphore * ctr_qt_core_ffi_QSemaphore_QSemaphore(int n) {
  return new QSemaphore(n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphore_dQSemaphore(QSemaphore * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphore_acquire(QSemaphore * this_ptr, int n) {
  this_ptr->acquire(n);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSemaphore_tryAcquire(QSemaphore * this_ptr, int n) {
  return this_ptr->tryAcquire(n);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSemaphore_tryAcquire1(QSemaphore * this_ptr, int n, int timeout) {
  return this_ptr->tryAcquire(n, timeout);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphore_release(QSemaphore * this_ptr, int n) {
  this_ptr->release(n);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSemaphore_available(QSemaphore const * this_ptr) {
  return this_ptr->available();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSequentialAnimationGroup_metaObject(QSequentialAnimationGroup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSequentialAnimationGroup_qt_metacast(QSequentialAnimationGroup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSequentialAnimationGroup_qt_metacall(QSequentialAnimationGroup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSequentialAnimationGroup_tr(char const * s, char const * c, int n) {
  return new QString(QSequentialAnimationGroup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSequentialAnimationGroup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSequentialAnimationGroup::trUtf8(s, c, n));
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_QSequentialAnimationGroup_QSequentialAnimationGroup(QObject * parent) {
  return new QSequentialAnimationGroup(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSequentialAnimationGroup_dQSequentialAnimationGroup(QSequentialAnimationGroup * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QSequentialAnimationGroup_addPause(QSequentialAnimationGroup * this_ptr, int msecs) {
  return this_ptr->addPause(msecs);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QSequentialAnimationGroup_insertPause(QSequentialAnimationGroup * this_ptr, int index, int msecs) {
  return this_ptr->insertPause(index, msecs);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QSequentialAnimationGroup_currentAnimation(QSequentialAnimationGroup const * this_ptr) {
  return this_ptr->currentAnimation();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSequentialAnimationGroup_duration(QSequentialAnimationGroup const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSettings_metaObject(QSettings const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSettings_qt_metacast(QSettings * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSettings_qt_metacall(QSettings * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_tr(char const * s, char const * c, int n) {
  return new QString(QSettings::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSettings::trUtf8(s, c, n));
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings(QString const * organization, QString const * application, QObject * parent) {
  return new QSettings(*organization, *application, parent);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings1(QSettings::Scope scope, QString const * organization, QString const * application, QObject * parent) {
  return new QSettings(scope, *organization, *application, parent);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings2(QSettings::Format format, QSettings::Scope scope, QString const * organization, QString const * application, QObject * parent) {
  return new QSettings(format, scope, *organization, *application, parent);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings3(QString const * fileName, QSettings::Format format, QObject * parent) {
  return new QSettings(*fileName, format, parent);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings4(QObject * parent) {
  return new QSettings(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_dQSettings(QSettings * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_clear(QSettings * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_sync(QSettings * this_ptr) {
  this_ptr->sync();
}


RITUAL_EXPORT QSettings::Status ctr_qt_core_ffi_QSettings_status(QSettings const * this_ptr) {
  return this_ptr->status();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_beginGroup(QSettings * this_ptr, QString const * prefix) {
  this_ptr->beginGroup(*prefix);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_endGroup(QSettings * this_ptr) {
  this_ptr->endGroup();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_group(QSettings const * this_ptr) {
  return new QString(this_ptr->group());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSettings_beginReadArray(QSettings * this_ptr, QString const * prefix) {
  return this_ptr->beginReadArray(*prefix);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_beginWriteArray(QSettings * this_ptr, QString const * prefix, int size) {
  this_ptr->beginWriteArray(*prefix, size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_endArray(QSettings * this_ptr) {
  this_ptr->endArray();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setArrayIndex(QSettings * this_ptr, int i) {
  this_ptr->setArrayIndex(i);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QSettings_allKeys(QSettings const * this_ptr) {
  return new QStringList(this_ptr->allKeys());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QSettings_childKeys(QSettings const * this_ptr) {
  return new QStringList(this_ptr->childKeys());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QSettings_childGroups(QSettings const * this_ptr) {
  return new QStringList(this_ptr->childGroups());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSettings_isWritable(QSettings const * this_ptr) {
  return this_ptr->isWritable();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setValue(QSettings * this_ptr, QString const * key, QVariant const * value) {
  this_ptr->setValue(*key, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSettings_value(QSettings const * this_ptr, QString const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_remove(QSettings * this_ptr, QString const * key) {
  this_ptr->remove(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSettings_contains(QSettings const * this_ptr, QString const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setFallbacksEnabled(QSettings * this_ptr, bool b) {
  this_ptr->setFallbacksEnabled(b);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSettings_fallbacksEnabled(QSettings const * this_ptr) {
  return this_ptr->fallbacksEnabled();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_fileName(QSettings const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QSettings::Format ctr_qt_core_ffi_QSettings_format(QSettings const * this_ptr) {
  return this_ptr->format();
}


RITUAL_EXPORT QSettings::Scope ctr_qt_core_ffi_QSettings_scope(QSettings const * this_ptr) {
  return this_ptr->scope();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_organizationName(QSettings const * this_ptr) {
  return new QString(this_ptr->organizationName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSettings_applicationName(QSettings const * this_ptr) {
  return new QString(this_ptr->applicationName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setIniCodec(QSettings * this_ptr, QTextCodec * codec) {
  this_ptr->setIniCodec(codec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setIniCodec1(QSettings * this_ptr, char const * codecName) {
  this_ptr->setIniCodec(codecName);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QSettings_iniCodec(QSettings const * this_ptr) {
  return this_ptr->iniCodec();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setDefaultFormat(QSettings::Format format) {
  QSettings::setDefaultFormat(format);
}


RITUAL_EXPORT QSettings::Format ctr_qt_core_ffi_QSettings_defaultFormat() {
  return QSettings::defaultFormat();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setSystemIniPath(QString const * dir) {
  QSettings::setSystemIniPath(*dir);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setUserIniPath(QString const * dir) {
  QSettings::setUserIniPath(*dir);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setPath(QSettings::Format format, QSettings::Scope scope, QString const * path) {
  QSettings::setPath(format, scope, *path);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSharedMemory_metaObject(QSharedMemory const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSharedMemory_qt_metacast(QSharedMemory * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSharedMemory_qt_metacall(QSharedMemory * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSharedMemory_tr(char const * s, char const * c, int n) {
  return new QString(QSharedMemory::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSharedMemory_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSharedMemory::trUtf8(s, c, n));
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_QSharedMemory_QSharedMemory(QObject * parent) {
  return new QSharedMemory(parent);
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_QSharedMemory_QSharedMemory1(QString const * key, QObject * parent) {
  return new QSharedMemory(*key, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSharedMemory_dQSharedMemory(QSharedMemory * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSharedMemory_setKey(QSharedMemory * this_ptr, QString const * key) {
  this_ptr->setKey(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSharedMemory_key(QSharedMemory const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSharedMemory_setNativeKey(QSharedMemory * this_ptr, QString const * key) {
  this_ptr->setNativeKey(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSharedMemory_nativeKey(QSharedMemory const * this_ptr) {
  return new QString(this_ptr->nativeKey());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_create(QSharedMemory * this_ptr, int size, QSharedMemory::AccessMode mode) {
  return this_ptr->create(size, mode);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSharedMemory_size(QSharedMemory const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_attach(QSharedMemory * this_ptr, QSharedMemory::AccessMode mode) {
  return this_ptr->attach(mode);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_isAttached(QSharedMemory const * this_ptr) {
  return this_ptr->isAttached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_detach(QSharedMemory * this_ptr) {
  return this_ptr->detach();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSharedMemory_data(QSharedMemory * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT void const * ctr_qt_core_ffi_QSharedMemory_constData(QSharedMemory const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void const * ctr_qt_core_ffi_QSharedMemory_data1(QSharedMemory const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_lock(QSharedMemory * this_ptr) {
  return this_ptr->lock();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_unlock(QSharedMemory * this_ptr) {
  return this_ptr->unlock();
}


RITUAL_EXPORT QSharedMemory::SharedMemoryError ctr_qt_core_ffi_QSharedMemory_error(QSharedMemory const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSharedMemory_errorString(QSharedMemory const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSignalMapper_metaObject(QSignalMapper const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSignalMapper_qt_metacast(QSignalMapper * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSignalMapper_qt_metacall(QSignalMapper * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSignalMapper_tr(char const * s, char const * c, int n) {
  return new QString(QSignalMapper::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSignalMapper_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSignalMapper::trUtf8(s, c, n));
}


RITUAL_EXPORT QSignalMapper * ctr_qt_core_ffi_QSignalMapper_QSignalMapper(QObject * parent) {
  return new QSignalMapper(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_dQSignalMapper(QSignalMapper * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_setMapping(QSignalMapper * this_ptr, QObject * sender, int id) {
  this_ptr->setMapping(sender, id);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_setMapping1(QSignalMapper * this_ptr, QObject * sender, QString const * text) {
  this_ptr->setMapping(sender, *text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_setMapping3(QSignalMapper * this_ptr, QObject * sender, QObject * object) {
  this_ptr->setMapping(sender, object);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_removeMappings(QSignalMapper * this_ptr, QObject * sender) {
  this_ptr->removeMappings(sender);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QSignalMapper_mapping(QSignalMapper const * this_ptr, int id) {
  return this_ptr->mapping(id);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QSignalMapper_mapping1(QSignalMapper const * this_ptr, QString const * text) {
  return this_ptr->mapping(*text);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QSignalMapper_mapping3(QSignalMapper const * this_ptr, QObject * object) {
  return this_ptr->mapping(object);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_map(QSignalMapper * this_ptr) {
  this_ptr->map();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalMapper_map1(QSignalMapper * this_ptr, QObject * sender) {
  this_ptr->map(sender);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSignalTransition_metaObject(QSignalTransition const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSignalTransition_qt_metacast(QSignalTransition * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSignalTransition_qt_metacall(QSignalTransition * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSignalTransition_tr(char const * s, char const * c, int n) {
  return new QString(QSignalTransition::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSignalTransition_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSignalTransition::trUtf8(s, c, n));
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_QSignalTransition_QSignalTransition(QState * sourceState) {
  return new QSignalTransition(sourceState);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_QSignalTransition_QSignalTransition1(QObject const * sender, char const * signal, QState * sourceState) {
  return new QSignalTransition(sender, signal, sourceState);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalTransition_dQSignalTransition(QSignalTransition * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QSignalTransition_senderObject(QSignalTransition const * this_ptr) {
  return this_ptr->senderObject();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalTransition_setSenderObject(QSignalTransition * this_ptr, QObject const * sender) {
  this_ptr->setSenderObject(sender);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QSignalTransition_signal(QSignalTransition const * this_ptr) {
  return new QByteArray(this_ptr->signal());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSignalTransition_setSignal(QSignalTransition * this_ptr, QByteArray const * signal) {
  this_ptr->setSignal(*signal);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSocketNotifier_metaObject(QSocketNotifier const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSocketNotifier_qt_metacast(QSocketNotifier * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSocketNotifier_qt_metacall(QSocketNotifier * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSocketNotifier_tr(char const * s, char const * c, int n) {
  return new QString(QSocketNotifier::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSocketNotifier_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSocketNotifier::trUtf8(s, c, n));
}


RITUAL_EXPORT QSocketNotifier * ctr_qt_core_ffi_QSocketNotifier_QSocketNotifier(qintptr socket, QSocketNotifier::Type arg2, QObject * parent) {
  return new QSocketNotifier(socket, arg2, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSocketNotifier_dQSocketNotifier(QSocketNotifier * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT qintptr ctr_qt_core_ffi_QSocketNotifier_socket(QSocketNotifier const * this_ptr) {
  return this_ptr->socket();
}


RITUAL_EXPORT QSocketNotifier::Type ctr_qt_core_ffi_QSocketNotifier_type(QSocketNotifier const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSocketNotifier_isEnabled(QSocketNotifier const * this_ptr) {
  return this_ptr->isEnabled();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSocketNotifier_setEnabled(QSocketNotifier * this_ptr, bool arg1) {
  this_ptr->setEnabled(arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QSortFilterProxyModel_metaObject(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QSortFilterProxyModel_qt_metacast(QSortFilterProxyModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_qt_metacall(QSortFilterProxyModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSortFilterProxyModel_tr(char const * s, char const * c, int n) {
  return new QString(QSortFilterProxyModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSortFilterProxyModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSortFilterProxyModel::trUtf8(s, c, n));
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_QSortFilterProxyModel_QSortFilterProxyModel(QObject * parent) {
  return new QSortFilterProxyModel(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_dQSortFilterProxyModel(QSortFilterProxyModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setSourceModel(QSortFilterProxyModel * this_ptr, QAbstractItemModel * sourceModel) {
  this_ptr->setSourceModel(sourceModel);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_mapToSource(QSortFilterProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QModelIndex(this_ptr->mapToSource(*proxyIndex));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_mapFromSource(QSortFilterProxyModel const * this_ptr, QModelIndex const * sourceIndex) {
  return new QModelIndex(this_ptr->mapFromSource(*sourceIndex));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QSortFilterProxyModel_mapSelectionToSource(QSortFilterProxyModel const * this_ptr, QItemSelection const * proxySelection) {
  return new QItemSelection(this_ptr->mapSelectionToSource(*proxySelection));
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QSortFilterProxyModel_mapSelectionFromSource(QSortFilterProxyModel const * this_ptr, QItemSelection const * sourceSelection) {
  return new QItemSelection(this_ptr->mapSelectionFromSource(*sourceSelection));
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QSortFilterProxyModel_filterRegExp(QSortFilterProxyModel const * this_ptr) {
  return new QRegExp(this_ptr->filterRegExp());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterRegExp(QSortFilterProxyModel * this_ptr, QRegExp const * regExp) {
  this_ptr->setFilterRegExp(*regExp);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_filterKeyColumn(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->filterKeyColumn();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterKeyColumn(QSortFilterProxyModel * this_ptr, int column) {
  this_ptr->setFilterKeyColumn(column);
}


RITUAL_EXPORT Qt::CaseSensitivity ctr_qt_core_ffi_QSortFilterProxyModel_filterCaseSensitivity(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->filterCaseSensitivity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterCaseSensitivity(QSortFilterProxyModel * this_ptr, Qt::CaseSensitivity cs) {
  this_ptr->setFilterCaseSensitivity(cs);
}


RITUAL_EXPORT Qt::CaseSensitivity ctr_qt_core_ffi_QSortFilterProxyModel_sortCaseSensitivity(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->sortCaseSensitivity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setSortCaseSensitivity(QSortFilterProxyModel * this_ptr, Qt::CaseSensitivity cs) {
  this_ptr->setSortCaseSensitivity(cs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_isSortLocaleAware(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->isSortLocaleAware();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setSortLocaleAware(QSortFilterProxyModel * this_ptr, bool on) {
  this_ptr->setSortLocaleAware(on);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_sortColumn(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->sortColumn();
}


RITUAL_EXPORT Qt::SortOrder ctr_qt_core_ffi_QSortFilterProxyModel_sortOrder(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->sortOrder();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_dynamicSortFilter(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->dynamicSortFilter();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setDynamicSortFilter(QSortFilterProxyModel * this_ptr, bool enable) {
  this_ptr->setDynamicSortFilter(enable);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_sortRole(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->sortRole();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setSortRole(QSortFilterProxyModel * this_ptr, int role) {
  this_ptr->setSortRole(role);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_filterRole(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->filterRole();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterRole(QSortFilterProxyModel * this_ptr, int role) {
  this_ptr->setFilterRole(role);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterRegExp1(QSortFilterProxyModel * this_ptr, QString const * pattern) {
  this_ptr->setFilterRegExp(*pattern);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterWildcard(QSortFilterProxyModel * this_ptr, QString const * pattern) {
  this_ptr->setFilterWildcard(*pattern);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterFixedString(QSortFilterProxyModel * this_ptr, QString const * pattern) {
  this_ptr->setFilterFixedString(*pattern);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_clear(QSortFilterProxyModel * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_invalidate(QSortFilterProxyModel * this_ptr) {
  this_ptr->invalidate();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_index(QSortFilterProxyModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_parent(QSortFilterProxyModel const * this_ptr, QModelIndex const * child) {
  return new QModelIndex(this_ptr->parent(*child));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_sibling(QSortFilterProxyModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_rowCount(QSortFilterProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_columnCount(QSortFilterProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_hasChildren(QSortFilterProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->hasChildren(*parent);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSortFilterProxyModel_data(QSortFilterProxyModel const * this_ptr, QModelIndex const * index, int role) {
  return new QVariant(this_ptr->data(*index, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_setData(QSortFilterProxyModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSortFilterProxyModel_headerData(QSortFilterProxyModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_setHeaderData(QSortFilterProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value, int role) {
  return this_ptr->setHeaderData(section, orientation, *value, role);
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_QSortFilterProxyModel_mimeData(QSortFilterProxyModel const * this_ptr, QList< QModelIndex > const * indexes) {
  return this_ptr->mimeData(*indexes);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_dropMimeData(QSortFilterProxyModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_insertRows(QSortFilterProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_insertColumns(QSortFilterProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->insertColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_removeRows(QSortFilterProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_removeColumns(QSortFilterProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->removeColumns(column, count, *parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_fetchMore(QSortFilterProxyModel * this_ptr, QModelIndex const * parent) {
  this_ptr->fetchMore(*parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_canFetchMore(QSortFilterProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->canFetchMore(*parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_flags(QSortFilterProxyModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_buddy(QSortFilterProxyModel const * this_ptr, QModelIndex const * index) {
  return new QModelIndex(this_ptr->buddy(*index));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QSortFilterProxyModel_match(QSortFilterProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits, int flags) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits, QFlags< Qt::MatchFlag >(flags)));
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSortFilterProxyModel_span(QSortFilterProxyModel const * this_ptr, QModelIndex const * index) {
  return new QSize(this_ptr->span(*index));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_sort(QSortFilterProxyModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QSortFilterProxyModel_mimeTypes(QSortFilterProxyModel const * this_ptr) {
  return new QStringList(this_ptr->mimeTypes());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_supportedDropActions(QSortFilterProxyModel const * this_ptr) {
  return int(this_ptr->supportedDropActions());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_writableLocation(QStandardPaths::StandardLocation type) {
  return new QString(QStandardPaths::writableLocation(type));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStandardPaths_standardLocations(QStandardPaths::StandardLocation type) {
  return new QStringList(QStandardPaths::standardLocations(type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_locate(QStandardPaths::StandardLocation type, QString const * fileName, int options) {
  return new QString(QStandardPaths::locate(type, *fileName, QFlags< QStandardPaths::LocateOption >(options)));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStandardPaths_locateAll(QStandardPaths::StandardLocation type, QString const * fileName, int options) {
  return new QStringList(QStandardPaths::locateAll(type, *fileName, QFlags< QStandardPaths::LocateOption >(options)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_displayName(QStandardPaths::StandardLocation type) {
  return new QString(QStandardPaths::displayName(type));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_findExecutable(QString const * executableName, QStringList const * paths) {
  return new QString(QStandardPaths::findExecutable(*executableName, *paths));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStandardPaths_enableTestMode(bool testMode) {
  QStandardPaths::enableTestMode(testMode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStandardPaths_setTestModeEnabled(bool testMode) {
  QStandardPaths::setTestModeEnabled(testMode);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStandardPaths_isTestModeEnabled() {
  return QStandardPaths::isTestModeEnabled();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QState_metaObject(QState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QState_qt_metacast(QState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QState_qt_metacall(QState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QState_tr(char const * s, char const * c, int n) {
  return new QString(QState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QState_trUtf8(char const * s, char const * c, int n) {
  return new QString(QState::trUtf8(s, c, n));
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QState_QState(QState * parent) {
  return new QState(parent);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QState_QState1(QState::ChildMode childMode, QState * parent) {
  return new QState(childMode, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_dQState(QState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QState_errorState(QState const * this_ptr) {
  return this_ptr->errorState();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_setErrorState(QState * this_ptr, QAbstractState * state) {
  this_ptr->setErrorState(state);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_addTransition(QState * this_ptr, QAbstractTransition * transition) {
  this_ptr->addTransition(transition);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_QState_addTransition1(QState * this_ptr, QObject const * sender, char const * signal, QAbstractState * target) {
  return this_ptr->addTransition(sender, signal, target);
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QState_addTransition2(QState * this_ptr, QAbstractState * target) {
  return this_ptr->addTransition(target);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_removeTransition(QState * this_ptr, QAbstractTransition * transition) {
  this_ptr->removeTransition(transition);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QState_transitions(QState const * this_ptr) {
  return new QList< QAbstractTransition * >(this_ptr->transitions());
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QState_initialState(QState const * this_ptr) {
  return this_ptr->initialState();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_setInitialState(QState * this_ptr, QAbstractState * state) {
  this_ptr->setInitialState(state);
}


RITUAL_EXPORT QState::ChildMode ctr_qt_core_ffi_QState_childMode(QState const * this_ptr) {
  return this_ptr->childMode();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_setChildMode(QState * this_ptr, QState::ChildMode mode) {
  this_ptr->setChildMode(mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QState_assignProperty(QState * this_ptr, QObject * object, char const * name, QVariant const * value) {
  this_ptr->assignProperty(object, name, *value);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QStateMachine_metaObject(QStateMachine const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QStateMachine_qt_metacast(QStateMachine * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStateMachine_qt_metacall(QStateMachine * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStateMachine_tr(char const * s, char const * c, int n) {
  return new QString(QStateMachine::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStateMachine_trUtf8(char const * s, char const * c, int n) {
  return new QString(QStateMachine::trUtf8(s, c, n));
}


RITUAL_EXPORT QStateMachine::SignalEvent * ctr_qt_core_ffi_QStateMachine_SignalEvent_SignalEvent(QObject * sender, int signalIndex, QList< QVariant > const * arguments) {
  return new QStateMachine::SignalEvent(sender, signalIndex, *arguments);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_SignalEvent_dSignalEvent(QStateMachine::SignalEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QStateMachine_SignalEvent_sender(QStateMachine::SignalEvent const * this_ptr) {
  return this_ptr->sender();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStateMachine_SignalEvent_signalIndex(QStateMachine::SignalEvent const * this_ptr) {
  return this_ptr->signalIndex();
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QStateMachine_SignalEvent_arguments(QStateMachine::SignalEvent const * this_ptr) {
  return new QList< QVariant >(this_ptr->arguments());
}


RITUAL_EXPORT QStateMachine::WrappedEvent * ctr_qt_core_ffi_QStateMachine_WrappedEvent_WrappedEvent(QObject * object, QEvent * event) {
  return new QStateMachine::WrappedEvent(object, event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_WrappedEvent_dWrappedEvent(QStateMachine::WrappedEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QStateMachine_WrappedEvent_object(QStateMachine::WrappedEvent const * this_ptr) {
  return this_ptr->object();
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_QStateMachine_WrappedEvent_event(QStateMachine::WrappedEvent const * this_ptr) {
  return this_ptr->event();
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QStateMachine_QStateMachine(QObject * parent) {
  return new QStateMachine(parent);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QStateMachine_QStateMachine1(QState::ChildMode childMode, QObject * parent) {
  return new QStateMachine(childMode, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_dQStateMachine(QStateMachine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_addState(QStateMachine * this_ptr, QAbstractState * state) {
  this_ptr->addState(state);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_removeState(QStateMachine * this_ptr, QAbstractState * state) {
  this_ptr->removeState(state);
}


RITUAL_EXPORT QStateMachine::Error ctr_qt_core_ffi_QStateMachine_error(QStateMachine const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStateMachine_errorString(QStateMachine const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_clearError(QStateMachine * this_ptr) {
  this_ptr->clearError();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStateMachine_isRunning(QStateMachine const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStateMachine_isAnimated(QStateMachine const * this_ptr) {
  return this_ptr->isAnimated();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_setAnimated(QStateMachine * this_ptr, bool enabled) {
  this_ptr->setAnimated(enabled);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_addDefaultAnimation(QStateMachine * this_ptr, QAbstractAnimation * animation) {
  this_ptr->addDefaultAnimation(animation);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QStateMachine_defaultAnimations(QStateMachine const * this_ptr) {
  return new QList< QAbstractAnimation * >(this_ptr->defaultAnimations());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_removeDefaultAnimation(QStateMachine * this_ptr, QAbstractAnimation * animation) {
  this_ptr->removeDefaultAnimation(animation);
}


RITUAL_EXPORT QState::RestorePolicy ctr_qt_core_ffi_QStateMachine_globalRestorePolicy(QStateMachine const * this_ptr) {
  return this_ptr->globalRestorePolicy();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_setGlobalRestorePolicy(QStateMachine * this_ptr, QState::RestorePolicy restorePolicy) {
  this_ptr->setGlobalRestorePolicy(restorePolicy);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_postEvent(QStateMachine * this_ptr, QEvent * event, QStateMachine::EventPriority priority) {
  this_ptr->postEvent(event, priority);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStateMachine_postDelayedEvent(QStateMachine * this_ptr, QEvent * event, int delay) {
  return this_ptr->postDelayedEvent(event, delay);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStateMachine_cancelDelayedEvent(QStateMachine * this_ptr, int id) {
  return this_ptr->cancelDelayedEvent(id);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QStateMachine_configuration(QStateMachine const * this_ptr) {
  return new QSet< QAbstractState * >(this_ptr->configuration());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStateMachine_eventFilter(QStateMachine * this_ptr, QObject * watched, QEvent * event) {
  return this_ptr->eventFilter(watched, event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_start(QStateMachine * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_stop(QStateMachine * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_setRunning(QStateMachine * this_ptr, bool running) {
  this_ptr->setRunning(running);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_QStorageInfo() {
  return new QStorageInfo();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_QStorageInfo1(QString const * path) {
  return new QStorageInfo(*path);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_QStorageInfo2(QDir const * dir) {
  return new QStorageInfo(*dir);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_QStorageInfo3(QStorageInfo const * other) {
  return new QStorageInfo(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStorageInfo_dQStorageInfo(QStorageInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_operator_(QStorageInfo * this_ptr, QStorageInfo const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStorageInfo_swap(QStorageInfo * this_ptr, QStorageInfo * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStorageInfo_setPath(QStorageInfo * this_ptr, QString const * path) {
  this_ptr->setPath(*path);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStorageInfo_rootPath(QStorageInfo const * this_ptr) {
  return new QString(this_ptr->rootPath());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStorageInfo_device(QStorageInfo const * this_ptr) {
  return new QByteArray(this_ptr->device());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStorageInfo_subvolume(QStorageInfo const * this_ptr) {
  return new QByteArray(this_ptr->subvolume());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStorageInfo_fileSystemType(QStorageInfo const * this_ptr) {
  return new QByteArray(this_ptr->fileSystemType());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStorageInfo_name(QStorageInfo const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStorageInfo_displayName(QStorageInfo const * this_ptr) {
  return new QString(this_ptr->displayName());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QStorageInfo_bytesTotal(QStorageInfo const * this_ptr) {
  return this_ptr->bytesTotal();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QStorageInfo_bytesFree(QStorageInfo const * this_ptr) {
  return this_ptr->bytesFree();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QStorageInfo_bytesAvailable(QStorageInfo const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStorageInfo_blockSize(QStorageInfo const * this_ptr) {
  return this_ptr->blockSize();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStorageInfo_isRoot(QStorageInfo const * this_ptr) {
  return this_ptr->isRoot();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStorageInfo_isReadOnly(QStorageInfo const * this_ptr) {
  return this_ptr->isReadOnly();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStorageInfo_isReady(QStorageInfo const * this_ptr) {
  return this_ptr->isReady();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStorageInfo_isValid(QStorageInfo const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStorageInfo_refresh(QStorageInfo * this_ptr) {
  this_ptr->refresh();
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QStorageInfo_mountedVolumes() {
  return new QList< QStorageInfo >(QStorageInfo::mountedVolumes());
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QStorageInfo_root() {
  return new QStorageInfo(QStorageInfo::root());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__189(QStorageInfo const * first, QStorageInfo const * second) {
  return operator==(*first, *second);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QStringListModel_metaObject(QStringListModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QStringListModel_qt_metacast(QStringListModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringListModel_qt_metacall(QStringListModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStringListModel_tr(char const * s, char const * c, int n) {
  return new QString(QStringListModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStringListModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QStringListModel::trUtf8(s, c, n));
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_QStringListModel_QStringListModel(QObject * parent) {
  return new QStringListModel(parent);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_QStringListModel_QStringListModel1(QStringList const * strings, QObject * parent) {
  return new QStringListModel(*strings, parent);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringListModel_rowCount(QStringListModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QStringListModel_sibling(QStringListModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QStringListModel_data(QStringListModel const * this_ptr, QModelIndex const * index, int role) {
  return new QVariant(this_ptr->data(*index, role));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_setData(QStringListModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringListModel_flags(QStringListModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_insertRows(QStringListModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_removeRows(QStringListModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringListModel_sort(QStringListModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringListModel_stringList(QStringListModel const * this_ptr) {
  return new QStringList(this_ptr->stringList());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringListModel_setStringList(QStringListModel * this_ptr, QStringList const * strings) {
  this_ptr->setStringList(*strings);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringListModel_supportedDropActions(QStringListModel const * this_ptr) {
  return int(this_ptr->supportedDropActions());
}


RITUAL_EXPORT QSystemSemaphore * ctr_qt_core_ffi_QSystemSemaphore_QSystemSemaphore(QString const * key, int initialValue, QSystemSemaphore::AccessMode mode) {
  return new QSystemSemaphore(*key, initialValue, mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSystemSemaphore_dQSystemSemaphore(QSystemSemaphore * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSystemSemaphore_setKey(QSystemSemaphore * this_ptr, QString const * key, int initialValue, QSystemSemaphore::AccessMode mode) {
  this_ptr->setKey(*key, initialValue, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSystemSemaphore_key(QSystemSemaphore const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSystemSemaphore_acquire(QSystemSemaphore * this_ptr) {
  return this_ptr->acquire();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSystemSemaphore_release(QSystemSemaphore * this_ptr, int n) {
  return this_ptr->release(n);
}


RITUAL_EXPORT QSystemSemaphore::SystemSemaphoreError ctr_qt_core_ffi_QSystemSemaphore_error(QSystemSemaphore const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QSystemSemaphore_errorString(QSystemSemaphore const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QTemporaryDir * ctr_qt_core_ffi_QTemporaryDir_QTemporaryDir() {
  return new QTemporaryDir();
}


RITUAL_EXPORT QTemporaryDir * ctr_qt_core_ffi_QTemporaryDir_QTemporaryDir1(QString const * templateName) {
  return new QTemporaryDir(*templateName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTemporaryDir_dQTemporaryDir(QTemporaryDir * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryDir_isValid(QTemporaryDir const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryDir_errorString(QTemporaryDir const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryDir_autoRemove(QTemporaryDir const * this_ptr) {
  return this_ptr->autoRemove();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTemporaryDir_setAutoRemove(QTemporaryDir * this_ptr, bool b) {
  this_ptr->setAutoRemove(b);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryDir_remove(QTemporaryDir * this_ptr) {
  return this_ptr->remove();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryDir_path(QTemporaryDir const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryDir_filePath(QTemporaryDir const * this_ptr, QString const * fileName) {
  return new QString(this_ptr->filePath(*fileName));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTemporaryFile_metaObject(QTemporaryFile const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QTemporaryFile_qt_metacast(QTemporaryFile * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTemporaryFile_qt_metacall(QTemporaryFile * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryFile_tr(char const * s, char const * c, int n) {
  return new QString(QTemporaryFile::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryFile_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTemporaryFile::trUtf8(s, c, n));
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_QTemporaryFile() {
  return new QTemporaryFile();
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_QTemporaryFile1(QString const * templateName) {
  return new QTemporaryFile(*templateName);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_QTemporaryFile2(QObject * parent) {
  return new QTemporaryFile(parent);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_QTemporaryFile3(QString const * templateName, QObject * parent) {
  return new QTemporaryFile(*templateName, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTemporaryFile_dQTemporaryFile(QTemporaryFile * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryFile_autoRemove(QTemporaryFile const * this_ptr) {
  return this_ptr->autoRemove();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTemporaryFile_setAutoRemove(QTemporaryFile * this_ptr, bool b) {
  this_ptr->setAutoRemove(b);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryFile_open(QTemporaryFile * this_ptr) {
  return this_ptr->open();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryFile_fileName(QTemporaryFile const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTemporaryFile_fileTemplate(QTemporaryFile const * this_ptr) {
  return new QString(this_ptr->fileTemplate());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTemporaryFile_setFileTemplate(QTemporaryFile * this_ptr, QString const * name) {
  this_ptr->setFileTemplate(*name);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_createLocalFile(QString const * fileName) {
  return QTemporaryFile::createLocalFile(*fileName);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_createLocalFile1(QFile * file) {
  return QTemporaryFile::createLocalFile(*file);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_createNativeFile(QString const * fileName) {
  return QTemporaryFile::createNativeFile(*fileName);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_QTemporaryFile_createNativeFile1(QFile * file) {
  return QTemporaryFile::createNativeFile(*file);
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder() {
  return new QTextBoundaryFinder();
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder1(QTextBoundaryFinder const * other) {
  return new QTextBoundaryFinder(*other);
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_operator_(QTextBoundaryFinder * this_ptr, QTextBoundaryFinder const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextBoundaryFinder_dQTextBoundaryFinder(QTextBoundaryFinder * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder2(QTextBoundaryFinder::BoundaryType type, QString const * string) {
  return new QTextBoundaryFinder(type, *string);
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder3(QTextBoundaryFinder::BoundaryType type, QChar const * chars, int length, unsigned char * buffer, int bufferSize) {
  return new QTextBoundaryFinder(type, chars, length, buffer, bufferSize);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextBoundaryFinder_isValid(QTextBoundaryFinder const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QTextBoundaryFinder::BoundaryType ctr_qt_core_ffi_QTextBoundaryFinder_type(QTextBoundaryFinder const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextBoundaryFinder_string(QTextBoundaryFinder const * this_ptr) {
  return new QString(this_ptr->string());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextBoundaryFinder_toStart(QTextBoundaryFinder * this_ptr) {
  this_ptr->toStart();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextBoundaryFinder_toEnd(QTextBoundaryFinder * this_ptr) {
  this_ptr->toEnd();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextBoundaryFinder_position(QTextBoundaryFinder const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextBoundaryFinder_setPosition(QTextBoundaryFinder * this_ptr, int position) {
  this_ptr->setPosition(position);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextBoundaryFinder_toNextBoundary(QTextBoundaryFinder * this_ptr) {
  return this_ptr->toNextBoundary();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextBoundaryFinder_toPreviousBoundary(QTextBoundaryFinder * this_ptr) {
  return this_ptr->toPreviousBoundary();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextBoundaryFinder_isAtBoundary(QTextBoundaryFinder const * this_ptr) {
  return this_ptr->isAtBoundary();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextBoundaryFinder_boundaryReasons(QTextBoundaryFinder const * this_ptr) {
  return int(this_ptr->boundaryReasons());
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForName(QByteArray const * name) {
  return QTextCodec::codecForName(*name);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForName1(char const * name) {
  return QTextCodec::codecForName(name);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForMib(int mib) {
  return QTextCodec::codecForMib(mib);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTextCodec_availableCodecs() {
  return new QList< QByteArray >(QTextCodec::availableCodecs());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QTextCodec_availableMibs() {
  return new QList< int >(QTextCodec::availableMibs());
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForLocale() {
  return QTextCodec::codecForLocale();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextCodec_setCodecForLocale(QTextCodec * c) {
  QTextCodec::setCodecForLocale(c);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForHtml(QByteArray const * ba) {
  return QTextCodec::codecForHtml(*ba);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForHtml1(QByteArray const * ba, QTextCodec * defaultCodec) {
  return QTextCodec::codecForHtml(*ba, defaultCodec);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForUtfText(QByteArray const * ba) {
  return QTextCodec::codecForUtfText(*ba);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QTextCodec_codecForUtfText1(QByteArray const * ba, QTextCodec * defaultCodec) {
  return QTextCodec::codecForUtfText(*ba, defaultCodec);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextCodec_canEncode(QTextCodec const * this_ptr, QChar const * arg1) {
  return this_ptr->canEncode(*arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextCodec_canEncode1(QTextCodec const * this_ptr, QString const * arg1) {
  return this_ptr->canEncode(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextCodec_toUnicode(QTextCodec const * this_ptr, QByteArray const * arg1) {
  return new QString(this_ptr->toUnicode(*arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextCodec_toUnicode1(QTextCodec const * this_ptr, char const * chars) {
  return new QString(this_ptr->toUnicode(chars));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextCodec_fromUnicode(QTextCodec const * this_ptr, QString const * uc) {
  return new QByteArray(this_ptr->fromUnicode(*uc));
}


RITUAL_EXPORT QTextDecoder * ctr_qt_core_ffi_QTextCodec_makeDecoder(QTextCodec const * this_ptr, int flags) {
  return this_ptr->makeDecoder(QFlags< QTextCodec::ConversionFlag >(flags));
}


RITUAL_EXPORT QTextEncoder * ctr_qt_core_ffi_QTextCodec_makeEncoder(QTextCodec const * this_ptr, int flags) {
  return this_ptr->makeEncoder(QFlags< QTextCodec::ConversionFlag >(flags));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextCodec_name(QTextCodec const * this_ptr) {
  return new QByteArray(this_ptr->name());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTextCodec_aliases(QTextCodec const * this_ptr) {
  return new QList< QByteArray >(this_ptr->aliases());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTextCodec_mibEnum(QTextCodec const * this_ptr) {
  return this_ptr->mibEnum();
}


RITUAL_EXPORT QTextEncoder * ctr_qt_core_ffi_QTextEncoder_QTextEncoder(QTextCodec const * codec) {
  return new QTextEncoder(codec);
}


RITUAL_EXPORT QTextEncoder * ctr_qt_core_ffi_QTextEncoder_QTextEncoder1(QTextCodec const * codec, int flags) {
  return new QTextEncoder(codec, QFlags< QTextCodec::ConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextEncoder_dQTextEncoder(QTextEncoder * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextEncoder_fromUnicode(QTextEncoder * this_ptr, QString const * str) {
  return new QByteArray(this_ptr->fromUnicode(*str));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextEncoder_fromUnicode1(QTextEncoder * this_ptr, QChar const * uc, int len) {
  return new QByteArray(this_ptr->fromUnicode(uc, len));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextEncoder_hasFailure(QTextEncoder const * this_ptr) {
  return this_ptr->hasFailure();
}


RITUAL_EXPORT QTextDecoder * ctr_qt_core_ffi_QTextDecoder_QTextDecoder(QTextCodec const * codec) {
  return new QTextDecoder(codec);
}


RITUAL_EXPORT QTextDecoder * ctr_qt_core_ffi_QTextDecoder_QTextDecoder1(QTextCodec const * codec, int flags) {
  return new QTextDecoder(codec, QFlags< QTextCodec::ConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextDecoder_dQTextDecoder(QTextDecoder * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextDecoder_toUnicode(QTextDecoder * this_ptr, char const * chars, int len) {
  return new QString(this_ptr->toUnicode(chars, len));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextDecoder_toUnicode1(QTextDecoder * this_ptr, QByteArray const * ba) {
  return new QString(this_ptr->toUnicode(*ba));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextDecoder_toUnicode2(QTextDecoder * this_ptr, QString * target, char const * chars, int len) {
  this_ptr->toUnicode(target, chars, len);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextDecoder_hasFailure(QTextDecoder const * this_ptr) {
  return this_ptr->hasFailure();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QThread_metaObject(QThread const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QThread_qt_metacast(QThread * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThread_qt_metacall(QThread * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QThread_tr(char const * s, char const * c, int n) {
  return new QString(QThread::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QThread_trUtf8(char const * s, char const * c, int n) {
  return new QString(QThread::trUtf8(s, c, n));
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QThread_currentThreadId() {
  return QThread::currentThreadId();
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_QThread_currentThread() {
  return QThread::currentThread();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThread_idealThreadCount() {
  return QThread::idealThreadCount();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_yieldCurrentThread() {
  QThread::yieldCurrentThread();
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_QThread_QThread(QObject * parent) {
  return new QThread(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_dQThread(QThread * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_setPriority(QThread * this_ptr, QThread::Priority priority) {
  this_ptr->setPriority(priority);
}


RITUAL_EXPORT QThread::Priority ctr_qt_core_ffi_QThread_priority(QThread const * this_ptr) {
  return this_ptr->priority();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_isFinished(QThread const * this_ptr) {
  return this_ptr->isFinished();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_isRunning(QThread const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_requestInterruption(QThread * this_ptr) {
  this_ptr->requestInterruption();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_isInterruptionRequested(QThread const * this_ptr) {
  return this_ptr->isInterruptionRequested();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_setStackSize(QThread * this_ptr, unsigned int stackSize) {
  this_ptr->setStackSize(stackSize);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QThread_stackSize(QThread const * this_ptr) {
  return this_ptr->stackSize();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_exit(QThread * this_ptr, int retcode) {
  this_ptr->exit(retcode);
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_QThread_eventDispatcher(QThread const * this_ptr) {
  return this_ptr->eventDispatcher();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_setEventDispatcher(QThread * this_ptr, QAbstractEventDispatcher * eventDispatcher) {
  this_ptr->setEventDispatcher(eventDispatcher);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_event(QThread * this_ptr, QEvent * event) {
  return this_ptr->event(event);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThread_loopLevel(QThread const * this_ptr) {
  return this_ptr->loopLevel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_start(QThread * this_ptr, QThread::Priority arg1) {
  this_ptr->start(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_terminate(QThread * this_ptr) {
  this_ptr->terminate();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_quit(QThread * this_ptr) {
  this_ptr->quit();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_wait(QThread * this_ptr, unsigned long time) {
  return this_ptr->wait(time);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_sleep(unsigned long arg1) {
  QThread::sleep(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_msleep(unsigned long arg1) {
  QThread::msleep(arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_usleep(unsigned long arg1) {
  QThread::usleep(arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QThreadPool_metaObject(QThreadPool const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QThreadPool_qt_metacast(QThreadPool * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThreadPool_qt_metacall(QThreadPool * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QThreadPool_tr(char const * s, char const * c, int n) {
  return new QString(QThreadPool::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QThreadPool_trUtf8(char const * s, char const * c, int n) {
  return new QString(QThreadPool::trUtf8(s, c, n));
}


RITUAL_EXPORT QThreadPool * ctr_qt_core_ffi_QThreadPool_QThreadPool(QObject * parent) {
  return new QThreadPool(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_dQThreadPool(QThreadPool * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QThreadPool * ctr_qt_core_ffi_QThreadPool_globalInstance() {
  return QThreadPool::globalInstance();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_start(QThreadPool * this_ptr, QRunnable * runnable, int priority) {
  this_ptr->start(runnable, priority);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThreadPool_tryStart(QThreadPool * this_ptr, QRunnable * runnable) {
  return this_ptr->tryStart(runnable);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThreadPool_expiryTimeout(QThreadPool const * this_ptr) {
  return this_ptr->expiryTimeout();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_setExpiryTimeout(QThreadPool * this_ptr, int expiryTimeout) {
  this_ptr->setExpiryTimeout(expiryTimeout);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThreadPool_maxThreadCount(QThreadPool const * this_ptr) {
  return this_ptr->maxThreadCount();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_setMaxThreadCount(QThreadPool * this_ptr, int maxThreadCount) {
  this_ptr->setMaxThreadCount(maxThreadCount);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QThreadPool_activeThreadCount(QThreadPool const * this_ptr) {
  return this_ptr->activeThreadCount();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_reserveThread(QThreadPool * this_ptr) {
  this_ptr->reserveThread();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_releaseThread(QThreadPool * this_ptr) {
  this_ptr->releaseThread();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThreadPool_waitForDone(QThreadPool * this_ptr, int msecs) {
  return this_ptr->waitForDone(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_clear(QThreadPool * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_cancel(QThreadPool * this_ptr, QRunnable * runnable) {
  this_ptr->cancel(runnable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThreadPool_tryTake(QThreadPool * this_ptr, QRunnable * runnable) {
  return this_ptr->tryTake(runnable);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTimeLine_metaObject(QTimeLine const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QTimeLine_qt_metacast(QTimeLine * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_qt_metacall(QTimeLine * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeLine_tr(char const * s, char const * c, int n) {
  return new QString(QTimeLine::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeLine_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTimeLine::trUtf8(s, c, n));
}


RITUAL_EXPORT QTimeLine * ctr_qt_core_ffi_QTimeLine_QTimeLine(int duration, QObject * parent) {
  return new QTimeLine(duration, parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_dQTimeLine(QTimeLine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTimeLine::State ctr_qt_core_ffi_QTimeLine_state(QTimeLine const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_loopCount(QTimeLine const * this_ptr) {
  return this_ptr->loopCount();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setLoopCount(QTimeLine * this_ptr, int count) {
  this_ptr->setLoopCount(count);
}


RITUAL_EXPORT QTimeLine::Direction ctr_qt_core_ffi_QTimeLine_direction(QTimeLine const * this_ptr) {
  return this_ptr->direction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setDirection(QTimeLine * this_ptr, QTimeLine::Direction direction) {
  this_ptr->setDirection(direction);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_duration(QTimeLine const * this_ptr) {
  return this_ptr->duration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setDuration(QTimeLine * this_ptr, int duration) {
  this_ptr->setDuration(duration);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_startFrame(QTimeLine const * this_ptr) {
  return this_ptr->startFrame();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setStartFrame(QTimeLine * this_ptr, int frame) {
  this_ptr->setStartFrame(frame);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_endFrame(QTimeLine const * this_ptr) {
  return this_ptr->endFrame();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setEndFrame(QTimeLine * this_ptr, int frame) {
  this_ptr->setEndFrame(frame);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setFrameRange(QTimeLine * this_ptr, int startFrame, int endFrame) {
  this_ptr->setFrameRange(startFrame, endFrame);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_updateInterval(QTimeLine const * this_ptr) {
  return this_ptr->updateInterval();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setUpdateInterval(QTimeLine * this_ptr, int interval) {
  this_ptr->setUpdateInterval(interval);
}


RITUAL_EXPORT QTimeLine::CurveShape ctr_qt_core_ffi_QTimeLine_curveShape(QTimeLine const * this_ptr) {
  return this_ptr->curveShape();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setCurveShape(QTimeLine * this_ptr, QTimeLine::CurveShape shape) {
  this_ptr->setCurveShape(shape);
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QTimeLine_easingCurve(QTimeLine const * this_ptr) {
  return new QEasingCurve(this_ptr->easingCurve());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setEasingCurve(QTimeLine * this_ptr, QEasingCurve const * curve) {
  this_ptr->setEasingCurve(*curve);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_currentTime(QTimeLine const * this_ptr) {
  return this_ptr->currentTime();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_currentFrame(QTimeLine const * this_ptr) {
  return this_ptr->currentFrame();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QTimeLine_currentValue(QTimeLine const * this_ptr) {
  return this_ptr->currentValue();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeLine_frameForTime(QTimeLine const * this_ptr, int msec) {
  return this_ptr->frameForTime(msec);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QTimeLine_valueForTime(QTimeLine const * this_ptr, int msec) {
  return this_ptr->valueForTime(msec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_start(QTimeLine * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_resume(QTimeLine * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_stop(QTimeLine * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setPaused(QTimeLine * this_ptr, bool paused) {
  this_ptr->setPaused(paused);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_setCurrentTime(QTimeLine * this_ptr, int msec) {
  this_ptr->setCurrentTime(msec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeLine_toggleDirection(QTimeLine * this_ptr) {
  this_ptr->toggleDirection();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTimer_metaObject(QTimer const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QTimer_qt_metacast(QTimer * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimer_qt_metacall(QTimer * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimer_tr(char const * s, char const * c, int n) {
  return new QString(QTimer::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimer_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTimer::trUtf8(s, c, n));
}


RITUAL_EXPORT QTimer * ctr_qt_core_ffi_QTimer_QTimer(QObject * parent) {
  return new QTimer(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_dQTimer(QTimer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimer_isActive(QTimer const * this_ptr) {
  return this_ptr->isActive();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimer_timerId(QTimer const * this_ptr) {
  return this_ptr->timerId();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_setInterval(QTimer * this_ptr, int msec) {
  this_ptr->setInterval(msec);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimer_interval(QTimer const * this_ptr) {
  return this_ptr->interval();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimer_remainingTime(QTimer const * this_ptr) {
  return this_ptr->remainingTime();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_setTimerType(QTimer * this_ptr, Qt::TimerType atype) {
  this_ptr->setTimerType(atype);
}


RITUAL_EXPORT Qt::TimerType ctr_qt_core_ffi_QTimer_timerType(QTimer const * this_ptr) {
  return this_ptr->timerType();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_setSingleShot(QTimer * this_ptr, bool singleShot) {
  this_ptr->setSingleShot(singleShot);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimer_isSingleShot(QTimer const * this_ptr) {
  return this_ptr->isSingleShot();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_singleShot(int msec, QObject const * receiver, char const * member) {
  QTimer::singleShot(msec, receiver, member);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_singleShot1(int msec, Qt::TimerType timerType, QObject const * receiver, char const * member) {
  QTimer::singleShot(msec, timerType, receiver, member);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_start(QTimer * this_ptr, int msec) {
  this_ptr->start(msec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_start1(QTimer * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimer_stop(QTimer * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone() {
  return new QTimeZone();
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone1(QByteArray const * ianaId) {
  return new QTimeZone(*ianaId);
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone2(int offsetSeconds) {
  return new QTimeZone(offsetSeconds);
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone3(QByteArray const * zoneId, int offsetSeconds, QString const * name, QString const * abbreviation, QLocale::Country country, QString const * comment) {
  return new QTimeZone(*zoneId, offsetSeconds, *name, *abbreviation, country, *comment);
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone4(QTimeZone const * other) {
  return new QTimeZone(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeZone_dQTimeZone(QTimeZone * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_operator_(QTimeZone * this_ptr, QTimeZone const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeZone_swap(QTimeZone * this_ptr, QTimeZone * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_operator__(QTimeZone const * this_ptr, QTimeZone const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_isValid(QTimeZone const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTimeZone_id(QTimeZone const * this_ptr) {
  return new QByteArray(this_ptr->id());
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QTimeZone_country(QTimeZone const * this_ptr) {
  return this_ptr->country();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_comment(QTimeZone const * this_ptr) {
  return new QString(this_ptr->comment());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName(QTimeZone const * this_ptr, QDateTime const * atDateTime, QTimeZone::NameType nameType, QLocale const * locale) {
  return new QString(this_ptr->displayName(*atDateTime, nameType, *locale));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName1(QTimeZone const * this_ptr, QTimeZone::TimeType timeType, QTimeZone::NameType nameType, QLocale const * locale) {
  return new QString(this_ptr->displayName(timeType, nameType, *locale));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_abbreviation(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return new QString(this_ptr->abbreviation(*atDateTime));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_offsetFromUtc(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return this_ptr->offsetFromUtc(*atDateTime);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_standardTimeOffset(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return this_ptr->standardTimeOffset(*atDateTime);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTimeZone_daylightTimeOffset(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return this_ptr->daylightTimeOffset(*atDateTime);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_hasDaylightTime(QTimeZone const * this_ptr) {
  return this_ptr->hasDaylightTime();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_isDaylightTime(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return this_ptr->isDaylightTime(*atDateTime);
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_offsetData(QTimeZone const * this_ptr, QDateTime const * forDateTime) {
  return new QTimeZone::OffsetData(this_ptr->offsetData(*forDateTime));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_hasTransitions(QTimeZone const * this_ptr) {
  return this_ptr->hasTransitions();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_nextTransition(QTimeZone const * this_ptr, QDateTime const * afterDateTime) {
  return new QTimeZone::OffsetData(this_ptr->nextTransition(*afterDateTime));
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_previousTransition(QTimeZone const * this_ptr, QDateTime const * beforeDateTime) {
  return new QTimeZone::OffsetData(this_ptr->previousTransition(*beforeDateTime));
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QTimeZone_transitions(QTimeZone const * this_ptr, QDateTime const * fromDateTime, QDateTime const * toDateTime) {
  return new QVector< QTimeZone::OffsetData >(this_ptr->transitions(*fromDateTime, *toDateTime));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTimeZone_systemTimeZoneId() {
  return new QByteArray(QTimeZone::systemTimeZoneId());
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_systemTimeZone() {
  return new QTimeZone(QTimeZone::systemTimeZone());
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_utc() {
  return new QTimeZone(QTimeZone::utc());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTimeZone_isTimeZoneIdAvailable(QByteArray const * ianaId) {
  return QTimeZone::isTimeZoneIdAvailable(*ianaId);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTimeZone_availableTimeZoneIds() {
  return new QList< QByteArray >(QTimeZone::availableTimeZoneIds());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTimeZone_availableTimeZoneIds1(QLocale::Country country) {
  return new QList< QByteArray >(QTimeZone::availableTimeZoneIds(country));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTimeZone_availableTimeZoneIds2(int offsetSeconds) {
  return new QList< QByteArray >(QTimeZone::availableTimeZoneIds(offsetSeconds));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTimeZone_ianaIdToWindowsId(QByteArray const * ianaId) {
  return new QByteArray(QTimeZone::ianaIdToWindowsId(*ianaId));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTimeZone_windowsIdToDefaultIanaId(QByteArray const * windowsId) {
  return new QByteArray(QTimeZone::windowsIdToDefaultIanaId(*windowsId));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTimeZone_windowsIdToDefaultIanaId1(QByteArray const * windowsId, QLocale::Country country) {
  return new QByteArray(QTimeZone::windowsIdToDefaultIanaId(*windowsId, country));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTimeZone_windowsIdToIanaIds(QByteArray const * windowsId) {
  return new QList< QByteArray >(QTimeZone::windowsIdToIanaIds(*windowsId));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QTimeZone_windowsIdToIanaIds1(QByteArray const * windowsId, QLocale::Country country) {
  return new QList< QByteArray >(QTimeZone::windowsIdToIanaIds(*windowsId, country));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__191(QDataStream * ds, QTimeZone const * tz) {
  return &operator<<(*ds, *tz);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__192(QDataStream * ds, QTimeZone * tz) {
  return &operator>>(*ds, *tz);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__193(QDebug const * dbg, QTimeZone const * tz) {
  return new QDebug(operator<<(*dbg, *tz));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTranslator_metaObject(QTranslator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QTranslator_qt_metacast(QTranslator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QTranslator_qt_metacall(QTranslator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTranslator_tr(char const * s, char const * c, int n) {
  return new QString(QTranslator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTranslator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTranslator::trUtf8(s, c, n));
}


RITUAL_EXPORT QTranslator * ctr_qt_core_ffi_QTranslator_QTranslator(QObject * parent) {
  return new QTranslator(parent);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTranslator_dQTranslator(QTranslator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTranslator_translate(QTranslator const * this_ptr, char const * context, char const * sourceText, char const * disambiguation, int n) {
  return new QString(this_ptr->translate(context, sourceText, disambiguation, n));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_isEmpty(QTranslator const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load(QTranslator * this_ptr, QString const * filename, QString const * directory, QString const * search_delimiters, QString const * suffix) {
  return this_ptr->load(*filename, *directory, *search_delimiters, *suffix);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load1(QTranslator * this_ptr, QLocale const * locale, QString const * filename, QString const * prefix, QString const * directory, QString const * suffix) {
  return this_ptr->load(*locale, *filename, *prefix, *directory, *suffix);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load2(QTranslator * this_ptr, unsigned char const * data, int len, QString const * directory) {
  return this_ptr->load(data, len, *directory);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash31(QUrl const * url, unsigned int seed) {
  return qHash(*url, seed);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_QUrl() {
  return new QUrl();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_QUrl1(QUrl const * copy) {
  return new QUrl(*copy);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_operator_(QUrl * this_ptr, QUrl const * copy) {
  return &this_ptr->operator=(*copy);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_QUrl2(QString const * url, QUrl::ParsingMode mode) {
  return new QUrl(*url, mode);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_operator_1(QUrl * this_ptr, QString const * url) {
  return &this_ptr->operator=(*url);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_dQUrl(QUrl * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_swap(QUrl * this_ptr, QUrl * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUrl(QUrl * this_ptr, QString const * url, QUrl::ParsingMode mode) {
  this_ptr->setUrl(*url, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_url(QUrl const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QString(this_ptr->url(*options));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_toString(QUrl const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QString(this_ptr->toString(*options));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_toDisplayString(QUrl const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QString(this_ptr->toDisplayString(*options));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_adjusted(QUrl const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QUrl(this_ptr->adjusted(*options));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toEncoded(QUrl const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QByteArray(this_ptr->toEncoded(*options));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromEncoded(QByteArray const * url, QUrl::ParsingMode mode) {
  return new QUrl(QUrl::fromEncoded(*url, mode));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromUserInput(QString const * userInput) {
  return new QUrl(QUrl::fromUserInput(*userInput));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromUserInput1(QString const * userInput, QString const * workingDirectory, int options) {
  return new QUrl(QUrl::fromUserInput(*userInput, *workingDirectory, QFlags< QUrl::UserInputResolutionOption >(options)));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isValid(QUrl const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_errorString(QUrl const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isEmpty(QUrl const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_clear(QUrl * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setScheme(QUrl * this_ptr, QString const * scheme) {
  this_ptr->setScheme(*scheme);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_scheme(QUrl const * this_ptr) {
  return new QString(this_ptr->scheme());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setAuthority(QUrl * this_ptr, QString const * authority, QUrl::ParsingMode mode) {
  this_ptr->setAuthority(*authority, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_authority(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->authority(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUserInfo(QUrl * this_ptr, QString const * userInfo, QUrl::ParsingMode mode) {
  this_ptr->setUserInfo(*userInfo, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_userInfo(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->userInfo(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUserName(QUrl * this_ptr, QString const * userName, QUrl::ParsingMode mode) {
  this_ptr->setUserName(*userName, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_userName(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->userName(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setPassword(QUrl * this_ptr, QString const * password, QUrl::ParsingMode mode) {
  this_ptr->setPassword(*password, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_password(QUrl const * this_ptr, int arg1) {
  return new QString(this_ptr->password(QFlags< QUrl::ComponentFormattingOption >(arg1)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setHost(QUrl * this_ptr, QString const * host, QUrl::ParsingMode mode) {
  this_ptr->setHost(*host, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_host(QUrl const * this_ptr, int arg1) {
  return new QString(this_ptr->host(QFlags< QUrl::ComponentFormattingOption >(arg1)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_topLevelDomain(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->topLevelDomain(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setPort(QUrl * this_ptr, int port) {
  this_ptr->setPort(port);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QUrl_port(QUrl const * this_ptr, int defaultPort) {
  return this_ptr->port(defaultPort);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setPath(QUrl * this_ptr, QString const * path, QUrl::ParsingMode mode) {
  this_ptr->setPath(*path, mode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_path(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->path(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fileName(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->fileName(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_hasQuery(QUrl const * this_ptr) {
  return this_ptr->hasQuery();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setQuery(QUrl * this_ptr, QString const * query, QUrl::ParsingMode mode) {
  this_ptr->setQuery(*query, mode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setQuery1(QUrl * this_ptr, QUrlQuery const * query) {
  this_ptr->setQuery(*query);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_query(QUrl const * this_ptr, int arg1) {
  return new QString(this_ptr->query(QFlags< QUrl::ComponentFormattingOption >(arg1)));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_hasFragment(QUrl const * this_ptr) {
  return this_ptr->hasFragment();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fragment(QUrl const * this_ptr, int options) {
  return new QString(this_ptr->fragment(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setFragment(QUrl * this_ptr, QString const * fragment, QUrl::ParsingMode mode) {
  this_ptr->setFragment(*fragment, mode);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_resolved(QUrl const * this_ptr, QUrl const * relative) {
  return new QUrl(this_ptr->resolved(*relative));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isRelative(QUrl const * this_ptr) {
  return this_ptr->isRelative();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isParentOf(QUrl const * this_ptr, QUrl const * url) {
  return this_ptr->isParentOf(*url);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isLocalFile(QUrl const * this_ptr) {
  return this_ptr->isLocalFile();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromLocalFile(QString const * localfile) {
  return new QUrl(QUrl::fromLocalFile(*localfile));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_toLocalFile(QUrl const * this_ptr) {
  return new QString(this_ptr->toLocalFile());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_detach(QUrl * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_isDetached(QUrl const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_operator_3(QUrl const * this_ptr, QUrl const * url) {
  return this_ptr->operator<(*url);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_operator__(QUrl const * this_ptr, QUrl const * url) {
  return this_ptr->operator==(*url);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrl_matches(QUrl const * this_ptr, QUrl const * url, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return this_ptr->matches(*url, *options);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fromPercentEncoding(QByteArray const * arg1) {
  return new QString(QUrl::fromPercentEncoding(*arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toPercentEncoding(QString const * arg1, QByteArray const * exclude, QByteArray const * include) {
  return new QByteArray(QUrl::toPercentEncoding(*arg1, *exclude, *include));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fromAce(QByteArray const * arg1) {
  return new QString(QUrl::fromAce(*arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toAce(QString const * arg1) {
  return new QByteArray(QUrl::toAce(*arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QUrl_idnWhitelist() {
  return new QStringList(QUrl::idnWhitelist());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QUrl_toStringList(QList< QUrl > const * uris, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * options) {
  return new QStringList(QUrl::toStringList(*uris, *options));
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QUrl_fromStringList(QStringList const * uris, QUrl::ParsingMode mode) {
  return new QList< QUrl >(QUrl::fromStringList(*uris, mode));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setIdnWhitelist(QStringList const * arg1) {
  QUrl::setIdnWhitelist(*arg1);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_127(QUrl::UrlFormattingOption f1, QUrl::UrlFormattingOption f2) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(f1, f2));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_128(QUrl::UrlFormattingOption f1, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * f2) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(f1, *f2));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator__194(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * i, int f) {
  return &operator|=(*i, QFlags< QUrl::ComponentFormattingOption >(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_129(QUrl::UrlFormattingOption i, QUrl::ComponentFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(i, f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_130(QUrl::UrlFormattingOption i, int f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(i, QFlags< QUrl::ComponentFormattingOption >(f)));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_131(QUrl::ComponentFormattingOption f, QUrl::UrlFormattingOption i) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(f, i));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_132(int f, QUrl::UrlFormattingOption i) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(QFlags< QUrl::ComponentFormattingOption >(f), i));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_133(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * i, int f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(*i, QFlags< QUrl::ComponentFormattingOption >(f)));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_134(QUrl::ComponentFormattingOption f, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * i) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(f, *i));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_operator_135(int f, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * i) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(operator|(QFlags< QUrl::ComponentFormattingOption >(f), *i));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__195(QDataStream * arg1, QUrl const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__196(QDataStream * arg1, QUrl * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__197(QDebug const * arg1, QUrl const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash32(QUrlQuery const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QUrlQuery * ctr_qt_core_ffi_QUrlQuery_QUrlQuery() {
  return new QUrlQuery();
}


RITUAL_EXPORT QUrlQuery * ctr_qt_core_ffi_QUrlQuery_QUrlQuery1(QUrl const * url) {
  return new QUrlQuery(*url);
}


RITUAL_EXPORT QUrlQuery * ctr_qt_core_ffi_QUrlQuery_QUrlQuery2(QString const * queryString) {
  return new QUrlQuery(*queryString);
}


RITUAL_EXPORT QUrlQuery * ctr_qt_core_ffi_QUrlQuery_QUrlQuery3(QUrlQuery const * other) {
  return new QUrlQuery(*other);
}


RITUAL_EXPORT QUrlQuery * ctr_qt_core_ffi_QUrlQuery_operator_(QUrlQuery * this_ptr, QUrlQuery const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_dQUrlQuery(QUrlQuery * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlQuery_operator__(QUrlQuery const * this_ptr, QUrlQuery const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_swap(QUrlQuery * this_ptr, QUrlQuery * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlQuery_isEmpty(QUrlQuery const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlQuery_isDetached(QUrlQuery const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_clear(QUrlQuery * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_query(QUrlQuery const * this_ptr, int encoding) {
  return new QString(this_ptr->query(QFlags< QUrl::ComponentFormattingOption >(encoding)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_setQuery(QUrlQuery * this_ptr, QString const * queryString) {
  this_ptr->setQuery(*queryString);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_toString(QUrlQuery const * this_ptr, int encoding) {
  return new QString(this_ptr->toString(QFlags< QUrl::ComponentFormattingOption >(encoding)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_setQueryDelimiters(QUrlQuery * this_ptr, QChar const * valueDelimiter, QChar const * pairDelimiter) {
  this_ptr->setQueryDelimiters(*valueDelimiter, *pairDelimiter);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QUrlQuery_queryValueDelimiter(QUrlQuery const * this_ptr) {
  return new QChar(this_ptr->queryValueDelimiter());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QUrlQuery_queryPairDelimiter(QUrlQuery const * this_ptr) {
  return new QChar(this_ptr->queryPairDelimiter());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_setQueryItems(QUrlQuery * this_ptr, QList< QPair< QString, QString > > const * query) {
  this_ptr->setQueryItems(*query);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QUrlQuery_queryItems(QUrlQuery const * this_ptr, int encoding) {
  return new QList< QPair< QString, QString > >(this_ptr->queryItems(QFlags< QUrl::ComponentFormattingOption >(encoding)));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlQuery_hasQueryItem(QUrlQuery const * this_ptr, QString const * key) {
  return this_ptr->hasQueryItem(*key);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_addQueryItem(QUrlQuery * this_ptr, QString const * key, QString const * value) {
  this_ptr->addQueryItem(*key, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_removeQueryItem(QUrlQuery * this_ptr, QString const * key) {
  this_ptr->removeQueryItem(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_queryItemValue(QUrlQuery const * this_ptr, QString const * key, int encoding) {
  return new QString(this_ptr->queryItemValue(*key, QFlags< QUrl::ComponentFormattingOption >(encoding)));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QUrlQuery_allQueryItemValues(QUrlQuery const * this_ptr, QString const * key, int encoding) {
  return new QStringList(this_ptr->allQueryItemValues(*key, QFlags< QUrl::ComponentFormattingOption >(encoding)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlQuery_removeAllQueryItems(QUrlQuery * this_ptr, QString const * key) {
  this_ptr->removeAllQueryItems(*key);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QUrlQuery_defaultQueryValueDelimiter() {
  return new QChar(QUrlQuery::defaultQueryValueDelimiter());
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QUrlQuery_defaultQueryPairDelimiter() {
  return new QChar(QUrlQuery::defaultQueryPairDelimiter());
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid() {
  return new QUuid();
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid1(unsigned int l, unsigned short w1, unsigned short w2, unsigned char b1, unsigned char b2, unsigned char b3, unsigned char b4, unsigned char b5, unsigned char b6, unsigned char b7, unsigned char b8) {
  return new QUuid(l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8);
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid2(QString const * arg1) {
  return new QUuid(*arg1);
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid3(char const * arg1) {
  return new QUuid(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUuid_toString(QUuid const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid4(QByteArray const * arg1) {
  return new QUuid(*arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUuid_toByteArray(QUuid const * this_ptr) {
  return new QByteArray(this_ptr->toByteArray());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUuid_toRfc4122(QUuid const * this_ptr) {
  return new QByteArray(this_ptr->toRfc4122());
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_fromRfc4122(QByteArray const * arg1) {
  return new QUuid(QUuid::fromRfc4122(*arg1));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUuid_isNull(QUuid const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUuid_operator__(QUuid const * this_ptr, QUuid const * orig) {
  return this_ptr->operator==(*orig);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUuid_operator_(QUuid const * this_ptr, QUuid const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUuid_operator_1(QUuid const * this_ptr, QUuid const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_createUuid() {
  return new QUuid(QUuid::createUuid());
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_createUuidV3(QUuid const * ns, QByteArray const * baseData) {
  return new QUuid(QUuid::createUuidV3(*ns, *baseData));
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_createUuidV5(QUuid const * ns, QByteArray const * baseData) {
  return new QUuid(QUuid::createUuidV5(*ns, *baseData));
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_createUuidV31(QUuid const * ns, QString const * baseData) {
  return new QUuid(QUuid::createUuidV3(*ns, *baseData));
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_createUuidV51(QUuid const * ns, QString const * baseData) {
  return new QUuid(QUuid::createUuidV5(*ns, *baseData));
}


RITUAL_EXPORT QUuid::Variant ctr_qt_core_ffi_QUuid_variant(QUuid const * this_ptr) {
  return this_ptr->variant();
}


RITUAL_EXPORT QUuid::Version ctr_qt_core_ffi_QUuid_version(QUuid const * this_ptr) {
  return this_ptr->version();
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__198(QDataStream * arg1, QUuid const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__199(QDataStream * arg1, QUuid * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__200(QDebug const * arg1, QUuid const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash33(QUuid const * uuid, unsigned int seed) {
  return qHash(*uuid, seed);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__201(QUuid const * lhs, QUuid const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__202(QUuid const * lhs, QUuid const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QWaitCondition * ctr_qt_core_ffi_QWaitCondition_QWaitCondition() {
  return new QWaitCondition();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWaitCondition_dQWaitCondition(QWaitCondition * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait(QWaitCondition * this_ptr, QMutex * lockedMutex, unsigned long time) {
  return this_ptr->wait(lockedMutex, time);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait1(QWaitCondition * this_ptr, QReadWriteLock * lockedReadWriteLock, unsigned long time) {
  return this_ptr->wait(lockedReadWriteLock, time);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWaitCondition_wakeOne(QWaitCondition * this_ptr) {
  this_ptr->wakeOne();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWaitCondition_wakeAll(QWaitCondition * this_ptr) {
  this_ptr->wakeAll();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWaitCondition_notify_one(QWaitCondition * this_ptr) {
  this_ptr->notify_one();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QWaitCondition_notify_all(QWaitCondition * this_ptr) {
  this_ptr->notify_all();
}


RITUAL_EXPORT QXmlStreamStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_QXmlStreamStringRef() {
  return new QXmlStreamStringRef();
}


RITUAL_EXPORT QXmlStreamStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_QXmlStreamStringRef1(QStringRef const * aString) {
  return new QXmlStreamStringRef(*aString);
}


RITUAL_EXPORT QXmlStreamStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_QXmlStreamStringRef2(QString const * aString) {
  return new QXmlStreamStringRef(*aString);
}


RITUAL_EXPORT QXmlStreamStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_QXmlStreamStringRef4(QXmlStreamStringRef const * other) {
  return new QXmlStreamStringRef(*other);
}


RITUAL_EXPORT QXmlStreamStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_operator_1(QXmlStreamStringRef * this_ptr, QXmlStreamStringRef const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamStringRef_dQXmlStreamStringRef(QXmlStreamStringRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamStringRef_swap(QXmlStreamStringRef * this_ptr, QXmlStreamStringRef * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamStringRef_clear(QXmlStreamStringRef * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamStringRef_operator_QStringRef(QXmlStreamStringRef const * this_ptr) {
  return new QStringRef(this_ptr->operator QStringRef());
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QXmlStreamStringRef_string(QXmlStreamStringRef const * this_ptr) {
  return this_ptr->string();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QXmlStreamStringRef_position(QXmlStreamStringRef const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QXmlStreamStringRef_size(QXmlStreamStringRef const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QXmlStreamAttribute_QXmlStreamAttribute() {
  return new QXmlStreamAttribute();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QXmlStreamAttribute_QXmlStreamAttribute1(QString const * qualifiedName, QString const * value) {
  return new QXmlStreamAttribute(*qualifiedName, *value);
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QXmlStreamAttribute_QXmlStreamAttribute2(QString const * namespaceUri, QString const * name, QString const * value) {
  return new QXmlStreamAttribute(*namespaceUri, *name, *value);
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QXmlStreamAttribute_QXmlStreamAttribute3(QXmlStreamAttribute const * arg1) {
  return new QXmlStreamAttribute(*arg1);
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QXmlStreamAttribute_operator_1(QXmlStreamAttribute * this_ptr, QXmlStreamAttribute const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamAttribute_dQXmlStreamAttribute(QXmlStreamAttribute * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttribute_namespaceUri(QXmlStreamAttribute const * this_ptr) {
  return new QStringRef(this_ptr->namespaceUri());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttribute_name(QXmlStreamAttribute const * this_ptr) {
  return new QStringRef(this_ptr->name());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttribute_qualifiedName(QXmlStreamAttribute const * this_ptr) {
  return new QStringRef(this_ptr->qualifiedName());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttribute_prefix(QXmlStreamAttribute const * this_ptr) {
  return new QStringRef(this_ptr->prefix());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttribute_value(QXmlStreamAttribute const * this_ptr) {
  return new QStringRef(this_ptr->value());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamAttribute_isDefault(QXmlStreamAttribute const * this_ptr) {
  return this_ptr->isDefault();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamAttribute_operator__(QXmlStreamAttribute const * this_ptr, QXmlStreamAttribute const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QXmlStreamAttributes * ctr_qt_core_ffi_QXmlStreamAttributes_QXmlStreamAttributes() {
  return new QXmlStreamAttributes();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttributes_value(QXmlStreamAttributes const * this_ptr, QString const * namespaceUri, QString const * name) {
  return new QStringRef(this_ptr->value(*namespaceUri, *name));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttributes_value1(QXmlStreamAttributes const * this_ptr, QString const * namespaceUri, QLatin1String const * name) {
  return new QStringRef(this_ptr->value(*namespaceUri, *name));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttributes_value2(QXmlStreamAttributes const * this_ptr, QLatin1String const * namespaceUri, QLatin1String const * name) {
  return new QStringRef(this_ptr->value(*namespaceUri, *name));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttributes_value3(QXmlStreamAttributes const * this_ptr, QString const * qualifiedName) {
  return new QStringRef(this_ptr->value(*qualifiedName));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamAttributes_value4(QXmlStreamAttributes const * this_ptr, QLatin1String const * qualifiedName) {
  return new QStringRef(this_ptr->value(*qualifiedName));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamAttributes_append(QXmlStreamAttributes * this_ptr, QString const * namespaceUri, QString const * name, QString const * value) {
  this_ptr->append(*namespaceUri, *name, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamAttributes_append1(QXmlStreamAttributes * this_ptr, QString const * qualifiedName, QString const * value) {
  this_ptr->append(*qualifiedName, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamAttributes_hasAttribute(QXmlStreamAttributes const * this_ptr, QString const * qualifiedName) {
  return this_ptr->hasAttribute(*qualifiedName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamAttributes_hasAttribute1(QXmlStreamAttributes const * this_ptr, QLatin1String const * qualifiedName) {
  return this_ptr->hasAttribute(*qualifiedName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamAttributes_hasAttribute2(QXmlStreamAttributes const * this_ptr, QString const * namespaceUri, QString const * name) {
  return this_ptr->hasAttribute(*namespaceUri, *name);
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_QXmlStreamNamespaceDeclaration() {
  return new QXmlStreamNamespaceDeclaration();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_QXmlStreamNamespaceDeclaration1(QXmlStreamNamespaceDeclaration const * arg1) {
  return new QXmlStreamNamespaceDeclaration(*arg1);
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_QXmlStreamNamespaceDeclaration3(QString const * prefix, QString const * namespaceUri) {
  return new QXmlStreamNamespaceDeclaration(*prefix, *namespaceUri);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_dQXmlStreamNamespaceDeclaration(QXmlStreamNamespaceDeclaration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_operator_1(QXmlStreamNamespaceDeclaration * this_ptr, QXmlStreamNamespaceDeclaration const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_prefix(QXmlStreamNamespaceDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->prefix());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_namespaceUri(QXmlStreamNamespaceDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->namespaceUri());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamNamespaceDeclaration_operator__(QXmlStreamNamespaceDeclaration const * this_ptr, QXmlStreamNamespaceDeclaration const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_QXmlStreamNotationDeclaration() {
  return new QXmlStreamNotationDeclaration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamNotationDeclaration_dQXmlStreamNotationDeclaration(QXmlStreamNotationDeclaration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_QXmlStreamNotationDeclaration1(QXmlStreamNotationDeclaration const * arg1) {
  return new QXmlStreamNotationDeclaration(*arg1);
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_operator_(QXmlStreamNotationDeclaration * this_ptr, QXmlStreamNotationDeclaration const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_name(QXmlStreamNotationDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->name());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_systemId(QXmlStreamNotationDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->systemId());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamNotationDeclaration_publicId(QXmlStreamNotationDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->publicId());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamNotationDeclaration_operator__(QXmlStreamNotationDeclaration const * this_ptr, QXmlStreamNotationDeclaration const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_QXmlStreamEntityDeclaration() {
  return new QXmlStreamEntityDeclaration();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamEntityDeclaration_dQXmlStreamEntityDeclaration(QXmlStreamEntityDeclaration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_QXmlStreamEntityDeclaration1(QXmlStreamEntityDeclaration const * arg1) {
  return new QXmlStreamEntityDeclaration(*arg1);
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_operator_(QXmlStreamEntityDeclaration * this_ptr, QXmlStreamEntityDeclaration const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_name(QXmlStreamEntityDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->name());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_notationName(QXmlStreamEntityDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->notationName());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_systemId(QXmlStreamEntityDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->systemId());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_publicId(QXmlStreamEntityDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->publicId());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamEntityDeclaration_value(QXmlStreamEntityDeclaration const * this_ptr) {
  return new QStringRef(this_ptr->value());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamEntityDeclaration_operator__(QXmlStreamEntityDeclaration const * this_ptr, QXmlStreamEntityDeclaration const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamEntityResolver_dQXmlStreamEntityResolver(QXmlStreamEntityResolver * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamEntityResolver_resolveEntity(QXmlStreamEntityResolver * this_ptr, QString const * publicId, QString const * systemId) {
  return new QString(this_ptr->resolveEntity(*publicId, *systemId));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamEntityResolver_resolveUndeclaredEntity(QXmlStreamEntityResolver * this_ptr, QString const * name) {
  return new QString(this_ptr->resolveUndeclaredEntity(*name));
}


RITUAL_EXPORT QXmlStreamReader * ctr_qt_core_ffi_QXmlStreamReader_QXmlStreamReader() {
  return new QXmlStreamReader();
}


RITUAL_EXPORT QXmlStreamReader * ctr_qt_core_ffi_QXmlStreamReader_QXmlStreamReader1(QIODevice * device) {
  return new QXmlStreamReader(device);
}


RITUAL_EXPORT QXmlStreamReader * ctr_qt_core_ffi_QXmlStreamReader_QXmlStreamReader2(QByteArray const * data) {
  return new QXmlStreamReader(*data);
}


RITUAL_EXPORT QXmlStreamReader * ctr_qt_core_ffi_QXmlStreamReader_QXmlStreamReader3(QString const * data) {
  return new QXmlStreamReader(*data);
}


RITUAL_EXPORT QXmlStreamReader * ctr_qt_core_ffi_QXmlStreamReader_QXmlStreamReader4(char const * data) {
  return new QXmlStreamReader(data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_dQXmlStreamReader(QXmlStreamReader * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_setDevice(QXmlStreamReader * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QXmlStreamReader_device(QXmlStreamReader const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_addData(QXmlStreamReader * this_ptr, QByteArray const * data) {
  this_ptr->addData(*data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_addData1(QXmlStreamReader * this_ptr, QString const * data) {
  this_ptr->addData(*data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_addData2(QXmlStreamReader * this_ptr, char const * data) {
  this_ptr->addData(data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_clear(QXmlStreamReader * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_atEnd(QXmlStreamReader const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT QXmlStreamReader::TokenType ctr_qt_core_ffi_QXmlStreamReader_readNext(QXmlStreamReader * this_ptr) {
  return this_ptr->readNext();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_readNextStartElement(QXmlStreamReader * this_ptr) {
  return this_ptr->readNextStartElement();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_skipCurrentElement(QXmlStreamReader * this_ptr) {
  this_ptr->skipCurrentElement();
}


RITUAL_EXPORT QXmlStreamReader::TokenType ctr_qt_core_ffi_QXmlStreamReader_tokenType(QXmlStreamReader const * this_ptr) {
  return this_ptr->tokenType();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamReader_tokenString(QXmlStreamReader const * this_ptr) {
  return new QString(this_ptr->tokenString());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_setNamespaceProcessing(QXmlStreamReader * this_ptr, bool arg1) {
  this_ptr->setNamespaceProcessing(arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_namespaceProcessing(QXmlStreamReader const * this_ptr) {
  return this_ptr->namespaceProcessing();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isStartDocument(QXmlStreamReader const * this_ptr) {
  return this_ptr->isStartDocument();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isEndDocument(QXmlStreamReader const * this_ptr) {
  return this_ptr->isEndDocument();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isStartElement(QXmlStreamReader const * this_ptr) {
  return this_ptr->isStartElement();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isEndElement(QXmlStreamReader const * this_ptr) {
  return this_ptr->isEndElement();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isCharacters(QXmlStreamReader const * this_ptr) {
  return this_ptr->isCharacters();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isWhitespace(QXmlStreamReader const * this_ptr) {
  return this_ptr->isWhitespace();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isCDATA(QXmlStreamReader const * this_ptr) {
  return this_ptr->isCDATA();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isComment(QXmlStreamReader const * this_ptr) {
  return this_ptr->isComment();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isDTD(QXmlStreamReader const * this_ptr) {
  return this_ptr->isDTD();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isEntityReference(QXmlStreamReader const * this_ptr) {
  return this_ptr->isEntityReference();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isProcessingInstruction(QXmlStreamReader const * this_ptr) {
  return this_ptr->isProcessingInstruction();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_isStandaloneDocument(QXmlStreamReader const * this_ptr) {
  return this_ptr->isStandaloneDocument();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_documentVersion(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->documentVersion());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_documentEncoding(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->documentEncoding());
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QXmlStreamReader_lineNumber(QXmlStreamReader const * this_ptr) {
  return this_ptr->lineNumber();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QXmlStreamReader_columnNumber(QXmlStreamReader const * this_ptr) {
  return this_ptr->columnNumber();
}


RITUAL_EXPORT qint64 ctr_qt_core_ffi_QXmlStreamReader_characterOffset(QXmlStreamReader const * this_ptr) {
  return this_ptr->characterOffset();
}


RITUAL_EXPORT QXmlStreamAttributes * ctr_qt_core_ffi_QXmlStreamReader_attributes(QXmlStreamReader const * this_ptr) {
  return new QXmlStreamAttributes(this_ptr->attributes());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamReader_readElementText(QXmlStreamReader * this_ptr, QXmlStreamReader::ReadElementTextBehaviour behaviour) {
  return new QString(this_ptr->readElementText(behaviour));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_name(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->name());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_namespaceUri(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->namespaceUri());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_qualifiedName(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->qualifiedName());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_prefix(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->prefix());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_processingInstructionTarget(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->processingInstructionTarget());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_processingInstructionData(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->processingInstructionData());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_text(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->text());
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QXmlStreamReader_namespaceDeclarations(QXmlStreamReader const * this_ptr) {
  return new QVector< QXmlStreamNamespaceDeclaration >(this_ptr->namespaceDeclarations());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_addExtraNamespaceDeclaration(QXmlStreamReader * this_ptr, QXmlStreamNamespaceDeclaration const * extraNamespaceDeclaraction) {
  this_ptr->addExtraNamespaceDeclaration(*extraNamespaceDeclaraction);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_addExtraNamespaceDeclarations(QXmlStreamReader * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * extraNamespaceDeclaractions) {
  this_ptr->addExtraNamespaceDeclarations(*extraNamespaceDeclaractions);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QXmlStreamReader_notationDeclarations(QXmlStreamReader const * this_ptr) {
  return new QVector< QXmlStreamNotationDeclaration >(this_ptr->notationDeclarations());
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QXmlStreamReader_entityDeclarations(QXmlStreamReader const * this_ptr) {
  return new QVector< QXmlStreamEntityDeclaration >(this_ptr->entityDeclarations());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_dtdName(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->dtdName());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_dtdPublicId(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->dtdPublicId());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QXmlStreamReader_dtdSystemId(QXmlStreamReader const * this_ptr) {
  return new QStringRef(this_ptr->dtdSystemId());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_raiseError(QXmlStreamReader * this_ptr, QString const * message) {
  this_ptr->raiseError(*message);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamReader_errorString(QXmlStreamReader const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QXmlStreamReader::Error ctr_qt_core_ffi_QXmlStreamReader_error(QXmlStreamReader const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamReader_hasError(QXmlStreamReader const * this_ptr) {
  return this_ptr->hasError();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_setEntityResolver(QXmlStreamReader * this_ptr, QXmlStreamEntityResolver * resolver) {
  this_ptr->setEntityResolver(resolver);
}


RITUAL_EXPORT QXmlStreamEntityResolver * ctr_qt_core_ffi_QXmlStreamReader_entityResolver(QXmlStreamReader const * this_ptr) {
  return this_ptr->entityResolver();
}


RITUAL_EXPORT QXmlStreamWriter * ctr_qt_core_ffi_QXmlStreamWriter_QXmlStreamWriter() {
  return new QXmlStreamWriter();
}


RITUAL_EXPORT QXmlStreamWriter * ctr_qt_core_ffi_QXmlStreamWriter_QXmlStreamWriter1(QIODevice * device) {
  return new QXmlStreamWriter(device);
}


RITUAL_EXPORT QXmlStreamWriter * ctr_qt_core_ffi_QXmlStreamWriter_QXmlStreamWriter2(QByteArray * array) {
  return new QXmlStreamWriter(array);
}


RITUAL_EXPORT QXmlStreamWriter * ctr_qt_core_ffi_QXmlStreamWriter_QXmlStreamWriter3(QString * string) {
  return new QXmlStreamWriter(string);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_dQXmlStreamWriter(QXmlStreamWriter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_setDevice(QXmlStreamWriter * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QXmlStreamWriter_device(QXmlStreamWriter const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_setCodec(QXmlStreamWriter * this_ptr, QTextCodec * codec) {
  this_ptr->setCodec(codec);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_setCodec1(QXmlStreamWriter * this_ptr, char const * codecName) {
  this_ptr->setCodec(codecName);
}


RITUAL_EXPORT QTextCodec * ctr_qt_core_ffi_QXmlStreamWriter_codec(QXmlStreamWriter const * this_ptr) {
  return this_ptr->codec();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_setAutoFormatting(QXmlStreamWriter * this_ptr, bool arg1) {
  this_ptr->setAutoFormatting(arg1);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamWriter_autoFormatting(QXmlStreamWriter const * this_ptr) {
  return this_ptr->autoFormatting();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_setAutoFormattingIndent(QXmlStreamWriter * this_ptr, int spacesOrTabs) {
  this_ptr->setAutoFormattingIndent(spacesOrTabs);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QXmlStreamWriter_autoFormattingIndent(QXmlStreamWriter const * this_ptr) {
  return this_ptr->autoFormattingIndent();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeAttribute(QXmlStreamWriter * this_ptr, QString const * qualifiedName, QString const * value) {
  this_ptr->writeAttribute(*qualifiedName, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeAttribute1(QXmlStreamWriter * this_ptr, QString const * namespaceUri, QString const * name, QString const * value) {
  this_ptr->writeAttribute(*namespaceUri, *name, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeAttribute2(QXmlStreamWriter * this_ptr, QXmlStreamAttribute const * attribute) {
  this_ptr->writeAttribute(*attribute);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeAttributes(QXmlStreamWriter * this_ptr, QXmlStreamAttributes const * attributes) {
  this_ptr->writeAttributes(*attributes);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeCDATA(QXmlStreamWriter * this_ptr, QString const * text) {
  this_ptr->writeCDATA(*text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeCharacters(QXmlStreamWriter * this_ptr, QString const * text) {
  this_ptr->writeCharacters(*text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeComment(QXmlStreamWriter * this_ptr, QString const * text) {
  this_ptr->writeComment(*text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeDTD(QXmlStreamWriter * this_ptr, QString const * dtd) {
  this_ptr->writeDTD(*dtd);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeEmptyElement(QXmlStreamWriter * this_ptr, QString const * qualifiedName) {
  this_ptr->writeEmptyElement(*qualifiedName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeEmptyElement1(QXmlStreamWriter * this_ptr, QString const * namespaceUri, QString const * name) {
  this_ptr->writeEmptyElement(*namespaceUri, *name);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeTextElement(QXmlStreamWriter * this_ptr, QString const * qualifiedName, QString const * text) {
  this_ptr->writeTextElement(*qualifiedName, *text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeTextElement1(QXmlStreamWriter * this_ptr, QString const * namespaceUri, QString const * name, QString const * text) {
  this_ptr->writeTextElement(*namespaceUri, *name, *text);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeEndDocument(QXmlStreamWriter * this_ptr) {
  this_ptr->writeEndDocument();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeEndElement(QXmlStreamWriter * this_ptr) {
  this_ptr->writeEndElement();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeEntityReference(QXmlStreamWriter * this_ptr, QString const * name) {
  this_ptr->writeEntityReference(*name);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeNamespace(QXmlStreamWriter * this_ptr, QString const * namespaceUri, QString const * prefix) {
  this_ptr->writeNamespace(*namespaceUri, *prefix);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeDefaultNamespace(QXmlStreamWriter * this_ptr, QString const * namespaceUri) {
  this_ptr->writeDefaultNamespace(*namespaceUri);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeProcessingInstruction(QXmlStreamWriter * this_ptr, QString const * target, QString const * data) {
  this_ptr->writeProcessingInstruction(*target, *data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeStartDocument(QXmlStreamWriter * this_ptr) {
  this_ptr->writeStartDocument();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeStartDocument1(QXmlStreamWriter * this_ptr, QString const * version) {
  this_ptr->writeStartDocument(*version);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeStartDocument2(QXmlStreamWriter * this_ptr, QString const * version, bool standalone) {
  this_ptr->writeStartDocument(*version, standalone);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeStartElement(QXmlStreamWriter * this_ptr, QString const * qualifiedName) {
  this_ptr->writeStartElement(*qualifiedName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeStartElement1(QXmlStreamWriter * this_ptr, QString const * namespaceUri, QString const * name) {
  this_ptr->writeStartElement(*namespaceUri, *name);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeCurrentToken(QXmlStreamWriter * this_ptr, QXmlStreamReader const * reader) {
  this_ptr->writeCurrentToken(*reader);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QXmlStreamWriter_hasError(QXmlStreamWriter const * this_ptr) {
  return this_ptr->hasError();
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_findChild_QObject_ptr(QObject const * this_ptr, QString const * aName, int options) {
  return this_ptr->findChild< QObject * >(*aName, QFlags< Qt::FindChildOption >(options));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr(QObject const * this_ptr, QString const * aName, int options) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*aName, QFlags< Qt::FindChildOption >(options)));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr1(QObject const * this_ptr, QRegExp const * re, int options) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*re, QFlags< Qt::FindChildOption >(options)));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr2(QObject const * this_ptr, QRegularExpression const * re, int options) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*re, QFlags< Qt::FindChildOption >(options)));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSysInfo_dQSysInfo(QSysInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSysInfo * ctr_qt_core_ffi_QSysInfo_QSysInfo() {
  return new QSysInfo();
}


RITUAL_EXPORT QSysInfo * ctr_qt_core_ffi_QSysInfo_QSysInfo1(QSysInfo const * other) {
  return new QSysInfo(*other);
}


RITUAL_EXPORT QSysInfo * ctr_qt_core_ffi_QSysInfo_operator_(QSysInfo * this_ptr, QSysInfo const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageLogContext_dQMessageLogContext(QMessageLogContext * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMessageLogger_dQMessageLogger(QMessageLogger * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_dQMetaObject(QMetaObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaObject * ctr_qt_core_ffi_QMetaObject_QMetaObject() {
  return new QMetaObject();
}


RITUAL_EXPORT QMetaObject * ctr_qt_core_ffi_QMetaObject_QMetaObject1(QMetaObject const * other) {
  return new QMetaObject(*other);
}


RITUAL_EXPORT QMetaObject * ctr_qt_core_ffi_QMetaObject_operator_(QMetaObject * this_ptr, QMetaObject const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLatin1Char_dQLatin1Char(QLatin1Char * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1Char_QLatin1Char2(QLatin1Char const * other) {
  return new QLatin1Char(*other);
}


RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1Char_operator_(QLatin1Char * this_ptr, QLatin1Char const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QChar_dQChar(QChar * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar10(QChar const * other) {
  return new QChar(*other);
}


RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_operator_(QChar * this_ptr, QChar const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QByteRef_dQByteRef(QByteRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteRef_QByteRef1(QByteRef const * other) {
  return new QByteRef(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLatin1String_dQLatin1String(QLatin1String * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String4(QLatin1String const * other) {
  return new QLatin1String(*other);
}


RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_operator_6(QLatin1String * this_ptr, QLatin1String const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCharRef_dQCharRef(QCharRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QCharRef_QCharRef1(QCharRef const * other) {
  return new QCharRef(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringList_dQStringList(QStringList * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_QStringList5(QStringList const * other) {
  return new QStringList(*other);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStringList_operator_3(QStringList * this_ptr, QStringList const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_QObject1() {
  return new QObject();
}


RITUAL_EXPORT QAnimationDriver * ctr_qt_core_ffi_QAnimationDriver_QAnimationDriver1() {
  return new QAnimationDriver();
}


RITUAL_EXPORT QEventLoop * ctr_qt_core_ffi_QEventLoop_QEventLoop1() {
  return new QEventLoop();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_dTimerInfo(QAbstractEventDispatcher::TimerInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_TimerInfo2(QAbstractEventDispatcher::TimerInfo const * other) {
  return new QAbstractEventDispatcher::TimerInfo(*other);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QAbstractEventDispatcher_TimerInfo_operator_(QAbstractEventDispatcher::TimerInfo * this_ptr, QAbstractEventDispatcher::TimerInfo const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSequentialIterable_dQSequentialIterable(QSequentialIterable * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSequentialIterable * ctr_qt_core_ffi_QSequentialIterable_QSequentialIterable2(QSequentialIterable const * other) {
  return new QSequentialIterable(*other);
}


RITUAL_EXPORT QSequentialIterable * ctr_qt_core_ffi_QSequentialIterable_operator_(QSequentialIterable * this_ptr, QSequentialIterable const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAssociativeIterable_dQAssociativeIterable(QAssociativeIterable * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAssociativeIterable * ctr_qt_core_ffi_QAssociativeIterable_QAssociativeIterable2(QAssociativeIterable const * other) {
  return new QAssociativeIterable(*other);
}


RITUAL_EXPORT QAssociativeIterable * ctr_qt_core_ffi_QAssociativeIterable_operator_(QAssociativeIterable * this_ptr, QAssociativeIterable const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QModelIndex_dQModelIndex(QModelIndex * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_QModelIndex1(QModelIndex const * other) {
  return new QModelIndex(*other);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_operator_1(QModelIndex * this_ptr, QModelIndex const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QBasicTimer * ctr_qt_core_ffi_QBasicTimer_QBasicTimer1(QBasicTimer const * other) {
  return new QBasicTimer(*other);
}


RITUAL_EXPORT QBasicTimer * ctr_qt_core_ffi_QBasicTimer_operator_(QBasicTimer * this_ptr, QBasicTimer const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitArray_dQBitArray(QBitArray * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBitRef_dQBitRef(QBitRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QBitRef * ctr_qt_core_ffi_QBitRef_QBitRef1(QBitRef const * other) {
  return new QBitRef(*other);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_QBuffer_QBuffer2() {
  return new QBuffer();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStaticByteArrayMatcherBase_dQStaticByteArrayMatcherBase(QStaticByteArrayMatcherBase * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStaticByteArrayMatcherBase * ctr_qt_core_ffi_QStaticByteArrayMatcherBase_QStaticByteArrayMatcherBase1(QStaticByteArrayMatcherBase const * other) {
  return new QStaticByteArrayMatcherBase(*other);
}


RITUAL_EXPORT QStaticByteArrayMatcherBase * ctr_qt_core_ffi_QStaticByteArrayMatcherBase_operator_(QStaticByteArrayMatcherBase * this_ptr, QStaticByteArrayMatcherBase const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QCollator * ctr_qt_core_ffi_QCollator_QCollator3() {
  return new QCollator();
}


RITUAL_EXPORT QTimerEvent * ctr_qt_core_ffi_QTimerEvent_QTimerEvent2(QTimerEvent const * other) {
  return new QTimerEvent(*other);
}


RITUAL_EXPORT QTimerEvent * ctr_qt_core_ffi_QTimerEvent_operator_(QTimerEvent * this_ptr, QTimerEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QChildEvent * ctr_qt_core_ffi_QChildEvent_QChildEvent2(QChildEvent const * other) {
  return new QChildEvent(*other);
}


RITUAL_EXPORT QChildEvent * ctr_qt_core_ffi_QChildEvent_operator_(QChildEvent * this_ptr, QChildEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDynamicPropertyChangeEvent * ctr_qt_core_ffi_QDynamicPropertyChangeEvent_QDynamicPropertyChangeEvent2(QDynamicPropertyChangeEvent const * other) {
  return new QDynamicPropertyChangeEvent(*other);
}


RITUAL_EXPORT QDynamicPropertyChangeEvent * ctr_qt_core_ffi_QDynamicPropertyChangeEvent_operator_(QDynamicPropertyChangeEvent * this_ptr, QDynamicPropertyChangeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDeferredDeleteEvent * ctr_qt_core_ffi_QDeferredDeleteEvent_QDeferredDeleteEvent1(QDeferredDeleteEvent const * other) {
  return new QDeferredDeleteEvent(*other);
}


RITUAL_EXPORT QDeferredDeleteEvent * ctr_qt_core_ffi_QDeferredDeleteEvent_operator_(QDeferredDeleteEvent * this_ptr, QDeferredDeleteEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDate_dQDate(QDate * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_QDate2(QDate const * other) {
  return new QDate(*other);
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_operator_2(QDate * this_ptr, QDate const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTime_dQTime(QTime * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_QTime2(QTime const * other) {
  return new QTime(*other);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_operator_2(QTime * this_ptr, QTime const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QElapsedTimer_dQElapsedTimer(QElapsedTimer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QElapsedTimer * ctr_qt_core_ffi_QElapsedTimer_QElapsedTimer1(QElapsedTimer const * other) {
  return new QElapsedTimer(*other);
}


RITUAL_EXPORT QElapsedTimer * ctr_qt_core_ffi_QElapsedTimer_operator_(QElapsedTimer * this_ptr, QElapsedTimer const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_dQDeadlineTimer(QDeadlineTimer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer3() {
  return new QDeadlineTimer();
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer4(QDeadlineTimer const * other) {
  return new QDeadlineTimer(*other);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_operator_(QDeadlineTimer * this_ptr, QDeadlineTimer const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStreamManipulator_dQTextStreamManipulator(QTextStreamManipulator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextStreamManipulator * ctr_qt_core_ffi_QTextStreamManipulator_QTextStreamManipulator1(QTextStreamManipulator const * other) {
  return new QTextStreamManipulator(*other);
}


RITUAL_EXPORT QTextStreamManipulator * ctr_qt_core_ffi_QTextStreamManipulator_operator_(QTextStreamManipulator * this_ptr, QTextStreamManipulator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir3() {
  return new QDir();
}


RITUAL_EXPORT QEasingCurve * ctr_qt_core_ffi_QEasingCurve_QEasingCurve3() {
  return new QEasingCurve();
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_QEventTransition_QEventTransition2() {
  return new QEventTransition();
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_QUnhandledException_QUnhandledException() {
  return new QUnhandledException();
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_QUnhandledException_QUnhandledException1(QUnhandledException const * other) {
  return new QUnhandledException(*other);
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_QUnhandledException_operator_(QUnhandledException * this_ptr, QUnhandledException const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QFactoryInterface * ctr_qt_core_ffi_QFactoryInterface_operator_(QFactoryInterface * this_ptr, QFactoryInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QFileSelector * ctr_qt_core_ffi_QFileSelector_QFileSelector1() {
  return new QFileSelector();
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_QFileSystemWatcher_QFileSystemWatcher2() {
  return new QFileSystemWatcher();
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_QFinalState_QFinalState1() {
  return new QFinalState();
}


RITUAL_EXPORT QRunnable * ctr_qt_core_ffi_QRunnable_operator_(QRunnable * this_ptr, QRunnable const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QBasicMutex_dQBasicMutex(QBasicMutex * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QBasicMutex * ctr_qt_core_ffi_QBasicMutex_QBasicMutex() {
  return new QBasicMutex();
}


RITUAL_EXPORT QMutex * ctr_qt_core_ffi_QMutex_QMutex1() {
  return new QMutex();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureWatcherBase_dQFutureWatcherBase(QFutureWatcherBase * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_QHistoryState_QHistoryState2() {
  return new QHistoryState();
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_QIdentityProxyModel_QIdentityProxyModel1() {
  return new QIdentityProxyModel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelectionRange_dQItemSelectionRange(QItemSelectionRange * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QItemSelectionModel * ctr_qt_core_ffi_QItemSelectionModel_QItemSelectionModel2() {
  return new QItemSelectionModel();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QItemSelection_dQItemSelection(QItemSelection * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QItemSelection_QItemSelection2(QItemSelection const * other) {
  return new QItemSelection(*other);
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_QItemSelection_operator_(QItemSelection * this_ptr, QItemSelection const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_QJsonValue11() {
  return new QJsonValue();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonValueRef_dQJsonValueRef(QJsonValueRef * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonValueRef_QJsonValueRef3(QJsonValueRef const * other) {
  return new QJsonValueRef(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_iterator_diterator(QJsonArray::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_iterator2(QJsonArray::iterator const * other) {
  return new QJsonArray::iterator(*other);
}


RITUAL_EXPORT QJsonArray::iterator * ctr_qt_core_ffi_QJsonArray_iterator_operator_8(QJsonArray::iterator * this_ptr, QJsonArray::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_const_iterator_dconst_iterator(QJsonArray::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_const_iterator_operator_6(QJsonArray::const_iterator * this_ptr, QJsonArray::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonParseError_dQJsonParseError(QJsonParseError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonParseError * ctr_qt_core_ffi_QJsonParseError_QJsonParseError() {
  return new QJsonParseError();
}


RITUAL_EXPORT QJsonParseError * ctr_qt_core_ffi_QJsonParseError_QJsonParseError1(QJsonParseError const * other) {
  return new QJsonParseError(*other);
}


RITUAL_EXPORT QJsonParseError * ctr_qt_core_ffi_QJsonParseError_operator_(QJsonParseError * this_ptr, QJsonParseError const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_iterator_diterator(QJsonObject::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_iterator2(QJsonObject::iterator const * other) {
  return new QJsonObject::iterator(*other);
}


RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_iterator_operator_3(QJsonObject::iterator * this_ptr, QJsonObject::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_const_iterator_dconst_iterator(QJsonObject::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_const_iterator3(QJsonObject::const_iterator const * other) {
  return new QJsonObject::const_iterator(*other);
}


RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_const_iterator_operator_3(QJsonObject::const_iterator * this_ptr, QJsonObject::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary4() {
  return new QLibrary();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVersionNumber_dQVersionNumber(QVersionNumber * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_QVersionNumber7(QVersionNumber const * other) {
  return new QVersionNumber(*other);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_operator_(QVersionNumber * this_ptr, QVersionNumber const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLibraryInfo_dQLibraryInfo(QLibraryInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLibraryInfo * ctr_qt_core_ffi_QLibraryInfo_QLibraryInfo(QLibraryInfo const * other) {
  return new QLibraryInfo(*other);
}


RITUAL_EXPORT QLibraryInfo * ctr_qt_core_ffi_QLibraryInfo_operator_(QLibraryInfo * this_ptr, QLibraryInfo const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPoint_dQPoint(QPoint * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_QPoint2(QPoint const * other) {
  return new QPoint(*other);
}


RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_operator_(QPoint * this_ptr, QPoint const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointF_dQPointF(QPointF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_QPointF3(QPointF const * other) {
  return new QPointF(*other);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_operator_(QPointF * this_ptr, QPointF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLine_dQLine(QLine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_QLine3(QLine const * other) {
  return new QLine(*other);
}


RITUAL_EXPORT QLine * ctr_qt_core_ffi_QLine_operator_(QLine * this_ptr, QLine const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QLineF_dQLineF(QLineF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_QLineF4(QLineF const * other) {
  return new QLineF(*other);
}


RITUAL_EXPORT QLineF * ctr_qt_core_ffi_QLineF_operator_(QLineF * this_ptr, QLineF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMargins_dQMargins(QMargins * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_QMargins2(QMargins const * other) {
  return new QMargins(*other);
}


RITUAL_EXPORT QMargins * ctr_qt_core_ffi_QMargins_operator_(QMargins * this_ptr, QMargins const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMarginsF_dQMarginsF(QMarginsF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_QMarginsF3(QMarginsF const * other) {
  return new QMarginsF(*other);
}


RITUAL_EXPORT QMarginsF * ctr_qt_core_ffi_QMarginsF_operator_(QMarginsF * this_ptr, QMarginsF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaMethod_dQMetaMethod(QMetaMethod * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaMethod_QMetaMethod1(QMetaMethod const * other) {
  return new QMetaMethod(*other);
}


RITUAL_EXPORT QMetaMethod * ctr_qt_core_ffi_QMetaMethod_operator_(QMetaMethod * this_ptr, QMetaMethod const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaEnum_dQMetaEnum(QMetaEnum * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaEnum * ctr_qt_core_ffi_QMetaEnum_QMetaEnum1(QMetaEnum const * other) {
  return new QMetaEnum(*other);
}


RITUAL_EXPORT QMetaEnum * ctr_qt_core_ffi_QMetaEnum_operator_(QMetaEnum * this_ptr, QMetaEnum const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaProperty_dQMetaProperty(QMetaProperty * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaProperty * ctr_qt_core_ffi_QMetaProperty_QMetaProperty1(QMetaProperty const * other) {
  return new QMetaProperty(*other);
}


RITUAL_EXPORT QMetaProperty * ctr_qt_core_ffi_QMetaProperty_operator_(QMetaProperty * this_ptr, QMetaProperty const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMetaClassInfo_dQMetaClassInfo(QMetaClassInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaClassInfo * ctr_qt_core_ffi_QMetaClassInfo_QMetaClassInfo1(QMetaClassInfo const * other) {
  return new QMetaClassInfo(*other);
}


RITUAL_EXPORT QMetaClassInfo * ctr_qt_core_ffi_QMetaClassInfo_operator_(QMetaClassInfo * this_ptr, QMetaClassInfo const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QOperatingSystemVersion_dQOperatingSystemVersion(QOperatingSystemVersion * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_QOperatingSystemVersion1(QOperatingSystemVersion const * other) {
  return new QOperatingSystemVersion(*other);
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_operator_(QOperatingSystemVersion * this_ptr, QOperatingSystemVersion const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_QParallelAnimationGroup_QParallelAnimationGroup1() {
  return new QParallelAnimationGroup();
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QPauseAnimation_QPauseAnimation2() {
  return new QPauseAnimation();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStaticPlugin_dQStaticPlugin(QStaticPlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QStaticPlugin_QStaticPlugin() {
  return new QStaticPlugin();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QStaticPlugin_QStaticPlugin1(QStaticPlugin const * other) {
  return new QStaticPlugin(*other);
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QStaticPlugin_operator_(QStaticPlugin * this_ptr, QStaticPlugin const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_QPluginLoader_QPluginLoader2() {
  return new QPluginLoader();
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_QProcess_QProcess1() {
  return new QProcess();
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_QVariantAnimation_QVariantAnimation1() {
  return new QVariantAnimation();
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_QPropertyAnimation_QPropertyAnimation2() {
  return new QPropertyAnimation();
}


RITUAL_EXPORT QReadWriteLock * ctr_qt_core_ffi_QReadWriteLock_QReadWriteLock1() {
  return new QReadWriteLock();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSize_dQSize(QSize * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_QSize2(QSize const * other) {
  return new QSize(*other);
}


RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_operator_(QSize * this_ptr, QSize const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSizeF_dQSizeF(QSizeF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_QSizeF3(QSizeF const * other) {
  return new QSizeF(*other);
}


RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_operator_(QSizeF * this_ptr, QSizeF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRect_dQRect(QRect * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_QRect4(QRect const * other) {
  return new QRect(*other);
}


RITUAL_EXPORT QRect * ctr_qt_core_ffi_QRect_operator_2(QRect * this_ptr, QRect const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QRectF_dQRectF(QRectF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_QRectF5(QRectF const * other) {
  return new QRectF(*other);
}


RITUAL_EXPORT QRectF * ctr_qt_core_ffi_QRectF_operator_2(QRectF * this_ptr, QRectF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QResource * ctr_qt_core_ffi_QResource_QResource1() {
  return new QResource();
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_QSaveFile_QSaveFile3() {
  return new QSaveFile();
}


RITUAL_EXPORT QSemaphore * ctr_qt_core_ffi_QSemaphore_QSemaphore1() {
  return new QSemaphore();
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_QSequentialAnimationGroup_QSequentialAnimationGroup1() {
  return new QSequentialAnimationGroup();
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings5() {
  return new QSettings();
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_QSharedMemory_QSharedMemory2() {
  return new QSharedMemory();
}


RITUAL_EXPORT QSignalMapper * ctr_qt_core_ffi_QSignalMapper_QSignalMapper1() {
  return new QSignalMapper();
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_QSignalTransition_QSignalTransition2() {
  return new QSignalTransition();
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_QSortFilterProxyModel_QSortFilterProxyModel1() {
  return new QSortFilterProxyModel();
}


RITUAL_EXPORT QStandardPaths * ctr_qt_core_ffi_QStandardPaths_QStandardPaths(QStandardPaths const * other) {
  return new QStandardPaths(*other);
}


RITUAL_EXPORT QStandardPaths * ctr_qt_core_ffi_QStandardPaths_operator_(QStandardPaths * this_ptr, QStandardPaths const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QState_QState2() {
  return new QState();
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QStateMachine_QStateMachine2() {
  return new QStateMachine();
}


RITUAL_EXPORT QStateMachine::SignalEvent * ctr_qt_core_ffi_QStateMachine_SignalEvent_SignalEvent2(QStateMachine::SignalEvent const * other) {
  return new QStateMachine::SignalEvent(*other);
}


RITUAL_EXPORT QStateMachine::SignalEvent * ctr_qt_core_ffi_QStateMachine_SignalEvent_operator_(QStateMachine::SignalEvent * this_ptr, QStateMachine::SignalEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QStateMachine::WrappedEvent * ctr_qt_core_ffi_QStateMachine_WrappedEvent_WrappedEvent2(QStateMachine::WrappedEvent const * other) {
  return new QStateMachine::WrappedEvent(*other);
}


RITUAL_EXPORT QStateMachine::WrappedEvent * ctr_qt_core_ffi_QStateMachine_WrappedEvent_operator_(QStateMachine::WrappedEvent * this_ptr, QStateMachine::WrappedEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringListModel_dQStringListModel(QStringListModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_QStringListModel_QStringListModel2() {
  return new QStringListModel();
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_QThread_QThread1() {
  return new QThread();
}


RITUAL_EXPORT QThreadPool * ctr_qt_core_ffi_QThreadPool_QThreadPool1() {
  return new QThreadPool();
}


RITUAL_EXPORT QTimeLine * ctr_qt_core_ffi_QTimeLine_QTimeLine1() {
  return new QTimeLine();
}


RITUAL_EXPORT QTimer * ctr_qt_core_ffi_QTimer_QTimer1() {
  return new QTimer();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTimeZone_OffsetData_dOffsetData(QTimeZone::OffsetData * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_OffsetData_OffsetData() {
  return new QTimeZone::OffsetData();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_OffsetData_OffsetData1(QTimeZone::OffsetData const * other) {
  return new QTimeZone::OffsetData(*other);
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QTimeZone_OffsetData_operator_(QTimeZone::OffsetData * this_ptr, QTimeZone::OffsetData const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTranslator * ctr_qt_core_ffi_QTranslator_QTranslator1() {
  return new QTranslator();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUuid_dQUuid(QUuid * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_QUuid5(QUuid const * other) {
  return new QUuid(*other);
}


RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_operator_2(QUuid * this_ptr, QUuid const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamAttributes_dQXmlStreamAttributes(QXmlStreamAttributes * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QXmlStreamAttributes * ctr_qt_core_ffi_QXmlStreamAttributes_QXmlStreamAttributes1(QXmlStreamAttributes const * other) {
  return new QXmlStreamAttributes(*other);
}


RITUAL_EXPORT QXmlStreamAttributes * ctr_qt_core_ffi_QXmlStreamAttributes_operator_(QXmlStreamAttributes * this_ptr, QXmlStreamAttributes const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QXmlStreamEntityResolver * ctr_qt_core_ffi_QXmlStreamEntityResolver_QXmlStreamEntityResolver() {
  return new QXmlStreamEntityResolver();
}


RITUAL_EXPORT QXmlStreamEntityResolver * ctr_qt_core_ffi_QXmlStreamEntityResolver_QXmlStreamEntityResolver1(QXmlStreamEntityResolver const * other) {
  return new QXmlStreamEntityResolver(*other);
}


RITUAL_EXPORT QXmlStreamEntityResolver * ctr_qt_core_ffi_QXmlStreamEntityResolver_operator_(QXmlStreamEntityResolver * this_ptr, QXmlStreamEntityResolver const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< QString, QJsonValue > * ctr_qt_core_ffi_QPair_QString_QJsonValue_QPair() {
  return new QPair< QString, QJsonValue >();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QPair_double_QVariant_QPair() {
  return new QPair< double, QVariant >();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QPair_QString_QString_QPair() {
  return new QPair< QString, QString >();
}


RITUAL_EXPORT QPair< QString, QJsonValue > * ctr_qt_core_ffi_QPair_QString_QJsonValue_QPair1(QString const * t1, QJsonValue const * t2) {
  return new QPair< QString, QJsonValue >(*t1, *t2);
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QPair_double_QVariant_QPair1(double const * t1, QVariant const * t2) {
  return new QPair< double, QVariant >(*t1, *t2);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QPair_QString_QString_QPair1(QString const * t1, QString const * t2) {
  return new QPair< QString, QString >(*t1, *t2);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QString_QJsonValue_swap(QPair< QString, QJsonValue > * this_ptr, QPair< QString, QJsonValue > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_double_QVariant_swap(QPair< double, QVariant > * this_ptr, QPair< double, QVariant > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QString_QString_swap(QPair< QString, QString > * this_ptr, QPair< QString, QString > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__203(QPair< QString, QJsonValue > const * p1, QPair< QString, QJsonValue > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__204(QPair< double, QVariant > const * p1, QPair< double, QVariant > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__205(QPair< QString, QString > const * p1, QPair< QString, QString > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_137(QPair< double, QVariant > const * p1, QPair< double, QVariant > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_138(QPair< QString, QString > const * p1, QPair< QString, QString > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_140(QPair< double, QVariant > const * p1, QPair< double, QVariant > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_141(QPair< QString, QString > const * p1, QPair< QString, QString > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__210(QPair< double, QVariant > const * p1, QPair< double, QVariant > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__211(QPair< QString, QString > const * p1, QPair< QString, QString > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__213(QPair< double, QVariant > const * p1, QPair< double, QVariant > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__214(QPair< QString, QString > const * p1, QPair< QString, QString > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT QPair< QString, QJsonValue > * ctr_qt_core_ffi_qMakePair(QString const * x, QJsonValue const * y) {
  return new QPair< QString, QJsonValue >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_qMakePair1(double const * x, QVariant const * y) {
  return new QPair< double, QVariant >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_qMakePair2(QString const * x, QString const * y) {
  return new QPair< QString, QString >(qMakePair(*x, *y));
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash34(QPair< QString, QJsonValue > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#endif

RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash36(QPair< QString, QString > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_QList() {
  return new QList< QString >();
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_QList() {
  return new QList< QItemSelectionRange >();
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_QList() {
  return new QList< QObject * >();
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_QList() {
  return new QList< QVariant >();
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_QList() {
  return new QList< QByteArray >();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_QList() {
  return new QList< QAbstractEventDispatcher::TimerInfo >();
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_QList() {
  return new QList< QModelIndex >();
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_QList() {
  return new QList< QPersistentModelIndex >();
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_QList() {
  return new QList< QAbstractState * >();
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_QList() {
  return new QList< QAbstractAnimation * >();
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_QList() {
  return new QList< Qt::DayOfWeek >();
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_QList() {
  return new QList< QLocale >();
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_QList() {
  return new QList< QLocale::Country >();
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_QList() {
  return new QList< QCommandLineOption >();
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_QList() {
  return new QList< QFileInfo >();
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_QList() {
  return new QList< QUrl >();
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_QList() {
  return new QList< QMimeType >();
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_QList() {
  return new QList< QAbstractTransition * >();
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_QList() {
  return new QList< QStorageInfo >();
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_QList() {
  return new QList< int >();
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_QList() {
  return new QList< QPair< QString, QString > >();
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_QList1(QList< QString > const * l) {
  return new QList< QString >(*l);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_QList1(QList< QItemSelectionRange > const * l) {
  return new QList< QItemSelectionRange >(*l);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_QList1(QList< QObject * > const * l) {
  return new QList< QObject * >(*l);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_QList1(QList< QVariant > const * l) {
  return new QList< QVariant >(*l);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_QList1(QList< QByteArray > const * l) {
  return new QList< QByteArray >(*l);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_QList1(QList< QAbstractEventDispatcher::TimerInfo > const * l) {
  return new QList< QAbstractEventDispatcher::TimerInfo >(*l);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_QList1(QList< QModelIndex > const * l) {
  return new QList< QModelIndex >(*l);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_QList1(QList< QPersistentModelIndex > const * l) {
  return new QList< QPersistentModelIndex >(*l);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_QList1(QList< QAbstractState * > const * l) {
  return new QList< QAbstractState * >(*l);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_QList1(QList< QAbstractAnimation * > const * l) {
  return new QList< QAbstractAnimation * >(*l);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_QList1(QList< Qt::DayOfWeek > const * l) {
  return new QList< Qt::DayOfWeek >(*l);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_QList1(QList< QLocale > const * l) {
  return new QList< QLocale >(*l);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_QList1(QList< QLocale::Country > const * l) {
  return new QList< QLocale::Country >(*l);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_QList1(QList< QCommandLineOption > const * l) {
  return new QList< QCommandLineOption >(*l);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_QList1(QList< QFileInfo > const * l) {
  return new QList< QFileInfo >(*l);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_QList1(QList< QUrl > const * l) {
  return new QList< QUrl >(*l);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_QList1(QList< QMimeType > const * l) {
  return new QList< QMimeType >(*l);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_QList1(QList< QAbstractTransition * > const * l) {
  return new QList< QAbstractTransition * >(*l);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_QList1(QList< QStorageInfo > const * l) {
  return new QList< QStorageInfo >(*l);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_QList1(QList< int > const * l) {
  return new QList< int >(*l);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_QList1(QList< QPair< QString, QString > > const * l) {
  return new QList< QPair< QString, QString > >(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_dQList(QList< QString > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_dQList(QList< QItemSelectionRange > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_dQList(QList< QObject * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_dQList(QList< QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_dQList(QList< QByteArray > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_dQList(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_dQList(QList< QModelIndex > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_dQList(QList< QPersistentModelIndex > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_dQList(QList< QAbstractState * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_dQList(QList< QAbstractAnimation * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_dQList(QList< Qt::DayOfWeek > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_dQList(QList< QLocale > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_dQList(QList< QLocale::Country > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_dQList(QList< QCommandLineOption > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_dQList(QList< QFileInfo > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_dQList(QList< QUrl > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_dQList(QList< QMimeType > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_dQList(QList< QAbstractTransition * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_dQList(QList< QStorageInfo > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_dQList(QList< int > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_dQList(QList< QPair< QString, QString > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator_(QList< QString > * this_ptr, QList< QString > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator_(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator_(QList< QObject * > * this_ptr, QList< QObject * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator_(QList< QVariant > * this_ptr, QList< QVariant > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator_(QList< QByteArray > * this_ptr, QList< QByteArray > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator_(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator_(QList< QModelIndex > * this_ptr, QList< QModelIndex > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator_(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator_(QList< QAbstractState * > * this_ptr, QList< QAbstractState * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator_(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator_(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator_(QList< QLocale > * this_ptr, QList< QLocale > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator_(QList< QLocale::Country > * this_ptr, QList< QLocale::Country > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator_(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator_(QList< QFileInfo > * this_ptr, QList< QFileInfo > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator_(QList< QUrl > * this_ptr, QList< QUrl > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator_(QList< QMimeType > * this_ptr, QList< QMimeType > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator_(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator_(QList< QStorageInfo > * this_ptr, QList< QStorageInfo > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator_(QList< int > * this_ptr, QList< int > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator_(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_swap(QList< QString > * this_ptr, QList< QString > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_swap(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_swap(QList< QObject * > * this_ptr, QList< QObject * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_swap(QList< QVariant > * this_ptr, QList< QVariant > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_swap(QList< QByteArray > * this_ptr, QList< QByteArray > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_swap(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_swap(QList< QModelIndex > * this_ptr, QList< QModelIndex > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_swap(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_swap(QList< QAbstractState * > * this_ptr, QList< QAbstractState * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_swap(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_swap(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_swap(QList< QLocale > * this_ptr, QList< QLocale > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_swap(QList< QLocale::Country > * this_ptr, QList< QLocale::Country > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_swap(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_swap(QList< QFileInfo > * this_ptr, QList< QFileInfo > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_swap(QList< QUrl > * this_ptr, QList< QUrl > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_swap(QList< QMimeType > * this_ptr, QList< QMimeType > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_swap(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_swap(QList< QStorageInfo > * this_ptr, QList< QStorageInfo > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_swap(QList< int > * this_ptr, QList< int > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_swap(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_operator__(QList< QString > const * this_ptr, QList< QString > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_operator__(QList< QItemSelectionRange > const * this_ptr, QList< QItemSelectionRange > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_operator__(QList< QObject * > const * this_ptr, QList< QObject * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_operator__(QList< QVariant > const * this_ptr, QList< QVariant > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_operator__(QList< QByteArray > const * this_ptr, QList< QByteArray > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_operator__(QList< QModelIndex > const * this_ptr, QList< QModelIndex > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__(QList< QPersistentModelIndex > const * this_ptr, QList< QPersistentModelIndex > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__(QList< QAbstractState * > const * this_ptr, QList< QAbstractState * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__(QList< QAbstractAnimation * > const * this_ptr, QList< QAbstractAnimation * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__(QList< Qt::DayOfWeek > const * this_ptr, QList< Qt::DayOfWeek > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_operator__(QList< QLocale > const * this_ptr, QList< QLocale > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_operator__(QList< QLocale::Country > const * this_ptr, QList< QLocale::Country > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_operator__(QList< QFileInfo > const * this_ptr, QList< QFileInfo > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_operator__(QList< QUrl > const * this_ptr, QList< QUrl > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_operator__(QList< QMimeType > const * this_ptr, QList< QMimeType > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__(QList< QAbstractTransition * > const * this_ptr, QList< QAbstractTransition * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_operator__(QList< QStorageInfo > const * this_ptr, QList< QStorageInfo > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_operator__(QList< int > const * this_ptr, QList< int > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_operator__(QList< QPair< QString, QString > > const * this_ptr, QList< QPair< QString, QString > > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_size(QList< QString > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_size(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_size(QList< QObject * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_size(QList< QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_size(QList< QByteArray > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_size(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_size(QList< QModelIndex > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_size(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_size(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_size(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_size(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_size(QList< QLocale > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_size(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QCommandLineOption_size(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_size(QList< QFileInfo > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_size(QList< QUrl > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_size(QList< QMimeType > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_size(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_size(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_size(QList< int > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_size(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_detach(QList< QString > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_detach(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_detach(QList< QObject * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_detach(QList< QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_detach(QList< QByteArray > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_detach(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_detach(QList< QModelIndex > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_detach(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_detach(QList< QAbstractState * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_detach(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_detach(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_detach(QList< QLocale > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_detach(QList< QLocale::Country > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_detach(QList< QCommandLineOption > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_detach(QList< QFileInfo > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_detach(QList< QUrl > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_detach(QList< QMimeType > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_detach(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_detach(QList< QStorageInfo > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_detach(QList< int > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_detach(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_detachShared(QList< QString > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_detachShared(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_detachShared(QList< QObject * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_detachShared(QList< QVariant > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_detachShared(QList< QByteArray > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_detachShared(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_detachShared(QList< QModelIndex > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_detachShared(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_detachShared(QList< QAbstractState * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_detachShared(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_detachShared(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_detachShared(QList< QLocale > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_detachShared(QList< QLocale::Country > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_detachShared(QList< QCommandLineOption > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_detachShared(QList< QFileInfo > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_detachShared(QList< QUrl > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_detachShared(QList< QMimeType > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_detachShared(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_detachShared(QList< QStorageInfo > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_detachShared(QList< int > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_detachShared(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_isDetached(QList< QString > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_isDetached(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_isDetached(QList< QObject * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_isDetached(QList< QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_isDetached(QList< QByteArray > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_isDetached(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_isDetached(QList< QModelIndex > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_isDetached(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_isDetached(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_isDetached(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_isDetached(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_isDetached(QList< QLocale > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_isDetached(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_isDetached(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_isDetached(QList< QFileInfo > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_isDetached(QList< QUrl > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_isDetached(QList< QMimeType > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_isDetached(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_isDetached(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_isDetached(QList< int > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_isDetached(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_setSharable(QList< QString > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_setSharable(QList< QItemSelectionRange > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_setSharable(QList< QObject * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_setSharable(QList< QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_setSharable(QList< QByteArray > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_setSharable(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_setSharable(QList< QModelIndex > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_setSharable(QList< QPersistentModelIndex > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_setSharable(QList< QAbstractState * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_setSharable(QList< QAbstractAnimation * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_setSharable(QList< Qt::DayOfWeek > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_setSharable(QList< QLocale > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_setSharable(QList< QLocale::Country > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_setSharable(QList< QCommandLineOption > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_setSharable(QList< QFileInfo > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_setSharable(QList< QUrl > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_setSharable(QList< QMimeType > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_setSharable(QList< QAbstractTransition * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_setSharable(QList< QStorageInfo > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_setSharable(QList< int > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_setSharable(QList< QPair< QString, QString > > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_isSharedWith(QList< QString > const * this_ptr, QList< QString > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_isSharedWith(QList< QItemSelectionRange > const * this_ptr, QList< QItemSelectionRange > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_isSharedWith(QList< QObject * > const * this_ptr, QList< QObject * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_isSharedWith(QList< QVariant > const * this_ptr, QList< QVariant > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_isSharedWith(QList< QByteArray > const * this_ptr, QList< QByteArray > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_isSharedWith(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_isSharedWith(QList< QModelIndex > const * this_ptr, QList< QModelIndex > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_isSharedWith(QList< QPersistentModelIndex > const * this_ptr, QList< QPersistentModelIndex > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_isSharedWith(QList< QAbstractState * > const * this_ptr, QList< QAbstractState * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_isSharedWith(QList< QAbstractAnimation * > const * this_ptr, QList< QAbstractAnimation * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_isSharedWith(QList< Qt::DayOfWeek > const * this_ptr, QList< Qt::DayOfWeek > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_isSharedWith(QList< QLocale > const * this_ptr, QList< QLocale > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_isSharedWith(QList< QLocale::Country > const * this_ptr, QList< QLocale::Country > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_isSharedWith(QList< QCommandLineOption > const * this_ptr, QList< QCommandLineOption > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_isSharedWith(QList< QFileInfo > const * this_ptr, QList< QFileInfo > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_isSharedWith(QList< QUrl > const * this_ptr, QList< QUrl > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_isSharedWith(QList< QMimeType > const * this_ptr, QList< QMimeType > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_isSharedWith(QList< QAbstractTransition * > const * this_ptr, QList< QAbstractTransition * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_isSharedWith(QList< QStorageInfo > const * this_ptr, QList< QStorageInfo > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_isSharedWith(QList< int > const * this_ptr, QList< int > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_isSharedWith(QList< QPair< QString, QString > > const * this_ptr, QList< QPair< QString, QString > > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_isEmpty(QList< QString > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_isEmpty(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_isEmpty(QList< QObject * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_isEmpty(QList< QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_isEmpty(QList< QByteArray > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_isEmpty(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_isEmpty(QList< QModelIndex > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_isEmpty(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_isEmpty(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_isEmpty(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_isEmpty(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_isEmpty(QList< QLocale > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_isEmpty(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_isEmpty(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_isEmpty(QList< QFileInfo > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_isEmpty(QList< QUrl > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_isEmpty(QList< QMimeType > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_isEmpty(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_isEmpty(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_isEmpty(QList< int > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_isEmpty(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_clear(QList< QString > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_clear(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_clear(QList< QObject * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_clear(QList< QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_clear(QList< QByteArray > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_clear(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_clear(QList< QModelIndex > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_clear(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_clear(QList< QAbstractState * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_clear(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_clear(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_clear(QList< QLocale > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_clear(QList< QLocale::Country > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_clear(QList< QCommandLineOption > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_clear(QList< QFileInfo > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_clear(QList< QUrl > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_clear(QList< QMimeType > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_clear(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_clear(QList< QStorageInfo > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_clear(QList< int > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_clear(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_at(QList< QString > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_at(QList< QItemSelectionRange > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_at(QList< QObject * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_at(QList< QVariant > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_at(QList< QByteArray > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_at(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_at(QList< QModelIndex > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_at(QList< QPersistentModelIndex > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_at(QList< QAbstractState * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_at(QList< QAbstractAnimation * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_at(QList< Qt::DayOfWeek > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_at(QList< QLocale > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_at(QList< QLocale::Country > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_at(QList< QCommandLineOption > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_at(QList< QFileInfo > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_at(QList< QUrl > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_at(QList< QMimeType > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_at(QList< QAbstractTransition * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_at(QList< QStorageInfo > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_at(QList< int > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_at(QList< QPair< QString, QString > > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_operator__2(QList< QString > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__2(QList< QItemSelectionRange > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_operator__2(QList< QObject * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_operator__2(QList< QVariant > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_operator__2(QList< QByteArray > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__2(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_operator__2(QList< QModelIndex > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__2(QList< QPersistentModelIndex > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__2(QList< QAbstractState * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__2(QList< QAbstractAnimation * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__2(QList< Qt::DayOfWeek > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_operator__2(QList< QLocale > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_operator__2(QList< QLocale::Country > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_operator__2(QList< QCommandLineOption > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_operator__2(QList< QFileInfo > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_operator__2(QList< QUrl > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_operator__2(QList< QMimeType > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__2(QList< QAbstractTransition * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_operator__2(QList< QStorageInfo > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_operator__2(QList< int > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__2(QList< QPair< QString, QString > > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_operator__3(QList< QString > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__3(QList< QItemSelectionRange > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_operator__3(QList< QObject * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_operator__3(QList< QVariant > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_operator__3(QList< QByteArray > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__3(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_operator__3(QList< QModelIndex > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__3(QList< QPersistentModelIndex > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__3(QList< QAbstractState * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__3(QList< QAbstractAnimation * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__3(QList< Qt::DayOfWeek > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_operator__3(QList< QLocale > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_operator__3(QList< QLocale::Country > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_operator__3(QList< QCommandLineOption > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_operator__3(QList< QFileInfo > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_operator__3(QList< QUrl > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_operator__3(QList< QMimeType > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__3(QList< QAbstractTransition * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_operator__3(QList< QStorageInfo > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_operator__3(QList< int > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__3(QList< QPair< QString, QString > > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_reserve(QList< QString > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_reserve(QList< QItemSelectionRange > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_reserve(QList< QObject * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_reserve(QList< QVariant > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_reserve(QList< QByteArray > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_reserve(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_reserve(QList< QModelIndex > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_reserve(QList< QPersistentModelIndex > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_reserve(QList< QAbstractState * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_reserve(QList< QAbstractAnimation * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_reserve(QList< Qt::DayOfWeek > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_reserve(QList< QLocale > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_reserve(QList< QLocale::Country > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_reserve(QList< QCommandLineOption > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_reserve(QList< QFileInfo > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_reserve(QList< QUrl > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_reserve(QList< QMimeType > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_reserve(QList< QAbstractTransition * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_reserve(QList< QStorageInfo > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_reserve(QList< int > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_reserve(QList< QPair< QString, QString > > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_append(QList< QString > * this_ptr, QString const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_append(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_append(QList< QObject * > * this_ptr, QObject * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_append(QList< QVariant > * this_ptr, QVariant const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_append(QList< QByteArray > * this_ptr, QByteArray const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_append(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_append(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_append(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_append(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_append(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_append(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_append(QList< QLocale > * this_ptr, QLocale const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_append(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_append(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_append(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_append(QList< QUrl > * this_ptr, QUrl const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_append(QList< QMimeType > * this_ptr, QMimeType const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_append(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_append(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_append(QList< int > * this_ptr, int const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_append(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_append1(QList< QString > * this_ptr, QList< QString > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_append1(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_append1(QList< QObject * > * this_ptr, QList< QObject * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_append1(QList< QVariant > * this_ptr, QList< QVariant > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_append1(QList< QByteArray > * this_ptr, QList< QByteArray > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_append1(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_append1(QList< QModelIndex > * this_ptr, QList< QModelIndex > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_append1(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_append1(QList< QAbstractState * > * this_ptr, QList< QAbstractState * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_append1(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_append1(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_append1(QList< QLocale > * this_ptr, QList< QLocale > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_append1(QList< QLocale::Country > * this_ptr, QList< QLocale::Country > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_append1(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_append1(QList< QFileInfo > * this_ptr, QList< QFileInfo > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_append1(QList< QUrl > * this_ptr, QList< QUrl > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_append1(QList< QMimeType > * this_ptr, QList< QMimeType > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_append1(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_append1(QList< QStorageInfo > * this_ptr, QList< QStorageInfo > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_append1(QList< int > * this_ptr, QList< int > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_append1(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_prepend(QList< QString > * this_ptr, QString const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_prepend(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_prepend(QList< QObject * > * this_ptr, QObject * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_prepend(QList< QVariant > * this_ptr, QVariant const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_prepend(QList< QByteArray > * this_ptr, QByteArray const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_prepend(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_prepend(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_prepend(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_prepend(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_prepend(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_prepend(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_prepend(QList< QLocale > * this_ptr, QLocale const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_prepend(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_prepend(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_prepend(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_prepend(QList< QUrl > * this_ptr, QUrl const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_prepend(QList< QMimeType > * this_ptr, QMimeType const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_prepend(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_prepend(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_prepend(QList< int > * this_ptr, int const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_prepend(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_insert(QList< QString > * this_ptr, int i, QString const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_insert(QList< QItemSelectionRange > * this_ptr, int i, QItemSelectionRange const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_insert(QList< QObject * > * this_ptr, int i, QObject * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_insert(QList< QVariant > * this_ptr, int i, QVariant const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_insert(QList< QByteArray > * this_ptr, int i, QByteArray const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_insert(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_insert(QList< QModelIndex > * this_ptr, int i, QModelIndex const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_insert(QList< QPersistentModelIndex > * this_ptr, int i, QPersistentModelIndex const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_insert(QList< QAbstractState * > * this_ptr, int i, QAbstractState * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_insert(QList< QAbstractAnimation * > * this_ptr, int i, QAbstractAnimation * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_insert(QList< Qt::DayOfWeek > * this_ptr, int i, Qt::DayOfWeek const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_insert(QList< QLocale > * this_ptr, int i, QLocale const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_insert(QList< QLocale::Country > * this_ptr, int i, QLocale::Country const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_insert(QList< QCommandLineOption > * this_ptr, int i, QCommandLineOption const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_insert(QList< QFileInfo > * this_ptr, int i, QFileInfo const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_insert(QList< QUrl > * this_ptr, int i, QUrl const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_insert(QList< QMimeType > * this_ptr, int i, QMimeType const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_insert(QList< QAbstractTransition * > * this_ptr, int i, QAbstractTransition * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_insert(QList< QStorageInfo > * this_ptr, int i, QStorageInfo const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_insert(QList< int > * this_ptr, int i, int const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_insert(QList< QPair< QString, QString > > * this_ptr, int i, QPair< QString, QString > const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_replace(QList< QString > * this_ptr, int i, QString const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_replace(QList< QItemSelectionRange > * this_ptr, int i, QItemSelectionRange const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_replace(QList< QObject * > * this_ptr, int i, QObject * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_replace(QList< QVariant > * this_ptr, int i, QVariant const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_replace(QList< QByteArray > * this_ptr, int i, QByteArray const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_replace(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_replace(QList< QModelIndex > * this_ptr, int i, QModelIndex const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_replace(QList< QPersistentModelIndex > * this_ptr, int i, QPersistentModelIndex const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_replace(QList< QAbstractState * > * this_ptr, int i, QAbstractState * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_replace(QList< QAbstractAnimation * > * this_ptr, int i, QAbstractAnimation * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_replace(QList< Qt::DayOfWeek > * this_ptr, int i, Qt::DayOfWeek const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_replace(QList< QLocale > * this_ptr, int i, QLocale const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_replace(QList< QLocale::Country > * this_ptr, int i, QLocale::Country const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_replace(QList< QCommandLineOption > * this_ptr, int i, QCommandLineOption const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_replace(QList< QFileInfo > * this_ptr, int i, QFileInfo const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_replace(QList< QUrl > * this_ptr, int i, QUrl const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_replace(QList< QMimeType > * this_ptr, int i, QMimeType const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_replace(QList< QAbstractTransition * > * this_ptr, int i, QAbstractTransition * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_replace(QList< QStorageInfo > * this_ptr, int i, QStorageInfo const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_replace(QList< int > * this_ptr, int i, int const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_replace(QList< QPair< QString, QString > > * this_ptr, int i, QPair< QString, QString > const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_removeAt(QList< QString > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_removeAt(QList< QItemSelectionRange > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_removeAt(QList< QObject * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_removeAt(QList< QVariant > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_removeAt(QList< QByteArray > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_removeAt(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_removeAt(QList< QModelIndex > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_removeAt(QList< QPersistentModelIndex > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_removeAt(QList< QAbstractState * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_removeAt(QList< QAbstractAnimation * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_removeAt(QList< Qt::DayOfWeek > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_removeAt(QList< QLocale > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_removeAt(QList< QLocale::Country > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_removeAt(QList< QCommandLineOption > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_removeAt(QList< QFileInfo > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_removeAt(QList< QUrl > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_removeAt(QList< QMimeType > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_removeAt(QList< QAbstractTransition * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_removeAt(QList< QStorageInfo > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_removeAt(QList< int > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_removeAt(QList< QPair< QString, QString > > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_removeAll(QList< QString > * this_ptr, QString const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_removeAll(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_removeAll(QList< QObject * > * this_ptr, QObject * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_removeAll(QList< QVariant > * this_ptr, QVariant const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_removeAll(QList< QByteArray > * this_ptr, QByteArray const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_removeAll(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_removeAll(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_removeAll(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_removeAll(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_removeAll(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_removeAll(QList< QLocale > * this_ptr, QLocale const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_removeAll(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_removeAll(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_removeAll(QList< QUrl > * this_ptr, QUrl const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_removeAll(QList< QMimeType > * this_ptr, QMimeType const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_removeAll(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_removeAll(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_removeAll(QList< int > * this_ptr, int const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_removeAll(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_removeOne(QList< QString > * this_ptr, QString const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_removeOne(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_removeOne(QList< QObject * > * this_ptr, QObject * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_removeOne(QList< QVariant > * this_ptr, QVariant const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_removeOne(QList< QByteArray > * this_ptr, QByteArray const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_removeOne(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_removeOne(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_removeOne(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_removeOne(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_removeOne(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_removeOne(QList< QLocale > * this_ptr, QLocale const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_removeOne(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_removeOne(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_removeOne(QList< QUrl > * this_ptr, QUrl const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_removeOne(QList< QMimeType > * this_ptr, QMimeType const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_removeOne(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_removeOne(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_removeOne(QList< int > * this_ptr, int const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_removeOne(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_takeAt(QList< QString > * this_ptr, int i) {
  return new QString(this_ptr->takeAt(i));
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_takeAt(QList< QItemSelectionRange > * this_ptr, int i) {
  return new QItemSelectionRange(this_ptr->takeAt(i));
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QList_QObject_ptr_takeAt(QList< QObject * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_takeAt(QList< QVariant > * this_ptr, int i) {
  return new QVariant(this_ptr->takeAt(i));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_takeAt(QList< QByteArray > * this_ptr, int i) {
  return new QByteArray(this_ptr->takeAt(i));
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_takeAt(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i) {
  return new QAbstractEventDispatcher::TimerInfo(this_ptr->takeAt(i));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_takeAt(QList< QModelIndex > * this_ptr, int i) {
  return new QModelIndex(this_ptr->takeAt(i));
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_takeAt(QList< QPersistentModelIndex > * this_ptr, int i) {
  return new QPersistentModelIndex(this_ptr->takeAt(i));
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QList_QAbstractState_ptr_takeAt(QList< QAbstractState * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_takeAt(QList< QAbstractAnimation * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QList_Qt_DayOfWeek_takeAt(QList< Qt::DayOfWeek > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_takeAt(QList< QLocale > * this_ptr, int i) {
  return new QLocale(this_ptr->takeAt(i));
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QList_QLocale_Country_takeAt(QList< QLocale::Country > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_takeAt(QList< QCommandLineOption > * this_ptr, int i) {
  return new QCommandLineOption(this_ptr->takeAt(i));
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_takeAt(QList< QFileInfo > * this_ptr, int i) {
  return new QFileInfo(this_ptr->takeAt(i));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_takeAt(QList< QUrl > * this_ptr, int i) {
  return new QUrl(this_ptr->takeAt(i));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_takeAt(QList< QMimeType > * this_ptr, int i) {
  return new QMimeType(this_ptr->takeAt(i));
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_takeAt(QList< QAbstractTransition * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_takeAt(QList< QStorageInfo > * this_ptr, int i) {
  return new QStorageInfo(this_ptr->takeAt(i));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_takeAt(QList< int > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_takeAt(QList< QPair< QString, QString > > * this_ptr, int i) {
  return new QPair< QString, QString >(this_ptr->takeAt(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_takeFirst(QList< QString > * this_ptr) {
  return new QString(this_ptr->takeFirst());
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_takeFirst(QList< QItemSelectionRange > * this_ptr) {
  return new QItemSelectionRange(this_ptr->takeFirst());
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QList_QObject_ptr_takeFirst(QList< QObject * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_takeFirst(QList< QVariant > * this_ptr) {
  return new QVariant(this_ptr->takeFirst());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_takeFirst(QList< QByteArray > * this_ptr) {
  return new QByteArray(this_ptr->takeFirst());
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_takeFirst(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return new QAbstractEventDispatcher::TimerInfo(this_ptr->takeFirst());
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_takeFirst(QList< QModelIndex > * this_ptr) {
  return new QModelIndex(this_ptr->takeFirst());
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_takeFirst(QList< QPersistentModelIndex > * this_ptr) {
  return new QPersistentModelIndex(this_ptr->takeFirst());
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QList_QAbstractState_ptr_takeFirst(QList< QAbstractState * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_takeFirst(QList< QAbstractAnimation * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QList_Qt_DayOfWeek_takeFirst(QList< Qt::DayOfWeek > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_takeFirst(QList< QLocale > * this_ptr) {
  return new QLocale(this_ptr->takeFirst());
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QList_QLocale_Country_takeFirst(QList< QLocale::Country > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_takeFirst(QList< QCommandLineOption > * this_ptr) {
  return new QCommandLineOption(this_ptr->takeFirst());
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_takeFirst(QList< QFileInfo > * this_ptr) {
  return new QFileInfo(this_ptr->takeFirst());
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_takeFirst(QList< QUrl > * this_ptr) {
  return new QUrl(this_ptr->takeFirst());
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_takeFirst(QList< QMimeType > * this_ptr) {
  return new QMimeType(this_ptr->takeFirst());
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_takeFirst(QList< QAbstractTransition * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_takeFirst(QList< QStorageInfo > * this_ptr) {
  return new QStorageInfo(this_ptr->takeFirst());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_takeFirst(QList< int > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_takeFirst(QList< QPair< QString, QString > > * this_ptr) {
  return new QPair< QString, QString >(this_ptr->takeFirst());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_takeLast(QList< QString > * this_ptr) {
  return new QString(this_ptr->takeLast());
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_takeLast(QList< QItemSelectionRange > * this_ptr) {
  return new QItemSelectionRange(this_ptr->takeLast());
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QList_QObject_ptr_takeLast(QList< QObject * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_takeLast(QList< QVariant > * this_ptr) {
  return new QVariant(this_ptr->takeLast());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_takeLast(QList< QByteArray > * this_ptr) {
  return new QByteArray(this_ptr->takeLast());
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_takeLast(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return new QAbstractEventDispatcher::TimerInfo(this_ptr->takeLast());
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_takeLast(QList< QModelIndex > * this_ptr) {
  return new QModelIndex(this_ptr->takeLast());
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_takeLast(QList< QPersistentModelIndex > * this_ptr) {
  return new QPersistentModelIndex(this_ptr->takeLast());
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QList_QAbstractState_ptr_takeLast(QList< QAbstractState * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_takeLast(QList< QAbstractAnimation * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QList_Qt_DayOfWeek_takeLast(QList< Qt::DayOfWeek > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_takeLast(QList< QLocale > * this_ptr) {
  return new QLocale(this_ptr->takeLast());
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QList_QLocale_Country_takeLast(QList< QLocale::Country > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_takeLast(QList< QCommandLineOption > * this_ptr) {
  return new QCommandLineOption(this_ptr->takeLast());
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_takeLast(QList< QFileInfo > * this_ptr) {
  return new QFileInfo(this_ptr->takeLast());
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_takeLast(QList< QUrl > * this_ptr) {
  return new QUrl(this_ptr->takeLast());
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_takeLast(QList< QMimeType > * this_ptr) {
  return new QMimeType(this_ptr->takeLast());
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_takeLast(QList< QAbstractTransition * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_takeLast(QList< QStorageInfo > * this_ptr) {
  return new QStorageInfo(this_ptr->takeLast());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_takeLast(QList< int > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_takeLast(QList< QPair< QString, QString > > * this_ptr) {
  return new QPair< QString, QString >(this_ptr->takeLast());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_move(QList< QString > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_move(QList< QItemSelectionRange > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_move(QList< QObject * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_move(QList< QVariant > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_move(QList< QByteArray > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_move(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_move(QList< QModelIndex > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_move(QList< QPersistentModelIndex > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_move(QList< QAbstractState * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_move(QList< QAbstractAnimation * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_move(QList< Qt::DayOfWeek > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_move(QList< QLocale > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_move(QList< QLocale::Country > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_move(QList< QCommandLineOption > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_move(QList< QFileInfo > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_move(QList< QUrl > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_move(QList< QMimeType > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_move(QList< QAbstractTransition * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_move(QList< QStorageInfo > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_move(QList< int > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_move(QList< QPair< QString, QString > > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_swap1(QList< QString > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_swap1(QList< QItemSelectionRange > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_swap1(QList< QObject * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_swap1(QList< QVariant > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_swap1(QList< QByteArray > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_swap1(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_swap1(QList< QModelIndex > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_swap1(QList< QPersistentModelIndex > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_swap1(QList< QAbstractState * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_swap1(QList< QAbstractAnimation * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_swap1(QList< Qt::DayOfWeek > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_swap1(QList< QLocale > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_swap1(QList< QLocale::Country > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_swap1(QList< QCommandLineOption > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_swap1(QList< QFileInfo > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_swap1(QList< QUrl > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_swap1(QList< QMimeType > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_swap1(QList< QAbstractTransition * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_swap1(QList< QStorageInfo > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_swap1(QList< int > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_swap1(QList< QPair< QString, QString > > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_indexOf(QList< QString > const * this_ptr, QString const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_indexOf(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_indexOf(QList< QObject * > const * this_ptr, QObject * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_indexOf(QList< QVariant > const * this_ptr, QVariant const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_indexOf(QList< QByteArray > const * this_ptr, QByteArray const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_indexOf(QList< QModelIndex > const * this_ptr, QModelIndex const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_indexOf(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_indexOf(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_indexOf(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_indexOf(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_indexOf(QList< QLocale > const * this_ptr, QLocale const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_indexOf(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_indexOf(QList< QFileInfo > const * this_ptr, QFileInfo const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_indexOf(QList< QUrl > const * this_ptr, QUrl const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_indexOf(QList< QMimeType > const * this_ptr, QMimeType const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_indexOf(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_indexOf(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_indexOf(QList< int > const * this_ptr, int const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_indexOf(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_lastIndexOf(QList< QString > const * this_ptr, QString const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_lastIndexOf(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_lastIndexOf(QList< QObject * > const * this_ptr, QObject * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_lastIndexOf(QList< QVariant > const * this_ptr, QVariant const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_lastIndexOf(QList< QByteArray > const * this_ptr, QByteArray const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_lastIndexOf(QList< QModelIndex > const * this_ptr, QModelIndex const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_lastIndexOf(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_lastIndexOf(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_lastIndexOf(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_lastIndexOf(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_lastIndexOf(QList< QLocale > const * this_ptr, QLocale const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_lastIndexOf(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_lastIndexOf(QList< QFileInfo > const * this_ptr, QFileInfo const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_lastIndexOf(QList< QUrl > const * this_ptr, QUrl const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_lastIndexOf(QList< QMimeType > const * this_ptr, QMimeType const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_lastIndexOf(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_lastIndexOf(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_lastIndexOf(QList< int > const * this_ptr, int const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_lastIndexOf(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_contains(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_contains(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_contains(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_contains(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_contains(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_contains(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_contains(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_contains(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_contains(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_contains(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_contains(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_contains(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_contains(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_contains(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_contains(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_contains(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_contains(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_contains(QList< int > const * this_ptr, int const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_contains(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_count(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_count(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_count(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_count(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_count(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_count(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_count(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_count(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_count(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_count(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_count(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_count(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_count(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_count(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_count(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_count(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_count(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_count(QList< int > const * this_ptr, int const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_count(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_iterator() {
  return new QList< QString >::iterator();
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_iterator() {
  return new QList< QItemSelectionRange >::iterator();
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_iterator() {
  return new QList< QObject * >::iterator();
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_iterator() {
  return new QList< QVariant >::iterator();
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_iterator() {
  return new QList< QByteArray >::iterator();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_iterator() {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator();
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_iterator() {
  return new QList< QModelIndex >::iterator();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_iterator() {
  return new QList< QPersistentModelIndex >::iterator();
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_iterator() {
  return new QList< QAbstractState * >::iterator();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_iterator() {
  return new QList< QAbstractAnimation * >::iterator();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_iterator() {
  return new QList< Qt::DayOfWeek >::iterator();
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_iterator() {
  return new QList< QLocale >::iterator();
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_iterator() {
  return new QList< QLocale::Country >::iterator();
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_iterator() {
  return new QList< QCommandLineOption >::iterator();
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_iterator() {
  return new QList< QFileInfo >::iterator();
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_iterator() {
  return new QList< QUrl >::iterator();
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_iterator() {
  return new QList< QMimeType >::iterator();
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_iterator() {
  return new QList< QAbstractTransition * >::iterator();
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_iterator() {
  return new QList< QStorageInfo >::iterator();
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_iterator() {
  return new QList< int >::iterator();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_iterator() {
  return new QList< QPair< QString, QString > >::iterator();
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_iterator1(QList< QString >::iterator const * o) {
  return new QList< QString >::iterator(*o);
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_iterator1(QList< QItemSelectionRange >::iterator const * o) {
  return new QList< QItemSelectionRange >::iterator(*o);
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_iterator1(QList< QObject * >::iterator const * o) {
  return new QList< QObject * >::iterator(*o);
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_iterator1(QList< QVariant >::iterator const * o) {
  return new QList< QVariant >::iterator(*o);
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_iterator1(QList< QByteArray >::iterator const * o) {
  return new QList< QByteArray >::iterator(*o);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_iterator1(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * o) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(*o);
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_iterator1(QList< QModelIndex >::iterator const * o) {
  return new QList< QModelIndex >::iterator(*o);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_iterator1(QList< QPersistentModelIndex >::iterator const * o) {
  return new QList< QPersistentModelIndex >::iterator(*o);
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_iterator1(QList< QAbstractState * >::iterator const * o) {
  return new QList< QAbstractState * >::iterator(*o);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_iterator1(QList< QAbstractAnimation * >::iterator const * o) {
  return new QList< QAbstractAnimation * >::iterator(*o);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_iterator1(QList< Qt::DayOfWeek >::iterator const * o) {
  return new QList< Qt::DayOfWeek >::iterator(*o);
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_iterator1(QList< QLocale >::iterator const * o) {
  return new QList< QLocale >::iterator(*o);
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_iterator1(QList< QLocale::Country >::iterator const * o) {
  return new QList< QLocale::Country >::iterator(*o);
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_iterator1(QList< QCommandLineOption >::iterator const * o) {
  return new QList< QCommandLineOption >::iterator(*o);
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_iterator1(QList< QFileInfo >::iterator const * o) {
  return new QList< QFileInfo >::iterator(*o);
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_iterator1(QList< QUrl >::iterator const * o) {
  return new QList< QUrl >::iterator(*o);
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_iterator1(QList< QMimeType >::iterator const * o) {
  return new QList< QMimeType >::iterator(*o);
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_iterator1(QList< QAbstractTransition * >::iterator const * o) {
  return new QList< QAbstractTransition * >::iterator(*o);
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_iterator1(QList< QStorageInfo >::iterator const * o) {
  return new QList< QStorageInfo >::iterator(*o);
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_iterator1(QList< int >::iterator const * o) {
  return new QList< int >::iterator(*o);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_iterator1(QList< QPair< QString, QString > >::iterator const * o) {
  return new QList< QPair< QString, QString > >::iterator(*o);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_iterator_operator_(QList< QString >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_(QList< QItemSelectionRange >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_(QList< QObject * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_iterator_operator_(QList< QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_iterator_operator_(QList< QByteArray >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_(QList< QModelIndex >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_(QList< QPersistentModelIndex >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_(QList< QAbstractState * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_(QList< QAbstractAnimation * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_(QList< Qt::DayOfWeek >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_iterator_operator_(QList< QLocale >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_(QList< QLocale::Country >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_(QList< QCommandLineOption >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_(QList< QFileInfo >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_iterator_operator_(QList< QUrl >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_iterator_operator_(QList< QMimeType >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_(QList< QAbstractTransition * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_(QList< QStorageInfo >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_iterator_operator_(QList< int >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_(QList< QPair< QString, QString > >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_iterator_operator__(QList< QString >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__(QList< QItemSelectionRange >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__(QList< QObject * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_iterator_operator__(QList< QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__(QList< QByteArray >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__(QList< QModelIndex >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__(QList< QPersistentModelIndex >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__(QList< QAbstractState * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__(QList< QAbstractAnimation * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__(QList< Qt::DayOfWeek >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_iterator_operator__(QList< QLocale >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__(QList< QLocale::Country >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__(QList< QCommandLineOption >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__(QList< QFileInfo >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_iterator_operator__(QList< QUrl >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__(QList< QMimeType >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__(QList< QAbstractTransition * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__(QList< QStorageInfo >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_iterator_operator__(QList< int >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__(QList< QPair< QString, QString > >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_iterator_operator__1(QList< QString >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__1(QList< QItemSelectionRange >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__1(QList< QObject * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_iterator_operator__1(QList< QVariant >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__1(QList< QByteArray >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__1(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__1(QList< QModelIndex >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__1(QList< QPersistentModelIndex >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__1(QList< QAbstractState * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__1(QList< QAbstractAnimation * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__1(QList< Qt::DayOfWeek >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_iterator_operator__1(QList< QLocale >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__1(QList< QLocale::Country >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__1(QList< QCommandLineOption >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__1(QList< QFileInfo >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_iterator_operator__1(QList< QUrl >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__1(QList< QMimeType >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__1(QList< QAbstractTransition * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__1(QList< QStorageInfo >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_iterator_operator__1(QList< int >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__1(QList< QPair< QString, QString > >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__2(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__2(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__2(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__2(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__2(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__2(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__2(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__2(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__2(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__2(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__2(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__2(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__2(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__2(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__2(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__2(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__2(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__2(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__2(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__2(QList< int >::iterator const * this_ptr, QList< int >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__2(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator_1(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_1(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_1(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator_1(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator_1(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_1(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_1(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_1(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_1(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_1(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_1(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator_1(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_1(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_1(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_1(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator_1(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator_1(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_1(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_1(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator_1(QList< int >::iterator const * this_ptr, QList< int >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_1(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__4(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__4(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__4(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__4(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__4(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__4(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__4(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__4(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__4(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__4(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__4(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__4(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__4(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__4(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__4(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__4(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__4(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__4(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__4(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__4(QList< int >::iterator const * this_ptr, QList< int >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__4(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator_2(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_2(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_2(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator_2(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator_2(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_2(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_2(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_2(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_2(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_2(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_2(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator_2(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_2(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_2(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_2(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator_2(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator_2(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_2(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_2(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator_2(QList< int >::iterator const * this_ptr, QList< int >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_2(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__5(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__5(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__5(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__5(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__5(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__5(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__5(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__5(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__5(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__5(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__5(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__5(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__5(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__5(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__5(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__5(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__5(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__5(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__5(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__5(QList< int >::iterator const * this_ptr, QList< int >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__5(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__6(QList< QString >::iterator const * this_ptr, QList< QString >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__6(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__6(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__6(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__6(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__6(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__6(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__6(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__6(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__6(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__6(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__6(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__6(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__6(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__6(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__6(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__6(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__6(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__6(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__6(QList< int >::iterator const * this_ptr, QList< int >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__6(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator_3(QList< QString >::iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_3(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_3(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator_3(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator_3(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_3(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_3(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_3(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_3(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_3(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_3(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator_3(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_3(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_3(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_3(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator_3(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator_3(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_3(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_3(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator_3(QList< int >::iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_3(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__8(QList< QString >::iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__8(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__8(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__8(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__8(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__8(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__8(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__8(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__8(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__8(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__8(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__8(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__8(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__8(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__8(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__8(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__8(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__8(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__8(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__8(QList< int >::iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__8(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator_4(QList< QString >::iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_4(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_4(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator_4(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator_4(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_4(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_4(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_4(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_4(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_4(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_4(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator_4(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_4(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_4(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_4(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator_4(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator_4(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_4(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_4(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator_4(QList< int >::iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_4(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_iterator_operator__9(QList< QString >::iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__9(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__9(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_iterator_operator__9(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_iterator_operator__9(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__9(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__9(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__9(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__9(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__9(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__9(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_iterator_operator__9(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__9(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__9(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__9(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_iterator_operator__9(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_iterator_operator__9(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__9(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__9(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_iterator_operator__9(QList< int >::iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__9(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__10(QList< QString >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__10(QList< QItemSelectionRange >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__10(QList< QObject * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__10(QList< QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__10(QList< QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__10(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__10(QList< QModelIndex >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__10(QList< QPersistentModelIndex >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__10(QList< QAbstractState * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__10(QList< QAbstractAnimation * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__10(QList< Qt::DayOfWeek >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__10(QList< QLocale >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__10(QList< QLocale::Country >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__10(QList< QCommandLineOption >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__10(QList< QFileInfo >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__10(QList< QUrl >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__10(QList< QMimeType >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__10(QList< QAbstractTransition * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__10(QList< QStorageInfo >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__10(QList< int >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__10(QList< QPair< QString, QString > >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__11(QList< QString >::iterator * this_ptr, int arg1) {
  return new QList< QString >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__11(QList< QItemSelectionRange >::iterator * this_ptr, int arg1) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__11(QList< QObject * >::iterator * this_ptr, int arg1) {
  return new QList< QObject * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__11(QList< QVariant >::iterator * this_ptr, int arg1) {
  return new QList< QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__11(QList< QByteArray >::iterator * this_ptr, int arg1) {
  return new QList< QByteArray >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__11(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__11(QList< QModelIndex >::iterator * this_ptr, int arg1) {
  return new QList< QModelIndex >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__11(QList< QPersistentModelIndex >::iterator * this_ptr, int arg1) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__11(QList< QAbstractState * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractState * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__11(QList< QAbstractAnimation * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__11(QList< Qt::DayOfWeek >::iterator * this_ptr, int arg1) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__11(QList< QLocale >::iterator * this_ptr, int arg1) {
  return new QList< QLocale >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__11(QList< QLocale::Country >::iterator * this_ptr, int arg1) {
  return new QList< QLocale::Country >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__11(QList< QCommandLineOption >::iterator * this_ptr, int arg1) {
  return new QList< QCommandLineOption >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__11(QList< QFileInfo >::iterator * this_ptr, int arg1) {
  return new QList< QFileInfo >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__11(QList< QUrl >::iterator * this_ptr, int arg1) {
  return new QList< QUrl >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__11(QList< QMimeType >::iterator * this_ptr, int arg1) {
  return new QList< QMimeType >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__11(QList< QAbstractTransition * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__11(QList< QStorageInfo >::iterator * this_ptr, int arg1) {
  return new QList< QStorageInfo >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__11(QList< int >::iterator * this_ptr, int arg1) {
  return new QList< int >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__11(QList< QPair< QString, QString > >::iterator * this_ptr, int arg1) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__12(QList< QString >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__12(QList< QItemSelectionRange >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__12(QList< QObject * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__12(QList< QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__12(QList< QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__12(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__12(QList< QModelIndex >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__12(QList< QPersistentModelIndex >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__12(QList< QAbstractState * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__12(QList< QAbstractAnimation * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__12(QList< Qt::DayOfWeek >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__12(QList< QLocale >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__12(QList< QLocale::Country >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__12(QList< QCommandLineOption >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__12(QList< QFileInfo >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__12(QList< QUrl >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__12(QList< QMimeType >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__12(QList< QAbstractTransition * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__12(QList< QStorageInfo >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__12(QList< int >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__12(QList< QPair< QString, QString > >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__13(QList< QString >::iterator * this_ptr, int arg1) {
  return new QList< QString >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__13(QList< QItemSelectionRange >::iterator * this_ptr, int arg1) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__13(QList< QObject * >::iterator * this_ptr, int arg1) {
  return new QList< QObject * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__13(QList< QVariant >::iterator * this_ptr, int arg1) {
  return new QList< QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__13(QList< QByteArray >::iterator * this_ptr, int arg1) {
  return new QList< QByteArray >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__13(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__13(QList< QModelIndex >::iterator * this_ptr, int arg1) {
  return new QList< QModelIndex >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__13(QList< QPersistentModelIndex >::iterator * this_ptr, int arg1) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__13(QList< QAbstractState * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractState * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__13(QList< QAbstractAnimation * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__13(QList< Qt::DayOfWeek >::iterator * this_ptr, int arg1) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__13(QList< QLocale >::iterator * this_ptr, int arg1) {
  return new QList< QLocale >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__13(QList< QLocale::Country >::iterator * this_ptr, int arg1) {
  return new QList< QLocale::Country >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__13(QList< QCommandLineOption >::iterator * this_ptr, int arg1) {
  return new QList< QCommandLineOption >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__13(QList< QFileInfo >::iterator * this_ptr, int arg1) {
  return new QList< QFileInfo >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__13(QList< QUrl >::iterator * this_ptr, int arg1) {
  return new QList< QUrl >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__13(QList< QMimeType >::iterator * this_ptr, int arg1) {
  return new QList< QMimeType >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__13(QList< QAbstractTransition * >::iterator * this_ptr, int arg1) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__13(QList< QStorageInfo >::iterator * this_ptr, int arg1) {
  return new QList< QStorageInfo >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__13(QList< int >::iterator * this_ptr, int arg1) {
  return new QList< int >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__13(QList< QPair< QString, QString > >::iterator * this_ptr, int arg1) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__14(QList< QString >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__14(QList< QItemSelectionRange >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__14(QList< QObject * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__14(QList< QVariant >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__14(QList< QByteArray >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__14(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__14(QList< QModelIndex >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__14(QList< QPersistentModelIndex >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__14(QList< QAbstractState * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__14(QList< QAbstractAnimation * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__14(QList< Qt::DayOfWeek >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__14(QList< QLocale >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__14(QList< QLocale::Country >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__14(QList< QCommandLineOption >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__14(QList< QFileInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__14(QList< QUrl >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__14(QList< QMimeType >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__14(QList< QAbstractTransition * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__14(QList< QStorageInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__14(QList< int >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__14(QList< QPair< QString, QString > >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator__15(QList< QString >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator__15(QList< QItemSelectionRange >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator__15(QList< QObject * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator__15(QList< QVariant >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator__15(QList< QByteArray >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator__15(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator__15(QList< QModelIndex >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator__15(QList< QPersistentModelIndex >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator__15(QList< QAbstractState * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator__15(QList< QAbstractAnimation * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator__15(QList< Qt::DayOfWeek >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator__15(QList< QLocale >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator__15(QList< QLocale::Country >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator__15(QList< QCommandLineOption >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator__15(QList< QFileInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator__15(QList< QUrl >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator__15(QList< QMimeType >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator__15(QList< QAbstractTransition * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator__15(QList< QStorageInfo >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator__15(QList< int >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator__15(QList< QPair< QString, QString > >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator_5(QList< QString >::iterator const * this_ptr, long long j) {
  return new QList< QString >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_5(QList< QItemSelectionRange >::iterator const * this_ptr, long long j) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_5(QList< QObject * >::iterator const * this_ptr, long long j) {
  return new QList< QObject * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator_5(QList< QVariant >::iterator const * this_ptr, long long j) {
  return new QList< QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator_5(QList< QByteArray >::iterator const * this_ptr, long long j) {
  return new QList< QByteArray >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_5(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_5(QList< QModelIndex >::iterator const * this_ptr, long long j) {
  return new QList< QModelIndex >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_5(QList< QPersistentModelIndex >::iterator const * this_ptr, long long j) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_5(QList< QAbstractState * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractState * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_5(QList< QAbstractAnimation * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_5(QList< Qt::DayOfWeek >::iterator const * this_ptr, long long j) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator_5(QList< QLocale >::iterator const * this_ptr, long long j) {
  return new QList< QLocale >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_5(QList< QLocale::Country >::iterator const * this_ptr, long long j) {
  return new QList< QLocale::Country >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_5(QList< QCommandLineOption >::iterator const * this_ptr, long long j) {
  return new QList< QCommandLineOption >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_5(QList< QFileInfo >::iterator const * this_ptr, long long j) {
  return new QList< QFileInfo >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator_5(QList< QUrl >::iterator const * this_ptr, long long j) {
  return new QList< QUrl >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator_5(QList< QMimeType >::iterator const * this_ptr, long long j) {
  return new QList< QMimeType >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_5(QList< QAbstractTransition * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_5(QList< QStorageInfo >::iterator const * this_ptr, long long j) {
  return new QList< QStorageInfo >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator_5(QList< int >::iterator const * this_ptr, long long j) {
  return new QList< int >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_5(QList< QPair< QString, QString > >::iterator const * this_ptr, long long j) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator_6(QList< QString >::iterator const * this_ptr, long long j) {
  return new QList< QString >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_6(QList< QItemSelectionRange >::iterator const * this_ptr, long long j) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_6(QList< QObject * >::iterator const * this_ptr, long long j) {
  return new QList< QObject * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator_6(QList< QVariant >::iterator const * this_ptr, long long j) {
  return new QList< QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator_6(QList< QByteArray >::iterator const * this_ptr, long long j) {
  return new QList< QByteArray >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_6(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_6(QList< QModelIndex >::iterator const * this_ptr, long long j) {
  return new QList< QModelIndex >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_6(QList< QPersistentModelIndex >::iterator const * this_ptr, long long j) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_6(QList< QAbstractState * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractState * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_6(QList< QAbstractAnimation * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_6(QList< Qt::DayOfWeek >::iterator const * this_ptr, long long j) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator_6(QList< QLocale >::iterator const * this_ptr, long long j) {
  return new QList< QLocale >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_6(QList< QLocale::Country >::iterator const * this_ptr, long long j) {
  return new QList< QLocale::Country >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_6(QList< QCommandLineOption >::iterator const * this_ptr, long long j) {
  return new QList< QCommandLineOption >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_6(QList< QFileInfo >::iterator const * this_ptr, long long j) {
  return new QList< QFileInfo >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator_6(QList< QUrl >::iterator const * this_ptr, long long j) {
  return new QList< QUrl >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator_6(QList< QMimeType >::iterator const * this_ptr, long long j) {
  return new QList< QMimeType >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_6(QList< QAbstractTransition * >::iterator const * this_ptr, long long j) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_6(QList< QStorageInfo >::iterator const * this_ptr, long long j) {
  return new QList< QStorageInfo >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator_6(QList< int >::iterator const * this_ptr, long long j) {
  return new QList< int >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_6(QList< QPair< QString, QString > >::iterator const * this_ptr, long long j) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_iterator_operator_7(QList< QString >::iterator const * this_ptr, QList< QString >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_7(QList< QItemSelectionRange >::iterator const * this_ptr, QList< QItemSelectionRange >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_7(QList< QObject * >::iterator const * this_ptr, QList< QObject * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_iterator_operator_7(QList< QVariant >::iterator const * this_ptr, QList< QVariant >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_iterator_operator_7(QList< QByteArray >::iterator const * this_ptr, QList< QByteArray >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_7(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_7(QList< QModelIndex >::iterator const * this_ptr, QList< QModelIndex >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_7(QList< QPersistentModelIndex >::iterator const * this_ptr, QList< QPersistentModelIndex >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_7(QList< QAbstractState * >::iterator const * this_ptr, QList< QAbstractState * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_7(QList< QAbstractAnimation * >::iterator const * this_ptr, QList< QAbstractAnimation * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_7(QList< Qt::DayOfWeek >::iterator const * this_ptr, QList< Qt::DayOfWeek >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_iterator_operator_7(QList< QLocale >::iterator const * this_ptr, QList< QLocale >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_7(QList< QLocale::Country >::iterator const * this_ptr, QList< QLocale::Country >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_7(QList< QCommandLineOption >::iterator const * this_ptr, QList< QCommandLineOption >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_7(QList< QFileInfo >::iterator const * this_ptr, QList< QFileInfo >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_iterator_operator_7(QList< QUrl >::iterator const * this_ptr, QList< QUrl >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_iterator_operator_7(QList< QMimeType >::iterator const * this_ptr, QList< QMimeType >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_7(QList< QAbstractTransition * >::iterator const * this_ptr, QList< QAbstractTransition * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_7(QList< QStorageInfo >::iterator const * this_ptr, QList< QStorageInfo >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_iterator_operator_7(QList< int >::iterator const * this_ptr, QList< int >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_7(QList< QPair< QString, QString > >::iterator const * this_ptr, QList< QPair< QString, QString > >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_const_iterator() {
  return new QList< QString >::const_iterator();
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_const_iterator() {
  return new QList< QItemSelectionRange >::const_iterator();
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_const_iterator() {
  return new QList< QObject * >::const_iterator();
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_const_iterator() {
  return new QList< QVariant >::const_iterator();
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_const_iterator() {
  return new QList< QByteArray >::const_iterator();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_const_iterator() {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator();
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_const_iterator() {
  return new QList< QModelIndex >::const_iterator();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_const_iterator() {
  return new QList< QPersistentModelIndex >::const_iterator();
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_const_iterator() {
  return new QList< QAbstractState * >::const_iterator();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_const_iterator() {
  return new QList< QAbstractAnimation * >::const_iterator();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_const_iterator() {
  return new QList< Qt::DayOfWeek >::const_iterator();
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_const_iterator() {
  return new QList< QLocale >::const_iterator();
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_const_iterator() {
  return new QList< QLocale::Country >::const_iterator();
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_const_iterator() {
  return new QList< QCommandLineOption >::const_iterator();
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_const_iterator() {
  return new QList< QFileInfo >::const_iterator();
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_const_iterator() {
  return new QList< QUrl >::const_iterator();
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_const_iterator() {
  return new QList< QMimeType >::const_iterator();
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_const_iterator() {
  return new QList< QAbstractTransition * >::const_iterator();
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_const_iterator() {
  return new QList< QStorageInfo >::const_iterator();
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_const_iterator() {
  return new QList< int >::const_iterator();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_const_iterator() {
  return new QList< QPair< QString, QString > >::const_iterator();
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_const_iterator1(QList< QString >::const_iterator const * o) {
  return new QList< QString >::const_iterator(*o);
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_const_iterator1(QList< QItemSelectionRange >::const_iterator const * o) {
  return new QList< QItemSelectionRange >::const_iterator(*o);
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_const_iterator1(QList< QObject * >::const_iterator const * o) {
  return new QList< QObject * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_const_iterator1(QList< QVariant >::const_iterator const * o) {
  return new QList< QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_const_iterator1(QList< QByteArray >::const_iterator const * o) {
  return new QList< QByteArray >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_const_iterator1(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * o) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_const_iterator1(QList< QModelIndex >::const_iterator const * o) {
  return new QList< QModelIndex >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_const_iterator1(QList< QPersistentModelIndex >::const_iterator const * o) {
  return new QList< QPersistentModelIndex >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_const_iterator1(QList< QAbstractState * >::const_iterator const * o) {
  return new QList< QAbstractState * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_const_iterator1(QList< QAbstractAnimation * >::const_iterator const * o) {
  return new QList< QAbstractAnimation * >::const_iterator(*o);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_const_iterator1(QList< Qt::DayOfWeek >::const_iterator const * o) {
  return new QList< Qt::DayOfWeek >::const_iterator(*o);
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_const_iterator1(QList< QLocale >::const_iterator const * o) {
  return new QList< QLocale >::const_iterator(*o);
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_const_iterator1(QList< QLocale::Country >::const_iterator const * o) {
  return new QList< QLocale::Country >::const_iterator(*o);
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_const_iterator1(QList< QCommandLineOption >::const_iterator const * o) {
  return new QList< QCommandLineOption >::const_iterator(*o);
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_const_iterator1(QList< QFileInfo >::const_iterator const * o) {
  return new QList< QFileInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_const_iterator1(QList< QUrl >::const_iterator const * o) {
  return new QList< QUrl >::const_iterator(*o);
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_const_iterator1(QList< QMimeType >::const_iterator const * o) {
  return new QList< QMimeType >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_const_iterator1(QList< QAbstractTransition * >::const_iterator const * o) {
  return new QList< QAbstractTransition * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_const_iterator1(QList< QStorageInfo >::const_iterator const * o) {
  return new QList< QStorageInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_const_iterator1(QList< int >::const_iterator const * o) {
  return new QList< int >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_const_iterator1(QList< QPair< QString, QString > >::const_iterator const * o) {
  return new QList< QPair< QString, QString > >::const_iterator(*o);
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_const_iterator2(QList< QString >::iterator const * o) {
  return new QList< QString >::const_iterator(*o);
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_const_iterator2(QList< QItemSelectionRange >::iterator const * o) {
  return new QList< QItemSelectionRange >::const_iterator(*o);
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_const_iterator2(QList< QObject * >::iterator const * o) {
  return new QList< QObject * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_const_iterator2(QList< QVariant >::iterator const * o) {
  return new QList< QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_const_iterator2(QList< QByteArray >::iterator const * o) {
  return new QList< QByteArray >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_const_iterator2(QList< QAbstractEventDispatcher::TimerInfo >::iterator const * o) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_const_iterator2(QList< QModelIndex >::iterator const * o) {
  return new QList< QModelIndex >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_const_iterator2(QList< QPersistentModelIndex >::iterator const * o) {
  return new QList< QPersistentModelIndex >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_const_iterator2(QList< QAbstractState * >::iterator const * o) {
  return new QList< QAbstractState * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_const_iterator2(QList< QAbstractAnimation * >::iterator const * o) {
  return new QList< QAbstractAnimation * >::const_iterator(*o);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_const_iterator2(QList< Qt::DayOfWeek >::iterator const * o) {
  return new QList< Qt::DayOfWeek >::const_iterator(*o);
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_const_iterator2(QList< QLocale >::iterator const * o) {
  return new QList< QLocale >::const_iterator(*o);
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_const_iterator2(QList< QLocale::Country >::iterator const * o) {
  return new QList< QLocale::Country >::const_iterator(*o);
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_const_iterator2(QList< QCommandLineOption >::iterator const * o) {
  return new QList< QCommandLineOption >::const_iterator(*o);
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_const_iterator2(QList< QFileInfo >::iterator const * o) {
  return new QList< QFileInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_const_iterator2(QList< QUrl >::iterator const * o) {
  return new QList< QUrl >::const_iterator(*o);
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_const_iterator2(QList< QMimeType >::iterator const * o) {
  return new QList< QMimeType >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_const_iterator2(QList< QAbstractTransition * >::iterator const * o) {
  return new QList< QAbstractTransition * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_const_iterator2(QList< QStorageInfo >::iterator const * o) {
  return new QList< QStorageInfo >::const_iterator(*o);
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_const_iterator2(QList< int >::iterator const * o) {
  return new QList< int >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_const_iterator2(QList< QPair< QString, QString > >::iterator const * o) {
  return new QList< QPair< QString, QString > >::const_iterator(*o);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_const_iterator_operator_(QList< QString >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_(QList< QItemSelectionRange >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_(QList< QObject * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_(QList< QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_(QList< QByteArray >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_(QList< QModelIndex >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_(QList< QPersistentModelIndex >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_(QList< QAbstractState * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_(QList< QAbstractAnimation * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_(QList< Qt::DayOfWeek >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_(QList< QLocale >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_(QList< QLocale::Country >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_(QList< QCommandLineOption >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_(QList< QFileInfo >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_(QList< QUrl >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_(QList< QMimeType >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_(QList< QAbstractTransition * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_(QList< QStorageInfo >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_const_iterator_operator_(QList< int >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_(QList< QPair< QString, QString > >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_const_iterator_operator__(QList< QString >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__(QList< QItemSelectionRange >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__(QList< QObject * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__(QList< QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__(QList< QByteArray >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__(QList< QModelIndex >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__(QList< QPersistentModelIndex >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__(QList< QAbstractState * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__(QList< QAbstractAnimation * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__(QList< Qt::DayOfWeek >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__(QList< QLocale >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__(QList< QLocale::Country >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__(QList< QCommandLineOption >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__(QList< QFileInfo >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__(QList< QUrl >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__(QList< QMimeType >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__(QList< QAbstractTransition * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__(QList< QStorageInfo >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_const_iterator_operator__(QList< int >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__(QList< QPair< QString, QString > >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_const_iterator_operator__1(QList< QString >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__1(QList< QItemSelectionRange >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__1(QList< QObject * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__1(QList< QVariant >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__1(QList< QByteArray >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__1(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__1(QList< QModelIndex >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__1(QList< QPersistentModelIndex >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__1(QList< QAbstractState * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__1(QList< QAbstractAnimation * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__1(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__1(QList< QLocale >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__1(QList< QLocale::Country >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__1(QList< QCommandLineOption >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__1(QList< QFileInfo >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__1(QList< QUrl >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__1(QList< QMimeType >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__1(QList< QAbstractTransition * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__1(QList< QStorageInfo >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_const_iterator_operator__1(QList< int >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__1(QList< QPair< QString, QString > >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_const_iterator_operator__2(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__2(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__2(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__2(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__2(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__2(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__2(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__2(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__2(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__2(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__2(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__2(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__2(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__2(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__2(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__2(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__2(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__2(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__2(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_const_iterator_operator__2(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__2(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_const_iterator_operator_1(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_1(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_1(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_1(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_1(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_1(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_1(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_1(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_1(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_1(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_1(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_1(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_1(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_1(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_1(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_1(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_1(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_1(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_1(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_const_iterator_operator_1(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_1(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_const_iterator_operator__4(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__4(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__4(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__4(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__4(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__4(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__4(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__4(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__4(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__4(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__4(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__4(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__4(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__4(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__4(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__4(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__4(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__4(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__4(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_const_iterator_operator__4(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__4(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_const_iterator_operator_2(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_2(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_2(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_2(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_2(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_2(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_2(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_2(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_2(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_2(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_2(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_2(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_2(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_2(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_2(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_2(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_2(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_2(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_2(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_const_iterator_operator_2(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_2(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_const_iterator_operator__5(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__5(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__5(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__5(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__5(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__5(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__5(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__5(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__5(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__5(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__5(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__5(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__5(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__5(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__5(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__5(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__5(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__5(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__5(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_const_iterator_operator__5(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__5(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__6(QList< QString >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__6(QList< QItemSelectionRange >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__6(QList< QObject * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__6(QList< QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__6(QList< QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__6(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__6(QList< QModelIndex >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__6(QList< QPersistentModelIndex >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__6(QList< QAbstractState * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__6(QList< QAbstractAnimation * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__6(QList< Qt::DayOfWeek >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__6(QList< QLocale >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__6(QList< QLocale::Country >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__6(QList< QCommandLineOption >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__6(QList< QFileInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__6(QList< QUrl >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__6(QList< QMimeType >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__6(QList< QAbstractTransition * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__6(QList< QStorageInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__6(QList< int >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__6(QList< QPair< QString, QString > >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__7(QList< QString >::const_iterator * this_ptr, int arg1) {
  return new QList< QString >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__7(QList< QItemSelectionRange >::const_iterator * this_ptr, int arg1) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__7(QList< QObject * >::const_iterator * this_ptr, int arg1) {
  return new QList< QObject * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__7(QList< QVariant >::const_iterator * this_ptr, int arg1) {
  return new QList< QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__7(QList< QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QList< QByteArray >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__7(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__7(QList< QModelIndex >::const_iterator * this_ptr, int arg1) {
  return new QList< QModelIndex >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__7(QList< QPersistentModelIndex >::const_iterator * this_ptr, int arg1) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__7(QList< QAbstractState * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__7(QList< QAbstractAnimation * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__7(QList< Qt::DayOfWeek >::const_iterator * this_ptr, int arg1) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__7(QList< QLocale >::const_iterator * this_ptr, int arg1) {
  return new QList< QLocale >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__7(QList< QLocale::Country >::const_iterator * this_ptr, int arg1) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__7(QList< QCommandLineOption >::const_iterator * this_ptr, int arg1) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__7(QList< QFileInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QFileInfo >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__7(QList< QUrl >::const_iterator * this_ptr, int arg1) {
  return new QList< QUrl >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__7(QList< QMimeType >::const_iterator * this_ptr, int arg1) {
  return new QList< QMimeType >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__7(QList< QAbstractTransition * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__7(QList< QStorageInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__7(QList< int >::const_iterator * this_ptr, int arg1) {
  return new QList< int >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__7(QList< QPair< QString, QString > >::const_iterator * this_ptr, int arg1) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__8(QList< QString >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__8(QList< QItemSelectionRange >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__8(QList< QObject * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__8(QList< QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__8(QList< QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__8(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__8(QList< QModelIndex >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__8(QList< QPersistentModelIndex >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__8(QList< QAbstractState * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__8(QList< QAbstractAnimation * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__8(QList< Qt::DayOfWeek >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__8(QList< QLocale >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__8(QList< QLocale::Country >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__8(QList< QCommandLineOption >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__8(QList< QFileInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__8(QList< QUrl >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__8(QList< QMimeType >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__8(QList< QAbstractTransition * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__8(QList< QStorageInfo >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__8(QList< int >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__8(QList< QPair< QString, QString > >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__9(QList< QString >::const_iterator * this_ptr, int arg1) {
  return new QList< QString >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__9(QList< QItemSelectionRange >::const_iterator * this_ptr, int arg1) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__9(QList< QObject * >::const_iterator * this_ptr, int arg1) {
  return new QList< QObject * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__9(QList< QVariant >::const_iterator * this_ptr, int arg1) {
  return new QList< QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__9(QList< QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QList< QByteArray >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__9(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__9(QList< QModelIndex >::const_iterator * this_ptr, int arg1) {
  return new QList< QModelIndex >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__9(QList< QPersistentModelIndex >::const_iterator * this_ptr, int arg1) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__9(QList< QAbstractState * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__9(QList< QAbstractAnimation * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__9(QList< Qt::DayOfWeek >::const_iterator * this_ptr, int arg1) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__9(QList< QLocale >::const_iterator * this_ptr, int arg1) {
  return new QList< QLocale >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__9(QList< QLocale::Country >::const_iterator * this_ptr, int arg1) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__9(QList< QCommandLineOption >::const_iterator * this_ptr, int arg1) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__9(QList< QFileInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QFileInfo >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__9(QList< QUrl >::const_iterator * this_ptr, int arg1) {
  return new QList< QUrl >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__9(QList< QMimeType >::const_iterator * this_ptr, int arg1) {
  return new QList< QMimeType >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__9(QList< QAbstractTransition * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__9(QList< QStorageInfo >::const_iterator * this_ptr, int arg1) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__9(QList< int >::const_iterator * this_ptr, int arg1) {
  return new QList< int >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__9(QList< QPair< QString, QString > >::const_iterator * this_ptr, int arg1) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__10(QList< QString >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__10(QList< QItemSelectionRange >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__10(QList< QObject * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__10(QList< QVariant >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__10(QList< QByteArray >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__10(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__10(QList< QModelIndex >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__10(QList< QPersistentModelIndex >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__10(QList< QAbstractState * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__10(QList< QAbstractAnimation * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__10(QList< Qt::DayOfWeek >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__10(QList< QLocale >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__10(QList< QLocale::Country >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__10(QList< QCommandLineOption >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__10(QList< QFileInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__10(QList< QUrl >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__10(QList< QMimeType >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__10(QList< QAbstractTransition * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__10(QList< QStorageInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__10(QList< int >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__10(QList< QPair< QString, QString > >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator__11(QList< QString >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator__11(QList< QItemSelectionRange >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator__11(QList< QObject * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator__11(QList< QVariant >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator__11(QList< QByteArray >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator__11(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator__11(QList< QModelIndex >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator__11(QList< QPersistentModelIndex >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator__11(QList< QAbstractState * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator__11(QList< QAbstractAnimation * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator__11(QList< Qt::DayOfWeek >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator__11(QList< QLocale >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator__11(QList< QLocale::Country >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator__11(QList< QCommandLineOption >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator__11(QList< QFileInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator__11(QList< QUrl >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator__11(QList< QMimeType >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator__11(QList< QAbstractTransition * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator__11(QList< QStorageInfo >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator__11(QList< int >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator__11(QList< QPair< QString, QString > >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator_3(QList< QString >::const_iterator const * this_ptr, long long j) {
  return new QList< QString >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_3(QList< QItemSelectionRange >::const_iterator const * this_ptr, long long j) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_3(QList< QObject * >::const_iterator const * this_ptr, long long j) {
  return new QList< QObject * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_3(QList< QVariant >::const_iterator const * this_ptr, long long j) {
  return new QList< QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_3(QList< QByteArray >::const_iterator const * this_ptr, long long j) {
  return new QList< QByteArray >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_3(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_3(QList< QModelIndex >::const_iterator const * this_ptr, long long j) {
  return new QList< QModelIndex >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_3(QList< QPersistentModelIndex >::const_iterator const * this_ptr, long long j) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_3(QList< QAbstractState * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_3(QList< QAbstractAnimation * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_3(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, long long j) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_3(QList< QLocale >::const_iterator const * this_ptr, long long j) {
  return new QList< QLocale >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_3(QList< QLocale::Country >::const_iterator const * this_ptr, long long j) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_3(QList< QCommandLineOption >::const_iterator const * this_ptr, long long j) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_3(QList< QFileInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QFileInfo >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_3(QList< QUrl >::const_iterator const * this_ptr, long long j) {
  return new QList< QUrl >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_3(QList< QMimeType >::const_iterator const * this_ptr, long long j) {
  return new QList< QMimeType >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_3(QList< QAbstractTransition * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_3(QList< QStorageInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator_3(QList< int >::const_iterator const * this_ptr, long long j) {
  return new QList< int >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_3(QList< QPair< QString, QString > >::const_iterator const * this_ptr, long long j) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator_4(QList< QString >::const_iterator const * this_ptr, long long j) {
  return new QList< QString >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_4(QList< QItemSelectionRange >::const_iterator const * this_ptr, long long j) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_4(QList< QObject * >::const_iterator const * this_ptr, long long j) {
  return new QList< QObject * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_4(QList< QVariant >::const_iterator const * this_ptr, long long j) {
  return new QList< QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_4(QList< QByteArray >::const_iterator const * this_ptr, long long j) {
  return new QList< QByteArray >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_4(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_4(QList< QModelIndex >::const_iterator const * this_ptr, long long j) {
  return new QList< QModelIndex >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_4(QList< QPersistentModelIndex >::const_iterator const * this_ptr, long long j) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_4(QList< QAbstractState * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_4(QList< QAbstractAnimation * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_4(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, long long j) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_4(QList< QLocale >::const_iterator const * this_ptr, long long j) {
  return new QList< QLocale >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_4(QList< QLocale::Country >::const_iterator const * this_ptr, long long j) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_4(QList< QCommandLineOption >::const_iterator const * this_ptr, long long j) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_4(QList< QFileInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QFileInfo >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_4(QList< QUrl >::const_iterator const * this_ptr, long long j) {
  return new QList< QUrl >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_4(QList< QMimeType >::const_iterator const * this_ptr, long long j) {
  return new QList< QMimeType >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_4(QList< QAbstractTransition * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_4(QList< QStorageInfo >::const_iterator const * this_ptr, long long j) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator_4(QList< int >::const_iterator const * this_ptr, long long j) {
  return new QList< int >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_4(QList< QPair< QString, QString > >::const_iterator const * this_ptr, long long j) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_const_iterator_operator_5(QList< QString >::const_iterator const * this_ptr, QList< QString >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_5(QList< QItemSelectionRange >::const_iterator const * this_ptr, QList< QItemSelectionRange >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_5(QList< QObject * >::const_iterator const * this_ptr, QList< QObject * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_5(QList< QVariant >::const_iterator const * this_ptr, QList< QVariant >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_5(QList< QByteArray >::const_iterator const * this_ptr, QList< QByteArray >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_5(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_5(QList< QModelIndex >::const_iterator const * this_ptr, QList< QModelIndex >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_5(QList< QPersistentModelIndex >::const_iterator const * this_ptr, QList< QPersistentModelIndex >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_5(QList< QAbstractState * >::const_iterator const * this_ptr, QList< QAbstractState * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_5(QList< QAbstractAnimation * >::const_iterator const * this_ptr, QList< QAbstractAnimation * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_5(QList< Qt::DayOfWeek >::const_iterator const * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_5(QList< QLocale >::const_iterator const * this_ptr, QList< QLocale >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_5(QList< QLocale::Country >::const_iterator const * this_ptr, QList< QLocale::Country >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_5(QList< QCommandLineOption >::const_iterator const * this_ptr, QList< QCommandLineOption >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_5(QList< QFileInfo >::const_iterator const * this_ptr, QList< QFileInfo >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_5(QList< QUrl >::const_iterator const * this_ptr, QList< QUrl >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_5(QList< QMimeType >::const_iterator const * this_ptr, QList< QMimeType >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_5(QList< QAbstractTransition * >::const_iterator const * this_ptr, QList< QAbstractTransition * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_5(QList< QStorageInfo >::const_iterator const * this_ptr, QList< QStorageInfo >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_const_iterator_operator_5(QList< int >::const_iterator const * this_ptr, QList< int >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_5(QList< QPair< QString, QString > >::const_iterator const * this_ptr, QList< QPair< QString, QString > >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_begin(QList< QString > * this_ptr) {
  return new QList< QString >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_begin(QList< QItemSelectionRange > * this_ptr) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_begin(QList< QObject * > * this_ptr) {
  return new QList< QObject * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_begin(QList< QVariant > * this_ptr) {
  return new QList< QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_begin(QList< QByteArray > * this_ptr) {
  return new QList< QByteArray >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_begin(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_begin(QList< QModelIndex > * this_ptr) {
  return new QList< QModelIndex >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_begin(QList< QPersistentModelIndex > * this_ptr) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_begin(QList< QAbstractState * > * this_ptr) {
  return new QList< QAbstractState * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_begin(QList< QAbstractAnimation * > * this_ptr) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_begin(QList< Qt::DayOfWeek > * this_ptr) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_begin(QList< QLocale > * this_ptr) {
  return new QList< QLocale >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_begin(QList< QLocale::Country > * this_ptr) {
  return new QList< QLocale::Country >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_begin(QList< QCommandLineOption > * this_ptr) {
  return new QList< QCommandLineOption >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_begin(QList< QFileInfo > * this_ptr) {
  return new QList< QFileInfo >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_begin(QList< QUrl > * this_ptr) {
  return new QList< QUrl >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_begin(QList< QMimeType > * this_ptr) {
  return new QList< QMimeType >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_begin(QList< QAbstractTransition * > * this_ptr) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_begin(QList< QStorageInfo > * this_ptr) {
  return new QList< QStorageInfo >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_begin(QList< int > * this_ptr) {
  return new QList< int >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_begin(QList< QPair< QString, QString > > * this_ptr) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_begin1(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_begin1(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_begin1(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_begin1(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_begin1(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_begin1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_begin1(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_begin1(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_begin1(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_begin1(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_begin1(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_begin1(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_begin1(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_begin1(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_begin1(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_begin1(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_begin1(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_begin1(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_begin1(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_begin1(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_begin1(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_cbegin(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_cbegin(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_cbegin(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_cbegin(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_cbegin(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_cbegin(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_cbegin(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_cbegin(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_cbegin(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_cbegin(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_cbegin(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_cbegin(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_cbegin(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_cbegin(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_cbegin(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_cbegin(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_cbegin(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_cbegin(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_cbegin(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_cbegin(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_cbegin(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_constBegin(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_constBegin(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_constBegin(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_constBegin(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_constBegin(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_constBegin(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_constBegin(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_constBegin(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_constBegin(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_constBegin(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_constBegin(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_constBegin(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_constBegin(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_constBegin(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_constBegin(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_constBegin(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_constBegin(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_constBegin(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_constBegin(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_constBegin(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_constBegin(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_end(QList< QString > * this_ptr) {
  return new QList< QString >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_end(QList< QItemSelectionRange > * this_ptr) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_end(QList< QObject * > * this_ptr) {
  return new QList< QObject * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_end(QList< QVariant > * this_ptr) {
  return new QList< QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_end(QList< QByteArray > * this_ptr) {
  return new QList< QByteArray >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_end(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_end(QList< QModelIndex > * this_ptr) {
  return new QList< QModelIndex >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_end(QList< QPersistentModelIndex > * this_ptr) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_end(QList< QAbstractState * > * this_ptr) {
  return new QList< QAbstractState * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_end(QList< QAbstractAnimation * > * this_ptr) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_end(QList< Qt::DayOfWeek > * this_ptr) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_end(QList< QLocale > * this_ptr) {
  return new QList< QLocale >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_end(QList< QLocale::Country > * this_ptr) {
  return new QList< QLocale::Country >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_end(QList< QCommandLineOption > * this_ptr) {
  return new QList< QCommandLineOption >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_end(QList< QFileInfo > * this_ptr) {
  return new QList< QFileInfo >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_end(QList< QUrl > * this_ptr) {
  return new QList< QUrl >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_end(QList< QMimeType > * this_ptr) {
  return new QList< QMimeType >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_end(QList< QAbstractTransition * > * this_ptr) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_end(QList< QStorageInfo > * this_ptr) {
  return new QList< QStorageInfo >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_end(QList< int > * this_ptr) {
  return new QList< int >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_end(QList< QPair< QString, QString > > * this_ptr) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_end1(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_end1(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_end1(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_end1(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_end1(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_end1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_end1(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_end1(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_end1(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_end1(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_end1(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_end1(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_end1(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_end1(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_end1(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_end1(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_end1(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_end1(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_end1(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_end1(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_end1(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_cend(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_cend(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_cend(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_cend(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_cend(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_cend(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_cend(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_cend(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_cend(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_cend(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_cend(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_cend(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_cend(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_cend(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_cend(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_cend(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_cend(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_cend(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_cend(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_cend(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_cend(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_constEnd(QList< QString > const * this_ptr) {
  return new QList< QString >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_constEnd(QList< QItemSelectionRange > const * this_ptr) {
  return new QList< QItemSelectionRange >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_constEnd(QList< QObject * > const * this_ptr) {
  return new QList< QObject * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_constEnd(QList< QVariant > const * this_ptr) {
  return new QList< QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_constEnd(QList< QByteArray > const * this_ptr) {
  return new QList< QByteArray >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_constEnd(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_constEnd(QList< QModelIndex > const * this_ptr) {
  return new QList< QModelIndex >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_constEnd(QList< QPersistentModelIndex > const * this_ptr) {
  return new QList< QPersistentModelIndex >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_constEnd(QList< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_constEnd(QList< QAbstractAnimation * > const * this_ptr) {
  return new QList< QAbstractAnimation * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_constEnd(QList< Qt::DayOfWeek > const * this_ptr) {
  return new QList< Qt::DayOfWeek >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_constEnd(QList< QLocale > const * this_ptr) {
  return new QList< QLocale >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_constEnd(QList< QLocale::Country > const * this_ptr) {
  return new QList< QLocale::Country >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_constEnd(QList< QCommandLineOption > const * this_ptr) {
  return new QList< QCommandLineOption >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_constEnd(QList< QFileInfo > const * this_ptr) {
  return new QList< QFileInfo >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_constEnd(QList< QUrl > const * this_ptr) {
  return new QList< QUrl >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_constEnd(QList< QMimeType > const * this_ptr) {
  return new QList< QMimeType >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_constEnd(QList< QAbstractTransition * > const * this_ptr) {
  return new QList< QAbstractTransition * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_constEnd(QList< QStorageInfo > const * this_ptr) {
  return new QList< QStorageInfo >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_constEnd(QList< int > const * this_ptr) {
  return new QList< int >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_constEnd(QList< QPair< QString, QString > > const * this_ptr) {
  return new QList< QPair< QString, QString > >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_insert1(QList< QString > * this_ptr, QList< QString >::iterator const * before, QString const * t) {
  return new QList< QString >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_insert1(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange >::iterator const * before, QItemSelectionRange const * t) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_insert1(QList< QObject * > * this_ptr, QList< QObject * >::iterator const * before, QObject * const * t) {
  return new QList< QObject * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_insert1(QList< QVariant > * this_ptr, QList< QVariant >::iterator const * before, QVariant const * t) {
  return new QList< QVariant >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_insert1(QList< QByteArray > * this_ptr, QList< QByteArray >::iterator const * before, QByteArray const * t) {
  return new QList< QByteArray >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_insert1(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * before, QAbstractEventDispatcher::TimerInfo const * t) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_insert1(QList< QModelIndex > * this_ptr, QList< QModelIndex >::iterator const * before, QModelIndex const * t) {
  return new QList< QModelIndex >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_insert1(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex >::iterator const * before, QPersistentModelIndex const * t) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_insert1(QList< QAbstractState * > * this_ptr, QList< QAbstractState * >::iterator const * before, QAbstractState * const * t) {
  return new QList< QAbstractState * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_insert1(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * >::iterator const * before, QAbstractAnimation * const * t) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_insert1(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek >::iterator const * before, Qt::DayOfWeek const * t) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_insert1(QList< QLocale > * this_ptr, QList< QLocale >::iterator const * before, QLocale const * t) {
  return new QList< QLocale >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_insert1(QList< QLocale::Country > * this_ptr, QList< QLocale::Country >::iterator const * before, QLocale::Country const * t) {
  return new QList< QLocale::Country >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_insert1(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption >::iterator const * before, QCommandLineOption const * t) {
  return new QList< QCommandLineOption >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_insert1(QList< QFileInfo > * this_ptr, QList< QFileInfo >::iterator const * before, QFileInfo const * t) {
  return new QList< QFileInfo >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_insert1(QList< QUrl > * this_ptr, QList< QUrl >::iterator const * before, QUrl const * t) {
  return new QList< QUrl >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_insert1(QList< QMimeType > * this_ptr, QList< QMimeType >::iterator const * before, QMimeType const * t) {
  return new QList< QMimeType >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_insert1(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * >::iterator const * before, QAbstractTransition * const * t) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_insert1(QList< QStorageInfo > * this_ptr, QList< QStorageInfo >::iterator const * before, QStorageInfo const * t) {
  return new QList< QStorageInfo >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_insert1(QList< int > * this_ptr, QList< int >::iterator const * before, int const * t) {
  return new QList< int >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_insert1(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > >::iterator const * before, QPair< QString, QString > const * t) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_erase(QList< QString > * this_ptr, QList< QString >::iterator const * pos) {
  return new QList< QString >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_erase(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange >::iterator const * pos) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_erase(QList< QObject * > * this_ptr, QList< QObject * >::iterator const * pos) {
  return new QList< QObject * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_erase(QList< QVariant > * this_ptr, QList< QVariant >::iterator const * pos) {
  return new QList< QVariant >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_erase(QList< QByteArray > * this_ptr, QList< QByteArray >::iterator const * pos) {
  return new QList< QByteArray >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_erase(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * pos) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_erase(QList< QModelIndex > * this_ptr, QList< QModelIndex >::iterator const * pos) {
  return new QList< QModelIndex >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_erase(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex >::iterator const * pos) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_erase(QList< QAbstractState * > * this_ptr, QList< QAbstractState * >::iterator const * pos) {
  return new QList< QAbstractState * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_erase(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * >::iterator const * pos) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_erase(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek >::iterator const * pos) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_erase(QList< QLocale > * this_ptr, QList< QLocale >::iterator const * pos) {
  return new QList< QLocale >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_erase(QList< QLocale::Country > * this_ptr, QList< QLocale::Country >::iterator const * pos) {
  return new QList< QLocale::Country >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_erase(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption >::iterator const * pos) {
  return new QList< QCommandLineOption >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_erase(QList< QFileInfo > * this_ptr, QList< QFileInfo >::iterator const * pos) {
  return new QList< QFileInfo >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_erase(QList< QUrl > * this_ptr, QList< QUrl >::iterator const * pos) {
  return new QList< QUrl >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_erase(QList< QMimeType > * this_ptr, QList< QMimeType >::iterator const * pos) {
  return new QList< QMimeType >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_erase(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * >::iterator const * pos) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_erase(QList< QStorageInfo > * this_ptr, QList< QStorageInfo >::iterator const * pos) {
  return new QList< QStorageInfo >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_erase(QList< int > * this_ptr, QList< int >::iterator const * pos) {
  return new QList< int >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_erase(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > >::iterator const * pos) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_erase1(QList< QString > * this_ptr, QList< QString >::iterator const * first, QList< QString >::iterator const * last) {
  return new QList< QString >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_erase1(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange >::iterator const * first, QList< QItemSelectionRange >::iterator const * last) {
  return new QList< QItemSelectionRange >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_erase1(QList< QObject * > * this_ptr, QList< QObject * >::iterator const * first, QList< QObject * >::iterator const * last) {
  return new QList< QObject * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_erase1(QList< QVariant > * this_ptr, QList< QVariant >::iterator const * first, QList< QVariant >::iterator const * last) {
  return new QList< QVariant >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_erase1(QList< QByteArray > * this_ptr, QList< QByteArray >::iterator const * first, QList< QByteArray >::iterator const * last) {
  return new QList< QByteArray >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_erase1(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * first, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * last) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_erase1(QList< QModelIndex > * this_ptr, QList< QModelIndex >::iterator const * first, QList< QModelIndex >::iterator const * last) {
  return new QList< QModelIndex >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_erase1(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex >::iterator const * first, QList< QPersistentModelIndex >::iterator const * last) {
  return new QList< QPersistentModelIndex >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_erase1(QList< QAbstractState * > * this_ptr, QList< QAbstractState * >::iterator const * first, QList< QAbstractState * >::iterator const * last) {
  return new QList< QAbstractState * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_erase1(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * >::iterator const * first, QList< QAbstractAnimation * >::iterator const * last) {
  return new QList< QAbstractAnimation * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_erase1(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek >::iterator const * first, QList< Qt::DayOfWeek >::iterator const * last) {
  return new QList< Qt::DayOfWeek >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_erase1(QList< QLocale > * this_ptr, QList< QLocale >::iterator const * first, QList< QLocale >::iterator const * last) {
  return new QList< QLocale >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_erase1(QList< QLocale::Country > * this_ptr, QList< QLocale::Country >::iterator const * first, QList< QLocale::Country >::iterator const * last) {
  return new QList< QLocale::Country >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_erase1(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption >::iterator const * first, QList< QCommandLineOption >::iterator const * last) {
  return new QList< QCommandLineOption >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_erase1(QList< QFileInfo > * this_ptr, QList< QFileInfo >::iterator const * first, QList< QFileInfo >::iterator const * last) {
  return new QList< QFileInfo >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_erase1(QList< QUrl > * this_ptr, QList< QUrl >::iterator const * first, QList< QUrl >::iterator const * last) {
  return new QList< QUrl >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_erase1(QList< QMimeType > * this_ptr, QList< QMimeType >::iterator const * first, QList< QMimeType >::iterator const * last) {
  return new QList< QMimeType >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_erase1(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * >::iterator const * first, QList< QAbstractTransition * >::iterator const * last) {
  return new QList< QAbstractTransition * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_erase1(QList< QStorageInfo > * this_ptr, QList< QStorageInfo >::iterator const * first, QList< QStorageInfo >::iterator const * last) {
  return new QList< QStorageInfo >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_erase1(QList< int > * this_ptr, QList< int >::iterator const * first, QList< int >::iterator const * last) {
  return new QList< int >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_erase1(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > >::iterator const * first, QList< QPair< QString, QString > >::iterator const * last) {
  return new QList< QPair< QString, QString > >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_count1(QList< QString > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_count1(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_count1(QList< QObject * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_count1(QList< QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_count1(QList< QByteArray > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_count1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_count1(QList< QModelIndex > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_count1(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_count1(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_count1(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_count1(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_count1(QList< QLocale > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_count1(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QCommandLineOption_count1(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_count1(QList< QFileInfo > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_count1(QList< QUrl > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_count1(QList< QMimeType > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_count1(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_count1(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_count1(QList< int > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_count1(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_length(QList< QString > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_length(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_length(QList< QObject * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_length(QList< QVariant > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_length(QList< QByteArray > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_length(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_length(QList< QModelIndex > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_length(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_length(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_length(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_length(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_length(QList< QLocale > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_length(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QCommandLineOption_length(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_length(QList< QFileInfo > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_length(QList< QUrl > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_length(QList< QMimeType > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_length(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_length(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_length(QList< int > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_length(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_first(QList< QString > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_first(QList< QItemSelectionRange > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_first(QList< QObject * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_first(QList< QVariant > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_first(QList< QByteArray > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_first(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_first(QList< QModelIndex > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_first(QList< QPersistentModelIndex > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_first(QList< QAbstractState * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_first(QList< QAbstractAnimation * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_first(QList< Qt::DayOfWeek > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_first(QList< QLocale > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_first(QList< QLocale::Country > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_first(QList< QCommandLineOption > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_first(QList< QFileInfo > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_first(QList< QUrl > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_first(QList< QMimeType > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_first(QList< QAbstractTransition * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_first(QList< QStorageInfo > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_first(QList< int > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_first(QList< QPair< QString, QString > > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_constFirst(QList< QString > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_constFirst(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_constFirst(QList< QObject * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_constFirst(QList< QVariant > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_constFirst(QList< QByteArray > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_constFirst(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_constFirst(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_constFirst(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_constFirst(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_constFirst(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_constFirst(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_constFirst(QList< QLocale > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_constFirst(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_constFirst(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_constFirst(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_constFirst(QList< QUrl > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_constFirst(QList< QMimeType > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_constFirst(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_constFirst(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_constFirst(QList< int > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_constFirst(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_first1(QList< QString > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_first1(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_first1(QList< QObject * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_first1(QList< QVariant > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_first1(QList< QByteArray > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_first1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_first1(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_first1(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_first1(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_first1(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_first1(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_first1(QList< QLocale > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_first1(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_first1(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_first1(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_first1(QList< QUrl > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_first1(QList< QMimeType > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_first1(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_first1(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_first1(QList< int > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_first1(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_last(QList< QString > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_last(QList< QItemSelectionRange > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_last(QList< QObject * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_last(QList< QVariant > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_last(QList< QByteArray > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_last(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_last(QList< QModelIndex > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_last(QList< QPersistentModelIndex > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_last(QList< QAbstractState * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_last(QList< QAbstractAnimation * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_last(QList< Qt::DayOfWeek > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_last(QList< QLocale > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_last(QList< QLocale::Country > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_last(QList< QCommandLineOption > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_last(QList< QFileInfo > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_last(QList< QUrl > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_last(QList< QMimeType > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_last(QList< QAbstractTransition * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_last(QList< QStorageInfo > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_last(QList< int > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_last(QList< QPair< QString, QString > > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_last1(QList< QString > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_last1(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_last1(QList< QObject * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_last1(QList< QVariant > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_last1(QList< QByteArray > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_last1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_last1(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_last1(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_last1(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_last1(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_last1(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_last1(QList< QLocale > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_last1(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_last1(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_last1(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_last1(QList< QUrl > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_last1(QList< QMimeType > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_last1(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_last1(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_last1(QList< int > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_last1(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_constLast(QList< QString > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_constLast(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_constLast(QList< QObject * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_constLast(QList< QVariant > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_constLast(QList< QByteArray > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_constLast(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_constLast(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_constLast(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_constLast(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_constLast(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_constLast(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_constLast(QList< QLocale > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_constLast(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_constLast(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_constLast(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_constLast(QList< QUrl > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_constLast(QList< QMimeType > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_constLast(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_constLast(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_constLast(QList< int > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_constLast(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_removeFirst(QList< QString > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_removeFirst(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_removeFirst(QList< QObject * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_removeFirst(QList< QVariant > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_removeFirst(QList< QByteArray > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_removeFirst(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_removeFirst(QList< QModelIndex > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_removeFirst(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_removeFirst(QList< QAbstractState * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_removeFirst(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_removeFirst(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_removeFirst(QList< QLocale > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_removeFirst(QList< QLocale::Country > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_removeFirst(QList< QCommandLineOption > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_removeFirst(QList< QFileInfo > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_removeFirst(QList< QUrl > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_removeFirst(QList< QMimeType > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_removeFirst(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_removeFirst(QList< QStorageInfo > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_removeFirst(QList< int > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_removeFirst(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_removeLast(QList< QString > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_removeLast(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_removeLast(QList< QObject * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_removeLast(QList< QVariant > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_removeLast(QList< QByteArray > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_removeLast(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_removeLast(QList< QModelIndex > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_removeLast(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_removeLast(QList< QAbstractState * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_removeLast(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_removeLast(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_removeLast(QList< QLocale > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_removeLast(QList< QLocale::Country > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_removeLast(QList< QCommandLineOption > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_removeLast(QList< QFileInfo > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_removeLast(QList< QUrl > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_removeLast(QList< QMimeType > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_removeLast(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_removeLast(QList< QStorageInfo > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_removeLast(QList< int > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_removeLast(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_startsWith(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_startsWith(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_startsWith(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_startsWith(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_startsWith(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_startsWith(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_startsWith(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_startsWith(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_startsWith(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_startsWith(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_startsWith(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_startsWith(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_startsWith(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_startsWith(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_startsWith(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_startsWith(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_startsWith(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_startsWith(QList< int > const * this_ptr, int const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_startsWith(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_endsWith(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_endsWith(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_endsWith(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_endsWith(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_endsWith(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_endsWith(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_endsWith(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_endsWith(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_endsWith(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_endsWith(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_endsWith(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_endsWith(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_endsWith(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_endsWith(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_endsWith(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_endsWith(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_endsWith(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_endsWith(QList< int > const * this_ptr, int const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_endsWith(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_mid(QList< QString > const * this_ptr, int pos, int length) {
  return new QList< QString >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_mid(QList< QItemSelectionRange > const * this_ptr, int pos, int length) {
  return new QList< QItemSelectionRange >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_mid(QList< QObject * > const * this_ptr, int pos, int length) {
  return new QList< QObject * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_mid(QList< QVariant > const * this_ptr, int pos, int length) {
  return new QList< QVariant >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_mid(QList< QByteArray > const * this_ptr, int pos, int length) {
  return new QList< QByteArray >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_mid(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, int pos, int length) {
  return new QList< QAbstractEventDispatcher::TimerInfo >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_mid(QList< QModelIndex > const * this_ptr, int pos, int length) {
  return new QList< QModelIndex >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_mid(QList< QPersistentModelIndex > const * this_ptr, int pos, int length) {
  return new QList< QPersistentModelIndex >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_mid(QList< QAbstractState * > const * this_ptr, int pos, int length) {
  return new QList< QAbstractState * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_mid(QList< QAbstractAnimation * > const * this_ptr, int pos, int length) {
  return new QList< QAbstractAnimation * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_mid(QList< Qt::DayOfWeek > const * this_ptr, int pos, int length) {
  return new QList< Qt::DayOfWeek >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_mid(QList< QLocale > const * this_ptr, int pos, int length) {
  return new QList< QLocale >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_mid(QList< QLocale::Country > const * this_ptr, int pos, int length) {
  return new QList< QLocale::Country >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_mid(QList< QCommandLineOption > const * this_ptr, int pos, int length) {
  return new QList< QCommandLineOption >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_mid(QList< QFileInfo > const * this_ptr, int pos, int length) {
  return new QList< QFileInfo >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_mid(QList< QUrl > const * this_ptr, int pos, int length) {
  return new QList< QUrl >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_mid(QList< QMimeType > const * this_ptr, int pos, int length) {
  return new QList< QMimeType >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_mid(QList< QAbstractTransition * > const * this_ptr, int pos, int length) {
  return new QList< QAbstractTransition * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_mid(QList< QStorageInfo > const * this_ptr, int pos, int length) {
  return new QList< QStorageInfo >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_mid(QList< int > const * this_ptr, int pos, int length) {
  return new QList< int >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_mid(QList< QPair< QString, QString > > const * this_ptr, int pos, int length) {
  return new QList< QPair< QString, QString > >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_value(QList< QString > const * this_ptr, int i) {
  return new QString(this_ptr->value(i));
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_value(QList< QItemSelectionRange > const * this_ptr, int i) {
  return new QItemSelectionRange(this_ptr->value(i));
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QList_QObject_ptr_value(QList< QObject * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_value(QList< QVariant > const * this_ptr, int i) {
  return new QVariant(this_ptr->value(i));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_value(QList< QByteArray > const * this_ptr, int i) {
  return new QByteArray(this_ptr->value(i));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_value(QList< QModelIndex > const * this_ptr, int i) {
  return new QModelIndex(this_ptr->value(i));
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_value(QList< QPersistentModelIndex > const * this_ptr, int i) {
  return new QPersistentModelIndex(this_ptr->value(i));
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QList_QAbstractState_ptr_value(QList< QAbstractState * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_value(QList< QAbstractAnimation * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QList_Qt_DayOfWeek_value(QList< Qt::DayOfWeek > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_value(QList< QLocale > const * this_ptr, int i) {
  return new QLocale(this_ptr->value(i));
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QList_QLocale_Country_value(QList< QLocale::Country > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_value(QList< QFileInfo > const * this_ptr, int i) {
  return new QFileInfo(this_ptr->value(i));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_value(QList< QUrl > const * this_ptr, int i) {
  return new QUrl(this_ptr->value(i));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_value(QList< QMimeType > const * this_ptr, int i) {
  return new QMimeType(this_ptr->value(i));
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_value(QList< QAbstractTransition * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_value(QList< QStorageInfo > const * this_ptr, int i) {
  return new QStorageInfo(this_ptr->value(i));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_value(QList< int > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_value(QList< QPair< QString, QString > > const * this_ptr, int i) {
  return new QPair< QString, QString >(this_ptr->value(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_value1(QList< QString > const * this_ptr, int i, QString const * defaultValue) {
  return new QString(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_value1(QList< QItemSelectionRange > const * this_ptr, int i, QItemSelectionRange const * defaultValue) {
  return new QItemSelectionRange(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QList_QObject_ptr_value1(QList< QObject * > const * this_ptr, int i, QObject * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_value1(QList< QVariant > const * this_ptr, int i, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_value1(QList< QByteArray > const * this_ptr, int i, QByteArray const * defaultValue) {
  return new QByteArray(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_value1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, int i, QAbstractEventDispatcher::TimerInfo const * defaultValue) {
  return new QAbstractEventDispatcher::TimerInfo(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_value1(QList< QModelIndex > const * this_ptr, int i, QModelIndex const * defaultValue) {
  return new QModelIndex(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_value1(QList< QPersistentModelIndex > const * this_ptr, int i, QPersistentModelIndex const * defaultValue) {
  return new QPersistentModelIndex(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_QList_QAbstractState_ptr_value1(QList< QAbstractState * > const * this_ptr, int i, QAbstractState * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_value1(QList< QAbstractAnimation * > const * this_ptr, int i, QAbstractAnimation * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT Qt::DayOfWeek ctr_qt_core_ffi_QList_Qt_DayOfWeek_value1(QList< Qt::DayOfWeek > const * this_ptr, int i, Qt::DayOfWeek const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_value1(QList< QLocale > const * this_ptr, int i, QLocale const * defaultValue) {
  return new QLocale(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QLocale::Country ctr_qt_core_ffi_QList_QLocale_Country_value1(QList< QLocale::Country > const * this_ptr, int i, QLocale::Country const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_value1(QList< QCommandLineOption > const * this_ptr, int i, QCommandLineOption const * defaultValue) {
  return new QCommandLineOption(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_value1(QList< QFileInfo > const * this_ptr, int i, QFileInfo const * defaultValue) {
  return new QFileInfo(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_value1(QList< QUrl > const * this_ptr, int i, QUrl const * defaultValue) {
  return new QUrl(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_value1(QList< QMimeType > const * this_ptr, int i, QMimeType const * defaultValue) {
  return new QMimeType(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_value1(QList< QAbstractTransition * > const * this_ptr, int i, QAbstractTransition * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_value1(QList< QStorageInfo > const * this_ptr, int i, QStorageInfo const * defaultValue) {
  return new QStorageInfo(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_value1(QList< int > const * this_ptr, int i, int const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_value1(QList< QPair< QString, QString > > const * this_ptr, int i, QPair< QString, QString > const * defaultValue) {
  return new QPair< QString, QString >(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_push_back(QList< QString > * this_ptr, QString const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_push_back(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_push_back(QList< QObject * > * this_ptr, QObject * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_push_back(QList< QVariant > * this_ptr, QVariant const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_push_back(QList< QByteArray > * this_ptr, QByteArray const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_push_back(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_push_back(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_push_back(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_push_back(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_push_back(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_push_back(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_push_back(QList< QLocale > * this_ptr, QLocale const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_push_back(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_push_back(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_push_back(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_push_back(QList< QUrl > * this_ptr, QUrl const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_push_back(QList< QMimeType > * this_ptr, QMimeType const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_push_back(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_push_back(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_push_back(QList< int > * this_ptr, int const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_push_back(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_push_front(QList< QString > * this_ptr, QString const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_push_front(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_push_front(QList< QObject * > * this_ptr, QObject * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_push_front(QList< QVariant > * this_ptr, QVariant const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_push_front(QList< QByteArray > * this_ptr, QByteArray const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_push_front(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_push_front(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_push_front(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_push_front(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_push_front(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_push_front(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_push_front(QList< QLocale > * this_ptr, QLocale const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_push_front(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_push_front(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_push_front(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_push_front(QList< QUrl > * this_ptr, QUrl const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_push_front(QList< QMimeType > * this_ptr, QMimeType const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_push_front(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_push_front(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_push_front(QList< int > * this_ptr, int const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_push_front(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_front(QList< QString > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_front(QList< QItemSelectionRange > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_front(QList< QObject * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_front(QList< QVariant > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_front(QList< QByteArray > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_front(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_front(QList< QModelIndex > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_front(QList< QPersistentModelIndex > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_front(QList< QAbstractState * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_front(QList< QAbstractAnimation * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_front(QList< Qt::DayOfWeek > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_front(QList< QLocale > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_front(QList< QLocale::Country > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_front(QList< QCommandLineOption > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_front(QList< QFileInfo > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_front(QList< QUrl > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_front(QList< QMimeType > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_front(QList< QAbstractTransition * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_front(QList< QStorageInfo > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_front(QList< int > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_front(QList< QPair< QString, QString > > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_front1(QList< QString > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_front1(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_front1(QList< QObject * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_front1(QList< QVariant > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_front1(QList< QByteArray > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_front1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_front1(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_front1(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_front1(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_front1(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_front1(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_front1(QList< QLocale > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_front1(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_front1(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_front1(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_front1(QList< QUrl > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_front1(QList< QMimeType > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_front1(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_front1(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_front1(QList< int > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_front1(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QList_QString_back(QList< QString > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QItemSelectionRange * ctr_qt_core_ffi_QList_QItemSelectionRange_back(QList< QItemSelectionRange > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QObject * * ctr_qt_core_ffi_QList_QObject_ptr_back(QList< QObject * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QList_QVariant_back(QList< QVariant > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QList_QByteArray_back(QList< QByteArray > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_back(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QList_QModelIndex_back(QList< QModelIndex > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPersistentModelIndex * ctr_qt_core_ffi_QList_QPersistentModelIndex_back(QList< QPersistentModelIndex > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractState * * ctr_qt_core_ffi_QList_QAbstractState_ptr_back(QList< QAbstractState * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractAnimation * * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_back(QList< QAbstractAnimation * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT Qt::DayOfWeek * ctr_qt_core_ffi_QList_Qt_DayOfWeek_back(QList< Qt::DayOfWeek > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QList_QLocale_back(QList< QLocale > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLocale::Country * ctr_qt_core_ffi_QList_QLocale_Country_back(QList< QLocale::Country > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QList_QCommandLineOption_back(QList< QCommandLineOption > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QFileInfo * ctr_qt_core_ffi_QList_QFileInfo_back(QList< QFileInfo > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QList_QUrl_back(QList< QUrl > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QList_QMimeType_back(QList< QMimeType > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractTransition * * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_back(QList< QAbstractTransition * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStorageInfo * ctr_qt_core_ffi_QList_QStorageInfo_back(QList< QStorageInfo > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QList_int_back(QList< int > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QList_QPair_QString_QString_back(QList< QPair< QString, QString > > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QList_QString_back1(QList< QString > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QItemSelectionRange const * ctr_qt_core_ffi_QList_QItemSelectionRange_back1(QList< QItemSelectionRange > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QObject * const * ctr_qt_core_ffi_QList_QObject_ptr_back1(QList< QObject * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QList_QVariant_back1(QList< QVariant > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QList_QByteArray_back1(QList< QByteArray > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractEventDispatcher::TimerInfo const * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_back1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QModelIndex const * ctr_qt_core_ffi_QList_QModelIndex_back1(QList< QModelIndex > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPersistentModelIndex const * ctr_qt_core_ffi_QList_QPersistentModelIndex_back1(QList< QPersistentModelIndex > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QList_QAbstractState_ptr_back1(QList< QAbstractState * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractAnimation * const * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_back1(QList< QAbstractAnimation * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT Qt::DayOfWeek const * ctr_qt_core_ffi_QList_Qt_DayOfWeek_back1(QList< Qt::DayOfWeek > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLocale const * ctr_qt_core_ffi_QList_QLocale_back1(QList< QLocale > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLocale::Country const * ctr_qt_core_ffi_QList_QLocale_Country_back1(QList< QLocale::Country > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QCommandLineOption const * ctr_qt_core_ffi_QList_QCommandLineOption_back1(QList< QCommandLineOption > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QFileInfo const * ctr_qt_core_ffi_QList_QFileInfo_back1(QList< QFileInfo > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QUrl const * ctr_qt_core_ffi_QList_QUrl_back1(QList< QUrl > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QMimeType const * ctr_qt_core_ffi_QList_QMimeType_back1(QList< QMimeType > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractTransition * const * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_back1(QList< QAbstractTransition * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStorageInfo const * ctr_qt_core_ffi_QList_QStorageInfo_back1(QList< QStorageInfo > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QList_int_back1(QList< int > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< QString, QString > const * ctr_qt_core_ffi_QList_QPair_QString_QString_back1(QList< QPair< QString, QString > > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_pop_front(QList< QString > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_pop_front(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_pop_front(QList< QObject * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_pop_front(QList< QVariant > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_pop_front(QList< QByteArray > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_pop_front(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_pop_front(QList< QModelIndex > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_pop_front(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_pop_front(QList< QAbstractState * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_pop_front(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_pop_front(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_pop_front(QList< QLocale > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_pop_front(QList< QLocale::Country > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_pop_front(QList< QCommandLineOption > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_pop_front(QList< QFileInfo > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_pop_front(QList< QUrl > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_pop_front(QList< QMimeType > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_pop_front(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_pop_front(QList< QStorageInfo > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_pop_front(QList< int > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_pop_front(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_pop_back(QList< QString > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_pop_back(QList< QItemSelectionRange > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_pop_back(QList< QObject * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_pop_back(QList< QVariant > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_pop_back(QList< QByteArray > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_pop_back(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_pop_back(QList< QModelIndex > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_pop_back(QList< QPersistentModelIndex > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_pop_back(QList< QAbstractState * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_pop_back(QList< QAbstractAnimation * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_pop_back(QList< Qt::DayOfWeek > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_pop_back(QList< QLocale > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_pop_back(QList< QLocale::Country > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_pop_back(QList< QCommandLineOption > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_pop_back(QList< QFileInfo > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_pop_back(QList< QUrl > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_pop_back(QList< QMimeType > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_pop_back(QList< QAbstractTransition * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_pop_back(QList< QStorageInfo > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_pop_back(QList< int > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_pop_back(QList< QPair< QString, QString > > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QString_empty(QList< QString > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QItemSelectionRange_empty(QList< QItemSelectionRange > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QObject_ptr_empty(QList< QObject * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QVariant_empty(QList< QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QByteArray_empty(QList< QByteArray > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_empty(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QModelIndex_empty(QList< QModelIndex > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPersistentModelIndex_empty(QList< QPersistentModelIndex > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractState_ptr_empty(QList< QAbstractState * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_empty(QList< QAbstractAnimation * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_Qt_DayOfWeek_empty(QList< Qt::DayOfWeek > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_empty(QList< QLocale > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QLocale_Country_empty(QList< QLocale::Country > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QCommandLineOption_empty(QList< QCommandLineOption > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QFileInfo_empty(QList< QFileInfo > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QUrl_empty(QList< QUrl > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QMimeType_empty(QList< QMimeType > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QAbstractTransition_ptr_empty(QList< QAbstractTransition * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QStorageInfo_empty(QList< QStorageInfo > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_int_empty(QList< int > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QList_QPair_QString_QString_empty(QList< QPair< QString, QString > > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator__4(QList< QString > * this_ptr, QList< QString > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__4(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator__4(QList< QObject * > * this_ptr, QList< QObject * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator__4(QList< QVariant > * this_ptr, QList< QVariant > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator__4(QList< QByteArray > * this_ptr, QList< QByteArray > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__4(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator__4(QList< QModelIndex > * this_ptr, QList< QModelIndex > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__4(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__4(QList< QAbstractState * > * this_ptr, QList< QAbstractState * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__4(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__4(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator__4(QList< QLocale > * this_ptr, QList< QLocale > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator__4(QList< QLocale::Country > * this_ptr, QList< QLocale::Country > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator__4(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator__4(QList< QFileInfo > * this_ptr, QList< QFileInfo > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator__4(QList< QUrl > * this_ptr, QList< QUrl > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator__4(QList< QMimeType > * this_ptr, QList< QMimeType > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__4(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator__4(QList< QStorageInfo > * this_ptr, QList< QStorageInfo > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator__4(QList< int > * this_ptr, QList< int > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__4(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator_2(QList< QString > const * this_ptr, QList< QString > const * l) {
  return new QList< QString >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator_2(QList< QItemSelectionRange > const * this_ptr, QList< QItemSelectionRange > const * l) {
  return new QList< QItemSelectionRange >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator_2(QList< QObject * > const * this_ptr, QList< QObject * > const * l) {
  return new QList< QObject * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator_2(QList< QVariant > const * this_ptr, QList< QVariant > const * l) {
  return new QList< QVariant >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator_2(QList< QByteArray > const * this_ptr, QList< QByteArray > const * l) {
  return new QList< QByteArray >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator_2(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * l) {
  return new QList< QAbstractEventDispatcher::TimerInfo >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator_2(QList< QModelIndex > const * this_ptr, QList< QModelIndex > const * l) {
  return new QList< QModelIndex >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator_2(QList< QPersistentModelIndex > const * this_ptr, QList< QPersistentModelIndex > const * l) {
  return new QList< QPersistentModelIndex >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator_2(QList< QAbstractState * > const * this_ptr, QList< QAbstractState * > const * l) {
  return new QList< QAbstractState * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator_2(QList< QAbstractAnimation * > const * this_ptr, QList< QAbstractAnimation * > const * l) {
  return new QList< QAbstractAnimation * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator_2(QList< Qt::DayOfWeek > const * this_ptr, QList< Qt::DayOfWeek > const * l) {
  return new QList< Qt::DayOfWeek >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator_2(QList< QLocale > const * this_ptr, QList< QLocale > const * l) {
  return new QList< QLocale >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator_2(QList< QLocale::Country > const * this_ptr, QList< QLocale::Country > const * l) {
  return new QList< QLocale::Country >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator_2(QList< QCommandLineOption > const * this_ptr, QList< QCommandLineOption > const * l) {
  return new QList< QCommandLineOption >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator_2(QList< QFileInfo > const * this_ptr, QList< QFileInfo > const * l) {
  return new QList< QFileInfo >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator_2(QList< QUrl > const * this_ptr, QList< QUrl > const * l) {
  return new QList< QUrl >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator_2(QList< QMimeType > const * this_ptr, QList< QMimeType > const * l) {
  return new QList< QMimeType >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator_2(QList< QAbstractTransition * > const * this_ptr, QList< QAbstractTransition * > const * l) {
  return new QList< QAbstractTransition * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator_2(QList< QStorageInfo > const * this_ptr, QList< QStorageInfo > const * l) {
  return new QList< QStorageInfo >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator_2(QList< int > const * this_ptr, QList< int > const * l) {
  return new QList< int >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator_2(QList< QPair< QString, QString > > const * this_ptr, QList< QPair< QString, QString > > const * l) {
  return new QList< QPair< QString, QString > >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator__5(QList< QString > * this_ptr, QString const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__5(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator__5(QList< QObject * > * this_ptr, QObject * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator__5(QList< QVariant > * this_ptr, QVariant const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator__5(QList< QByteArray > * this_ptr, QByteArray const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__5(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator__5(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__5(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__5(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__5(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__5(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator__5(QList< QLocale > * this_ptr, QLocale const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator__5(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator__5(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator__5(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator__5(QList< QUrl > * this_ptr, QUrl const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator__5(QList< QMimeType > * this_ptr, QMimeType const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__5(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator__5(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator__5(QList< int > * this_ptr, int const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__5(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator__6(QList< QString > * this_ptr, QString const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__6(QList< QItemSelectionRange > * this_ptr, QItemSelectionRange const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator__6(QList< QObject * > * this_ptr, QObject * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator__6(QList< QVariant > * this_ptr, QVariant const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator__6(QList< QByteArray > * this_ptr, QByteArray const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__6(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QAbstractEventDispatcher::TimerInfo const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator__6(QList< QModelIndex > * this_ptr, QModelIndex const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__6(QList< QPersistentModelIndex > * this_ptr, QPersistentModelIndex const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__6(QList< QAbstractState * > * this_ptr, QAbstractState * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__6(QList< QAbstractAnimation * > * this_ptr, QAbstractAnimation * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__6(QList< Qt::DayOfWeek > * this_ptr, Qt::DayOfWeek const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator__6(QList< QLocale > * this_ptr, QLocale const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator__6(QList< QLocale::Country > * this_ptr, QLocale::Country const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator__6(QList< QCommandLineOption > * this_ptr, QCommandLineOption const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator__6(QList< QFileInfo > * this_ptr, QFileInfo const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator__6(QList< QUrl > * this_ptr, QUrl const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator__6(QList< QMimeType > * this_ptr, QMimeType const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__6(QList< QAbstractTransition * > * this_ptr, QAbstractTransition * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator__6(QList< QStorageInfo > * this_ptr, QStorageInfo const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator__6(QList< int > * this_ptr, int const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__6(QList< QPair< QString, QString > > * this_ptr, QPair< QString, QString > const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_operator__7(QList< QString > * this_ptr, QList< QString > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_operator__7(QList< QItemSelectionRange > * this_ptr, QList< QItemSelectionRange > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_operator__7(QList< QObject * > * this_ptr, QList< QObject * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_operator__7(QList< QVariant > * this_ptr, QList< QVariant > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_operator__7(QList< QByteArray > * this_ptr, QList< QByteArray > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_operator__7(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, QList< QAbstractEventDispatcher::TimerInfo > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_operator__7(QList< QModelIndex > * this_ptr, QList< QModelIndex > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_operator__7(QList< QPersistentModelIndex > * this_ptr, QList< QPersistentModelIndex > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_operator__7(QList< QAbstractState * > * this_ptr, QList< QAbstractState * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_operator__7(QList< QAbstractAnimation * > * this_ptr, QList< QAbstractAnimation * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_operator__7(QList< Qt::DayOfWeek > * this_ptr, QList< Qt::DayOfWeek > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_operator__7(QList< QLocale > * this_ptr, QList< QLocale > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_operator__7(QList< QLocale::Country > * this_ptr, QList< QLocale::Country > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_operator__7(QList< QCommandLineOption > * this_ptr, QList< QCommandLineOption > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_operator__7(QList< QFileInfo > * this_ptr, QList< QFileInfo > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_operator__7(QList< QUrl > * this_ptr, QList< QUrl > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_operator__7(QList< QMimeType > * this_ptr, QList< QMimeType > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_operator__7(QList< QAbstractTransition * > * this_ptr, QList< QAbstractTransition * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_operator__7(QList< QStorageInfo > * this_ptr, QList< QStorageInfo > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_operator__7(QList< int > * this_ptr, QList< int > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_operator__7(QList< QPair< QString, QString > > * this_ptr, QList< QPair< QString, QString > > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QList_int_toVector(QList< int > const * this_ptr) {
  return new QVector< int >(this_ptr->toVector());
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_toSet(QList< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >(this_ptr->toSet());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_fromVector(QVector< int > const * vector) {
  return new QList< int >(QList< int >::fromVector(*vector));
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_fromSet(QSet< QAbstractState * > const * set) {
  return new QList< QAbstractState * >(QList< QAbstractState * >::fromSet(*set));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash37(QList< QString > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash38(QList< QItemSelectionRange > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash39(QList< QObject * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash41(QList< QByteArray > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash43(QList< QModelIndex > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash44(QList< QPersistentModelIndex > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash45(QList< QAbstractState * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash46(QList< QAbstractAnimation * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash47(QList< Qt::DayOfWeek > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash48(QList< QLocale > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash49(QList< QLocale::Country > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash52(QList< QUrl > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash53(QList< QMimeType > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash54(QList< QAbstractTransition * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash56(QList< int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash57(QList< QPair< QString, QString > > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_142(QList< QString > const * lhs, QList< QString > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_143(QList< QItemSelectionRange > const * lhs, QList< QItemSelectionRange > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_144(QList< QObject * > const * lhs, QList< QObject * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_145(QList< QVariant > const * lhs, QList< QVariant > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_146(QList< QByteArray > const * lhs, QList< QByteArray > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_148(QList< QModelIndex > const * lhs, QList< QModelIndex > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_149(QList< QPersistentModelIndex > const * lhs, QList< QPersistentModelIndex > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_150(QList< QAbstractState * > const * lhs, QList< QAbstractState * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_151(QList< QAbstractAnimation * > const * lhs, QList< QAbstractAnimation * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_152(QList< Qt::DayOfWeek > const * lhs, QList< Qt::DayOfWeek > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_154(QList< QLocale::Country > const * lhs, QList< QLocale::Country > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_157(QList< QUrl > const * lhs, QList< QUrl > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_159(QList< QAbstractTransition * > const * lhs, QList< QAbstractTransition * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_161(QList< int > const * lhs, QList< int > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_162(QList< QPair< QString, QString > > const * lhs, QList< QPair< QString, QString > > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_163(QList< QString > const * lhs, QList< QString > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_164(QList< QItemSelectionRange > const * lhs, QList< QItemSelectionRange > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_165(QList< QObject * > const * lhs, QList< QObject * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_166(QList< QVariant > const * lhs, QList< QVariant > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_167(QList< QByteArray > const * lhs, QList< QByteArray > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_169(QList< QModelIndex > const * lhs, QList< QModelIndex > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_170(QList< QPersistentModelIndex > const * lhs, QList< QPersistentModelIndex > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_171(QList< QAbstractState * > const * lhs, QList< QAbstractState * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_172(QList< QAbstractAnimation * > const * lhs, QList< QAbstractAnimation * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_173(QList< Qt::DayOfWeek > const * lhs, QList< Qt::DayOfWeek > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_175(QList< QLocale::Country > const * lhs, QList< QLocale::Country > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_178(QList< QUrl > const * lhs, QList< QUrl > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_180(QList< QAbstractTransition * > const * lhs, QList< QAbstractTransition * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_182(QList< int > const * lhs, QList< int > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_183(QList< QPair< QString, QString > > const * lhs, QList< QPair< QString, QString > > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__215(QList< QString > const * lhs, QList< QString > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__216(QList< QItemSelectionRange > const * lhs, QList< QItemSelectionRange > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__217(QList< QObject * > const * lhs, QList< QObject * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__218(QList< QVariant > const * lhs, QList< QVariant > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__219(QList< QByteArray > const * lhs, QList< QByteArray > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__221(QList< QModelIndex > const * lhs, QList< QModelIndex > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__222(QList< QPersistentModelIndex > const * lhs, QList< QPersistentModelIndex > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__223(QList< QAbstractState * > const * lhs, QList< QAbstractState * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__224(QList< QAbstractAnimation * > const * lhs, QList< QAbstractAnimation * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__225(QList< Qt::DayOfWeek > const * lhs, QList< Qt::DayOfWeek > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__227(QList< QLocale::Country > const * lhs, QList< QLocale::Country > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__230(QList< QUrl > const * lhs, QList< QUrl > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__232(QList< QAbstractTransition * > const * lhs, QList< QAbstractTransition * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__234(QList< int > const * lhs, QList< int > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__235(QList< QPair< QString, QString > > const * lhs, QList< QPair< QString, QString > > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__236(QList< QString > const * lhs, QList< QString > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__237(QList< QItemSelectionRange > const * lhs, QList< QItemSelectionRange > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__238(QList< QObject * > const * lhs, QList< QObject * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__239(QList< QVariant > const * lhs, QList< QVariant > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__240(QList< QByteArray > const * lhs, QList< QByteArray > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__242(QList< QModelIndex > const * lhs, QList< QModelIndex > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__243(QList< QPersistentModelIndex > const * lhs, QList< QPersistentModelIndex > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__244(QList< QAbstractState * > const * lhs, QList< QAbstractState * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__245(QList< QAbstractAnimation * > const * lhs, QList< QAbstractAnimation * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__246(QList< Qt::DayOfWeek > const * lhs, QList< Qt::DayOfWeek > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__248(QList< QLocale::Country > const * lhs, QList< QLocale::Country > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__251(QList< QUrl > const * lhs, QList< QUrl > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__253(QList< QAbstractTransition * > const * lhs, QList< QAbstractTransition * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__255(QList< int > const * lhs, QList< int > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__256(QList< QPair< QString, QString > > const * lhs, QList< QPair< QString, QString > > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_QMap() {
  return new QMap< QString, QVariant >();
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_QMap() {
  return new QMap< int, QVariant >();
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_QMap1(QMap< QString, QVariant > const * other) {
  return new QMap< QString, QVariant >(*other);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_QMap1(QMap< int, QVariant > const * other) {
  return new QMap< int, QVariant >(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_dQMap(QMap< QString, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_dQMap(QMap< int, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_operator_(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_operator_(QMap< int, QVariant > * this_ptr, QMap< int, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_swap(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_swap(QMap< int, QVariant > * this_ptr, QMap< int, QVariant > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_operator__(QMap< QString, QVariant > const * this_ptr, QMap< QString, QVariant > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_operator__(QMap< int, QVariant > const * this_ptr, QMap< int, QVariant > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_QString_QVariant_size(QMap< QString, QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_size(QMap< int, QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_isEmpty(QMap< QString, QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_isEmpty(QMap< int, QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_detach(QMap< QString, QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_detach(QMap< int, QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_isDetached(QMap< QString, QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_isDetached(QMap< int, QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_setSharable(QMap< QString, QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_setSharable(QMap< int, QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_isSharedWith(QMap< QString, QVariant > const * this_ptr, QMap< QString, QVariant > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_isSharedWith(QMap< int, QVariant > const * this_ptr, QMap< int, QVariant > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_clear(QMap< QString, QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_clear(QMap< int, QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_QString_QVariant_remove(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_remove(QMap< int, QVariant > * this_ptr, int const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_take(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return new QVariant(this_ptr->take(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_take(QMap< int, QVariant > * this_ptr, int const * key) {
  return new QVariant(this_ptr->take(*key));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_contains(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_contains(QMap< int, QVariant > const * this_ptr, int const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMap_QString_QVariant_key(QMap< QString, QVariant > const * this_ptr, QVariant const * value, QString const * defaultKey) {
  return new QString(this_ptr->key(*value, *defaultKey));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_key(QMap< int, QVariant > const * this_ptr, QVariant const * value, int const * defaultKey) {
  return this_ptr->key(*value, *defaultKey);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_value(QMap< QString, QVariant > const * this_ptr, QString const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_value(QMap< int, QVariant > const * this_ptr, int const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_operator__2(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_operator__2(QMap< int, QVariant > * this_ptr, int const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_operator__3(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->operator[](*key));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_operator__3(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QVariant(this_ptr->operator[](*key));
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QMap_QString_QVariant_uniqueKeys(QMap< QString, QVariant > const * this_ptr) {
  return new QList< QString >(this_ptr->uniqueKeys());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QMap_int_QVariant_uniqueKeys(QMap< int, QVariant > const * this_ptr) {
  return new QList< int >(this_ptr->uniqueKeys());
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QMap_QString_QVariant_keys(QMap< QString, QVariant > const * this_ptr) {
  return new QList< QString >(this_ptr->keys());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QMap_int_QVariant_keys(QMap< int, QVariant > const * this_ptr) {
  return new QList< int >(this_ptr->keys());
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QMap_QString_QVariant_keys1(QMap< QString, QVariant > const * this_ptr, QVariant const * value) {
  return new QList< QString >(this_ptr->keys(*value));
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QMap_int_QVariant_keys1(QMap< int, QVariant > const * this_ptr, QVariant const * value) {
  return new QList< int >(this_ptr->keys(*value));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_values(QMap< QString, QVariant > const * this_ptr) {
  return new QList< QVariant >(this_ptr->values());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_values(QMap< int, QVariant > const * this_ptr) {
  return new QList< QVariant >(this_ptr->values());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_values1(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QList< QVariant >(this_ptr->values(*key));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_values1(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QList< QVariant >(this_ptr->values(*key));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_QString_QVariant_count(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_count(QMap< int, QVariant > const * this_ptr, int const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_firstKey(QMap< QString, QVariant > const * this_ptr) {
  return &this_ptr->firstKey();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_firstKey(QMap< int, QVariant > const * this_ptr) {
  return &this_ptr->firstKey();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_lastKey(QMap< QString, QVariant > const * this_ptr) {
  return &this_ptr->lastKey();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_lastKey(QMap< int, QVariant > const * this_ptr) {
  return &this_ptr->lastKey();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_first(QMap< QString, QVariant > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_first(QMap< int, QVariant > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_QString_QVariant_first1(QMap< QString, QVariant > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_int_QVariant_first1(QMap< int, QVariant > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_last(QMap< QString, QVariant > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_last(QMap< int, QVariant > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_QString_QVariant_last1(QMap< QString, QVariant > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_int_QVariant_last1(QMap< int, QVariant > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_iterator() {
  return new QMap< QString, QVariant >::iterator();
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_iterator() {
  return new QMap< int, QVariant >::iterator();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_key(QMap< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_iterator_key(QMap< int, QVariant >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_value(QMap< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_iterator_value(QMap< int, QVariant >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator_(QMap< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator_(QMap< int, QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__(QMap< QString, QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__(QMap< int, QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__1(QMap< QString, QVariant >::iterator const * this_ptr, QMap< QString, QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__1(QMap< int, QVariant >::iterator const * this_ptr, QMap< int, QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__3(QMap< QString, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__3(QMap< int, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__4(QMap< QString, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__4(QMap< int, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__5(QMap< QString, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__5(QMap< int, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__6(QMap< QString, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__6(QMap< int, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator_1(QMap< QString, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< QString, QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator_1(QMap< int, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< int, QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator_2(QMap< QString, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< QString, QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator_2(QMap< int, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< int, QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__7(QMap< QString, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__7(QMap< int, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__8(QMap< QString, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__8(QMap< int, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator__9(QMap< QString, QVariant >::iterator const * this_ptr, QMap< QString, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator__9(QMap< int, QVariant >::iterator const * this_ptr, QMap< int, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_const_iterator() {
  return new QMap< QString, QVariant >::const_iterator();
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_const_iterator() {
  return new QMap< int, QVariant >::const_iterator();
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_const_iterator1(QMap< QString, QVariant >::iterator const * o) {
  return new QMap< QString, QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_const_iterator1(QMap< int, QVariant >::iterator const * o) {
  return new QMap< int, QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_key(QMap< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_key(QMap< int, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_value(QMap< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_value(QMap< int, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator_(QMap< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator_(QMap< int, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__(QMap< QString, QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__(QMap< int, QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__1(QMap< QString, QVariant >::const_iterator const * this_ptr, QMap< QString, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__1(QMap< int, QVariant >::const_iterator const * this_ptr, QMap< int, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__3(QMap< QString, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__3(QMap< int, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__4(QMap< QString, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__4(QMap< int, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__5(QMap< QString, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__5(QMap< int, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__6(QMap< QString, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__6(QMap< int, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator_1(QMap< QString, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator_1(QMap< int, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator_2(QMap< QString, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator_2(QMap< int, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__7(QMap< QString, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__7(QMap< int, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator__8(QMap< QString, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator__8(QMap< int, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_key_iterator() {
  return new QMap< QString, QVariant >::key_iterator();
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_key_iterator() {
  return new QMap< int, QVariant >::key_iterator();
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_key_iterator1(QMap< QString, QVariant >::const_iterator const * o) {
  return new QMap< QString, QVariant >::key_iterator(*o);
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_key_iterator1(QMap< int, QVariant >::const_iterator const * o) {
  return new QMap< int, QVariant >::key_iterator(*o);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator_(QMap< QString, QVariant >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator_(QMap< int, QVariant >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__(QMap< QString, QVariant >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__(QMap< int, QVariant >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__1(QMap< QString, QVariant >::key_iterator const * this_ptr, QMap< QString, QVariant >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__1(QMap< int, QVariant >::key_iterator const * this_ptr, QMap< int, QVariant >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__3(QMap< QString, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__3(QMap< int, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__4(QMap< QString, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__4(QMap< int, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__5(QMap< QString, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__5(QMap< int, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator__6(QMap< QString, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< QString, QVariant >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator__6(QMap< int, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< int, QVariant >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_base(QMap< QString, QVariant >::key_iterator const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_base(QMap< int, QVariant >::key_iterator const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_begin(QMap< QString, QVariant > * this_ptr) {
  return new QMap< QString, QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_begin(QMap< int, QVariant > * this_ptr) {
  return new QMap< int, QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_begin1(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_begin1(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_constBegin(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_constBegin(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_cbegin(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_cbegin(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_end(QMap< QString, QVariant > * this_ptr) {
  return new QMap< QString, QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_end(QMap< int, QVariant > * this_ptr) {
  return new QMap< int, QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_end1(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_end1(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_constEnd(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_constEnd(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_cend(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_cend(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_keyBegin(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_keyBegin(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_keyEnd(QMap< QString, QVariant > const * this_ptr) {
  return new QMap< QString, QVariant >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_keyEnd(QMap< int, QVariant > const * this_ptr) {
  return new QMap< int, QVariant >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_erase(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant >::iterator const * it) {
  return new QMap< QString, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_erase(QMap< int, QVariant > * this_ptr, QMap< int, QVariant >::iterator const * it) {
  return new QMap< int, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_QString_QVariant_count1(QMap< QString, QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_count1(QMap< int, QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_find(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_find(QMap< int, QVariant > * this_ptr, int const * key) {
  return new QMap< int, QVariant >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_find1(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_find1(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_constFind(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_constFind(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_lowerBound(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_lowerBound(QMap< int, QVariant > * this_ptr, int const * key) {
  return new QMap< int, QVariant >::iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_lowerBound1(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_lowerBound1(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_upperBound(QMap< QString, QVariant > * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_upperBound(QMap< int, QVariant > * this_ptr, int const * key) {
  return new QMap< int, QVariant >::iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_upperBound1(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QMap< QString, QVariant >::const_iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_upperBound1(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QMap< int, QVariant >::const_iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_insert(QMap< QString, QVariant > * this_ptr, QString const * key, QVariant const * value) {
  return new QMap< QString, QVariant >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_insert(QMap< int, QVariant > * this_ptr, int const * key, QVariant const * value) {
  return new QMap< int, QVariant >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_insert1(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant >::const_iterator const * pos, QString const * key, QVariant const * value) {
  return new QMap< QString, QVariant >::iterator(this_ptr->insert(*pos, *key, *value));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_insert1(QMap< int, QVariant > * this_ptr, QMap< int, QVariant >::const_iterator const * pos, int const * key, QVariant const * value) {
  return new QMap< int, QVariant >::iterator(this_ptr->insert(*pos, *key, *value));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_insertMulti(QMap< QString, QVariant > * this_ptr, QString const * key, QVariant const * value) {
  return new QMap< QString, QVariant >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_insertMulti(QMap< int, QVariant > * this_ptr, int const * key, QVariant const * value) {
  return new QMap< int, QVariant >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_insertMulti1(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant >::const_iterator const * pos, QString const * akey, QVariant const * avalue) {
  return new QMap< QString, QVariant >::iterator(this_ptr->insertMulti(*pos, *akey, *avalue));
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_insertMulti1(QMap< int, QVariant > * this_ptr, QMap< int, QVariant >::const_iterator const * pos, int const * akey, QVariant const * avalue) {
  return new QMap< int, QVariant >::iterator(this_ptr->insertMulti(*pos, *akey, *avalue));
}


RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QMap_QString_QVariant_unite(QMap< QString, QVariant > * this_ptr, QMap< QString, QVariant > const * other) {
  return &this_ptr->unite(*other);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QMap_int_QVariant_unite(QMap< int, QVariant > * this_ptr, QMap< int, QVariant > const * other) {
  return &this_ptr->unite(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_QString_QVariant_empty(QMap< QString, QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMap_int_QVariant_empty(QMap< int, QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QHash_QString_QVariant_QHash() {
  return new QHash< QString, QVariant >();
}


RITUAL_EXPORT QHash< int, QByteArray > * ctr_qt_core_ffi_QHash_int_QByteArray_QHash() {
  return new QHash< int, QByteArray >();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_dQHash(QHash< QString, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_dQHash(QHash< int, QByteArray > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_QString_QVariant_size(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_size(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_isEmpty(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_isEmpty(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_QString_QVariant_capacity(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_capacity(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_reserve(QHash< QString, QVariant > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_reserve(QHash< int, QByteArray > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_squeeze(QHash< QString, QVariant > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_squeeze(QHash< int, QByteArray > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_detach(QHash< QString, QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_detach(QHash< int, QByteArray > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_isDetached(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_isDetached(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_setSharable(QHash< QString, QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_setSharable(QHash< int, QByteArray > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_clear(QHash< QString, QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_clear(QHash< int, QByteArray > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_QString_QVariant_remove(QHash< QString, QVariant > * this_ptr, QString const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_remove(QHash< int, QByteArray > * this_ptr, int const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_take(QHash< QString, QVariant > * this_ptr, QString const * key) {
  return new QVariant(this_ptr->take(*key));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_take(QHash< int, QByteArray > * this_ptr, int const * key) {
  return new QByteArray(this_ptr->take(*key));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_contains(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_contains(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QHash_QString_QVariant_key(QHash< QString, QVariant > const * this_ptr, QVariant const * value) {
  return new QString(this_ptr->key(*value));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_key(QHash< int, QByteArray > const * this_ptr, QByteArray const * value) {
  return this_ptr->key(*value);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QHash_QString_QVariant_key1(QHash< QString, QVariant > const * this_ptr, QVariant const * value, QString const * defaultKey) {
  return new QString(this_ptr->key(*value, *defaultKey));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_key1(QHash< int, QByteArray > const * this_ptr, QByteArray const * value, int const * defaultKey) {
  return this_ptr->key(*value, *defaultKey);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_value(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_value(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return new QByteArray(this_ptr->value(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_value1(QHash< QString, QVariant > const * this_ptr, QString const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_value1(QHash< int, QByteArray > const * this_ptr, int const * key, QByteArray const * defaultValue) {
  return new QByteArray(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_operator__(QHash< QString, QVariant > * this_ptr, QString const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_operator__(QHash< int, QByteArray > * this_ptr, int const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_operator__1(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->operator[](*key));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_operator__1(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return new QByteArray(this_ptr->operator[](*key));
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QHash_QString_QVariant_uniqueKeys(QHash< QString, QVariant > const * this_ptr) {
  return new QList< QString >(this_ptr->uniqueKeys());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QHash_int_QByteArray_uniqueKeys(QHash< int, QByteArray > const * this_ptr) {
  return new QList< int >(this_ptr->uniqueKeys());
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QHash_QString_QVariant_keys(QHash< QString, QVariant > const * this_ptr) {
  return new QList< QString >(this_ptr->keys());
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QHash_int_QByteArray_keys(QHash< int, QByteArray > const * this_ptr) {
  return new QList< int >(this_ptr->keys());
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QHash_QString_QVariant_keys1(QHash< QString, QVariant > const * this_ptr, QVariant const * value) {
  return new QList< QString >(this_ptr->keys(*value));
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QHash_int_QByteArray_keys1(QHash< int, QByteArray > const * this_ptr, QByteArray const * value) {
  return new QList< int >(this_ptr->keys(*value));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QHash_QString_QVariant_values(QHash< QString, QVariant > const * this_ptr) {
  return new QList< QVariant >(this_ptr->values());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QHash_int_QByteArray_values(QHash< int, QByteArray > const * this_ptr) {
  return new QList< QByteArray >(this_ptr->values());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QHash_QString_QVariant_values1(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return new QList< QVariant >(this_ptr->values(*key));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QHash_int_QByteArray_values1(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return new QList< QByteArray >(this_ptr->values(*key));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_QString_QVariant_count(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_count(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_iterator() {
  return new QHash< QString, QVariant >::iterator();
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_iterator() {
  return new QHash< int, QByteArray >::iterator();
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_iterator1(void * node) {
  return new QHash< QString, QVariant >::iterator(node);
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_iterator1(void * node) {
  return new QHash< int, QByteArray >::iterator(node);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_key(QHash< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_key(QHash< int, QByteArray >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_value(QHash< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_value(QHash< int, QByteArray >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator_(QHash< QString, QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator_(QHash< int, QByteArray >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__(QHash< QString, QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__(QHash< int, QByteArray >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__1(QHash< QString, QVariant >::iterator const * this_ptr, QHash< QString, QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__1(QHash< int, QByteArray >::iterator const * this_ptr, QHash< int, QByteArray >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__3(QHash< QString, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__3(QHash< int, QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__4(QHash< QString, QVariant >::iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__4(QHash< int, QByteArray >::iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__5(QHash< QString, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__5(QHash< int, QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__6(QHash< QString, QVariant >::iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__6(QHash< int, QByteArray >::iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator_1(QHash< QString, QVariant >::iterator const * this_ptr, int j) {
  return new QHash< QString, QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator_1(QHash< int, QByteArray >::iterator const * this_ptr, int j) {
  return new QHash< int, QByteArray >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator_2(QHash< QString, QVariant >::iterator const * this_ptr, int j) {
  return new QHash< QString, QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator_2(QHash< int, QByteArray >::iterator const * this_ptr, int j) {
  return new QHash< int, QByteArray >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__7(QHash< QString, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__7(QHash< int, QByteArray >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__8(QHash< QString, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__8(QHash< int, QByteArray >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator__9(QHash< QString, QVariant >::iterator const * this_ptr, QHash< QString, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator__9(QHash< int, QByteArray >::iterator const * this_ptr, QHash< int, QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_const_iterator() {
  return new QHash< QString, QVariant >::const_iterator();
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_const_iterator() {
  return new QHash< int, QByteArray >::const_iterator();
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_const_iterator1(void * node) {
  return new QHash< QString, QVariant >::const_iterator(node);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_const_iterator1(void * node) {
  return new QHash< int, QByteArray >::const_iterator(node);
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_const_iterator2(QHash< QString, QVariant >::iterator const * o) {
  return new QHash< QString, QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_const_iterator2(QHash< int, QByteArray >::iterator const * o) {
  return new QHash< int, QByteArray >::const_iterator(*o);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_key(QHash< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_key(QHash< int, QByteArray >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_value(QHash< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_value(QHash< int, QByteArray >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator_(QHash< QString, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator_(QHash< int, QByteArray >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__(QHash< QString, QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QByteArray const * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__(QHash< int, QByteArray >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__1(QHash< QString, QVariant >::const_iterator const * this_ptr, QHash< QString, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__1(QHash< int, QByteArray >::const_iterator const * this_ptr, QHash< int, QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__3(QHash< QString, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__3(QHash< int, QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__4(QHash< QString, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__4(QHash< int, QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__5(QHash< QString, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__5(QHash< int, QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__6(QHash< QString, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__6(QHash< int, QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator_1(QHash< QString, QVariant >::const_iterator const * this_ptr, int j) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator_1(QHash< int, QByteArray >::const_iterator const * this_ptr, int j) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator_2(QHash< QString, QVariant >::const_iterator const * this_ptr, int j) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator_2(QHash< int, QByteArray >::const_iterator const * this_ptr, int j) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__7(QHash< QString, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__7(QHash< int, QByteArray >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator__8(QHash< QString, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator__8(QHash< int, QByteArray >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_key_iterator() {
  return new QHash< QString, QVariant >::key_iterator();
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_key_iterator() {
  return new QHash< int, QByteArray >::key_iterator();
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_key_iterator1(QHash< QString, QVariant >::const_iterator const * o) {
  return new QHash< QString, QVariant >::key_iterator(*o);
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_key_iterator1(QHash< int, QByteArray >::const_iterator const * o) {
  return new QHash< int, QByteArray >::key_iterator(*o);
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator_(QHash< QString, QVariant >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator_(QHash< int, QByteArray >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QString const * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__(QHash< QString, QVariant >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__(QHash< int, QByteArray >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__1(QHash< QString, QVariant >::key_iterator const * this_ptr, QHash< QString, QVariant >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__1(QHash< int, QByteArray >::key_iterator const * this_ptr, QHash< int, QByteArray >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__3(QHash< QString, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__3(QHash< int, QByteArray >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__4(QHash< QString, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__4(QHash< int, QByteArray >::key_iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__5(QHash< QString, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__5(QHash< int, QByteArray >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator__6(QHash< QString, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QHash< QString, QVariant >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator__6(QHash< int, QByteArray >::key_iterator * this_ptr, int arg1) {
  return new QHash< int, QByteArray >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_base(QHash< QString, QVariant >::key_iterator const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_base(QHash< int, QByteArray >::key_iterator const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_begin(QHash< QString, QVariant > * this_ptr) {
  return new QHash< QString, QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_begin(QHash< int, QByteArray > * this_ptr) {
  return new QHash< int, QByteArray >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_begin1(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_begin1(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_cbegin(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_cbegin(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_constBegin(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_constBegin(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_end(QHash< QString, QVariant > * this_ptr) {
  return new QHash< QString, QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_end(QHash< int, QByteArray > * this_ptr) {
  return new QHash< int, QByteArray >::iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_end1(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_end1(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_cend(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_cend(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_constEnd(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_constEnd(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_keyBegin(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_keyBegin(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_keyEnd(QHash< QString, QVariant > const * this_ptr) {
  return new QHash< QString, QVariant >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_keyEnd(QHash< int, QByteArray > const * this_ptr) {
  return new QHash< int, QByteArray >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_erase(QHash< QString, QVariant > * this_ptr, QHash< QString, QVariant >::iterator const * it) {
  return new QHash< QString, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_erase(QHash< int, QByteArray > * this_ptr, QHash< int, QByteArray >::iterator const * it) {
  return new QHash< int, QByteArray >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_erase1(QHash< QString, QVariant > * this_ptr, QHash< QString, QVariant >::const_iterator const * it) {
  return new QHash< QString, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_erase1(QHash< int, QByteArray > * this_ptr, QHash< int, QByteArray >::const_iterator const * it) {
  return new QHash< int, QByteArray >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_QString_QVariant_count1(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QHash_int_QByteArray_count1(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_find(QHash< QString, QVariant > * this_ptr, QString const * key) {
  return new QHash< QString, QVariant >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_find(QHash< int, QByteArray > * this_ptr, int const * key) {
  return new QHash< int, QByteArray >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_find1(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_find1(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_constFind(QHash< QString, QVariant > const * this_ptr, QString const * key) {
  return new QHash< QString, QVariant >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_constFind(QHash< int, QByteArray > const * this_ptr, int const * key) {
  return new QHash< int, QByteArray >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_insert(QHash< QString, QVariant > * this_ptr, QString const * key, QVariant const * value) {
  return new QHash< QString, QVariant >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_insert(QHash< int, QByteArray > * this_ptr, int const * key, QByteArray const * value) {
  return new QHash< int, QByteArray >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_insertMulti(QHash< QString, QVariant > * this_ptr, QString const * key, QVariant const * value) {
  return new QHash< QString, QVariant >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_insertMulti(QHash< int, QByteArray > * this_ptr, int const * key, QByteArray const * value) {
  return new QHash< int, QByteArray >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_QString_QVariant_empty(QHash< QString, QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QHash_int_QByteArray_empty(QHash< int, QByteArray > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash59(QHash< int, QByteArray > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_QVector() {
  return new QVector< QXmlStreamAttribute >();
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_QVector() {
  return new QVector< QStringRef >();
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_QVector() {
  return new QVector< unsigned int >();
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_QVector() {
  return new QVector< int >();
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_QVector() {
  return new QVector< QPointF >();
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_QVector() {
  return new QVector< QStaticPlugin >();
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_QVector() {
  return new QVector< QPair< double, QVariant > >();
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_QVector() {
  return new QVector< QTimeZone::OffsetData >();
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_QVector() {
  return new QVector< QXmlStreamNamespaceDeclaration >();
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_QVector() {
  return new QVector< QXmlStreamNotationDeclaration >();
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_QVector() {
  return new QVector< QXmlStreamEntityDeclaration >();
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_QVector1(int size) {
  return new QVector< QXmlStreamAttribute >(size);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_QVector1(int size) {
  return new QVector< QStringRef >(size);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_QVector1(int size) {
  return new QVector< unsigned int >(size);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_QVector1(int size) {
  return new QVector< int >(size);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_QVector1(int size) {
  return new QVector< QPointF >(size);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_QVector1(int size) {
  return new QVector< QStaticPlugin >(size);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_QVector1(int size) {
  return new QVector< QPair< double, QVariant > >(size);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_QVector1(int size) {
  return new QVector< QTimeZone::OffsetData >(size);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_QVector1(int size) {
  return new QVector< QXmlStreamNamespaceDeclaration >(size);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_QVector1(int size) {
  return new QVector< QXmlStreamNotationDeclaration >(size);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_QVector1(int size) {
  return new QVector< QXmlStreamEntityDeclaration >(size);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_QVector2(int size, QXmlStreamAttribute const * t) {
  return new QVector< QXmlStreamAttribute >(size, *t);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_QVector2(int size, QStringRef const * t) {
  return new QVector< QStringRef >(size, *t);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_QVector2(int size, unsigned int const * t) {
  return new QVector< unsigned int >(size, *t);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_QVector2(int size, int const * t) {
  return new QVector< int >(size, *t);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_QVector2(int size, QPointF const * t) {
  return new QVector< QPointF >(size, *t);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_QVector2(int size, QStaticPlugin const * t) {
  return new QVector< QStaticPlugin >(size, *t);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_QVector2(int size, QPair< double, QVariant > const * t) {
  return new QVector< QPair< double, QVariant > >(size, *t);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_QVector2(int size, QTimeZone::OffsetData const * t) {
  return new QVector< QTimeZone::OffsetData >(size, *t);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_QVector2(int size, QXmlStreamNamespaceDeclaration const * t) {
  return new QVector< QXmlStreamNamespaceDeclaration >(size, *t);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_QVector2(int size, QXmlStreamNotationDeclaration const * t) {
  return new QVector< QXmlStreamNotationDeclaration >(size, *t);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_QVector2(int size, QXmlStreamEntityDeclaration const * t) {
  return new QVector< QXmlStreamEntityDeclaration >(size, *t);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_QVector3(QVector< QXmlStreamAttribute > const * v) {
  return new QVector< QXmlStreamAttribute >(*v);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_QVector3(QVector< QStringRef > const * v) {
  return new QVector< QStringRef >(*v);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_QVector3(QVector< unsigned int > const * v) {
  return new QVector< unsigned int >(*v);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_QVector3(QVector< int > const * v) {
  return new QVector< int >(*v);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_QVector3(QVector< QPointF > const * v) {
  return new QVector< QPointF >(*v);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_QVector3(QVector< QStaticPlugin > const * v) {
  return new QVector< QStaticPlugin >(*v);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_QVector3(QVector< QPair< double, QVariant > > const * v) {
  return new QVector< QPair< double, QVariant > >(*v);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_QVector3(QVector< QTimeZone::OffsetData > const * v) {
  return new QVector< QTimeZone::OffsetData >(*v);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_QVector3(QVector< QXmlStreamNamespaceDeclaration > const * v) {
  return new QVector< QXmlStreamNamespaceDeclaration >(*v);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_QVector3(QVector< QXmlStreamNotationDeclaration > const * v) {
  return new QVector< QXmlStreamNotationDeclaration >(*v);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_QVector3(QVector< QXmlStreamEntityDeclaration > const * v) {
  return new QVector< QXmlStreamEntityDeclaration >(*v);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_dQVector(QVector< QXmlStreamAttribute > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_dQVector(QVector< QStringRef > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_dQVector(QVector< unsigned int > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_dQVector(QVector< int > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_dQVector(QVector< QPointF > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_dQVector(QVector< QStaticPlugin > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_dQVector(QVector< QPair< double, QVariant > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_dQVector(QVector< QTimeZone::OffsetData > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_dQVector(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_dQVector(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_dQVector(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator_(QVector< QXmlStreamAttribute > * this_ptr, QVector< QXmlStreamAttribute > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator_(QVector< QStringRef > * this_ptr, QVector< QStringRef > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator_(QVector< unsigned int > * this_ptr, QVector< unsigned int > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator_(QVector< int > * this_ptr, QVector< int > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator_(QVector< QPointF > * this_ptr, QVector< QPointF > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator_(QVector< QStaticPlugin > * this_ptr, QVector< QStaticPlugin > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator_(QVector< QPair< double, QVariant > > * this_ptr, QVector< QPair< double, QVariant > > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator_(QVector< QTimeZone::OffsetData > * this_ptr, QVector< QTimeZone::OffsetData > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator_(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator_(QVector< QXmlStreamNotationDeclaration > * this_ptr, QVector< QXmlStreamNotationDeclaration > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator_(QVector< QXmlStreamEntityDeclaration > * this_ptr, QVector< QXmlStreamEntityDeclaration > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_swap(QVector< QXmlStreamAttribute > * this_ptr, QVector< QXmlStreamAttribute > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_swap(QVector< QStringRef > * this_ptr, QVector< QStringRef > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_swap(QVector< unsigned int > * this_ptr, QVector< unsigned int > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_swap(QVector< int > * this_ptr, QVector< int > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_swap(QVector< QPointF > * this_ptr, QVector< QPointF > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_swap(QVector< QStaticPlugin > * this_ptr, QVector< QStaticPlugin > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_swap(QVector< QPair< double, QVariant > > * this_ptr, QVector< QPair< double, QVariant > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_swap(QVector< QTimeZone::OffsetData > * this_ptr, QVector< QTimeZone::OffsetData > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_swap(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QVector< QXmlStreamNamespaceDeclaration > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_swap(QVector< QXmlStreamNotationDeclaration > * this_ptr, QVector< QXmlStreamNotationDeclaration > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_swap(QVector< QXmlStreamEntityDeclaration > * this_ptr, QVector< QXmlStreamEntityDeclaration > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__(QVector< QXmlStreamAttribute > const * this_ptr, QVector< QXmlStreamAttribute > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_operator__(QVector< QStringRef > const * this_ptr, QVector< QStringRef > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_operator__(QVector< unsigned int > const * this_ptr, QVector< unsigned int > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_operator__(QVector< int > const * this_ptr, QVector< int > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_operator__(QVector< QPointF > const * this_ptr, QVector< QPointF > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__(QVector< QPair< double, QVariant > > const * this_ptr, QVector< QPair< double, QVariant > > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QVector< QXmlStreamNotationDeclaration > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QVector< QXmlStreamEntityDeclaration > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_size(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_size(QVector< QStringRef > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_size(QVector< unsigned int > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_size(QVector< int > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_size(QVector< QPointF > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStaticPlugin_size(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_size(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_size(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_size(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_size(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_size(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_isEmpty(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_isEmpty(QVector< QStringRef > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_isEmpty(QVector< unsigned int > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_isEmpty(QVector< int > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_isEmpty(QVector< QPointF > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStaticPlugin_isEmpty(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_isEmpty(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_isEmpty(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_isEmpty(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_isEmpty(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_isEmpty(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_resize(QVector< QXmlStreamAttribute > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_resize(QVector< QStringRef > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_resize(QVector< unsigned int > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_resize(QVector< int > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_resize(QVector< QPointF > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_resize(QVector< QStaticPlugin > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_resize(QVector< QPair< double, QVariant > > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_resize(QVector< QTimeZone::OffsetData > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_resize(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_resize(QVector< QXmlStreamNotationDeclaration > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_resize(QVector< QXmlStreamEntityDeclaration > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_capacity(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_capacity(QVector< QStringRef > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_capacity(QVector< unsigned int > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_capacity(QVector< int > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_capacity(QVector< QPointF > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStaticPlugin_capacity(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_capacity(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_capacity(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_capacity(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_capacity(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_capacity(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_reserve(QVector< QXmlStreamAttribute > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_reserve(QVector< QStringRef > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_reserve(QVector< unsigned int > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_reserve(QVector< int > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_reserve(QVector< QPointF > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_reserve(QVector< QStaticPlugin > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_reserve(QVector< QPair< double, QVariant > > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_reserve(QVector< QTimeZone::OffsetData > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_reserve(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_reserve(QVector< QXmlStreamNotationDeclaration > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_reserve(QVector< QXmlStreamEntityDeclaration > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_squeeze(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_squeeze(QVector< QStringRef > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_squeeze(QVector< unsigned int > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_squeeze(QVector< int > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_squeeze(QVector< QPointF > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_squeeze(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_squeeze(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_squeeze(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_squeeze(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_squeeze(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_squeeze(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_detach(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_detach(QVector< QStringRef > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_detach(QVector< unsigned int > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_detach(QVector< int > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_detach(QVector< QPointF > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_detach(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_detach(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_detach(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_detach(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_detach(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_detach(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_isDetached(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_isDetached(QVector< QStringRef > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_isDetached(QVector< unsigned int > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_isDetached(QVector< int > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_isDetached(QVector< QPointF > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStaticPlugin_isDetached(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_isDetached(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_isDetached(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_isDetached(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_isDetached(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_isDetached(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_setSharable(QVector< QXmlStreamAttribute > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_setSharable(QVector< QStringRef > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_setSharable(QVector< unsigned int > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_setSharable(QVector< int > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_setSharable(QVector< QPointF > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_setSharable(QVector< QStaticPlugin > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_setSharable(QVector< QPair< double, QVariant > > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_setSharable(QVector< QTimeZone::OffsetData > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_setSharable(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_setSharable(QVector< QXmlStreamNotationDeclaration > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_setSharable(QVector< QXmlStreamEntityDeclaration > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_isSharedWith(QVector< QXmlStreamAttribute > const * this_ptr, QVector< QXmlStreamAttribute > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_isSharedWith(QVector< QStringRef > const * this_ptr, QVector< QStringRef > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_isSharedWith(QVector< unsigned int > const * this_ptr, QVector< unsigned int > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_isSharedWith(QVector< int > const * this_ptr, QVector< int > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_isSharedWith(QVector< QPointF > const * this_ptr, QVector< QPointF > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStaticPlugin_isSharedWith(QVector< QStaticPlugin > const * this_ptr, QVector< QStaticPlugin > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_isSharedWith(QVector< QPair< double, QVariant > > const * this_ptr, QVector< QPair< double, QVariant > > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_isSharedWith(QVector< QTimeZone::OffsetData > const * this_ptr, QVector< QTimeZone::OffsetData > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_isSharedWith(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_isSharedWith(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QVector< QXmlStreamNotationDeclaration > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_isSharedWith(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QVector< QXmlStreamEntityDeclaration > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_data(QVector< QXmlStreamAttribute > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_data(QVector< QStringRef > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_data(QVector< unsigned int > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_data(QVector< int > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_data(QVector< QPointF > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_data(QVector< QStaticPlugin > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_data(QVector< QPair< double, QVariant > > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_data(QVector< QTimeZone::OffsetData > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_data(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_data(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_data(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_data1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_data1(QVector< QStringRef > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_data1(QVector< unsigned int > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_data1(QVector< int > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_data1(QVector< QPointF > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_data1(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_data1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_data1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_data1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_data1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_data1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_constData(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_constData(QVector< QStringRef > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_constData(QVector< unsigned int > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_constData(QVector< int > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_constData(QVector< QPointF > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_constData(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_constData(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_constData(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_constData(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_constData(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_constData(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_clear(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_clear(QVector< QStringRef > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_clear(QVector< unsigned int > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_clear(QVector< int > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_clear(QVector< QPointF > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_clear(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_clear(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_clear(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_clear(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_clear(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_clear(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_at(QVector< QXmlStreamAttribute > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_at(QVector< QStringRef > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_at(QVector< unsigned int > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_at(QVector< int > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_at(QVector< QPointF > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_at(QVector< QStaticPlugin > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_at(QVector< QPair< double, QVariant > > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_at(QVector< QTimeZone::OffsetData > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_at(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_at(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_at(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__2(QVector< QXmlStreamAttribute > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_operator__2(QVector< QStringRef > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_operator__2(QVector< unsigned int > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_operator__2(QVector< int > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_operator__2(QVector< QPointF > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__2(QVector< QStaticPlugin > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__2(QVector< QPair< double, QVariant > > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__2(QVector< QTimeZone::OffsetData > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__2(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__2(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__2(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__3(QVector< QXmlStreamAttribute > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_operator__3(QVector< QStringRef > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_operator__3(QVector< unsigned int > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_operator__3(QVector< int > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_operator__3(QVector< QPointF > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__3(QVector< QStaticPlugin > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__3(QVector< QPair< double, QVariant > > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__3(QVector< QTimeZone::OffsetData > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__3(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__3(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__3(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_append(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_append(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_append(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_append(QVector< int > * this_ptr, int const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_append(QVector< QPointF > * this_ptr, QPointF const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_append(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_append(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_append(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_append(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_append(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_append(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_append2(QVector< QXmlStreamAttribute > * this_ptr, QVector< QXmlStreamAttribute > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_append2(QVector< QStringRef > * this_ptr, QVector< QStringRef > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_append2(QVector< unsigned int > * this_ptr, QVector< unsigned int > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_append2(QVector< int > * this_ptr, QVector< int > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_append2(QVector< QPointF > * this_ptr, QVector< QPointF > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_append2(QVector< QStaticPlugin > * this_ptr, QVector< QStaticPlugin > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_append2(QVector< QPair< double, QVariant > > * this_ptr, QVector< QPair< double, QVariant > > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_append2(QVector< QTimeZone::OffsetData > * this_ptr, QVector< QTimeZone::OffsetData > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_append2(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_append2(QVector< QXmlStreamNotationDeclaration > * this_ptr, QVector< QXmlStreamNotationDeclaration > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_append2(QVector< QXmlStreamEntityDeclaration > * this_ptr, QVector< QXmlStreamEntityDeclaration > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_prepend(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_prepend(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_prepend(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_prepend(QVector< int > * this_ptr, int const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_prepend(QVector< QPointF > * this_ptr, QPointF const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_prepend(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_prepend(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_prepend(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_prepend(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_prepend(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_prepend(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_insert(QVector< QXmlStreamAttribute > * this_ptr, int i, QXmlStreamAttribute const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_insert(QVector< QStringRef > * this_ptr, int i, QStringRef const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_insert(QVector< unsigned int > * this_ptr, int i, unsigned int const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_insert(QVector< int > * this_ptr, int i, int const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_insert(QVector< QPointF > * this_ptr, int i, QPointF const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_insert(QVector< QStaticPlugin > * this_ptr, int i, QStaticPlugin const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_insert(QVector< QPair< double, QVariant > > * this_ptr, int i, QPair< double, QVariant > const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_insert(QVector< QTimeZone::OffsetData > * this_ptr, int i, QTimeZone::OffsetData const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_insert(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_insert(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i, QXmlStreamNotationDeclaration const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_insert(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i, QXmlStreamEntityDeclaration const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_insert1(QVector< QXmlStreamAttribute > * this_ptr, int i, int n, QXmlStreamAttribute const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_insert1(QVector< QStringRef > * this_ptr, int i, int n, QStringRef const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_insert1(QVector< unsigned int > * this_ptr, int i, int n, unsigned int const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_insert1(QVector< int > * this_ptr, int i, int n, int const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_insert1(QVector< QPointF > * this_ptr, int i, int n, QPointF const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_insert1(QVector< QStaticPlugin > * this_ptr, int i, int n, QStaticPlugin const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_insert1(QVector< QPair< double, QVariant > > * this_ptr, int i, int n, QPair< double, QVariant > const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_insert1(QVector< QTimeZone::OffsetData > * this_ptr, int i, int n, QTimeZone::OffsetData const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_insert1(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i, int n, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_insert1(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i, int n, QXmlStreamNotationDeclaration const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_insert1(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i, int n, QXmlStreamEntityDeclaration const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_replace(QVector< QXmlStreamAttribute > * this_ptr, int i, QXmlStreamAttribute const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_replace(QVector< QStringRef > * this_ptr, int i, QStringRef const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_replace(QVector< unsigned int > * this_ptr, int i, unsigned int const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_replace(QVector< int > * this_ptr, int i, int const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_replace(QVector< QPointF > * this_ptr, int i, QPointF const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_replace(QVector< QStaticPlugin > * this_ptr, int i, QStaticPlugin const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_replace(QVector< QPair< double, QVariant > > * this_ptr, int i, QPair< double, QVariant > const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_replace(QVector< QTimeZone::OffsetData > * this_ptr, int i, QTimeZone::OffsetData const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_replace(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_replace(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i, QXmlStreamNotationDeclaration const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_replace(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i, QXmlStreamEntityDeclaration const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_remove(QVector< QXmlStreamAttribute > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_remove(QVector< QStringRef > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_remove(QVector< unsigned int > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_remove(QVector< int > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_remove(QVector< QPointF > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_remove(QVector< QStaticPlugin > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_remove(QVector< QPair< double, QVariant > > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_remove(QVector< QTimeZone::OffsetData > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_remove(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_remove(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_remove(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_remove1(QVector< QXmlStreamAttribute > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_remove1(QVector< QStringRef > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_remove1(QVector< unsigned int > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_remove1(QVector< int > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_remove1(QVector< QPointF > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_remove1(QVector< QStaticPlugin > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_remove1(QVector< QPair< double, QVariant > > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_remove1(QVector< QTimeZone::OffsetData > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_remove1(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_remove1(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_remove1(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_removeFirst(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_removeFirst(QVector< QStringRef > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_removeFirst(QVector< unsigned int > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_removeFirst(QVector< int > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_removeFirst(QVector< QPointF > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_removeFirst(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_removeFirst(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_removeFirst(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_removeFirst(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_removeFirst(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_removeFirst(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_removeLast(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_removeLast(QVector< QStringRef > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_removeLast(QVector< unsigned int > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_removeLast(QVector< int > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_removeLast(QVector< QPointF > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_removeLast(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_removeLast(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_removeLast(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_removeLast(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_removeLast(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_removeLast(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_takeFirst(QVector< QXmlStreamAttribute > * this_ptr) {
  return new QXmlStreamAttribute(this_ptr->takeFirst());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_takeFirst(QVector< QStringRef > * this_ptr) {
  return new QStringRef(this_ptr->takeFirst());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVector_unsigned_int_takeFirst(QVector< unsigned int > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_takeFirst(QVector< int > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_takeFirst(QVector< QPointF > * this_ptr) {
  return new QPointF(this_ptr->takeFirst());
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_takeFirst(QVector< QStaticPlugin > * this_ptr) {
  return new QStaticPlugin(this_ptr->takeFirst());
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_takeFirst(QVector< QPair< double, QVariant > > * this_ptr) {
  return new QPair< double, QVariant >(this_ptr->takeFirst());
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_takeFirst(QVector< QTimeZone::OffsetData > * this_ptr) {
  return new QTimeZone::OffsetData(this_ptr->takeFirst());
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_takeFirst(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return new QXmlStreamNamespaceDeclaration(this_ptr->takeFirst());
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_takeFirst(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return new QXmlStreamNotationDeclaration(this_ptr->takeFirst());
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_takeFirst(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return new QXmlStreamEntityDeclaration(this_ptr->takeFirst());
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_takeLast(QVector< QXmlStreamAttribute > * this_ptr) {
  return new QXmlStreamAttribute(this_ptr->takeLast());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_takeLast(QVector< QStringRef > * this_ptr) {
  return new QStringRef(this_ptr->takeLast());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVector_unsigned_int_takeLast(QVector< unsigned int > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_takeLast(QVector< int > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_takeLast(QVector< QPointF > * this_ptr) {
  return new QPointF(this_ptr->takeLast());
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_takeLast(QVector< QStaticPlugin > * this_ptr) {
  return new QStaticPlugin(this_ptr->takeLast());
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_takeLast(QVector< QPair< double, QVariant > > * this_ptr) {
  return new QPair< double, QVariant >(this_ptr->takeLast());
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_takeLast(QVector< QTimeZone::OffsetData > * this_ptr) {
  return new QTimeZone::OffsetData(this_ptr->takeLast());
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_takeLast(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return new QXmlStreamNamespaceDeclaration(this_ptr->takeLast());
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_takeLast(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return new QXmlStreamNotationDeclaration(this_ptr->takeLast());
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_takeLast(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return new QXmlStreamEntityDeclaration(this_ptr->takeLast());
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_fill(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_fill(QVector< QStringRef > * this_ptr, QStringRef const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_fill(QVector< unsigned int > * this_ptr, unsigned int const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_fill(QVector< int > * this_ptr, int const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_fill(QVector< QPointF > * this_ptr, QPointF const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_fill(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_fill(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_fill(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_fill(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_fill(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_fill(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_indexOf(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_indexOf(QVector< QStringRef > const * this_ptr, QStringRef const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_indexOf(QVector< unsigned int > const * this_ptr, unsigned int const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_indexOf(QVector< int > const * this_ptr, int const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_indexOf(QVector< QPointF > const * this_ptr, QPointF const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_indexOf(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_indexOf(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_indexOf(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_indexOf(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_lastIndexOf(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_lastIndexOf(QVector< QStringRef > const * this_ptr, QStringRef const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_lastIndexOf(QVector< unsigned int > const * this_ptr, unsigned int const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_lastIndexOf(QVector< int > const * this_ptr, int const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_lastIndexOf(QVector< QPointF > const * this_ptr, QPointF const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_lastIndexOf(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_lastIndexOf(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_lastIndexOf(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_lastIndexOf(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_contains(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_contains(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_contains(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_contains(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_contains(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_contains(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_contains(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_contains(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_contains(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_count(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_count(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_count(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_count(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_count(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_count(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_count(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_count(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_count(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_removeAt(QVector< QXmlStreamAttribute > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_removeAt(QVector< QStringRef > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_removeAt(QVector< unsigned int > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_removeAt(QVector< int > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_removeAt(QVector< QPointF > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_removeAt(QVector< QStaticPlugin > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_removeAt(QVector< QPair< double, QVariant > > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_removeAt(QVector< QTimeZone::OffsetData > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_removeAt(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_removeAt(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_removeAt(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_removeAll(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_removeAll(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_removeAll(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_removeAll(QVector< int > * this_ptr, int const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_removeAll(QVector< QPointF > * this_ptr, QPointF const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_removeAll(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_removeAll(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_removeAll(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_removeAll(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_removeOne(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_removeOne(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_removeOne(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_removeOne(QVector< int > * this_ptr, int const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_removeOne(QVector< QPointF > * this_ptr, QPointF const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_removeOne(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_removeOne(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_removeOne(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_removeOne(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_length(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_length(QVector< QStringRef > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_length(QVector< unsigned int > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_length(QVector< int > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_length(QVector< QPointF > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStaticPlugin_length(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_length(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_length(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_length(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_length(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_length(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_takeAt(QVector< QXmlStreamAttribute > * this_ptr, int i) {
  return new QXmlStreamAttribute(this_ptr->takeAt(i));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_takeAt(QVector< QStringRef > * this_ptr, int i) {
  return new QStringRef(this_ptr->takeAt(i));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVector_unsigned_int_takeAt(QVector< unsigned int > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_takeAt(QVector< int > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_takeAt(QVector< QPointF > * this_ptr, int i) {
  return new QPointF(this_ptr->takeAt(i));
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_takeAt(QVector< QStaticPlugin > * this_ptr, int i) {
  return new QStaticPlugin(this_ptr->takeAt(i));
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_takeAt(QVector< QPair< double, QVariant > > * this_ptr, int i) {
  return new QPair< double, QVariant >(this_ptr->takeAt(i));
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_takeAt(QVector< QTimeZone::OffsetData > * this_ptr, int i) {
  return new QTimeZone::OffsetData(this_ptr->takeAt(i));
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_takeAt(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i) {
  return new QXmlStreamNamespaceDeclaration(this_ptr->takeAt(i));
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_takeAt(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i) {
  return new QXmlStreamNotationDeclaration(this_ptr->takeAt(i));
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_takeAt(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i) {
  return new QXmlStreamEntityDeclaration(this_ptr->takeAt(i));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_move(QVector< QXmlStreamAttribute > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_move(QVector< QStringRef > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_move(QVector< unsigned int > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_move(QVector< int > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_move(QVector< QPointF > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_move(QVector< QStaticPlugin > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_move(QVector< QPair< double, QVariant > > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_move(QVector< QTimeZone::OffsetData > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_move(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_move(QVector< QXmlStreamNotationDeclaration > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_move(QVector< QXmlStreamEntityDeclaration > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_count1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_count1(QVector< QStringRef > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_count1(QVector< unsigned int > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_count1(QVector< int > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_count1(QVector< QPointF > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStaticPlugin_count1(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_count1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_count1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_count1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_count1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_count1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_first(QVector< QXmlStreamAttribute > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_first(QVector< QStringRef > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_first(QVector< unsigned int > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_first(QVector< int > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_first(QVector< QPointF > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_first(QVector< QStaticPlugin > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_first(QVector< QPair< double, QVariant > > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_first(QVector< QTimeZone::OffsetData > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_first(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_first(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_first(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_first1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_first1(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_first1(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_first1(QVector< int > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_first1(QVector< QPointF > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_first1(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_first1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_first1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_first1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_first1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_first1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_constFirst(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_constFirst(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_constFirst(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_constFirst(QVector< int > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_constFirst(QVector< QPointF > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_constFirst(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_constFirst(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_constFirst(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_constFirst(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_constFirst(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_constFirst(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_last(QVector< QXmlStreamAttribute > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_last(QVector< QStringRef > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_last(QVector< unsigned int > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_last(QVector< int > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_last(QVector< QPointF > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_last(QVector< QStaticPlugin > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_last(QVector< QPair< double, QVariant > > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_last(QVector< QTimeZone::OffsetData > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_last(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_last(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_last(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_last1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_last1(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_last1(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_last1(QVector< int > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_last1(QVector< QPointF > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_last1(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_last1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_last1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_last1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_last1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_last1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_constLast(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_constLast(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_constLast(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_constLast(QVector< int > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_constLast(QVector< QPointF > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_constLast(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_constLast(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_constLast(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_constLast(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_constLast(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_constLast(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_startsWith(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_startsWith(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_startsWith(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_startsWith(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_startsWith(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_startsWith(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_startsWith(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_startsWith(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_startsWith(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_endsWith(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_endsWith(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_endsWith(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_endsWith(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_endsWith(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_endsWith(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_endsWith(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_endsWith(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_endsWith(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_mid(QVector< QXmlStreamAttribute > const * this_ptr, int pos, int len) {
  return new QVector< QXmlStreamAttribute >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_mid(QVector< QStringRef > const * this_ptr, int pos, int len) {
  return new QVector< QStringRef >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_mid(QVector< unsigned int > const * this_ptr, int pos, int len) {
  return new QVector< unsigned int >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_mid(QVector< int > const * this_ptr, int pos, int len) {
  return new QVector< int >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_mid(QVector< QPointF > const * this_ptr, int pos, int len) {
  return new QVector< QPointF >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_mid(QVector< QStaticPlugin > const * this_ptr, int pos, int len) {
  return new QVector< QStaticPlugin >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_mid(QVector< QPair< double, QVariant > > const * this_ptr, int pos, int len) {
  return new QVector< QPair< double, QVariant > >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_mid(QVector< QTimeZone::OffsetData > const * this_ptr, int pos, int len) {
  return new QVector< QTimeZone::OffsetData >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_mid(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int pos, int len) {
  return new QVector< QXmlStreamNamespaceDeclaration >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_mid(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int pos, int len) {
  return new QVector< QXmlStreamNotationDeclaration >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_mid(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int pos, int len) {
  return new QVector< QXmlStreamEntityDeclaration >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_value(QVector< QXmlStreamAttribute > const * this_ptr, int i) {
  return new QXmlStreamAttribute(this_ptr->value(i));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_value(QVector< QStringRef > const * this_ptr, int i) {
  return new QStringRef(this_ptr->value(i));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVector_unsigned_int_value(QVector< unsigned int > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_value(QVector< int > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_value(QVector< QPointF > const * this_ptr, int i) {
  return new QPointF(this_ptr->value(i));
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_value(QVector< QStaticPlugin > const * this_ptr, int i) {
  return new QStaticPlugin(this_ptr->value(i));
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_value(QVector< QPair< double, QVariant > > const * this_ptr, int i) {
  return new QPair< double, QVariant >(this_ptr->value(i));
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_value(QVector< QTimeZone::OffsetData > const * this_ptr, int i) {
  return new QTimeZone::OffsetData(this_ptr->value(i));
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_value(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int i) {
  return new QXmlStreamNamespaceDeclaration(this_ptr->value(i));
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_value(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int i) {
  return new QXmlStreamNotationDeclaration(this_ptr->value(i));
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_value(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int i) {
  return new QXmlStreamEntityDeclaration(this_ptr->value(i));
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_value1(QVector< QXmlStreamAttribute > const * this_ptr, int i, QXmlStreamAttribute const * defaultValue) {
  return new QXmlStreamAttribute(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_value1(QVector< QStringRef > const * this_ptr, int i, QStringRef const * defaultValue) {
  return new QStringRef(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVector_unsigned_int_value1(QVector< unsigned int > const * this_ptr, int i, unsigned int const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_value1(QVector< int > const * this_ptr, int i, int const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_value1(QVector< QPointF > const * this_ptr, int i, QPointF const * defaultValue) {
  return new QPointF(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_value1(QVector< QStaticPlugin > const * this_ptr, int i, QStaticPlugin const * defaultValue) {
  return new QStaticPlugin(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_value1(QVector< QPair< double, QVariant > > const * this_ptr, int i, QPair< double, QVariant > const * defaultValue) {
  return new QPair< double, QVariant >(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_value1(QVector< QTimeZone::OffsetData > const * this_ptr, int i, QTimeZone::OffsetData const * defaultValue) {
  return new QTimeZone::OffsetData(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_value1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int i, QXmlStreamNamespaceDeclaration const * defaultValue) {
  return new QXmlStreamNamespaceDeclaration(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_value1(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int i, QXmlStreamNotationDeclaration const * defaultValue) {
  return new QXmlStreamNotationDeclaration(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_value1(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int i, QXmlStreamEntityDeclaration const * defaultValue) {
  return new QXmlStreamEntityDeclaration(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_push_back(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_push_back(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_push_back(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_push_back(QVector< int > * this_ptr, int const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_push_back(QVector< QPointF > * this_ptr, QPointF const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_push_back(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_push_back(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_push_back(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_push_back(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_push_back(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_push_back(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_push_front(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_push_front(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_push_front(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_push_front(QVector< int > * this_ptr, int const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_push_front(QVector< QPointF > * this_ptr, QPointF const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_push_front(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_push_front(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_push_front(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_push_front(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_push_front(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_push_front(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_pop_back(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_pop_back(QVector< QStringRef > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_pop_back(QVector< unsigned int > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_pop_back(QVector< int > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_pop_back(QVector< QPointF > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_pop_back(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_pop_back(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_pop_back(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_pop_back(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_pop_back(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_pop_back(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_pop_front(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_pop_front(QVector< QStringRef > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_pop_front(QVector< unsigned int > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_pop_front(QVector< int > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_pop_front(QVector< QPointF > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_pop_front(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_pop_front(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_pop_front(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_pop_front(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_pop_front(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_pop_front(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamAttribute_empty(QVector< QXmlStreamAttribute > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStringRef_empty(QVector< QStringRef > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_unsigned_int_empty(QVector< unsigned int > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_int_empty(QVector< int > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPointF_empty(QVector< QPointF > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QStaticPlugin_empty(QVector< QStaticPlugin > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QPair_double_QVariant_empty(QVector< QPair< double, QVariant > > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_empty(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_empty(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_empty(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_empty(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_front(QVector< QXmlStreamAttribute > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_front(QVector< QStringRef > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_front(QVector< unsigned int > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_front(QVector< int > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_front(QVector< QPointF > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_front(QVector< QStaticPlugin > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_front(QVector< QPair< double, QVariant > > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_front(QVector< QTimeZone::OffsetData > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_front(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_front(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_front(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_front1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_front1(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_front1(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_front1(QVector< int > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_front1(QVector< QPointF > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_front1(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_front1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_front1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_front1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_front1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_front1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QXmlStreamAttribute * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_back(QVector< QXmlStreamAttribute > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QVector_QStringRef_back(QVector< QStringRef > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT unsigned int * ctr_qt_core_ffi_QVector_unsigned_int_back(QVector< unsigned int > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT int * ctr_qt_core_ffi_QVector_int_back(QVector< int > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QVector_QPointF_back(QVector< QPointF > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStaticPlugin * ctr_qt_core_ffi_QVector_QStaticPlugin_back(QVector< QStaticPlugin > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_back(QVector< QPair< double, QVariant > > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTimeZone::OffsetData * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_back(QVector< QTimeZone::OffsetData > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_back(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_back(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_back(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamAttribute const * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_back1(QVector< QXmlStreamAttribute > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStringRef const * ctr_qt_core_ffi_QVector_QStringRef_back1(QVector< QStringRef > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT unsigned int const * ctr_qt_core_ffi_QVector_unsigned_int_back1(QVector< unsigned int > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT int const * ctr_qt_core_ffi_QVector_int_back1(QVector< int > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPointF const * ctr_qt_core_ffi_QVector_QPointF_back1(QVector< QPointF > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStaticPlugin const * ctr_qt_core_ffi_QVector_QStaticPlugin_back1(QVector< QStaticPlugin > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< double, QVariant > const * ctr_qt_core_ffi_QVector_QPair_double_QVariant_back1(QVector< QPair< double, QVariant > > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTimeZone::OffsetData const * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_back1(QVector< QTimeZone::OffsetData > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamNamespaceDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_back1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamNotationDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_back1(QVector< QXmlStreamNotationDeclaration > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QXmlStreamEntityDeclaration const * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_back1(QVector< QXmlStreamEntityDeclaration > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__4(QVector< QXmlStreamAttribute > * this_ptr, QVector< QXmlStreamAttribute > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator__4(QVector< QStringRef > * this_ptr, QVector< QStringRef > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator__4(QVector< unsigned int > * this_ptr, QVector< unsigned int > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator__4(QVector< int > * this_ptr, QVector< int > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator__4(QVector< QPointF > * this_ptr, QVector< QPointF > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__4(QVector< QStaticPlugin > * this_ptr, QVector< QStaticPlugin > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__4(QVector< QPair< double, QVariant > > * this_ptr, QVector< QPair< double, QVariant > > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__4(QVector< QTimeZone::OffsetData > * this_ptr, QVector< QTimeZone::OffsetData > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__4(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__4(QVector< QXmlStreamNotationDeclaration > * this_ptr, QVector< QXmlStreamNotationDeclaration > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__4(QVector< QXmlStreamEntityDeclaration > * this_ptr, QVector< QXmlStreamEntityDeclaration > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator_2(QVector< QXmlStreamAttribute > const * this_ptr, QVector< QXmlStreamAttribute > const * l) {
  return new QVector< QXmlStreamAttribute >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator_2(QVector< QStringRef > const * this_ptr, QVector< QStringRef > const * l) {
  return new QVector< QStringRef >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator_2(QVector< unsigned int > const * this_ptr, QVector< unsigned int > const * l) {
  return new QVector< unsigned int >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator_2(QVector< int > const * this_ptr, QVector< int > const * l) {
  return new QVector< int >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator_2(QVector< QPointF > const * this_ptr, QVector< QPointF > const * l) {
  return new QVector< QPointF >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator_2(QVector< QStaticPlugin > const * this_ptr, QVector< QStaticPlugin > const * l) {
  return new QVector< QStaticPlugin >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator_2(QVector< QPair< double, QVariant > > const * this_ptr, QVector< QPair< double, QVariant > > const * l) {
  return new QVector< QPair< double, QVariant > >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator_2(QVector< QTimeZone::OffsetData > const * this_ptr, QVector< QTimeZone::OffsetData > const * l) {
  return new QVector< QTimeZone::OffsetData >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator_2(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * l) {
  return new QVector< QXmlStreamNamespaceDeclaration >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator_2(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QVector< QXmlStreamNotationDeclaration > const * l) {
  return new QVector< QXmlStreamNotationDeclaration >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator_2(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QVector< QXmlStreamEntityDeclaration > const * l) {
  return new QVector< QXmlStreamEntityDeclaration >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__5(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator__5(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator__5(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator__5(QVector< int > * this_ptr, int const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator__5(QVector< QPointF > * this_ptr, QPointF const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__5(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__5(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__5(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__5(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__5(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__5(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__6(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator__6(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator__6(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator__6(QVector< int > * this_ptr, int const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator__6(QVector< QPointF > * this_ptr, QPointF const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__6(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__6(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__6(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__6(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__6(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__6(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_operator__7(QVector< QXmlStreamAttribute > * this_ptr, QVector< QXmlStreamAttribute > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_operator__7(QVector< QStringRef > * this_ptr, QVector< QStringRef > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_operator__7(QVector< unsigned int > * this_ptr, QVector< unsigned int > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_operator__7(QVector< int > * this_ptr, QVector< int > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_operator__7(QVector< QPointF > * this_ptr, QVector< QPointF > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_operator__7(QVector< QStaticPlugin > * this_ptr, QVector< QStaticPlugin > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_operator__7(QVector< QPair< double, QVariant > > * this_ptr, QVector< QPair< double, QVariant > > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_operator__7(QVector< QTimeZone::OffsetData > * this_ptr, QVector< QTimeZone::OffsetData > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_operator__7(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QVector< QXmlStreamNamespaceDeclaration > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_operator__7(QVector< QXmlStreamNotationDeclaration > * this_ptr, QVector< QXmlStreamNotationDeclaration > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_operator__7(QVector< QXmlStreamEntityDeclaration > * this_ptr, QVector< QXmlStreamEntityDeclaration > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QVector_int_toList(QVector< int > const * this_ptr) {
  return new QList< int >(this_ptr->toList());
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_fromList(QList< int > const * list) {
  return new QVector< int >(QVector< int >::fromList(*list));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash61(QVector< QStringRef > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash62(QVector< unsigned int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash63(QVector< int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_185(QVector< QStringRef > const * lhs, QVector< QStringRef > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_186(QVector< unsigned int > const * lhs, QVector< unsigned int > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_187(QVector< int > const * lhs, QVector< int > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_191(QVector< QPair< double, QVariant > > const * lhs, QVector< QPair< double, QVariant > > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_197(QVector< QStringRef > const * lhs, QVector< QStringRef > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_198(QVector< unsigned int > const * lhs, QVector< unsigned int > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_199(QVector< int > const * lhs, QVector< int > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_203(QVector< QPair< double, QVariant > > const * lhs, QVector< QPair< double, QVariant > > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__258(QVector< QStringRef > const * lhs, QVector< QStringRef > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__259(QVector< unsigned int > const * lhs, QVector< unsigned int > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__260(QVector< int > const * lhs, QVector< int > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__264(QVector< QPair< double, QVariant > > const * lhs, QVector< QPair< double, QVariant > > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__270(QVector< QStringRef > const * lhs, QVector< QStringRef > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__271(QVector< unsigned int > const * lhs, QVector< unsigned int > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__272(QVector< int > const * lhs, QVector< int > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__276(QVector< QPair< double, QVariant > > const * lhs, QVector< QPair< double, QVariant > > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__281(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::MouseButton >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__282(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::Orientation >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__283(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::KeyboardModifier >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__284(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::WindowType >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__285(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::AlignmentFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__286(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::Edge >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__287(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::ImageConversionFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__288(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::DockWidgetArea >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__289(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::ToolBarArea >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__290(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::WindowState >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__291(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::ScreenOrientation >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__292(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::DropAction >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__293(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::ItemFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__294(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::MatchFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__295(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::TextInteractionFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__296(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::InputMethodQuery >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__297(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::InputMethodHint >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__298(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::TouchPointState >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__299(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::MouseEventFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__300(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::GestureFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__302(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QByteArray::Base64Option >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__303(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QString::SectionFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__304(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QMetaType::TypeFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__305(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::FindChildOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__306(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QEventLoop::ProcessEventsFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__307(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QIODevice::OpenModeFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__308(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QLocale::NumberOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__309(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QCommandLineOption::Flag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__310(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextStream::NumberFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__311(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QFileDevice::Permission >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__312(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QFileDevice::FileHandleFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__313(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QDir::SortFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__314(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QDir::Filter >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__315(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QDirIterator::IteratorFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__316(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QItemSelectionModel::SelectionFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__317(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QLibrary::LoadHint >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__318(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QRegularExpression::PatternOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__319(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QRegularExpression::MatchOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__320(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QStandardPaths::LocateOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__321(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextBoundaryFinder::BoundaryReason >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__322(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextCodec::ConversionFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__323(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QUrl::UserInputResolutionOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__324(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QUrl::ComponentFormattingOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__369(QDataStream * s, QList< QString > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__372(QDataStream * s, QList< QVariant > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__373(QDataStream * s, QList< QByteArray > * l) {
  return &operator>>(*s, *l);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__379(QDataStream * s, QList< Qt::DayOfWeek > * l) {
  return &operator>>(*s, *l);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__380(QDataStream * s, QList< QLocale > * l) {
  return &operator>>(*s, *l);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__381(QDataStream * s, QList< QLocale::Country > * l) {
  return &operator>>(*s, *l);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__384(QDataStream * s, QList< QUrl > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__388(QDataStream * s, QList< int > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__389(QDataStream * s, QList< QPair< QString, QString > > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__390(QDataStream * s, QList< QString > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__392(QDataStream * s, QList< QObject * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__393(QDataStream * s, QList< QVariant > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__394(QDataStream * s, QList< QByteArray > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__396(QDataStream * s, QList< QModelIndex > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__397(QDataStream * s, QList< QPersistentModelIndex > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__398(QDataStream * s, QList< QAbstractState * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__399(QDataStream * s, QList< QAbstractAnimation * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__400(QDataStream * s, QList< Qt::DayOfWeek > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__401(QDataStream * s, QList< QLocale > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__402(QDataStream * s, QList< QLocale::Country > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__405(QDataStream * s, QList< QUrl > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__407(QDataStream * s, QList< QAbstractTransition * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__409(QDataStream * s, QList< int > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__410(QDataStream * s, QList< QPair< QString, QString > > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__413(QDataStream * s, QVector< unsigned int > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__414(QDataStream * s, QVector< int > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__415(QDataStream * s, QVector< QPointF > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__418(QDataStream * s, QVector< QPair< double, QVariant > > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__425(QDataStream * s, QVector< unsigned int > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__426(QDataStream * s, QVector< int > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__427(QDataStream * s, QVector< QPointF > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__430(QDataStream * s, QVector< QPair< double, QVariant > > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__436(QDataStream * s, QSet< QAbstractState * > const * set) {
  return &operator<<(*s, *set);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__437(QDataStream * s, QHash< QString, QVariant > * hash) {
  return &operator>>(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__438(QDataStream * s, QHash< int, QByteArray > * hash) {
  return &operator>>(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__439(QDataStream * s, QHash< QString, QVariant > const * hash) {
  return &operator<<(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__440(QDataStream * s, QHash< int, QByteArray > const * hash) {
  return &operator<<(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__441(QDataStream * s, QMap< QString, QVariant > * map) {
  return &operator>>(*s, *map);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__442(QDataStream * s, QMap< int, QVariant > * map) {
  return &operator>>(*s, *map);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__443(QDataStream * s, QMap< QString, QVariant > const * map) {
  return &operator<<(*s, *map);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__444(QDataStream * s, QMap< int, QVariant > const * map) {
  return &operator<<(*s, *map);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__445(QDataStream * s, QPair< QString, QJsonValue > * p) {
  return &operator>>(*s, *p);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__446(QDataStream * s, QPair< double, QVariant > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__447(QDataStream * s, QPair< QString, QString > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__448(QDataStream * s, QPair< QString, QJsonValue > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__449(QDataStream * s, QPair< double, QVariant > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__450(QDataStream * s, QPair< QString, QString > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_QSet() {
  return new QSet< QAbstractState * >();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_swap(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSet_QAbstractState_ptr_size(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_isEmpty(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSet_QAbstractState_ptr_capacity(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_reserve(QSet< QAbstractState * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_squeeze(QSet< QAbstractState * > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_detach(QSet< QAbstractState * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_isDetached(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_setSharable(QSet< QAbstractState * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_clear(QSet< QAbstractState * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_remove(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return this_ptr->remove(*value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_contains(QSet< QAbstractState * > const * this_ptr, QAbstractState * const * value) {
  return this_ptr->contains(*value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_contains1(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * set) {
  return this_ptr->contains(*set);
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_iterator() {
  return new QSet< QAbstractState * >::iterator();
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_iterator1(QSet< QAbstractState * >::iterator const * o) {
  return new QSet< QAbstractState * >::iterator(*o);
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator_(QSet< QAbstractState * >::iterator * this_ptr, QSet< QAbstractState * >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator_1(QSet< QAbstractState * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__(QSet< QAbstractState * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__1(QSet< QAbstractState * >::iterator const * this_ptr, QSet< QAbstractState * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__3(QSet< QAbstractState * >::iterator const * this_ptr, QSet< QAbstractState * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__5(QSet< QAbstractState * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__6(QSet< QAbstractState * >::iterator * this_ptr, int arg1) {
  return new QSet< QAbstractState * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__7(QSet< QAbstractState * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__8(QSet< QAbstractState * >::iterator * this_ptr, int arg1) {
  return new QSet< QAbstractState * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator_2(QSet< QAbstractState * >::iterator const * this_ptr, int j) {
  return new QSet< QAbstractState * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator_3(QSet< QAbstractState * >::iterator const * this_ptr, int j) {
  return new QSet< QAbstractState * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__9(QSet< QAbstractState * >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_operator__10(QSet< QAbstractState * >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_const_iterator() {
  return new QSet< QAbstractState * >::const_iterator();
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_const_iterator1(QSet< QAbstractState * >::const_iterator const * o) {
  return new QSet< QAbstractState * >::const_iterator(*o);
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_const_iterator2(QSet< QAbstractState * >::iterator const * o) {
  return new QSet< QAbstractState * >::const_iterator(*o);
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator_(QSet< QAbstractState * >::const_iterator * this_ptr, QSet< QAbstractState * >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator_1(QSet< QAbstractState * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAbstractState * const * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__(QSet< QAbstractState * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__1(QSet< QAbstractState * >::const_iterator const * this_ptr, QSet< QAbstractState * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__3(QSet< QAbstractState * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__4(QSet< QAbstractState * >::const_iterator * this_ptr, int arg1) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__5(QSet< QAbstractState * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__6(QSet< QAbstractState * >::const_iterator * this_ptr, int arg1) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator_2(QSet< QAbstractState * >::const_iterator const * this_ptr, int j) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator_3(QSet< QAbstractState * >::const_iterator const * this_ptr, int j) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__7(QSet< QAbstractState * >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_operator__8(QSet< QAbstractState * >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_begin(QSet< QAbstractState * > * this_ptr) {
  return new QSet< QAbstractState * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_begin1(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_cbegin(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_constBegin(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_end(QSet< QAbstractState * > * this_ptr) {
  return new QSet< QAbstractState * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_end1(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_cend(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_constEnd(QSet< QAbstractState * > const * this_ptr) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_erase(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * >::iterator const * i) {
  return new QSet< QAbstractState * >::iterator(this_ptr->erase(*i));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_erase1(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * >::const_iterator const * i) {
  return new QSet< QAbstractState * >::iterator(this_ptr->erase(*i));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSet_QAbstractState_ptr_count(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_insert(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return new QSet< QAbstractState * >::iterator(this_ptr->insert(*value));
}


RITUAL_EXPORT QSet< QAbstractState * >::iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_find(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return new QSet< QAbstractState * >::iterator(this_ptr->find(*value));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_find1(QSet< QAbstractState * > const * this_ptr, QAbstractState * const * value) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->find(*value));
}


RITUAL_EXPORT QSet< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QSet_QAbstractState_ptr_constFind(QSet< QAbstractState * > const * this_ptr, QAbstractState * const * value) {
  return new QSet< QAbstractState * >::const_iterator(this_ptr->constFind(*value));
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_unite(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->unite(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_intersect(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->intersect(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_intersects(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return this_ptr->intersects(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_subtract(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->subtract(*other);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSet_QAbstractState_ptr_empty(QSet< QAbstractState * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__2(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return &this_ptr->operator<<(*value);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__3(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->operator|=(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__4(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return &this_ptr->operator|=(*value);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__5(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->operator&=(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__6(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return &this_ptr->operator&=(*value);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__7(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->operator+=(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__8(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return &this_ptr->operator+=(*value);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__9(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->operator-=(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator__10(QSet< QAbstractState * > * this_ptr, QAbstractState * const * value) {
  return &this_ptr->operator-=(*value);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator_(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return new QSet< QAbstractState * >(this_ptr->operator|(*other));
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator_1(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return new QSet< QAbstractState * >(this_ptr->operator&(*other));
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator_2(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return new QSet< QAbstractState * >(this_ptr->operator+(*other));
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator_3(QSet< QAbstractState * > const * this_ptr, QSet< QAbstractState * > const * other) {
  return new QSet< QAbstractState * >(this_ptr->operator-(*other));
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_toList(QSet< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >(this_ptr->toList());
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_values(QSet< QAbstractState * > const * this_ptr) {
  return new QList< QAbstractState * >(this_ptr->values());
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_fromList(QList< QAbstractState * > const * list) {
  return new QSet< QAbstractState * >(QSet< QAbstractState * >::fromList(*list));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash72(QSet< QAbstractState * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__451(QDebug const * debug, QList< QString > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__452(QDebug const * debug, QList< QItemSelectionRange > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__453(QDebug const * debug, QList< QObject * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__454(QDebug const * debug, QList< QVariant > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__455(QDebug const * debug, QList< QByteArray > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__457(QDebug const * debug, QList< QModelIndex > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__458(QDebug const * debug, QList< QPersistentModelIndex > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__459(QDebug const * debug, QList< QAbstractState * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__460(QDebug const * debug, QList< QAbstractAnimation * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__461(QDebug const * debug, QList< Qt::DayOfWeek > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__462(QDebug const * debug, QList< QLocale > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__463(QDebug const * debug, QList< QLocale::Country > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__465(QDebug const * debug, QList< QFileInfo > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


#endif

RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__466(QDebug const * debug, QList< QUrl > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__467(QDebug const * debug, QList< QMimeType > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__468(QDebug const * debug, QList< QAbstractTransition * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__469(QDebug const * debug, QList< QStorageInfo > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


#endif

RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__470(QDebug const * debug, QList< int > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__471(QDebug const * debug, QList< QPair< QString, QString > > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__473(QDebug const * debug, QVector< QStringRef > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__474(QDebug const * debug, QVector< unsigned int > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__475(QDebug const * debug, QVector< int > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__476(QDebug const * debug, QVector< QPointF > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__479(QDebug const * debug, QVector< QPair< double, QVariant > > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__484(QDebug const * debug, QMap< QString, QVariant > const * map) {
  return new QDebug(operator<<(*debug, *map));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__485(QDebug const * debug, QMap< int, QVariant > const * map) {
  return new QDebug(operator<<(*debug, *map));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__486(QDebug const * debug, QHash< QString, QVariant > const * hash) {
  return new QDebug(operator<<(*debug, *hash));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__487(QDebug const * debug, QHash< int, QByteArray > const * hash) {
  return new QDebug(operator<<(*debug, *hash));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__488(QDebug const * debug, QPair< QString, QJsonValue > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__489(QDebug const * debug, QPair< double, QVariant > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__490(QDebug const * debug, QPair< QString, QString > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__491(QDebug const * debug, QSet< QAbstractState * > const * set) {
  return new QDebug(operator<<(*debug, *set));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__492(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::MouseButton >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__493(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::Orientation >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__494(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::KeyboardModifier >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__495(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::WindowType >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__496(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::AlignmentFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__497(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::Edge >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__498(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__499(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::DockWidgetArea >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__500(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::ToolBarArea >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__501(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::WindowState >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__502(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::ScreenOrientation >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__503(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::DropAction >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__504(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::ItemFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__505(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::MatchFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__506(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::TextInteractionFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__507(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::InputMethodQuery >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__508(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::InputMethodHint >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__509(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::TouchPointState >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__510(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::MouseEventFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__511(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::GestureFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__513(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QByteArray::Base64Option >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__514(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QString::SectionFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__515(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QMetaType::TypeFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__516(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::FindChildOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__517(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QEventLoop::ProcessEventsFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__518(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QIODevice::OpenModeFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__519(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QLocale::NumberOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__520(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QCommandLineOption::Flag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__521(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextStream::NumberFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__522(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QFileDevice::Permission >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__523(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QFileDevice::FileHandleFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__524(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QDir::SortFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__525(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QDir::Filter >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__526(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QDirIterator::IteratorFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__527(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QItemSelectionModel::SelectionFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__528(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QLibrary::LoadHint >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__529(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QRegularExpression::PatternOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__530(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QRegularExpression::MatchOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__531(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QStandardPaths::LocateOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__532(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextBoundaryFinder::BoundaryReason >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__533(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextCodec::ConversionFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__534(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QUrl::UserInputResolutionOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__535(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QUrl::ComponentFormattingOption >(flags)));
}


RITUAL_EXPORT QFuture< void > * ctr_qt_core_ffi_QFuture_void_QFuture() {
  return new QFuture< void >();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_operator__(QFuture< void > const * this_ptr, QFuture< void > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_cancel(QFuture< void > * this_ptr) {
  this_ptr->cancel();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_isCanceled(QFuture< void > const * this_ptr) {
  return this_ptr->isCanceled();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_setPaused(QFuture< void > * this_ptr, bool paused) {
  this_ptr->setPaused(paused);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_isPaused(QFuture< void > const * this_ptr) {
  return this_ptr->isPaused();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_pause(QFuture< void > * this_ptr) {
  this_ptr->pause();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_resume(QFuture< void > * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_togglePaused(QFuture< void > * this_ptr) {
  this_ptr->togglePaused();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_isStarted(QFuture< void > const * this_ptr) {
  return this_ptr->isStarted();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_isFinished(QFuture< void > const * this_ptr) {
  return this_ptr->isFinished();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFuture_void_isRunning(QFuture< void > const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFuture_void_resultCount(QFuture< void > const * this_ptr) {
  return this_ptr->resultCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFuture_void_progressValue(QFuture< void > const * this_ptr) {
  return this_ptr->progressValue();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFuture_void_progressMinimum(QFuture< void > const * this_ptr) {
  return this_ptr->progressMinimum();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QFuture_void_progressMaximum(QFuture< void > const * this_ptr) {
  return this_ptr->progressMaximum();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QFuture_void_progressText(QFuture< void > const * this_ptr) {
  return new QString(this_ptr->progressText());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_waitForFinished(QFuture< void > * this_ptr) {
  this_ptr->waitForFinished();
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_QUrlTwoFlags(QUrl::UrlFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_QUrlTwoFlags1(QUrl::ComponentFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_QUrlTwoFlags2(int f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(QFlags< QUrl::ComponentFormattingOption >(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, int mask) {
  return &this_ptr->operator&=(mask);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__1(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, unsigned int mask) {
  return &this_ptr->operator&=(mask);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__2(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * f) {
  return &this_ptr->operator|=(*f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__3(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrl::UrlFormattingOption f) {
  return &this_ptr->operator|=(f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__4(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrl::ComponentFormattingOption f) {
  return &this_ptr->operator|=(f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__5(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * f) {
  return &this_ptr->operator^=(*f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__6(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrl::UrlFormattingOption f) {
  return &this_ptr->operator^=(f);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator__7(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrl::ComponentFormattingOption f) {
  return &this_ptr->operator^=(f);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_int(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr) {
  return this_ptr->operator int();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr) {
  return this_ptr->operator!();
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_1(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator|(*f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_2(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::UrlFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator|(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_3(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::ComponentFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator|(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_4(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator^(*f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_5(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::UrlFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator^(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_6(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::ComponentFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator^(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_7(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, int mask) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator&(mask));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_8(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, unsigned int mask) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator&(mask));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_9(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::UrlFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator&(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_10(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::ComponentFormattingOption f) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator&(f));
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operatord(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(this_ptr->operator~());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_testFlag(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::UrlFormattingOption f) {
  return this_ptr->testFlag(f);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_testFlag1(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * this_ptr, QUrl::ComponentFormattingOption f) {
  return this_ptr->testFlag(f);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QString_QJsonValue_dQPair(QPair< QString, QJsonValue > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_double_QVariant_dQPair(QPair< double, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QString_QString_dQPair(QPair< QString, QString > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPair< QString, QJsonValue > * ctr_qt_core_ffi_QPair_QString_QJsonValue_QPair2(QPair< QString, QJsonValue > const * other) {
  return new QPair< QString, QJsonValue >(*other);
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QPair_double_QVariant_QPair2(QPair< double, QVariant > const * other) {
  return new QPair< double, QVariant >(*other);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QPair_QString_QString_QPair2(QPair< QString, QString > const * other) {
  return new QPair< QString, QString >(*other);
}


RITUAL_EXPORT QPair< QString, QJsonValue > * ctr_qt_core_ffi_QPair_QString_QJsonValue_operator_(QPair< QString, QJsonValue > * this_ptr, QPair< QString, QJsonValue > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< double, QVariant > * ctr_qt_core_ffi_QPair_double_QVariant_operator_(QPair< double, QVariant > * this_ptr, QPair< double, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< QString, QString > * ctr_qt_core_ffi_QPair_QString_QString_operator_(QPair< QString, QString > * this_ptr, QPair< QString, QString > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_iterator_diterator(QList< QString >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_diterator(QList< QItemSelectionRange >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_iterator_diterator(QList< QObject * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_iterator_diterator(QList< QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_iterator_diterator(QList< QByteArray >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_diterator(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_iterator_diterator(QList< QModelIndex >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_diterator(QList< QPersistentModelIndex >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_diterator(QList< QAbstractState * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_diterator(QList< QAbstractAnimation * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_diterator(QList< Qt::DayOfWeek >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_iterator_diterator(QList< QLocale >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_iterator_diterator(QList< QLocale::Country >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_iterator_diterator(QList< QCommandLineOption >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_iterator_diterator(QList< QFileInfo >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_iterator_diterator(QList< QUrl >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_iterator_diterator(QList< QMimeType >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_diterator(QList< QAbstractTransition * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_iterator_diterator(QList< QStorageInfo >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_iterator_diterator(QList< int >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_diterator(QList< QPair< QString, QString > >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QString >::iterator * ctr_qt_core_ffi_QList_QString_iterator_operator_8(QList< QString >::iterator * this_ptr, QList< QString >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QItemSelectionRange >::iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_iterator_operator_8(QList< QItemSelectionRange >::iterator * this_ptr, QList< QItemSelectionRange >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QObject * >::iterator * ctr_qt_core_ffi_QList_QObject_ptr_iterator_operator_8(QList< QObject * >::iterator * this_ptr, QList< QObject * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QVariant >::iterator * ctr_qt_core_ffi_QList_QVariant_iterator_operator_8(QList< QVariant >::iterator * this_ptr, QList< QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QByteArray >::iterator * ctr_qt_core_ffi_QList_QByteArray_iterator_operator_8(QList< QByteArray >::iterator * this_ptr, QList< QByteArray >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_iterator_operator_8(QList< QAbstractEventDispatcher::TimerInfo >::iterator * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QModelIndex >::iterator * ctr_qt_core_ffi_QList_QModelIndex_iterator_operator_8(QList< QModelIndex >::iterator * this_ptr, QList< QModelIndex >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_iterator_operator_8(QList< QPersistentModelIndex >::iterator * this_ptr, QList< QPersistentModelIndex >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractState * >::iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_iterator_operator_8(QList< QAbstractState * >::iterator * this_ptr, QList< QAbstractState * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_iterator_operator_8(QList< QAbstractAnimation * >::iterator * this_ptr, QList< QAbstractAnimation * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_iterator_operator_8(QList< Qt::DayOfWeek >::iterator * this_ptr, QList< Qt::DayOfWeek >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale >::iterator * ctr_qt_core_ffi_QList_QLocale_iterator_operator_8(QList< QLocale >::iterator * this_ptr, QList< QLocale >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale::Country >::iterator * ctr_qt_core_ffi_QList_QLocale_Country_iterator_operator_8(QList< QLocale::Country >::iterator * this_ptr, QList< QLocale::Country >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QCommandLineOption >::iterator * ctr_qt_core_ffi_QList_QCommandLineOption_iterator_operator_8(QList< QCommandLineOption >::iterator * this_ptr, QList< QCommandLineOption >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFileInfo >::iterator * ctr_qt_core_ffi_QList_QFileInfo_iterator_operator_8(QList< QFileInfo >::iterator * this_ptr, QList< QFileInfo >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QUrl >::iterator * ctr_qt_core_ffi_QList_QUrl_iterator_operator_8(QList< QUrl >::iterator * this_ptr, QList< QUrl >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QMimeType >::iterator * ctr_qt_core_ffi_QList_QMimeType_iterator_operator_8(QList< QMimeType >::iterator * this_ptr, QList< QMimeType >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractTransition * >::iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_iterator_operator_8(QList< QAbstractTransition * >::iterator * this_ptr, QList< QAbstractTransition * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStorageInfo >::iterator * ctr_qt_core_ffi_QList_QStorageInfo_iterator_operator_8(QList< QStorageInfo >::iterator * this_ptr, QList< QStorageInfo >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< int >::iterator * ctr_qt_core_ffi_QList_int_iterator_operator_8(QList< int >::iterator * this_ptr, QList< int >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_iterator_operator_8(QList< QPair< QString, QString > >::iterator * this_ptr, QList< QPair< QString, QString > >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_const_iterator_dconst_iterator(QList< QString >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_dconst_iterator(QList< QItemSelectionRange >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_dconst_iterator(QList< QObject * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_const_iterator_dconst_iterator(QList< QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_const_iterator_dconst_iterator(QList< QByteArray >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_dconst_iterator(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_const_iterator_dconst_iterator(QList< QModelIndex >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_dconst_iterator(QList< QPersistentModelIndex >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_dconst_iterator(QList< QAbstractState * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_dconst_iterator(QList< QAbstractAnimation * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_dconst_iterator(QList< Qt::DayOfWeek >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_const_iterator_dconst_iterator(QList< QLocale >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_dconst_iterator(QList< QLocale::Country >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_dconst_iterator(QList< QCommandLineOption >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_const_iterator_dconst_iterator(QList< QFileInfo >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_const_iterator_dconst_iterator(QList< QUrl >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_const_iterator_dconst_iterator(QList< QMimeType >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_dconst_iterator(QList< QAbstractTransition * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_dconst_iterator(QList< QStorageInfo >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_const_iterator_dconst_iterator(QList< int >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_dconst_iterator(QList< QPair< QString, QString > >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QString >::const_iterator * ctr_qt_core_ffi_QList_QString_const_iterator_operator_6(QList< QString >::const_iterator * this_ptr, QList< QString >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QItemSelectionRange >::const_iterator * ctr_qt_core_ffi_QList_QItemSelectionRange_const_iterator_operator_6(QList< QItemSelectionRange >::const_iterator * this_ptr, QList< QItemSelectionRange >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QObject * >::const_iterator * ctr_qt_core_ffi_QList_QObject_ptr_const_iterator_operator_6(QList< QObject * >::const_iterator * this_ptr, QList< QObject * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QVariant >::const_iterator * ctr_qt_core_ffi_QList_QVariant_const_iterator_operator_6(QList< QVariant >::const_iterator * this_ptr, QList< QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QByteArray >::const_iterator * ctr_qt_core_ffi_QList_QByteArray_const_iterator_operator_6(QList< QByteArray >::const_iterator * this_ptr, QList< QByteArray >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_const_iterator_operator_6(QList< QAbstractEventDispatcher::TimerInfo >::const_iterator * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QModelIndex_const_iterator_operator_6(QList< QModelIndex >::const_iterator * this_ptr, QList< QModelIndex >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::const_iterator * ctr_qt_core_ffi_QList_QPersistentModelIndex_const_iterator_operator_6(QList< QPersistentModelIndex >::const_iterator * this_ptr, QList< QPersistentModelIndex >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractState * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractState_ptr_const_iterator_operator_6(QList< QAbstractState * >::const_iterator * this_ptr, QList< QAbstractState * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_const_iterator_operator_6(QList< QAbstractAnimation * >::const_iterator * this_ptr, QList< QAbstractAnimation * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::const_iterator * ctr_qt_core_ffi_QList_Qt_DayOfWeek_const_iterator_operator_6(QList< Qt::DayOfWeek >::const_iterator * this_ptr, QList< Qt::DayOfWeek >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale >::const_iterator * ctr_qt_core_ffi_QList_QLocale_const_iterator_operator_6(QList< QLocale >::const_iterator * this_ptr, QList< QLocale >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale::Country >::const_iterator * ctr_qt_core_ffi_QList_QLocale_Country_const_iterator_operator_6(QList< QLocale::Country >::const_iterator * this_ptr, QList< QLocale::Country >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QCommandLineOption >::const_iterator * ctr_qt_core_ffi_QList_QCommandLineOption_const_iterator_operator_6(QList< QCommandLineOption >::const_iterator * this_ptr, QList< QCommandLineOption >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFileInfo >::const_iterator * ctr_qt_core_ffi_QList_QFileInfo_const_iterator_operator_6(QList< QFileInfo >::const_iterator * this_ptr, QList< QFileInfo >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QUrl >::const_iterator * ctr_qt_core_ffi_QList_QUrl_const_iterator_operator_6(QList< QUrl >::const_iterator * this_ptr, QList< QUrl >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QMimeType >::const_iterator * ctr_qt_core_ffi_QList_QMimeType_const_iterator_operator_6(QList< QMimeType >::const_iterator * this_ptr, QList< QMimeType >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractTransition * >::const_iterator * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_const_iterator_operator_6(QList< QAbstractTransition * >::const_iterator * this_ptr, QList< QAbstractTransition * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStorageInfo >::const_iterator * ctr_qt_core_ffi_QList_QStorageInfo_const_iterator_operator_6(QList< QStorageInfo >::const_iterator * this_ptr, QList< QStorageInfo >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< int >::const_iterator * ctr_qt_core_ffi_QList_int_const_iterator_operator_6(QList< int >::const_iterator * this_ptr, QList< int >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::const_iterator * ctr_qt_core_ffi_QList_QPair_QString_QString_const_iterator_operator_6(QList< QPair< QString, QString > >::const_iterator * this_ptr, QList< QPair< QString, QString > >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_iterator_diterator(QMap< QString, QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_iterator_diterator(QMap< int, QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_iterator1(QMap< QString, QVariant >::iterator const * other) {
  return new QMap< QString, QVariant >::iterator(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_iterator1(QMap< int, QVariant >::iterator const * other) {
  return new QMap< int, QVariant >::iterator(*other);
}


RITUAL_EXPORT QMap< QString, QVariant >::iterator * ctr_qt_core_ffi_QMap_QString_QVariant_iterator_operator_3(QMap< QString, QVariant >::iterator * this_ptr, QMap< QString, QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::iterator * ctr_qt_core_ffi_QMap_int_QVariant_iterator_operator_3(QMap< int, QVariant >::iterator * this_ptr, QMap< int, QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_dconst_iterator(QMap< QString, QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_dconst_iterator(QMap< int, QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_const_iterator2(QMap< QString, QVariant >::const_iterator const * other) {
  return new QMap< QString, QVariant >::const_iterator(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_const_iterator2(QMap< int, QVariant >::const_iterator const * other) {
  return new QMap< int, QVariant >::const_iterator(*other);
}


RITUAL_EXPORT QMap< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_const_iterator_operator_3(QMap< QString, QVariant >::const_iterator * this_ptr, QMap< QString, QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::const_iterator * ctr_qt_core_ffi_QMap_int_QVariant_const_iterator_operator_3(QMap< int, QVariant >::const_iterator * this_ptr, QMap< int, QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_dkey_iterator(QMap< QString, QVariant >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_dkey_iterator(QMap< int, QVariant >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_key_iterator2(QMap< QString, QVariant >::key_iterator const * other) {
  return new QMap< QString, QVariant >::key_iterator(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_key_iterator2(QMap< int, QVariant >::key_iterator const * other) {
  return new QMap< int, QVariant >::key_iterator(*other);
}


RITUAL_EXPORT QMap< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_QString_QVariant_key_iterator_operator_1(QMap< QString, QVariant >::key_iterator * this_ptr, QMap< QString, QVariant >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMap< int, QVariant >::key_iterator * ctr_qt_core_ffi_QMap_int_QVariant_key_iterator_operator_1(QMap< int, QVariant >::key_iterator * this_ptr, QMap< int, QVariant >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QHash_QString_QVariant_QHash1(QHash< QString, QVariant > const * other) {
  return new QHash< QString, QVariant >(*other);
}


RITUAL_EXPORT QHash< int, QByteArray > * ctr_qt_core_ffi_QHash_int_QByteArray_QHash1(QHash< int, QByteArray > const * other) {
  return new QHash< int, QByteArray >(*other);
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QHash_QString_QVariant_operator_(QHash< QString, QVariant > * this_ptr, QHash< QString, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< int, QByteArray > * ctr_qt_core_ffi_QHash_int_QByteArray_operator_(QHash< int, QByteArray > * this_ptr, QHash< int, QByteArray > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_iterator_diterator(QHash< QString, QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_iterator_diterator(QHash< int, QByteArray >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_iterator2(QHash< QString, QVariant >::iterator const * other) {
  return new QHash< QString, QVariant >::iterator(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_iterator2(QHash< int, QByteArray >::iterator const * other) {
  return new QHash< int, QByteArray >::iterator(*other);
}


RITUAL_EXPORT QHash< QString, QVariant >::iterator * ctr_qt_core_ffi_QHash_QString_QVariant_iterator_operator_3(QHash< QString, QVariant >::iterator * this_ptr, QHash< QString, QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::iterator * ctr_qt_core_ffi_QHash_int_QByteArray_iterator_operator_3(QHash< int, QByteArray >::iterator * this_ptr, QHash< int, QByteArray >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_dconst_iterator(QHash< QString, QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_dconst_iterator(QHash< int, QByteArray >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_const_iterator3(QHash< QString, QVariant >::const_iterator const * other) {
  return new QHash< QString, QVariant >::const_iterator(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_const_iterator3(QHash< int, QByteArray >::const_iterator const * other) {
  return new QHash< int, QByteArray >::const_iterator(*other);
}


RITUAL_EXPORT QHash< QString, QVariant >::const_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_const_iterator_operator_3(QHash< QString, QVariant >::const_iterator * this_ptr, QHash< QString, QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::const_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_const_iterator_operator_3(QHash< int, QByteArray >::const_iterator * this_ptr, QHash< int, QByteArray >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_dkey_iterator(QHash< QString, QVariant >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_dkey_iterator(QHash< int, QByteArray >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_key_iterator2(QHash< QString, QVariant >::key_iterator const * other) {
  return new QHash< QString, QVariant >::key_iterator(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_key_iterator2(QHash< int, QByteArray >::key_iterator const * other) {
  return new QHash< int, QByteArray >::key_iterator(*other);
}


RITUAL_EXPORT QHash< QString, QVariant >::key_iterator * ctr_qt_core_ffi_QHash_QString_QVariant_key_iterator_operator_1(QHash< QString, QVariant >::key_iterator * this_ptr, QHash< QString, QVariant >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< int, QByteArray >::key_iterator * ctr_qt_core_ffi_QHash_int_QByteArray_key_iterator_operator_1(QHash< int, QByteArray >::key_iterator * this_ptr, QHash< int, QByteArray >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_dQSet(QSet< QAbstractState * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_QSet1(QSet< QAbstractState * > const * other) {
  return new QSet< QAbstractState * >(*other);
}


RITUAL_EXPORT QSet< QAbstractState * > * ctr_qt_core_ffi_QSet_QAbstractState_ptr_operator_4(QSet< QAbstractState * > * this_ptr, QSet< QAbstractState * > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_iterator_diterator(QSet< QAbstractState * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSet_QAbstractState_ptr_const_iterator_dconst_iterator(QSet< QAbstractState * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFuture_void_dQFuture(QFuture< void > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFuture< void > * ctr_qt_core_ffi_QFuture_void_QFuture1(QFuture< void > const * other) {
  return new QFuture< void >(*other);
}


RITUAL_EXPORT QFuture< void > * ctr_qt_core_ffi_QFuture_void_operator_(QFuture< void > * this_ptr, QFuture< void > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_dQUrlTwoFlags(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_QUrlTwoFlags3() {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >();
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_QUrlTwoFlags4(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * other) {
  return new QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption >(*other);
}


RITUAL_EXPORT QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * ctr_qt_core_ffi_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_11(QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > * this_ptr, QUrlTwoFlags< QUrl::UrlFormattingOption, QUrl::ComponentFormattingOption > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_qtTrId1(char const * id) {
  return new QString(qtTrId(id));
}


RITUAL_EXPORT int ctr_qt_core_ffi_qEnvironmentVariableIntValue1(char const * varName) {
  return qEnvironmentVariableIntValue(varName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMetaObject_tr1(QMetaObject const * this_ptr, char const * s, char const * c) {
  return new QString(this_ptr->tr(s, c));
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_connect1(QObject const * sender, int signal_index, QObject const * receiver, int method_index, int type) {
  return new QMetaObject::Connection(QMetaObject::connect(sender, signal_index, receiver, method_index, type));
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QMetaObject_connect2(QObject const * sender, int signal_index, QObject const * receiver, int method_index) {
  return new QMetaObject::Connection(QMetaObject::connect(sender, signal_index, receiver, method_index));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_QByteArray5(char const * arg1) {
  return new QByteArray(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fill1(QByteArray * this_ptr, char c) {
  return &this_ptr->fill(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf4(QByteArray const * this_ptr, char c) {
  return this_ptr->indexOf(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf5(QByteArray const * this_ptr, char const * c) {
  return this_ptr->indexOf(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf6(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->indexOf(*a);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf4(QByteArray const * this_ptr, char c) {
  return this_ptr->lastIndexOf(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf5(QByteArray const * this_ptr, char const * c) {
  return this_ptr->lastIndexOf(c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf6(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->lastIndexOf(*a);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_mid1(QByteArray const * this_ptr, int index) {
  return new QByteArray(this_ptr->mid(index));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_leftJustified1(QByteArray const * this_ptr, int width, char fill) {
  return new QByteArray(this_ptr->leftJustified(width, fill));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_leftJustified2(QByteArray const * this_ptr, int width) {
  return new QByteArray(this_ptr->leftJustified(width));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_rightJustified1(QByteArray const * this_ptr, int width, char fill) {
  return new QByteArray(this_ptr->rightJustified(width, fill));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_rightJustified2(QByteArray const * this_ptr, int width) {
  return new QByteArray(this_ptr->rightJustified(width));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_indexOf7(QByteArray const * this_ptr, QString const * s) {
  return this_ptr->indexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_lastIndexOf7(QByteArray const * this_ptr, QString const * s) {
  return this_ptr->lastIndexOf(*s);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QByteArray_toShort1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toShort(ok);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QByteArray_toShort2(QByteArray const * this_ptr) {
  return this_ptr->toShort();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QByteArray_toUShort1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toUShort(ok);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QByteArray_toUShort2(QByteArray const * this_ptr) {
  return this_ptr->toUShort();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_toInt1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toInt(ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_toInt2(QByteArray const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QByteArray_toUInt1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toUInt(ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QByteArray_toUInt2(QByteArray const * this_ptr) {
  return this_ptr->toUInt();
}


RITUAL_EXPORT long ctr_qt_core_ffi_QByteArray_toLong1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toLong(ok);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QByteArray_toLong2(QByteArray const * this_ptr) {
  return this_ptr->toLong();
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QByteArray_toULong1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toULong(ok);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QByteArray_toULong2(QByteArray const * this_ptr) {
  return this_ptr->toULong();
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QByteArray_toLongLong1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toLongLong(ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QByteArray_toLongLong2(QByteArray const * this_ptr) {
  return this_ptr->toLongLong();
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QByteArray_toULongLong1(QByteArray const * this_ptr, bool * ok) {
  return this_ptr->toULongLong(ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QByteArray_toULongLong2(QByteArray const * this_ptr) {
  return this_ptr->toULongLong();
}


RITUAL_EXPORT float ctr_qt_core_ffi_QByteArray_toFloat1(QByteArray const * this_ptr) {
  return this_ptr->toFloat();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QByteArray_toDouble1(QByteArray const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toPercentEncoding1(QByteArray const * this_ptr, QByteArray const * exclude, QByteArray const * include) {
  return new QByteArray(this_ptr->toPercentEncoding(*exclude, *include));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toPercentEncoding2(QByteArray const * this_ptr, QByteArray const * exclude) {
  return new QByteArray(this_ptr->toPercentEncoding(*exclude));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_toPercentEncoding3(QByteArray const * this_ptr) {
  return new QByteArray(this_ptr->toPercentEncoding());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum8(QByteArray * this_ptr, short arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum9(QByteArray * this_ptr, unsigned short arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum10(QByteArray * this_ptr, int arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum11(QByteArray * this_ptr, unsigned int arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum12(QByteArray * this_ptr, qlonglong arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum13(QByteArray * this_ptr, qulonglong arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum14(QByteArray * this_ptr, float arg1, char f) {
  return &this_ptr->setNum(arg1, f);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum15(QByteArray * this_ptr, float arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum16(QByteArray * this_ptr, double arg1, char f) {
  return &this_ptr->setNum(arg1, f);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_setNum17(QByteArray * this_ptr, double arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number5(int arg1) {
  return new QByteArray(QByteArray::number(arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number6(unsigned int arg1) {
  return new QByteArray(QByteArray::number(arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number7(qlonglong arg1) {
  return new QByteArray(QByteArray::number(arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number8(qulonglong arg1) {
  return new QByteArray(QByteArray::number(arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number9(double arg1, char f) {
  return new QByteArray(QByteArray::number(arg1, f));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_number10(double arg1) {
  return new QByteArray(QByteArray::number(arg1));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_fromPercentEncoding1(QByteArray const * pctEncoded) {
  return new QByteArray(QByteArray::fromPercentEncoding(*pctEncoded));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qCompress2(unsigned char const * data, int nbytes) {
  return new QByteArray(qCompress(data, nbytes));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_qCompress3(QByteArray const * data) {
  return new QByteArray(qCompress(*data));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_QString9(QChar const * unicode) {
  return new QString(unicode);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fill1(QString * this_ptr, QChar const * c) {
  return &this_ptr->fill(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg20(QString const * this_ptr, qlonglong a, int fieldwidth, int base) {
  return new QString(this_ptr->arg(a, fieldwidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg21(QString const * this_ptr, qlonglong a, int fieldwidth) {
  return new QString(this_ptr->arg(a, fieldwidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg22(QString const * this_ptr, qlonglong a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg23(QString const * this_ptr, qulonglong a, int fieldwidth, int base) {
  return new QString(this_ptr->arg(a, fieldwidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg24(QString const * this_ptr, qulonglong a, int fieldwidth) {
  return new QString(this_ptr->arg(a, fieldwidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg25(QString const * this_ptr, qulonglong a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg26(QString const * this_ptr, long a, int fieldwidth, int base) {
  return new QString(this_ptr->arg(a, fieldwidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg27(QString const * this_ptr, long a, int fieldwidth) {
  return new QString(this_ptr->arg(a, fieldwidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg28(QString const * this_ptr, long a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg29(QString const * this_ptr, unsigned long a, int fieldwidth, int base) {
  return new QString(this_ptr->arg(a, fieldwidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg30(QString const * this_ptr, unsigned long a, int fieldwidth) {
  return new QString(this_ptr->arg(a, fieldwidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg31(QString const * this_ptr, unsigned long a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg32(QString const * this_ptr, int a, int fieldWidth, int base) {
  return new QString(this_ptr->arg(a, fieldWidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg33(QString const * this_ptr, int a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg34(QString const * this_ptr, int a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg35(QString const * this_ptr, unsigned int a, int fieldWidth, int base) {
  return new QString(this_ptr->arg(a, fieldWidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg36(QString const * this_ptr, unsigned int a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg37(QString const * this_ptr, unsigned int a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg38(QString const * this_ptr, short a, int fieldWidth, int base) {
  return new QString(this_ptr->arg(a, fieldWidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg39(QString const * this_ptr, short a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg40(QString const * this_ptr, short a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg41(QString const * this_ptr, unsigned short a, int fieldWidth, int base) {
  return new QString(this_ptr->arg(a, fieldWidth, base));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg42(QString const * this_ptr, unsigned short a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg43(QString const * this_ptr, unsigned short a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg44(QString const * this_ptr, double a, int fieldWidth, char fmt, int prec) {
  return new QString(this_ptr->arg(a, fieldWidth, fmt, prec));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg45(QString const * this_ptr, double a, int fieldWidth, char fmt) {
  return new QString(this_ptr->arg(a, fieldWidth, fmt));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg46(QString const * this_ptr, double a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg47(QString const * this_ptr, double a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg48(QString const * this_ptr, char a, int fieldWidth) {
  return new QString(this_ptr->arg(a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg49(QString const * this_ptr, char a) {
  return new QString(this_ptr->arg(a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg50(QString const * this_ptr, QChar const * a, int fieldWidth) {
  return new QString(this_ptr->arg(*a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg51(QString const * this_ptr, QChar const * a) {
  return new QString(this_ptr->arg(*a));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg52(QString const * this_ptr, QString const * a, int fieldWidth) {
  return new QString(this_ptr->arg(*a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg53(QString const * this_ptr, QString const * a) {
  return new QString(this_ptr->arg(*a));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf8(QString const * this_ptr, QChar const * c, int from) {
  return this_ptr->indexOf(*c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf9(QString const * this_ptr, QChar const * c) {
  return this_ptr->indexOf(*c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf10(QString const * this_ptr, QString const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf11(QString const * this_ptr, QString const * s) {
  return this_ptr->indexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf12(QString const * this_ptr, QLatin1String const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf13(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->indexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf14(QString const * this_ptr, QStringRef const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf15(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->indexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf8(QString const * this_ptr, QChar const * c, int from) {
  return this_ptr->lastIndexOf(*c, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf9(QString const * this_ptr, QChar const * c) {
  return this_ptr->lastIndexOf(*c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf10(QString const * this_ptr, QString const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf11(QString const * this_ptr, QString const * s) {
  return this_ptr->lastIndexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf12(QString const * this_ptr, QLatin1String const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf13(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->lastIndexOf(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf14(QString const * this_ptr, QStringRef const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf15(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->lastIndexOf(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains8(QString const * this_ptr, QChar const * c) {
  return this_ptr->contains(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains9(QString const * this_ptr, QString const * s) {
  return this_ptr->contains(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains10(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->contains(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains11(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->contains(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count6(QString const * this_ptr, QChar const * c) {
  return this_ptr->count(*c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count7(QString const * this_ptr, QString const * s) {
  return this_ptr->count(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_count8(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->count(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf16(QString const * this_ptr, QRegExp const * arg1) {
  return this_ptr->indexOf(*arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf16(QString const * this_ptr, QRegExp const * arg1) {
  return this_ptr->lastIndexOf(*arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf17(QString const * this_ptr, QRegExp * arg1) {
  return this_ptr->indexOf(*arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf17(QString const * this_ptr, QRegExp * arg1) {
  return this_ptr->lastIndexOf(*arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf18(QString const * this_ptr, QRegularExpression const * re) {
  return this_ptr->indexOf(*re);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf18(QString const * this_ptr, QRegularExpression const * re) {
  return this_ptr->lastIndexOf(*re);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section4(QString const * this_ptr, QChar const * sep, int start, int end) {
  return new QString(this_ptr->section(*sep, start, end));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section5(QString const * this_ptr, QChar const * sep, int start) {
  return new QString(this_ptr->section(*sep, start));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section6(QString const * this_ptr, QString const * in_sep, int start, int end) {
  return new QString(this_ptr->section(*in_sep, start, end));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section7(QString const * this_ptr, QString const * in_sep, int start) {
  return new QString(this_ptr->section(*in_sep, start));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section8(QString const * this_ptr, QRegExp const * reg, int start, int end) {
  return new QString(this_ptr->section(*reg, start, end));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section9(QString const * this_ptr, QRegExp const * reg, int start) {
  return new QString(this_ptr->section(*reg, start));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section10(QString const * this_ptr, QRegularExpression const * re, int start, int end) {
  return new QString(this_ptr->section(*re, start, end));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_section11(QString const * this_ptr, QRegularExpression const * re, int start) {
  return new QString(this_ptr->section(*re, start));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_mid1(QString const * this_ptr, int position) {
  return new QString(this_ptr->mid(position));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QString_midRef1(QString const * this_ptr, int position) {
  return new QStringRef(this_ptr->midRef(position));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith4(QString const * this_ptr, QString const * s) {
  return this_ptr->startsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith5(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->startsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith6(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->startsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith7(QString const * this_ptr, QChar const * c) {
  return this_ptr->startsWith(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith4(QString const * this_ptr, QString const * s) {
  return this_ptr->endsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith5(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->endsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith6(QString const * this_ptr, QLatin1String const * s) {
  return this_ptr->endsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith7(QString const * this_ptr, QChar const * c) {
  return this_ptr->endsWith(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_leftJustified1(QString const * this_ptr, int width, QChar const * fill) {
  return new QString(this_ptr->leftJustified(width, *fill));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_leftJustified2(QString const * this_ptr, int width) {
  return new QString(this_ptr->leftJustified(width));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_rightJustified1(QString const * this_ptr, int width, QChar const * fill) {
  return new QString(this_ptr->rightJustified(width, *fill));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_rightJustified2(QString const * this_ptr, int width) {
  return new QString(this_ptr->rightJustified(width));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove5(QString * this_ptr, QChar const * c) {
  return &this_ptr->remove(*c);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove6(QString * this_ptr, QString const * s) {
  return &this_ptr->remove(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace13(QString * this_ptr, QChar const * before, QChar const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace14(QString * this_ptr, QChar const * before, int blen, QChar const * after, int alen) {
  return &this_ptr->replace(before, blen, after, alen);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace15(QString * this_ptr, QLatin1String const * before, QLatin1String const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace16(QString * this_ptr, QLatin1String const * before, QString const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace17(QString * this_ptr, QString const * before, QLatin1String const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace18(QString * this_ptr, QString const * before, QString const * after) {
  return &this_ptr->replace(*before, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace19(QString * this_ptr, QChar const * c, QString const * after) {
  return &this_ptr->replace(*c, *after);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_replace20(QString * this_ptr, QChar const * c, QLatin1String const * after) {
  return &this_ptr->replace(*c, *after);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split4(QString const * this_ptr, QString const * sep, QString::SplitBehavior behavior) {
  return new QStringList(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split5(QString const * this_ptr, QString const * sep) {
  return new QStringList(this_ptr->split(*sep));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef4(QString const * this_ptr, QString const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef5(QString const * this_ptr, QString const * sep) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split6(QString const * this_ptr, QChar const * sep, QString::SplitBehavior behavior) {
  return new QStringList(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split7(QString const * this_ptr, QChar const * sep) {
  return new QStringList(this_ptr->split(*sep));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef6(QString const * this_ptr, QChar const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef7(QString const * this_ptr, QChar const * sep) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split8(QString const * this_ptr, QRegExp const * sep) {
  return new QStringList(this_ptr->split(*sep));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef8(QString const * this_ptr, QRegExp const * sep) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split9(QString const * this_ptr, QRegularExpression const * sep) {
  return new QStringList(this_ptr->split(*sep));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef9(QString const * this_ptr, QRegularExpression const * sep) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_normalized1(QString const * this_ptr, QString::NormalizationForm mode) {
  return new QString(this_ptr->normalized(mode));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLatin12(char const * str) {
  return new QString(QString::fromLatin1(str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf82(char const * str) {
  return new QString(QString::fromUtf8(str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromLocal8Bit2(char const * str) {
  return new QString(QString::fromLocal8Bit(str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf162(unsigned short const * arg1) {
  return new QString(QString::fromUtf16(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUcs42(unsigned int const * arg1) {
  return new QString(QString::fromUcs4(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUtf163(char16_t const * str) {
  return new QString(QString::fromUtf16(str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromUcs43(char32_t const * str) {
  return new QString(QString::fromUcs4(str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_fromWCharArray1(wchar_t const * string) {
  return new QString(QString::fromWCharArray(string));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare7(QString const * this_ptr, QString const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare8(QString const * this_ptr, QLatin1String const * other) {
  return this_ptr->compare(*other);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare9(QString const * s1, QString const * s2) {
  return QString::compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare10(QString const * s1, QLatin1String const * s2) {
  return QString::compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare11(QLatin1String const * s1, QString const * s2) {
  return QString::compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare12(QString const * this_ptr, QStringRef const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare13(QString const * s1, QStringRef const * s2) {
  return QString::compare(*s1, *s2);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QString_toShort1(QString const * this_ptr, bool * ok) {
  return this_ptr->toShort(ok);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QString_toShort2(QString const * this_ptr) {
  return this_ptr->toShort();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QString_toUShort1(QString const * this_ptr, bool * ok) {
  return this_ptr->toUShort(ok);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QString_toUShort2(QString const * this_ptr) {
  return this_ptr->toUShort();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_toInt1(QString const * this_ptr, bool * ok) {
  return this_ptr->toInt(ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QString_toInt2(QString const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QString_toUInt1(QString const * this_ptr, bool * ok) {
  return this_ptr->toUInt(ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QString_toUInt2(QString const * this_ptr) {
  return this_ptr->toUInt();
}


RITUAL_EXPORT long ctr_qt_core_ffi_QString_toLong1(QString const * this_ptr, bool * ok) {
  return this_ptr->toLong(ok);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QString_toLong2(QString const * this_ptr) {
  return this_ptr->toLong();
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QString_toULong1(QString const * this_ptr, bool * ok) {
  return this_ptr->toULong(ok);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QString_toULong2(QString const * this_ptr) {
  return this_ptr->toULong();
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QString_toLongLong1(QString const * this_ptr, bool * ok) {
  return this_ptr->toLongLong(ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QString_toLongLong2(QString const * this_ptr) {
  return this_ptr->toLongLong();
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QString_toULongLong1(QString const * this_ptr, bool * ok) {
  return this_ptr->toULongLong(ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QString_toULongLong2(QString const * this_ptr) {
  return this_ptr->toULongLong();
}


RITUAL_EXPORT float ctr_qt_core_ffi_QString_toFloat1(QString const * this_ptr) {
  return this_ptr->toFloat();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QString_toDouble1(QString const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum10(QString * this_ptr, short arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum11(QString * this_ptr, unsigned short arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum12(QString * this_ptr, int arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum13(QString * this_ptr, unsigned int arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum14(QString * this_ptr, long arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum15(QString * this_ptr, unsigned long arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum16(QString * this_ptr, qlonglong arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum17(QString * this_ptr, qulonglong arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum18(QString * this_ptr, float arg1, char f) {
  return &this_ptr->setNum(arg1, f);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum19(QString * this_ptr, float arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum20(QString * this_ptr, double arg1, char f) {
  return &this_ptr->setNum(arg1, f);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_setNum21(QString * this_ptr, double arg1) {
  return &this_ptr->setNum(arg1);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number7(int arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number8(unsigned int arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number9(long arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number10(unsigned long arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number11(qlonglong arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number12(qulonglong arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number13(double arg1, char f) {
  return new QString(QString::number(arg1, f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_number14(double arg1) {
  return new QString(QString::number(arg1));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf4(QStringRef const * this_ptr, QString const * str, int from) {
  return this_ptr->indexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf5(QStringRef const * this_ptr, QString const * str) {
  return this_ptr->indexOf(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf6(QStringRef const * this_ptr, QChar const * ch, int from) {
  return this_ptr->indexOf(*ch, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf7(QStringRef const * this_ptr, QChar const * ch) {
  return this_ptr->indexOf(*ch);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf8(QStringRef const * this_ptr, QLatin1String const * str, int from) {
  return this_ptr->indexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf9(QStringRef const * this_ptr, QLatin1String const * str) {
  return this_ptr->indexOf(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf10(QStringRef const * this_ptr, QStringRef const * str, int from) {
  return this_ptr->indexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf11(QStringRef const * this_ptr, QStringRef const * str) {
  return this_ptr->indexOf(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf4(QStringRef const * this_ptr, QString const * str, int from) {
  return this_ptr->lastIndexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf5(QStringRef const * this_ptr, QString const * str) {
  return this_ptr->lastIndexOf(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf6(QStringRef const * this_ptr, QChar const * ch, int from) {
  return this_ptr->lastIndexOf(*ch, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf7(QStringRef const * this_ptr, QChar const * ch) {
  return this_ptr->lastIndexOf(*ch);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf8(QStringRef const * this_ptr, QLatin1String const * str, int from) {
  return this_ptr->lastIndexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf9(QStringRef const * this_ptr, QLatin1String const * str) {
  return this_ptr->lastIndexOf(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf10(QStringRef const * this_ptr, QStringRef const * str, int from) {
  return this_ptr->lastIndexOf(*str, from);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf11(QStringRef const * this_ptr, QStringRef const * str) {
  return this_ptr->lastIndexOf(*str);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains4(QStringRef const * this_ptr, QString const * str) {
  return this_ptr->contains(*str);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains5(QStringRef const * this_ptr, QChar const * ch) {
  return this_ptr->contains(*ch);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains6(QStringRef const * this_ptr, QLatin1String const * str) {
  return this_ptr->contains(*str);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains7(QStringRef const * this_ptr, QStringRef const * str) {
  return this_ptr->contains(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count4(QStringRef const * this_ptr, QString const * s) {
  return this_ptr->count(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count5(QStringRef const * this_ptr, QChar const * c) {
  return this_ptr->count(*c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_count6(QStringRef const * this_ptr, QStringRef const * s) {
  return this_ptr->count(*s);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split2(QStringRef const * this_ptr, QString const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split3(QStringRef const * this_ptr, QString const * sep) {
  return new QVector< QStringRef >(this_ptr->split(*sep));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split4(QStringRef const * this_ptr, QChar const * sep, QString::SplitBehavior behavior) {
  return new QVector< QStringRef >(this_ptr->split(*sep, behavior));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split5(QStringRef const * this_ptr, QChar const * sep) {
  return new QVector< QStringRef >(this_ptr->split(*sep));
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_mid1(QStringRef const * this_ptr, int pos) {
  return new QStringRef(this_ptr->mid(pos));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith4(QStringRef const * this_ptr, QString const * s) {
  return this_ptr->startsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith5(QStringRef const * this_ptr, QLatin1String const * s) {
  return this_ptr->startsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith6(QStringRef const * this_ptr, QChar const * c) {
  return this_ptr->startsWith(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith7(QStringRef const * this_ptr, QStringRef const * c) {
  return this_ptr->startsWith(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith4(QStringRef const * this_ptr, QString const * s) {
  return this_ptr->endsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith5(QStringRef const * this_ptr, QLatin1String const * s) {
  return this_ptr->endsWith(*s);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith6(QStringRef const * this_ptr, QChar const * c) {
  return this_ptr->endsWith(*c);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith7(QStringRef const * this_ptr, QStringRef const * c) {
  return this_ptr->endsWith(*c);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare7(QStringRef const * this_ptr, QString const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare8(QStringRef const * this_ptr, QStringRef const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare9(QStringRef const * this_ptr, QLatin1String const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare10(QStringRef const * this_ptr, QByteArray const * s) {
  return this_ptr->compare(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare11(QStringRef const * s1, QString const * s2) {
  return QStringRef::compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare12(QStringRef const * s1, QStringRef const * s2) {
  return QStringRef::compare(*s1, *s2);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_compare13(QStringRef const * s1, QLatin1String const * s2) {
  return QStringRef::compare(*s1, *s2);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QStringRef_toShort1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toShort(ok);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QStringRef_toShort2(QStringRef const * this_ptr) {
  return this_ptr->toShort();
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QStringRef_toUShort1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toUShort(ok);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QStringRef_toUShort2(QStringRef const * this_ptr) {
  return this_ptr->toUShort();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_toInt1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toInt(ok);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_toInt2(QStringRef const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QStringRef_toUInt1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toUInt(ok);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QStringRef_toUInt2(QStringRef const * this_ptr) {
  return this_ptr->toUInt();
}


RITUAL_EXPORT long ctr_qt_core_ffi_QStringRef_toLong1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toLong(ok);
}


RITUAL_EXPORT long ctr_qt_core_ffi_QStringRef_toLong2(QStringRef const * this_ptr) {
  return this_ptr->toLong();
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QStringRef_toULong1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toULong(ok);
}


RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QStringRef_toULong2(QStringRef const * this_ptr) {
  return this_ptr->toULong();
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QStringRef_toLongLong1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toLongLong(ok);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QStringRef_toLongLong2(QStringRef const * this_ptr) {
  return this_ptr->toLongLong();
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QStringRef_toULongLong1(QStringRef const * this_ptr, bool * ok) {
  return this_ptr->toULongLong(ok);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QStringRef_toULongLong2(QStringRef const * this_ptr) {
  return this_ptr->toULongLong();
}


RITUAL_EXPORT float ctr_qt_core_ffi_QStringRef_toFloat1(QStringRef const * this_ptr) {
  return this_ptr->toFloat();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QStringRef_toDouble1(QStringRef const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHashBits1(void const * p, unsigned long size) {
  return qHashBits(p, size);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash73(char key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash74(unsigned char key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash75(signed char key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash76(unsigned short key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash77(short key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash78(unsigned int key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash79(int key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash80(unsigned long key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash81(long key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash82(quint64 key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash83(qint64 key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash84(float key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash85(double key) {
  return qHash(key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash87(QChar const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash88(QByteArray const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash89(QString const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash90(QStringRef const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash91(QBitArray const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash92(QLatin1String const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash93(QRegExp const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_QRegExp3(QString const * pattern, Qt::CaseSensitivity cs) {
  return new QRegExp(*pattern, cs);
}


RITUAL_EXPORT QRegExp * ctr_qt_core_ffi_QRegExp_QRegExp4(QString const * pattern) {
  return new QRegExp(*pattern);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_indexIn1(QRegExp const * this_ptr, QString const * str, int offset) {
  return this_ptr->indexIn(*str, offset);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_indexIn2(QRegExp const * this_ptr, QString const * str) {
  return this_ptr->indexIn(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_lastIndexIn1(QRegExp const * this_ptr, QString const * str, int offset) {
  return this_ptr->lastIndexIn(*str, offset);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_lastIndexIn2(QRegExp const * this_ptr, QString const * str) {
  return this_ptr->lastIndexIn(*str);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_cap2(QRegExp const * this_ptr) {
  return new QString(this_ptr->cap());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegExp_cap3(QRegExp * this_ptr) {
  return new QString(this_ptr->cap());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_pos2(QRegExp const * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegExp_pos3(QRegExp * this_ptr) {
  return this_ptr->pos();
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher4(QString const * pattern) {
  return new QStringMatcher(*pattern);
}


RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher5(QChar const * uc, int len) {
  return new QStringMatcher(uc, len);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringMatcher_indexIn2(QStringMatcher const * this_ptr, QString const * str) {
  return this_ptr->indexIn(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringMatcher_indexIn3(QStringMatcher const * this_ptr, QChar const * str, int length) {
  return this_ptr->indexIn(str, length);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains1(QStringList const * this_ptr, QString const * str) {
  return this_ptr->contains(*str);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf3(QStringList const * this_ptr, QRegExp const * rx) {
  return this_ptr->indexOf(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf3(QStringList const * this_ptr, QRegExp const * rx) {
  return this_ptr->lastIndexOf(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf4(QStringList const * this_ptr, QRegExp * rx) {
  return this_ptr->indexOf(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf4(QStringList const * this_ptr, QRegExp * rx) {
  return this_ptr->lastIndexOf(*rx);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf5(QStringList const * this_ptr, QRegularExpression const * re) {
  return this_ptr->indexOf(*re);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf5(QStringList const * this_ptr, QRegularExpression const * re) {
  return this_ptr->lastIndexOf(*re);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_create2(int type) {
  return QMetaType::create(type);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_create3(QMetaType const * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_QMetaType_construct2(QMetaType const * this_ptr, void * where) {
  return this_ptr->construct(where);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QObject_startTimer1(QObject * this_ptr, int interval) {
  return this_ptr->startTimer(interval);
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QObject_connect3(QObject const * sender, char const * signal, QObject const * receiver, char const * member) {
  return new QMetaObject::Connection(QObject::connect(sender, signal, receiver, member));
}


RITUAL_EXPORT QMetaObject::Connection * ctr_qt_core_ffi_QObject_connect4(QObject const * sender, QMetaMethod const * signal, QObject const * receiver, QMetaMethod const * method) {
  return new QMetaObject::Connection(QObject::connect(sender, *signal, receiver, *method));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect5(QObject const * this_ptr, char const * signal, QObject const * receiver) {
  return this_ptr->disconnect(signal, receiver);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect6(QObject const * this_ptr, char const * signal) {
  return this_ptr->disconnect(signal);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect7(QObject const * this_ptr) {
  return this_ptr->disconnect();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QObject_disconnect8(QObject const * this_ptr, QObject const * receiver) {
  return this_ptr->disconnect(receiver);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractAnimation_start1(QAbstractAnimation * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QEventLoop_processEvents2(QEventLoop * this_ptr) {
  return this_ptr->processEvents();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEventLoop_exec1(QEventLoop * this_ptr) {
  return this_ptr->exec();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QEventLoop_exit1(QEventLoop * this_ptr) {
  this_ptr->exit();
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_QAbstractEventDispatcher_instance1() {
  return QAbstractEventDispatcher::instance();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVariant_toInt1(QVariant const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QVariant_toUInt1(QVariant const * this_ptr) {
  return this_ptr->toUInt();
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QVariant_toLongLong1(QVariant const * this_ptr) {
  return this_ptr->toLongLong();
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QVariant_toULongLong1(QVariant const * this_ptr) {
  return this_ptr->toULongLong();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QVariant_toDouble1(QVariant const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT float ctr_qt_core_ffi_QVariant_toFloat1(QVariant const * this_ptr) {
  return this_ptr->toFloat();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QVariant_toReal1(QVariant const * this_ptr) {
  return this_ptr->toReal();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QModelIndex_data1(QModelIndex const * this_ptr) {
  return new QVariant(this_ptr->data());
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash94(QPersistentModelIndex const * index) {
  return qHash(*index);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QPersistentModelIndex_data1(QPersistentModelIndex const * this_ptr) {
  return new QVariant(this_ptr->data());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_hasIndex1(QAbstractItemModel const * this_ptr, int row, int column) {
  return this_ptr->hasIndex(row, column);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractItemModel_index1(QAbstractItemModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_rowCount1(QAbstractItemModel const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QAbstractItemModel_columnCount1(QAbstractItemModel const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_hasChildren1(QAbstractItemModel const * this_ptr) {
  return this_ptr->hasChildren();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractItemModel_data1(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return new QVariant(this_ptr->data(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_setData1(QAbstractItemModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractItemModel_headerData1(QAbstractItemModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_setHeaderData1(QAbstractItemModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value) {
  return this_ptr->setHeaderData(section, orientation, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertRows1(QAbstractItemModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertColumns1(QAbstractItemModel * this_ptr, int column, int count) {
  return this_ptr->insertColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeRows1(QAbstractItemModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeColumns1(QAbstractItemModel * this_ptr, int column, int count) {
  return this_ptr->removeColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertRow1(QAbstractItemModel * this_ptr, int row) {
  return this_ptr->insertRow(row);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_insertColumn1(QAbstractItemModel * this_ptr, int column) {
  return this_ptr->insertColumn(column);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeRow1(QAbstractItemModel * this_ptr, int row) {
  return this_ptr->removeRow(row);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_removeColumn1(QAbstractItemModel * this_ptr, int column) {
  return this_ptr->removeColumn(column);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractItemModel_sort1(QAbstractItemModel * this_ptr, int column) {
  this_ptr->sort(column);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QAbstractItemModel_match1(QAbstractItemModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QAbstractItemModel_match2(QAbstractItemModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractTableModel_index1(QAbstractTableModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractListModel_index1(QAbstractListModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QAbstractListModel_index2(QAbstractListModel const * this_ptr, int row) {
  return new QModelIndex(this_ptr->index(row));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractProxyModel_data1(QAbstractProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QVariant(this_ptr->data(*proxyIndex));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QAbstractProxyModel_headerData1(QAbstractProxyModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_setData1(QAbstractProxyModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_setHeaderData1(QAbstractProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value) {
  return this_ptr->setHeaderData(section, orientation, *value);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QAbstractProxyModel_sort1(QAbstractProxyModel * this_ptr, int column) {
  this_ptr->sort(column);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractProxyModel_hasChildren1(QAbstractProxyModel const * this_ptr) {
  return this_ptr->hasChildren();
}


RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_QBitArray4(int size) {
  return new QBitArray(size);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QBitArray_fill2(QBitArray * this_ptr, bool val) {
  return this_ptr->fill(val);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QIODevice_readLine2(QIODevice * this_ptr) {
  return new QByteArray(this_ptr->readLine());
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_QBuffer_QBuffer3(QByteArray * buf) {
  return new QBuffer(buf);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArrayMatcher_indexIn2(QByteArrayMatcher const * this_ptr, QByteArray const * ba) {
  return this_ptr->indexIn(*ba);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QByteArrayMatcher_indexIn3(QByteArrayMatcher const * this_ptr, char const * str, int len) {
  return this_ptr->indexIn(str, len);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash95(QLocale const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_QLocale5(QLocale::Language language) {
  return new QLocale(language);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toShort(*s);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toUShort(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toInt(*s);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toUInt(*s);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toLongLong(*s);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toULongLong(*s);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toFloat(*s);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble2(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toDouble(*s);
}


RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toShort(*s);
}


RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toUShort(*s);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toInt(*s);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toUInt(*s);
}


RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toLongLong(*s);
}


RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toULongLong(*s);
}


RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toFloat(*s);
}


RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble3(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toDouble(*s);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString14(QLocale const * this_ptr, double i, char f) {
  return new QString(this_ptr->toString(i, f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString15(QLocale const * this_ptr, double i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString16(QLocale const * this_ptr, float i, char f) {
  return new QString(this_ptr->toString(i, f));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString17(QLocale const * this_ptr, float i) {
  return new QString(this_ptr->toString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString18(QLocale const * this_ptr, QDate const * date) {
  return new QString(this_ptr->toString(*date));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString19(QLocale const * this_ptr, QTime const * time) {
  return new QString(this_ptr->toString(*time));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString20(QLocale const * this_ptr, QDateTime const * dateTime) {
  return new QString(this_ptr->toString(*dateTime));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dateFormat1(QLocale const * this_ptr) {
  return new QString(this_ptr->dateFormat());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_timeFormat1(QLocale const * this_ptr) {
  return new QString(this_ptr->timeFormat());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dateTimeFormat1(QLocale const * this_ptr) {
  return new QString(this_ptr->dateTimeFormat());
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLocale_toDate2(QLocale const * this_ptr, QString const * string) {
  return new QDate(this_ptr->toDate(*string));
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QLocale_toTime2(QLocale const * this_ptr, QString const * string) {
  return new QTime(this_ptr->toTime(*string));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QLocale_toDateTime2(QLocale const * this_ptr, QString const * string) {
  return new QDateTime(this_ptr->toDateTime(*string));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_monthName1(QLocale const * this_ptr, int arg1) {
  return new QString(this_ptr->monthName(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_standaloneMonthName1(QLocale const * this_ptr, int arg1) {
  return new QString(this_ptr->standaloneMonthName(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_dayName1(QLocale const * this_ptr, int arg1) {
  return new QString(this_ptr->dayName(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_standaloneDayName1(QLocale const * this_ptr, int arg1) {
  return new QString(this_ptr->standaloneDayName(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_currencySymbol1(QLocale const * this_ptr) {
  return new QString(this_ptr->currencySymbol());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString10(QLocale const * this_ptr, qlonglong arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString11(QLocale const * this_ptr, qulonglong arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString12(QLocale const * this_ptr, short arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString13(QLocale const * this_ptr, unsigned short arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString14(QLocale const * this_ptr, int arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString15(QLocale const * this_ptr, unsigned int arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString16(QLocale const * this_ptr, double arg1) {
  return new QString(this_ptr->toCurrencyString(arg1));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toCurrencyString17(QLocale const * this_ptr, float i) {
  return new QString(this_ptr->toCurrencyString(i));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_quoteString2(QLocale const * this_ptr, QString const * str) {
  return new QString(this_ptr->quoteString(*str));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_quoteString3(QLocale const * this_ptr, QStringRef const * str) {
  return new QString(this_ptr->quoteString(*str));
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption6(QString const * name, QString const * description, QString const * valueName) {
  return new QCommandLineOption(*name, *description, *valueName);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption7(QString const * name, QString const * description) {
  return new QCommandLineOption(*name, *description);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption8(QStringList const * names, QString const * description, QString const * valueName) {
  return new QCommandLineOption(*names, *description, *valueName);
}


RITUAL_EXPORT QCommandLineOption * ctr_qt_core_ffi_QCommandLineOption_QCommandLineOption9(QStringList const * names, QString const * description) {
  return new QCommandLineOption(*names, *description);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QEvent_registerEventType1() {
  return QEvent::registerEventType();
}


RITUAL_EXPORT QCoreApplication * ctr_qt_core_ffi_QCoreApplication_QCoreApplication2(int * argc, char * * argv) {
  return new QCoreApplication(*argc, argv);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_setAttribute1(Qt::ApplicationAttribute attribute) {
  QCoreApplication::setAttribute(attribute);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_processEvents2() {
  QCoreApplication::processEvents();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_exit1() {
  QCoreApplication::exit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_postEvent1(QObject * receiver, QEvent * event) {
  QCoreApplication::postEvent(receiver, event);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_sendPostedEvents1(QObject * receiver) {
  QCoreApplication::sendPostedEvents(receiver);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_sendPostedEvents2() {
  QCoreApplication::sendPostedEvents();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCoreApplication_removePostedEvents1(QObject * receiver) {
  QCoreApplication::removePostedEvents(receiver);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_translate1(char const * context, char const * key, char const * disambiguation) {
  return new QString(QCoreApplication::translate(context, key, disambiguation));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QCoreApplication_translate2(char const * context, char const * key) {
  return new QString(QCoreApplication::translate(context, key));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_addPositionalArgument1(QCommandLineParser * this_ptr, QString const * name, QString const * description) {
  this_ptr->addPositionalArgument(*name, *description);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QCommandLineParser_showHelp1(QCommandLineParser * this_ptr) {
  this_ptr->showHelp();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QDate_weekNumber1(QDate const * this_ptr) {
  return this_ptr->weekNumber();
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_shortMonthName1(int month) {
  return new QString(QDate::shortMonthName(month));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_shortDayName1(int weekday) {
  return new QString(QDate::shortDayName(weekday));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_longMonthName1(int month) {
  return new QString(QDate::longMonthName(month));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_longDayName1(int weekday) {
  return new QString(QDate::longDayName(weekday));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString2(QDate const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_fromString2(QString const * s) {
  return new QDate(QDate::fromString(*s));
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_QTime3(int h, int m, int s) {
  return new QTime(h, m, s);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_QTime4(int h, int m) {
  return new QTime(h, m);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTime_toString2(QTime const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_setHMS1(QTime * this_ptr, int h, int m, int s) {
  return this_ptr->setHMS(h, m, s);
}


RITUAL_EXPORT QTime * ctr_qt_core_ffi_QTime_fromString2(QString const * s) {
  return new QTime(QTime::fromString(*s));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTime_isValid2(int h, int m, int s) {
  return QTime::isValid(h, m, s);
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_QDateTime7(QDate const * arg1, QTime const * arg2) {
  return new QDateTime(*arg1, *arg2);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QDateTime_toString2(QDateTime const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromString2(QString const * s) {
  return new QDateTime(QDateTime::fromString(*s));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromTime_t3(unsigned int secsSince1Jan1970UTC, Qt::TimeSpec spec) {
  return new QDateTime(QDateTime::fromTime_t(secsSince1Jan1970UTC, spec));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromMSecsSinceEpoch3(qint64 msecs, Qt::TimeSpec spec) {
  return new QDateTime(QDateTime::fromMSecsSinceEpoch(msecs, spec));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromSecsSinceEpoch2(qint64 secs, Qt::TimeSpec spe) {
  return new QDateTime(QDateTime::fromSecsSinceEpoch(secs, spe));
}


RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromSecsSinceEpoch3(qint64 secs) {
  return new QDateTime(QDateTime::fromSecsSinceEpoch(secs));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash96(QDateTime const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash97(QDate const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash98(QTime const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer5(QDeadlineTimer::ForeverConstant arg1) {
  return new QDeadlineTimer(arg1);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_QDeadlineTimer6(qint64 msecs) {
  return new QDeadlineTimer(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setRemainingTime1(QDeadlineTimer * this_ptr, qint64 msecs) {
  this_ptr->setRemainingTime(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseRemainingTime1(QDeadlineTimer * this_ptr, qint64 secs, qint64 nsecs) {
  this_ptr->setPreciseRemainingTime(secs, nsecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseRemainingTime2(QDeadlineTimer * this_ptr, qint64 secs) {
  this_ptr->setPreciseRemainingTime(secs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setDeadline1(QDeadlineTimer * this_ptr, qint64 msecs) {
  this_ptr->setDeadline(msecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseDeadline1(QDeadlineTimer * this_ptr, qint64 secs, qint64 nsecs) {
  this_ptr->setPreciseDeadline(secs, nsecs);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QDeadlineTimer_setPreciseDeadline2(QDeadlineTimer * this_ptr, qint64 secs) {
  this_ptr->setPreciseDeadline(secs);
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_core_ffi_QDeadlineTimer_current1() {
  return new QDeadlineTimer(QDeadlineTimer::current());
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream5(QString * string) {
  return new QTextStream(string);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream6(QByteArray * array) {
  return new QTextStream(array);
}


RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_QTextStream7(QByteArray const * array) {
  return new QTextStream(*array);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QTextStream_setString1(QTextStream * this_ptr, QString * string) {
  this_ptr->setString(string);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTextStream_readLine1(QTextStream * this_ptr) {
  return new QString(this_ptr->readLine());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTextStream_readLineInto1(QTextStream * this_ptr, QString * line) {
  return this_ptr->readLineInto(line);
}


RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_maybeQuote1(QDebug * this_ptr) {
  return &this_ptr->maybeQuote();
}


RITUAL_EXPORT unsigned char * ctr_qt_core_ffi_QFileDevice_map1(QFileDevice * this_ptr, qint64 offset, qint64 size) {
  return this_ptr->map(offset, size);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QFile_open2(QFile * this_ptr, int fd, int ioFlags) {
  return this_ptr->open(fd, QFlags< QIODevice::OpenModeFlag >(ioFlags));
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir4(QString const * path, QString const * nameFilter, int sort) {
  return new QDir(*path, *nameFilter, QFlags< QDir::SortFlag >(sort));
}


RITUAL_EXPORT QDir * ctr_qt_core_ffi_QDir_QDir5(QString const * path, QString const * nameFilter) {
  return new QDir(*path, *nameFilter);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QDir_isEmpty1(QDir const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList2(QDir const * this_ptr, int filters) {
  return new QStringList(this_ptr->entryList(QFlags< QDir::Filter >(filters)));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList3(QDir const * this_ptr) {
  return new QStringList(this_ptr->entryList());
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList4(QDir const * this_ptr, QStringList const * nameFilters, int filters) {
  return new QStringList(this_ptr->entryList(*nameFilters, QFlags< QDir::Filter >(filters)));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QDir_entryList5(QDir const * this_ptr, QStringList const * nameFilters) {
  return new QStringList(this_ptr->entryList(*nameFilters));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList2(QDir const * this_ptr, int filters) {
  return new QList< QFileInfo >(this_ptr->entryInfoList(QFlags< QDir::Filter >(filters)));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList3(QDir const * this_ptr) {
  return new QList< QFileInfo >(this_ptr->entryInfoList());
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList4(QDir const * this_ptr, QStringList const * nameFilters, int filters) {
  return new QList< QFileInfo >(this_ptr->entryInfoList(*nameFilters, QFlags< QDir::Filter >(filters)));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QDir_entryInfoList5(QDir const * this_ptr, QStringList const * nameFilters) {
  return new QList< QFileInfo >(this_ptr->entryInfoList(*nameFilters));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator5(QDir const * dir) {
  return new QDirIterator(*dir);
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator6(QString const * path) {
  return new QDirIterator(*path);
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator7(QString const * path, int filter) {
  return new QDirIterator(*path, QFlags< QDir::Filter >(filter));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator8(QString const * path, QStringList const * nameFilters, int filters) {
  return new QDirIterator(*path, *nameFilters, QFlags< QDir::Filter >(filters));
}


RITUAL_EXPORT QDirIterator * ctr_qt_core_ffi_QDirIterator_QDirIterator9(QString const * path, QStringList const * nameFilters) {
  return new QDirIterator(*path, *nameFilters);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_QEventTransition_QEventTransition3(QObject * object, QEvent::Type type) {
  return new QEventTransition(object, type);
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_QFileSystemWatcher_QFileSystemWatcher4(QStringList const * paths) {
  return new QFileSystemWatcher(*paths);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMutex_tryLock1(QMutex * this_ptr) {
  return this_ptr->tryLock();
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_QHistoryState_QHistoryState3(QHistoryState::HistoryType type) {
  return new QHistoryState(type);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIdentityProxyModel_columnCount1(QIdentityProxyModel const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QIdentityProxyModel_index1(QIdentityProxyModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QIdentityProxyModel_rowCount1(QIdentityProxyModel const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QIdentityProxyModel_headerData1(QIdentityProxyModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QIdentityProxyModel_match1(QIdentityProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QIdentityProxyModel_match2(QIdentityProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_insertColumns1(QIdentityProxyModel * this_ptr, int column, int count) {
  return this_ptr->insertColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_insertRows1(QIdentityProxyModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_removeColumns1(QIdentityProxyModel * this_ptr, int column, int count) {
  return this_ptr->removeColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QIdentityProxyModel_removeRows1(QIdentityProxyModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionModel_selectedRows1(QItemSelectionModel const * this_ptr) {
  return new QList< QModelIndex >(this_ptr->selectedRows());
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QItemSelectionModel_selectedColumns1(QItemSelectionModel const * this_ptr) {
  return new QList< QModelIndex >(this_ptr->selectedColumns());
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonValue_toBool1(QJsonValue const * this_ptr) {
  return this_ptr->toBool();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QJsonValue_toInt1(QJsonValue const * this_ptr) {
  return this_ptr->toInt();
}


RITUAL_EXPORT double ctr_qt_core_ffi_QJsonValue_toDouble1(QJsonValue const * this_ptr) {
  return this_ptr->toDouble();
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromRawData1(char const * data, int size) {
  return new QJsonDocument(QJsonDocument::fromRawData(data, size));
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromBinaryData1(QByteArray const * data) {
  return new QJsonDocument(QJsonDocument::fromBinaryData(*data));
}


RITUAL_EXPORT QJsonDocument * ctr_qt_core_ffi_QJsonDocument_fromJson1(QByteArray const * json) {
  return new QJsonDocument(QJsonDocument::fromJson(*json));
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary5(QString const * fileName) {
  return new QLibrary(*fileName);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary6(QString const * fileName, int verNum) {
  return new QLibrary(*fileName, verNum);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_QLibrary_QLibrary7(QString const * fileName, QString const * version) {
  return new QLibrary(*fileName, *version);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash99(QVersionNumber const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString1(QString const * string) {
  return new QVersionNumber(QVersionNumber::fromString(*string));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QLockFile_tryLock1(QLockFile * this_ptr) {
  return this_ptr->tryLock();
}


RITUAL_EXPORT QMessageAuthenticationCode * ctr_qt_core_ffi_QMessageAuthenticationCode_QMessageAuthenticationCode2(QCryptographicHash::Algorithm method) {
  return new QMessageAuthenticationCode(method);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_keyToValue1(QMetaEnum const * this_ptr, char const * key) {
  return this_ptr->keyToValue(key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMetaEnum_keysToValue1(QMetaEnum const * this_ptr, char const * keys) {
  return this_ptr->keysToValue(keys);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isDesignable1(QMetaProperty const * this_ptr) {
  return this_ptr->isDesignable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isScriptable1(QMetaProperty const * this_ptr) {
  return this_ptr->isScriptable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isStored1(QMetaProperty const * this_ptr) {
  return this_ptr->isStored();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isEditable1(QMetaProperty const * this_ptr) {
  return this_ptr->isEditable();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QMetaProperty_isUser1(QMetaProperty const * this_ptr) {
  return this_ptr->isUser();
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash100(QMimeType const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFile2(QMimeDatabase const * this_ptr, QString const * fileName) {
  return new QMimeType(this_ptr->mimeTypeForFile(*fileName));
}


RITUAL_EXPORT QMimeType * ctr_qt_core_ffi_QMimeDatabase_mimeTypeForFile3(QMimeDatabase const * this_ptr, QFileInfo const * fileInfo) {
  return new QMimeType(this_ptr->mimeTypeForFile(*fileInfo));
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_QOperatingSystemVersion2(QOperatingSystemVersion::OSType osType, int vmajor, int vminor) {
  return new QOperatingSystemVersion(osType, vmajor, vminor);
}


RITUAL_EXPORT QOperatingSystemVersion * ctr_qt_core_ffi_QOperatingSystemVersion_QOperatingSystemVersion3(QOperatingSystemVersion::OSType osType, int vmajor) {
  return new QOperatingSystemVersion(osType, vmajor);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_QPauseAnimation_QPauseAnimation3(int msecs) {
  return new QPauseAnimation(msecs);
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_QPluginLoader_QPluginLoader3(QString const * fileName) {
  return new QPluginLoader(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QProcessEnvironment_value1(QProcessEnvironment const * this_ptr, QString const * name) {
  return new QString(this_ptr->value(*name));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start3(QProcess * this_ptr, QString const * program, QStringList const * arguments) {
  this_ptr->start(*program, *arguments);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start4(QProcess * this_ptr, QString const * command) {
  this_ptr->start(*command);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_start5(QProcess * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_open1(QProcess * this_ptr) {
  return this_ptr->open();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardOutputFile1(QProcess * this_ptr, QString const * fileName) {
  this_ptr->setStandardOutputFile(*fileName);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QProcess_setStandardErrorFile1(QProcess * this_ptr, QString const * fileName) {
  this_ptr->setStandardErrorFile(*fileName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForStarted1(QProcess * this_ptr) {
  return this_ptr->waitForStarted();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForReadyRead1(QProcess * this_ptr) {
  return this_ptr->waitForReadyRead();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForBytesWritten1(QProcess * this_ptr) {
  return this_ptr->waitForBytesWritten();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_waitForFinished1(QProcess * this_ptr) {
  return this_ptr->waitForFinished();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached3(QString const * program, QStringList const * arguments, QString const * workingDirectory) {
  return QProcess::startDetached(*program, *arguments, *workingDirectory);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_QPropertyAnimation_QPropertyAnimation3(QObject * target, QByteArray const * propertyName) {
  return new QPropertyAnimation(target, *propertyName);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains4(QRect const * this_ptr, QRect const * r) {
  return this_ptr->contains(*r);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QRect_contains5(QRect const * this_ptr, QPoint const * p) {
  return this_ptr->contains(*p);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash101(QRegularExpression const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QRegularExpression_QRegularExpression3(QString const * pattern) {
  return new QRegularExpression(*pattern);
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match2(QRegularExpression const * this_ptr, QString const * subject, int offset, QRegularExpression::MatchType matchType) {
  return new QRegularExpressionMatch(this_ptr->match(*subject, offset, matchType));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match3(QRegularExpression const * this_ptr, QString const * subject, int offset) {
  return new QRegularExpressionMatch(this_ptr->match(*subject, offset));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match4(QRegularExpression const * this_ptr, QString const * subject) {
  return new QRegularExpressionMatch(this_ptr->match(*subject));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match5(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset, QRegularExpression::MatchType matchType) {
  return new QRegularExpressionMatch(this_ptr->match(*subjectRef, offset, matchType));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match6(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset) {
  return new QRegularExpressionMatch(this_ptr->match(*subjectRef, offset));
}


RITUAL_EXPORT QRegularExpressionMatch * ctr_qt_core_ffi_QRegularExpression_match7(QRegularExpression const * this_ptr, QStringRef const * subjectRef) {
  return new QRegularExpressionMatch(this_ptr->match(*subjectRef));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch2(QRegularExpression const * this_ptr, QString const * subject, int offset, QRegularExpression::MatchType matchType) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subject, offset, matchType));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch3(QRegularExpression const * this_ptr, QString const * subject, int offset) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subject, offset));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch4(QRegularExpression const * this_ptr, QString const * subject) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subject));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch5(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset, QRegularExpression::MatchType matchType) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subjectRef, offset, matchType));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch6(QRegularExpression const * this_ptr, QStringRef const * subjectRef, int offset) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subjectRef, offset));
}


RITUAL_EXPORT QRegularExpressionMatchIterator * ctr_qt_core_ffi_QRegularExpression_globalMatch7(QRegularExpression const * this_ptr, QStringRef const * subjectRef) {
  return new QRegularExpressionMatchIterator(this_ptr->globalMatch(*subjectRef));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpressionMatch_captured2(QRegularExpressionMatch const * this_ptr) {
  return new QString(this_ptr->captured());
}


RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QRegularExpressionMatch_capturedRef2(QRegularExpressionMatch const * this_ptr) {
  return new QStringRef(this_ptr->capturedRef());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedStart2(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->capturedStart();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedLength2(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->capturedLength();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedEnd2(QRegularExpressionMatch const * this_ptr) {
  return this_ptr->capturedEnd();
}


RITUAL_EXPORT QResource * ctr_qt_core_ffi_QResource_QResource3(QString const * file) {
  return new QResource(*file);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_registerResource2(QString const * rccFilename) {
  return QResource::registerResource(*rccFilename);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_unregisterResource2(QString const * rccFilename) {
  return QResource::unregisterResource(*rccFilename);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_registerResource3(unsigned char const * rccData) {
  return QResource::registerResource(rccData);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QResource_unregisterResource3(unsigned char const * rccData) {
  return QResource::unregisterResource(rccData);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphore_acquire1(QSemaphore * this_ptr) {
  this_ptr->acquire();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSemaphore_tryAcquire2(QSemaphore * this_ptr) {
  return this_ptr->tryAcquire();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphore_release1(QSemaphore * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings6(QString const * organization, QString const * application) {
  return new QSettings(*organization, *application);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings7(QString const * organization) {
  return new QSettings(*organization);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings8(QSettings::Scope scope, QString const * organization, QString const * application) {
  return new QSettings(scope, *organization, *application);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings9(QSettings::Scope scope, QString const * organization) {
  return new QSettings(scope, *organization);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings10(QSettings::Format format, QSettings::Scope scope, QString const * organization, QString const * application) {
  return new QSettings(format, scope, *organization, *application);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings11(QSettings::Format format, QSettings::Scope scope, QString const * organization) {
  return new QSettings(format, scope, *organization);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings12(QString const * fileName, QSettings::Format format) {
  return new QSettings(*fileName, format);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_beginWriteArray1(QSettings * this_ptr, QString const * prefix) {
  this_ptr->beginWriteArray(*prefix);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSettings_value1(QSettings const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_QSharedMemory_QSharedMemory3(QString const * key) {
  return new QSharedMemory(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_create1(QSharedMemory * this_ptr, int size) {
  return this_ptr->create(size);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSharedMemory_attach1(QSharedMemory * this_ptr) {
  return this_ptr->attach();
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_QSignalTransition_QSignalTransition3(QObject const * sender, char const * signal) {
  return new QSignalTransition(sender, signal);
}


RITUAL_EXPORT QSocketNotifier * ctr_qt_core_ffi_QSocketNotifier_QSocketNotifier2(qintptr socket, QSocketNotifier::Type arg2) {
  return new QSocketNotifier(socket, arg2);
}


RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QSortFilterProxyModel_index1(QSortFilterProxyModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_rowCount1(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT int ctr_qt_core_ffi_QSortFilterProxyModel_columnCount1(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_hasChildren1(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->hasChildren();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSortFilterProxyModel_data1(QSortFilterProxyModel const * this_ptr, QModelIndex const * index) {
  return new QVariant(this_ptr->data(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_setData1(QSortFilterProxyModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QSortFilterProxyModel_headerData1(QSortFilterProxyModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_setHeaderData1(QSortFilterProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value) {
  return this_ptr->setHeaderData(section, orientation, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_insertRows1(QSortFilterProxyModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_insertColumns1(QSortFilterProxyModel * this_ptr, int column, int count) {
  return this_ptr->insertColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_removeRows1(QSortFilterProxyModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_removeColumns1(QSortFilterProxyModel * this_ptr, int column, int count) {
  return this_ptr->removeColumns(column, count);
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QSortFilterProxyModel_match1(QSortFilterProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value, int hits) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value, hits));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QSortFilterProxyModel_match2(QSortFilterProxyModel const * this_ptr, QModelIndex const * start, int role, QVariant const * value) {
  return new QList< QModelIndex >(this_ptr->match(*start, role, *value));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_sort1(QSortFilterProxyModel * this_ptr, int column) {
  this_ptr->sort(column);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_locate1(QStandardPaths::StandardLocation type, QString const * fileName) {
  return new QString(QStandardPaths::locate(type, *fileName));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QStandardPaths_locateAll1(QStandardPaths::StandardLocation type, QString const * fileName) {
  return new QStringList(QStandardPaths::locateAll(type, *fileName));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QStandardPaths_findExecutable1(QString const * executableName) {
  return new QString(QStandardPaths::findExecutable(*executableName));
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_QState_QState3(QState::ChildMode childMode) {
  return new QState(childMode);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_QStateMachine_QStateMachine3(QState::ChildMode childMode) {
  return new QStateMachine(childMode);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStateMachine_postEvent1(QStateMachine * this_ptr, QEvent * event) {
  this_ptr->postEvent(event);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_QStringListModel_QStringListModel3(QStringList const * strings) {
  return new QStringListModel(*strings);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QStringListModel_rowCount1(QStringListModel const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QStringListModel_data1(QStringListModel const * this_ptr, QModelIndex const * index) {
  return new QVariant(this_ptr->data(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_setData1(QStringListModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_insertRows1(QStringListModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_removeRows1(QStringListModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QStringListModel_sort1(QStringListModel * this_ptr, int column) {
  this_ptr->sort(column);
}


RITUAL_EXPORT QSystemSemaphore * ctr_qt_core_ffi_QSystemSemaphore_QSystemSemaphore2(QString const * key, int initialValue) {
  return new QSystemSemaphore(*key, initialValue);
}


RITUAL_EXPORT QSystemSemaphore * ctr_qt_core_ffi_QSystemSemaphore_QSystemSemaphore3(QString const * key) {
  return new QSystemSemaphore(*key);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSystemSemaphore_setKey1(QSystemSemaphore * this_ptr, QString const * key, int initialValue) {
  this_ptr->setKey(*key, initialValue);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QSystemSemaphore_setKey2(QSystemSemaphore * this_ptr, QString const * key) {
  this_ptr->setKey(*key);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QSystemSemaphore_release1(QSystemSemaphore * this_ptr) {
  return this_ptr->release();
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder4(QTextBoundaryFinder::BoundaryType type, QChar const * chars, int length, unsigned char * buffer) {
  return new QTextBoundaryFinder(type, chars, length, buffer);
}


RITUAL_EXPORT QTextBoundaryFinder * ctr_qt_core_ffi_QTextBoundaryFinder_QTextBoundaryFinder5(QTextBoundaryFinder::BoundaryType type, QChar const * chars, int length) {
  return new QTextBoundaryFinder(type, chars, length);
}


RITUAL_EXPORT QTextDecoder * ctr_qt_core_ffi_QTextCodec_makeDecoder1(QTextCodec const * this_ptr) {
  return this_ptr->makeDecoder();
}


RITUAL_EXPORT QTextEncoder * ctr_qt_core_ffi_QTextCodec_makeEncoder1(QTextCodec const * this_ptr) {
  return this_ptr->makeEncoder();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_exit1(QThread * this_ptr) {
  this_ptr->exit();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThread_start1(QThread * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThread_wait1(QThread * this_ptr) {
  return this_ptr->wait();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_start1(QThreadPool * this_ptr, QRunnable * runnable) {
  this_ptr->start(runnable);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QThreadPool_waitForDone1(QThreadPool * this_ptr) {
  return this_ptr->waitForDone();
}


RITUAL_EXPORT QTimeLine * ctr_qt_core_ffi_QTimeLine_QTimeLine2(int duration) {
  return new QTimeLine(duration);
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone5(QByteArray const * zoneId, int offsetSeconds, QString const * name, QString const * abbreviation, QLocale::Country country) {
  return new QTimeZone(*zoneId, offsetSeconds, *name, *abbreviation, country);
}


RITUAL_EXPORT QTimeZone * ctr_qt_core_ffi_QTimeZone_QTimeZone6(QByteArray const * zoneId, int offsetSeconds, QString const * name, QString const * abbreviation) {
  return new QTimeZone(*zoneId, offsetSeconds, *name, *abbreviation);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName2(QTimeZone const * this_ptr, QDateTime const * atDateTime, QTimeZone::NameType nameType) {
  return new QString(this_ptr->displayName(*atDateTime, nameType));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName3(QTimeZone const * this_ptr, QDateTime const * atDateTime) {
  return new QString(this_ptr->displayName(*atDateTime));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName4(QTimeZone const * this_ptr, QTimeZone::TimeType timeType, QTimeZone::NameType nameType) {
  return new QString(this_ptr->displayName(timeType, nameType));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTimeZone_displayName5(QTimeZone const * this_ptr, QTimeZone::TimeType timeType) {
  return new QString(this_ptr->displayName(timeType));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTranslator_translate1(QTranslator const * this_ptr, char const * context, char const * sourceText, char const * disambiguation) {
  return new QString(this_ptr->translate(context, sourceText, disambiguation));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QTranslator_translate2(QTranslator const * this_ptr, char const * context, char const * sourceText) {
  return new QString(this_ptr->translate(context, sourceText));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load3(QTranslator * this_ptr, QString const * filename, QString const * directory, QString const * search_delimiters) {
  return this_ptr->load(*filename, *directory, *search_delimiters);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load4(QTranslator * this_ptr, QString const * filename, QString const * directory) {
  return this_ptr->load(*filename, *directory);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load5(QTranslator * this_ptr, QString const * filename) {
  return this_ptr->load(*filename);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load6(QTranslator * this_ptr, QLocale const * locale, QString const * filename, QString const * prefix, QString const * directory) {
  return this_ptr->load(*locale, *filename, *prefix, *directory);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load7(QTranslator * this_ptr, QLocale const * locale, QString const * filename, QString const * prefix) {
  return this_ptr->load(*locale, *filename, *prefix);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load8(QTranslator * this_ptr, QLocale const * locale, QString const * filename) {
  return this_ptr->load(*locale, *filename);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QTranslator_load9(QTranslator * this_ptr, unsigned char const * data, int len) {
  return this_ptr->load(data, len);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash102(QUrl const * url) {
  return qHash(*url);
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_QUrl4(QString const * url) {
  return new QUrl(*url);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUrl1(QUrl * this_ptr, QString const * url) {
  this_ptr->setUrl(*url);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_url1(QUrl const * this_ptr) {
  return new QString(this_ptr->url());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_toString1(QUrl const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_toDisplayString1(QUrl const * this_ptr) {
  return new QString(this_ptr->toDisplayString());
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toEncoded1(QUrl const * this_ptr) {
  return new QByteArray(this_ptr->toEncoded());
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromEncoded1(QByteArray const * url) {
  return new QUrl(QUrl::fromEncoded(*url));
}


RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QUrl_fromUserInput2(QString const * userInput, QString const * workingDirectory) {
  return new QUrl(QUrl::fromUserInput(*userInput, *workingDirectory));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setAuthority1(QUrl * this_ptr, QString const * authority) {
  this_ptr->setAuthority(*authority);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_authority1(QUrl const * this_ptr) {
  return new QString(this_ptr->authority());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUserInfo1(QUrl * this_ptr, QString const * userInfo) {
  this_ptr->setUserInfo(*userInfo);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_userInfo1(QUrl const * this_ptr) {
  return new QString(this_ptr->userInfo());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setUserName1(QUrl * this_ptr, QString const * userName) {
  this_ptr->setUserName(*userName);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_userName1(QUrl const * this_ptr) {
  return new QString(this_ptr->userName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setPassword1(QUrl * this_ptr, QString const * password) {
  this_ptr->setPassword(*password);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_password1(QUrl const * this_ptr) {
  return new QString(this_ptr->password());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setHost1(QUrl * this_ptr, QString const * host) {
  this_ptr->setHost(*host);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_host1(QUrl const * this_ptr) {
  return new QString(this_ptr->host());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_topLevelDomain1(QUrl const * this_ptr) {
  return new QString(this_ptr->topLevelDomain());
}


RITUAL_EXPORT int ctr_qt_core_ffi_QUrl_port1(QUrl const * this_ptr) {
  return this_ptr->port();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setPath1(QUrl * this_ptr, QString const * path) {
  this_ptr->setPath(*path);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_path1(QUrl const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fileName1(QUrl const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setQuery2(QUrl * this_ptr, QString const * query) {
  this_ptr->setQuery(*query);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_query1(QUrl const * this_ptr) {
  return new QString(this_ptr->query());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrl_fragment1(QUrl const * this_ptr) {
  return new QString(this_ptr->fragment());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QUrl_setFragment1(QUrl * this_ptr, QString const * fragment) {
  this_ptr->setFragment(*fragment);
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toPercentEncoding1(QString const * arg1, QByteArray const * exclude) {
  return new QByteArray(QUrl::toPercentEncoding(*arg1, *exclude));
}


RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUrl_toPercentEncoding2(QString const * arg1) {
  return new QByteArray(QUrl::toPercentEncoding(*arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QUrl_toStringList1(QList< QUrl > const * uris) {
  return new QStringList(QUrl::toStringList(*uris));
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QUrl_fromStringList1(QStringList const * uris) {
  return new QList< QUrl >(QUrl::fromStringList(*uris));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash103(QUrlQuery const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_query1(QUrlQuery const * this_ptr) {
  return new QString(this_ptr->query());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_toString1(QUrlQuery const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QUrlQuery_queryItems1(QUrlQuery const * this_ptr) {
  return new QList< QPair< QString, QString > >(this_ptr->queryItems());
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QUrlQuery_queryItemValue1(QUrlQuery const * this_ptr, QString const * key) {
  return new QString(this_ptr->queryItemValue(*key));
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QUrlQuery_allQueryItemValues1(QUrlQuery const * this_ptr, QString const * key) {
  return new QStringList(this_ptr->allQueryItemValues(*key));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash104(QUuid const * uuid) {
  return qHash(*uuid);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait2(QWaitCondition * this_ptr, QMutex * lockedMutex) {
  return this_ptr->wait(lockedMutex);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait3(QWaitCondition * this_ptr, QReadWriteLock * lockedReadWriteLock) {
  return this_ptr->wait(lockedReadWriteLock);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QXmlStreamReader_readElementText1(QXmlStreamReader * this_ptr) {
  return new QString(this_ptr->readElementText());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamReader_raiseError1(QXmlStreamReader * this_ptr) {
  this_ptr->raiseError();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeNamespace1(QXmlStreamWriter * this_ptr, QString const * namespaceUri) {
  this_ptr->writeNamespace(*namespaceUri);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QXmlStreamWriter_writeProcessingInstruction1(QXmlStreamWriter * this_ptr, QString const * target) {
  this_ptr->writeProcessingInstruction(*target);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_findChild_QObject_ptr1(QObject const * this_ptr, QString const * aName) {
  return this_ptr->findChild< QObject * >(*aName);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QObject_findChild_QObject_ptr2(QObject const * this_ptr) {
  return this_ptr->findChild< QObject * >();
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr3(QObject const * this_ptr, QString const * aName) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*aName));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr4(QObject const * this_ptr) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >());
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr5(QObject const * this_ptr, QRegExp const * re) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*re));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QObject_findChildren_QObject_ptr6(QObject const * this_ptr, QRegularExpression const * re) {
  return new QList< QObject * >(this_ptr->findChildren< QObject * >(*re));
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash105(QPair< QString, QJsonValue > const * key) {
  return qHash(*key);
}


#endif

RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash107(QPair< QString, QString > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_indexOf1(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_indexOf1(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_indexOf1(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_indexOf1(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_indexOf1(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_indexOf1(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_indexOf1(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_indexOf1(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_indexOf1(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_indexOf1(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_indexOf1(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_indexOf1(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_indexOf1(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_indexOf1(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_indexOf1(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_indexOf1(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_indexOf1(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_indexOf1(QList< int > const * this_ptr, int const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_indexOf1(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QString_lastIndexOf1(QList< QString > const * this_ptr, QString const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QItemSelectionRange_lastIndexOf1(QList< QItemSelectionRange > const * this_ptr, QItemSelectionRange const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QObject_ptr_lastIndexOf1(QList< QObject * > const * this_ptr, QObject * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QVariant_lastIndexOf1(QList< QVariant > const * this_ptr, QVariant const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QByteArray_lastIndexOf1(QList< QByteArray > const * this_ptr, QByteArray const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QModelIndex_lastIndexOf1(QList< QModelIndex > const * this_ptr, QModelIndex const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPersistentModelIndex_lastIndexOf1(QList< QPersistentModelIndex > const * this_ptr, QPersistentModelIndex const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractState_ptr_lastIndexOf1(QList< QAbstractState * > const * this_ptr, QAbstractState * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_lastIndexOf1(QList< QAbstractAnimation * > const * this_ptr, QAbstractAnimation * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_Qt_DayOfWeek_lastIndexOf1(QList< Qt::DayOfWeek > const * this_ptr, Qt::DayOfWeek const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_lastIndexOf1(QList< QLocale > const * this_ptr, QLocale const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QLocale_Country_lastIndexOf1(QList< QLocale::Country > const * this_ptr, QLocale::Country const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QFileInfo_lastIndexOf1(QList< QFileInfo > const * this_ptr, QFileInfo const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QUrl_lastIndexOf1(QList< QUrl > const * this_ptr, QUrl const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QMimeType_lastIndexOf1(QList< QMimeType > const * this_ptr, QMimeType const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QAbstractTransition_ptr_lastIndexOf1(QList< QAbstractTransition * > const * this_ptr, QAbstractTransition * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QStorageInfo_lastIndexOf1(QList< QStorageInfo > const * this_ptr, QStorageInfo const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_int_lastIndexOf1(QList< int > const * this_ptr, int const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QList_QPair_QString_QString_lastIndexOf1(QList< QPair< QString, QString > > const * this_ptr, QPair< QString, QString > const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_QList_QString_mid1(QList< QString > const * this_ptr, int pos) {
  return new QList< QString >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_QList_QItemSelectionRange_mid1(QList< QItemSelectionRange > const * this_ptr, int pos) {
  return new QList< QItemSelectionRange >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QObject * > * ctr_qt_core_ffi_QList_QObject_ptr_mid1(QList< QObject * > const * this_ptr, int pos) {
  return new QList< QObject * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QList_QVariant_mid1(QList< QVariant > const * this_ptr, int pos) {
  return new QList< QVariant >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_core_ffi_QList_QByteArray_mid1(QList< QByteArray > const * this_ptr, int pos) {
  return new QList< QByteArray >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo > * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_mid1(QList< QAbstractEventDispatcher::TimerInfo > const * this_ptr, int pos) {
  return new QList< QAbstractEventDispatcher::TimerInfo >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QModelIndex > * ctr_qt_core_ffi_QList_QModelIndex_mid1(QList< QModelIndex > const * this_ptr, int pos) {
  return new QList< QModelIndex >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QPersistentModelIndex > * ctr_qt_core_ffi_QList_QPersistentModelIndex_mid1(QList< QPersistentModelIndex > const * this_ptr, int pos) {
  return new QList< QPersistentModelIndex >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QAbstractState * > * ctr_qt_core_ffi_QList_QAbstractState_ptr_mid1(QList< QAbstractState * > const * this_ptr, int pos) {
  return new QList< QAbstractState * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QAbstractAnimation * > * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_mid1(QList< QAbstractAnimation * > const * this_ptr, int pos) {
  return new QList< QAbstractAnimation * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< Qt::DayOfWeek > * ctr_qt_core_ffi_QList_Qt_DayOfWeek_mid1(QList< Qt::DayOfWeek > const * this_ptr, int pos) {
  return new QList< Qt::DayOfWeek >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QLocale > * ctr_qt_core_ffi_QList_QLocale_mid1(QList< QLocale > const * this_ptr, int pos) {
  return new QList< QLocale >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QLocale::Country > * ctr_qt_core_ffi_QList_QLocale_Country_mid1(QList< QLocale::Country > const * this_ptr, int pos) {
  return new QList< QLocale::Country >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QCommandLineOption > * ctr_qt_core_ffi_QList_QCommandLineOption_mid1(QList< QCommandLineOption > const * this_ptr, int pos) {
  return new QList< QCommandLineOption >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QFileInfo > * ctr_qt_core_ffi_QList_QFileInfo_mid1(QList< QFileInfo > const * this_ptr, int pos) {
  return new QList< QFileInfo >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QUrl > * ctr_qt_core_ffi_QList_QUrl_mid1(QList< QUrl > const * this_ptr, int pos) {
  return new QList< QUrl >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QMimeType > * ctr_qt_core_ffi_QList_QMimeType_mid1(QList< QMimeType > const * this_ptr, int pos) {
  return new QList< QMimeType >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QAbstractTransition * > * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_mid1(QList< QAbstractTransition * > const * this_ptr, int pos) {
  return new QList< QAbstractTransition * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QStorageInfo > * ctr_qt_core_ffi_QList_QStorageInfo_mid1(QList< QStorageInfo > const * this_ptr, int pos) {
  return new QList< QStorageInfo >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< int > * ctr_qt_core_ffi_QList_int_mid1(QList< int > const * this_ptr, int pos) {
  return new QList< int >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QPair< QString, QString > > * ctr_qt_core_ffi_QList_QPair_QString_QString_mid1(QList< QPair< QString, QString > > const * this_ptr, int pos) {
  return new QList< QPair< QString, QString > >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash108(QList< QString > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash109(QList< QItemSelectionRange > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash110(QList< QObject * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash112(QList< QByteArray > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash114(QList< QModelIndex > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash115(QList< QPersistentModelIndex > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash116(QList< QAbstractState * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash117(QList< QAbstractAnimation * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash118(QList< Qt::DayOfWeek > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash119(QList< QLocale > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash120(QList< QLocale::Country > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash123(QList< QUrl > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash124(QList< QMimeType > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash125(QList< QAbstractTransition * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash127(QList< int > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash128(QList< QPair< QString, QString > > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QMap_QString_QVariant_key1(QMap< QString, QVariant > const * this_ptr, QVariant const * value) {
  return new QString(this_ptr->key(*value));
}


RITUAL_EXPORT int ctr_qt_core_ffi_QMap_int_QVariant_key1(QMap< int, QVariant > const * this_ptr, QVariant const * value) {
  return this_ptr->key(*value);
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_QString_QVariant_value1(QMap< QString, QVariant > const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QMap_int_QVariant_value1(QMap< int, QVariant > const * this_ptr, int const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash130(QHash< int, QByteArray > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_fill1(QVector< QXmlStreamAttribute > * this_ptr, QXmlStreamAttribute const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_fill1(QVector< QStringRef > * this_ptr, QStringRef const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_fill1(QVector< unsigned int > * this_ptr, unsigned int const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_fill1(QVector< int > * this_ptr, int const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_fill1(QVector< QPointF > * this_ptr, QPointF const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_fill1(QVector< QStaticPlugin > * this_ptr, QStaticPlugin const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_fill1(QVector< QPair< double, QVariant > > * this_ptr, QPair< double, QVariant > const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_fill1(QVector< QTimeZone::OffsetData > * this_ptr, QTimeZone::OffsetData const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_fill1(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_fill1(QVector< QXmlStreamNotationDeclaration > * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_fill1(QVector< QXmlStreamEntityDeclaration > * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_indexOf1(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_indexOf1(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_indexOf1(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_indexOf1(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_indexOf1(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_indexOf1(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_indexOf1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_indexOf1(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_indexOf1(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamAttribute_lastIndexOf1(QVector< QXmlStreamAttribute > const * this_ptr, QXmlStreamAttribute const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QStringRef_lastIndexOf1(QVector< QStringRef > const * this_ptr, QStringRef const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_unsigned_int_lastIndexOf1(QVector< unsigned int > const * this_ptr, unsigned int const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_int_lastIndexOf1(QVector< int > const * this_ptr, int const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPointF_lastIndexOf1(QVector< QPointF > const * this_ptr, QPointF const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QPair_double_QVariant_lastIndexOf1(QVector< QPair< double, QVariant > > const * this_ptr, QPair< double, QVariant > const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_lastIndexOf1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, QXmlStreamNamespaceDeclaration const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_lastIndexOf1(QVector< QXmlStreamNotationDeclaration > const * this_ptr, QXmlStreamNotationDeclaration const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_lastIndexOf1(QVector< QXmlStreamEntityDeclaration > const * this_ptr, QXmlStreamEntityDeclaration const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_QVector_QXmlStreamAttribute_mid1(QVector< QXmlStreamAttribute > const * this_ptr, int pos) {
  return new QVector< QXmlStreamAttribute >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QVector_QStringRef_mid1(QVector< QStringRef > const * this_ptr, int pos) {
  return new QVector< QStringRef >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QVector_unsigned_int_mid1(QVector< unsigned int > const * this_ptr, int pos) {
  return new QVector< unsigned int >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< int > * ctr_qt_core_ffi_QVector_int_mid1(QVector< int > const * this_ptr, int pos) {
  return new QVector< int >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_core_ffi_QVector_QPointF_mid1(QVector< QPointF > const * this_ptr, int pos) {
  return new QVector< QPointF >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QStaticPlugin > * ctr_qt_core_ffi_QVector_QStaticPlugin_mid1(QVector< QStaticPlugin > const * this_ptr, int pos) {
  return new QVector< QStaticPlugin >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QPair< double, QVariant > > * ctr_qt_core_ffi_QVector_QPair_double_QVariant_mid1(QVector< QPair< double, QVariant > > const * this_ptr, int pos) {
  return new QVector< QPair< double, QVariant > >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QTimeZone::OffsetData > * ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_mid1(QVector< QTimeZone::OffsetData > const * this_ptr, int pos) {
  return new QVector< QTimeZone::OffsetData >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QXmlStreamNamespaceDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_mid1(QVector< QXmlStreamNamespaceDeclaration > const * this_ptr, int pos) {
  return new QVector< QXmlStreamNamespaceDeclaration >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QXmlStreamNotationDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_mid1(QVector< QXmlStreamNotationDeclaration > const * this_ptr, int pos) {
  return new QVector< QXmlStreamNotationDeclaration >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QXmlStreamEntityDeclaration > * ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_mid1(QVector< QXmlStreamEntityDeclaration > const * this_ptr, int pos) {
  return new QVector< QXmlStreamEntityDeclaration >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash132(QVector< QStringRef > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash133(QVector< unsigned int > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash134(QVector< int > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash143(QSet< QAbstractState * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QStringList * ctr_qt_core_ffi_static_cast_QStringList_ptr(QList< QString > * ptr) {
  return static_cast< QStringList * >(ptr);
}


RITUAL_EXPORT QList< QString > * ctr_qt_core_ffi_static_cast_QList_QString_ptr(QStringList * ptr) {
  return static_cast< QList< QString > * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr(QObject * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr(QAbstractAnimation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_dynamic_cast_QAbstractAnimation_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QAnimationDriver * ctr_qt_core_ffi_static_cast_QAnimationDriver_ptr(QObject * ptr) {
  return static_cast< QAnimationDriver * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr1(QAnimationDriver * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAnimationDriver * ctr_qt_core_ffi_dynamic_cast_QAnimationDriver_ptr(QObject * ptr) {
  return dynamic_cast< QAnimationDriver * >(ptr);
}


RITUAL_EXPORT QEventLoop * ctr_qt_core_ffi_static_cast_QEventLoop_ptr(QObject * ptr) {
  return static_cast< QEventLoop * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr2(QEventLoop * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QEventLoop * ctr_qt_core_ffi_dynamic_cast_QEventLoop_ptr(QObject * ptr) {
  return dynamic_cast< QEventLoop * >(ptr);
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_static_cast_QAbstractEventDispatcher_ptr(QObject * ptr) {
  return static_cast< QAbstractEventDispatcher * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr3(QAbstractEventDispatcher * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractEventDispatcher * ctr_qt_core_ffi_dynamic_cast_QAbstractEventDispatcher_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractEventDispatcher * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr(QObject * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr4(QAbstractItemModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_dynamic_cast_QAbstractItemModel_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QAbstractTableModel * ctr_qt_core_ffi_static_cast_QAbstractTableModel_ptr(QAbstractItemModel * ptr) {
  return static_cast< QAbstractTableModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr1(QAbstractTableModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QAbstractTableModel * ctr_qt_core_ffi_dynamic_cast_QAbstractTableModel_ptr(QAbstractItemModel * ptr) {
  return dynamic_cast< QAbstractTableModel * >(ptr);
}


RITUAL_EXPORT QAbstractTableModel * ctr_qt_core_ffi_static_cast_QAbstractTableModel_ptr1(QObject * ptr) {
  return static_cast< QAbstractTableModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr5(QAbstractTableModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractTableModel * ctr_qt_core_ffi_dynamic_cast_QAbstractTableModel_ptr1(QObject * ptr) {
  return dynamic_cast< QAbstractTableModel * >(ptr);
}


RITUAL_EXPORT QAbstractListModel * ctr_qt_core_ffi_static_cast_QAbstractListModel_ptr(QAbstractItemModel * ptr) {
  return static_cast< QAbstractListModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr2(QAbstractListModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QAbstractListModel * ctr_qt_core_ffi_dynamic_cast_QAbstractListModel_ptr(QAbstractItemModel * ptr) {
  return dynamic_cast< QAbstractListModel * >(ptr);
}


RITUAL_EXPORT QAbstractListModel * ctr_qt_core_ffi_static_cast_QAbstractListModel_ptr1(QObject * ptr) {
  return static_cast< QAbstractListModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr6(QAbstractListModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractListModel * ctr_qt_core_ffi_dynamic_cast_QAbstractListModel_ptr1(QObject * ptr) {
  return dynamic_cast< QAbstractListModel * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_static_cast_QAbstractProxyModel_ptr(QAbstractItemModel * ptr) {
  return static_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr3(QAbstractProxyModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_dynamic_cast_QAbstractProxyModel_ptr(QAbstractItemModel * ptr) {
  return dynamic_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_static_cast_QAbstractProxyModel_ptr1(QObject * ptr) {
  return static_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr7(QAbstractProxyModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_dynamic_cast_QAbstractProxyModel_ptr1(QObject * ptr) {
  return dynamic_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_static_cast_QAbstractState_ptr(QObject * ptr) {
  return static_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr8(QAbstractState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_dynamic_cast_QAbstractState_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_static_cast_QAbstractTransition_ptr(QObject * ptr) {
  return static_cast< QAbstractTransition * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr9(QAbstractTransition * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_dynamic_cast_QAbstractTransition_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractTransition * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_static_cast_QAnimationGroup_ptr(QAbstractAnimation * ptr) {
  return static_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr1(QAnimationGroup * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QAnimationGroup_ptr(QAbstractAnimation * ptr) {
  return dynamic_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_static_cast_QAnimationGroup_ptr1(QObject * ptr) {
  return static_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr10(QAnimationGroup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QAnimationGroup_ptr1(QObject * ptr) {
  return dynamic_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr(QObject * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr11(QIODevice * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_dynamic_cast_QIODevice_ptr(QObject * ptr) {
  return dynamic_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_static_cast_QBuffer_ptr(QIODevice * ptr) {
  return static_cast< QBuffer * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr1(QBuffer * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_dynamic_cast_QBuffer_ptr(QIODevice * ptr) {
  return dynamic_cast< QBuffer * >(ptr);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_static_cast_QBuffer_ptr1(QObject * ptr) {
  return static_cast< QBuffer * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr12(QBuffer * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QBuffer * ctr_qt_core_ffi_dynamic_cast_QBuffer_ptr1(QObject * ptr) {
  return dynamic_cast< QBuffer * >(ptr);
}


RITUAL_EXPORT QTimerEvent * ctr_qt_core_ffi_static_cast_QTimerEvent_ptr(QEvent * ptr) {
  return static_cast< QTimerEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr(QTimerEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QTimerEvent * ctr_qt_core_ffi_dynamic_cast_QTimerEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QTimerEvent * >(ptr);
}


RITUAL_EXPORT QChildEvent * ctr_qt_core_ffi_static_cast_QChildEvent_ptr(QEvent * ptr) {
  return static_cast< QChildEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr1(QChildEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QChildEvent * ctr_qt_core_ffi_dynamic_cast_QChildEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QChildEvent * >(ptr);
}


RITUAL_EXPORT QDynamicPropertyChangeEvent * ctr_qt_core_ffi_static_cast_QDynamicPropertyChangeEvent_ptr(QEvent * ptr) {
  return static_cast< QDynamicPropertyChangeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr2(QDynamicPropertyChangeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDynamicPropertyChangeEvent * ctr_qt_core_ffi_dynamic_cast_QDynamicPropertyChangeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QDynamicPropertyChangeEvent * >(ptr);
}


RITUAL_EXPORT QDeferredDeleteEvent * ctr_qt_core_ffi_static_cast_QDeferredDeleteEvent_ptr(QEvent * ptr) {
  return static_cast< QDeferredDeleteEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr3(QDeferredDeleteEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDeferredDeleteEvent * ctr_qt_core_ffi_dynamic_cast_QDeferredDeleteEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QDeferredDeleteEvent * >(ptr);
}


RITUAL_EXPORT QCoreApplication * ctr_qt_core_ffi_static_cast_QCoreApplication_ptr(QObject * ptr) {
  return static_cast< QCoreApplication * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr13(QCoreApplication * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QCoreApplication * ctr_qt_core_ffi_dynamic_cast_QCoreApplication_ptr(QObject * ptr) {
  return dynamic_cast< QCoreApplication * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_static_cast_QFileDevice_ptr(QIODevice * ptr) {
  return static_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr2(QFileDevice * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_dynamic_cast_QFileDevice_ptr(QIODevice * ptr) {
  return dynamic_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_static_cast_QFileDevice_ptr1(QObject * ptr) {
  return static_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr14(QFileDevice * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_dynamic_cast_QFileDevice_ptr1(QObject * ptr) {
  return dynamic_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_static_cast_QFile_ptr(QFileDevice * ptr) {
  return static_cast< QFile * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_static_cast_QFileDevice_ptr2(QFile * ptr) {
  return static_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_dynamic_cast_QFile_ptr(QFileDevice * ptr) {
  return dynamic_cast< QFile * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_static_cast_QFile_ptr1(QIODevice * ptr) {
  return static_cast< QFile * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr3(QFile * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_dynamic_cast_QFile_ptr1(QIODevice * ptr) {
  return dynamic_cast< QFile * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_static_cast_QFile_ptr2(QObject * ptr) {
  return static_cast< QFile * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr15(QFile * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_dynamic_cast_QFile_ptr2(QObject * ptr) {
  return dynamic_cast< QFile * >(ptr);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_static_cast_QEventTransition_ptr(QAbstractTransition * ptr) {
  return static_cast< QEventTransition * >(ptr);
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_static_cast_QAbstractTransition_ptr1(QEventTransition * ptr) {
  return static_cast< QAbstractTransition * >(ptr);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_dynamic_cast_QEventTransition_ptr(QAbstractTransition * ptr) {
  return dynamic_cast< QEventTransition * >(ptr);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_static_cast_QEventTransition_ptr1(QObject * ptr) {
  return static_cast< QEventTransition * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr16(QEventTransition * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QEventTransition * ctr_qt_core_ffi_dynamic_cast_QEventTransition_ptr1(QObject * ptr) {
  return dynamic_cast< QEventTransition * >(ptr);
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_static_cast_QUnhandledException_ptr(QException * ptr) {
  return static_cast< QUnhandledException * >(ptr);
}


RITUAL_EXPORT QException * ctr_qt_core_ffi_static_cast_QException_ptr(QUnhandledException * ptr) {
  return static_cast< QException * >(ptr);
}


RITUAL_EXPORT QUnhandledException * ctr_qt_core_ffi_dynamic_cast_QUnhandledException_ptr(QException * ptr) {
  return dynamic_cast< QUnhandledException * >(ptr);
}


RITUAL_EXPORT QFileSelector * ctr_qt_core_ffi_static_cast_QFileSelector_ptr(QObject * ptr) {
  return static_cast< QFileSelector * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr17(QFileSelector * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFileSelector * ctr_qt_core_ffi_dynamic_cast_QFileSelector_ptr(QObject * ptr) {
  return dynamic_cast< QFileSelector * >(ptr);
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_static_cast_QFileSystemWatcher_ptr(QObject * ptr) {
  return static_cast< QFileSystemWatcher * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr18(QFileSystemWatcher * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFileSystemWatcher * ctr_qt_core_ffi_dynamic_cast_QFileSystemWatcher_ptr(QObject * ptr) {
  return dynamic_cast< QFileSystemWatcher * >(ptr);
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_static_cast_QFinalState_ptr(QAbstractState * ptr) {
  return static_cast< QFinalState * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_static_cast_QAbstractState_ptr1(QFinalState * ptr) {
  return static_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_dynamic_cast_QFinalState_ptr(QAbstractState * ptr) {
  return dynamic_cast< QFinalState * >(ptr);
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_static_cast_QFinalState_ptr1(QObject * ptr) {
  return static_cast< QFinalState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr19(QFinalState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFinalState * ctr_qt_core_ffi_dynamic_cast_QFinalState_ptr1(QObject * ptr) {
  return dynamic_cast< QFinalState * >(ptr);
}


RITUAL_EXPORT QMutex * ctr_qt_core_ffi_static_cast_QMutex_ptr(QBasicMutex * ptr) {
  return static_cast< QMutex * >(ptr);
}


RITUAL_EXPORT QBasicMutex * ctr_qt_core_ffi_static_cast_QBasicMutex_ptr(QMutex * ptr) {
  return static_cast< QBasicMutex * >(ptr);
}


RITUAL_EXPORT QFutureWatcherBase * ctr_qt_core_ffi_static_cast_QFutureWatcherBase_ptr(QObject * ptr) {
  return static_cast< QFutureWatcherBase * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr20(QFutureWatcherBase * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QFutureWatcherBase * ctr_qt_core_ffi_dynamic_cast_QFutureWatcherBase_ptr(QObject * ptr) {
  return dynamic_cast< QFutureWatcherBase * >(ptr);
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_static_cast_QHistoryState_ptr(QAbstractState * ptr) {
  return static_cast< QHistoryState * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_static_cast_QAbstractState_ptr2(QHistoryState * ptr) {
  return static_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_dynamic_cast_QHistoryState_ptr(QAbstractState * ptr) {
  return dynamic_cast< QHistoryState * >(ptr);
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_static_cast_QHistoryState_ptr1(QObject * ptr) {
  return static_cast< QHistoryState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr21(QHistoryState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QHistoryState * ctr_qt_core_ffi_dynamic_cast_QHistoryState_ptr1(QObject * ptr) {
  return dynamic_cast< QHistoryState * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_static_cast_QIdentityProxyModel_ptr(QAbstractProxyModel * ptr) {
  return static_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_static_cast_QAbstractProxyModel_ptr2(QIdentityProxyModel * ptr) {
  return static_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_dynamic_cast_QIdentityProxyModel_ptr(QAbstractProxyModel * ptr) {
  return dynamic_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_static_cast_QIdentityProxyModel_ptr1(QAbstractItemModel * ptr) {
  return static_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr4(QIdentityProxyModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_dynamic_cast_QIdentityProxyModel_ptr1(QAbstractItemModel * ptr) {
  return dynamic_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_static_cast_QIdentityProxyModel_ptr2(QObject * ptr) {
  return static_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr22(QIdentityProxyModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QIdentityProxyModel * ctr_qt_core_ffi_dynamic_cast_QIdentityProxyModel_ptr2(QObject * ptr) {
  return dynamic_cast< QIdentityProxyModel * >(ptr);
}


RITUAL_EXPORT QItemSelectionModel * ctr_qt_core_ffi_static_cast_QItemSelectionModel_ptr(QObject * ptr) {
  return static_cast< QItemSelectionModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr23(QItemSelectionModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QItemSelectionModel * ctr_qt_core_ffi_dynamic_cast_QItemSelectionModel_ptr(QObject * ptr) {
  return dynamic_cast< QItemSelectionModel * >(ptr);
}


RITUAL_EXPORT QItemSelection * ctr_qt_core_ffi_static_cast_QItemSelection_ptr(QList< QItemSelectionRange > * ptr) {
  return static_cast< QItemSelection * >(ptr);
}


RITUAL_EXPORT QList< QItemSelectionRange > * ctr_qt_core_ffi_static_cast_QList_QItemSelectionRange_ptr(QItemSelection * ptr) {
  return static_cast< QList< QItemSelectionRange > * >(ptr);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_static_cast_QLibrary_ptr(QObject * ptr) {
  return static_cast< QLibrary * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr24(QLibrary * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QLibrary * ctr_qt_core_ffi_dynamic_cast_QLibrary_ptr(QObject * ptr) {
  return dynamic_cast< QLibrary * >(ptr);
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_static_cast_QMimeData_ptr(QObject * ptr) {
  return static_cast< QMimeData * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr25(QMimeData * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_dynamic_cast_QMimeData_ptr(QObject * ptr) {
  return dynamic_cast< QMimeData * >(ptr);
}


RITUAL_EXPORT QObjectCleanupHandler * ctr_qt_core_ffi_static_cast_QObjectCleanupHandler_ptr(QObject * ptr) {
  return static_cast< QObjectCleanupHandler * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr26(QObjectCleanupHandler * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QObjectCleanupHandler * ctr_qt_core_ffi_dynamic_cast_QObjectCleanupHandler_ptr(QObject * ptr) {
  return dynamic_cast< QObjectCleanupHandler * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_static_cast_QParallelAnimationGroup_ptr(QAnimationGroup * ptr) {
  return static_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_static_cast_QAnimationGroup_ptr2(QParallelAnimationGroup * ptr) {
  return static_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QParallelAnimationGroup_ptr(QAnimationGroup * ptr) {
  return dynamic_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_static_cast_QParallelAnimationGroup_ptr1(QAbstractAnimation * ptr) {
  return static_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr2(QParallelAnimationGroup * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QParallelAnimationGroup_ptr1(QAbstractAnimation * ptr) {
  return dynamic_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_static_cast_QParallelAnimationGroup_ptr2(QObject * ptr) {
  return static_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr27(QParallelAnimationGroup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QParallelAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QParallelAnimationGroup_ptr2(QObject * ptr) {
  return dynamic_cast< QParallelAnimationGroup * >(ptr);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_static_cast_QPauseAnimation_ptr(QAbstractAnimation * ptr) {
  return static_cast< QPauseAnimation * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr3(QPauseAnimation * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_dynamic_cast_QPauseAnimation_ptr(QAbstractAnimation * ptr) {
  return dynamic_cast< QPauseAnimation * >(ptr);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_static_cast_QPauseAnimation_ptr1(QObject * ptr) {
  return static_cast< QPauseAnimation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr28(QPauseAnimation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPauseAnimation * ctr_qt_core_ffi_dynamic_cast_QPauseAnimation_ptr1(QObject * ptr) {
  return dynamic_cast< QPauseAnimation * >(ptr);
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_static_cast_QPluginLoader_ptr(QObject * ptr) {
  return static_cast< QPluginLoader * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr29(QPluginLoader * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPluginLoader * ctr_qt_core_ffi_dynamic_cast_QPluginLoader_ptr(QObject * ptr) {
  return dynamic_cast< QPluginLoader * >(ptr);
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_static_cast_QProcess_ptr(QIODevice * ptr) {
  return static_cast< QProcess * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr4(QProcess * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_dynamic_cast_QProcess_ptr(QIODevice * ptr) {
  return dynamic_cast< QProcess * >(ptr);
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_static_cast_QProcess_ptr1(QObject * ptr) {
  return static_cast< QProcess * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr30(QProcess * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QProcess * ctr_qt_core_ffi_dynamic_cast_QProcess_ptr1(QObject * ptr) {
  return dynamic_cast< QProcess * >(ptr);
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_static_cast_QVariantAnimation_ptr(QAbstractAnimation * ptr) {
  return static_cast< QVariantAnimation * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr4(QVariantAnimation * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_dynamic_cast_QVariantAnimation_ptr(QAbstractAnimation * ptr) {
  return dynamic_cast< QVariantAnimation * >(ptr);
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_static_cast_QVariantAnimation_ptr1(QObject * ptr) {
  return static_cast< QVariantAnimation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr31(QVariantAnimation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_dynamic_cast_QVariantAnimation_ptr1(QObject * ptr) {
  return dynamic_cast< QVariantAnimation * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_static_cast_QPropertyAnimation_ptr(QVariantAnimation * ptr) {
  return static_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QVariantAnimation * ctr_qt_core_ffi_static_cast_QVariantAnimation_ptr2(QPropertyAnimation * ptr) {
  return static_cast< QVariantAnimation * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_dynamic_cast_QPropertyAnimation_ptr(QVariantAnimation * ptr) {
  return dynamic_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_static_cast_QPropertyAnimation_ptr1(QAbstractAnimation * ptr) {
  return static_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr5(QPropertyAnimation * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_dynamic_cast_QPropertyAnimation_ptr1(QAbstractAnimation * ptr) {
  return dynamic_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_static_cast_QPropertyAnimation_ptr2(QObject * ptr) {
  return static_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr32(QPropertyAnimation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPropertyAnimation * ctr_qt_core_ffi_dynamic_cast_QPropertyAnimation_ptr2(QObject * ptr) {
  return dynamic_cast< QPropertyAnimation * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_static_cast_QSaveFile_ptr(QFileDevice * ptr) {
  return static_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_static_cast_QFileDevice_ptr3(QSaveFile * ptr) {
  return static_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_dynamic_cast_QSaveFile_ptr(QFileDevice * ptr) {
  return dynamic_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_static_cast_QSaveFile_ptr1(QIODevice * ptr) {
  return static_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr5(QSaveFile * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_dynamic_cast_QSaveFile_ptr1(QIODevice * ptr) {
  return dynamic_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_static_cast_QSaveFile_ptr2(QObject * ptr) {
  return static_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr33(QSaveFile * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSaveFile * ctr_qt_core_ffi_dynamic_cast_QSaveFile_ptr2(QObject * ptr) {
  return dynamic_cast< QSaveFile * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_static_cast_QSequentialAnimationGroup_ptr(QAnimationGroup * ptr) {
  return static_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAnimationGroup * ctr_qt_core_ffi_static_cast_QAnimationGroup_ptr3(QSequentialAnimationGroup * ptr) {
  return static_cast< QAnimationGroup * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QSequentialAnimationGroup_ptr(QAnimationGroup * ptr) {
  return dynamic_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_static_cast_QSequentialAnimationGroup_ptr1(QAbstractAnimation * ptr) {
  return static_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QAbstractAnimation * ctr_qt_core_ffi_static_cast_QAbstractAnimation_ptr6(QSequentialAnimationGroup * ptr) {
  return static_cast< QAbstractAnimation * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QSequentialAnimationGroup_ptr1(QAbstractAnimation * ptr) {
  return dynamic_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_static_cast_QSequentialAnimationGroup_ptr2(QObject * ptr) {
  return static_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr34(QSequentialAnimationGroup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSequentialAnimationGroup * ctr_qt_core_ffi_dynamic_cast_QSequentialAnimationGroup_ptr2(QObject * ptr) {
  return dynamic_cast< QSequentialAnimationGroup * >(ptr);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_static_cast_QSettings_ptr(QObject * ptr) {
  return static_cast< QSettings * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr35(QSettings * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSettings * ctr_qt_core_ffi_dynamic_cast_QSettings_ptr(QObject * ptr) {
  return dynamic_cast< QSettings * >(ptr);
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_static_cast_QSharedMemory_ptr(QObject * ptr) {
  return static_cast< QSharedMemory * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr36(QSharedMemory * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSharedMemory * ctr_qt_core_ffi_dynamic_cast_QSharedMemory_ptr(QObject * ptr) {
  return dynamic_cast< QSharedMemory * >(ptr);
}


RITUAL_EXPORT QSignalMapper * ctr_qt_core_ffi_static_cast_QSignalMapper_ptr(QObject * ptr) {
  return static_cast< QSignalMapper * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr37(QSignalMapper * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSignalMapper * ctr_qt_core_ffi_dynamic_cast_QSignalMapper_ptr(QObject * ptr) {
  return dynamic_cast< QSignalMapper * >(ptr);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_static_cast_QSignalTransition_ptr(QAbstractTransition * ptr) {
  return static_cast< QSignalTransition * >(ptr);
}


RITUAL_EXPORT QAbstractTransition * ctr_qt_core_ffi_static_cast_QAbstractTransition_ptr2(QSignalTransition * ptr) {
  return static_cast< QAbstractTransition * >(ptr);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_dynamic_cast_QSignalTransition_ptr(QAbstractTransition * ptr) {
  return dynamic_cast< QSignalTransition * >(ptr);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_static_cast_QSignalTransition_ptr1(QObject * ptr) {
  return static_cast< QSignalTransition * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr38(QSignalTransition * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSignalTransition * ctr_qt_core_ffi_dynamic_cast_QSignalTransition_ptr1(QObject * ptr) {
  return dynamic_cast< QSignalTransition * >(ptr);
}


RITUAL_EXPORT QSocketNotifier * ctr_qt_core_ffi_static_cast_QSocketNotifier_ptr(QObject * ptr) {
  return static_cast< QSocketNotifier * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr39(QSocketNotifier * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSocketNotifier * ctr_qt_core_ffi_dynamic_cast_QSocketNotifier_ptr(QObject * ptr) {
  return dynamic_cast< QSocketNotifier * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_static_cast_QSortFilterProxyModel_ptr(QAbstractProxyModel * ptr) {
  return static_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_static_cast_QAbstractProxyModel_ptr3(QSortFilterProxyModel * ptr) {
  return static_cast< QAbstractProxyModel * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_dynamic_cast_QSortFilterProxyModel_ptr(QAbstractProxyModel * ptr) {
  return dynamic_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_static_cast_QSortFilterProxyModel_ptr1(QAbstractItemModel * ptr) {
  return static_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr5(QSortFilterProxyModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_dynamic_cast_QSortFilterProxyModel_ptr1(QAbstractItemModel * ptr) {
  return dynamic_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_static_cast_QSortFilterProxyModel_ptr2(QObject * ptr) {
  return static_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr40(QSortFilterProxyModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSortFilterProxyModel * ctr_qt_core_ffi_dynamic_cast_QSortFilterProxyModel_ptr2(QObject * ptr) {
  return dynamic_cast< QSortFilterProxyModel * >(ptr);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_static_cast_QState_ptr(QAbstractState * ptr) {
  return static_cast< QState * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_static_cast_QAbstractState_ptr3(QState * ptr) {
  return static_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_dynamic_cast_QState_ptr(QAbstractState * ptr) {
  return dynamic_cast< QState * >(ptr);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_static_cast_QState_ptr1(QObject * ptr) {
  return static_cast< QState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr41(QState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_dynamic_cast_QState_ptr1(QObject * ptr) {
  return dynamic_cast< QState * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_static_cast_QStateMachine_ptr(QState * ptr) {
  return static_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QState * ctr_qt_core_ffi_static_cast_QState_ptr2(QStateMachine * ptr) {
  return static_cast< QState * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_dynamic_cast_QStateMachine_ptr(QState * ptr) {
  return dynamic_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_static_cast_QStateMachine_ptr1(QAbstractState * ptr) {
  return static_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QAbstractState * ctr_qt_core_ffi_static_cast_QAbstractState_ptr4(QStateMachine * ptr) {
  return static_cast< QAbstractState * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_dynamic_cast_QStateMachine_ptr1(QAbstractState * ptr) {
  return dynamic_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_static_cast_QStateMachine_ptr2(QObject * ptr) {
  return static_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr42(QStateMachine * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QStateMachine * ctr_qt_core_ffi_dynamic_cast_QStateMachine_ptr2(QObject * ptr) {
  return dynamic_cast< QStateMachine * >(ptr);
}


RITUAL_EXPORT QStateMachine::SignalEvent * ctr_qt_core_ffi_static_cast_QStateMachine_SignalEvent_ptr(QEvent * ptr) {
  return static_cast< QStateMachine::SignalEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr4(QStateMachine::SignalEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QStateMachine::SignalEvent * ctr_qt_core_ffi_dynamic_cast_QStateMachine_SignalEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QStateMachine::SignalEvent * >(ptr);
}


RITUAL_EXPORT QStateMachine::WrappedEvent * ctr_qt_core_ffi_static_cast_QStateMachine_WrappedEvent_ptr(QEvent * ptr) {
  return static_cast< QStateMachine::WrappedEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_core_ffi_static_cast_QEvent_ptr5(QStateMachine::WrappedEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QStateMachine::WrappedEvent * ctr_qt_core_ffi_dynamic_cast_QStateMachine_WrappedEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QStateMachine::WrappedEvent * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_static_cast_QStringListModel_ptr(QAbstractListModel * ptr) {
  return static_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QAbstractListModel * ctr_qt_core_ffi_static_cast_QAbstractListModel_ptr2(QStringListModel * ptr) {
  return static_cast< QAbstractListModel * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_dynamic_cast_QStringListModel_ptr(QAbstractListModel * ptr) {
  return dynamic_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_static_cast_QStringListModel_ptr1(QAbstractItemModel * ptr) {
  return static_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr6(QStringListModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_dynamic_cast_QStringListModel_ptr1(QAbstractItemModel * ptr) {
  return dynamic_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_static_cast_QStringListModel_ptr2(QObject * ptr) {
  return static_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr43(QStringListModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QStringListModel * ctr_qt_core_ffi_dynamic_cast_QStringListModel_ptr2(QObject * ptr) {
  return dynamic_cast< QStringListModel * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_static_cast_QTemporaryFile_ptr(QFile * ptr) {
  return static_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QFile * ctr_qt_core_ffi_static_cast_QFile_ptr3(QTemporaryFile * ptr) {
  return static_cast< QFile * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_dynamic_cast_QTemporaryFile_ptr(QFile * ptr) {
  return dynamic_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_static_cast_QTemporaryFile_ptr1(QFileDevice * ptr) {
  return static_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QFileDevice * ctr_qt_core_ffi_static_cast_QFileDevice_ptr4(QTemporaryFile * ptr) {
  return static_cast< QFileDevice * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_dynamic_cast_QTemporaryFile_ptr1(QFileDevice * ptr) {
  return dynamic_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_static_cast_QTemporaryFile_ptr2(QIODevice * ptr) {
  return static_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_static_cast_QIODevice_ptr6(QTemporaryFile * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_dynamic_cast_QTemporaryFile_ptr2(QIODevice * ptr) {
  return dynamic_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_static_cast_QTemporaryFile_ptr3(QObject * ptr) {
  return static_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr44(QTemporaryFile * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTemporaryFile * ctr_qt_core_ffi_dynamic_cast_QTemporaryFile_ptr3(QObject * ptr) {
  return dynamic_cast< QTemporaryFile * >(ptr);
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_static_cast_QThread_ptr(QObject * ptr) {
  return static_cast< QThread * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr45(QThread * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QThread * ctr_qt_core_ffi_dynamic_cast_QThread_ptr(QObject * ptr) {
  return dynamic_cast< QThread * >(ptr);
}


RITUAL_EXPORT QThreadPool * ctr_qt_core_ffi_static_cast_QThreadPool_ptr(QObject * ptr) {
  return static_cast< QThreadPool * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr46(QThreadPool * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QThreadPool * ctr_qt_core_ffi_dynamic_cast_QThreadPool_ptr(QObject * ptr) {
  return dynamic_cast< QThreadPool * >(ptr);
}


RITUAL_EXPORT QTimeLine * ctr_qt_core_ffi_static_cast_QTimeLine_ptr(QObject * ptr) {
  return static_cast< QTimeLine * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr47(QTimeLine * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTimeLine * ctr_qt_core_ffi_dynamic_cast_QTimeLine_ptr(QObject * ptr) {
  return dynamic_cast< QTimeLine * >(ptr);
}


RITUAL_EXPORT QTimer * ctr_qt_core_ffi_static_cast_QTimer_ptr(QObject * ptr) {
  return static_cast< QTimer * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr48(QTimer * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTimer * ctr_qt_core_ffi_dynamic_cast_QTimer_ptr(QObject * ptr) {
  return dynamic_cast< QTimer * >(ptr);
}


RITUAL_EXPORT QTranslator * ctr_qt_core_ffi_static_cast_QTranslator_ptr(QObject * ptr) {
  return static_cast< QTranslator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr49(QTranslator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTranslator * ctr_qt_core_ffi_dynamic_cast_QTranslator_ptr(QObject * ptr) {
  return dynamic_cast< QTranslator * >(ptr);
}


RITUAL_EXPORT QXmlStreamAttributes * ctr_qt_core_ffi_static_cast_QXmlStreamAttributes_ptr(QVector< QXmlStreamAttribute > * ptr) {
  return static_cast< QXmlStreamAttributes * >(ptr);
}


RITUAL_EXPORT QVector< QXmlStreamAttribute > * ctr_qt_core_ffi_static_cast_QVector_QXmlStreamAttribute_ptr(QXmlStreamAttributes * ptr) {
  return static_cast< QVector< QXmlStreamAttribute > * >(ptr);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMimeType_staticMetaObject() {
  return &QMimeType::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_MacOSMojave() {
  return &QOperatingSystemVersion::MacOSMojave;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_qEnvironmentVariable(char const * varName) {
  return new QString(qEnvironmentVariable(varName));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_qEnvironmentVariable1(char const * varName, QString const * defaultValue) {
  return new QString(qEnvironmentVariable(varName, *defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QSysInfo_machineUniqueId() {
  return new QByteArray(QSysInfo::machineUniqueId());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QSysInfo_bootUniqueId() {
  return new QByteArray(QSysInfo::bootUniqueId());
}


#endif

RITUAL_EXPORT QChar * ctr_qt_core_ffi_QChar_QChar22(char16_t ch) {
  return new QChar(ch);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char ctr_qt_core_ffi_QByteArray_front(QByteArray const * this_ptr) {
  return this_ptr->front();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteArray_front1(QByteArray * this_ptr) {
  return new QByteRef(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char ctr_qt_core_ffi_QByteArray_back(QByteArray const * this_ptr) {
  return this_ptr->back();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteRef * ctr_qt_core_ffi_QByteArray_back1(QByteArray * this_ptr) {
  return new QByteRef(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QByteArray_chopped(QByteArray const * this_ptr, int len) {
  return new QByteArray(this_ptr->chopped(len));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QByteArray_shrink_to_fit(QByteArray * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_QStringView() {
  return new QStringView();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QStringView_toString(QStringView const * this_ptr) {
  return new QString(this_ptr->toString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_size(QStringView const * this_ptr) {
  return this_ptr->size();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringView_data(QStringView const * this_ptr) {
  return this_ptr->data();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char16_t const * ctr_qt_core_ffi_QStringView_utf16(QStringView const * this_ptr) {
  return this_ptr->utf16();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_operator__(QStringView const * this_ptr, long long n) {
  return new QChar(this_ptr->operator[](n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringView_toLatin1(QStringView const * this_ptr) {
  return new QByteArray(this_ptr->toLatin1());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringView_toUtf8(QStringView const * this_ptr) {
  return new QByteArray(this_ptr->toUtf8());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QStringView_toLocal8Bit(QStringView const * this_ptr) {
  return new QByteArray(this_ptr->toLocal8Bit());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< unsigned int > * ctr_qt_core_ffi_QStringView_toUcs4(QStringView const * this_ptr) {
  return new QVector< unsigned int >(this_ptr->toUcs4());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_at(QStringView const * this_ptr, long long n) {
  return new QChar(this_ptr->at(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_mid(QStringView const * this_ptr, long long pos) {
  return new QStringView(this_ptr->mid(pos));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_mid1(QStringView const * this_ptr, long long pos, long long n) {
  return new QStringView(this_ptr->mid(pos, n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_left(QStringView const * this_ptr, long long n) {
  return new QStringView(this_ptr->left(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_right(QStringView const * this_ptr, long long n) {
  return new QStringView(this_ptr->right(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_chopped(QStringView const * this_ptr, long long n) {
  return new QStringView(this_ptr->chopped(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QStringView_truncate(QStringView * this_ptr, long long n) {
  this_ptr->truncate(n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QStringView_chop(QStringView * this_ptr, long long n) {
  this_ptr->chop(n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_trimmed(QStringView const * this_ptr) {
  return new QStringView(this_ptr->trimmed());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith(QStringView const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith1(QStringView const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith2(QStringView const * this_ptr, QChar const * c) {
  return this_ptr->startsWith(*c);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith3(QStringView const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*c, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith(QStringView const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith1(QStringView const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith2(QStringView const * this_ptr, QChar const * c) {
  return this_ptr->endsWith(*c);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith3(QStringView const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*c, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_isRightToLeft(QStringView const * this_ptr) {
  return this_ptr->isRightToLeft();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringView_begin(QStringView const * this_ptr) {
  return this_ptr->begin();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringView_end(QStringView const * this_ptr) {
  return this_ptr->end();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringView_cbegin(QStringView const * this_ptr) {
  return this_ptr->cbegin();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar const * ctr_qt_core_ffi_QStringView_cend(QStringView const * this_ptr) {
  return this_ptr->cend();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_empty(QStringView const * this_ptr) {
  return this_ptr->empty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_front(QStringView const * this_ptr) {
  return new QChar(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_back(QStringView const * this_ptr) {
  return new QChar(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_isNull(QStringView const * this_ptr) {
  return this_ptr->isNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_isEmpty(QStringView const * this_ptr) {
  return this_ptr->isEmpty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringView_length(QStringView const * this_ptr) {
  return this_ptr->length();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_first(QStringView const * this_ptr) {
  return new QChar(this_ptr->first());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringView_last(QStringView const * this_ptr) {
  return new QChar(this_ptr->last());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_QLatin1String10(char const * f, char const * l) {
  return new QLatin1String(f, l);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_isNull(QLatin1String const * this_ptr) {
  return this_ptr->isNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_isEmpty(QLatin1String const * this_ptr) {
  return this_ptr->isEmpty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1String_front(QLatin1String const * this_ptr) {
  return new QLatin1Char(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QLatin1Char * ctr_qt_core_ffi_QLatin1String_back(QLatin1String const * this_ptr) {
  return new QLatin1Char(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith(QLatin1String const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith1(QLatin1String const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith2(QLatin1String const * this_ptr, QChar const * c) {
  return this_ptr->startsWith(*c);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith3(QLatin1String const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*c, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith(QLatin1String const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith1(QLatin1String const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith2(QLatin1String const * this_ptr, QChar const * c) {
  return this_ptr->endsWith(*c);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith3(QLatin1String const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*c, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_begin(QLatin1String const * this_ptr) {
  return this_ptr->begin();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_cbegin(QLatin1String const * this_ptr) {
  return this_ptr->cbegin();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_end(QLatin1String const * this_ptr) {
  return this_ptr->end();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QLatin1String_cend(QLatin1String const * this_ptr) {
  return this_ptr->cend();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_chopped(QLatin1String const * this_ptr, int n) {
  return new QLatin1String(this_ptr->chopped(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QLatin1String_chop(QLatin1String * this_ptr, int n) {
  this_ptr->chop(n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QLatin1String_truncate(QLatin1String * this_ptr, int n) {
  this_ptr->truncate(n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QLatin1String * ctr_qt_core_ffi_QLatin1String_trimmed(QLatin1String const * this_ptr) {
  return new QLatin1String(this_ptr->trimmed());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_front(QString const * this_ptr) {
  return new QChar(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QString_front1(QString * this_ptr) {
  return new QCharRef(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QString_back(QString const * this_ptr) {
  return new QChar(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCharRef * ctr_qt_core_ffi_QString_back1(QString * this_ptr) {
  return new QCharRef(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg108(QString const * this_ptr, QStringView const * a, int fieldWidth, QChar const * fillChar) {
  return new QString(this_ptr->arg(*a, fieldWidth, *fillChar));
}


#endif

RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg109(QString const * this_ptr, QLatin1String const * a, int fieldWidth, QChar const * fillChar) {
  return new QString(this_ptr->arg(*a, fieldWidth, *fillChar));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_chopped(QString const * this_ptr, int n) {
  return new QString(this_ptr->chopped(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith16(QString const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith16(QString const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove14(QString * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return &this_ptr->remove(*s, cs);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QString_shrink_to_fit(QString * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QStringRef_chopped(QStringRef const * this_ptr, int n) {
  return new QStringRef(this_ptr->chopped(n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith16(QStringRef const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->startsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith16(QStringRef const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->endsWith(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringRef_front(QStringRef const * this_ptr) {
  return new QChar(this_ptr->front());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QChar * ctr_qt_core_ffi_QStringRef_back(QStringRef const * this_ptr) {
  return new QChar(this_ptr->back());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1070(QStringView const * lhs, QStringView const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_416(QStringView const * lhs, QStringView const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1072(QStringView const * lhs, QStringView const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_417(QStringView const * lhs, QStringView const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1073(QStringView const * lhs, QStringView const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1074(QStringView const * lhs, QChar const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_418(QStringView const * lhs, QChar const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1076(QStringView const * lhs, QChar const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_419(QStringView const * lhs, QChar const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1077(QStringView const * lhs, QChar const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1078(QChar const * lhs, QStringView const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_420(QChar const * lhs, QStringView const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1080(QChar const * lhs, QStringView const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_421(QChar const * lhs, QStringView const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1081(QChar const * lhs, QStringView const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1082(QStringView const * lhs, QLatin1String const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_422(QStringView const * lhs, QLatin1String const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1084(QStringView const * lhs, QLatin1String const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_423(QStringView const * lhs, QLatin1String const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1085(QStringView const * lhs, QLatin1String const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1086(QLatin1String const * lhs, QStringView const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_424(QLatin1String const * lhs, QStringView const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1088(QLatin1String const * lhs, QStringView const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_425(QLatin1String const * lhs, QStringView const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1089(QLatin1String const * lhs, QStringView const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash288(QStringView const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains4(QStringList const * this_ptr, QLatin1String const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_siblingAtColumn(QModelIndex const * this_ptr, int column) {
  return new QModelIndex(this_ptr->siblingAtColumn(column));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QModelIndex_siblingAtRow(QModelIndex const * this_ptr, int row) {
  return new QModelIndex(this_ptr->siblingAtRow(row));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_checkIndex(QAbstractItemModel const * this_ptr, QModelIndex const * index, int options) {
  return this_ptr->checkIndex(*index, QFlags< QAbstractItemModel::CheckIndexOption >(options));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QBitArray_bits(QBitArray const * this_ptr) {
  return this_ptr->bits();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QBitArray * ctr_qt_core_ffi_QBitArray_fromBits(char const * data, long long len) {
  return new QBitArray(QBitArray::fromBits(data, len));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QIODevice_skip(QIODevice * this_ptr, qint64 maxSize) {
  return this_ptr->skip(maxSize);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toShort(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toUShort(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toInt(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toUInt(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toLongLong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toULongLong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toFloat(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble8(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toDouble(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString42(QLocale const * this_ptr, QDate const * date, QStringView const * formatStr) {
  return new QString(this_ptr->toString(*date, *formatStr));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString43(QLocale const * this_ptr, QTime const * time, QStringView const * formatStr) {
  return new QString(this_ptr->toString(*time, *formatStr));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString44(QLocale const * this_ptr, QDateTime const * dateTime, QStringView const * format) {
  return new QString(this_ptr->toString(*dateTime, *format));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize(QLocale * this_ptr, qint64 bytes, int precision, int format) {
  return new QString(this_ptr->formattedDataSize(bytes, precision, QFlags< QLocale::DataSizeFormat >(format)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString6(QDate const * this_ptr, QStringView const * format) {
  return new QString(this_ptr->toString(*format));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QTime_toString6(QTime const * this_ptr, QStringView const * format) {
  return new QString(this_ptr->toString(*format));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QDateTime_toString6(QDateTime const * this_ptr, QStringView const * format) {
  return new QString(this_ptr->toString(*format));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_operator__45(QDebug * this_ptr, QStringView const * s) {
  return &this_ptr->operator<<(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileDevice_fileTime(QFileDevice const * this_ptr, QFileDevice::FileTime time) {
  return new QDateTime(this_ptr->fileTime(time));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QFileDevice_setFileTime(QFileDevice * this_ptr, QDateTime const * newDate, QFileDevice::FileTime fileTime) {
  return this_ptr->setFileTime(*newDate, fileTime);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_birthTime(QFileInfo const * this_ptr) {
  return new QDateTime(this_ptr->birthTime());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_metadataChangeTime(QFileInfo const * this_ptr) {
  return new QDateTime(this_ptr->metadataChangeTime());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QFileInfo_fileTime(QFileInfo const * this_ptr, QFileDevice::FileTime time) {
  return new QDateTime(this_ptr->fileTime(time));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1090(QDebug const * arg1, QFileInfo const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QJsonValue_swap(QJsonValue * this_ptr, QJsonValue * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_operator__4(QJsonValue const * this_ptr, QString const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_operator__5(QJsonValue const * this_ptr, QLatin1String const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_operator__6(QJsonValue const * this_ptr, int i) {
  return new QJsonValue(this_ptr->operator[](i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QJsonArray_swap(QJsonArray * this_ptr, QJsonArray * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QJsonDocument_swap(QJsonDocument * this_ptr, QJsonDocument * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonDocument_operator__4(QJsonDocument const * this_ptr, QString const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonDocument_operator__5(QJsonDocument const * this_ptr, QLatin1String const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonDocument_operator__6(QJsonDocument const * this_ptr, int i) {
  return new QJsonValue(this_ptr->operator[](i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_swap(QJsonObject * this_ptr, QJsonObject * other) {
  this_ptr->swap(*other);
}


#endif

RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString4(QLatin1String const * string, int * suffixIndex) {
  return new QVersionNumber(QVersionNumber::fromString(*string, suffixIndex));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString5(QStringView const * string, int * suffixIndex) {
  return new QVersionNumber(QVersionNumber::fromString(*string, suffixIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QOperatingSystemVersion::OSType ctr_qt_core_ffi_QOperatingSystemVersion_currentType() {
  return QOperatingSystemVersion::currentType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1091(QDebug const * debug, QOperatingSystemVersion const * ov) {
  return new QDebug(operator<<(*debug, *ov));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached8(QProcess * this_ptr, qint64 * pid) {
  return this_ptr->startDetached(pid);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_QRandomGenerator(quint32 seedValue) {
  return new QRandomGenerator(seedValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_QRandomGenerator1(quint32 const * seedBuffer, long long len) {
  return new QRandomGenerator(seedBuffer, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_QRandomGenerator3(quint32 const * begin, quint32 const * end) {
  return new QRandomGenerator(begin, end);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_QRandomGenerator4(QRandomGenerator const * other) {
  return new QRandomGenerator(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_operator_(QRandomGenerator * this_ptr, QRandomGenerator const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint32 ctr_qt_core_ffi_QRandomGenerator_generate(QRandomGenerator * this_ptr) {
  return this_ptr->generate();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint64 ctr_qt_core_ffi_QRandomGenerator_generate64(QRandomGenerator * this_ptr) {
  return this_ptr->generate64();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QRandomGenerator_generateDouble(QRandomGenerator * this_ptr) {
  return this_ptr->generateDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QRandomGenerator_bounded(QRandomGenerator * this_ptr, double highest) {
  return this_ptr->bounded(highest);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint32 ctr_qt_core_ffi_QRandomGenerator_bounded1(QRandomGenerator * this_ptr, quint32 highest) {
  return this_ptr->bounded(highest);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QRandomGenerator_bounded2(QRandomGenerator * this_ptr, int highest) {
  return this_ptr->bounded(highest);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint32 ctr_qt_core_ffi_QRandomGenerator_bounded3(QRandomGenerator * this_ptr, quint32 lowest, quint32 highest) {
  return this_ptr->bounded(lowest, highest);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QRandomGenerator_bounded4(QRandomGenerator * this_ptr, int lowest, int highest) {
  return this_ptr->bounded(lowest, highest);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator_generate1(QRandomGenerator * this_ptr, quint32 * begin, quint32 * end) {
  this_ptr->generate(begin, end);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QRandomGenerator_operator__(QRandomGenerator * this_ptr) {
  return this_ptr->operator()();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator_seed(QRandomGenerator * this_ptr, quint32 s) {
  this_ptr->seed(s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator_discard(QRandomGenerator * this_ptr, unsigned long long z) {
  this_ptr->discard(z);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QRandomGenerator_min() {
  return QRandomGenerator::min();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QRandomGenerator_max() {
  return QRandomGenerator::max();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_system() {
  return QRandomGenerator::system();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_global() {
  return QRandomGenerator::global();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_securelySeeded() {
  return new QRandomGenerator(QRandomGenerator::securelySeeded());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint64 ctr_qt_core_ffi_QRandomGenerator64_generate(QRandomGenerator64 * this_ptr) {
  return this_ptr->generate();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long long ctr_qt_core_ffi_QRandomGenerator64_operator__(QRandomGenerator64 * this_ptr) {
  return this_ptr->operator()();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator64(quint32 seedValue) {
  return new QRandomGenerator64(seedValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator641(quint32 const * seedBuffer, long long len) {
  return new QRandomGenerator64(seedBuffer, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator643(quint32 const * begin, quint32 const * end) {
  return new QRandomGenerator64(begin, end);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator644(QRandomGenerator const * other) {
  return new QRandomGenerator64(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator64_discard(QRandomGenerator64 * this_ptr, unsigned long long z) {
  this_ptr->discard(z);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long long ctr_qt_core_ffi_QRandomGenerator64_min() {
  return QRandomGenerator64::min();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long long ctr_qt_core_ffi_QRandomGenerator64_max() {
  return QRandomGenerator64::max();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_system() {
  return QRandomGenerator64::system();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_global() {
  return QRandomGenerator64::global();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_securelySeeded() {
  return new QRandomGenerator64(QRandomGenerator64::securelySeeded());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QRegularExpressionMatch_capturedView(QRegularExpressionMatch const * this_ptr, int nth) {
  return new QStringView(this_ptr->capturedView(nth));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpressionMatch_captured6(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return new QString(this_ptr->captured(*name));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringRef * ctr_qt_core_ffi_QRegularExpressionMatch_capturedRef6(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return new QStringRef(this_ptr->capturedRef(*name));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QRegularExpressionMatch_capturedView1(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return new QStringView(this_ptr->capturedView(*name));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedStart6(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return this_ptr->capturedStart(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedLength6(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return this_ptr->capturedLength(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QRegularExpressionMatch_capturedEnd6(QRegularExpressionMatch const * this_ptr, QStringView const * name) {
  return this_ptr->capturedEnd(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphoreReleaser * ctr_qt_core_ffi_QSemaphoreReleaser_QSemaphoreReleaser() {
  return new QSemaphoreReleaser();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphoreReleaser * ctr_qt_core_ffi_QSemaphoreReleaser_QSemaphoreReleaser1(QSemaphore * sem, int n) {
  return new QSemaphoreReleaser(*sem, n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphoreReleaser * ctr_qt_core_ffi_QSemaphoreReleaser_QSemaphoreReleaser2(QSemaphore * sem, int n) {
  return new QSemaphoreReleaser(sem, n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphoreReleaser_dQSemaphoreReleaser(QSemaphoreReleaser * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSemaphoreReleaser_swap(QSemaphoreReleaser * this_ptr, QSemaphoreReleaser * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphore * ctr_qt_core_ffi_QSemaphoreReleaser_semaphore(QSemaphoreReleaser const * this_ptr) {
  return this_ptr->semaphore();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphore * ctr_qt_core_ffi_QSemaphoreReleaser_cancel(QSemaphoreReleaser * this_ptr) {
  return this_ptr->cancel();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QSettings_isAtomicSyncRequired(QSettings const * this_ptr) {
  return this_ptr->isAtomicSyncRequired();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSettings_setAtomicSyncRequired(QSettings * this_ptr, bool enable) {
  this_ptr->setAtomicSyncRequired(enable);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QSortFilterProxyModel_isRecursiveFilteringEnabled(QSortFilterProxyModel const * this_ptr) {
  return this_ptr->isRecursiveFilteringEnabled();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setRecursiveFilteringEnabled(QSortFilterProxyModel * this_ptr, bool recursive) {
  this_ptr->setRecursiveFilteringEnabled(recursive);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1092(QDebug const * debug, QStorageInfo const * arg2) {
  return new QDebug(operator<<(*debug, *arg2));
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_QTemporaryFile_rename(QTemporaryFile * this_ptr, QString const * newName) {
  return this_ptr->rename(*newName);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTextCodec_canEncode4(QTextCodec const * this_ptr, QStringView const * arg1) {
  return this_ptr->canEncode(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextCodec_fromUnicode2(QTextCodec const * this_ptr, QStringView const * uc) {
  return new QByteArray(this_ptr->fromUnicode(*uc));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QTextEncoder_fromUnicode4(QTextEncoder * this_ptr, QStringView const * str) {
  return new QByteArray(this_ptr->fromUnicode(*str));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QThreadPool_setStackSize(QThreadPool * this_ptr, unsigned int stackSize) {
  this_ptr->setStackSize(stackSize);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QThreadPool_stackSize(QThreadPool const * this_ptr) {
  return this_ptr->stackSize();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_fromString(QStringView const * string) {
  return new QUuid(QUuid::fromString(*string));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QUuid_fromString1(QLatin1String const * string) {
  return new QUuid(QUuid::fromString(*string));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QUuid_toString2(QUuid const * this_ptr, QUuid::StringFormat mode) {
  return new QString(this_ptr->toString(mode));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QUuid_toByteArray2(QUuid const * this_ptr, QUuid::StringFormat mode) {
  return new QByteArray(this_ptr->toByteArray(mode));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QStringView_dQStringView(QStringView * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_QStringView1(QStringView const * other) {
  return new QStringView(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QStringView_operator_(QStringView * this_ptr, QStringView const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator_dQRandomGenerator(QRandomGenerator * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_QRandomGenerator_QRandomGenerator5() {
  return new QRandomGenerator();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator64_dQRandomGenerator64(QRandomGenerator64 * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator645() {
  return new QRandomGenerator64();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_QRandomGenerator646(QRandomGenerator64 const * other) {
  return new QRandomGenerator64(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_QRandomGenerator64_operator_(QRandomGenerator64 * this_ptr, QRandomGenerator64 const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1093(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QAbstractItemModel::CheckIndexOption >(e));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1094(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QLocale::DataSizeFormat >(e));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1097(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QAbstractItemModel::CheckIndexOption >(flags)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1098(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QLocale::DataSizeFormat >(flags)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_shrink_to_fit(QVector< QXmlStreamAttribute > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_shrink_to_fit(QVector< QStringRef > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_shrink_to_fit(QVector< unsigned int > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_shrink_to_fit(QVector< int > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_shrink_to_fit(QVector< QPointF > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_shrink_to_fit(QVector< QStaticPlugin > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_shrink_to_fit(QVector< QPair< double, QVariant > > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_shrink_to_fit(QVector< QTimeZone::OffsetData > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_shrink_to_fit(QVector< QXmlStreamNamespaceDeclaration > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_shrink_to_fit(QVector< QXmlStreamNotationDeclaration > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_shrink_to_fit(QVector< QXmlStreamEntityDeclaration > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith4(QStringView const * this_ptr, QStringView const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_startsWith5(QStringView const * this_ptr, QLatin1String const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith4(QStringView const * this_ptr, QStringView const * s) {
  return this_ptr->endsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_endsWith5(QStringView const * this_ptr, QLatin1String const * s) {
  return this_ptr->endsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith4(QLatin1String const * this_ptr, QStringView const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_startsWith5(QLatin1String const * this_ptr, QLatin1String const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith4(QLatin1String const * this_ptr, QStringView const * s) {
  return this_ptr->endsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_endsWith5(QLatin1String const * this_ptr, QLatin1String const * s) {
  return this_ptr->endsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg110(QString const * this_ptr, QStringView const * a, int fieldWidth) {
  return new QString(this_ptr->arg(*a, fieldWidth));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg111(QString const * this_ptr, QStringView const * a) {
  return new QString(this_ptr->arg(*a));
}


#endif

RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg112(QString const * this_ptr, QLatin1String const * a, int fieldWidth) {
  return new QString(this_ptr->arg(*a, fieldWidth));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_arg113(QString const * this_ptr, QLatin1String const * a) {
  return new QString(this_ptr->arg(*a));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_startsWith17(QString const * this_ptr, QStringView const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_endsWith17(QString const * this_ptr, QStringView const * s) {
  return this_ptr->endsWith(*s);
}


#endif

RITUAL_EXPORT QString * ctr_qt_core_ffi_QString_remove15(QString * this_ptr, QLatin1String const * s) {
  return &this_ptr->remove(*s);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_startsWith17(QStringRef const * this_ptr, QStringView const * s) {
  return this_ptr->startsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_endsWith17(QStringRef const * this_ptr, QStringView const * s) {
  return this_ptr->endsWith(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash289(QStringView const * key) {
  return qHash(*key);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains5(QStringList const * this_ptr, QLatin1String const * str) {
  return this_ptr->contains(*str);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QAbstractItemModel_checkIndex1(QAbstractItemModel const * this_ptr, QModelIndex const * index) {
  return this_ptr->checkIndex(*index);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT short ctr_qt_core_ffi_QLocale_toShort9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toShort(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned short ctr_qt_core_ffi_QLocale_toUShort9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toUShort(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QLocale_toInt9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toInt(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_QLocale_toUInt9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toUInt(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qlonglong ctr_qt_core_ffi_QLocale_toLongLong9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toLongLong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qulonglong ctr_qt_core_ffi_QLocale_toULongLong9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toULongLong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_QLocale_toFloat9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toFloat(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QLocale_toDouble9(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toDouble(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize1(QLocale * this_ptr, qint64 bytes, int precision) {
  return new QString(this_ptr->formattedDataSize(bytes, precision));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize2(QLocale * this_ptr, qint64 bytes) {
  return new QString(this_ptr->formattedDataSize(bytes));
}


#endif

RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString6(QLatin1String const * string) {
  return new QVersionNumber(QVersionNumber::fromString(*string));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVersionNumber * ctr_qt_core_ffi_QVersionNumber_fromString7(QStringView const * string) {
  return new QVersionNumber(QVersionNumber::fromString(*string));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QProcess_startDetached9(QProcess * this_ptr) {
  return this_ptr->startDetached();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QRandomGenerator_seed2(QRandomGenerator * this_ptr) {
  this_ptr->seed();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringView * ctr_qt_core_ffi_QRegularExpressionMatch_capturedView2(QRegularExpressionMatch const * this_ptr) {
  return new QStringView(this_ptr->capturedView());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphoreReleaser * ctr_qt_core_ffi_QSemaphoreReleaser_QSemaphoreReleaser5(QSemaphore * sem) {
  return new QSemaphoreReleaser(*sem);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSemaphoreReleaser * ctr_qt_core_ffi_QSemaphoreReleaser_QSemaphoreReleaser6(QSemaphore * sem) {
  return new QSemaphoreReleaser(sem);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator64 * ctr_qt_core_ffi_static_cast_QRandomGenerator64_ptr(QRandomGenerator * ptr) {
  return static_cast< QRandomGenerator64 * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRandomGenerator * ctr_qt_core_ffi_static_cast_QRandomGenerator_ptr(QRandomGenerator64 * ptr) {
  return static_cast< QRandomGenerator * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCborError_staticMetaObject() {
  return &QCborError::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError::Code ctr_qt_core_ffi_QCborError_c(QCborError const * this_ptr) {
  return this_ptr->c;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCborError_c(QCborError * this_ptr, QCborError::Code value) {
  this_ptr->c = value;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborParserError_offset(QCborParserError const * this_ptr) {
  return this_ptr->offset;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCborParserError_offset(QCborParserError * this_ptr, qint64 value) {
  this_ptr->offset = value;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError const * ctr_qt_core_ffi_QCborParserError_error(QCborParserError const * this_ptr) {
  return &this_ptr->error;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError * ctr_qt_core_ffi_QCborParserError_error_mut(QCborParserError * this_ptr) {
  return &this_ptr->error;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCborParserError_error(QCborParserError * this_ptr, QCborError const * value) {
  this_ptr->error = *value;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCborValue_staticMetaObject() {
  return &QCborValue::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCborStreamReader_staticMetaObject() {
  return &QCborStreamReader::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_qstrnicmp2(char const * arg1, long long arg2, char const * arg3, long long arg4) {
  return qstrnicmp(arg1, arg2, arg3, arg4);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_compare(QByteArray const * this_ptr, char const * c, Qt::CaseSensitivity cs) {
  return this_ptr->compare(c, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_compare1(QByteArray const * this_ptr, QByteArray const * a, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*a, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isUpper(QByteArray const * this_ptr) {
  return this_ptr->isUpper();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QByteArray_isLower(QByteArray const * this_ptr) {
  return this_ptr->isLower();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringView_compare(QStringView const * this_ptr, QStringView const * other, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*other, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isUpper(QString const * this_ptr) {
  return this_ptr->isUpper();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_isLower(QString const * this_ptr) {
  return this_ptr->isLower();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare28(QString const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->compare(*s, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains8(QStringList const * this_ptr, QStringView const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerType4(char const * typeName, void (*destructor)(int, void *), void * (*constructor)(int, void *, void const *), int size, int flags, QMetaObject const * metaObject) {
  return QMetaType::registerType(typeName, destructor, constructor, size, QFlags< QMetaType::TypeFlag >(flags), metaObject);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_registerNormalizedType4(QByteArray const * normalizedTypeName, void (*destructor)(int, void *), void * (*constructor)(int, void *, void const *), int size, int flags, QMetaObject const * metaObject) {
  return QMetaType::registerNormalizedType(*normalizedTypeName, destructor, constructor, size, QFlags< QMetaType::TypeFlag >(flags), metaObject);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStream_operator__66(QTextStream * this_ptr, QStringView const * s) {
  return &this_ptr->operator<<(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1128(QCborTag t, QCborKnownTags kt) {
  return operator==(t, kt);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1129(QCborKnownTags kt, QCborTag t) {
  return operator==(kt, t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError::Code ctr_qt_core_ffi_QCborError_operator_QCborError__Code(QCborError const * this_ptr) {
  return this_ptr->operator QCborError::Code();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborError_toString(QCborError const * this_ptr) {
  return new QString(this_ptr->toString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1132(QDebug const * arg1, QCborSimpleType st) {
  return new QDebug(operator<<(*arg1, st));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1133(QDebug const * arg1, QCborKnownTags tg) {
  return new QDebug(operator<<(*arg1, tg));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1134(QDebug const * arg1, QCborTag tg) {
  return new QDebug(operator<<(*arg1, tg));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash292(QCborSimpleType tag, unsigned int seed) {
  return qHash(tag, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash293(QCborTag tag, unsigned int seed) {
  return qHash(tag, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpression_wildcardToRegularExpression(QString const * str) {
  return new QString(QRegularExpression::wildcardToRegularExpression(*str));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QRegularExpression_anchoredPattern(QString const * expression) {
  return new QString(QRegularExpression::anchoredPattern(*expression));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborParserError_errorString(QCborParserError const * this_ptr) {
  return new QString(this_ptr->errorString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue() {
  return new QCborValue();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue1(QCborValue::Type t_) {
  return new QCborValue(t_);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue2(bool b_) {
  return new QCborValue(b_);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue3(int i) {
  return new QCborValue(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue4(unsigned int u) {
  return new QCborValue(u);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue5(qint64 i) {
  return new QCborValue(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue6(double v) {
  return new QCborValue(v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue7(QCborSimpleType st) {
  return new QCborValue(st);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue8(QByteArray const * ba) {
  return new QCborValue(*ba);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue9(QString const * s) {
  return new QCborValue(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue10(QLatin1String const * s) {
  return new QCborValue(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue11(char const * s) {
  return new QCborValue(s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue12(QCborArray const * a) {
  return new QCborValue(*a);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue14(QCborMap const * m) {
  return new QCborValue(*m);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue16(QCborTag tag, QCborValue const * taggedValue) {
  return new QCborValue(tag, *taggedValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue17(QCborKnownTags t_, QCborValue const * tv) {
  return new QCborValue(t_, *tv);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue18(QDateTime const * dt) {
  return new QCborValue(*dt);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue19(QUrl const * url) {
  return new QCborValue(*url);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue20(QRegularExpression const * rx) {
  return new QCborValue(*rx);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue21(QUuid const * uuid) {
  return new QCborValue(*uuid);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValue_dQCborValue(QCborValue * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue23(QCborValue const * other) {
  return new QCborValue(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_operator_(QCborValue * this_ptr, QCborValue const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValue_swap(QCborValue * this_ptr, QCborValue * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue::Type ctr_qt_core_ffi_QCborValue_type(QCborValue const * this_ptr) {
  return this_ptr->type();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isInteger(QCborValue const * this_ptr) {
  return this_ptr->isInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isByteArray(QCborValue const * this_ptr) {
  return this_ptr->isByteArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isString(QCborValue const * this_ptr) {
  return this_ptr->isString();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isArray(QCborValue const * this_ptr) {
  return this_ptr->isArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isMap(QCborValue const * this_ptr) {
  return this_ptr->isMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isTag(QCborValue const * this_ptr) {
  return this_ptr->isTag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isFalse(QCborValue const * this_ptr) {
  return this_ptr->isFalse();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isTrue(QCborValue const * this_ptr) {
  return this_ptr->isTrue();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isBool(QCborValue const * this_ptr) {
  return this_ptr->isBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isNull(QCborValue const * this_ptr) {
  return this_ptr->isNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isUndefined(QCborValue const * this_ptr) {
  return this_ptr->isUndefined();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isDouble(QCborValue const * this_ptr) {
  return this_ptr->isDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isDateTime(QCborValue const * this_ptr) {
  return this_ptr->isDateTime();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isUrl(QCborValue const * this_ptr) {
  return this_ptr->isUrl();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isRegularExpression(QCborValue const * this_ptr) {
  return this_ptr->isRegularExpression();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isUuid(QCborValue const * this_ptr) {
  return this_ptr->isUuid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isInvalid(QCborValue const * this_ptr) {
  return this_ptr->isInvalid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isContainer(QCborValue const * this_ptr) {
  return this_ptr->isContainer();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isSimpleType(QCborValue const * this_ptr) {
  return this_ptr->isSimpleType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_isSimpleType1(QCborValue const * this_ptr, QCborSimpleType st) {
  return this_ptr->isSimpleType(st);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborSimpleType ctr_qt_core_ffi_QCborValue_toSimpleType(QCborValue const * this_ptr, QCborSimpleType defaultValue) {
  return this_ptr->toSimpleType(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborValue_toInteger(QCborValue const * this_ptr, qint64 defaultValue) {
  return this_ptr->toInteger(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_toBool(QCborValue const * this_ptr, bool defaultValue) {
  return this_ptr->toBool(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QCborValue_toDouble(QCborValue const * this_ptr, double defaultValue) {
  return this_ptr->toDouble(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborTag ctr_qt_core_ffi_QCborValue_tag(QCborValue const * this_ptr, QCborTag defaultValue) {
  return this_ptr->tag(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_taggedValue(QCborValue const * this_ptr, QCborValue const * defaultValue) {
  return new QCborValue(this_ptr->taggedValue(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValue_toByteArray(QCborValue const * this_ptr, QByteArray const * defaultValue) {
  return new QByteArray(this_ptr->toByteArray(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValue_toString(QCborValue const * this_ptr, QString const * defaultValue) {
  return new QString(this_ptr->toString(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QCborValue_toDateTime(QCborValue const * this_ptr, QDateTime const * defaultValue) {
  return new QDateTime(this_ptr->toDateTime(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QCborValue_toUrl(QCborValue const * this_ptr, QUrl const * defaultValue) {
  return new QUrl(this_ptr->toUrl(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QCborValue_toRegularExpression(QCborValue const * this_ptr, QRegularExpression const * defaultValue) {
  return new QRegularExpression(this_ptr->toRegularExpression(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QCborValue_toUuid(QCborValue const * this_ptr, QUuid const * defaultValue) {
  return new QUuid(this_ptr->toUuid(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborValue_toArray(QCborValue const * this_ptr) {
  return new QCborArray(this_ptr->toArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborValue_toArray1(QCborValue const * this_ptr, QCborArray const * defaultValue) {
  return new QCborArray(this_ptr->toArray(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborValue_toMap(QCborValue const * this_ptr) {
  return new QCborMap(this_ptr->toMap());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborValue_toMap1(QCborValue const * this_ptr, QCborMap const * defaultValue) {
  return new QCborMap(this_ptr->toMap(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_operator__(QCborValue const * this_ptr, QString const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_operator__1(QCborValue const * this_ptr, QLatin1String const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_operator__2(QCborValue const * this_ptr, qint64 key) {
  return new QCborValue(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCborValue_compare(QCborValue const * this_ptr, QCborValue const * other) {
  return this_ptr->compare(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_operator__3(QCborValue const * this_ptr, QCborValue const * other) {
  return this_ptr->operator==(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_operator_2(QCborValue const * this_ptr, QCborValue const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromVariant(QVariant const * variant) {
  return new QCborValue(QCborValue::fromVariant(*variant));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QCborValue_toVariant(QCborValue const * this_ptr) {
  return new QVariant(this_ptr->toVariant());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromJsonValue(QJsonValue const * v) {
  return new QCborValue(QCborValue::fromJsonValue(*v));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QCborValue_toJsonValue(QCborValue const * this_ptr) {
  return new QJsonValue(this_ptr->toJsonValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor(QCborStreamReader * reader) {
  return new QCborValue(QCborValue::fromCbor(*reader));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor1(QByteArray const * ba, QCborParserError * error) {
  return new QCborValue(QCborValue::fromCbor(*ba, error));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor2(char const * data, long long len, QCborParserError * error) {
  return new QCborValue(QCborValue::fromCbor(data, len, error));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor3(quint8 const * data, long long len, QCborParserError * error) {
  return new QCborValue(QCborValue::fromCbor(data, len, error));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValue_toCbor(QCborValue * this_ptr, int opt) {
  return new QByteArray(this_ptr->toCbor(QFlags< QCborValue::EncodingOption >(opt)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValue_toCbor1(QCborValue * this_ptr, QCborStreamWriter * writer, int opt) {
  this_ptr->toCbor(*writer, QFlags< QCborValue::EncodingOption >(opt));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValue_toDiagnosticNotation(QCborValue const * this_ptr, int opts) {
  return new QString(this_ptr->toDiagnosticNotation(QFlags< QCborValue::DiagnosticNotationOption >(opts)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_operator_QCborValue(QCborValueRef const * this_ptr) {
  return new QCborValue(this_ptr->operator QCborValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_QCborValueRef(QCborValueRef const * arg1) {
  return new QCborValueRef(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_operator_(QCborValueRef * this_ptr, QCborValue const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_operator_2(QCborValueRef * this_ptr, QCborValueRef const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue::Type ctr_qt_core_ffi_QCborValueRef_type(QCborValueRef const * this_ptr) {
  return this_ptr->type();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isInteger(QCborValueRef const * this_ptr) {
  return this_ptr->isInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isByteArray(QCborValueRef const * this_ptr) {
  return this_ptr->isByteArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isString(QCborValueRef const * this_ptr) {
  return this_ptr->isString();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isArray(QCborValueRef const * this_ptr) {
  return this_ptr->isArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isMap(QCborValueRef const * this_ptr) {
  return this_ptr->isMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isTag(QCborValueRef const * this_ptr) {
  return this_ptr->isTag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isFalse(QCborValueRef const * this_ptr) {
  return this_ptr->isFalse();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isTrue(QCborValueRef const * this_ptr) {
  return this_ptr->isTrue();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isBool(QCborValueRef const * this_ptr) {
  return this_ptr->isBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isNull(QCborValueRef const * this_ptr) {
  return this_ptr->isNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isUndefined(QCborValueRef const * this_ptr) {
  return this_ptr->isUndefined();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isDouble(QCborValueRef const * this_ptr) {
  return this_ptr->isDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isDateTime(QCborValueRef const * this_ptr) {
  return this_ptr->isDateTime();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isUrl(QCborValueRef const * this_ptr) {
  return this_ptr->isUrl();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isRegularExpression(QCborValueRef const * this_ptr) {
  return this_ptr->isRegularExpression();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isUuid(QCborValueRef const * this_ptr) {
  return this_ptr->isUuid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isInvalid(QCborValueRef const * this_ptr) {
  return this_ptr->isInvalid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isContainer(QCborValueRef const * this_ptr) {
  return this_ptr->isContainer();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isSimpleType(QCborValueRef const * this_ptr) {
  return this_ptr->isSimpleType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_isSimpleType1(QCborValueRef const * this_ptr, QCborSimpleType st) {
  return this_ptr->isSimpleType(st);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborTag ctr_qt_core_ffi_QCborValueRef_tag(QCborValueRef const * this_ptr, QCborTag defaultValue) {
  return this_ptr->tag(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_taggedValue(QCborValueRef const * this_ptr, QCborValue const * defaultValue) {
  return new QCborValue(this_ptr->taggedValue(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborValueRef_toInteger(QCborValueRef const * this_ptr, qint64 defaultValue) {
  return this_ptr->toInteger(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_toBool(QCborValueRef const * this_ptr, bool defaultValue) {
  return this_ptr->toBool(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QCborValueRef_toDouble(QCborValueRef const * this_ptr, double defaultValue) {
  return this_ptr->toDouble(defaultValue);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValueRef_toByteArray(QCborValueRef const * this_ptr, QByteArray const * defaultValue) {
  return new QByteArray(this_ptr->toByteArray(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValueRef_toString(QCborValueRef const * this_ptr, QString const * defaultValue) {
  return new QString(this_ptr->toString(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QCborValueRef_toDateTime(QCborValueRef const * this_ptr, QDateTime const * defaultValue) {
  return new QDateTime(this_ptr->toDateTime(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QCborValueRef_toUrl(QCborValueRef const * this_ptr, QUrl const * defaultValue) {
  return new QUrl(this_ptr->toUrl(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QCborValueRef_toRegularExpression(QCborValueRef const * this_ptr, QRegularExpression const * defaultValue) {
  return new QRegularExpression(this_ptr->toRegularExpression(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QCborValueRef_toUuid(QCborValueRef const * this_ptr, QUuid const * defaultValue) {
  return new QUuid(this_ptr->toUuid(*defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborValueRef_toArray(QCborValueRef const * this_ptr) {
  return new QCborArray(this_ptr->toArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborValueRef_toArray1(QCborValueRef const * this_ptr, QCborArray const * a) {
  return new QCborArray(this_ptr->toArray(*a));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborValueRef_toMap(QCborValueRef const * this_ptr) {
  return new QCborMap(this_ptr->toMap());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborValueRef_toMap1(QCborValueRef const * this_ptr, QCborMap const * m) {
  return new QCborMap(this_ptr->toMap(*m));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCborValueRef_compare(QCborValueRef const * this_ptr, QCborValue const * other) {
  return this_ptr->compare(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_operator__(QCborValueRef const * this_ptr, QCborValue const * other) {
  return this_ptr->operator==(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_operator_3(QCborValueRef const * this_ptr, QCborValue const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QCborValueRef_toVariant(QCborValueRef const * this_ptr) {
  return new QVariant(this_ptr->toVariant());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QCborValueRef_toJsonValue(QCborValueRef const * this_ptr) {
  return new QJsonValue(this_ptr->toJsonValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValueRef_toCbor(QCborValueRef * this_ptr, int opt) {
  return new QByteArray(this_ptr->toCbor(QFlags< QCborValue::EncodingOption >(opt)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValueRef_toCbor1(QCborValueRef * this_ptr, QCborStreamWriter * writer, int opt) {
  this_ptr->toCbor(*writer, QFlags< QCborValue::EncodingOption >(opt));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValueRef_toDiagnosticNotation(QCborValueRef * this_ptr, int opt) {
  return new QString(this_ptr->toDiagnosticNotation(QFlags< QCborValue::DiagnosticNotationOption >(opt)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash294(QCborValue const * value, unsigned int seed) {
  return qHash(*value, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1135(QDebug const * arg1, QCborValue const * v) {
  return new QDebug(operator<<(*arg1, *v));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_Iterator() {
  return new QCborArray::Iterator();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_Iterator1(QCborArray::Iterator const * arg1) {
  return new QCborArray::Iterator(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator_(QCborArray::Iterator * this_ptr, QCborArray::Iterator const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_Iterator_operator_1(QCborArray::Iterator const * this_ptr) {
  return new QCborValueRef(this_ptr->operator*());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_Iterator_operator__(QCborArray::Iterator const * this_ptr) {
  return this_ptr->operator->();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_Iterator_operator__1(QCborArray::Iterator * this_ptr, long long j) {
  return new QCborValueRef(this_ptr->operator[](j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__2(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator_2(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__4(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator_3(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__5(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__6(QCborArray::Iterator const * this_ptr, QCborArray::ConstIterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator_4(QCborArray::Iterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__8(QCborArray::Iterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator_5(QCborArray::Iterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_Iterator_operator__9(QCborArray::Iterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__10(QCborArray::Iterator * this_ptr) {
  return &this_ptr->operator++();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__11(QCborArray::Iterator * this_ptr, int arg1) {
  return new QCborArray::Iterator(this_ptr->operator++(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__12(QCborArray::Iterator * this_ptr) {
  return &this_ptr->operator--();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__13(QCborArray::Iterator * this_ptr, int arg1) {
  return new QCborArray::Iterator(this_ptr->operator--(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__14(QCborArray::Iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator__15(QCborArray::Iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator_6(QCborArray::Iterator const * this_ptr, long long j) {
  return new QCborArray::Iterator(this_ptr->operator+(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_Iterator_operator_7(QCborArray::Iterator const * this_ptr, long long j) {
  return new QCborArray::Iterator(this_ptr->operator-(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborArray_Iterator_operator_8(QCborArray::Iterator const * this_ptr, QCborArray::Iterator const * j) {
  return this_ptr->operator-(*j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_ConstIterator() {
  return new QCborArray::ConstIterator();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_ConstIterator1(QCborArray::ConstIterator const * arg1) {
  return new QCborArray::ConstIterator(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator_(QCborArray::ConstIterator * this_ptr, QCborArray::ConstIterator const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_ConstIterator_operator_1(QCborArray::ConstIterator const * this_ptr) {
  return new QCborValueRef(this_ptr->operator*());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef const * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__(QCborArray::ConstIterator const * this_ptr) {
  return this_ptr->operator->();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__1(QCborArray::ConstIterator * this_ptr, long long j) {
  return new QCborValueRef(this_ptr->operator[](j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__2(QCborArray::ConstIterator const * this_ptr, QCborArray::Iterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator_2(QCborArray::ConstIterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__4(QCborArray::ConstIterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator_3(QCborArray::ConstIterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__5(QCborArray::ConstIterator const * this_ptr, QCborArray::Iterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__6(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator_4(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__8(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator_5(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_ConstIterator_operator__9(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__10(QCborArray::ConstIterator * this_ptr) {
  return &this_ptr->operator++();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__11(QCborArray::ConstIterator * this_ptr, int arg1) {
  return new QCborArray::ConstIterator(this_ptr->operator++(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__12(QCborArray::ConstIterator * this_ptr) {
  return &this_ptr->operator--();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__13(QCborArray::ConstIterator * this_ptr, int arg1) {
  return new QCborArray::ConstIterator(this_ptr->operator--(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__14(QCborArray::ConstIterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator__15(QCborArray::ConstIterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator_6(QCborArray::ConstIterator const * this_ptr, long long j) {
  return new QCborArray::ConstIterator(this_ptr->operator+(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_ConstIterator_operator_7(QCborArray::ConstIterator const * this_ptr, long long j) {
  return new QCborArray::ConstIterator(this_ptr->operator-(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborArray_ConstIterator_operator_8(QCborArray::ConstIterator const * this_ptr, QCborArray::ConstIterator const * j) {
  return this_ptr->operator-(*j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_QCborArray() {
  return new QCborArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_QCborArray1(QCborArray const * other) {
  return new QCborArray(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_operator_(QCborArray * this_ptr, QCborArray const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_dQCborArray(QCborArray * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_swap(QCborArray * this_ptr, QCborArray * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_toCborValue(QCborArray const * this_ptr) {
  return new QCborValue(this_ptr->toCborValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborArray_size(QCborArray const * this_ptr) {
  return this_ptr->size();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_isEmpty(QCborArray const * this_ptr) {
  return this_ptr->isEmpty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_clear(QCborArray * this_ptr) {
  this_ptr->clear();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_at(QCborArray const * this_ptr, long long i) {
  return new QCborValue(this_ptr->at(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_first(QCborArray const * this_ptr) {
  return new QCborValue(this_ptr->first());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_last(QCborArray const * this_ptr) {
  return new QCborValue(this_ptr->last());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_operator__(QCborArray const * this_ptr, long long i) {
  return new QCborValue(this_ptr->operator[](i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_first1(QCborArray * this_ptr) {
  return new QCborValueRef(this_ptr->first());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_last1(QCborArray * this_ptr) {
  return new QCborValueRef(this_ptr->last());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborArray_operator__1(QCborArray * this_ptr, long long i) {
  return new QCborValueRef(this_ptr->operator[](i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_insert(QCborArray * this_ptr, long long i, QCborValue const * value) {
  this_ptr->insert(i, *value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_prepend(QCborArray * this_ptr, QCborValue const * value) {
  this_ptr->prepend(*value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_append(QCborArray * this_ptr, QCborValue const * value) {
  this_ptr->append(*value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_extract(QCborArray * this_ptr, QCborArray::ConstIterator const * it) {
  return new QCborValue(this_ptr->extract(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_extract1(QCborArray * this_ptr, QCborArray::Iterator const * it) {
  return new QCborValue(this_ptr->extract(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_removeAt(QCborArray * this_ptr, long long i) {
  this_ptr->removeAt(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_takeAt(QCborArray * this_ptr, long long i) {
  return new QCborValue(this_ptr->takeAt(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_removeFirst(QCborArray * this_ptr) {
  this_ptr->removeFirst();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_removeLast(QCborArray * this_ptr) {
  this_ptr->removeLast();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_takeFirst(QCborArray * this_ptr) {
  return new QCborValue(this_ptr->takeFirst());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborArray_takeLast(QCborArray * this_ptr) {
  return new QCborValue(this_ptr->takeLast());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_contains(QCborArray const * this_ptr, QCborValue const * value) {
  return this_ptr->contains(*value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCborArray_compare(QCborArray const * this_ptr, QCborArray const * other) {
  return this_ptr->compare(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_operator__2(QCborArray const * this_ptr, QCborArray const * other) {
  return this_ptr->operator==(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_operator_1(QCborArray const * this_ptr, QCborArray const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_begin(QCborArray * this_ptr) {
  return new QCborArray::Iterator(this_ptr->begin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_constBegin(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->constBegin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_begin1(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->begin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_cbegin(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->cbegin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_end(QCborArray * this_ptr) {
  return new QCborArray::Iterator(this_ptr->end());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_constEnd(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->constEnd());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_end1(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->end());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::ConstIterator * ctr_qt_core_ffi_QCborArray_cend(QCborArray const * this_ptr) {
  return new QCborArray::ConstIterator(this_ptr->cend());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_insert2(QCborArray * this_ptr, QCborArray::Iterator const * before, QCborValue const * value) {
  return new QCborArray::Iterator(this_ptr->insert(*before, *value));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_insert3(QCborArray * this_ptr, QCborArray::ConstIterator const * before, QCborValue const * value) {
  return new QCborArray::Iterator(this_ptr->insert(*before, *value));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_erase(QCborArray * this_ptr, QCborArray::Iterator const * it) {
  return new QCborArray::Iterator(this_ptr->erase(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray::Iterator * ctr_qt_core_ffi_QCborArray_erase1(QCborArray * this_ptr, QCborArray::ConstIterator const * it) {
  return new QCborArray::Iterator(this_ptr->erase(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_push_back(QCborArray * this_ptr, QCborValue const * t) {
  this_ptr->push_back(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_push_front(QCborArray * this_ptr, QCborValue const * t) {
  this_ptr->push_front(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_pop_front(QCborArray * this_ptr) {
  this_ptr->pop_front();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_pop_back(QCborArray * this_ptr) {
  this_ptr->pop_back();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborArray_empty(QCborArray const * this_ptr) {
  return this_ptr->empty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_operator_2(QCborArray const * this_ptr, QCborValue const * v) {
  return new QCborArray(this_ptr->operator+(*v));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_operator__4(QCborArray * this_ptr, QCborValue const * v) {
  return &this_ptr->operator+=(*v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_operator__5(QCborArray * this_ptr, QCborValue const * v) {
  return &this_ptr->operator<<(*v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_fromStringList(QStringList const * list) {
  return new QCborArray(QCborArray::fromStringList(*list));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_fromVariantList(QList< QVariant > const * list) {
  return new QCborArray(QCborArray::fromVariantList(*list));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborArray * ctr_qt_core_ffi_QCborArray_fromJsonArray(QJsonArray const * array) {
  return new QCborArray(QCborArray::fromJsonArray(*array));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QList< QVariant > * ctr_qt_core_ffi_QCborArray_toVariantList(QCborArray const * this_ptr) {
  return new QList< QVariant >(this_ptr->toVariantList());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonArray * ctr_qt_core_ffi_QCborArray_toJsonArray(QCborArray const * this_ptr) {
  return new QJsonArray(this_ptr->toJsonArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash295(QCborArray const * array, unsigned int seed) {
  return qHash(*array, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1136(QDebug const * arg1, QCborArray const * a) {
  return new QDebug(operator<<(*arg1, *a));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_Iterator() {
  return new QCborMap::Iterator();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_Iterator1(QCborMap::Iterator const * arg1) {
  return new QCborMap::Iterator(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator_(QCborMap::Iterator * this_ptr, QCborMap::Iterator const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_QCborMap_Iterator_operator_1(QCborMap::Iterator const * this_ptr) {
  return new QPair< QCborValueRef, QCborValueRef >(this_ptr->operator*());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_Iterator_operator__(QCborMap::Iterator const * this_ptr) {
  return this_ptr->operator->();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_Iterator_key(QCborMap::Iterator const * this_ptr) {
  return new QCborValue(this_ptr->key());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_Iterator_value(QCborMap::Iterator const * this_ptr) {
  return new QCborValueRef(this_ptr->value());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__1(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator_2(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__3(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator_3(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__4(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__5(QCborMap::Iterator const * this_ptr, QCborMap::ConstIterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator_4(QCborMap::Iterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__7(QCborMap::Iterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator_5(QCborMap::Iterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_Iterator_operator__8(QCborMap::Iterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__9(QCborMap::Iterator * this_ptr) {
  return &this_ptr->operator++();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__10(QCborMap::Iterator * this_ptr, int arg1) {
  return new QCborMap::Iterator(this_ptr->operator++(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__11(QCborMap::Iterator * this_ptr) {
  return &this_ptr->operator--();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__12(QCborMap::Iterator * this_ptr, int arg1) {
  return new QCborMap::Iterator(this_ptr->operator--(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__13(QCborMap::Iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator__14(QCborMap::Iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator_6(QCborMap::Iterator const * this_ptr, long long j) {
  return new QCborMap::Iterator(this_ptr->operator+(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_Iterator_operator_7(QCborMap::Iterator const * this_ptr, long long j) {
  return new QCborMap::Iterator(this_ptr->operator-(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborMap_Iterator_operator_8(QCborMap::Iterator const * this_ptr, QCborMap::Iterator const * j) {
  return this_ptr->operator-(*j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_ConstIterator() {
  return new QCborMap::ConstIterator();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_ConstIterator1(QCborMap::ConstIterator const * arg1) {
  return new QCborMap::ConstIterator(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator_(QCborMap::ConstIterator * this_ptr, QCborMap::ConstIterator const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_QCborMap_ConstIterator_operator_1(QCborMap::ConstIterator const * this_ptr) {
  return new QPair< QCborValueRef, QCborValueRef >(this_ptr->operator*());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef const * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__(QCborMap::ConstIterator const * this_ptr) {
  return this_ptr->operator->();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_ConstIterator_key(QCborMap::ConstIterator const * this_ptr) {
  return new QCborValue(this_ptr->key());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_ConstIterator_value(QCborMap::ConstIterator const * this_ptr) {
  return new QCborValueRef(this_ptr->value());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__1(QCborMap::ConstIterator const * this_ptr, QCborMap::Iterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator_2(QCborMap::ConstIterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__3(QCborMap::ConstIterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator_3(QCborMap::ConstIterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__4(QCborMap::ConstIterator const * this_ptr, QCborMap::Iterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__5(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * o) {
  return this_ptr->operator==(*o);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator_4(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__7(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator<=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator_5(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator>(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_ConstIterator_operator__8(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * other) {
  return this_ptr->operator>=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__9(QCborMap::ConstIterator * this_ptr) {
  return &this_ptr->operator++();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__10(QCborMap::ConstIterator * this_ptr, int arg1) {
  return new QCborMap::ConstIterator(this_ptr->operator++(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__11(QCborMap::ConstIterator * this_ptr) {
  return &this_ptr->operator--();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__12(QCborMap::ConstIterator * this_ptr, int arg1) {
  return new QCborMap::ConstIterator(this_ptr->operator--(arg1));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__13(QCborMap::ConstIterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator__14(QCborMap::ConstIterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator_6(QCborMap::ConstIterator const * this_ptr, long long j) {
  return new QCborMap::ConstIterator(this_ptr->operator+(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_ConstIterator_operator_7(QCborMap::ConstIterator const * this_ptr, long long j) {
  return new QCborMap::ConstIterator(this_ptr->operator-(j));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborMap_ConstIterator_operator_8(QCborMap::ConstIterator const * this_ptr, QCborMap::ConstIterator const * j) {
  return this_ptr->operator-(*j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_QCborMap() {
  return new QCborMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_QCborMap1(QCborMap const * other) {
  return new QCborMap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_operator_(QCborMap * this_ptr, QCborMap const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_dQCborMap(QCborMap * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_swap(QCborMap * this_ptr, QCborMap * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_toCborValue(QCborMap const * this_ptr) {
  return new QCborValue(this_ptr->toCborValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborMap_size(QCborMap const * this_ptr) {
  return this_ptr->size();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_isEmpty(QCborMap const * this_ptr) {
  return this_ptr->isEmpty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_clear(QCborMap * this_ptr) {
  this_ptr->clear();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QCborMap_keys(QCborMap const * this_ptr) {
  return new QVector< QCborValue >(this_ptr->keys());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_value(QCborMap const * this_ptr, qint64 key) {
  return new QCborValue(this_ptr->value(key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_value1(QCborMap const * this_ptr, QLatin1String const * key) {
  return new QCborValue(this_ptr->value(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_value2(QCborMap const * this_ptr, QString const * key) {
  return new QCborValue(this_ptr->value(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_value3(QCborMap const * this_ptr, QCborValue const * key) {
  return new QCborValue(this_ptr->value(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_operator__(QCborMap const * this_ptr, qint64 key) {
  return new QCborValue(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_operator__1(QCborMap const * this_ptr, QLatin1String const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_operator__2(QCborMap const * this_ptr, QString const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_operator__3(QCborMap const * this_ptr, QCborValue const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_operator__4(QCborMap * this_ptr, qint64 key) {
  return new QCborValueRef(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_operator__5(QCborMap * this_ptr, QLatin1String const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_operator__6(QCborMap * this_ptr, QString const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborMap_operator__7(QCborMap * this_ptr, QCborValue const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_take(QCborMap * this_ptr, qint64 key) {
  return new QCborValue(this_ptr->take(key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_take1(QCborMap * this_ptr, QLatin1String const * key) {
  return new QCborValue(this_ptr->take(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_take2(QCborMap * this_ptr, QString const * key) {
  return new QCborValue(this_ptr->take(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_take3(QCborMap * this_ptr, QCborValue const * key) {
  return new QCborValue(this_ptr->take(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_remove(QCborMap * this_ptr, qint64 key) {
  this_ptr->remove(key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_remove1(QCborMap * this_ptr, QLatin1String const * key) {
  this_ptr->remove(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_remove2(QCborMap * this_ptr, QString const * key) {
  this_ptr->remove(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_remove3(QCborMap * this_ptr, QCborValue const * key) {
  this_ptr->remove(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_contains(QCborMap const * this_ptr, qint64 key) {
  return this_ptr->contains(key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_contains1(QCborMap const * this_ptr, QLatin1String const * key) {
  return this_ptr->contains(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_contains2(QCborMap const * this_ptr, QString const * key) {
  return this_ptr->contains(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_contains3(QCborMap const * this_ptr, QCborValue const * key) {
  return this_ptr->contains(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCborMap_compare(QCborMap const * this_ptr, QCborMap const * other) {
  return this_ptr->compare(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_operator__8(QCborMap const * this_ptr, QCborMap const * other) {
  return this_ptr->operator==(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_operator_1(QCborMap const * this_ptr, QCborMap const * other) {
  return this_ptr->operator<(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_begin(QCborMap * this_ptr) {
  return new QCborMap::Iterator(this_ptr->begin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constBegin(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->constBegin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_begin1(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->begin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_cbegin(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->cbegin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_end(QCborMap * this_ptr) {
  return new QCborMap::Iterator(this_ptr->end());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constEnd(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->constEnd());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_end1(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->end());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_cend(QCborMap const * this_ptr) {
  return new QCborMap::ConstIterator(this_ptr->cend());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_erase(QCborMap * this_ptr, QCborMap::Iterator const * it) {
  return new QCborMap::Iterator(this_ptr->erase(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_erase1(QCborMap * this_ptr, QCborMap::ConstIterator const * it) {
  return new QCborMap::Iterator(this_ptr->erase(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_extract(QCborMap * this_ptr, QCborMap::Iterator const * it) {
  return new QCborValue(this_ptr->extract(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborMap_extract1(QCborMap * this_ptr, QCborMap::ConstIterator const * it) {
  return new QCborValue(this_ptr->extract(*it));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborMap_empty(QCborMap const * this_ptr) {
  return this_ptr->empty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_find(QCborMap * this_ptr, qint64 key) {
  return new QCborMap::Iterator(this_ptr->find(key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_find1(QCborMap * this_ptr, QLatin1String const * key) {
  return new QCborMap::Iterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_find2(QCborMap * this_ptr, QString const * key) {
  return new QCborMap::Iterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_find3(QCborMap * this_ptr, QCborValue const * key) {
  return new QCborMap::Iterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constFind(QCborMap const * this_ptr, qint64 key) {
  return new QCborMap::ConstIterator(this_ptr->constFind(key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constFind1(QCborMap const * this_ptr, QLatin1String const * key) {
  return new QCborMap::ConstIterator(this_ptr->constFind(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constFind2(QCborMap const * this_ptr, QString const * key) {
  return new QCborMap::ConstIterator(this_ptr->constFind(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_constFind3(QCborMap const * this_ptr, QCborValue const * key) {
  return new QCborMap::ConstIterator(this_ptr->constFind(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_find4(QCborMap const * this_ptr, qint64 key) {
  return new QCborMap::ConstIterator(this_ptr->find(key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_find5(QCborMap const * this_ptr, QLatin1String const * key) {
  return new QCborMap::ConstIterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_find6(QCborMap const * this_ptr, QString const * key) {
  return new QCborMap::ConstIterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::ConstIterator * ctr_qt_core_ffi_QCborMap_find7(QCborMap const * this_ptr, QCborValue const * key) {
  return new QCborMap::ConstIterator(this_ptr->find(*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_insert(QCborMap * this_ptr, qint64 key, QCborValue const * value_) {
  return new QCborMap::Iterator(this_ptr->insert(key, *value_));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_insert1(QCborMap * this_ptr, QLatin1String const * key, QCborValue const * value_) {
  return new QCborMap::Iterator(this_ptr->insert(*key, *value_));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_insert2(QCborMap * this_ptr, QString const * key, QCborValue const * value_) {
  return new QCborMap::Iterator(this_ptr->insert(*key, *value_));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_insert3(QCborMap * this_ptr, QCborValue const * key, QCborValue const * value_) {
  return new QCborMap::Iterator(this_ptr->insert(*key, *value_));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap::Iterator * ctr_qt_core_ffi_QCborMap_insert4(QCborMap * this_ptr, QPair< QCborValue, QCborValue > const * v) {
  return new QCborMap::Iterator(this_ptr->insert(*v));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_fromVariantMap(QMap< QString, QVariant > const * map) {
  return new QCborMap(QCborMap::fromVariantMap(*map));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_fromVariantHash(QHash< QString, QVariant > const * hash) {
  return new QCborMap(QCborMap::fromVariantHash(*hash));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborMap * ctr_qt_core_ffi_QCborMap_fromJsonObject(QJsonObject const * o) {
  return new QCborMap(QCborMap::fromJsonObject(*o));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMap< QString, QVariant > * ctr_qt_core_ffi_QCborMap_toVariantMap(QCborMap const * this_ptr) {
  return new QMap< QString, QVariant >(this_ptr->toVariantMap());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_core_ffi_QCborMap_toVariantHash(QCborMap const * this_ptr) {
  return new QHash< QString, QVariant >(this_ptr->toVariantHash());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonObject * ctr_qt_core_ffi_QCborMap_toJsonObject(QCborMap const * this_ptr) {
  return new QJsonObject(this_ptr->toJsonObject());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash296(QCborMap const * map, unsigned int seed) {
  return qHash(*map, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1137(QDebug const * arg1, QCborMap const * m) {
  return new QDebug(operator<<(*arg1, *m));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16_qfloat16() {
  return new qfloat16();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16_qfloat161(float f) {
  return new qfloat16(f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_qfloat16_operator_float(qfloat16 const * this_ptr) {
  return this_ptr->operator float();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_qFloatToFloat16(qfloat16 * arg1, float const * arg2, long long length) {
  qFloatToFloat16(arg1, arg2, length);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_qFloatFromFloat16(float * arg1, qfloat16 const * arg2, long long length) {
  qFloatFromFloat16(arg1, arg2, length);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qIsInf4(qfloat16 const * f) {
  return qIsInf(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNaN4(qfloat16 const * f) {
  return qIsNaN(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qIsFinite4(qfloat16 const * f) {
  return qIsFinite(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_qRound4(qfloat16 const * d) {
  return qRound(*d);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_qRound644(qfloat16 const * d) {
  return qRound64(*d);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyCompare4(qfloat16 const * p1, qfloat16 const * p2) {
  return qFuzzyCompare(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qIsNull4(qfloat16 const * f) {
  return qIsNull(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_qIntCast4(qfloat16 const * f) {
  return qIntCast(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator_436(qfloat16 const * a) {
  return new qfloat16(operator-(*a));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator_437(qfloat16 const * a, qfloat16 const * b) {
  return new qfloat16(operator+(*a, *b));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator_438(qfloat16 const * a, qfloat16 const * b) {
  return new qfloat16(operator-(*a, *b));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator_439(qfloat16 const * a, qfloat16 const * b) {
  return new qfloat16(operator*(*a, *b));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator_440(qfloat16 const * a, qfloat16 const * b) {
  return new qfloat16(operator/(*a, *b));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_449(qfloat16 const * lhs, double rhs) {
  return operator+(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_450(double lhs, qfloat16 const * rhs) {
  return operator+(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_451(qfloat16 const * lhs, double rhs) {
  return operator-(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_452(double lhs, qfloat16 const * rhs) {
  return operator-(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_453(qfloat16 const * lhs, double rhs) {
  return operator*(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_454(double lhs, qfloat16 const * rhs) {
  return operator*(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_455(qfloat16 const * lhs, double rhs) {
  return operator/(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_456(double lhs, qfloat16 const * rhs) {
  return operator/(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1142(qfloat16 * lhs, double rhs) {
  return &operator+=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1143(qfloat16 * lhs, double rhs) {
  return &operator-=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1144(qfloat16 * lhs, double rhs) {
  return &operator*=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1145(qfloat16 * lhs, double rhs) {
  return &operator/=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_457(qfloat16 const * lhs, float rhs) {
  return operator+(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_458(float lhs, qfloat16 const * rhs) {
  return operator+(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_459(qfloat16 const * lhs, float rhs) {
  return operator-(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_460(float lhs, qfloat16 const * rhs) {
  return operator-(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_461(qfloat16 const * lhs, float rhs) {
  return operator*(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_462(float lhs, qfloat16 const * rhs) {
  return operator*(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_463(qfloat16 const * lhs, float rhs) {
  return operator/(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_operator_464(float lhs, qfloat16 const * rhs) {
  return operator/(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1146(qfloat16 * lhs, float rhs) {
  return &operator+=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1147(qfloat16 * lhs, float rhs) {
  return &operator-=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1148(qfloat16 * lhs, float rhs) {
  return &operator*=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_operator__1149(qfloat16 * lhs, float rhs) {
  return &operator/=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_465(qfloat16 const * lhs, int rhs) {
  return operator+(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_466(int lhs, qfloat16 const * rhs) {
  return operator+(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_467(qfloat16 const * lhs, int rhs) {
  return operator-(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_468(int lhs, qfloat16 const * rhs) {
  return operator-(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_469(qfloat16 const * lhs, int rhs) {
  return operator*(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_470(int lhs, qfloat16 const * rhs) {
  return operator*(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_471(qfloat16 const * lhs, int rhs) {
  return operator/(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_operator_472(int lhs, qfloat16 const * rhs) {
  return operator/(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_473(qfloat16 const * a, qfloat16 const * b) {
  return operator>(*a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_474(qfloat16 const * a, qfloat16 const * b) {
  return operator<(*a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1150(qfloat16 const * a, qfloat16 const * b) {
  return operator>=(*a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1151(qfloat16 const * a, qfloat16 const * b) {
  return operator<=(*a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1152(qfloat16 const * a, qfloat16 const * b) {
  return operator==(*a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_479(qfloat16 const * lhs, double rhs) {
  return operator<(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_480(double lhs, qfloat16 const * rhs) {
  return operator<(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_481(qfloat16 const * lhs, double rhs) {
  return operator>(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_482(double lhs, qfloat16 const * rhs) {
  return operator>(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1162(qfloat16 const * lhs, double rhs) {
  return operator>=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1163(double lhs, qfloat16 const * rhs) {
  return operator>=(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1164(qfloat16 const * lhs, double rhs) {
  return operator<=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1165(double lhs, qfloat16 const * rhs) {
  return operator<=(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1166(qfloat16 const * lhs, double rhs) {
  return operator==(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1167(double lhs, qfloat16 const * rhs) {
  return operator==(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_483(qfloat16 const * lhs, float rhs) {
  return operator<(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_484(float lhs, qfloat16 const * rhs) {
  return operator<(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_485(qfloat16 const * lhs, float rhs) {
  return operator>(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_486(float lhs, qfloat16 const * rhs) {
  return operator>(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1170(qfloat16 const * lhs, float rhs) {
  return operator>=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1171(float lhs, qfloat16 const * rhs) {
  return operator>=(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1172(qfloat16 const * lhs, float rhs) {
  return operator<=(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1173(float lhs, qfloat16 const * rhs) {
  return operator<=(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1174(qfloat16 const * lhs, float rhs) {
  return operator==(*lhs, rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1175(float lhs, qfloat16 const * rhs) {
  return operator==(lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_487(qfloat16 const * a, int b) {
  return operator>(*a, b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_488(int a, qfloat16 const * b) {
  return operator>(a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_489(qfloat16 const * a, int b) {
  return operator<(*a, b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_490(int a, qfloat16 const * b) {
  return operator<(a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1178(qfloat16 const * a, int b) {
  return operator>=(*a, b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1179(int a, qfloat16 const * b) {
  return operator>=(a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1180(qfloat16 const * a, int b) {
  return operator<=(*a, b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1181(int a, qfloat16 const * b) {
  return operator<=(a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1182(qfloat16 const * a, int b) {
  return operator==(*a, b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1183(int a, qfloat16 const * b) {
  return operator==(a, *b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_qFuzzyIsNull4(qfloat16 const * f) {
  return qFuzzyIsNull(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamWriter * ctr_qt_core_ffi_QCborStreamWriter_QCborStreamWriter(QIODevice * device) {
  return new QCborStreamWriter(device);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamWriter * ctr_qt_core_ffi_QCborStreamWriter_QCborStreamWriter1(QByteArray * data) {
  return new QCborStreamWriter(data);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_dQCborStreamWriter(QCborStreamWriter * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_setDevice(QCborStreamWriter * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QCborStreamWriter_device(QCborStreamWriter const * this_ptr) {
  return this_ptr->device();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append(QCborStreamWriter * this_ptr, quint64 u) {
  this_ptr->append(u);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append1(QCborStreamWriter * this_ptr, qint64 i) {
  this_ptr->append(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append2(QCborStreamWriter * this_ptr, QCborNegativeInteger n) {
  this_ptr->append(n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append3(QCborStreamWriter * this_ptr, QByteArray const * ba) {
  this_ptr->append(*ba);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append4(QCborStreamWriter * this_ptr, QLatin1String const * str) {
  this_ptr->append(*str);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append5(QCborStreamWriter * this_ptr, QStringView const * str) {
  this_ptr->append(*str);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append6(QCborStreamWriter * this_ptr, QCborTag tag) {
  this_ptr->append(tag);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append7(QCborStreamWriter * this_ptr, QCborKnownTags tag) {
  this_ptr->append(tag);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append8(QCborStreamWriter * this_ptr, QCborSimpleType st) {
  this_ptr->append(st);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append9(QCborStreamWriter * this_ptr, qfloat16 const * f) {
  this_ptr->append(*f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append10(QCborStreamWriter * this_ptr, float f) {
  this_ptr->append(f);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append11(QCborStreamWriter * this_ptr, double d) {
  this_ptr->append(d);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_appendByteString(QCborStreamWriter * this_ptr, char const * data, long long len) {
  this_ptr->appendByteString(data, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_appendTextString(QCborStreamWriter * this_ptr, char const * utf8, long long len) {
  this_ptr->appendTextString(utf8, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append12(QCborStreamWriter * this_ptr, bool b) {
  this_ptr->append(b);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_appendNull(QCborStreamWriter * this_ptr) {
  this_ptr->appendNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_appendUndefined(QCborStreamWriter * this_ptr) {
  this_ptr->appendUndefined();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append13(QCborStreamWriter * this_ptr, int i) {
  this_ptr->append(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append14(QCborStreamWriter * this_ptr, unsigned int u) {
  this_ptr->append(u);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append15(QCborStreamWriter * this_ptr, char const * str, long long size) {
  this_ptr->append(str, size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_startArray(QCborStreamWriter * this_ptr) {
  this_ptr->startArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_startArray1(QCborStreamWriter * this_ptr, quint64 count) {
  this_ptr->startArray(count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamWriter_endArray(QCborStreamWriter * this_ptr) {
  return this_ptr->endArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_startMap(QCborStreamWriter * this_ptr) {
  this_ptr->startMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_startMap1(QCborStreamWriter * this_ptr, quint64 count) {
  this_ptr->startMap(count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamWriter_endMap(QCborStreamWriter * this_ptr) {
  return this_ptr->endMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader * ctr_qt_core_ffi_QCborStreamReader_QCborStreamReader() {
  return new QCborStreamReader();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader * ctr_qt_core_ffi_QCborStreamReader_QCborStreamReader1(char const * data, long long len) {
  return new QCborStreamReader(data, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader * ctr_qt_core_ffi_QCborStreamReader_QCborStreamReader2(quint8 const * data, long long len) {
  return new QCborStreamReader(data, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader * ctr_qt_core_ffi_QCborStreamReader_QCborStreamReader3(QByteArray const * data) {
  return new QCborStreamReader(*data);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader * ctr_qt_core_ffi_QCborStreamReader_QCborStreamReader4(QIODevice * device) {
  return new QCborStreamReader(device);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_dQCborStreamReader(QCborStreamReader * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_setDevice(QCborStreamReader * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QIODevice * ctr_qt_core_ffi_QCborStreamReader_device(QCborStreamReader const * this_ptr) {
  return this_ptr->device();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_addData(QCborStreamReader * this_ptr, QByteArray const * data) {
  this_ptr->addData(*data);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_addData1(QCborStreamReader * this_ptr, char const * data, long long len) {
  this_ptr->addData(data, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_addData2(QCborStreamReader * this_ptr, quint8 const * data, long long len) {
  this_ptr->addData(data, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_reparse(QCborStreamReader * this_ptr) {
  this_ptr->reparse();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_clear(QCborStreamReader * this_ptr) {
  this_ptr->clear();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_reset(QCborStreamReader * this_ptr) {
  this_ptr->reset();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError * ctr_qt_core_ffi_QCborStreamReader_lastError(QCborStreamReader * this_ptr) {
  return new QCborError(this_ptr->lastError());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborStreamReader_currentOffset(QCborStreamReader const * this_ptr) {
  return this_ptr->currentOffset();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isValid(QCborStreamReader const * this_ptr) {
  return this_ptr->isValid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCborStreamReader_containerDepth(QCborStreamReader const * this_ptr) {
  return this_ptr->containerDepth();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::Type ctr_qt_core_ffi_QCborStreamReader_parentContainerType(QCborStreamReader const * this_ptr) {
  return this_ptr->parentContainerType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_hasNext(QCborStreamReader const * this_ptr) {
  return this_ptr->hasNext();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_next(QCborStreamReader * this_ptr, int maxRecursion) {
  return this_ptr->next(maxRecursion);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::Type ctr_qt_core_ffi_QCborStreamReader_type(QCborStreamReader const * this_ptr) {
  return this_ptr->type();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isUnsignedInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->isUnsignedInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isNegativeInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->isNegativeInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->isInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isByteArray(QCborStreamReader const * this_ptr) {
  return this_ptr->isByteArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isString(QCborStreamReader const * this_ptr) {
  return this_ptr->isString();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isArray(QCborStreamReader const * this_ptr) {
  return this_ptr->isArray();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isMap(QCborStreamReader const * this_ptr) {
  return this_ptr->isMap();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isTag(QCborStreamReader const * this_ptr) {
  return this_ptr->isTag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isSimpleType(QCborStreamReader const * this_ptr) {
  return this_ptr->isSimpleType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isFloat16(QCborStreamReader const * this_ptr) {
  return this_ptr->isFloat16();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isFloat(QCborStreamReader const * this_ptr) {
  return this_ptr->isFloat();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isDouble(QCborStreamReader const * this_ptr) {
  return this_ptr->isDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isInvalid(QCborStreamReader const * this_ptr) {
  return this_ptr->isInvalid();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isSimpleType1(QCborStreamReader const * this_ptr, QCborSimpleType st) {
  return this_ptr->isSimpleType(st);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isFalse(QCborStreamReader const * this_ptr) {
  return this_ptr->isFalse();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isTrue(QCborStreamReader const * this_ptr) {
  return this_ptr->isTrue();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isBool(QCborStreamReader const * this_ptr) {
  return this_ptr->isBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isNull(QCborStreamReader const * this_ptr) {
  return this_ptr->isNull();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isUndefined(QCborStreamReader const * this_ptr) {
  return this_ptr->isUndefined();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isLengthKnown(QCborStreamReader const * this_ptr) {
  return this_ptr->isLengthKnown();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint64 ctr_qt_core_ffi_QCborStreamReader_length(QCborStreamReader const * this_ptr) {
  return this_ptr->length();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_isContainer(QCborStreamReader const * this_ptr) {
  return this_ptr->isContainer();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_enterContainer(QCborStreamReader * this_ptr) {
  return this_ptr->enterContainer();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_leaveContainer(QCborStreamReader * this_ptr) {
  return this_ptr->leaveContainer();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QString > * ctr_qt_core_ffi_QCborStreamReader_readString(QCborStreamReader * this_ptr) {
  return new QCborStreamReader::StringResult< QString >(this_ptr->readString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QByteArray > * ctr_qt_core_ffi_QCborStreamReader_readByteArray(QCborStreamReader * this_ptr) {
  return new QCborStreamReader::StringResult< QByteArray >(this_ptr->readByteArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_core_ffi_QCborStreamReader_currentStringChunkSize(QCborStreamReader const * this_ptr) {
  return this_ptr->currentStringChunkSize();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< long long > * ctr_qt_core_ffi_QCborStreamReader_readStringChunk(QCborStreamReader * this_ptr, char * ptr, long long maxlen) {
  return new QCborStreamReader::StringResult< long long >(this_ptr->readStringChunk(ptr, maxlen));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_toBool(QCborStreamReader const * this_ptr) {
  return this_ptr->toBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborTag ctr_qt_core_ffi_QCborStreamReader_toTag(QCborStreamReader const * this_ptr) {
  return this_ptr->toTag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT quint64 ctr_qt_core_ffi_QCborStreamReader_toUnsignedInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->toUnsignedInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborNegativeInteger ctr_qt_core_ffi_QCborStreamReader_toNegativeInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->toNegativeInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborSimpleType ctr_qt_core_ffi_QCborStreamReader_toSimpleType(QCborStreamReader const * this_ptr) {
  return this_ptr->toSimpleType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_QCborStreamReader_toFloat16(QCborStreamReader const * this_ptr) {
  return new qfloat16(this_ptr->toFloat16());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_QCborStreamReader_toFloat(QCborStreamReader const * this_ptr) {
  return this_ptr->toFloat();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QCborStreamReader_toDouble(QCborStreamReader const * this_ptr) {
  return this_ptr->toDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborStreamReader_toInteger(QCborStreamReader const * this_ptr) {
  return this_ptr->toInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QCryptographicHash_hashLength(QCryptographicHash::Algorithm method) {
  return QCryptographicHash::hashLength(method);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_QDeadlineTimer__q_data(QDeadlineTimer const * this_ptr) {
  return new QPair< qint64, unsigned int >(this_ptr->_q_data());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qbswap28(qfloat16 const * source) {
  return new qfloat16(qbswap(*source));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT float ctr_qt_core_ffi_qbswap29(float source) {
  return qbswap(source);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_qbswap30(double source) {
  return qbswap(source);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash297(QJsonValue const * value, unsigned int seed) {
  return qHash(*value, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash298(QJsonArray const * array, unsigned int seed) {
  return qHash(*array, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash299(QJsonObject const * object, unsigned int seed) {
  return qHash(*object, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT char const * ctr_qt_core_ffi_QMetaEnum_enumName(QMetaEnum const * this_ptr) {
  return this_ptr->enumName();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned char ctr_qt_core_ffi_qPluginArchRequirements() {
  return qPluginArchRequirements();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QSortFilterProxyModel_filterRegularExpression(QSortFilterProxyModel const * this_ptr) {
  return new QRegularExpression(this_ptr->filterRegularExpression());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterRegularExpression(QSortFilterProxyModel * this_ptr, QString const * pattern) {
  this_ptr->setFilterRegularExpression(*pattern);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QSortFilterProxyModel_setFilterRegularExpression1(QSortFilterProxyModel * this_ptr, QRegularExpression const * regularExpression) {
  this_ptr->setFilterRegularExpression(*regularExpression);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTextDecoder_needsMoreData(QTextDecoder const * this_ptr) {
  return this_ptr->needsMoreData();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait8(QWaitCondition * this_ptr, QMutex * lockedMutex, QDeadlineTimer const * deadline) {
  return this_ptr->wait(lockedMutex, *deadline);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QWaitCondition_wait9(QWaitCondition * this_ptr, QReadWriteLock * lockedReadWriteLock, QDeadlineTimer const * deadline) {
  return this_ptr->wait(lockedReadWriteLock, *deadline);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborError_dQCborError(QCborError * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError * ctr_qt_core_ffi_QCborError_QCborError() {
  return new QCborError();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError * ctr_qt_core_ffi_QCborError_QCborError1(QCborError const * other) {
  return new QCborError(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborError * ctr_qt_core_ffi_QCborError_operator_(QCborError * this_ptr, QCborError const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborParserError_dQCborParserError(QCborParserError * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborParserError * ctr_qt_core_ffi_QCborParserError_QCborParserError() {
  return new QCborParserError();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborParserError * ctr_qt_core_ffi_QCborParserError_QCborParserError1(QCborParserError const * other) {
  return new QCborParserError(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborParserError * ctr_qt_core_ffi_QCborParserError_operator_(QCborParserError * this_ptr, QCborParserError const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValueRef_dQCborValueRef(QCborValueRef * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_Iterator_dIterator(QCborArray::Iterator * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborArray_ConstIterator_dConstIterator(QCborArray::ConstIterator * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_Iterator_dIterator(QCborMap::Iterator * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborMap_ConstIterator_dConstIterator(QCborMap::ConstIterator * this_ptr) {
  delete this_ptr;
}


#endif

RITUAL_EXPORT void ctr_qt_core_ffi_qfloat16_dqfloat16(qfloat16 * this_ptr) {
  delete this_ptr;
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16_qfloat162(qfloat16 const * other) {
  return new qfloat16(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16_operator_(qfloat16 * this_ptr, qfloat16 const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValue, QCborValue > * ctr_qt_core_ffi_QPair_QCborValue_QCborValue_QPair() {
  return new QPair< QCborValue, QCborValue >();
}


#endif

RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_QPair_qint64_unsigned_int_QPair() {
  return new QPair< qint64, unsigned int >();
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_QPair_QCborValueRef_QCborValueRef_QPair1(QCborValueRef const * t1, QCborValueRef const * t2) {
  return new QPair< QCborValueRef, QCborValueRef >(*t1, *t2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValue, QCborValue > * ctr_qt_core_ffi_QPair_QCborValue_QCborValue_QPair1(QCborValue const * t1, QCborValue const * t2) {
  return new QPair< QCborValue, QCborValue >(*t1, *t2);
}


#endif

RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_QPair_qint64_unsigned_int_QPair1(qint64 const * t1, unsigned int const * t2) {
  return new QPair< qint64, unsigned int >(*t1, *t2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QCborValueRef_QCborValueRef_swap(QPair< QCborValueRef, QCborValueRef > * this_ptr, QPair< QCborValueRef, QCborValueRef > * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QCborValue_QCborValue_swap(QPair< QCborValue, QCborValue > * this_ptr, QPair< QCborValue, QCborValue > * other) {
  this_ptr->swap(*other);
}


#endif

RITUAL_EXPORT void ctr_qt_core_ffi_QPair_qint64_unsigned_int_swap(QPair< qint64, unsigned int > * this_ptr, QPair< qint64, unsigned int > * other) {
  this_ptr->swap(*other);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1186(QPair< QCborValueRef, QCborValueRef > const * p1, QPair< QCborValueRef, QCborValueRef > const * p2) {
  return operator==(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1187(QPair< QCborValue, QCborValue > const * p1, QPair< QCborValue, QCborValue > const * p2) {
  return operator==(*p1, *p2);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1188(QPair< qint64, unsigned int > const * p1, QPair< qint64, unsigned int > const * p2) {
  return operator==(*p1, *p2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_491(QPair< QCborValueRef, QCborValueRef > const * p1, QPair< QCborValueRef, QCborValueRef > const * p2) {
  return operator<(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_492(QPair< QCborValue, QCborValue > const * p1, QPair< QCborValue, QCborValue > const * p2) {
  return operator<(*p1, *p2);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator_493(QPair< qint64, unsigned int > const * p1, QPair< qint64, unsigned int > const * p2) {
  return operator<(*p1, *p2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_494(QPair< QCborValueRef, QCborValueRef > const * p1, QPair< QCborValueRef, QCborValueRef > const * p2) {
  return operator>(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_495(QPair< QCborValue, QCborValue > const * p1, QPair< QCborValue, QCborValue > const * p2) {
  return operator>(*p1, *p2);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator_496(QPair< qint64, unsigned int > const * p1, QPair< qint64, unsigned int > const * p2) {
  return operator>(*p1, *p2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1192(QPair< QCborValueRef, QCborValueRef > const * p1, QPair< QCborValueRef, QCborValueRef > const * p2) {
  return operator<=(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1193(QPair< QCborValue, QCborValue > const * p1, QPair< QCborValue, QCborValue > const * p2) {
  return operator<=(*p1, *p2);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1194(QPair< qint64, unsigned int > const * p1, QPair< qint64, unsigned int > const * p2) {
  return operator<=(*p1, *p2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1195(QPair< QCborValueRef, QCborValueRef > const * p1, QPair< QCborValueRef, QCborValueRef > const * p2) {
  return operator>=(*p1, *p2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1196(QPair< QCborValue, QCborValue > const * p1, QPair< QCborValue, QCborValue > const * p2) {
  return operator>=(*p1, *p2);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1197(QPair< qint64, unsigned int > const * p1, QPair< qint64, unsigned int > const * p2) {
  return operator>=(*p1, *p2);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_qMakePair6(QCborValueRef const * x, QCborValueRef const * y) {
  return new QPair< QCborValueRef, QCborValueRef >(qMakePair(*x, *y));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValue, QCborValue > * ctr_qt_core_ffi_qMakePair7(QCborValue const * x, QCborValue const * y) {
  return new QPair< QCborValue, QCborValue >(qMakePair(*x, *y));
}


#endif

RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_qMakePair8(qint64 const * x, unsigned int const * y) {
  return new QPair< qint64, unsigned int >(qMakePair(*x, *y));
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash300(QPair< QCborValueRef, QCborValueRef > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash301(QPair< QCborValue, QCborValue > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#endif

RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash302(QPair< qint64, unsigned int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_QVector() {
  return new QVector< QCborValue >();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_QVector1(int size) {
  return new QVector< QCborValue >(size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_QVector2(int size, QCborValue const * t) {
  return new QVector< QCborValue >(size, *t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_QVector3(QVector< QCborValue > const * v) {
  return new QVector< QCborValue >(*v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_dQVector(QVector< QCborValue > * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator_(QVector< QCborValue > * this_ptr, QVector< QCborValue > const * v) {
  return &this_ptr->operator=(*v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_swap(QVector< QCborValue > * this_ptr, QVector< QCborValue > * other) {
  this_ptr->swap(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_operator__(QVector< QCborValue > const * this_ptr, QVector< QCborValue > const * v) {
  return this_ptr->operator==(*v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_size(QVector< QCborValue > const * this_ptr) {
  return this_ptr->size();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_isEmpty(QVector< QCborValue > const * this_ptr) {
  return this_ptr->isEmpty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_resize(QVector< QCborValue > * this_ptr, int size) {
  this_ptr->resize(size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_capacity(QVector< QCborValue > const * this_ptr) {
  return this_ptr->capacity();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_reserve(QVector< QCborValue > * this_ptr, int size) {
  this_ptr->reserve(size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_squeeze(QVector< QCborValue > * this_ptr) {
  this_ptr->squeeze();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_detach(QVector< QCborValue > * this_ptr) {
  this_ptr->detach();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_isDetached(QVector< QCborValue > const * this_ptr) {
  return this_ptr->isDetached();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_setSharable(QVector< QCborValue > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_isSharedWith(QVector< QCborValue > const * this_ptr, QVector< QCborValue > const * other) {
  return this_ptr->isSharedWith(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_data(QVector< QCborValue > * this_ptr) {
  return this_ptr->data();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_data1(QVector< QCborValue > const * this_ptr) {
  return this_ptr->data();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_constData(QVector< QCborValue > const * this_ptr) {
  return this_ptr->constData();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_clear(QVector< QCborValue > * this_ptr) {
  this_ptr->clear();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_at(QVector< QCborValue > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_operator__2(QVector< QCborValue > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_operator__3(QVector< QCborValue > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_append(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  this_ptr->append(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_append2(QVector< QCborValue > * this_ptr, QVector< QCborValue > const * l) {
  this_ptr->append(*l);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_prepend(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  this_ptr->prepend(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_insert(QVector< QCborValue > * this_ptr, int i, QCborValue const * t) {
  this_ptr->insert(i, *t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_insert1(QVector< QCborValue > * this_ptr, int i, int n, QCborValue const * t) {
  this_ptr->insert(i, n, *t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_replace(QVector< QCborValue > * this_ptr, int i, QCborValue const * t) {
  this_ptr->replace(i, *t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_remove(QVector< QCborValue > * this_ptr, int i) {
  this_ptr->remove(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_remove1(QVector< QCborValue > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_removeFirst(QVector< QCborValue > * this_ptr) {
  this_ptr->removeFirst();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_removeLast(QVector< QCborValue > * this_ptr) {
  this_ptr->removeLast();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_takeFirst(QVector< QCborValue > * this_ptr) {
  return new QCborValue(this_ptr->takeFirst());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_takeLast(QVector< QCborValue > * this_ptr) {
  return new QCborValue(this_ptr->takeLast());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_fill(QVector< QCborValue > * this_ptr, QCborValue const * t, int size) {
  return &this_ptr->fill(*t, size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_indexOf(QVector< QCborValue > const * this_ptr, QCborValue const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_lastIndexOf(QVector< QCborValue > const * this_ptr, QCborValue const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_contains(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->contains(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_count(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->count(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_removeAt(QVector< QCborValue > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_removeAll(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  return this_ptr->removeAll(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_removeOne(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  return this_ptr->removeOne(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_length(QVector< QCborValue > const * this_ptr) {
  return this_ptr->length();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_takeAt(QVector< QCborValue > * this_ptr, int i) {
  return new QCborValue(this_ptr->takeAt(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_move(QVector< QCborValue > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_count1(QVector< QCborValue > const * this_ptr) {
  return this_ptr->count();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_first(QVector< QCborValue > * this_ptr) {
  return &this_ptr->first();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_first1(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->first();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_constFirst(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->constFirst();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_last(QVector< QCborValue > * this_ptr) {
  return &this_ptr->last();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_last1(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->last();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_constLast(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->constLast();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_startsWith(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->startsWith(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_endsWith(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->endsWith(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_mid(QVector< QCborValue > const * this_ptr, int pos, int len) {
  return new QVector< QCborValue >(this_ptr->mid(pos, len));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_value(QVector< QCborValue > const * this_ptr, int i) {
  return new QCborValue(this_ptr->value(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_value1(QVector< QCborValue > const * this_ptr, int i, QCborValue const * defaultValue) {
  return new QCborValue(this_ptr->value(i, *defaultValue));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_push_back(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  this_ptr->push_back(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_push_front(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  this_ptr->push_front(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_pop_back(QVector< QCborValue > * this_ptr) {
  this_ptr->pop_back();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_pop_front(QVector< QCborValue > * this_ptr) {
  this_ptr->pop_front();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QVector_QCborValue_empty(QVector< QCborValue > const * this_ptr) {
  return this_ptr->empty();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_front(QVector< QCborValue > * this_ptr) {
  return &this_ptr->front();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_front1(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->front();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QVector_QCborValue_back(QVector< QCborValue > * this_ptr) {
  return &this_ptr->back();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue const * ctr_qt_core_ffi_QVector_QCborValue_back1(QVector< QCborValue > const * this_ptr) {
  return &this_ptr->back();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator__4(QVector< QCborValue > * this_ptr, QVector< QCborValue > const * l) {
  return &this_ptr->operator+=(*l);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator_2(QVector< QCborValue > const * this_ptr, QVector< QCborValue > const * l) {
  return new QVector< QCborValue >(this_ptr->operator+(*l));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator__5(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  return &this_ptr->operator+=(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator__6(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  return &this_ptr->operator<<(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_operator__7(QVector< QCborValue > * this_ptr, QVector< QCborValue > const * l) {
  return &this_ptr->operator<<(*l);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash303(QVector< QCborValue > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_497(QVector< QCborValue > const * lhs, QVector< QCborValue > const * rhs) {
  return operator<(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator_498(QVector< QCborValue > const * lhs, QVector< QCborValue > const * rhs) {
  return operator>(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1198(QVector< QCborValue > const * lhs, QVector< QCborValue > const * rhs) {
  return operator<=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1199(QVector< QCborValue > const * lhs, QVector< QCborValue > const * rhs) {
  return operator>=(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1200(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QCborValue::EncodingOption >(e));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1201(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QCborValue::DiagnosticNotationOption >(e));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1204(QDataStream * s, QVector< QCborValue > * v) {
  return &operator>>(*s, *v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1205(QDataStream * s, QVector< QCborValue > const * v) {
  return &operator<<(*s, *v);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1207(QDataStream * s, QPair< QCborValue, QCborValue > * p) {
  return &operator>>(*s, *p);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1208(QDataStream * s, QPair< qint64, unsigned int > * p) {
  return &operator>>(*s, *p);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1209(QDataStream * s, QPair< QCborValueRef, QCborValueRef > const * p) {
  return &operator<<(*s, *p);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1210(QDataStream * s, QPair< QCborValue, QCborValue > const * p) {
  return &operator<<(*s, *p);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1211(QDataStream * s, QPair< qint64, unsigned int > const * p) {
  return &operator<<(*s, *p);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1212(QDebug const * debug, QVector< QCborValue > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1213(QDebug const * debug, QPair< QCborValueRef, QCborValueRef > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1214(QDebug const * debug, QPair< QCborValue, QCborValue > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


#endif

RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1215(QDebug const * debug, QPair< qint64, unsigned int > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1216(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QCborValue::EncodingOption >(flags)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1217(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QCborValue::DiagnosticNotationOption >(flags)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QCborValueRef_QCborValueRef_dQPair(QPair< QCborValueRef, QCborValueRef > * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QPair_QCborValue_QCborValue_dQPair(QPair< QCborValue, QCborValue > * this_ptr) {
  delete this_ptr;
}


#endif

RITUAL_EXPORT void ctr_qt_core_ffi_QPair_qint64_unsigned_int_dQPair(QPair< qint64, unsigned int > * this_ptr) {
  delete this_ptr;
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_QPair_QCborValueRef_QCborValueRef_QPair2(QPair< QCborValueRef, QCborValueRef > const * other) {
  return new QPair< QCborValueRef, QCborValueRef >(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValue, QCborValue > * ctr_qt_core_ffi_QPair_QCborValue_QCborValue_QPair2(QPair< QCborValue, QCborValue > const * other) {
  return new QPair< QCborValue, QCborValue >(*other);
}


#endif

RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_QPair_qint64_unsigned_int_QPair2(QPair< qint64, unsigned int > const * other) {
  return new QPair< qint64, unsigned int >(*other);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValueRef, QCborValueRef > * ctr_qt_core_ffi_QPair_QCborValueRef_QCborValueRef_operator_(QPair< QCborValueRef, QCborValueRef > * this_ptr, QPair< QCborValueRef, QCborValueRef > const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPair< QCborValue, QCborValue > * ctr_qt_core_ffi_QPair_QCborValue_QCborValue_operator_(QPair< QCborValue, QCborValue > * this_ptr, QPair< QCborValue, QCborValue > const * other) {
  return &this_ptr->operator=(*other);
}


#endif

RITUAL_EXPORT QPair< qint64, unsigned int > * ctr_qt_core_ffi_QPair_qint64_unsigned_int_operator_(QPair< qint64, unsigned int > * this_ptr, QPair< qint64, unsigned int > const * other) {
  return &this_ptr->operator=(*other);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash304(QPair< QCborValueRef, QCborValueRef > const * key) {
  return qHash(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash305(QPair< QCborValue, QCborValue > const * key) {
  return qHash(*key);
}


#endif

RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash306(QPair< qint64, unsigned int > const * key) {
  return qHash(*key);
}


#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_fill1(QVector< QCborValue > * this_ptr, QCborValue const * t) {
  return &this_ptr->fill(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_indexOf1(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->indexOf(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QVector_QCborValue_lastIndexOf1(QVector< QCborValue > const * this_ptr, QCborValue const * t) {
  return this_ptr->lastIndexOf(*t);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVector< QCborValue > * ctr_qt_core_ffi_QVector_QCborValue_mid1(QVector< QCborValue > const * this_ptr, int pos) {
  return new QVector< QCborValue >(this_ptr->mid(pos));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash307(QVector< QCborValue > const * key) {
  return qHash(*key);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_shrink_to_fit(QVector< QCborValue > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_StringResult_QString_dStringResult(QCborStreamReader::StringResult< QString > * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_StringResult_QByteArray_dStringResult(QCborStreamReader::StringResult< QByteArray > * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamReader_StringResult_long_long_dStringResult(QCborStreamReader::StringResult< long long > * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QString > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QString_StringResult() {
  return new QCborStreamReader::StringResult< QString >();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QByteArray > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QByteArray_StringResult() {
  return new QCborStreamReader::StringResult< QByteArray >();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< long long > * ctr_qt_core_ffi_QCborStreamReader_StringResult_long_long_StringResult() {
  return new QCborStreamReader::StringResult< long long >();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QString > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QString_StringResult1(QCborStreamReader::StringResult< QString > const * other) {
  return new QCborStreamReader::StringResult< QString >(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QByteArray > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QByteArray_StringResult1(QCborStreamReader::StringResult< QByteArray > const * other) {
  return new QCborStreamReader::StringResult< QByteArray >(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< long long > * ctr_qt_core_ffi_QCborStreamReader_StringResult_long_long_StringResult1(QCborStreamReader::StringResult< long long > const * other) {
  return new QCborStreamReader::StringResult< long long >(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QString > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QString_operator_(QCborStreamReader::StringResult< QString > * this_ptr, QCborStreamReader::StringResult< QString > const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< QByteArray > * ctr_qt_core_ffi_QCborStreamReader_StringResult_QByteArray_operator_(QCborStreamReader::StringResult< QByteArray > * this_ptr, QCborStreamReader::StringResult< QByteArray > const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborStreamReader::StringResult< long long > * ctr_qt_core_ffi_QCborStreamReader_StringResult_long_long_operator_(QCborStreamReader::StringResult< long long > * this_ptr, QCborStreamReader::StringResult< long long > const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_qstrnicmp3(char const * arg1, long long arg2, char const * arg3) {
  return qstrnicmp(arg1, arg2, arg3);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_compare2(QByteArray const * this_ptr, char const * c) {
  return this_ptr->compare(c);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QByteArray_compare3(QByteArray const * this_ptr, QByteArray const * a) {
  return this_ptr->compare(*a);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringView_compare1(QStringView const * this_ptr, QStringView const * other) {
  return this_ptr->compare(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QString_compare29(QString const * this_ptr, QStringView const * s) {
  return this_ptr->compare(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringList_contains9(QStringList const * this_ptr, QStringView const * str) {
  return this_ptr->contains(*str);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash308(QCborSimpleType tag) {
  return qHash(tag);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash309(QCborTag tag) {
  return qHash(tag);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue25(QCborTag tag) {
  return new QCborValue(tag);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue26(QCborKnownTags t_) {
  return new QCborValue(t_);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborSimpleType ctr_qt_core_ffi_QCborValue_toSimpleType1(QCborValue const * this_ptr) {
  return this_ptr->toSimpleType();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborValue_toInteger1(QCborValue const * this_ptr) {
  return this_ptr->toInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValue_toBool1(QCborValue const * this_ptr) {
  return this_ptr->toBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QCborValue_toDouble1(QCborValue const * this_ptr) {
  return this_ptr->toDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborTag ctr_qt_core_ffi_QCborValue_tag1(QCborValue const * this_ptr) {
  return this_ptr->tag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_taggedValue1(QCborValue const * this_ptr) {
  return new QCborValue(this_ptr->taggedValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValue_toByteArray1(QCborValue const * this_ptr) {
  return new QByteArray(this_ptr->toByteArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValue_toString1(QCborValue const * this_ptr) {
  return new QString(this_ptr->toString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QCborValue_toDateTime1(QCborValue const * this_ptr) {
  return new QDateTime(this_ptr->toDateTime());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QCborValue_toUrl1(QCborValue const * this_ptr) {
  return new QUrl(this_ptr->toUrl());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QCborValue_toRegularExpression1(QCborValue const * this_ptr) {
  return new QRegularExpression(this_ptr->toRegularExpression());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QCborValue_toUuid1(QCborValue const * this_ptr) {
  return new QUuid(this_ptr->toUuid());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor4(QByteArray const * ba) {
  return new QCborValue(QCborValue::fromCbor(*ba));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor5(char const * data, long long len) {
  return new QCborValue(QCborValue::fromCbor(data, len));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_fromCbor6(quint8 const * data, long long len) {
  return new QCborValue(QCborValue::fromCbor(data, len));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValue_toCbor2(QCborValue * this_ptr) {
  return new QByteArray(this_ptr->toCbor());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValue_toCbor3(QCborValue * this_ptr, QCborStreamWriter * writer) {
  this_ptr->toCbor(*writer);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValue_toDiagnosticNotation1(QCborValue const * this_ptr) {
  return new QString(this_ptr->toDiagnosticNotation());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborTag ctr_qt_core_ffi_QCborValueRef_tag1(QCborValueRef const * this_ptr) {
  return this_ptr->tag();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_taggedValue1(QCborValueRef const * this_ptr) {
  return new QCborValue(this_ptr->taggedValue());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT qint64 ctr_qt_core_ffi_QCborValueRef_toInteger1(QCborValueRef const * this_ptr) {
  return this_ptr->toInteger();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborValueRef_toBool1(QCborValueRef const * this_ptr) {
  return this_ptr->toBool();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_core_ffi_QCborValueRef_toDouble1(QCborValueRef const * this_ptr) {
  return this_ptr->toDouble();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValueRef_toByteArray1(QCborValueRef const * this_ptr) {
  return new QByteArray(this_ptr->toByteArray());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValueRef_toString1(QCborValueRef const * this_ptr) {
  return new QString(this_ptr->toString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QCborValueRef_toDateTime1(QCborValueRef const * this_ptr) {
  return new QDateTime(this_ptr->toDateTime());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUrl * ctr_qt_core_ffi_QCborValueRef_toUrl1(QCborValueRef const * this_ptr) {
  return new QUrl(this_ptr->toUrl());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QRegularExpression * ctr_qt_core_ffi_QCborValueRef_toRegularExpression1(QCborValueRef const * this_ptr) {
  return new QRegularExpression(this_ptr->toRegularExpression());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QUuid * ctr_qt_core_ffi_QCborValueRef_toUuid1(QCborValueRef const * this_ptr) {
  return new QUuid(this_ptr->toUuid());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QByteArray * ctr_qt_core_ffi_QCborValueRef_toCbor2(QCborValueRef * this_ptr) {
  return new QByteArray(this_ptr->toCbor());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborValueRef_toCbor3(QCborValueRef * this_ptr, QCborStreamWriter * writer) {
  this_ptr->toCbor(*writer);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCborValueRef_toDiagnosticNotation1(QCborValueRef * this_ptr) {
  return new QString(this_ptr->toDiagnosticNotation());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash310(QCborValue const * value) {
  return qHash(*value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash311(QCborArray const * array) {
  return qHash(*array);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash312(QCborMap const * map) {
  return qHash(*map);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QCborStreamWriter_append16(QCborStreamWriter * this_ptr, char const * str) {
  this_ptr->append(str);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QCborStreamReader_next1(QCborStreamReader * this_ptr) {
  return this_ptr->next();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash313(QJsonValue const * value) {
  return qHash(*value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash314(QJsonArray const * array) {
  return qHash(*array);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHash315(QJsonObject const * object) {
  return qHash(*object);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QConcatenateTablesProxyModel_staticMetaObject() {
  return &QConcatenateTablesProxyModel::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTransposeProxyModel_staticMetaObject() {
  return &QTransposeProxyModel::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf12(QStringList const * this_ptr, QStringView const * str, int from) {
  return this_ptr->indexOf(*str, from);
}


#endif

RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf13(QStringList const * this_ptr, QLatin1String const * str, int from) {
  return this_ptr->indexOf(*str, from);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf12(QStringList const * this_ptr, QStringView const * str, int from) {
  return this_ptr->lastIndexOf(*str, from);
}


#endif

RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf13(QStringList const * this_ptr, QLatin1String const * str, int from) {
  return this_ptr->lastIndexOf(*str, from);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QMetaType_id(QMetaType const * this_ptr) {
  return this_ptr->id();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toLong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong(QLocale const * this_ptr, QString const * s, bool * ok) {
  return this_ptr->toULong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toLong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong1(QLocale const * this_ptr, QStringRef const * s, bool * ok) {
  return this_ptr->toULong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong2(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toLong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong2(QLocale const * this_ptr, QStringView const * s, bool * ok) {
  return this_ptr->toULong(*s, ok);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString48(QLocale const * this_ptr, long i) {
  return new QString(this_ptr->toString(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString49(QLocale const * this_ptr, unsigned long i) {
  return new QString(this_ptr->toString(i));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize6(QLocale const * this_ptr, qint64 bytes, int precision, int format) {
  return new QString(this_ptr->formattedDataSize(bytes, precision, QFlags< QLocale::DataSizeFormat >(format)));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_QDebug_verbosity2(QDebug * this_ptr, int verbosityLevel) {
  return &this_ptr->verbosity(verbosityLevel);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValue_operator__10(QCborValue * this_ptr, qint64 key) {
  return new QCborValueRef(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValue_operator__11(QCborValue * this_ptr, QLatin1String const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValue_operator__12(QCborValue * this_ptr, QString const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_operator__4(QCborValueRef const * this_ptr, QString const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_operator__5(QCborValueRef const * this_ptr, QLatin1String const * key) {
  return new QCborValue(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValueRef_operator__6(QCborValueRef const * this_ptr, qint64 key) {
  return new QCborValue(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_operator__7(QCborValueRef * this_ptr, qint64 key) {
  return new QCborValueRef(this_ptr->operator[](key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_operator__8(QCborValueRef * this_ptr, QLatin1String const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QCborValueRef * ctr_qt_core_ffi_QCborValueRef_operator__9(QCborValueRef * this_ptr, QString const * key) {
  return new QCborValueRef(this_ptr->operator[](*key));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1310(QDataStream * arg1, QCborValue const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1311(QDataStream * arg1, QCborValue * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1312(QDataStream * arg1, QCborArray const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1313(QDataStream * arg1, QCborArray * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1314(QDataStream * arg1, QCborMap const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1315(QDataStream * arg1, QCborMap * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QConcatenateTablesProxyModel_metaObject(QConcatenateTablesProxyModel const * this_ptr) {
  return this_ptr->metaObject();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void * ctr_qt_core_ffi_QConcatenateTablesProxyModel_qt_metacast(QConcatenateTablesProxyModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_qt_metacall(QConcatenateTablesProxyModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QConcatenateTablesProxyModel_tr(char const * s, char const * c, int n) {
  return new QString(QConcatenateTablesProxyModel::tr(s, c, n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QConcatenateTablesProxyModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QConcatenateTablesProxyModel::trUtf8(s, c, n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_QConcatenateTablesProxyModel_QConcatenateTablesProxyModel(QObject * parent) {
  return new QConcatenateTablesProxyModel(parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QConcatenateTablesProxyModel_dQConcatenateTablesProxyModel(QConcatenateTablesProxyModel * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QConcatenateTablesProxyModel_addSourceModel(QConcatenateTablesProxyModel * this_ptr, QAbstractItemModel * sourceModel) {
  this_ptr->addSourceModel(sourceModel);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QConcatenateTablesProxyModel_removeSourceModel(QConcatenateTablesProxyModel * this_ptr, QAbstractItemModel * sourceModel) {
  this_ptr->removeSourceModel(sourceModel);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QConcatenateTablesProxyModel_mapFromSource(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * sourceIndex) {
  return new QModelIndex(this_ptr->mapFromSource(*sourceIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QConcatenateTablesProxyModel_mapToSource(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QModelIndex(this_ptr->mapToSource(*proxyIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QConcatenateTablesProxyModel_data(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * index, int role) {
  return new QVariant(this_ptr->data(*index, role));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QConcatenateTablesProxyModel_setData(QConcatenateTablesProxyModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QConcatenateTablesProxyModel_itemData(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QMap< int, QVariant >(this_ptr->itemData(*proxyIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QConcatenateTablesProxyModel_setItemData(QConcatenateTablesProxyModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_flags(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QConcatenateTablesProxyModel_index(QConcatenateTablesProxyModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QConcatenateTablesProxyModel_parent(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * index) {
  return new QModelIndex(this_ptr->parent(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_rowCount(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QConcatenateTablesProxyModel_headerData(QConcatenateTablesProxyModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_columnCount(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QConcatenateTablesProxyModel_mimeTypes(QConcatenateTablesProxyModel const * this_ptr) {
  return new QStringList(this_ptr->mimeTypes());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMimeData * ctr_qt_core_ffi_QConcatenateTablesProxyModel_mimeData(QConcatenateTablesProxyModel const * this_ptr, QList< QModelIndex > const * indexes) {
  return this_ptr->mimeData(*indexes);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QConcatenateTablesProxyModel_canDropMimeData(QConcatenateTablesProxyModel const * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->canDropMimeData(data, action, row, column, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QConcatenateTablesProxyModel_dropMimeData(QConcatenateTablesProxyModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSize * ctr_qt_core_ffi_QConcatenateTablesProxyModel_span(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * index) {
  return new QSize(this_ptr->span(*index));
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1316(QDataStream * arg1, QJsonValue const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1317(QDataStream * arg1, QJsonValue * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_cbegin(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->cbegin());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QJsonArray::const_iterator * ctr_qt_core_ffi_QJsonArray_cend(QJsonArray const * this_ptr) {
  return new QJsonArray::const_iterator(this_ptr->cend());
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1318(QDataStream * arg1, QJsonArray const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1319(QDataStream * arg1, QJsonArray * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1320(QDataStream * arg1, QJsonDocument const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1321(QDataStream * arg1, QJsonDocument * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1322(QDataStream * arg1, QJsonObject const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1323(QDataStream * arg1, QJsonObject * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QResource::Compression ctr_qt_core_ffi_QResource_compressionAlgorithm(QResource const * this_ptr) {
  return this_ptr->compressionAlgorithm();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings26(QSettings::Scope scope, QObject * parent) {
  return new QSettings(scope, parent);
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_moveRows(QStringListModel * this_ptr, QModelIndex const * sourceParent, int sourceRow, int count, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveRows(*sourceParent, sourceRow, count, *destinationParent, destinationChild);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QStringListModel_itemData(QStringListModel const * this_ptr, QModelIndex const * index) {
  return new QMap< int, QVariant >(this_ptr->itemData(*index));
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QStringListModel_setItemData(QStringListModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QTransposeProxyModel_metaObject(QTransposeProxyModel const * this_ptr) {
  return this_ptr->metaObject();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void * ctr_qt_core_ffi_QTransposeProxyModel_qt_metacast(QTransposeProxyModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QTransposeProxyModel_qt_metacall(QTransposeProxyModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QTransposeProxyModel_tr(char const * s, char const * c, int n) {
  return new QString(QTransposeProxyModel::tr(s, c, n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QTransposeProxyModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTransposeProxyModel::trUtf8(s, c, n));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_QTransposeProxyModel_QTransposeProxyModel(QObject * parent) {
  return new QTransposeProxyModel(parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QTransposeProxyModel_dQTransposeProxyModel(QTransposeProxyModel * this_ptr) {
  delete this_ptr;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QTransposeProxyModel_setSourceModel(QTransposeProxyModel * this_ptr, QAbstractItemModel * newSourceModel) {
  this_ptr->setSourceModel(newSourceModel);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QTransposeProxyModel_rowCount(QTransposeProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QTransposeProxyModel_columnCount(QTransposeProxyModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QTransposeProxyModel_headerData(QTransposeProxyModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_setHeaderData(QTransposeProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value, int role) {
  return this_ptr->setHeaderData(section, orientation, *value, role);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_setItemData(QTransposeProxyModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSize * ctr_qt_core_ffi_QTransposeProxyModel_span(QTransposeProxyModel const * this_ptr, QModelIndex const * index) {
  return new QSize(this_ptr->span(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_core_ffi_QTransposeProxyModel_itemData(QTransposeProxyModel const * this_ptr, QModelIndex const * index) {
  return new QMap< int, QVariant >(this_ptr->itemData(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QTransposeProxyModel_mapFromSource(QTransposeProxyModel const * this_ptr, QModelIndex const * sourceIndex) {
  return new QModelIndex(this_ptr->mapFromSource(*sourceIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QTransposeProxyModel_mapToSource(QTransposeProxyModel const * this_ptr, QModelIndex const * proxyIndex) {
  return new QModelIndex(this_ptr->mapToSource(*proxyIndex));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QTransposeProxyModel_parent(QTransposeProxyModel const * this_ptr, QModelIndex const * index) {
  return new QModelIndex(this_ptr->parent(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QTransposeProxyModel_index(QTransposeProxyModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_insertRows(QTransposeProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_removeRows(QTransposeProxyModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_moveRows(QTransposeProxyModel * this_ptr, QModelIndex const * sourceParent, int sourceRow, int count, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveRows(*sourceParent, sourceRow, count, *destinationParent, destinationChild);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_insertColumns(QTransposeProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->insertColumns(column, count, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_removeColumns(QTransposeProxyModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->removeColumns(column, count, *parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_moveColumns(QTransposeProxyModel * this_ptr, QModelIndex const * sourceParent, int sourceColumn, int count, QModelIndex const * destinationParent, int destinationChild) {
  return this_ptr->moveColumns(*sourceParent, sourceColumn, count, *destinationParent, destinationChild);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QTransposeProxyModel_sort(QTransposeProxyModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_QConcatenateTablesProxyModel_QConcatenateTablesProxyModel1() {
  return new QConcatenateTablesProxyModel();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_QTransposeProxyModel_QTransposeProxyModel1() {
  return new QTransposeProxyModel();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_swapItemsAt(QList< QString > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_swapItemsAt(QList< QItemSelectionRange > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_swapItemsAt(QList< QObject * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_swapItemsAt(QList< QVariant > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_swapItemsAt(QList< QByteArray > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_swapItemsAt(QList< QAbstractEventDispatcher::TimerInfo > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_swapItemsAt(QList< QModelIndex > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_swapItemsAt(QList< QPersistentModelIndex > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_swapItemsAt(QList< QAbstractState * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_swapItemsAt(QList< QAbstractAnimation * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_swapItemsAt(QList< Qt::DayOfWeek > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_swapItemsAt(QList< QLocale > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_swapItemsAt(QList< QLocale::Country > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_swapItemsAt(QList< QCommandLineOption > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_swapItemsAt(QList< QFileInfo > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_swapItemsAt(QList< QUrl > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_swapItemsAt(QList< QMimeType > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_swapItemsAt(QList< QAbstractTransition * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_swapItemsAt(QList< QStorageInfo > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_swapItemsAt(QList< int > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_swapItemsAt(QList< QPair< QString, QString > > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf14(QStringList const * this_ptr, QStringView const * str) {
  return this_ptr->indexOf(*str);
}


#endif

RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_indexOf15(QStringList const * this_ptr, QLatin1String const * str) {
  return this_ptr->indexOf(*str);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf14(QStringList const * this_ptr, QStringView const * str) {
  return this_ptr->lastIndexOf(*str);
}


#endif

RITUAL_EXPORT int ctr_qt_core_ffi_QStringList_lastIndexOf15(QStringList const * this_ptr, QLatin1String const * str) {
  return this_ptr->lastIndexOf(*str);
}


#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong3(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toLong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong3(QLocale const * this_ptr, QString const * s) {
  return this_ptr->toULong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong4(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toLong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong4(QLocale const * this_ptr, QStringRef const * s) {
  return this_ptr->toULong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long ctr_qt_core_ffi_QLocale_toLong5(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toLong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned long ctr_qt_core_ffi_QLocale_toULong5(QLocale const * this_ptr, QStringView const * s) {
  return this_ptr->toULong(*s);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize7(QLocale const * this_ptr, qint64 bytes, int precision) {
  return new QString(this_ptr->formattedDataSize(bytes, precision));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_formattedDataSize8(QLocale const * this_ptr, qint64 bytes) {
  return new QString(this_ptr->formattedDataSize(bytes));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QConcatenateTablesProxyModel_data1(QConcatenateTablesProxyModel const * this_ptr, QModelIndex const * index) {
  return new QVariant(this_ptr->data(*index));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QConcatenateTablesProxyModel_setData1(QConcatenateTablesProxyModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QConcatenateTablesProxyModel_index1(QConcatenateTablesProxyModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_rowCount1(QConcatenateTablesProxyModel const * this_ptr) {
  return this_ptr->rowCount();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QConcatenateTablesProxyModel_headerData1(QConcatenateTablesProxyModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QConcatenateTablesProxyModel_columnCount1(QConcatenateTablesProxyModel const * this_ptr) {
  return this_ptr->columnCount();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSettings * ctr_qt_core_ffi_QSettings_QSettings27(QSettings::Scope scope) {
  return new QSettings(scope);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QTransposeProxyModel_rowCount1(QTransposeProxyModel const * this_ptr) {
  return this_ptr->rowCount();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_core_ffi_QTransposeProxyModel_columnCount1(QTransposeProxyModel const * this_ptr) {
  return this_ptr->columnCount();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QTransposeProxyModel_headerData1(QTransposeProxyModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_setHeaderData1(QTransposeProxyModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value) {
  return this_ptr->setHeaderData(section, orientation, *value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QModelIndex * ctr_qt_core_ffi_QTransposeProxyModel_index1(QTransposeProxyModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_insertRows1(QTransposeProxyModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_removeRows1(QTransposeProxyModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_insertColumns1(QTransposeProxyModel * this_ptr, int column, int count) {
  return this_ptr->insertColumns(column, count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_core_ffi_QTransposeProxyModel_removeColumns1(QTransposeProxyModel * this_ptr, int column, int count) {
  return this_ptr->removeColumns(column, count);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_core_ffi_QTransposeProxyModel_sort1(QTransposeProxyModel * this_ptr, int column) {
  this_ptr->sort(column);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_static_cast_QConcatenateTablesProxyModel_ptr(QAbstractItemModel * ptr) {
  return static_cast< QConcatenateTablesProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr14(QConcatenateTablesProxyModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_dynamic_cast_QConcatenateTablesProxyModel_ptr(QAbstractItemModel * ptr) {
  return dynamic_cast< QConcatenateTablesProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_static_cast_QConcatenateTablesProxyModel_ptr1(QObject * ptr) {
  return static_cast< QConcatenateTablesProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr168(QConcatenateTablesProxyModel * ptr) {
  return static_cast< QObject * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QConcatenateTablesProxyModel * ctr_qt_core_ffi_dynamic_cast_QConcatenateTablesProxyModel_ptr1(QObject * ptr) {
  return dynamic_cast< QConcatenateTablesProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_static_cast_QTransposeProxyModel_ptr(QAbstractProxyModel * ptr) {
  return static_cast< QTransposeProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QAbstractProxyModel * ctr_qt_core_ffi_static_cast_QAbstractProxyModel_ptr8(QTransposeProxyModel * ptr) {
  return static_cast< QAbstractProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_dynamic_cast_QTransposeProxyModel_ptr(QAbstractProxyModel * ptr) {
  return dynamic_cast< QTransposeProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_static_cast_QTransposeProxyModel_ptr1(QAbstractItemModel * ptr) {
  return static_cast< QTransposeProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QAbstractItemModel * ctr_qt_core_ffi_static_cast_QAbstractItemModel_ptr15(QTransposeProxyModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_dynamic_cast_QTransposeProxyModel_ptr1(QAbstractItemModel * ptr) {
  return dynamic_cast< QTransposeProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_static_cast_QTransposeProxyModel_ptr2(QObject * ptr) {
  return static_cast< QTransposeProxyModel * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr169(QTransposeProxyModel * ptr) {
  return static_cast< QObject * >(ptr);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTransposeProxyModel * ctr_qt_core_ffi_dynamic_cast_QTransposeProxyModel_ptr2(QObject * ptr) {
  return dynamic_cast< QTransposeProxyModel * >(ptr);
}


#endif

RITUAL_EXPORT void * ctr_qt_core_ffi_qMallocAligned2(size_t size, size_t alignment) {
  return qMallocAligned(size, alignment);
}


RITUAL_EXPORT void * ctr_qt_core_ffi_qReallocAligned2(void * ptr, size_t size, size_t oldsize, size_t alignment) {
  return qReallocAligned(ptr, size, oldsize, alignment);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHashBits4(void const * p, size_t size, unsigned int seed) {
  return qHashBits(p, size, seed);
}


RITUAL_EXPORT void ctr_qt_core_ffi_qt_QMetaEnum_flagDebugOperator4(QDebug * debug, size_t sizeofT, int value) {
  qt_QMetaEnum_flagDebugOperator(*debug, sizeofT, value);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaObject_SuperData_direct(QMetaObject::SuperData const * this_ptr) {
  return this_ptr->direct;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_set_QMetaObject_SuperData_direct(QMetaObject::SuperData * this_ptr, QMetaObject const * value) {
  this_ptr->direct = value;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QCalendar_staticMetaObject() {
  return &QCalendar::staticMetaObject;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_YearMonthDay_year(QCalendar::YearMonthDay const * this_ptr) {
  return this_ptr->year;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCalendar_YearMonthDay_year(QCalendar::YearMonthDay * this_ptr, int value) {
  this_ptr->year = value;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_YearMonthDay_month(QCalendar::YearMonthDay const * this_ptr) {
  return this_ptr->month;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCalendar_YearMonthDay_month(QCalendar::YearMonthDay * this_ptr, int value) {
  this_ptr->month = value;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_YearMonthDay_day(QCalendar::YearMonthDay const * this_ptr) {
  return this_ptr->day;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_set_QCalendar_YearMonthDay_day(QCalendar::YearMonthDay * this_ptr, int value) {
  this_ptr->day = value;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QOperatingSystemVersion const * ctr_qt_core_ffi_QOperatingSystemVersion_MacOSCatalina() {
  return &QOperatingSystemVersion::MacOSCatalina;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_qFpClassify(double val) {
  return qFpClassify(val);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_qFpClassify1(float val) {
  return qFpClassify(val);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject::SuperData * ctr_qt_core_ffi_QMetaObject_SuperData_SuperData() {
  return new QMetaObject::SuperData();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject::SuperData * ctr_qt_core_ffi_QMetaObject_SuperData_SuperData1(QMetaObject const * mo) {
  return new QMetaObject::SuperData(mo);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaObject_SuperData_operator__(QMetaObject::SuperData const * this_ptr) {
  return this_ptr->operator->();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_QMetaObject_SuperData_operator_const_QMetaObject_(QMetaObject::SuperData const * this_ptr) {
  return this_ptr->operator const QMetaObject*();
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1340(char lhs, QLatin1Char const * rhs) {
  return operator==(lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1342(char lhs, QLatin1Char const * rhs) {
  return operator<=(lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1343(char lhs, QLatin1Char const * rhs) {
  return operator>=(lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_562(char lhs, QLatin1Char const * rhs) {
  return operator<(lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_563(char lhs, QLatin1Char const * rhs) {
  return operator>(lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1344(QLatin1Char const * lhs, char rhs) {
  return operator==(*lhs, rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1346(QLatin1Char const * lhs, char rhs) {
  return operator<=(*lhs, rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1347(QLatin1Char const * lhs, char rhs) {
  return operator>=(*lhs, rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_564(QLatin1Char const * lhs, char rhs) {
  return operator<(*lhs, rhs);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator_565(QLatin1Char const * lhs, char rhs) {
  return operator>(*lhs, rhs);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf(QStringView const * this_ptr, QChar const * c, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*c, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf1(QStringView const * this_ptr, QStringView const * s, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf2(QStringView const * this_ptr, QLatin1String const * s, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains(QStringView const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*c, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains1(QStringView const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains2(QStringView const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf(QStringView const * this_ptr, QChar const * c, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*c, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf1(QStringView const * this_ptr, QStringView const * s, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf2(QStringView const * this_ptr, QLatin1String const * s, long long from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringView_toWCharArray(QStringView const * this_ptr, wchar_t * array) {
  return this_ptr->toWCharArray(array);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf(QLatin1String const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf1(QLatin1String const * this_ptr, QLatin1String const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf2(QLatin1String const * this_ptr, QChar const * c, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*c, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains(QLatin1String const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains1(QLatin1String const * this_ptr, QLatin1String const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains2(QLatin1String const * this_ptr, QChar const * c, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*c, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf(QLatin1String const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf1(QLatin1String const * this_ptr, QLatin1String const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf2(QLatin1String const * this_ptr, QChar const * c, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*c, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf38(QString const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf38(QString const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains24(QString const * this_ptr, QStringView const * s, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*s, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split20(QString const * this_ptr, QString const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef20(QString const * this_ptr, QString const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split21(QString const * this_ptr, QChar const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef21(QString const * this_ptr, QChar const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split22(QString const * this_ptr, QRegExp const * sep, int behavior) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef22(QString const * this_ptr, QRegExp const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split23(QString const * this_ptr, QRegularExpression const * sep, int behavior) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef23(QString const * this_ptr, QRegularExpression const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf24(QStringRef const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->indexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf24(QStringRef const * this_ptr, QStringView const * s, int from, Qt::CaseSensitivity cs) {
  return this_ptr->lastIndexOf(*s, from, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains16(QStringRef const * this_ptr, QStringView const * str, Qt::CaseSensitivity cs) {
  return this_ptr->contains(*str, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split12(QStringRef const * this_ptr, QString const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split13(QStringRef const * this_ptr, QChar const * sep, int behavior, Qt::CaseSensitivity cs) {
  return new QVector< QStringRef >(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior), cs));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher12(QStringView const * pattern, Qt::CaseSensitivity cs) {
  return new QStringMatcher(*pattern, cs);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringMatcher_indexIn8(QStringMatcher const * this_ptr, QStringView const * str, long long from) {
  return this_ptr->indexIn(*str, from);
}


#endif

RITUAL_EXPORT QVariant * ctr_qt_core_ffi_QVariant_fromValue(QVariant const * value) {
  return new QVariant(QVariant::fromValue(*value));
}


RITUAL_EXPORT void ctr_qt_core_ffi_QVariant_setValue(QVariant * this_ptr, QVariant const * avalue) {
  this_ptr->setValue(*avalue);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QBasicTimer_swap(QBasicTimer * this_ptr, QBasicTimer * other) {
  this_ptr->swap(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString52(QLocale const * this_ptr, QDate const * date, QStringView const * formatStr, QCalendar const * cal) {
  return new QString(this_ptr->toString(*date, *formatStr, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString53(QLocale const * this_ptr, QDate const * date, QLocale::FormatType format, QCalendar const * cal) {
  return new QString(this_ptr->toString(*date, format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString54(QLocale const * this_ptr, QDateTime const * dateTime, QLocale::FormatType format, QCalendar const * cal) {
  return new QString(this_ptr->toString(*dateTime, format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QLocale_toString55(QLocale const * this_ptr, QDateTime const * dateTime, QStringView const * formatStr, QCalendar const * cal) {
  return new QString(this_ptr->toString(*dateTime, *formatStr, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLocale_toDate6(QLocale const * this_ptr, QString const * string, QLocale::FormatType format, QCalendar const * cal) {
  return new QDate(this_ptr->toDate(*string, format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTime * ctr_qt_core_ffi_QLocale_toTime6(QLocale const * this_ptr, QString const * string, QLocale::FormatType format, QCalendar const * cal) {
  return new QTime(this_ptr->toTime(*string, format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QLocale_toDateTime6(QLocale const * this_ptr, QString const * string, QLocale::FormatType format, QCalendar const * cal) {
  return new QDateTime(this_ptr->toDateTime(*string, format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QLocale_toDate7(QLocale const * this_ptr, QString const * string, QString const * format, QCalendar const * cal) {
  return new QDate(this_ptr->toDate(*string, *format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTime * ctr_qt_core_ffi_QLocale_toTime7(QLocale const * this_ptr, QString const * string, QString const * format, QCalendar const * cal) {
  return new QTime(this_ptr->toTime(*string, *format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QLocale_toDateTime7(QLocale const * this_ptr, QString const * string, QString const * format, QCalendar const * cal) {
  return new QDateTime(this_ptr->toDateTime(*string, *format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QLocale * ctr_qt_core_ffi_QLocale_collation(QLocale const * this_ptr) {
  return new QLocale(this_ptr->collation());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_YearMonthDay() {
  return new QCalendar::YearMonthDay();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_YearMonthDay1(int y, int m, int d) {
  return new QCalendar::YearMonthDay(y, m, d);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_YearMonthDay_isValid(QCalendar::YearMonthDay const * this_ptr) {
  return this_ptr->isValid();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_QCalendar() {
  return new QCalendar();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_QCalendar1(QCalendar::System system) {
  return new QCalendar(system);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_QCalendar2(QLatin1String const * name) {
  return new QCalendar(*name);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_QCalendar3(QStringView const * name) {
  return new QCalendar(*name);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isValid(QCalendar const * this_ptr) {
  return this_ptr->isValid();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_daysInMonth(QCalendar const * this_ptr, int month, int year) {
  return this_ptr->daysInMonth(month, year);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_daysInYear(QCalendar const * this_ptr, int year) {
  return this_ptr->daysInYear(year);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_monthsInYear(QCalendar const * this_ptr, int year) {
  return this_ptr->monthsInYear(year);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isDateValid(QCalendar const * this_ptr, int year, int month, int day) {
  return this_ptr->isDateValid(year, month, day);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isLeapYear(QCalendar const * this_ptr, int year) {
  return this_ptr->isLeapYear(year);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isGregorian(QCalendar const * this_ptr) {
  return this_ptr->isGregorian();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isLunar(QCalendar const * this_ptr) {
  return this_ptr->isLunar();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isLuniSolar(QCalendar const * this_ptr) {
  return this_ptr->isLuniSolar();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isSolar(QCalendar const * this_ptr) {
  return this_ptr->isSolar();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_isProleptic(QCalendar const * this_ptr) {
  return this_ptr->isProleptic();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCalendar_hasYearZero(QCalendar const * this_ptr) {
  return this_ptr->hasYearZero();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_maximumDaysInMonth(QCalendar const * this_ptr) {
  return this_ptr->maximumDaysInMonth();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_minimumDaysInMonth(QCalendar const * this_ptr) {
  return this_ptr->minimumDaysInMonth();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_maximumMonthsInYear(QCalendar const * this_ptr) {
  return this_ptr->maximumMonthsInYear();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_name(QCalendar const * this_ptr) {
  return new QString(this_ptr->name());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QCalendar_dateFromParts(QCalendar const * this_ptr, int year, int month, int day) {
  return new QDate(this_ptr->dateFromParts(year, month, day));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QCalendar_dateFromParts1(QCalendar const * this_ptr, QCalendar::YearMonthDay const * parts) {
  return new QDate(this_ptr->dateFromParts(*parts));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_partsFromDate(QCalendar const * this_ptr, QDate const * date) {
  return new QCalendar::YearMonthDay(this_ptr->partsFromDate(*date));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_dayOfWeek(QCalendar const * this_ptr, QDate const * date) {
  return this_ptr->dayOfWeek(*date);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_monthName(QCalendar const * this_ptr, QLocale const * locale, int month, int year, QLocale::FormatType format) {
  return new QString(this_ptr->monthName(*locale, month, year, format));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_standaloneMonthName(QCalendar const * this_ptr, QLocale const * locale, int month, int year, QLocale::FormatType format) {
  return new QString(this_ptr->standaloneMonthName(*locale, month, year, format));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_weekDayName(QCalendar const * this_ptr, QLocale const * locale, int day, QLocale::FormatType format) {
  return new QString(this_ptr->weekDayName(*locale, day, format));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_standaloneWeekDayName(QCalendar const * this_ptr, QLocale const * locale, int day, QLocale::FormatType format) {
  return new QString(this_ptr->standaloneWeekDayName(*locale, day, format));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_dateTimeToString(QCalendar const * this_ptr, QStringView const * format, QDateTime const * datetime, QDate const * dateOnly, QTime const * timeOnly, QLocale const * locale) {
  return new QString(this_ptr->dateTimeToString(*format, *datetime, *dateOnly, *timeOnly, *locale));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QCalendar_availableCalendars() {
  return new QStringList(QCalendar::availableCalendars());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_QDate6(int y, int m, int d, QCalendar const * cal) {
  return new QDate(y, m, d, *cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_year2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->year(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_month2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->month(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_day2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->day(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_dayOfWeek2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->dayOfWeek(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_dayOfYear2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->dayOfYear(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_daysInMonth2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->daysInMonth(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QDate_daysInYear2(QDate const * this_ptr, QCalendar const * cal) {
  return this_ptr->daysInYear(*cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_startOfDay(QDate const * this_ptr, Qt::TimeSpec spec, int offsetSeconds) {
  return new QDateTime(this_ptr->startOfDay(spec, offsetSeconds));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_endOfDay(QDate const * this_ptr, Qt::TimeSpec spec, int offsetSeconds) {
  return new QDateTime(this_ptr->endOfDay(spec, offsetSeconds));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_startOfDay1(QDate const * this_ptr, QTimeZone const * zone) {
  return new QDateTime(this_ptr->startOfDay(*zone));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_endOfDay1(QDate const * this_ptr, QTimeZone const * zone) {
  return new QDateTime(this_ptr->endOfDay(*zone));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString8(QDate const * this_ptr, QString const * format, QCalendar const * cal) {
  return new QString(this_ptr->toString(*format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString9(QDate const * this_ptr, Qt::DateFormat f, QCalendar const * cal) {
  return new QString(this_ptr->toString(f, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QDate_toString10(QDate const * this_ptr, QStringView const * format, QCalendar const * cal) {
  return new QString(this_ptr->toString(*format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QDate_setDate2(QDate * this_ptr, int year, int month, int day, QCalendar const * cal) {
  return this_ptr->setDate(year, month, day, *cal);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_addMonths2(QDate const * this_ptr, int months, QCalendar const * cal) {
  return new QDate(this_ptr->addMonths(months, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_addYears2(QDate const * this_ptr, int years, QCalendar const * cal) {
  return new QDate(this_ptr->addYears(years, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDate * ctr_qt_core_ffi_QDate_fromString6(QString const * s, QString const * format, QCalendar const * cal) {
  return new QDate(QDate::fromString(*s, *format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDateTime_fromString6(QString const * s, QString const * format, QCalendar const * cal) {
  return new QDateTime(QDateTime::fromString(*s, *format, *cal));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_bin(QTextStream * s) {
  return &QTextStreamFunctions::bin(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_oct(QTextStream * s) {
  return &QTextStreamFunctions::oct(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_dec(QTextStream * s) {
  return &QTextStreamFunctions::dec(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_hex(QTextStream * s) {
  return &QTextStreamFunctions::hex(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_showbase(QTextStream * s) {
  return &QTextStreamFunctions::showbase(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_forcesign(QTextStream * s) {
  return &QTextStreamFunctions::forcesign(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_forcepoint(QTextStream * s) {
  return &QTextStreamFunctions::forcepoint(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_noshowbase(QTextStream * s) {
  return &QTextStreamFunctions::noshowbase(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_noforcesign(QTextStream * s) {
  return &QTextStreamFunctions::noforcesign(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_noforcepoint(QTextStream * s) {
  return &QTextStreamFunctions::noforcepoint(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_uppercasebase(QTextStream * s) {
  return &QTextStreamFunctions::uppercasebase(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_uppercasedigits(QTextStream * s) {
  return &QTextStreamFunctions::uppercasedigits(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_lowercasebase(QTextStream * s) {
  return &QTextStreamFunctions::lowercasebase(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_lowercasedigits(QTextStream * s) {
  return &QTextStreamFunctions::lowercasedigits(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_fixed(QTextStream * s) {
  return &QTextStreamFunctions::fixed(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_scientific(QTextStream * s) {
  return &QTextStreamFunctions::scientific(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_left(QTextStream * s) {
  return &QTextStreamFunctions::left(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_right(QTextStream * s) {
  return &QTextStreamFunctions::right(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_center(QTextStream * s) {
  return &QTextStreamFunctions::center(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_endl(QTextStream * s) {
  return &QTextStreamFunctions::endl(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_flush(QTextStream * s) {
  return &QTextStreamFunctions::flush(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_reset(QTextStream * s) {
  return &QTextStreamFunctions::reset(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_bom(QTextStream * s) {
  return &QTextStreamFunctions::bom(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextStream * ctr_qt_core_ffi_QTextStreamFunctions_ws(QTextStream * s) {
  return &QTextStreamFunctions::ws(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCborValue * ctr_qt_core_ffi_QCborValue_QCborValue51(QStringView const * s) {
  return new QCborValue(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_qfloat16_isInf(qfloat16 const * this_ptr) {
  return this_ptr->isInf();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_qfloat16_isNaN(qfloat16 const * this_ptr) {
  return this_ptr->isNaN();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_qfloat16_isFinite(qfloat16 const * this_ptr) {
  return this_ptr->isFinite();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_qfloat16_fpClassify(qfloat16 const * this_ptr) {
  return this_ptr->fpClassify();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_epsilon() {
  return new qfloat16(qfloat16::_limit_epsilon());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_min() {
  return new qfloat16(qfloat16::_limit_min());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_denorm_min() {
  return new qfloat16(qfloat16::_limit_denorm_min());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_max() {
  return new qfloat16(qfloat16::_limit_max());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_lowest() {
  return new qfloat16(qfloat16::_limit_lowest());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_infinity() {
  return new qfloat16(qfloat16::_limit_infinity());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT qfloat16 * ctr_qt_core_ffi_qfloat16__limit_quiet_NaN() {
  return new qfloat16(qfloat16::_limit_quiet_NaN());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_qfloat16_isNormal(qfloat16 const * this_ptr) {
  return this_ptr->isNormal();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_qFpClassify2(qfloat16 const * f) {
  return qFpClassify(*f);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCollator_compare6(QCollator const * this_ptr, QStringView const * s1, QStringView const * s2) {
  return this_ptr->compare(*s1, *s2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QCollator_operator__2(QCollator const * this_ptr, QStringView const * s1, QStringView const * s2) {
  return this_ptr->operator()(*s1, *s2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isSymbolicLink(QFileInfo const * this_ptr) {
  return this_ptr->isSymbolicLink();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QFileInfo_isShortcut(QFileInfo const * this_ptr) {
  return this_ptr->isShortcut();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QRecursiveMutex * ctr_qt_core_ffi_QRecursiveMutex_QRecursiveMutex() {
  return new QRecursiveMutex();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QRecursiveMutex_dQRecursiveMutex(QRecursiveMutex * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMutexLocker * ctr_qt_core_ffi_QMutexLocker_QMutexLocker4(QRecursiveMutex * m) {
  return new QMutexLocker(m);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonValue_operator__10(QJsonValue const * this_ptr, QStringView const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonDocument_operator__10(QJsonDocument const * this_ptr, QStringView const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_value4(QJsonObject const * this_ptr, QStringView const * key) {
  return new QJsonValue(this_ptr->value(*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_operator__12(QJsonObject const * this_ptr, QStringView const * key) {
  return new QJsonValue(this_ptr->operator[](*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValueRef * ctr_qt_core_ffi_QJsonObject_operator__13(QJsonObject * this_ptr, QStringView const * key) {
  return new QJsonValueRef(this_ptr->operator[](*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_remove2(QJsonObject * this_ptr, QStringView const * key) {
  this_ptr->remove(*key);
}


#endif

RITUAL_EXPORT void ctr_qt_core_ffi_QJsonObject_remove3(QJsonObject * this_ptr, QLatin1String const * key) {
  this_ptr->remove(*key);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_take2(QJsonObject * this_ptr, QStringView const * key) {
  return new QJsonValue(this_ptr->take(*key));
}


#endif

RITUAL_EXPORT QJsonValue * ctr_qt_core_ffi_QJsonObject_take3(QJsonObject * this_ptr, QLatin1String const * key) {
  return new QJsonValue(this_ptr->take(*key));
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QJsonObject_contains4(QJsonObject const * this_ptr, QStringView const * key) {
  return this_ptr->contains(*key);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_find8(QJsonObject * this_ptr, QStringView const * key) {
  return new QJsonObject::iterator(this_ptr->find(*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_find9(QJsonObject const * this_ptr, QStringView const * key) {
  return new QJsonObject::const_iterator(this_ptr->find(*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonObject::const_iterator * ctr_qt_core_ffi_QJsonObject_constFind4(QJsonObject const * this_ptr, QStringView const * key) {
  return new QJsonObject::const_iterator(this_ptr->constFind(*key));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_insert2(QJsonObject * this_ptr, QStringView const * key, QJsonValue const * value) {
  return new QJsonObject::iterator(this_ptr->insert(*key, *value));
}


#endif

RITUAL_EXPORT QJsonObject::iterator * ctr_qt_core_ffi_QJsonObject_insert3(QJsonObject * this_ptr, QLatin1String const * key, QJsonValue const * value) {
  return new QJsonObject::iterator(this_ptr->insert(*key, *value));
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QPoint * ctr_qt_core_ffi_QPoint_transposed(QPoint const * this_ptr) {
  return new QPoint(this_ptr->transposed());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QPointF * ctr_qt_core_ffi_QPointF_transposed(QPointF const * this_ptr) {
  return new QPointF(this_ptr->transposed());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QLineF::IntersectType ctr_qt_core_ffi_QLineF_intersects(QLineF const * this_ptr, QLineF const * l, QPointF * intersectionPoint) {
  return this_ptr->intersects(*l, intersectionPoint);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QMetaProperty_relativePropertyIndex(QMetaProperty const * this_ptr) {
  return this_ptr->relativePropertyIndex();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_grownBy(QSize const * this_ptr, QMargins const * m) {
  return new QSize(this_ptr->grownBy(*m));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QSize * ctr_qt_core_ffi_QSize_shrunkBy(QSize const * this_ptr, QMargins const * m) {
  return new QSize(this_ptr->shrunkBy(*m));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_grownBy(QSizeF const * this_ptr, QMarginsF const * m) {
  return new QSizeF(this_ptr->grownBy(*m));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QSizeF * ctr_qt_core_ffi_QSizeF_shrunkBy(QSizeF const * this_ptr, QMarginsF const * m) {
  return new QSizeF(this_ptr->shrunkBy(*m));
}


#endif

RITUAL_EXPORT QException * ctr_qt_core_ffi_QException_QException() {
  return new QException();
}


RITUAL_EXPORT QException * ctr_qt_core_ffi_QException_QException1(QException const * other) {
  return new QException(*other);
}


RITUAL_EXPORT QException * ctr_qt_core_ffi_QException_operator_(QException * this_ptr, QException const * other) {
  return &this_ptr->operator=(*other);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QMetaObject_SuperData_dSuperData(QMetaObject::SuperData * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject::SuperData * ctr_qt_core_ffi_QMetaObject_SuperData_SuperData2(QMetaObject::SuperData const * other) {
  return new QMetaObject::SuperData(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject::SuperData * ctr_qt_core_ffi_QMetaObject_SuperData_operator_(QMetaObject::SuperData * this_ptr, QMetaObject::SuperData const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QCalendar_dQCalendar(QCalendar * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_QCalendar4(QCalendar const * other) {
  return new QCalendar(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar * ctr_qt_core_ffi_QCalendar_operator_(QCalendar * this_ptr, QCalendar const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QCalendar_YearMonthDay_dYearMonthDay(QCalendar::YearMonthDay * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_YearMonthDay2(QCalendar::YearMonthDay const * other) {
  return new QCalendar::YearMonthDay(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_operator_(QCalendar::YearMonthDay * this_ptr, QCalendar::YearMonthDay const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_core_ffi_operator__1348(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< Qt::SplitBehaviorFlags >(e));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDebug * ctr_qt_core_ffi_operator__1350(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< Qt::SplitBehaviorFlags >(flags)));
}


#endif

RITUAL_EXPORT QFutureInterface< void > * ctr_qt_core_ffi_QFutureInterface_void_QFutureInterface1(QFutureInterface< void > const * other) {
  return new QFutureInterface< void >(*other);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureInterface_void_dQFutureInterface(QFutureInterface< void > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFutureInterface< void > * ctr_qt_core_ffi_QFutureInterface_void_canceledResult() {
  return new QFutureInterface< void >(QFutureInterface< void >::canceledResult());
}


RITUAL_EXPORT QFutureInterface< void > * ctr_qt_core_ffi_QFutureInterface_void_operator_(QFutureInterface< void > * this_ptr, QFutureInterface< void > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QFuture< void > * ctr_qt_core_ffi_QFutureInterface_void_future(QFutureInterface< void > * this_ptr) {
  return new QFuture< void >(this_ptr->future());
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureInterface_void_reportResult(QFutureInterface< void > * this_ptr, void const * result, int index) {
  this_ptr->reportResult(result, index);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureInterface_void_reportFinished(QFutureInterface< void > * this_ptr, void const * result) {
  this_ptr->reportFinished(result);
}


RITUAL_EXPORT QFuture< void > * ctr_qt_core_ffi_QFuture_void_QFuture4(QFutureInterface< void > * p) {
  return new QFuture< void >(p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureInterface_void_reportResults1(QFutureInterface< void > * this_ptr, QVector< void > const * results, int beginIndex) {
  this_ptr->reportResults(*results, beginIndex);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QFutureInterface_void_reportFinished1(QFutureInterface< void > * this_ptr) {
  this_ptr->reportFinished();
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamAttribute_swapItemsAt(QVector< QXmlStreamAttribute > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStringRef_swapItemsAt(QVector< QStringRef > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_unsigned_int_swapItemsAt(QVector< unsigned int > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_int_swapItemsAt(QVector< int > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPointF_swapItemsAt(QVector< QPointF > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QStaticPlugin_swapItemsAt(QVector< QStaticPlugin > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QPair_double_QVariant_swapItemsAt(QVector< QPair< double, QVariant > > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QTimeZone_OffsetData_swapItemsAt(QVector< QTimeZone::OffsetData > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNamespaceDeclaration_swapItemsAt(QVector< QXmlStreamNamespaceDeclaration > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamNotationDeclaration_swapItemsAt(QVector< QXmlStreamNotationDeclaration > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QXmlStreamEntityDeclaration_swapItemsAt(QVector< QXmlStreamEntityDeclaration > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_core_ffi_QVector_QCborValue_swapItemsAt(QVector< QCborValue > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

RITUAL_EXPORT void ctr_qt_core_ffi_QList_QString_MemoryLayout_dMemoryLayout(QList< QString >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QItemSelectionRange_MemoryLayout_dMemoryLayout(QList< QItemSelectionRange >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QObject_ptr_MemoryLayout_dMemoryLayout(QList< QObject * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QVariant_MemoryLayout_dMemoryLayout(QList< QVariant >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QByteArray_MemoryLayout_dMemoryLayout(QList< QByteArray >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_MemoryLayout_dMemoryLayout(QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QModelIndex_MemoryLayout_dMemoryLayout(QList< QModelIndex >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPersistentModelIndex_MemoryLayout_dMemoryLayout(QList< QPersistentModelIndex >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractState_ptr_MemoryLayout_dMemoryLayout(QList< QAbstractState * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_MemoryLayout_dMemoryLayout(QList< QAbstractAnimation * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_Qt_DayOfWeek_MemoryLayout_dMemoryLayout(QList< Qt::DayOfWeek >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_MemoryLayout_dMemoryLayout(QList< QLocale >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QLocale_Country_MemoryLayout_dMemoryLayout(QList< QLocale::Country >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QCommandLineOption_MemoryLayout_dMemoryLayout(QList< QCommandLineOption >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QFileInfo_MemoryLayout_dMemoryLayout(QList< QFileInfo >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QUrl_MemoryLayout_dMemoryLayout(QList< QUrl >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QMimeType_MemoryLayout_dMemoryLayout(QList< QMimeType >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QAbstractTransition_ptr_MemoryLayout_dMemoryLayout(QList< QAbstractTransition * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QStorageInfo_MemoryLayout_dMemoryLayout(QList< QStorageInfo >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_int_MemoryLayout_dMemoryLayout(QList< int >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_QList_QPair_QString_QString_MemoryLayout_dMemoryLayout(QList< QPair< QString, QString > >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QString >::MemoryLayout * ctr_qt_core_ffi_QList_QString_MemoryLayout_MemoryLayout() {
  return new QList< QString >::MemoryLayout();
}


RITUAL_EXPORT QList< QItemSelectionRange >::MemoryLayout * ctr_qt_core_ffi_QList_QItemSelectionRange_MemoryLayout_MemoryLayout() {
  return new QList< QItemSelectionRange >::MemoryLayout();
}


RITUAL_EXPORT QList< QObject * >::MemoryLayout * ctr_qt_core_ffi_QList_QObject_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QObject * >::MemoryLayout();
}


RITUAL_EXPORT QList< QVariant >::MemoryLayout * ctr_qt_core_ffi_QList_QVariant_MemoryLayout_MemoryLayout() {
  return new QList< QVariant >::MemoryLayout();
}


RITUAL_EXPORT QList< QByteArray >::MemoryLayout * ctr_qt_core_ffi_QList_QByteArray_MemoryLayout_MemoryLayout() {
  return new QList< QByteArray >::MemoryLayout();
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_MemoryLayout_MemoryLayout() {
  return new QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout();
}


RITUAL_EXPORT QList< QModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QModelIndex_MemoryLayout_MemoryLayout() {
  return new QList< QModelIndex >::MemoryLayout();
}


RITUAL_EXPORT QList< QPersistentModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QPersistentModelIndex_MemoryLayout_MemoryLayout() {
  return new QList< QPersistentModelIndex >::MemoryLayout();
}


RITUAL_EXPORT QList< QAbstractState * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractState_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QAbstractState * >::MemoryLayout();
}


RITUAL_EXPORT QList< QAbstractAnimation * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QAbstractAnimation * >::MemoryLayout();
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::MemoryLayout * ctr_qt_core_ffi_QList_Qt_DayOfWeek_MemoryLayout_MemoryLayout() {
  return new QList< Qt::DayOfWeek >::MemoryLayout();
}


RITUAL_EXPORT QList< QLocale >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_MemoryLayout_MemoryLayout() {
  return new QList< QLocale >::MemoryLayout();
}


RITUAL_EXPORT QList< QLocale::Country >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_Country_MemoryLayout_MemoryLayout() {
  return new QList< QLocale::Country >::MemoryLayout();
}


RITUAL_EXPORT QList< QCommandLineOption >::MemoryLayout * ctr_qt_core_ffi_QList_QCommandLineOption_MemoryLayout_MemoryLayout() {
  return new QList< QCommandLineOption >::MemoryLayout();
}


RITUAL_EXPORT QList< QFileInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QFileInfo_MemoryLayout_MemoryLayout() {
  return new QList< QFileInfo >::MemoryLayout();
}


RITUAL_EXPORT QList< QUrl >::MemoryLayout * ctr_qt_core_ffi_QList_QUrl_MemoryLayout_MemoryLayout() {
  return new QList< QUrl >::MemoryLayout();
}


RITUAL_EXPORT QList< QMimeType >::MemoryLayout * ctr_qt_core_ffi_QList_QMimeType_MemoryLayout_MemoryLayout() {
  return new QList< QMimeType >::MemoryLayout();
}


RITUAL_EXPORT QList< QAbstractTransition * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QAbstractTransition * >::MemoryLayout();
}


RITUAL_EXPORT QList< QStorageInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QStorageInfo_MemoryLayout_MemoryLayout() {
  return new QList< QStorageInfo >::MemoryLayout();
}


RITUAL_EXPORT QList< int >::MemoryLayout * ctr_qt_core_ffi_QList_int_MemoryLayout_MemoryLayout() {
  return new QList< int >::MemoryLayout();
}


RITUAL_EXPORT QList< QPair< QString, QString > >::MemoryLayout * ctr_qt_core_ffi_QList_QPair_QString_QString_MemoryLayout_MemoryLayout() {
  return new QList< QPair< QString, QString > >::MemoryLayout();
}


RITUAL_EXPORT QList< QString >::MemoryLayout * ctr_qt_core_ffi_QList_QString_MemoryLayout_MemoryLayout1(QList< QString >::MemoryLayout const * other) {
  return new QList< QString >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QItemSelectionRange >::MemoryLayout * ctr_qt_core_ffi_QList_QItemSelectionRange_MemoryLayout_MemoryLayout1(QList< QItemSelectionRange >::MemoryLayout const * other) {
  return new QList< QItemSelectionRange >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QObject * >::MemoryLayout * ctr_qt_core_ffi_QList_QObject_ptr_MemoryLayout_MemoryLayout1(QList< QObject * >::MemoryLayout const * other) {
  return new QList< QObject * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QVariant >::MemoryLayout * ctr_qt_core_ffi_QList_QVariant_MemoryLayout_MemoryLayout1(QList< QVariant >::MemoryLayout const * other) {
  return new QList< QVariant >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QByteArray >::MemoryLayout * ctr_qt_core_ffi_QList_QByteArray_MemoryLayout_MemoryLayout1(QList< QByteArray >::MemoryLayout const * other) {
  return new QList< QByteArray >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_MemoryLayout_MemoryLayout1(QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout const * other) {
  return new QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QModelIndex_MemoryLayout_MemoryLayout1(QList< QModelIndex >::MemoryLayout const * other) {
  return new QList< QModelIndex >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QPersistentModelIndex_MemoryLayout_MemoryLayout1(QList< QPersistentModelIndex >::MemoryLayout const * other) {
  return new QList< QPersistentModelIndex >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QAbstractState * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractState_ptr_MemoryLayout_MemoryLayout1(QList< QAbstractState * >::MemoryLayout const * other) {
  return new QList< QAbstractState * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_MemoryLayout_MemoryLayout1(QList< QAbstractAnimation * >::MemoryLayout const * other) {
  return new QList< QAbstractAnimation * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::MemoryLayout * ctr_qt_core_ffi_QList_Qt_DayOfWeek_MemoryLayout_MemoryLayout1(QList< Qt::DayOfWeek >::MemoryLayout const * other) {
  return new QList< Qt::DayOfWeek >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QLocale >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_MemoryLayout_MemoryLayout1(QList< QLocale >::MemoryLayout const * other) {
  return new QList< QLocale >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QLocale::Country >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_Country_MemoryLayout_MemoryLayout1(QList< QLocale::Country >::MemoryLayout const * other) {
  return new QList< QLocale::Country >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QCommandLineOption >::MemoryLayout * ctr_qt_core_ffi_QList_QCommandLineOption_MemoryLayout_MemoryLayout1(QList< QCommandLineOption >::MemoryLayout const * other) {
  return new QList< QCommandLineOption >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QFileInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QFileInfo_MemoryLayout_MemoryLayout1(QList< QFileInfo >::MemoryLayout const * other) {
  return new QList< QFileInfo >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QUrl >::MemoryLayout * ctr_qt_core_ffi_QList_QUrl_MemoryLayout_MemoryLayout1(QList< QUrl >::MemoryLayout const * other) {
  return new QList< QUrl >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QMimeType >::MemoryLayout * ctr_qt_core_ffi_QList_QMimeType_MemoryLayout_MemoryLayout1(QList< QMimeType >::MemoryLayout const * other) {
  return new QList< QMimeType >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QAbstractTransition * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_MemoryLayout_MemoryLayout1(QList< QAbstractTransition * >::MemoryLayout const * other) {
  return new QList< QAbstractTransition * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QStorageInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QStorageInfo_MemoryLayout_MemoryLayout1(QList< QStorageInfo >::MemoryLayout const * other) {
  return new QList< QStorageInfo >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< int >::MemoryLayout * ctr_qt_core_ffi_QList_int_MemoryLayout_MemoryLayout1(QList< int >::MemoryLayout const * other) {
  return new QList< int >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::MemoryLayout * ctr_qt_core_ffi_QList_QPair_QString_QString_MemoryLayout_MemoryLayout1(QList< QPair< QString, QString > >::MemoryLayout const * other) {
  return new QList< QPair< QString, QString > >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QString >::MemoryLayout * ctr_qt_core_ffi_QList_QString_MemoryLayout_operator_(QList< QString >::MemoryLayout * this_ptr, QList< QString >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QItemSelectionRange >::MemoryLayout * ctr_qt_core_ffi_QList_QItemSelectionRange_MemoryLayout_operator_(QList< QItemSelectionRange >::MemoryLayout * this_ptr, QList< QItemSelectionRange >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QObject * >::MemoryLayout * ctr_qt_core_ffi_QList_QObject_ptr_MemoryLayout_operator_(QList< QObject * >::MemoryLayout * this_ptr, QList< QObject * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QVariant >::MemoryLayout * ctr_qt_core_ffi_QList_QVariant_MemoryLayout_operator_(QList< QVariant >::MemoryLayout * this_ptr, QList< QVariant >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QByteArray >::MemoryLayout * ctr_qt_core_ffi_QList_QByteArray_MemoryLayout_operator_(QList< QByteArray >::MemoryLayout * this_ptr, QList< QByteArray >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractEventDispatcher_TimerInfo_MemoryLayout_operator_(QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout * this_ptr, QList< QAbstractEventDispatcher::TimerInfo >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QModelIndex_MemoryLayout_operator_(QList< QModelIndex >::MemoryLayout * this_ptr, QList< QModelIndex >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPersistentModelIndex >::MemoryLayout * ctr_qt_core_ffi_QList_QPersistentModelIndex_MemoryLayout_operator_(QList< QPersistentModelIndex >::MemoryLayout * this_ptr, QList< QPersistentModelIndex >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractState * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractState_ptr_MemoryLayout_operator_(QList< QAbstractState * >::MemoryLayout * this_ptr, QList< QAbstractState * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractAnimation * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractAnimation_ptr_MemoryLayout_operator_(QList< QAbstractAnimation * >::MemoryLayout * this_ptr, QList< QAbstractAnimation * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< Qt::DayOfWeek >::MemoryLayout * ctr_qt_core_ffi_QList_Qt_DayOfWeek_MemoryLayout_operator_(QList< Qt::DayOfWeek >::MemoryLayout * this_ptr, QList< Qt::DayOfWeek >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_MemoryLayout_operator_(QList< QLocale >::MemoryLayout * this_ptr, QList< QLocale >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QLocale::Country >::MemoryLayout * ctr_qt_core_ffi_QList_QLocale_Country_MemoryLayout_operator_(QList< QLocale::Country >::MemoryLayout * this_ptr, QList< QLocale::Country >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QCommandLineOption >::MemoryLayout * ctr_qt_core_ffi_QList_QCommandLineOption_MemoryLayout_operator_(QList< QCommandLineOption >::MemoryLayout * this_ptr, QList< QCommandLineOption >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFileInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QFileInfo_MemoryLayout_operator_(QList< QFileInfo >::MemoryLayout * this_ptr, QList< QFileInfo >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QUrl >::MemoryLayout * ctr_qt_core_ffi_QList_QUrl_MemoryLayout_operator_(QList< QUrl >::MemoryLayout * this_ptr, QList< QUrl >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QMimeType >::MemoryLayout * ctr_qt_core_ffi_QList_QMimeType_MemoryLayout_operator_(QList< QMimeType >::MemoryLayout * this_ptr, QList< QMimeType >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAbstractTransition * >::MemoryLayout * ctr_qt_core_ffi_QList_QAbstractTransition_ptr_MemoryLayout_operator_(QList< QAbstractTransition * >::MemoryLayout * this_ptr, QList< QAbstractTransition * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStorageInfo >::MemoryLayout * ctr_qt_core_ffi_QList_QStorageInfo_MemoryLayout_operator_(QList< QStorageInfo >::MemoryLayout * this_ptr, QList< QStorageInfo >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< int >::MemoryLayout * ctr_qt_core_ffi_QList_int_MemoryLayout_operator_(QList< int >::MemoryLayout * this_ptr, QList< int >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPair< QString, QString > >::MemoryLayout * ctr_qt_core_ffi_QList_QPair_QString_QString_MemoryLayout_operator_(QList< QPair< QString, QString > >::MemoryLayout * this_ptr, QList< QPair< QString, QString > >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT unsigned int ctr_qt_core_ffi_qHashBits5(void const * p, size_t size) {
  return qHashBits(p, size);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf3(QStringView const * this_ptr, QChar const * c, long long from) {
  return this_ptr->indexOf(*c, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf4(QStringView const * this_ptr, QChar const * c) {
  return this_ptr->indexOf(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf5(QStringView const * this_ptr, QStringView const * s, long long from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf6(QStringView const * this_ptr, QStringView const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf7(QStringView const * this_ptr, QLatin1String const * s, long long from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_indexOf8(QStringView const * this_ptr, QLatin1String const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains3(QStringView const * this_ptr, QChar const * c) {
  return this_ptr->contains(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains4(QStringView const * this_ptr, QStringView const * s) {
  return this_ptr->contains(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringView_contains5(QStringView const * this_ptr, QLatin1String const * s) {
  return this_ptr->contains(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf3(QStringView const * this_ptr, QChar const * c, long long from) {
  return this_ptr->lastIndexOf(*c, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf4(QStringView const * this_ptr, QChar const * c) {
  return this_ptr->lastIndexOf(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf5(QStringView const * this_ptr, QStringView const * s, long long from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf6(QStringView const * this_ptr, QStringView const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf7(QStringView const * this_ptr, QLatin1String const * s, long long from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringView_lastIndexOf8(QStringView const * this_ptr, QLatin1String const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf3(QLatin1String const * this_ptr, QStringView const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf4(QLatin1String const * this_ptr, QStringView const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf5(QLatin1String const * this_ptr, QLatin1String const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf6(QLatin1String const * this_ptr, QLatin1String const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf7(QLatin1String const * this_ptr, QChar const * c, int from) {
  return this_ptr->indexOf(*c, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_indexOf8(QLatin1String const * this_ptr, QChar const * c) {
  return this_ptr->indexOf(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains3(QLatin1String const * this_ptr, QStringView const * s) {
  return this_ptr->contains(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains4(QLatin1String const * this_ptr, QLatin1String const * s) {
  return this_ptr->contains(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QLatin1String_contains5(QLatin1String const * this_ptr, QChar const * c) {
  return this_ptr->contains(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf3(QLatin1String const * this_ptr, QStringView const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf4(QLatin1String const * this_ptr, QStringView const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf5(QLatin1String const * this_ptr, QLatin1String const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf6(QLatin1String const * this_ptr, QLatin1String const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf7(QLatin1String const * this_ptr, QChar const * c, int from) {
  return this_ptr->lastIndexOf(*c, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QLatin1String_lastIndexOf8(QLatin1String const * this_ptr, QChar const * c) {
  return this_ptr->lastIndexOf(*c);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf39(QString const * this_ptr, QStringView const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_indexOf40(QString const * this_ptr, QStringView const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf39(QString const * this_ptr, QStringView const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QString_lastIndexOf40(QString const * this_ptr, QStringView const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QString_contains25(QString const * this_ptr, QStringView const * s) {
  return this_ptr->contains(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split24(QString const * this_ptr, QString const * sep, int behavior) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef24(QString const * this_ptr, QString const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringList * ctr_qt_core_ffi_QString_split25(QString const * this_ptr, QChar const * sep, int behavior) {
  return new QStringList(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QString_splitRef25(QString const * this_ptr, QChar const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->splitRef(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf25(QStringRef const * this_ptr, QStringView const * s, int from) {
  return this_ptr->indexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_indexOf26(QStringRef const * this_ptr, QStringView const * s) {
  return this_ptr->indexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf25(QStringRef const * this_ptr, QStringView const * s, int from) {
  return this_ptr->lastIndexOf(*s, from);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QStringRef_lastIndexOf26(QStringRef const * this_ptr, QStringView const * s) {
  return this_ptr->lastIndexOf(*s);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_core_ffi_QStringRef_contains17(QStringRef const * this_ptr, QStringView const * str) {
  return this_ptr->contains(*str);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split14(QStringRef const * this_ptr, QString const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QVector< QStringRef > * ctr_qt_core_ffi_QStringRef_split15(QStringRef const * this_ptr, QChar const * sep, int behavior) {
  return new QVector< QStringRef >(this_ptr->split(*sep, QFlags< Qt::SplitBehaviorFlags >(behavior)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QStringMatcher * ctr_qt_core_ffi_QStringMatcher_QStringMatcher13(QStringView const * pattern) {
  return new QStringMatcher(*pattern);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT long long ctr_qt_core_ffi_QStringMatcher_indexIn9(QStringMatcher const * this_ptr, QStringView const * str) {
  return this_ptr->indexIn(*str);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_YearMonthDay3(int y, int m) {
  return new QCalendar::YearMonthDay(y, m);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QCalendar::YearMonthDay * ctr_qt_core_ffi_QCalendar_YearMonthDay_YearMonthDay4(int y) {
  return new QCalendar::YearMonthDay(y);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_core_ffi_QCalendar_daysInMonth1(QCalendar const * this_ptr, int month) {
  return this_ptr->daysInMonth(month);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_monthName1(QCalendar const * this_ptr, QLocale const * locale, int month, int year) {
  return new QString(this_ptr->monthName(*locale, month, year));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_monthName2(QCalendar const * this_ptr, QLocale const * locale, int month) {
  return new QString(this_ptr->monthName(*locale, month));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_standaloneMonthName1(QCalendar const * this_ptr, QLocale const * locale, int month, int year) {
  return new QString(this_ptr->standaloneMonthName(*locale, month, year));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_standaloneMonthName2(QCalendar const * this_ptr, QLocale const * locale, int month) {
  return new QString(this_ptr->standaloneMonthName(*locale, month));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_weekDayName1(QCalendar const * this_ptr, QLocale const * locale, int day) {
  return new QString(this_ptr->weekDayName(*locale, day));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_core_ffi_QCalendar_standaloneWeekDayName1(QCalendar const * this_ptr, QLocale const * locale, int day) {
  return new QString(this_ptr->standaloneWeekDayName(*locale, day));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_startOfDay2(QDate const * this_ptr, Qt::TimeSpec spec) {
  return new QDateTime(this_ptr->startOfDay(spec));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_startOfDay3(QDate const * this_ptr) {
  return new QDateTime(this_ptr->startOfDay());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_endOfDay2(QDate const * this_ptr, Qt::TimeSpec spec) {
  return new QDateTime(this_ptr->endOfDay(spec));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDateTime * ctr_qt_core_ffi_QDate_endOfDay3(QDate const * this_ptr) {
  return new QDateTime(this_ptr->endOfDay());
}


#endif

RITUAL_EXPORT bool ctr_qt_core_ffi_static_cast_bool(QMetaObject::Connection const * connection) {
  return static_cast< bool >(*connection);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QTimeLine_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_metaObject(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State() {
  return new ctr_qt_core_ffi_signal_wrapper_QTimeLine_State();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_emit_(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * this_ptr, QTimeLine::State arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_metaObject(ctr_qt_core_ffi_signal_wrapper_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_qt_metacast(ctr_qt_core_ffi_signal_wrapper_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_qt_metacall(ctr_qt_core_ffi_signal_wrapper_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_qint64 * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_ctr_qt_core_ffi_signal_wrapper_qint64() {
  return new ctr_qt_core_ffi_signal_wrapper_qint64();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_emit_(ctr_qt_core_ffi_signal_wrapper_qint64 * this_ptr, qint64 arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, QList< QPersistentModelIndex > const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * this_ptr, QVariant const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__metaObject(ctr_qt_core_ffi_signal_wrapper_ const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__qt_metacast(ctr_qt_core_ffi_signal_wrapper_ * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__qt_metacall(ctr_qt_core_ffi_signal_wrapper_ * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_ * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__ctr_qt_core_ffi_signal_wrapper_() {
  return new ctr_qt_core_ffi_signal_wrapper_();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__emit_(ctr_qt_core_ffi_signal_wrapper_ * this_ptr) {
  this_ptr->emit_();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_metaObject(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int() {
  return new ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_emit_(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * this_ptr, Qt::Orientation arg0, int arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_metaObject(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction() {
  return new ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_emit_(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * this_ptr, QAbstractAnimation::Direction arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_metaObject(ctr_qt_core_ffi_signal_wrapper_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_ctr_qt_core_ffi_signal_wrapper_int() {
  return new ctr_qt_core_ffi_signal_wrapper_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_emit_(ctr_qt_core_ffi_signal_wrapper_int * this_ptr, int arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_metaObject(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int() {
  return new ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_emit_(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * this_ptr, Qt::Orientation arg0, int arg1, int arg2) {
  this_ptr->emit_(arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_metaObject(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr() {
  return new ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_emit_(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * this_ptr, QAbstractItemModel * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, QModelIndex const * arg0, QModelIndex const * arg1, QVector< int > const * arg2) {
  this_ptr->emit_(*arg0, *arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0, int arg1, int arg2, QModelIndex const * arg3) {
  this_ptr->emit_(*arg0, arg1, arg2, *arg3);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_metaObject(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State() {
  return new ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_emit_(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * this_ptr, QAbstractAnimation::State arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * this_ptr, QItemSelection const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_double::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_metaObject(ctr_qt_core_ffi_signal_wrapper_double const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_qt_metacast(ctr_qt_core_ffi_signal_wrapper_double * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_qt_metacall(ctr_qt_core_ffi_signal_wrapper_double * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_double::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_double::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_double * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_ctr_qt_core_ffi_signal_wrapper_double() {
  return new ctr_qt_core_ffi_signal_wrapper_double();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_emit_(ctr_qt_core_ffi_signal_wrapper_double * this_ptr, double arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0, QModelIndex const * arg1) {
  this_ptr->emit_(*arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QString_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QString_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QString_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QString_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QString_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QString_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QString_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_ctr_qt_core_ffi_signal_wrapper_QString_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QString_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QString_const_ref * this_ptr, QString const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * this_ptr, QModelIndex const * arg0, int arg1) {
  this_ptr->emit_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_metaObject(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint() {
  return new ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_emit_(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, QList< QPersistentModelIndex > const * arg0, QAbstractItemModel::LayoutChangeHint arg1) {
  this_ptr->emit_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_metaObject(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr() {
  return new ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_emit_(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * this_ptr, QAbstractAnimation * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_metaObject(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_qt_metacast(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_qt_metacall(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus() {
  return new ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_emit_(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * this_ptr, int arg0, QProcess::ExitStatus arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_int_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_metaObject(ctr_qt_core_ffi_signal_wrapper_int_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_qt_metacast(ctr_qt_core_ffi_signal_wrapper_int_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_qt_metacall(ctr_qt_core_ffi_signal_wrapper_int_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_qint64 * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_ctr_qt_core_ffi_signal_wrapper_int_qint64() {
  return new ctr_qt_core_ffi_signal_wrapper_int_qint64();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_emit_(ctr_qt_core_ffi_signal_wrapper_int_qint64 * this_ptr, int arg0, qint64 arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_bool::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_metaObject(ctr_qt_core_ffi_signal_wrapper_bool const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_qt_metacast(ctr_qt_core_ffi_signal_wrapper_bool * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_qt_metacall(ctr_qt_core_ffi_signal_wrapper_bool * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_bool::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_bool::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_bool * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_ctr_qt_core_ffi_signal_wrapper_bool() {
  return new ctr_qt_core_ffi_signal_wrapper_bool();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_emit_(ctr_qt_core_ffi_signal_wrapper_bool * this_ptr, bool arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_metaObject(ctr_qt_core_ffi_signal_wrapper_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_ctr_qt_core_ffi_signal_wrapper_int_int() {
  return new ctr_qt_core_ffi_signal_wrapper_int_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_emit_(ctr_qt_core_ffi_signal_wrapper_int_int * this_ptr, int arg0, int arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_metaObject(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State() {
  return new ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_emit_(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, QAbstractAnimation::State arg0, QAbstractAnimation::State arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_metaObject(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState() {
  return new ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_emit_(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * this_ptr, QProcess::ProcessState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * this_ptr, QModelIndex const * arg0, int arg1, int arg2) {
  this_ptr->emit_(*arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QObject_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_metaObject(ctr_qt_core_ffi_signal_wrapper_QObject_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QObject_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QObject_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QObject_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QObject_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QObject_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_ctr_qt_core_ffi_signal_wrapper_QObject_ptr() {
  return new ctr_qt_core_ffi_signal_wrapper_QObject_ptr();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_emit_(ctr_qt_core_ffi_signal_wrapper_QObject_ptr * this_ptr, QObject * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_metaObject(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref() {
  return new ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_emit_(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, QItemSelection const * arg0, QItemSelection const * arg1) {
  this_ptr->emit_(*arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_Qt_Orientation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_metaObject(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_qt_metacast(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_qt_metacall(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation() {
  return new ctr_qt_core_ffi_signal_wrapper_Qt_Orientation();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_emit_(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * this_ptr, Qt::Orientation arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_metaObject(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int() {
  return new ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_emit_(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, QModelIndex const * arg0, int arg1, int arg2, QModelIndex const * arg3, int arg4) {
  this_ptr->emit_(*arg0, arg1, arg2, *arg3, arg4);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_staticMetaObject() {
  return &ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_metaObject(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_qt_metacast(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_qt_metacall(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError() {
  return new ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError();
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_emit_(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * this_ptr, QProcess::ProcessError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_dctr_qt_core_ffi_signal_wrapper_QTimeLine_State(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_qint64_dctr_qt_core_ffi_signal_wrapper_qint64(ctr_qt_core_ffi_signal_wrapper_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_dctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_dctr_qt_core_ffi_signal_wrapper_QVariant_const_ref(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper__dctr_qt_core_ffi_signal_wrapper_(ctr_qt_core_ffi_signal_wrapper_ * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_dctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_dctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_dctr_qt_core_ffi_signal_wrapper_int(ctr_qt_core_ffi_signal_wrapper_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_dctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_dctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_dctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_dctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_double_dctr_qt_core_ffi_signal_wrapper_double(ctr_qt_core_ffi_signal_wrapper_double * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_dctr_qt_core_ffi_signal_wrapper_QString_const_ref(ctr_qt_core_ffi_signal_wrapper_QString_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_dctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_dctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_dctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_qint64_dctr_qt_core_ffi_signal_wrapper_int_qint64(ctr_qt_core_ffi_signal_wrapper_int_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_bool_dctr_qt_core_ffi_signal_wrapper_bool(ctr_qt_core_ffi_signal_wrapper_bool * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_int_int_dctr_qt_core_ffi_signal_wrapper_int_int(ctr_qt_core_ffi_signal_wrapper_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_dctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_dctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_dctr_qt_core_ffi_signal_wrapper_QObject_ptr(ctr_qt_core_ffi_signal_wrapper_QObject_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_dctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_dctr_qt_core_ffi_signal_wrapper_Qt_Orientation(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_dctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_dctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr136(ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QTimeLine_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QTimeLine_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_qint64 * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr137(ctr_qt_core_ffi_signal_wrapper_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_qint64 * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr138(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr139(ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QVariant_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_ * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper__ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_ * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr140(ctr_qt_core_ffi_signal_wrapper_ * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_ * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper__ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_ * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr141(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr142(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_Direction * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr143(ctr_qt_core_ffi_signal_wrapper_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr144(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr145(ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractItemModel_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr146(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr147(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr148(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr149(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_double * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_double_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_double * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr150(ctr_qt_core_ffi_signal_wrapper_double * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_double * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_double_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_double * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr151(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QString_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QString_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr152(ctr_qt_core_ffi_signal_wrapper_QString_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QString_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QString_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QString_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr153(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr154(ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr155(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr156(ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_int_QProcess_ExitStatus * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_qint64 * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_int_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_int_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr157(ctr_qt_core_ffi_signal_wrapper_int_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_qint64 * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_int_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_int_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr158(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_bool * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_bool_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_bool * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr159(ctr_qt_core_ffi_signal_wrapper_bool * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_bool * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_bool_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_bool * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr160(ctr_qt_core_ffi_signal_wrapper_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr161(ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr162(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessState * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr163(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QObject_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QObject_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr164(ctr_qt_core_ffi_signal_wrapper_QObject_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QObject_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QObject_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QObject_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr165(ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr167(ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_Qt_Orientation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_Qt_Orientation * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr170(ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr171(ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_signal_wrapper_QProcess_ProcessError * >(ptr);
}


RITUAL_EXPORT QFutureInterface< void > * ctr_qt_core_ffi_QFutureInterface_void_QFutureInterface2() {
  return new QFutureInterface< void >();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointer_QObject_dQPointer(QPointer< QObject > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_QPointer_QObject_QPointer() {
  return new QPointer< QObject >();
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_QPointer_QObject_QPointer1(QPointer< QObject > const * other) {
  return new QPointer< QObject >(*other);
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_QPointer_QObject_operator_(QPointer< QObject > * this_ptr, QPointer< QObject > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_QPointer_QObject_QPointer2(QObject * p) {
  return new QPointer< QObject >(p);
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointer_QObject_swap(QPointer< QObject > * this_ptr, QPointer< QObject > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_QPointer_QObject_operator_1(QPointer< QObject > * this_ptr, QObject * p) {
  return &this_ptr->operator=(p);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPointer_QObject_data(QPointer< QObject > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPointer_QObject_operator__(QPointer< QObject > const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPointer_QObject_operator_2(QPointer< QObject > const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_QPointer_QObject_operator_QObject_(QPointer< QObject > const * this_ptr) {
  return this_ptr->operator QObject*();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_QPointer_QObject_isNull(QPointer< QObject > const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_core_ffi_QPointer_QObject_clear(QPointer< QObject > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1362(QObject const * o, QPointer< QObject > const * p) {
  return operator==(o, *p);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1363(QPointer< QObject > const * p, QObject const * o) {
  return operator==(*p, o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1364(QObject * o, QPointer< QObject > const * p) {
  return operator==(o, *p);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1365(QPointer< QObject > const * p, QObject * o) {
  return operator==(*p, o);
}


RITUAL_EXPORT bool ctr_qt_core_ffi_operator__1366(QPointer< QObject > const * p1, QPointer< QObject > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT QPointer< QObject > * ctr_qt_core_ffi_qPointerFromVariant_QObject(QVariant const * variant) {
  return new QPointer< QObject >(qPointerFromVariant< QObject >(*variant));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_metaObject(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int(QObject * parent, void (*callback)(void *, Qt::Orientation, int, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_set(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * this_ptr, void (*callback)(void *, Qt::Orientation, int, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_slot_(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * this_ptr, Qt::Orientation arg0, int arg1, int arg2) {
  this_ptr->slot_(arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_double::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_metaObject(ctr_qt_core_ffi_slot_wrapper_double const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_qt_metacast(ctr_qt_core_ffi_slot_wrapper_double * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_qt_metacall(ctr_qt_core_ffi_slot_wrapper_double * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_double::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_double::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_double * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_ctr_qt_core_ffi_slot_wrapper_double(QObject * parent, void (*callback)(void *, double), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_double(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_set(ctr_qt_core_ffi_slot_wrapper_double * this_ptr, void (*callback)(void *, double), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_slot_(ctr_qt_core_ffi_slot_wrapper_double * this_ptr, double arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_metaObject(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int(QObject * parent, void (*callback)(void *, Qt::Orientation, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_set(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * this_ptr, void (*callback)(void *, Qt::Orientation, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_slot_(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * this_ptr, Qt::Orientation arg0, int arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_metaObject(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State(QObject * parent, void (*callback)(void *, QAbstractAnimation::State), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_set(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * this_ptr, void (*callback)(void *, QAbstractAnimation::State), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_slot_(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * this_ptr, QAbstractAnimation::State arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref(QObject * parent, void (*callback)(void *, QModelIndex const *, QModelIndex const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, void (*callback)(void *, QModelIndex const *, QModelIndex const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0, QModelIndex const * arg1) {
  this_ptr->slot_(*arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_int_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_metaObject(ctr_qt_core_ffi_slot_wrapper_int_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_qt_metacast(ctr_qt_core_ffi_slot_wrapper_int_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_qt_metacall(ctr_qt_core_ffi_slot_wrapper_int_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_qint64 * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_ctr_qt_core_ffi_slot_wrapper_int_qint64(QObject * parent, void (*callback)(void *, int, long long), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_int_qint64(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_set(ctr_qt_core_ffi_slot_wrapper_int_qint64 * this_ptr, void (*callback)(void *, int, long long), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_slot_(ctr_qt_core_ffi_slot_wrapper_int_qint64 * this_ptr, int arg0, qint64 arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_metaObject(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError(QObject * parent, void (*callback)(void *, QProcess::ProcessError), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_set(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * this_ptr, void (*callback)(void *, QProcess::ProcessError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_slot_(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * this_ptr, QProcess::ProcessError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref(QObject * parent, void (*callback)(void *, QModelIndex const *, QModelIndex const *, QVector< int > const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, void (*callback)(void *, QModelIndex const *, QModelIndex const *, QVector< int > const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr, QModelIndex const * arg0, QModelIndex const * arg1, QVector< int > const * arg2) {
  this_ptr->slot_(*arg0, *arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int(QObject * parent, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr, QModelIndex const * arg0, int arg1, int arg2, QModelIndex const * arg3, int arg4) {
  this_ptr->slot_(*arg0, arg1, arg2, *arg3, arg4);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref(QObject * parent, void (*callback)(void *, QItemSelection const *, QItemSelection const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, void (*callback)(void *, QItemSelection const *, QItemSelection const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr, QItemSelection const * arg0, QItemSelection const * arg1) {
  this_ptr->slot_(*arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref(QObject * parent, void (*callback)(void *, QList< QPersistentModelIndex > const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, void (*callback)(void *, QList< QPersistentModelIndex > const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr, QList< QPersistentModelIndex > const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_metaObject(ctr_qt_core_ffi_slot_wrapper_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_qt_metacast(ctr_qt_core_ffi_slot_wrapper_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_qt_metacall(ctr_qt_core_ffi_slot_wrapper_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_qint64 * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_ctr_qt_core_ffi_slot_wrapper_qint64(QObject * parent, void (*callback)(void *, long long), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_qint64(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_set(ctr_qt_core_ffi_slot_wrapper_qint64 * this_ptr, void (*callback)(void *, long long), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_slot_(ctr_qt_core_ffi_slot_wrapper_qint64 * this_ptr, qint64 arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_metaObject(ctr_qt_core_ffi_slot_wrapper_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_ctr_qt_core_ffi_slot_wrapper_int(QObject * parent, void (*callback)(void *, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_set(ctr_qt_core_ffi_slot_wrapper_int * this_ptr, void (*callback)(void *, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_slot_(ctr_qt_core_ffi_slot_wrapper_int * this_ptr, int arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref(QObject * parent, void (*callback)(void *, QVariant const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * this_ptr, void (*callback)(void *, QVariant const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * this_ptr, QVariant const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_metaObject(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint(QObject * parent, void (*callback)(void *, QList< QPersistentModelIndex > const *, QAbstractItemModel::LayoutChangeHint), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_set(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, void (*callback)(void *, QList< QPersistentModelIndex > const *, QAbstractItemModel::LayoutChangeHint), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_slot_(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr, QList< QPersistentModelIndex > const * arg0, QAbstractItemModel::LayoutChangeHint arg1) {
  this_ptr->slot_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_bool::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_metaObject(ctr_qt_core_ffi_slot_wrapper_bool const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_qt_metacast(ctr_qt_core_ffi_slot_wrapper_bool * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_qt_metacall(ctr_qt_core_ffi_slot_wrapper_bool * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_bool::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_bool::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_bool * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_ctr_qt_core_ffi_slot_wrapper_bool(QObject * parent, void (*callback)(void *, bool), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_bool(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_set(ctr_qt_core_ffi_slot_wrapper_bool * this_ptr, void (*callback)(void *, bool), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_slot_(ctr_qt_core_ffi_slot_wrapper_bool * this_ptr, bool arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int(QObject * parent, void (*callback)(void *, QModelIndex const *, int, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * this_ptr, void (*callback)(void *, QModelIndex const *, int, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * this_ptr, QModelIndex const * arg0, int arg1, int arg2) {
  this_ptr->slot_(*arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref(QObject * parent, void (*callback)(void *, QModelIndex const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * this_ptr, void (*callback)(void *, QModelIndex const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_Qt_Orientation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_metaObject(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_qt_metacast(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_qt_metacall(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation(QObject * parent, void (*callback)(void *, Qt::Orientation), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_Qt_Orientation(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_set(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * this_ptr, void (*callback)(void *, Qt::Orientation), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_slot_(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * this_ptr, Qt::Orientation arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_metaObject(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr(QObject * parent, void (*callback)(void *, QAbstractAnimation *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_set(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * this_ptr, void (*callback)(void *, QAbstractAnimation *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_slot_(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * this_ptr, QAbstractAnimation * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__metaObject(ctr_qt_core_ffi_slot_wrapper_ const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__qt_metacast(ctr_qt_core_ffi_slot_wrapper_ * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__qt_metacall(ctr_qt_core_ffi_slot_wrapper_ * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_ * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__ctr_qt_core_ffi_slot_wrapper_(QObject * parent, void (*callback)(void *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__set(ctr_qt_core_ffi_slot_wrapper_ * this_ptr, void (*callback)(void *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__slot_(ctr_qt_core_ffi_slot_wrapper_ * this_ptr) {
  this_ptr->slot_();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QObject_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_metaObject(ctr_qt_core_ffi_slot_wrapper_QObject_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QObject_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QObject_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QObject_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_ctr_qt_core_ffi_slot_wrapper_QObject_ptr(QObject * parent, void (*callback)(void *, QObject *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QObject_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_set(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * this_ptr, void (*callback)(void *, QObject *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_slot_(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * this_ptr, QObject * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref(QObject * parent, void (*callback)(void *, QItemSelection const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * this_ptr, void (*callback)(void *, QItemSelection const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * this_ptr, QItemSelection const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_metaObject(ctr_qt_core_ffi_slot_wrapper_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_ctr_qt_core_ffi_slot_wrapper_int_int(QObject * parent, void (*callback)(void *, int, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_int_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_set(ctr_qt_core_ffi_slot_wrapper_int_int * this_ptr, void (*callback)(void *, int, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_slot_(ctr_qt_core_ffi_slot_wrapper_int_int * this_ptr, int arg0, int arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QTimeLine_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_metaObject(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State(QObject * parent, void (*callback)(void *, QTimeLine::State), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QTimeLine_State(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_set(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * this_ptr, void (*callback)(void *, QTimeLine::State), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_slot_(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * this_ptr, QTimeLine::State arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_metaObject(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_qt_metacast(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_qt_metacall(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus(QObject * parent, void (*callback)(void *, int, QProcess::ExitStatus), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_set(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * this_ptr, void (*callback)(void *, int, QProcess::ExitStatus), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_slot_(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * this_ptr, int arg0, QProcess::ExitStatus arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QString_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QString_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QString_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QString_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QString_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_ctr_qt_core_ffi_slot_wrapper_QString_const_ref(QObject * parent, void (*callback)(void *, QString const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QString_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * this_ptr, void (*callback)(void *, QString const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * this_ptr, QString const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_metaObject(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State(QObject * parent, void (*callback)(void *, QAbstractAnimation::State, QAbstractAnimation::State), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_set(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, void (*callback)(void *, QAbstractAnimation::State, QAbstractAnimation::State), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_slot_(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr, QAbstractAnimation::State arg0, QAbstractAnimation::State arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_metaObject(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState(QObject * parent, void (*callback)(void *, QProcess::ProcessState), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_set(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * this_ptr, void (*callback)(void *, QProcess::ProcessState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_slot_(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * this_ptr, QProcess::ProcessState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int(QObject * parent, void (*callback)(void *, QModelIndex const *, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * this_ptr, void (*callback)(void *, QModelIndex const *, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * this_ptr, QModelIndex const * arg0, int arg1) {
  this_ptr->slot_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_metaObject(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr(QObject * parent, void (*callback)(void *, QAbstractItemModel *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_set(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * this_ptr, void (*callback)(void *, QAbstractItemModel *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_slot_(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * this_ptr, QAbstractItemModel * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_metaObject(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction(QObject * parent, void (*callback)(void *, QAbstractAnimation::Direction), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_set(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * this_ptr, void (*callback)(void *, QAbstractAnimation::Direction), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_slot_(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * this_ptr, QAbstractAnimation::Direction arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_staticMetaObject() {
  return &ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_metaObject(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_qt_metacast(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_qt_metacall(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref(QObject * parent, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_set(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, void (*callback)(void *, QModelIndex const *, int, int, QModelIndex const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_slot_(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr, QModelIndex const * arg0, int arg1, int arg2, QModelIndex const * arg3) {
  this_ptr->slot_(*arg0, arg1, arg2, *arg3);
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_dctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_double_dctr_qt_core_ffi_slot_wrapper_double(ctr_qt_core_ffi_slot_wrapper_double * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_dctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_dctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_qint64_dctr_qt_core_ffi_slot_wrapper_int_qint64(ctr_qt_core_ffi_slot_wrapper_int_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_dctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_dctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_dctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_qint64_dctr_qt_core_ffi_slot_wrapper_qint64(ctr_qt_core_ffi_slot_wrapper_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_dctr_qt_core_ffi_slot_wrapper_int(ctr_qt_core_ffi_slot_wrapper_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_dctr_qt_core_ffi_slot_wrapper_QVariant_const_ref(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_dctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_bool_dctr_qt_core_ffi_slot_wrapper_bool(ctr_qt_core_ffi_slot_wrapper_bool * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_dctr_qt_core_ffi_slot_wrapper_Qt_Orientation(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_dctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper__dctr_qt_core_ffi_slot_wrapper_(ctr_qt_core_ffi_slot_wrapper_ * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_dctr_qt_core_ffi_slot_wrapper_QObject_ptr(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_dctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_int_dctr_qt_core_ffi_slot_wrapper_int_int(ctr_qt_core_ffi_slot_wrapper_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_dctr_qt_core_ffi_slot_wrapper_QTimeLine_State(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_dctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_dctr_qt_core_ffi_slot_wrapper_QString_const_ref(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_dctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_dctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_dctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_dctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_core_ffi_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_dctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr172(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_double * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_double_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_double * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr173(ctr_qt_core_ffi_slot_wrapper_double * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_double * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_double_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_double * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr174(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr175(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr176(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_qint64 * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_int_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_int_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr177(ctr_qt_core_ffi_slot_wrapper_int_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_qint64 * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_int_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_int_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr178(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessError * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr179(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_QModelIndex_const_ref_QVector_int_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr180(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr181(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr182(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_qint64 * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr183(ctr_qt_core_ffi_slot_wrapper_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_qint64 * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr184(ctr_qt_core_ffi_slot_wrapper_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr185(ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QVariant_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr186(ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QList_QPersistentModelIndex_const_ref_QAbstractItemModel_LayoutChangeHint * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_bool * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_bool_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_bool * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr188(ctr_qt_core_ffi_slot_wrapper_bool * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_bool * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_bool_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_bool * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr189(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr190(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr191(ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_Qt_Orientation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_Qt_Orientation * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr192(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_ * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper__ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_ * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr193(ctr_qt_core_ffi_slot_wrapper_ * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_ * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper__ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_ * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QObject_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QObject_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr194(ctr_qt_core_ffi_slot_wrapper_QObject_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QObject_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QObject_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QObject_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr195(ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QItemSelection_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr196(ctr_qt_core_ffi_slot_wrapper_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr197(ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QTimeLine_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QTimeLine_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr198(ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_int_QProcess_ExitStatus * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QString_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QString_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr199(ctr_qt_core_ffi_slot_wrapper_QString_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QString_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QString_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QString_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr200(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_State_QAbstractAnimation_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr201(ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QProcess_ProcessState * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr202(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr203(ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractItemModel_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr204(ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QAbstractAnimation_Direction * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_static_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_core_ffi_static_cast_QObject_ptr205(ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * ctr_qt_core_ffi_dynamic_cast_ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_core_ffi_slot_wrapper_QModelIndex_const_ref_int_int_QModelIndex_const_ref * >(ptr);
}


} // extern "C"
#include "file1.moc"
