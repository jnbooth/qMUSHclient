#include "qt_network_c_global.h"
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(QObject* parent, void (*callback)(void *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSslPreSharedKeyAuthenticator * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSslPreSharedKeyAuthenticator *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr() { }

Q_SIGNALS:
    void emit_(QSslPreSharedKeyAuthenticator * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(QObject* parent, void (*callback)(void *, QNetworkProxy const *, QAuthenticator *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkProxy const *, QAuthenticator *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkProxy const & arg0, QAuthenticator * arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkProxy const *, QAuthenticator *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr() { }

Q_SIGNALS:
    void emit_(QNetworkProxy const & arg0, QAuthenticator * arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(QObject* parent, void (*callback)(void *, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QFlags< QNetworkSession::UsagePolicy > arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), int(arg0));
        }
    }

private:
    ritual::Callback<void (*)(void *, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy() { }

Q_SIGNALS:
    void emit_(QFlags< QNetworkSession::UsagePolicy > arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(QObject* parent, void (*callback)(void *, QNetworkReply *, QAuthenticator *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkReply *, QAuthenticator *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkReply * arg0, QAuthenticator * arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkReply *, QAuthenticator *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr() { }

Q_SIGNALS:
    void emit_(QNetworkReply * arg0, QAuthenticator * arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(QObject* parent, void (*callback)(void *, QNetworkAccessManager::NetworkAccessibility), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkAccessManager::NetworkAccessibility), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkAccessManager::NetworkAccessibility arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkAccessManager::NetworkAccessibility)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility() { }

Q_SIGNALS:
    void emit_(QNetworkAccessManager::NetworkAccessibility arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(QObject* parent, void (*callback)(void *, QNetworkReply::NetworkError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkReply::NetworkError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkReply::NetworkError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkReply::NetworkError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError() { }

Q_SIGNALS:
    void emit_(QNetworkReply::NetworkError arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(QObject* parent, void (*callback)(void *, QNetworkReply *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkReply *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkReply * arg0, QSslPreSharedKeyAuthenticator * arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkReply *, QSslPreSharedKeyAuthenticator *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr() { }

Q_SIGNALS:
    void emit_(QNetworkReply * arg0, QSslPreSharedKeyAuthenticator * arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(QObject* parent, void (*callback)(void *, QUrl const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QUrl const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QUrl const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QUrl const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref() { }

Q_SIGNALS:
    void emit_(QUrl const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(QObject* parent, void (*callback)(void *, QLocalSocket::LocalSocketError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QLocalSocket::LocalSocketError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QLocalSocket::LocalSocketError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QLocalSocket::LocalSocketError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError() { }

Q_SIGNALS:
    void emit_(QLocalSocket::LocalSocketError arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(QObject* parent, void (*callback)(void *, QHostAddress const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QHostAddress const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QHostAddress const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QHostAddress const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref() { }

Q_SIGNALS:
    void emit_(QHostAddress const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(QObject* parent, void (*callback)(void *, QNetworkSession::SessionError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkSession::SessionError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkSession::SessionError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkSession::SessionError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError() { }

Q_SIGNALS:
    void emit_(QNetworkSession::SessionError arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(QObject* parent, void (*callback)(void *, QLocalSocket::LocalSocketState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QLocalSocket::LocalSocketState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QLocalSocket::LocalSocketState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QLocalSocket::LocalSocketState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState() { }

Q_SIGNALS:
    void emit_(QLocalSocket::LocalSocketState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(QObject* parent, void (*callback)(void *, QAbstractSocket::SocketState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractSocket::SocketState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractSocket::SocketState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractSocket::SocketState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState() { }

Q_SIGNALS:
    void emit_(QAbstractSocket::SocketState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(QObject* parent, void (*callback)(void *, QList< QSslError > const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QList< QSslError > const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QList< QSslError > const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QList< QSslError > const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref() { }

Q_SIGNALS:
    void emit_(QList< QSslError > const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(QObject* parent, void (*callback)(void *, QNetworkProxy const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkProxy const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkProxy const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkProxy const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref() { }

Q_SIGNALS:
    void emit_(QNetworkProxy const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(QObject* parent, void (*callback)(void *, QNetworkReply *, QList< QSslError > const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkReply *, QList< QSslError > const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkReply * arg0, QList< QSslError > const & arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, &arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkReply *, QList< QSslError > const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref() { }

Q_SIGNALS:
    void emit_(QNetworkReply * arg0, QList< QSslError > const & arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(QObject* parent, void (*callback)(void *, QSslSocket::SslMode), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSslSocket::SslMode), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSslSocket::SslMode arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSslSocket::SslMode)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode() { }

Q_SIGNALS:
    void emit_(QSslSocket::SslMode arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(QObject* parent, void (*callback)(void *, QSslError const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSslError const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSslError const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSslError const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref() { }

Q_SIGNALS:
    void emit_(QSslError const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(QObject* parent, void (*callback)(void *, QNetworkSession::State), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkSession::State), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkSession::State arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkSession::State)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State() { }

Q_SIGNALS:
    void emit_(QNetworkSession::State arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_qint64_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_qint64_qint64(QObject* parent, void (*callback)(void *, qint64, qint64), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, qint64, qint64), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(qint64 arg0, qint64 arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, qint64, qint64)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_qint64_qint64 : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_qint64_qint64() { }

Q_SIGNALS:
    void emit_(qint64 arg0, qint64 arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(QObject* parent, void (*callback)(void *, QNetworkConfiguration const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkConfiguration const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkConfiguration const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkConfiguration const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref() { }

Q_SIGNALS:
    void emit_(QNetworkConfiguration const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(QObject* parent, void (*callback)(void *, QNetworkConfiguration const *, bool), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkConfiguration const *, bool), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkConfiguration const & arg0, bool arg1) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0, arg1);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkConfiguration const *, bool)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool() { }

Q_SIGNALS:
    void emit_(QNetworkConfiguration const & arg0, bool arg1);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(QObject* parent, void (*callback)(void *, QNetworkReply *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QNetworkReply *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QNetworkReply * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QNetworkReply *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr() { }

Q_SIGNALS:
    void emit_(QNetworkReply * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(QObject* parent, void (*callback)(void *, QDnsLookup::Type), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QDnsLookup::Type), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QDnsLookup::Type arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QDnsLookup::Type)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type() { }

Q_SIGNALS:
    void emit_(QDnsLookup::Type arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(QObject* parent, void (*callback)(void *, QAbstractSocket::SocketError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QAbstractSocket::SocketError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QAbstractSocket::SocketError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QAbstractSocket::SocketError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError : public QObject {
    Q_OBJECT
public:
    ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError() { }

Q_SIGNALS:
    void emit_(QAbstractSocket::SocketError arg0);
};
extern "C" {
RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QAbstractNetworkCache_staticMetaObject() {
  return &QAbstractNetworkCache::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QAbstractSocket_staticMetaObject() {
  return &QAbstractSocket::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDnsLookup_staticMetaObject() {
  return &QDnsLookup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QTcpSocket_staticMetaObject() {
  return &QTcpSocket::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QSslError_staticMetaObject() {
  return &QSslError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QSslSocket_staticMetaObject() {
  return &QSslSocket::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDtlsClientVerifier_staticMetaObject() {
  return &QDtlsClientVerifier::staticMetaObject;
}


RITUAL_EXPORT QCryptographicHash::Algorithm ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_hash(QDtlsClientVerifier::GeneratorParameters const * this_ptr) {
  return this_ptr->hash;
}


RITUAL_EXPORT void ctr_qt_network_ffi_set_QDtlsClientVerifier_GeneratorParameters_hash(QDtlsClientVerifier::GeneratorParameters * this_ptr, QCryptographicHash::Algorithm value) {
  this_ptr->hash = value;
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_secret(QDtlsClientVerifier::GeneratorParameters const * this_ptr) {
  return &this_ptr->secret;
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_secret_mut(QDtlsClientVerifier::GeneratorParameters * this_ptr) {
  return &this_ptr->secret;
}


RITUAL_EXPORT void ctr_qt_network_ffi_set_QDtlsClientVerifier_GeneratorParameters_secret(QDtlsClientVerifier::GeneratorParameters * this_ptr, QByteArray const * value) {
  this_ptr->secret = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDtls_staticMetaObject() {
  return &QDtls::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QHttpMultiPart_staticMetaObject() {
  return &QHttpMultiPart::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QLocalServer_staticMetaObject() {
  return &QLocalServer::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QLocalSocket_staticMetaObject() {
  return &QLocalSocket::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkAccessManager_staticMetaObject() {
  return &QNetworkAccessManager::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkConfigurationManager_staticMetaObject() {
  return &QNetworkConfigurationManager::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkCookieJar_staticMetaObject() {
  return &QNetworkCookieJar::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkDiskCache_staticMetaObject() {
  return &QNetworkDiskCache::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkInterface_staticMetaObject() {
  return &QNetworkInterface::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkProxyQuery_staticMetaObject() {
  return &QNetworkProxyQuery::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkReply_staticMetaObject() {
  return &QNetworkReply::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkSession_staticMetaObject() {
  return &QNetworkSession::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QTcpServer_staticMetaObject() {
  return &QTcpServer::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QUdpSocket_staticMetaObject() {
  return &QUdpSocket::staticMetaObject;
}


RITUAL_EXPORT QNetworkRequest * ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest() {
  return new QNetworkRequest();
}


RITUAL_EXPORT QNetworkRequest * ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest1(QUrl const * url) {
  return new QNetworkRequest(*url);
}


RITUAL_EXPORT QNetworkRequest * ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest2(QNetworkRequest const * other) {
  return new QNetworkRequest(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_dQNetworkRequest(QNetworkRequest * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QNetworkRequest * ctr_qt_network_ffi_QNetworkRequest_operator_1(QNetworkRequest * this_ptr, QNetworkRequest const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_swap(QNetworkRequest * this_ptr, QNetworkRequest * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkRequest_operator__(QNetworkRequest const * this_ptr, QNetworkRequest const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QUrl * ctr_qt_network_ffi_QNetworkRequest_url(QNetworkRequest const * this_ptr) {
  return new QUrl(this_ptr->url());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setUrl(QNetworkRequest * this_ptr, QUrl const * url) {
  this_ptr->setUrl(*url);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkRequest_header(QNetworkRequest const * this_ptr, QNetworkRequest::KnownHeaders header) {
  return new QVariant(this_ptr->header(header));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setHeader(QNetworkRequest * this_ptr, QNetworkRequest::KnownHeaders header, QVariant const * value) {
  this_ptr->setHeader(header, *value);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkRequest_hasRawHeader(QNetworkRequest const * this_ptr, QByteArray const * headerName) {
  return this_ptr->hasRawHeader(*headerName);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QNetworkRequest_rawHeaderList(QNetworkRequest const * this_ptr) {
  return new QList< QByteArray >(this_ptr->rawHeaderList());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkRequest_rawHeader(QNetworkRequest const * this_ptr, QByteArray const * headerName) {
  return new QByteArray(this_ptr->rawHeader(*headerName));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setRawHeader(QNetworkRequest * this_ptr, QByteArray const * headerName, QByteArray const * value) {
  this_ptr->setRawHeader(*headerName, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkRequest_attribute(QNetworkRequest const * this_ptr, QNetworkRequest::Attribute code, QVariant const * defaultValue) {
  return new QVariant(this_ptr->attribute(code, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setAttribute(QNetworkRequest * this_ptr, QNetworkRequest::Attribute code, QVariant const * value) {
  this_ptr->setAttribute(code, *value);
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QNetworkRequest_sslConfiguration(QNetworkRequest const * this_ptr) {
  return new QSslConfiguration(this_ptr->sslConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setSslConfiguration(QNetworkRequest * this_ptr, QSslConfiguration const * configuration) {
  this_ptr->setSslConfiguration(*configuration);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setOriginatingObject(QNetworkRequest * this_ptr, QObject * object) {
  this_ptr->setOriginatingObject(object);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_QNetworkRequest_originatingObject(QNetworkRequest const * this_ptr) {
  return this_ptr->originatingObject();
}


RITUAL_EXPORT QNetworkRequest::Priority ctr_qt_network_ffi_QNetworkRequest_priority(QNetworkRequest const * this_ptr) {
  return this_ptr->priority();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setPriority(QNetworkRequest * this_ptr, QNetworkRequest::Priority priority) {
  this_ptr->setPriority(priority);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkRequest_maximumRedirectsAllowed(QNetworkRequest const * this_ptr) {
  return this_ptr->maximumRedirectsAllowed();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setMaximumRedirectsAllowed(QNetworkRequest * this_ptr, int maximumRedirectsAllowed) {
  this_ptr->setMaximumRedirectsAllowed(maximumRedirectsAllowed);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkRequest_peerVerifyName(QNetworkRequest const * this_ptr) {
  return new QString(this_ptr->peerVerifyName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setPeerVerifyName(QNetworkRequest * this_ptr, QString const * peerName) {
  this_ptr->setPeerVerifyName(*peerName);
}


RITUAL_EXPORT QHttp2Configuration * ctr_qt_network_ffi_QNetworkRequest_http2Configuration(QNetworkRequest const * this_ptr) {
  return new QHttp2Configuration(this_ptr->http2Configuration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setHttp2Configuration(QNetworkRequest * this_ptr, QHttp2Configuration const * configuration) {
  this_ptr->setHttp2Configuration(*configuration);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkRequest_transferTimeout(QNetworkRequest const * this_ptr) {
  return this_ptr->transferTimeout();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setTransferTimeout(QNetworkRequest * this_ptr, int timeout) {
  this_ptr->setTransferTimeout(timeout);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap(QNetworkRequest * value1, QNetworkRequest * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QNetworkCacheMetaData_QNetworkCacheMetaData() {
  return new QNetworkCacheMetaData();
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QNetworkCacheMetaData_QNetworkCacheMetaData1(QNetworkCacheMetaData const * other) {
  return new QNetworkCacheMetaData(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_dQNetworkCacheMetaData(QNetworkCacheMetaData * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QNetworkCacheMetaData_operator_1(QNetworkCacheMetaData * this_ptr, QNetworkCacheMetaData const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_swap(QNetworkCacheMetaData * this_ptr, QNetworkCacheMetaData * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCacheMetaData_operator__(QNetworkCacheMetaData const * this_ptr, QNetworkCacheMetaData const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCacheMetaData_isValid(QNetworkCacheMetaData const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QUrl * ctr_qt_network_ffi_QNetworkCacheMetaData_url(QNetworkCacheMetaData const * this_ptr) {
  return new QUrl(this_ptr->url());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setUrl(QNetworkCacheMetaData * this_ptr, QUrl const * url) {
  this_ptr->setUrl(*url);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QNetworkCacheMetaData_rawHeaders(QNetworkCacheMetaData const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >(this_ptr->rawHeaders());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setRawHeaders(QNetworkCacheMetaData * this_ptr, QList< QPair< QByteArray, QByteArray > > const * headers) {
  this_ptr->setRawHeaders(*headers);
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QNetworkCacheMetaData_lastModified(QNetworkCacheMetaData const * this_ptr) {
  return new QDateTime(this_ptr->lastModified());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setLastModified(QNetworkCacheMetaData * this_ptr, QDateTime const * dateTime) {
  this_ptr->setLastModified(*dateTime);
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QNetworkCacheMetaData_expirationDate(QNetworkCacheMetaData const * this_ptr) {
  return new QDateTime(this_ptr->expirationDate());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setExpirationDate(QNetworkCacheMetaData * this_ptr, QDateTime const * dateTime) {
  this_ptr->setExpirationDate(*dateTime);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCacheMetaData_saveToDisk(QNetworkCacheMetaData const * this_ptr) {
  return this_ptr->saveToDisk();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setSaveToDisk(QNetworkCacheMetaData * this_ptr, bool allow) {
  this_ptr->setSaveToDisk(allow);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant > * ctr_qt_network_ffi_QNetworkCacheMetaData_attributes(QNetworkCacheMetaData const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >(this_ptr->attributes());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCacheMetaData_setAttributes(QNetworkCacheMetaData * this_ptr, QHash< QNetworkRequest::Attribute, QVariant > const * attributes) {
  this_ptr->setAttributes(*attributes);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap1(QNetworkCacheMetaData * value1, QNetworkCacheMetaData * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__(QDataStream * arg1, QNetworkCacheMetaData const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__1(QDataStream * arg1, QNetworkCacheMetaData * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QAbstractNetworkCache_metaObject(QAbstractNetworkCache const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QAbstractNetworkCache_qt_metacast(QAbstractNetworkCache * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QAbstractNetworkCache_qt_metacall(QAbstractNetworkCache * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractNetworkCache_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractNetworkCache::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractNetworkCache_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractNetworkCache::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractNetworkCache_dQAbstractNetworkCache(QAbstractNetworkCache * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QAbstractNetworkCache_metaData(QAbstractNetworkCache * this_ptr, QUrl const * url) {
  return new QNetworkCacheMetaData(this_ptr->metaData(*url));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractNetworkCache_updateMetaData(QAbstractNetworkCache * this_ptr, QNetworkCacheMetaData const * metaData) {
  this_ptr->updateMetaData(*metaData);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_QAbstractNetworkCache_data(QAbstractNetworkCache * this_ptr, QUrl const * url) {
  return this_ptr->data(*url);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractNetworkCache_remove(QAbstractNetworkCache * this_ptr, QUrl const * url) {
  return this_ptr->remove(*url);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QAbstractNetworkCache_cacheSize(QAbstractNetworkCache const * this_ptr) {
  return this_ptr->cacheSize();
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_QAbstractNetworkCache_prepare(QAbstractNetworkCache * this_ptr, QNetworkCacheMetaData const * metaData) {
  return this_ptr->prepare(*metaData);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractNetworkCache_insert(QAbstractNetworkCache * this_ptr, QIODevice * device) {
  this_ptr->insert(device);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractNetworkCache_clear(QAbstractNetworkCache * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QAbstractSocket_metaObject(QAbstractSocket const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QAbstractSocket_qt_metacast(QAbstractSocket * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QAbstractSocket_qt_metacall(QAbstractSocket * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractSocket_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractSocket::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractSocket_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractSocket::trUtf8(s, c, n));
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_QAbstractSocket_QAbstractSocket(QAbstractSocket::SocketType socketType, QObject * parent) {
  return new QAbstractSocket(socketType, parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_dQAbstractSocket(QAbstractSocket * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_resume(QAbstractSocket * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QAbstractSocket_pauseMode(QAbstractSocket const * this_ptr) {
  return int(this_ptr->pauseMode());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_setPauseMode(QAbstractSocket * this_ptr, int pauseMode) {
  this_ptr->setPauseMode(QFlags< QAbstractSocket::PauseMode >(pauseMode));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind(QAbstractSocket * this_ptr, QHostAddress const * address, quint16 port, int mode) {
  return this_ptr->bind(*address, port, QFlags< QAbstractSocket::BindFlag >(mode));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind1(QAbstractSocket * this_ptr, quint16 port, int mode) {
  return this_ptr->bind(port, QFlags< QAbstractSocket::BindFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_connectToHost(QAbstractSocket * this_ptr, QString const * hostName, quint16 port, int mode, QAbstractSocket::NetworkLayerProtocol protocol) {
  this_ptr->connectToHost(*hostName, port, QFlags< QIODevice::OpenModeFlag >(mode), protocol);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_connectToHost1(QAbstractSocket * this_ptr, QHostAddress const * address, quint16 port, int mode) {
  this_ptr->connectToHost(*address, port, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_disconnectFromHost(QAbstractSocket * this_ptr) {
  this_ptr->disconnectFromHost();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_isValid(QAbstractSocket const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QAbstractSocket_bytesAvailable(QAbstractSocket const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QAbstractSocket_bytesToWrite(QAbstractSocket const * this_ptr) {
  return this_ptr->bytesToWrite();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_canReadLine(QAbstractSocket const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QAbstractSocket_localPort(QAbstractSocket const * this_ptr) {
  return this_ptr->localPort();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QAbstractSocket_localAddress(QAbstractSocket const * this_ptr) {
  return new QHostAddress(this_ptr->localAddress());
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QAbstractSocket_peerPort(QAbstractSocket const * this_ptr) {
  return this_ptr->peerPort();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QAbstractSocket_peerAddress(QAbstractSocket const * this_ptr) {
  return new QHostAddress(this_ptr->peerAddress());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractSocket_peerName(QAbstractSocket const * this_ptr) {
  return new QString(this_ptr->peerName());
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QAbstractSocket_readBufferSize(QAbstractSocket const * this_ptr) {
  return this_ptr->readBufferSize();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_setReadBufferSize(QAbstractSocket * this_ptr, qint64 size) {
  this_ptr->setReadBufferSize(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_abort(QAbstractSocket * this_ptr) {
  this_ptr->abort();
}


RITUAL_EXPORT qintptr ctr_qt_network_ffi_QAbstractSocket_socketDescriptor(QAbstractSocket const * this_ptr) {
  return this_ptr->socketDescriptor();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor(QAbstractSocket * this_ptr, qintptr socketDescriptor, QAbstractSocket::SocketState state, int openMode) {
  return this_ptr->setSocketDescriptor(socketDescriptor, state, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_setSocketOption(QAbstractSocket * this_ptr, QAbstractSocket::SocketOption option, QVariant const * value) {
  this_ptr->setSocketOption(option, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QAbstractSocket_socketOption(QAbstractSocket * this_ptr, QAbstractSocket::SocketOption option) {
  return new QVariant(this_ptr->socketOption(option));
}


RITUAL_EXPORT QAbstractSocket::SocketType ctr_qt_network_ffi_QAbstractSocket_socketType(QAbstractSocket const * this_ptr) {
  return this_ptr->socketType();
}


RITUAL_EXPORT QAbstractSocket::SocketState ctr_qt_network_ffi_QAbstractSocket_state(QAbstractSocket const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT QAbstractSocket::SocketError ctr_qt_network_ffi_QAbstractSocket_error(QAbstractSocket const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_close(QAbstractSocket * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_isSequential(QAbstractSocket const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_atEnd(QAbstractSocket const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_flush(QAbstractSocket * this_ptr) {
  return this_ptr->flush();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForConnected(QAbstractSocket * this_ptr, int msecs) {
  return this_ptr->waitForConnected(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForReadyRead(QAbstractSocket * this_ptr, int msecs) {
  return this_ptr->waitForReadyRead(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForBytesWritten(QAbstractSocket * this_ptr, int msecs) {
  return this_ptr->waitForBytesWritten(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForDisconnected(QAbstractSocket * this_ptr, int msecs) {
  return this_ptr->waitForDisconnected(msecs);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_setProxy(QAbstractSocket * this_ptr, QNetworkProxy const * networkProxy) {
  this_ptr->setProxy(*networkProxy);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QAbstractSocket_proxy(QAbstractSocket const * this_ptr) {
  return new QNetworkProxy(this_ptr->proxy());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAbstractSocket_protocolTag(QAbstractSocket const * this_ptr) {
  return new QString(this_ptr->protocolTag());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_setProtocolTag(QAbstractSocket * this_ptr, QString const * tag) {
  this_ptr->setProtocolTag(*tag);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__2(QDebug const * arg1, QAbstractSocket::SocketError arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__3(QDebug const * arg1, QAbstractSocket::SocketState arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QAuthenticator * ctr_qt_network_ffi_QAuthenticator_QAuthenticator() {
  return new QAuthenticator();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_dQAuthenticator(QAuthenticator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAuthenticator * ctr_qt_network_ffi_QAuthenticator_QAuthenticator1(QAuthenticator const * other) {
  return new QAuthenticator(*other);
}


RITUAL_EXPORT QAuthenticator * ctr_qt_network_ffi_QAuthenticator_operator_(QAuthenticator * this_ptr, QAuthenticator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAuthenticator_operator__(QAuthenticator const * this_ptr, QAuthenticator const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAuthenticator_user(QAuthenticator const * this_ptr) {
  return new QString(this_ptr->user());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_setUser(QAuthenticator * this_ptr, QString const * user) {
  this_ptr->setUser(*user);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAuthenticator_password(QAuthenticator const * this_ptr) {
  return new QString(this_ptr->password());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_setPassword(QAuthenticator * this_ptr, QString const * password) {
  this_ptr->setPassword(*password);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QAuthenticator_realm(QAuthenticator const * this_ptr) {
  return new QString(this_ptr->realm());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_setRealm(QAuthenticator * this_ptr, QString const * realm) {
  this_ptr->setRealm(*realm);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QAuthenticator_option(QAuthenticator const * this_ptr, QString const * opt) {
  return new QVariant(this_ptr->option(*opt));
}


RITUAL_EXPORT QHash< QString, QVariant > * ctr_qt_network_ffi_QAuthenticator_options(QAuthenticator const * this_ptr) {
  return new QHash< QString, QVariant >(this_ptr->options());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_setOption(QAuthenticator * this_ptr, QString const * opt, QVariant const * value) {
  this_ptr->setOption(*opt, *value);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAuthenticator_isNull(QAuthenticator const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAuthenticator_detach(QAuthenticator * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QDnsDomainNameRecord_QDnsDomainNameRecord() {
  return new QDnsDomainNameRecord();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QDnsDomainNameRecord_QDnsDomainNameRecord1(QDnsDomainNameRecord const * other) {
  return new QDnsDomainNameRecord(*other);
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QDnsDomainNameRecord_operator_1(QDnsDomainNameRecord * this_ptr, QDnsDomainNameRecord const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsDomainNameRecord_dQDnsDomainNameRecord(QDnsDomainNameRecord * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsDomainNameRecord_swap(QDnsDomainNameRecord * this_ptr, QDnsDomainNameRecord * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsDomainNameRecord_name(QDnsDomainNameRecord const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QDnsDomainNameRecord_timeToLive(QDnsDomainNameRecord const * this_ptr) {
  return this_ptr->timeToLive();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsDomainNameRecord_value(QDnsDomainNameRecord const * this_ptr) {
  return new QString(this_ptr->value());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap2(QDnsDomainNameRecord * value1, QDnsDomainNameRecord * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QDnsHostAddressRecord_QDnsHostAddressRecord() {
  return new QDnsHostAddressRecord();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QDnsHostAddressRecord_QDnsHostAddressRecord1(QDnsHostAddressRecord const * other) {
  return new QDnsHostAddressRecord(*other);
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QDnsHostAddressRecord_operator_1(QDnsHostAddressRecord * this_ptr, QDnsHostAddressRecord const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsHostAddressRecord_dQDnsHostAddressRecord(QDnsHostAddressRecord * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsHostAddressRecord_swap(QDnsHostAddressRecord * this_ptr, QDnsHostAddressRecord * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsHostAddressRecord_name(QDnsHostAddressRecord const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QDnsHostAddressRecord_timeToLive(QDnsHostAddressRecord const * this_ptr) {
  return this_ptr->timeToLive();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QDnsHostAddressRecord_value(QDnsHostAddressRecord const * this_ptr) {
  return new QHostAddress(this_ptr->value());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap3(QDnsHostAddressRecord * value1, QDnsHostAddressRecord * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QDnsMailExchangeRecord_QDnsMailExchangeRecord() {
  return new QDnsMailExchangeRecord();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QDnsMailExchangeRecord_QDnsMailExchangeRecord1(QDnsMailExchangeRecord const * other) {
  return new QDnsMailExchangeRecord(*other);
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QDnsMailExchangeRecord_operator_1(QDnsMailExchangeRecord * this_ptr, QDnsMailExchangeRecord const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsMailExchangeRecord_dQDnsMailExchangeRecord(QDnsMailExchangeRecord * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsMailExchangeRecord_swap(QDnsMailExchangeRecord * this_ptr, QDnsMailExchangeRecord * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsMailExchangeRecord_exchange(QDnsMailExchangeRecord const * this_ptr) {
  return new QString(this_ptr->exchange());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsMailExchangeRecord_name(QDnsMailExchangeRecord const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDnsMailExchangeRecord_preference(QDnsMailExchangeRecord const * this_ptr) {
  return this_ptr->preference();
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QDnsMailExchangeRecord_timeToLive(QDnsMailExchangeRecord const * this_ptr) {
  return this_ptr->timeToLive();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap4(QDnsMailExchangeRecord * value1, QDnsMailExchangeRecord * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QDnsServiceRecord_QDnsServiceRecord() {
  return new QDnsServiceRecord();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QDnsServiceRecord_QDnsServiceRecord1(QDnsServiceRecord const * other) {
  return new QDnsServiceRecord(*other);
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QDnsServiceRecord_operator_1(QDnsServiceRecord * this_ptr, QDnsServiceRecord const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsServiceRecord_dQDnsServiceRecord(QDnsServiceRecord * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsServiceRecord_swap(QDnsServiceRecord * this_ptr, QDnsServiceRecord * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsServiceRecord_name(QDnsServiceRecord const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDnsServiceRecord_port(QDnsServiceRecord const * this_ptr) {
  return this_ptr->port();
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDnsServiceRecord_priority(QDnsServiceRecord const * this_ptr) {
  return this_ptr->priority();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsServiceRecord_target(QDnsServiceRecord const * this_ptr) {
  return new QString(this_ptr->target());
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QDnsServiceRecord_timeToLive(QDnsServiceRecord const * this_ptr) {
  return this_ptr->timeToLive();
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDnsServiceRecord_weight(QDnsServiceRecord const * this_ptr) {
  return this_ptr->weight();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap5(QDnsServiceRecord * value1, QDnsServiceRecord * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QDnsTextRecord_QDnsTextRecord() {
  return new QDnsTextRecord();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QDnsTextRecord_QDnsTextRecord1(QDnsTextRecord const * other) {
  return new QDnsTextRecord(*other);
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QDnsTextRecord_operator_1(QDnsTextRecord * this_ptr, QDnsTextRecord const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsTextRecord_dQDnsTextRecord(QDnsTextRecord * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsTextRecord_swap(QDnsTextRecord * this_ptr, QDnsTextRecord * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsTextRecord_name(QDnsTextRecord const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QDnsTextRecord_timeToLive(QDnsTextRecord const * this_ptr) {
  return this_ptr->timeToLive();
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QDnsTextRecord_values(QDnsTextRecord const * this_ptr) {
  return new QList< QByteArray >(this_ptr->values());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap6(QDnsTextRecord * value1, QDnsTextRecord * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDnsLookup_metaObject(QDnsLookup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QDnsLookup_qt_metacast(QDnsLookup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QDnsLookup_qt_metacall(QDnsLookup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsLookup_tr(char const * s, char const * c, int n) {
  return new QString(QDnsLookup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsLookup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QDnsLookup::trUtf8(s, c, n));
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup(QObject * parent) {
  return new QDnsLookup(parent);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup1(QDnsLookup::Type type, QString const * name, QObject * parent) {
  return new QDnsLookup(type, *name, parent);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup2(QDnsLookup::Type type, QString const * name, QHostAddress const * nameserver, QObject * parent) {
  return new QDnsLookup(type, *name, *nameserver, parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_dQDnsLookup(QDnsLookup * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDnsLookup::Error ctr_qt_network_ffi_QDnsLookup_error(QDnsLookup const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsLookup_errorString(QDnsLookup const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDnsLookup_isFinished(QDnsLookup const * this_ptr) {
  return this_ptr->isFinished();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDnsLookup_name(QDnsLookup const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_setName(QDnsLookup * this_ptr, QString const * name) {
  this_ptr->setName(*name);
}


RITUAL_EXPORT QDnsLookup::Type ctr_qt_network_ffi_QDnsLookup_type(QDnsLookup const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_setType(QDnsLookup * this_ptr, QDnsLookup::Type arg1) {
  this_ptr->setType(arg1);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QDnsLookup_nameserver(QDnsLookup const * this_ptr) {
  return new QHostAddress(this_ptr->nameserver());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_setNameserver(QDnsLookup * this_ptr, QHostAddress const * nameserver) {
  this_ptr->setNameserver(*nameserver);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QDnsLookup_canonicalNameRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsDomainNameRecord >(this_ptr->canonicalNameRecords());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QDnsLookup_hostAddressRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsHostAddressRecord >(this_ptr->hostAddressRecords());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QDnsLookup_mailExchangeRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >(this_ptr->mailExchangeRecords());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QDnsLookup_nameServerRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsDomainNameRecord >(this_ptr->nameServerRecords());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QDnsLookup_pointerRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsDomainNameRecord >(this_ptr->pointerRecords());
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QDnsLookup_serviceRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsServiceRecord >(this_ptr->serviceRecords());
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QDnsLookup_textRecords(QDnsLookup const * this_ptr) {
  return new QList< QDnsTextRecord >(this_ptr->textRecords());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_abort(QDnsLookup * this_ptr) {
  this_ptr->abort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDnsLookup_lookup(QDnsLookup * this_ptr) {
  this_ptr->lookup();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QTcpSocket_metaObject(QTcpSocket const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QTcpSocket_qt_metacast(QTcpSocket * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QTcpSocket_qt_metacall(QTcpSocket * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QTcpSocket_tr(char const * s, char const * c, int n) {
  return new QString(QTcpSocket::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QTcpSocket_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTcpSocket::trUtf8(s, c, n));
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_QTcpSocket_QTcpSocket(QObject * parent) {
  return new QTcpSocket(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpSocket_dQTcpSocket(QTcpSocket * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash(QSslCertificate const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate(QIODevice * device, QSsl::EncodingFormat format) {
  return new QSslCertificate(device, format);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate1(QByteArray const * data, QSsl::EncodingFormat format) {
  return new QSslCertificate(*data, format);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate2(QSslCertificate const * other) {
  return new QSslCertificate(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCertificate_dQSslCertificate(QSslCertificate * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_operator_1(QSslCertificate * this_ptr, QSslCertificate const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCertificate_swap(QSslCertificate * this_ptr, QSslCertificate * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_operator__(QSslCertificate const * this_ptr, QSslCertificate const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_isNull(QSslCertificate const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_isBlacklisted(QSslCertificate const * this_ptr) {
  return this_ptr->isBlacklisted();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_isSelfSigned(QSslCertificate const * this_ptr) {
  return this_ptr->isSelfSigned();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCertificate_clear(QSslCertificate * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_version(QSslCertificate const * this_ptr) {
  return new QByteArray(this_ptr->version());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_serialNumber(QSslCertificate const * this_ptr) {
  return new QByteArray(this_ptr->serialNumber());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_digest(QSslCertificate const * this_ptr, QCryptographicHash::Algorithm algorithm) {
  return new QByteArray(this_ptr->digest(algorithm));
}


RITUAL_EXPORT QStringList * ctr_qt_network_ffi_QSslCertificate_issuerInfo(QSslCertificate const * this_ptr, QSslCertificate::SubjectInfo info) {
  return new QStringList(this_ptr->issuerInfo(info));
}


RITUAL_EXPORT QStringList * ctr_qt_network_ffi_QSslCertificate_issuerInfo1(QSslCertificate const * this_ptr, QByteArray const * attribute) {
  return new QStringList(this_ptr->issuerInfo(*attribute));
}


RITUAL_EXPORT QStringList * ctr_qt_network_ffi_QSslCertificate_subjectInfo(QSslCertificate const * this_ptr, QSslCertificate::SubjectInfo info) {
  return new QStringList(this_ptr->subjectInfo(info));
}


RITUAL_EXPORT QStringList * ctr_qt_network_ffi_QSslCertificate_subjectInfo1(QSslCertificate const * this_ptr, QByteArray const * attribute) {
  return new QStringList(this_ptr->subjectInfo(*attribute));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCertificate_issuerDisplayName(QSslCertificate const * this_ptr) {
  return new QString(this_ptr->issuerDisplayName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCertificate_subjectDisplayName(QSslCertificate const * this_ptr) {
  return new QString(this_ptr->subjectDisplayName());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QSslCertificate_subjectInfoAttributes(QSslCertificate const * this_ptr) {
  return new QList< QByteArray >(this_ptr->subjectInfoAttributes());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QSslCertificate_issuerInfoAttributes(QSslCertificate const * this_ptr) {
  return new QList< QByteArray >(this_ptr->issuerInfoAttributes());
}


RITUAL_EXPORT QMultiMap< QSsl::AlternativeNameEntryType, QString > * ctr_qt_network_ffi_QSslCertificate_subjectAlternativeNames(QSslCertificate const * this_ptr) {
  return new QMultiMap< QSsl::AlternativeNameEntryType, QString >(this_ptr->subjectAlternativeNames());
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QSslCertificate_effectiveDate(QSslCertificate const * this_ptr) {
  return new QDateTime(this_ptr->effectiveDate());
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QSslCertificate_expiryDate(QSslCertificate const * this_ptr) {
  return new QDateTime(this_ptr->expiryDate());
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslCertificate_publicKey(QSslCertificate const * this_ptr) {
  return new QSslKey(this_ptr->publicKey());
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QSslCertificate_extensions(QSslCertificate const * this_ptr) {
  return new QList< QSslCertificateExtension >(this_ptr->extensions());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_toPem(QSslCertificate const * this_ptr) {
  return new QByteArray(this_ptr->toPem());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_toDer(QSslCertificate const * this_ptr) {
  return new QByteArray(this_ptr->toDer());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCertificate_toText(QSslCertificate const * this_ptr) {
  return new QString(this_ptr->toText());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromPath(QString const * path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax) {
  return new QList< QSslCertificate >(QSslCertificate::fromPath(*path, format, syntax));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromPath1(QString const * path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax) {
  return new QList< QSslCertificate >(QSslCertificate::fromPath(*path, format, syntax));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromDevice(QIODevice * device, QSsl::EncodingFormat format) {
  return new QList< QSslCertificate >(QSslCertificate::fromDevice(device, format));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromData(QByteArray const * data, QSsl::EncodingFormat format) {
  return new QList< QSslCertificate >(QSslCertificate::fromData(*data, format));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QSslCertificate_verify(QList< QSslCertificate > const * certificateChain, QString const * hostName) {
  return new QList< QSslError >(QSslCertificate::verify(*certificateChain, *hostName));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_importPkcs12(QIODevice * device, QSslKey * key, QSslCertificate * cert, QList< QSslCertificate > * caCertificates, QByteArray const * passPhrase) {
  return QSslCertificate::importPkcs12(device, key, cert, caCertificates, *passPhrase);
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QSslCertificate_handle(QSslCertificate const * this_ptr) {
  return this_ptr->handle();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap7(QSslCertificate * value1, QSslCertificate * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__4(QDebug const * debug, QSslCertificate const * certificate) {
  return new QDebug(operator<<(*debug, *certificate));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__5(QDebug const * debug, QSslCertificate::SubjectInfo info) {
  return new QDebug(operator<<(*debug, info));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QSslError_QSslError() {
  return new QSslError();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QSslError_QSslError1(QSslError::SslError error) {
  return new QSslError(error);
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QSslError_QSslError2(QSslError::SslError error, QSslCertificate const * certificate) {
  return new QSslError(error, *certificate);
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QSslError_QSslError3(QSslError const * other) {
  return new QSslError(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslError_swap(QSslError * this_ptr, QSslError * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslError_dQSslError(QSslError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QSslError_operator_1(QSslError * this_ptr, QSslError const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslError_operator__(QSslError const * this_ptr, QSslError const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QSslError::SslError ctr_qt_network_ffi_QSslError_error(QSslError const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslError_errorString(QSslError const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslError_certificate(QSslError const * this_ptr) {
  return new QSslCertificate(this_ptr->certificate());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap8(QSslError * value1, QSslError * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash1(QSslError const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__6(QDebug const * debug, QSslError const * error) {
  return new QDebug(operator<<(*debug, *error));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__7(QDebug const * debug, QSslError::SslError const * error) {
  return new QDebug(operator<<(*debug, *error));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QSslSocket_metaObject(QSslSocket const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QSslSocket_qt_metacast(QSslSocket * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslSocket_qt_metacall(QSslSocket * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslSocket_tr(char const * s, char const * c, int n) {
  return new QString(QSslSocket::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslSocket_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSslSocket::trUtf8(s, c, n));
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_QSslSocket_QSslSocket(QObject * parent) {
  return new QSslSocket(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_dQSslSocket(QSslSocket * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_resume(QSslSocket * this_ptr) {
  this_ptr->resume();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted(QSslSocket * this_ptr, QString const * hostName, quint16 port, int mode, QAbstractSocket::NetworkLayerProtocol protocol) {
  this_ptr->connectToHostEncrypted(*hostName, port, QFlags< QIODevice::OpenModeFlag >(mode), protocol);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted1(QSslSocket * this_ptr, QString const * hostName, quint16 port, QString const * sslPeerName, int mode, QAbstractSocket::NetworkLayerProtocol protocol) {
  this_ptr->connectToHostEncrypted(*hostName, port, *sslPeerName, QFlags< QIODevice::OpenModeFlag >(mode), protocol);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_setSocketDescriptor(QSslSocket * this_ptr, qintptr socketDescriptor, QAbstractSocket::SocketState state, int openMode) {
  return this_ptr->setSocketDescriptor(socketDescriptor, state, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHost(QSslSocket * this_ptr, QString const * hostName, quint16 port, int openMode, QAbstractSocket::NetworkLayerProtocol protocol) {
  this_ptr->connectToHost(*hostName, port, QFlags< QIODevice::OpenModeFlag >(openMode), protocol);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_disconnectFromHost(QSslSocket * this_ptr) {
  this_ptr->disconnectFromHost();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setSocketOption(QSslSocket * this_ptr, QAbstractSocket::SocketOption option, QVariant const * value) {
  this_ptr->setSocketOption(option, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QSslSocket_socketOption(QSslSocket * this_ptr, QAbstractSocket::SocketOption option) {
  return new QVariant(this_ptr->socketOption(option));
}


RITUAL_EXPORT QSslSocket::SslMode ctr_qt_network_ffi_QSslSocket_mode(QSslSocket const * this_ptr) {
  return this_ptr->mode();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_isEncrypted(QSslSocket const * this_ptr) {
  return this_ptr->isEncrypted();
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QSslSocket_protocol(QSslSocket const * this_ptr) {
  return this_ptr->protocol();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setProtocol(QSslSocket * this_ptr, QSsl::SslProtocol protocol) {
  this_ptr->setProtocol(protocol);
}


RITUAL_EXPORT QSslSocket::PeerVerifyMode ctr_qt_network_ffi_QSslSocket_peerVerifyMode(QSslSocket const * this_ptr) {
  return this_ptr->peerVerifyMode();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPeerVerifyMode(QSslSocket * this_ptr, QSslSocket::PeerVerifyMode mode) {
  this_ptr->setPeerVerifyMode(mode);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslSocket_peerVerifyDepth(QSslSocket const * this_ptr) {
  return this_ptr->peerVerifyDepth();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPeerVerifyDepth(QSslSocket * this_ptr, int depth) {
  this_ptr->setPeerVerifyDepth(depth);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslSocket_peerVerifyName(QSslSocket const * this_ptr) {
  return new QString(this_ptr->peerVerifyName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPeerVerifyName(QSslSocket * this_ptr, QString const * hostName) {
  this_ptr->setPeerVerifyName(*hostName);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QSslSocket_bytesAvailable(QSslSocket const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QSslSocket_bytesToWrite(QSslSocket const * this_ptr) {
  return this_ptr->bytesToWrite();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_canReadLine(QSslSocket const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_close(QSslSocket * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_atEnd(QSslSocket const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_flush(QSslSocket * this_ptr) {
  return this_ptr->flush();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_abort(QSslSocket * this_ptr) {
  this_ptr->abort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setReadBufferSize(QSslSocket * this_ptr, qint64 size) {
  this_ptr->setReadBufferSize(size);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QSslSocket_encryptedBytesAvailable(QSslSocket const * this_ptr) {
  return this_ptr->encryptedBytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QSslSocket_encryptedBytesToWrite(QSslSocket const * this_ptr) {
  return this_ptr->encryptedBytesToWrite();
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslSocket_sslConfiguration(QSslSocket const * this_ptr) {
  return new QSslConfiguration(this_ptr->sslConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setSslConfiguration(QSslSocket * this_ptr, QSslConfiguration const * config) {
  this_ptr->setSslConfiguration(*config);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setLocalCertificateChain(QSslSocket * this_ptr, QList< QSslCertificate > const * localChain) {
  this_ptr->setLocalCertificateChain(*localChain);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslSocket_localCertificateChain(QSslSocket const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->localCertificateChain());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setLocalCertificate(QSslSocket * this_ptr, QSslCertificate const * certificate) {
  this_ptr->setLocalCertificate(*certificate);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setLocalCertificate1(QSslSocket * this_ptr, QString const * fileName, QSsl::EncodingFormat format) {
  this_ptr->setLocalCertificate(*fileName, format);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslSocket_localCertificate(QSslSocket const * this_ptr) {
  return new QSslCertificate(this_ptr->localCertificate());
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslSocket_peerCertificate(QSslSocket const * this_ptr) {
  return new QSslCertificate(this_ptr->peerCertificate());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslSocket_peerCertificateChain(QSslSocket const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->peerCertificateChain());
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslSocket_sessionCipher(QSslSocket const * this_ptr) {
  return new QSslCipher(this_ptr->sessionCipher());
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QSslSocket_sessionProtocol(QSslSocket const * this_ptr) {
  return this_ptr->sessionProtocol();
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QSslSocket_ocspResponses(QSslSocket const * this_ptr) {
  return new QVector< QOcspResponse >(this_ptr->ocspResponses());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPrivateKey(QSslSocket * this_ptr, QSslKey const * key) {
  this_ptr->setPrivateKey(*key);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPrivateKey1(QSslSocket * this_ptr, QString const * fileName, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, QByteArray const * passPhrase) {
  this_ptr->setPrivateKey(*fileName, algorithm, format, *passPhrase);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslSocket_privateKey(QSslSocket const * this_ptr) {
  return new QSslKey(this_ptr->privateKey());
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QSslSocket_ciphers(QSslSocket const * this_ptr) {
  return new QList< QSslCipher >(this_ptr->ciphers());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setCiphers(QSslSocket * this_ptr, QList< QSslCipher > const * ciphers) {
  this_ptr->setCiphers(*ciphers);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setCiphers1(QSslSocket * this_ptr, QString const * ciphers) {
  this_ptr->setCiphers(*ciphers);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setDefaultCiphers(QList< QSslCipher > const * ciphers) {
  QSslSocket::setDefaultCiphers(*ciphers);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QSslSocket_defaultCiphers() {
  return new QList< QSslCipher >(QSslSocket::defaultCiphers());
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QSslSocket_supportedCiphers() {
  return new QList< QSslCipher >(QSslSocket::supportedCiphers());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addCaCertificates(QSslSocket * this_ptr, QString const * path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax) {
  return this_ptr->addCaCertificates(*path, format, syntax);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_addCaCertificate(QSslSocket * this_ptr, QSslCertificate const * certificate) {
  this_ptr->addCaCertificate(*certificate);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_addCaCertificates1(QSslSocket * this_ptr, QList< QSslCertificate > const * certificates) {
  this_ptr->addCaCertificates(*certificates);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setCaCertificates(QSslSocket * this_ptr, QList< QSslCertificate > const * certificates) {
  this_ptr->setCaCertificates(*certificates);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslSocket_caCertificates(QSslSocket const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->caCertificates());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates(QString const * path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax) {
  return QSslSocket::addDefaultCaCertificates(*path, format, syntax);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificate(QSslCertificate const * certificate) {
  QSslSocket::addDefaultCaCertificate(*certificate);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates1(QList< QSslCertificate > const * certificates) {
  QSslSocket::addDefaultCaCertificates(*certificates);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setDefaultCaCertificates(QList< QSslCertificate > const * certificates) {
  QSslSocket::setDefaultCaCertificates(*certificates);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslSocket_defaultCaCertificates() {
  return new QList< QSslCertificate >(QSslSocket::defaultCaCertificates());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslSocket_systemCaCertificates() {
  return new QList< QSslCertificate >(QSslSocket::systemCaCertificates());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForConnected(QSslSocket * this_ptr, int msecs) {
  return this_ptr->waitForConnected(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForEncrypted(QSslSocket * this_ptr, int msecs) {
  return this_ptr->waitForEncrypted(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForReadyRead(QSslSocket * this_ptr, int msecs) {
  return this_ptr->waitForReadyRead(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForBytesWritten(QSslSocket * this_ptr, int msecs) {
  return this_ptr->waitForBytesWritten(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForDisconnected(QSslSocket * this_ptr, int msecs) {
  return this_ptr->waitForDisconnected(msecs);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QSslSocket_sslErrors(QSslSocket const * this_ptr) {
  return new QList< QSslError >(this_ptr->sslErrors());
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QSslSocket_sslHandshakeErrors(QSslSocket const * this_ptr) {
  return new QList< QSslError >(this_ptr->sslHandshakeErrors());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_supportsSsl() {
  return QSslSocket::supportsSsl();
}


RITUAL_EXPORT long ctr_qt_network_ffi_QSslSocket_sslLibraryVersionNumber() {
  return QSslSocket::sslLibraryVersionNumber();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslSocket_sslLibraryVersionString() {
  return new QString(QSslSocket::sslLibraryVersionString());
}


RITUAL_EXPORT long ctr_qt_network_ffi_QSslSocket_sslLibraryBuildVersionNumber() {
  return QSslSocket::sslLibraryBuildVersionNumber();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslSocket_sslLibraryBuildVersionString() {
  return new QString(QSslSocket::sslLibraryBuildVersionString());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_ignoreSslErrors(QSslSocket * this_ptr, QList< QSslError > const * errors) {
  this_ptr->ignoreSslErrors(*errors);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_startClientEncryption(QSslSocket * this_ptr) {
  this_ptr->startClientEncryption();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_startServerEncryption(QSslSocket * this_ptr) {
  this_ptr->startServerEncryption();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_ignoreSslErrors1(QSslSocket * this_ptr) {
  this_ptr->ignoreSslErrors();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDtlsClientVerifier_metaObject(QDtlsClientVerifier const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QDtlsClientVerifier_qt_metacast(QDtlsClientVerifier * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QDtlsClientVerifier_qt_metacall(QDtlsClientVerifier * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtlsClientVerifier_tr(char const * s, char const * c, int n) {
  return new QString(QDtlsClientVerifier::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtlsClientVerifier_trUtf8(char const * s, char const * c, int n) {
  return new QString(QDtlsClientVerifier::trUtf8(s, c, n));
}


RITUAL_EXPORT QDtlsClientVerifier * ctr_qt_network_ffi_QDtlsClientVerifier_QDtlsClientVerifier(QObject * parent) {
  return new QDtlsClientVerifier(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDtlsClientVerifier_dQDtlsClientVerifier(QDtlsClientVerifier * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters() {
  return new QDtlsClientVerifier::GeneratorParameters();
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters1(QCryptographicHash::Algorithm a, QByteArray const * s) {
  return new QDtlsClientVerifier::GeneratorParameters(a, *s);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtlsClientVerifier_setCookieGeneratorParameters(QDtlsClientVerifier * this_ptr, QDtlsClientVerifier::GeneratorParameters const * params) {
  return this_ptr->setCookieGeneratorParameters(*params);
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtlsClientVerifier_cookieGeneratorParameters(QDtlsClientVerifier const * this_ptr) {
  return new QDtlsClientVerifier::GeneratorParameters(this_ptr->cookieGeneratorParameters());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtlsClientVerifier_verifyClient(QDtlsClientVerifier * this_ptr, QUdpSocket * socket, QByteArray const * dgram, QHostAddress const * address, quint16 port) {
  return this_ptr->verifyClient(socket, *dgram, *address, port);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QDtlsClientVerifier_verifiedHello(QDtlsClientVerifier const * this_ptr) {
  return new QByteArray(this_ptr->verifiedHello());
}


RITUAL_EXPORT QDtlsError ctr_qt_network_ffi_QDtlsClientVerifier_dtlsError(QDtlsClientVerifier const * this_ptr) {
  return this_ptr->dtlsError();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtlsClientVerifier_dtlsErrorString(QDtlsClientVerifier const * this_ptr) {
  return new QString(this_ptr->dtlsErrorString());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QDtls_metaObject(QDtls const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QDtls_qt_metacast(QDtls * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QDtls_qt_metacall(QDtls * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtls_tr(char const * s, char const * c, int n) {
  return new QString(QDtls::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtls_trUtf8(char const * s, char const * c, int n) {
  return new QString(QDtls::trUtf8(s, c, n));
}


RITUAL_EXPORT QDtls * ctr_qt_network_ffi_QDtls_QDtls(QSslSocket::SslMode mode, QObject * parent) {
  return new QDtls(mode, parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDtls_dQDtls(QDtls * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_setPeer(QDtls * this_ptr, QHostAddress const * address, quint16 port, QString const * verificationName) {
  return this_ptr->setPeer(*address, port, *verificationName);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_setPeerVerificationName(QDtls * this_ptr, QString const * name) {
  return this_ptr->setPeerVerificationName(*name);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QDtls_peerAddress(QDtls const * this_ptr) {
  return new QHostAddress(this_ptr->peerAddress());
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDtls_peerPort(QDtls const * this_ptr) {
  return this_ptr->peerPort();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtls_peerVerificationName(QDtls const * this_ptr) {
  return new QString(this_ptr->peerVerificationName());
}


RITUAL_EXPORT QSslSocket::SslMode ctr_qt_network_ffi_QDtls_sslMode(QDtls const * this_ptr) {
  return this_ptr->sslMode();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDtls_setMtuHint(QDtls * this_ptr, quint16 mtuHint) {
  this_ptr->setMtuHint(mtuHint);
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QDtls_mtuHint(QDtls const * this_ptr) {
  return this_ptr->mtuHint();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_setCookieGeneratorParameters(QDtls * this_ptr, QDtlsClientVerifier::GeneratorParameters const * params) {
  return this_ptr->setCookieGeneratorParameters(*params);
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtls_cookieGeneratorParameters(QDtls const * this_ptr) {
  return new QDtlsClientVerifier::GeneratorParameters(this_ptr->cookieGeneratorParameters());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_setDtlsConfiguration(QDtls * this_ptr, QSslConfiguration const * configuration) {
  return this_ptr->setDtlsConfiguration(*configuration);
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QDtls_dtlsConfiguration(QDtls const * this_ptr) {
  return new QSslConfiguration(this_ptr->dtlsConfiguration());
}


RITUAL_EXPORT QDtls::HandshakeState ctr_qt_network_ffi_QDtls_handshakeState(QDtls const * this_ptr) {
  return this_ptr->handshakeState();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_doHandshake(QDtls * this_ptr, QUdpSocket * socket, QByteArray const * dgram) {
  return this_ptr->doHandshake(socket, *dgram);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_handleTimeout(QDtls * this_ptr, QUdpSocket * socket) {
  return this_ptr->handleTimeout(socket);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_resumeHandshake(QDtls * this_ptr, QUdpSocket * socket) {
  return this_ptr->resumeHandshake(socket);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_abortHandshake(QDtls * this_ptr, QUdpSocket * socket) {
  return this_ptr->abortHandshake(socket);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_shutdown(QDtls * this_ptr, QUdpSocket * socket) {
  return this_ptr->shutdown(socket);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_isConnectionEncrypted(QDtls const * this_ptr) {
  return this_ptr->isConnectionEncrypted();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QDtls_sessionCipher(QDtls const * this_ptr) {
  return new QSslCipher(this_ptr->sessionCipher());
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QDtls_sessionProtocol(QDtls const * this_ptr) {
  return this_ptr->sessionProtocol();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QDtls_writeDatagramEncrypted(QDtls * this_ptr, QUdpSocket * socket, QByteArray const * dgram) {
  return this_ptr->writeDatagramEncrypted(socket, *dgram);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QDtls_decryptDatagram(QDtls * this_ptr, QUdpSocket * socket, QByteArray const * dgram) {
  return new QByteArray(this_ptr->decryptDatagram(socket, *dgram));
}


RITUAL_EXPORT QDtlsError ctr_qt_network_ffi_QDtls_dtlsError(QDtls const * this_ptr) {
  return this_ptr->dtlsError();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QDtls_dtlsErrorString(QDtls const * this_ptr) {
  return new QString(this_ptr->dtlsErrorString());
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QDtls_peerVerificationErrors(QDtls const * this_ptr) {
  return new QVector< QSslError >(this_ptr->peerVerificationErrors());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDtls_ignoreVerificationErrors(QDtls * this_ptr, QVector< QSslError > const * errorsToIgnore) {
  this_ptr->ignoreVerificationErrors(*errorsToIgnore);
}


RITUAL_EXPORT quint8 * ctr_qt_network_ffi_QIPv6Address_operator__(QIPv6Address * this_ptr, int index) {
  return &this_ptr->operator[](index);
}


RITUAL_EXPORT quint8 ctr_qt_network_ffi_QIPv6Address_operator__1(QIPv6Address const * this_ptr, int index) {
  return this_ptr->operator[](index);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash2(QHostAddress const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress() {
  return new QHostAddress();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress1(quint32 ip4Addr) {
  return new QHostAddress(ip4Addr);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress2(quint8 * ip6Addr) {
  return new QHostAddress(ip6Addr);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress3(quint8 const * ip6Addr) {
  return new QHostAddress(ip6Addr);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress4(QIPv6Address const * ip6Addr) {
  return new QHostAddress(*ip6Addr);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress6(QString const * address) {
  return new QHostAddress(*address);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress7(QHostAddress const * copy) {
  return new QHostAddress(*copy);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_QHostAddress8(QHostAddress::SpecialAddress address) {
  return new QHostAddress(address);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_dQHostAddress(QHostAddress * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_operator_1(QHostAddress * this_ptr, QHostAddress const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_operator_2(QHostAddress * this_ptr, QString const * address) {
  return &this_ptr->operator=(*address);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QHostAddress_operator_3(QHostAddress * this_ptr, QHostAddress::SpecialAddress address) {
  return &this_ptr->operator=(address);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_swap(QHostAddress * this_ptr, QHostAddress * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setAddress(QHostAddress * this_ptr, quint32 ip4Addr) {
  this_ptr->setAddress(ip4Addr);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setAddress1(QHostAddress * this_ptr, quint8 * ip6Addr) {
  this_ptr->setAddress(ip6Addr);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setAddress2(QHostAddress * this_ptr, quint8 const * ip6Addr) {
  this_ptr->setAddress(ip6Addr);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setAddress3(QHostAddress * this_ptr, QIPv6Address const * ip6Addr) {
  this_ptr->setAddress(*ip6Addr);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_setAddress5(QHostAddress * this_ptr, QString const * address) {
  return this_ptr->setAddress(*address);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setAddress6(QHostAddress * this_ptr, QHostAddress::SpecialAddress address) {
  this_ptr->setAddress(address);
}


RITUAL_EXPORT QAbstractSocket::NetworkLayerProtocol ctr_qt_network_ffi_QHostAddress_protocol(QHostAddress const * this_ptr) {
  return this_ptr->protocol();
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QHostAddress_toIPv4Address(QHostAddress const * this_ptr) {
  return this_ptr->toIPv4Address();
}


RITUAL_EXPORT quint32 ctr_qt_network_ffi_QHostAddress_toIPv4Address1(QHostAddress const * this_ptr, bool * ok) {
  return this_ptr->toIPv4Address(ok);
}


RITUAL_EXPORT QIPv6Address * ctr_qt_network_ffi_QHostAddress_toIPv6Address(QHostAddress const * this_ptr) {
  return new QIPv6Address(this_ptr->toIPv6Address());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostAddress_toString(QHostAddress const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostAddress_scopeId(QHostAddress const * this_ptr) {
  return new QString(this_ptr->scopeId());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_setScopeId(QHostAddress * this_ptr, QString const * id) {
  this_ptr->setScopeId(*id);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isEqual(QHostAddress const * this_ptr, QHostAddress const * address, int mode) {
  return this_ptr->isEqual(*address, QFlags< QHostAddress::ConversionModeFlag >(mode));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_operator__(QHostAddress const * this_ptr, QHostAddress const * address) {
  return this_ptr->operator==(*address);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_operator__1(QHostAddress const * this_ptr, QHostAddress::SpecialAddress address) {
  return this_ptr->operator==(address);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isNull(QHostAddress const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostAddress_clear(QHostAddress * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isInSubnet(QHostAddress const * this_ptr, QHostAddress const * subnet, int netmask) {
  return this_ptr->isInSubnet(*subnet, netmask);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isInSubnet1(QHostAddress const * this_ptr, QPair< QHostAddress, int > const * subnet) {
  return this_ptr->isInSubnet(*subnet);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isLoopback(QHostAddress const * this_ptr) {
  return this_ptr->isLoopback();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isGlobal(QHostAddress const * this_ptr) {
  return this_ptr->isGlobal();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isLinkLocal(QHostAddress const * this_ptr) {
  return this_ptr->isLinkLocal();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isSiteLocal(QHostAddress const * this_ptr) {
  return this_ptr->isSiteLocal();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isUniqueLocalUnicast(QHostAddress const * this_ptr) {
  return this_ptr->isUniqueLocalUnicast();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isMulticast(QHostAddress const * this_ptr) {
  return this_ptr->isMulticast();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isBroadcast(QHostAddress const * this_ptr) {
  return this_ptr->isBroadcast();
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_QHostAddress_parseSubnet(QString const * subnet) {
  return new QPair< QHostAddress, int >(QHostAddress::parseSubnet(*subnet));
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap9(QHostAddress * value1, QHostAddress * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__8(QHostAddress::SpecialAddress address1, QHostAddress const * address2) {
  return operator==(address1, *address2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__10(QDebug const * arg1, QHostAddress const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__11(QDataStream * arg1, QHostAddress const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__12(QDataStream * arg1, QHostAddress * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QHostInfo * ctr_qt_network_ffi_QHostInfo_QHostInfo(int lookupId) {
  return new QHostInfo(lookupId);
}


RITUAL_EXPORT QHostInfo * ctr_qt_network_ffi_QHostInfo_QHostInfo1(QHostInfo const * d) {
  return new QHostInfo(*d);
}


RITUAL_EXPORT QHostInfo * ctr_qt_network_ffi_QHostInfo_operator_(QHostInfo * this_ptr, QHostInfo const * d) {
  return &this_ptr->operator=(*d);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_dQHostInfo(QHostInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_swap(QHostInfo * this_ptr, QHostInfo * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostInfo_hostName(QHostInfo const * this_ptr) {
  return new QString(this_ptr->hostName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_setHostName(QHostInfo * this_ptr, QString const * name) {
  this_ptr->setHostName(*name);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QHostInfo_addresses(QHostInfo const * this_ptr) {
  return new QList< QHostAddress >(this_ptr->addresses());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_setAddresses(QHostInfo * this_ptr, QList< QHostAddress > const * addresses) {
  this_ptr->setAddresses(*addresses);
}


RITUAL_EXPORT QHostInfo::HostInfoError ctr_qt_network_ffi_QHostInfo_error(QHostInfo const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_setError(QHostInfo * this_ptr, QHostInfo::HostInfoError error) {
  this_ptr->setError(error);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostInfo_errorString(QHostInfo const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_setErrorString(QHostInfo * this_ptr, QString const * errorString) {
  this_ptr->setErrorString(*errorString);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_setLookupId(QHostInfo * this_ptr, int id) {
  this_ptr->setLookupId(id);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHostInfo_lookupId(QHostInfo const * this_ptr) {
  return this_ptr->lookupId();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHostInfo_lookupHost(QString const * name, QObject * receiver, char const * member) {
  return QHostInfo::lookupHost(*name, receiver, member);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHostInfo_abortHostLookup(int lookupId) {
  QHostInfo::abortHostLookup(lookupId);
}


RITUAL_EXPORT QHostInfo * ctr_qt_network_ffi_QHostInfo_fromName(QString const * name) {
  return new QHostInfo(QHostInfo::fromName(*name));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostInfo_localHostName() {
  return new QString(QHostInfo::localHostName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHostInfo_localDomainName() {
  return new QString(QHostInfo::localDomainName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap10(QHostInfo * value1, QHostInfo * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy() {
  return new QHstsPolicy();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy1(QDateTime const * expiry, int flags, QString const * host, QUrl::ParsingMode mode) {
  return new QHstsPolicy(*expiry, QFlags< QHstsPolicy::PolicyFlag >(flags), *host, mode);
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy2(QHstsPolicy const * rhs) {
  return new QHstsPolicy(*rhs);
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QHstsPolicy_operator_(QHstsPolicy * this_ptr, QHstsPolicy const * rhs) {
  return &this_ptr->operator=(*rhs);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_dQHstsPolicy(QHstsPolicy * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_swap(QHstsPolicy * this_ptr, QHstsPolicy * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_setHost(QHstsPolicy * this_ptr, QString const * host, QUrl::ParsingMode mode) {
  this_ptr->setHost(*host, mode);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHstsPolicy_host(QHstsPolicy const * this_ptr, int options) {
  return new QString(this_ptr->host(QFlags< QUrl::ComponentFormattingOption >(options)));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_setExpiry(QHstsPolicy * this_ptr, QDateTime const * expiry) {
  this_ptr->setExpiry(*expiry);
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QHstsPolicy_expiry(QHstsPolicy const * this_ptr) {
  return new QDateTime(this_ptr->expiry());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_setIncludesSubDomains(QHstsPolicy * this_ptr, bool include) {
  this_ptr->setIncludesSubDomains(include);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHstsPolicy_includesSubDomains(QHstsPolicy const * this_ptr) {
  return this_ptr->includesSubDomains();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHstsPolicy_isExpired(QHstsPolicy const * this_ptr) {
  return this_ptr->isExpired();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap11(QHstsPolicy * value1, QHstsPolicy * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__13(QHstsPolicy const * lhs, QHstsPolicy const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QHttp2Configuration * ctr_qt_network_ffi_QHttp2Configuration_QHttp2Configuration() {
  return new QHttp2Configuration();
}


RITUAL_EXPORT QHttp2Configuration * ctr_qt_network_ffi_QHttp2Configuration_QHttp2Configuration1(QHttp2Configuration const * other) {
  return new QHttp2Configuration(*other);
}


RITUAL_EXPORT QHttp2Configuration * ctr_qt_network_ffi_QHttp2Configuration_operator_(QHttp2Configuration * this_ptr, QHttp2Configuration const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttp2Configuration_dQHttp2Configuration(QHttp2Configuration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttp2Configuration_setServerPushEnabled(QHttp2Configuration * this_ptr, bool enable) {
  this_ptr->setServerPushEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttp2Configuration_serverPushEnabled(QHttp2Configuration const * this_ptr) {
  return this_ptr->serverPushEnabled();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttp2Configuration_setHuffmanCompressionEnabled(QHttp2Configuration * this_ptr, bool enable) {
  this_ptr->setHuffmanCompressionEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttp2Configuration_huffmanCompressionEnabled(QHttp2Configuration const * this_ptr) {
  return this_ptr->huffmanCompressionEnabled();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttp2Configuration_setSessionReceiveWindowSize(QHttp2Configuration * this_ptr, unsigned int size) {
  return this_ptr->setSessionReceiveWindowSize(size);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_QHttp2Configuration_sessionReceiveWindowSize(QHttp2Configuration const * this_ptr) {
  return this_ptr->sessionReceiveWindowSize();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttp2Configuration_setStreamReceiveWindowSize(QHttp2Configuration * this_ptr, unsigned int size) {
  return this_ptr->setStreamReceiveWindowSize(size);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_QHttp2Configuration_streamReceiveWindowSize(QHttp2Configuration const * this_ptr) {
  return this_ptr->streamReceiveWindowSize();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttp2Configuration_setMaxFrameSize(QHttp2Configuration * this_ptr, unsigned int size) {
  return this_ptr->setMaxFrameSize(size);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_QHttp2Configuration_maxFrameSize(QHttp2Configuration const * this_ptr) {
  return this_ptr->maxFrameSize();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttp2Configuration_swap(QHttp2Configuration * this_ptr, QHttp2Configuration * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap12(QHttp2Configuration * value1, QHttp2Configuration * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__15(QHttp2Configuration const * lhs, QHttp2Configuration const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QHttpPart * ctr_qt_network_ffi_QHttpPart_QHttpPart() {
  return new QHttpPart();
}


RITUAL_EXPORT QHttpPart * ctr_qt_network_ffi_QHttpPart_QHttpPart1(QHttpPart const * other) {
  return new QHttpPart(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_dQHttpPart(QHttpPart * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHttpPart * ctr_qt_network_ffi_QHttpPart_operator_1(QHttpPart * this_ptr, QHttpPart const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_swap(QHttpPart * this_ptr, QHttpPart * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHttpPart_operator__(QHttpPart const * this_ptr, QHttpPart const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_setHeader(QHttpPart * this_ptr, QNetworkRequest::KnownHeaders header, QVariant const * value) {
  this_ptr->setHeader(header, *value);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_setRawHeader(QHttpPart * this_ptr, QByteArray const * headerName, QByteArray const * headerValue) {
  this_ptr->setRawHeader(*headerName, *headerValue);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_setBody(QHttpPart * this_ptr, QByteArray const * body) {
  this_ptr->setBody(*body);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpPart_setBodyDevice(QHttpPart * this_ptr, QIODevice * device) {
  this_ptr->setBodyDevice(device);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap13(QHttpPart * value1, QHttpPart * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QHttpMultiPart_metaObject(QHttpMultiPart const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QHttpMultiPart_qt_metacast(QHttpMultiPart * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHttpMultiPart_qt_metacall(QHttpMultiPart * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHttpMultiPart_tr(char const * s, char const * c, int n) {
  return new QString(QHttpMultiPart::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHttpMultiPart_trUtf8(char const * s, char const * c, int n) {
  return new QString(QHttpMultiPart::trUtf8(s, c, n));
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart(QObject * parent) {
  return new QHttpMultiPart(parent);
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart1(QHttpMultiPart::ContentType contentType, QObject * parent) {
  return new QHttpMultiPart(contentType, parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpMultiPart_dQHttpMultiPart(QHttpMultiPart * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpMultiPart_append(QHttpMultiPart * this_ptr, QHttpPart const * httpPart) {
  this_ptr->append(*httpPart);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpMultiPart_setContentType(QHttpMultiPart * this_ptr, QHttpMultiPart::ContentType contentType) {
  this_ptr->setContentType(contentType);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QHttpMultiPart_boundary(QHttpMultiPart const * this_ptr) {
  return new QByteArray(this_ptr->boundary());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHttpMultiPart_setBoundary(QHttpMultiPart * this_ptr, QByteArray const * boundary) {
  this_ptr->setBoundary(*boundary);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QLocalServer_metaObject(QLocalServer const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QLocalServer_qt_metacast(QLocalServer * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QLocalServer_qt_metacall(QLocalServer * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalServer_tr(char const * s, char const * c, int n) {
  return new QString(QLocalServer::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalServer_trUtf8(char const * s, char const * c, int n) {
  return new QString(QLocalServer::trUtf8(s, c, n));
}


RITUAL_EXPORT QLocalServer * ctr_qt_network_ffi_QLocalServer_QLocalServer(QObject * parent) {
  return new QLocalServer(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalServer_dQLocalServer(QLocalServer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalServer_close(QLocalServer * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalServer_errorString(QLocalServer const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_hasPendingConnections(QLocalServer const * this_ptr) {
  return this_ptr->hasPendingConnections();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_isListening(QLocalServer const * this_ptr) {
  return this_ptr->isListening();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_listen(QLocalServer * this_ptr, QString const * name) {
  return this_ptr->listen(*name);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_listen1(QLocalServer * this_ptr, qintptr socketDescriptor) {
  return this_ptr->listen(socketDescriptor);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QLocalServer_maxPendingConnections(QLocalServer const * this_ptr) {
  return this_ptr->maxPendingConnections();
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_QLocalServer_nextPendingConnection(QLocalServer * this_ptr) {
  return this_ptr->nextPendingConnection();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalServer_serverName(QLocalServer const * this_ptr) {
  return new QString(this_ptr->serverName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalServer_fullServerName(QLocalServer const * this_ptr) {
  return new QString(this_ptr->fullServerName());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_removeServer(QString const * name) {
  return QLocalServer::removeServer(*name);
}


RITUAL_EXPORT QAbstractSocket::SocketError ctr_qt_network_ffi_QLocalServer_serverError(QLocalServer const * this_ptr) {
  return this_ptr->serverError();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalServer_setMaxPendingConnections(QLocalServer * this_ptr, int numConnections) {
  this_ptr->setMaxPendingConnections(numConnections);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_waitForNewConnection(QLocalServer * this_ptr, int msec, bool * timedOut) {
  return this_ptr->waitForNewConnection(msec, timedOut);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalServer_setSocketOptions(QLocalServer * this_ptr, int options) {
  this_ptr->setSocketOptions(QFlags< QLocalServer::SocketOption >(options));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QLocalServer_socketOptions(QLocalServer const * this_ptr) {
  return int(this_ptr->socketOptions());
}


RITUAL_EXPORT qintptr ctr_qt_network_ffi_QLocalServer_socketDescriptor(QLocalServer const * this_ptr) {
  return this_ptr->socketDescriptor();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QLocalSocket_metaObject(QLocalSocket const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QLocalSocket_qt_metacast(QLocalSocket * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QLocalSocket_qt_metacall(QLocalSocket * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalSocket_tr(char const * s, char const * c, int n) {
  return new QString(QLocalSocket::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalSocket_trUtf8(char const * s, char const * c, int n) {
  return new QString(QLocalSocket::trUtf8(s, c, n));
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_QLocalSocket_QLocalSocket(QObject * parent) {
  return new QLocalSocket(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_dQLocalSocket(QLocalSocket * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_connectToServer(QLocalSocket * this_ptr, int openMode) {
  this_ptr->connectToServer(QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_connectToServer1(QLocalSocket * this_ptr, QString const * name, int openMode) {
  this_ptr->connectToServer(*name, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_disconnectFromServer(QLocalSocket * this_ptr) {
  this_ptr->disconnectFromServer();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_setServerName(QLocalSocket * this_ptr, QString const * name) {
  this_ptr->setServerName(*name);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalSocket_serverName(QLocalSocket const * this_ptr) {
  return new QString(this_ptr->serverName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QLocalSocket_fullServerName(QLocalSocket const * this_ptr) {
  return new QString(this_ptr->fullServerName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_abort(QLocalSocket * this_ptr) {
  this_ptr->abort();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_isSequential(QLocalSocket const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QLocalSocket_bytesAvailable(QLocalSocket const * this_ptr) {
  return this_ptr->bytesAvailable();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QLocalSocket_bytesToWrite(QLocalSocket const * this_ptr) {
  return this_ptr->bytesToWrite();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_canReadLine(QLocalSocket const * this_ptr) {
  return this_ptr->canReadLine();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_open(QLocalSocket * this_ptr, int openMode) {
  return this_ptr->open(QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_close(QLocalSocket * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT QLocalSocket::LocalSocketError ctr_qt_network_ffi_QLocalSocket_error(QLocalSocket const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_flush(QLocalSocket * this_ptr) {
  return this_ptr->flush();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_isValid(QLocalSocket const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QLocalSocket_readBufferSize(QLocalSocket const * this_ptr) {
  return this_ptr->readBufferSize();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_setReadBufferSize(QLocalSocket * this_ptr, qint64 size) {
  this_ptr->setReadBufferSize(size);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor(QLocalSocket * this_ptr, qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState, int openMode) {
  return this_ptr->setSocketDescriptor(socketDescriptor, socketState, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT qintptr ctr_qt_network_ffi_QLocalSocket_socketDescriptor(QLocalSocket const * this_ptr) {
  return this_ptr->socketDescriptor();
}


RITUAL_EXPORT QLocalSocket::LocalSocketState ctr_qt_network_ffi_QLocalSocket_state(QLocalSocket const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForBytesWritten(QLocalSocket * this_ptr, int msecs) {
  return this_ptr->waitForBytesWritten(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForConnected(QLocalSocket * this_ptr, int msecs) {
  return this_ptr->waitForConnected(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForDisconnected(QLocalSocket * this_ptr, int msecs) {
  return this_ptr->waitForDisconnected(msecs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForReadyRead(QLocalSocket * this_ptr, int msecs) {
  return this_ptr->waitForReadyRead(msecs);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__17(QDebug const * arg1, QLocalSocket::LocalSocketError arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__18(QDebug const * arg1, QLocalSocket::LocalSocketState arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslConfiguration_QSslConfiguration() {
  return new QSslConfiguration();
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslConfiguration_QSslConfiguration1(QSslConfiguration const * other) {
  return new QSslConfiguration(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_dQSslConfiguration(QSslConfiguration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslConfiguration_operator_1(QSslConfiguration * this_ptr, QSslConfiguration const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_swap(QSslConfiguration * this_ptr, QSslConfiguration * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_operator__(QSslConfiguration const * this_ptr, QSslConfiguration const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_isNull(QSslConfiguration const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QSslConfiguration_protocol(QSslConfiguration const * this_ptr) {
  return this_ptr->protocol();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setProtocol(QSslConfiguration * this_ptr, QSsl::SslProtocol protocol) {
  this_ptr->setProtocol(protocol);
}


RITUAL_EXPORT QSslSocket::PeerVerifyMode ctr_qt_network_ffi_QSslConfiguration_peerVerifyMode(QSslConfiguration const * this_ptr) {
  return this_ptr->peerVerifyMode();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setPeerVerifyMode(QSslConfiguration * this_ptr, QSslSocket::PeerVerifyMode mode) {
  this_ptr->setPeerVerifyMode(mode);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslConfiguration_peerVerifyDepth(QSslConfiguration const * this_ptr) {
  return this_ptr->peerVerifyDepth();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setPeerVerifyDepth(QSslConfiguration * this_ptr, int depth) {
  this_ptr->setPeerVerifyDepth(depth);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslConfiguration_localCertificateChain(QSslConfiguration const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->localCertificateChain());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setLocalCertificateChain(QSslConfiguration * this_ptr, QList< QSslCertificate > const * localChain) {
  this_ptr->setLocalCertificateChain(*localChain);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslConfiguration_localCertificate(QSslConfiguration const * this_ptr) {
  return new QSslCertificate(this_ptr->localCertificate());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setLocalCertificate(QSslConfiguration * this_ptr, QSslCertificate const * certificate) {
  this_ptr->setLocalCertificate(*certificate);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslConfiguration_peerCertificate(QSslConfiguration const * this_ptr) {
  return new QSslCertificate(this_ptr->peerCertificate());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslConfiguration_peerCertificateChain(QSslConfiguration const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->peerCertificateChain());
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslConfiguration_sessionCipher(QSslConfiguration const * this_ptr) {
  return new QSslCipher(this_ptr->sessionCipher());
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QSslConfiguration_sessionProtocol(QSslConfiguration const * this_ptr) {
  return this_ptr->sessionProtocol();
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslConfiguration_privateKey(QSslConfiguration const * this_ptr) {
  return new QSslKey(this_ptr->privateKey());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setPrivateKey(QSslConfiguration * this_ptr, QSslKey const * key) {
  this_ptr->setPrivateKey(*key);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QSslConfiguration_ciphers(QSslConfiguration const * this_ptr) {
  return new QList< QSslCipher >(this_ptr->ciphers());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setCiphers(QSslConfiguration * this_ptr, QList< QSslCipher > const * ciphers) {
  this_ptr->setCiphers(*ciphers);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QSslConfiguration_supportedCiphers() {
  return new QList< QSslCipher >(QSslConfiguration::supportedCiphers());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslConfiguration_caCertificates(QSslConfiguration const * this_ptr) {
  return new QList< QSslCertificate >(this_ptr->caCertificates());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setCaCertificates(QSslConfiguration * this_ptr, QList< QSslCertificate > const * certificates) {
  this_ptr->setCaCertificates(*certificates);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_addCaCertificates(QSslConfiguration * this_ptr, QString const * path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax) {
  return this_ptr->addCaCertificates(*path, format, syntax);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_addCaCertificate(QSslConfiguration * this_ptr, QSslCertificate const * certificate) {
  this_ptr->addCaCertificate(*certificate);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_addCaCertificates1(QSslConfiguration * this_ptr, QList< QSslCertificate > const * certificates) {
  this_ptr->addCaCertificates(*certificates);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslConfiguration_systemCaCertificates() {
  return new QList< QSslCertificate >(QSslConfiguration::systemCaCertificates());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setSslOption(QSslConfiguration * this_ptr, QSsl::SslOption option, bool on) {
  this_ptr->setSslOption(option, on);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_testSslOption(QSslConfiguration const * this_ptr, QSsl::SslOption option) {
  return this_ptr->testSslOption(option);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslConfiguration_sessionTicket(QSslConfiguration const * this_ptr) {
  return new QByteArray(this_ptr->sessionTicket());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setSessionTicket(QSslConfiguration * this_ptr, QByteArray const * sessionTicket) {
  this_ptr->setSessionTicket(*sessionTicket);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslConfiguration_sessionTicketLifeTimeHint(QSslConfiguration const * this_ptr) {
  return this_ptr->sessionTicketLifeTimeHint();
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslConfiguration_ephemeralServerKey(QSslConfiguration const * this_ptr) {
  return new QSslKey(this_ptr->ephemeralServerKey());
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QSslConfiguration_ellipticCurves(QSslConfiguration const * this_ptr) {
  return new QVector< QSslEllipticCurve >(this_ptr->ellipticCurves());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setEllipticCurves(QSslConfiguration * this_ptr, QVector< QSslEllipticCurve > const * curves) {
  this_ptr->setEllipticCurves(*curves);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QSslConfiguration_supportedEllipticCurves() {
  return new QVector< QSslEllipticCurve >(QSslConfiguration::supportedEllipticCurves());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslConfiguration_preSharedKeyIdentityHint(QSslConfiguration const * this_ptr) {
  return new QByteArray(this_ptr->preSharedKeyIdentityHint());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setPreSharedKeyIdentityHint(QSslConfiguration * this_ptr, QByteArray const * hint) {
  this_ptr->setPreSharedKeyIdentityHint(*hint);
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslConfiguration_diffieHellmanParameters(QSslConfiguration const * this_ptr) {
  return new QSslDiffieHellmanParameters(this_ptr->diffieHellmanParameters());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setDiffieHellmanParameters(QSslConfiguration * this_ptr, QSslDiffieHellmanParameters const * dhparams) {
  this_ptr->setDiffieHellmanParameters(*dhparams);
}


RITUAL_EXPORT QMap< QByteArray, QVariant > * ctr_qt_network_ffi_QSslConfiguration_backendConfiguration(QSslConfiguration const * this_ptr) {
  return new QMap< QByteArray, QVariant >(this_ptr->backendConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setBackendConfigurationOption(QSslConfiguration * this_ptr, QByteArray const * name, QVariant const * value) {
  this_ptr->setBackendConfigurationOption(*name, *value);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setBackendConfiguration(QSslConfiguration * this_ptr, QMap< QByteArray, QVariant > const * backendConfiguration) {
  this_ptr->setBackendConfiguration(*backendConfiguration);
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslConfiguration_defaultConfiguration() {
  return new QSslConfiguration(QSslConfiguration::defaultConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setDefaultConfiguration(QSslConfiguration const * configuration) {
  QSslConfiguration::setDefaultConfiguration(*configuration);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_dtlsCookieVerificationEnabled(QSslConfiguration const * this_ptr) {
  return this_ptr->dtlsCookieVerificationEnabled();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setDtlsCookieVerificationEnabled(QSslConfiguration * this_ptr, bool enable) {
  this_ptr->setDtlsCookieVerificationEnabled(enable);
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QSslConfiguration_defaultDtlsConfiguration() {
  return new QSslConfiguration(QSslConfiguration::defaultDtlsConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setDefaultDtlsConfiguration(QSslConfiguration const * configuration) {
  QSslConfiguration::setDefaultDtlsConfiguration(*configuration);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setOcspStaplingEnabled(QSslConfiguration * this_ptr, bool enable) {
  this_ptr->setOcspStaplingEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_ocspStaplingEnabled(QSslConfiguration const * this_ptr) {
  return this_ptr->ocspStaplingEnabled();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setAllowedNextProtocols(QSslConfiguration * this_ptr, QList< QByteArray > const * protocols) {
  this_ptr->setAllowedNextProtocols(*protocols);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QSslConfiguration_allowedNextProtocols(QSslConfiguration const * this_ptr) {
  return new QList< QByteArray >(this_ptr->allowedNextProtocols());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslConfiguration_nextNegotiatedProtocol(QSslConfiguration const * this_ptr) {
  return new QByteArray(this_ptr->nextNegotiatedProtocol());
}


RITUAL_EXPORT QSslConfiguration::NextProtocolNegotiationStatus ctr_qt_network_ffi_QSslConfiguration_nextProtocolNegotiationStatus(QSslConfiguration const * this_ptr) {
  return this_ptr->nextProtocolNegotiationStatus();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap14(QSslConfiguration * value1, QSslConfiguration * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QSslPreSharedKeyAuthenticator * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_QSslPreSharedKeyAuthenticator() {
  return new QSslPreSharedKeyAuthenticator();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_dQSslPreSharedKeyAuthenticator(QSslPreSharedKeyAuthenticator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslPreSharedKeyAuthenticator * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_QSslPreSharedKeyAuthenticator1(QSslPreSharedKeyAuthenticator const * authenticator) {
  return new QSslPreSharedKeyAuthenticator(*authenticator);
}


RITUAL_EXPORT QSslPreSharedKeyAuthenticator * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_operator_(QSslPreSharedKeyAuthenticator * this_ptr, QSslPreSharedKeyAuthenticator const * authenticator) {
  return &this_ptr->operator=(*authenticator);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_swap(QSslPreSharedKeyAuthenticator * this_ptr, QSslPreSharedKeyAuthenticator * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_identityHint(QSslPreSharedKeyAuthenticator const * this_ptr) {
  return new QByteArray(this_ptr->identityHint());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_setIdentity(QSslPreSharedKeyAuthenticator * this_ptr, QByteArray const * identity) {
  this_ptr->setIdentity(*identity);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_identity(QSslPreSharedKeyAuthenticator const * this_ptr) {
  return new QByteArray(this_ptr->identity());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_maximumIdentityLength(QSslPreSharedKeyAuthenticator const * this_ptr) {
  return this_ptr->maximumIdentityLength();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_setPreSharedKey(QSslPreSharedKeyAuthenticator * this_ptr, QByteArray const * preSharedKey) {
  this_ptr->setPreSharedKey(*preSharedKey);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_preSharedKey(QSslPreSharedKeyAuthenticator const * this_ptr) {
  return new QByteArray(this_ptr->preSharedKey());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_maximumPreSharedKeyLength(QSslPreSharedKeyAuthenticator const * this_ptr) {
  return this_ptr->maximumPreSharedKeyLength();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap15(QSslPreSharedKeyAuthenticator * value1, QSslPreSharedKeyAuthenticator * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkAccessManager_metaObject(QNetworkAccessManager const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkAccessManager_qt_metacast(QNetworkAccessManager * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkAccessManager_qt_metacall(QNetworkAccessManager * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkAccessManager_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkAccessManager::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkAccessManager_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkAccessManager::trUtf8(s, c, n));
}


RITUAL_EXPORT QNetworkAccessManager * ctr_qt_network_ffi_QNetworkAccessManager_QNetworkAccessManager(QObject * parent) {
  return new QNetworkAccessManager(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_dQNetworkAccessManager(QNetworkAccessManager * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringList * ctr_qt_network_ffi_QNetworkAccessManager_supportedSchemes(QNetworkAccessManager const * this_ptr) {
  return new QStringList(this_ptr->supportedSchemes());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_clearAccessCache(QNetworkAccessManager * this_ptr) {
  this_ptr->clearAccessCache();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_clearConnectionCache(QNetworkAccessManager * this_ptr) {
  this_ptr->clearConnectionCache();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkAccessManager_proxy(QNetworkAccessManager const * this_ptr) {
  return new QNetworkProxy(this_ptr->proxy());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setProxy(QNetworkAccessManager * this_ptr, QNetworkProxy const * proxy) {
  this_ptr->setProxy(*proxy);
}


RITUAL_EXPORT QNetworkProxyFactory * ctr_qt_network_ffi_QNetworkAccessManager_proxyFactory(QNetworkAccessManager const * this_ptr) {
  return this_ptr->proxyFactory();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setProxyFactory(QNetworkAccessManager * this_ptr, QNetworkProxyFactory * factory) {
  this_ptr->setProxyFactory(factory);
}


RITUAL_EXPORT QAbstractNetworkCache * ctr_qt_network_ffi_QNetworkAccessManager_cache(QNetworkAccessManager const * this_ptr) {
  return this_ptr->cache();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setCache(QNetworkAccessManager * this_ptr, QAbstractNetworkCache * cache) {
  this_ptr->setCache(cache);
}


RITUAL_EXPORT QNetworkCookieJar * ctr_qt_network_ffi_QNetworkAccessManager_cookieJar(QNetworkAccessManager const * this_ptr) {
  return this_ptr->cookieJar();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setCookieJar(QNetworkAccessManager * this_ptr, QNetworkCookieJar * cookieJar) {
  this_ptr->setCookieJar(cookieJar);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setStrictTransportSecurityEnabled(QNetworkAccessManager * this_ptr, bool enabled) {
  this_ptr->setStrictTransportSecurityEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAccessManager_isStrictTransportSecurityEnabled(QNetworkAccessManager const * this_ptr) {
  return this_ptr->isStrictTransportSecurityEnabled();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_enableStrictTransportSecurityStore(QNetworkAccessManager * this_ptr, bool enabled, QString const * storeDir) {
  this_ptr->enableStrictTransportSecurityStore(enabled, *storeDir);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(QNetworkAccessManager const * this_ptr) {
  return this_ptr->isStrictTransportSecurityStoreEnabled();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_addStrictTransportSecurityHosts(QNetworkAccessManager * this_ptr, QVector< QHstsPolicy > const * knownHosts) {
  this_ptr->addStrictTransportSecurityHosts(*knownHosts);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QNetworkAccessManager_strictTransportSecurityHosts(QNetworkAccessManager const * this_ptr) {
  return new QVector< QHstsPolicy >(this_ptr->strictTransportSecurityHosts());
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_head(QNetworkAccessManager * this_ptr, QNetworkRequest const * request) {
  return this_ptr->head(*request);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_get(QNetworkAccessManager * this_ptr, QNetworkRequest const * request) {
  return this_ptr->get(*request);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_post(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QIODevice * data) {
  return this_ptr->post(*request, data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_post1(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * data) {
  return this_ptr->post(*request, *data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_put(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QIODevice * data) {
  return this_ptr->put(*request, data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_put1(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * data) {
  return this_ptr->put(*request, *data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_deleteResource(QNetworkAccessManager * this_ptr, QNetworkRequest const * request) {
  return this_ptr->deleteResource(*request);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * verb, QIODevice * data) {
  return this_ptr->sendCustomRequest(*request, *verb, data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest1(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * verb, QByteArray const * data) {
  return this_ptr->sendCustomRequest(*request, *verb, *data);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_post2(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QHttpMultiPart * multiPart) {
  return this_ptr->post(*request, multiPart);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_put2(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QHttpMultiPart * multiPart) {
  return this_ptr->put(*request, multiPart);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest2(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * verb, QHttpMultiPart * multiPart) {
  return this_ptr->sendCustomRequest(*request, *verb, multiPart);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setConfiguration(QNetworkAccessManager * this_ptr, QNetworkConfiguration const * config) {
  this_ptr->setConfiguration(*config);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkAccessManager_configuration(QNetworkAccessManager const * this_ptr) {
  return new QNetworkConfiguration(this_ptr->configuration());
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkAccessManager_activeConfiguration(QNetworkAccessManager const * this_ptr) {
  return new QNetworkConfiguration(this_ptr->activeConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setNetworkAccessible(QNetworkAccessManager * this_ptr, QNetworkAccessManager::NetworkAccessibility accessible) {
  this_ptr->setNetworkAccessible(accessible);
}


RITUAL_EXPORT QNetworkAccessManager::NetworkAccessibility ctr_qt_network_ffi_QNetworkAccessManager_networkAccessible(QNetworkAccessManager const * this_ptr) {
  return this_ptr->networkAccessible();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted(QNetworkAccessManager * this_ptr, QString const * hostName, quint16 port, QSslConfiguration const * sslConfiguration) {
  this_ptr->connectToHostEncrypted(*hostName, port, *sslConfiguration);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted1(QNetworkAccessManager * this_ptr, QString const * hostName, quint16 port, QSslConfiguration const * sslConfiguration, QString const * peerName) {
  this_ptr->connectToHostEncrypted(*hostName, port, *sslConfiguration, *peerName);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHost(QNetworkAccessManager * this_ptr, QString const * hostName, quint16 port) {
  this_ptr->connectToHost(*hostName, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setRedirectPolicy(QNetworkAccessManager * this_ptr, QNetworkRequest::RedirectPolicy policy) {
  this_ptr->setRedirectPolicy(policy);
}


RITUAL_EXPORT QNetworkRequest::RedirectPolicy ctr_qt_network_ffi_QNetworkAccessManager_redirectPolicy(QNetworkAccessManager const * this_ptr) {
  return this_ptr->redirectPolicy();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAccessManager_autoDeleteReplies(QNetworkAccessManager const * this_ptr) {
  return this_ptr->autoDeleteReplies();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setAutoDeleteReplies(QNetworkAccessManager * this_ptr, bool autoDelete) {
  this_ptr->setAutoDeleteReplies(autoDelete);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkAccessManager_transferTimeout(QNetworkAccessManager const * this_ptr) {
  return this_ptr->transferTimeout();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setTransferTimeout(QNetworkAccessManager * this_ptr, int timeout) {
  this_ptr->setTransferTimeout(timeout);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkConfiguration_QNetworkConfiguration() {
  return new QNetworkConfiguration();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkConfiguration_QNetworkConfiguration1(QNetworkConfiguration const * other) {
  return new QNetworkConfiguration(*other);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkConfiguration_operator_1(QNetworkConfiguration * this_ptr, QNetworkConfiguration const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkConfiguration_dQNetworkConfiguration(QNetworkConfiguration * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkConfiguration_swap(QNetworkConfiguration * this_ptr, QNetworkConfiguration * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkConfiguration_operator__(QNetworkConfiguration const * this_ptr, QNetworkConfiguration const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkConfiguration_state(QNetworkConfiguration const * this_ptr) {
  return int(this_ptr->state());
}


RITUAL_EXPORT QNetworkConfiguration::Type ctr_qt_network_ffi_QNetworkConfiguration_type(QNetworkConfiguration const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QNetworkConfiguration::Purpose ctr_qt_network_ffi_QNetworkConfiguration_purpose(QNetworkConfiguration const * this_ptr) {
  return this_ptr->purpose();
}


RITUAL_EXPORT QNetworkConfiguration::BearerType ctr_qt_network_ffi_QNetworkConfiguration_bearerType(QNetworkConfiguration const * this_ptr) {
  return this_ptr->bearerType();
}


RITUAL_EXPORT QNetworkConfiguration::BearerType ctr_qt_network_ffi_QNetworkConfiguration_bearerTypeFamily(QNetworkConfiguration const * this_ptr) {
  return this_ptr->bearerTypeFamily();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkConfiguration_bearerTypeName(QNetworkConfiguration const * this_ptr) {
  return new QString(this_ptr->bearerTypeName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkConfiguration_identifier(QNetworkConfiguration const * this_ptr) {
  return new QString(this_ptr->identifier());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkConfiguration_isRoamingAvailable(QNetworkConfiguration const * this_ptr) {
  return this_ptr->isRoamingAvailable();
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QNetworkConfiguration_children(QNetworkConfiguration const * this_ptr) {
  return new QList< QNetworkConfiguration >(this_ptr->children());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkConfiguration_name(QNetworkConfiguration const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkConfiguration_isValid(QNetworkConfiguration const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkConfiguration_connectTimeout(QNetworkConfiguration const * this_ptr) {
  return this_ptr->connectTimeout();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkConfiguration_setConnectTimeout(QNetworkConfiguration * this_ptr, int timeout) {
  return this_ptr->setConnectTimeout(timeout);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap16(QNetworkConfiguration * value1, QNetworkConfiguration * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkConfigurationManager_metaObject(QNetworkConfigurationManager const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkConfigurationManager_qt_metacast(QNetworkConfigurationManager * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkConfigurationManager_qt_metacall(QNetworkConfigurationManager * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkConfigurationManager_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkConfigurationManager::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkConfigurationManager_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkConfigurationManager::trUtf8(s, c, n));
}


RITUAL_EXPORT QNetworkConfigurationManager * ctr_qt_network_ffi_QNetworkConfigurationManager_QNetworkConfigurationManager(QObject * parent) {
  return new QNetworkConfigurationManager(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkConfigurationManager_dQNetworkConfigurationManager(QNetworkConfigurationManager * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkConfigurationManager_capabilities(QNetworkConfigurationManager const * this_ptr) {
  return int(this_ptr->capabilities());
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkConfigurationManager_defaultConfiguration(QNetworkConfigurationManager const * this_ptr) {
  return new QNetworkConfiguration(this_ptr->defaultConfiguration());
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QNetworkConfigurationManager_allConfigurations(QNetworkConfigurationManager const * this_ptr, int flags) {
  return new QList< QNetworkConfiguration >(this_ptr->allConfigurations(QFlags< QNetworkConfiguration::StateFlag >(flags)));
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkConfigurationManager_configurationFromIdentifier(QNetworkConfigurationManager const * this_ptr, QString const * identifier) {
  return new QNetworkConfiguration(this_ptr->configurationFromIdentifier(*identifier));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkConfigurationManager_isOnline(QNetworkConfigurationManager const * this_ptr) {
  return this_ptr->isOnline();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkConfigurationManager_updateConfigurations(QNetworkConfigurationManager * this_ptr) {
  this_ptr->updateConfigurations();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie(QByteArray const * name, QByteArray const * value) {
  return new QNetworkCookie(*name, *value);
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie1(QNetworkCookie const * other) {
  return new QNetworkCookie(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_dQNetworkCookie(QNetworkCookie * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QNetworkCookie_operator_1(QNetworkCookie * this_ptr, QNetworkCookie const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_swap(QNetworkCookie * this_ptr, QNetworkCookie * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookie_operator__(QNetworkCookie const * this_ptr, QNetworkCookie const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookie_isSecure(QNetworkCookie const * this_ptr) {
  return this_ptr->isSecure();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setSecure(QNetworkCookie * this_ptr, bool enable) {
  this_ptr->setSecure(enable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookie_isHttpOnly(QNetworkCookie const * this_ptr) {
  return this_ptr->isHttpOnly();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setHttpOnly(QNetworkCookie * this_ptr, bool enable) {
  this_ptr->setHttpOnly(enable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookie_isSessionCookie(QNetworkCookie const * this_ptr) {
  return this_ptr->isSessionCookie();
}


RITUAL_EXPORT QDateTime * ctr_qt_network_ffi_QNetworkCookie_expirationDate(QNetworkCookie const * this_ptr) {
  return new QDateTime(this_ptr->expirationDate());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setExpirationDate(QNetworkCookie * this_ptr, QDateTime const * date) {
  this_ptr->setExpirationDate(*date);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkCookie_domain(QNetworkCookie const * this_ptr) {
  return new QString(this_ptr->domain());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setDomain(QNetworkCookie * this_ptr, QString const * domain) {
  this_ptr->setDomain(*domain);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkCookie_path(QNetworkCookie const * this_ptr) {
  return new QString(this_ptr->path());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setPath(QNetworkCookie * this_ptr, QString const * path) {
  this_ptr->setPath(*path);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkCookie_name(QNetworkCookie const * this_ptr) {
  return new QByteArray(this_ptr->name());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setName(QNetworkCookie * this_ptr, QByteArray const * cookieName) {
  this_ptr->setName(*cookieName);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkCookie_value(QNetworkCookie const * this_ptr) {
  return new QByteArray(this_ptr->value());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_setValue(QNetworkCookie * this_ptr, QByteArray const * value) {
  this_ptr->setValue(*value);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkCookie_toRawForm(QNetworkCookie const * this_ptr, QNetworkCookie::RawForm form) {
  return new QByteArray(this_ptr->toRawForm(form));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookie_hasSameIdentifier(QNetworkCookie const * this_ptr, QNetworkCookie const * other) {
  return this_ptr->hasSameIdentifier(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookie_normalize(QNetworkCookie * this_ptr, QUrl const * url) {
  this_ptr->normalize(*url);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QNetworkCookie_parseCookies(QByteArray const * cookieString) {
  return new QList< QNetworkCookie >(QNetworkCookie::parseCookies(*cookieString));
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap17(QNetworkCookie * value1, QNetworkCookie * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__20(QDebug const * arg1, QNetworkCookie const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkCookieJar_metaObject(QNetworkCookieJar const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkCookieJar_qt_metacast(QNetworkCookieJar * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkCookieJar_qt_metacall(QNetworkCookieJar * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkCookieJar_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkCookieJar::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkCookieJar_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkCookieJar::trUtf8(s, c, n));
}


RITUAL_EXPORT QNetworkCookieJar * ctr_qt_network_ffi_QNetworkCookieJar_QNetworkCookieJar(QObject * parent) {
  return new QNetworkCookieJar(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkCookieJar_dQNetworkCookieJar(QNetworkCookieJar * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QNetworkCookieJar_cookiesForUrl(QNetworkCookieJar const * this_ptr, QUrl const * url) {
  return new QList< QNetworkCookie >(this_ptr->cookiesForUrl(*url));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookieJar_setCookiesFromUrl(QNetworkCookieJar * this_ptr, QList< QNetworkCookie > const * cookieList, QUrl const * url) {
  return this_ptr->setCookiesFromUrl(*cookieList, *url);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookieJar_insertCookie(QNetworkCookieJar * this_ptr, QNetworkCookie const * cookie) {
  return this_ptr->insertCookie(*cookie);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookieJar_updateCookie(QNetworkCookieJar * this_ptr, QNetworkCookie const * cookie) {
  return this_ptr->updateCookie(*cookie);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkCookieJar_deleteCookie(QNetworkCookieJar * this_ptr, QNetworkCookie const * cookie) {
  return this_ptr->deleteCookie(*cookie);
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram() {
  return new QNetworkDatagram();
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram1(QByteArray const * data, QHostAddress const * destinationAddress, quint16 port) {
  return new QNetworkDatagram(*data, *destinationAddress, port);
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram2(QNetworkDatagram const * other) {
  return new QNetworkDatagram(*other);
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_operator_(QNetworkDatagram * this_ptr, QNetworkDatagram const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_dQNetworkDatagram(QNetworkDatagram * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_swap(QNetworkDatagram * this_ptr, QNetworkDatagram * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_clear(QNetworkDatagram * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkDatagram_isValid(QNetworkDatagram const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkDatagram_isNull(QNetworkDatagram const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_QNetworkDatagram_interfaceIndex(QNetworkDatagram const * this_ptr) {
  return this_ptr->interfaceIndex();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setInterfaceIndex(QNetworkDatagram * this_ptr, unsigned int index) {
  this_ptr->setInterfaceIndex(index);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QNetworkDatagram_senderAddress(QNetworkDatagram const * this_ptr) {
  return new QHostAddress(this_ptr->senderAddress());
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QNetworkDatagram_destinationAddress(QNetworkDatagram const * this_ptr) {
  return new QHostAddress(this_ptr->destinationAddress());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkDatagram_senderPort(QNetworkDatagram const * this_ptr) {
  return this_ptr->senderPort();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkDatagram_destinationPort(QNetworkDatagram const * this_ptr) {
  return this_ptr->destinationPort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setSender(QNetworkDatagram * this_ptr, QHostAddress const * address, quint16 port) {
  this_ptr->setSender(*address, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setDestination(QNetworkDatagram * this_ptr, QHostAddress const * address, quint16 port) {
  this_ptr->setDestination(*address, port);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkDatagram_hopLimit(QNetworkDatagram const * this_ptr) {
  return this_ptr->hopLimit();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setHopLimit(QNetworkDatagram * this_ptr, int count) {
  this_ptr->setHopLimit(count);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkDatagram_data(QNetworkDatagram const * this_ptr) {
  return new QByteArray(this_ptr->data());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setData(QNetworkDatagram * this_ptr, QByteArray const * data) {
  this_ptr->setData(*data);
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_makeReply(QNetworkDatagram const * this_ptr, QByteArray const * payload) {
  return new QNetworkDatagram(this_ptr->makeReply(*payload));
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_makeReply1(QNetworkDatagram * this_ptr, QByteArray const * payload) {
  return new QNetworkDatagram(this_ptr->makeReply(*payload));
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap18(QNetworkDatagram * value1, QNetworkDatagram * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkDiskCache_metaObject(QNetworkDiskCache const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkDiskCache_qt_metacast(QNetworkDiskCache * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkDiskCache_qt_metacall(QNetworkDiskCache * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkDiskCache_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkDiskCache::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkDiskCache_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkDiskCache::trUtf8(s, c, n));
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_QNetworkDiskCache_QNetworkDiskCache(QObject * parent) {
  return new QNetworkDiskCache(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_dQNetworkDiskCache(QNetworkDiskCache * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkDiskCache_cacheDirectory(QNetworkDiskCache const * this_ptr) {
  return new QString(this_ptr->cacheDirectory());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_setCacheDirectory(QNetworkDiskCache * this_ptr, QString const * cacheDir) {
  this_ptr->setCacheDirectory(*cacheDir);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QNetworkDiskCache_maximumCacheSize(QNetworkDiskCache const * this_ptr) {
  return this_ptr->maximumCacheSize();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_setMaximumCacheSize(QNetworkDiskCache * this_ptr, qint64 size) {
  this_ptr->setMaximumCacheSize(size);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QNetworkDiskCache_cacheSize(QNetworkDiskCache const * this_ptr) {
  return this_ptr->cacheSize();
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QNetworkDiskCache_metaData(QNetworkDiskCache * this_ptr, QUrl const * url) {
  return new QNetworkCacheMetaData(this_ptr->metaData(*url));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_updateMetaData(QNetworkDiskCache * this_ptr, QNetworkCacheMetaData const * metaData) {
  this_ptr->updateMetaData(*metaData);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_QNetworkDiskCache_data(QNetworkDiskCache * this_ptr, QUrl const * url) {
  return this_ptr->data(*url);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkDiskCache_remove(QNetworkDiskCache * this_ptr, QUrl const * url) {
  return this_ptr->remove(*url);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_QNetworkDiskCache_prepare(QNetworkDiskCache * this_ptr, QNetworkCacheMetaData const * metaData) {
  return this_ptr->prepare(*metaData);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_insert(QNetworkDiskCache * this_ptr, QIODevice * device) {
  this_ptr->insert(device);
}


RITUAL_EXPORT QNetworkCacheMetaData * ctr_qt_network_ffi_QNetworkDiskCache_fileMetaData(QNetworkDiskCache const * this_ptr, QString const * fileName) {
  return new QNetworkCacheMetaData(this_ptr->fileMetaData(*fileName));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDiskCache_clear(QNetworkDiskCache * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QNetworkAddressEntry_QNetworkAddressEntry() {
  return new QNetworkAddressEntry();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QNetworkAddressEntry_QNetworkAddressEntry1(QNetworkAddressEntry const * other) {
  return new QNetworkAddressEntry(*other);
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QNetworkAddressEntry_operator_1(QNetworkAddressEntry * this_ptr, QNetworkAddressEntry const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_dQNetworkAddressEntry(QNetworkAddressEntry * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_swap(QNetworkAddressEntry * this_ptr, QNetworkAddressEntry * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAddressEntry_operator__(QNetworkAddressEntry const * this_ptr, QNetworkAddressEntry const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QNetworkAddressEntry::DnsEligibilityStatus ctr_qt_network_ffi_QNetworkAddressEntry_dnsEligibility(QNetworkAddressEntry const * this_ptr) {
  return this_ptr->dnsEligibility();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setDnsEligibility(QNetworkAddressEntry * this_ptr, QNetworkAddressEntry::DnsEligibilityStatus status) {
  this_ptr->setDnsEligibility(status);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QNetworkAddressEntry_ip(QNetworkAddressEntry const * this_ptr) {
  return new QHostAddress(this_ptr->ip());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setIp(QNetworkAddressEntry * this_ptr, QHostAddress const * newIp) {
  this_ptr->setIp(*newIp);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QNetworkAddressEntry_netmask(QNetworkAddressEntry const * this_ptr) {
  return new QHostAddress(this_ptr->netmask());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setNetmask(QNetworkAddressEntry * this_ptr, QHostAddress const * newNetmask) {
  this_ptr->setNetmask(*newNetmask);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkAddressEntry_prefixLength(QNetworkAddressEntry const * this_ptr) {
  return this_ptr->prefixLength();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setPrefixLength(QNetworkAddressEntry * this_ptr, int length) {
  this_ptr->setPrefixLength(length);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QNetworkAddressEntry_broadcast(QNetworkAddressEntry const * this_ptr) {
  return new QHostAddress(this_ptr->broadcast());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setBroadcast(QNetworkAddressEntry * this_ptr, QHostAddress const * newBroadcast) {
  this_ptr->setBroadcast(*newBroadcast);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAddressEntry_isLifetimeKnown(QNetworkAddressEntry const * this_ptr) {
  return this_ptr->isLifetimeKnown();
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_network_ffi_QNetworkAddressEntry_preferredLifetime(QNetworkAddressEntry const * this_ptr) {
  return new QDeadlineTimer(this_ptr->preferredLifetime());
}


RITUAL_EXPORT QDeadlineTimer * ctr_qt_network_ffi_QNetworkAddressEntry_validityLifetime(QNetworkAddressEntry const * this_ptr) {
  return new QDeadlineTimer(this_ptr->validityLifetime());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_setAddressLifetime(QNetworkAddressEntry * this_ptr, QDeadlineTimer const * preferred, QDeadlineTimer const * validity) {
  this_ptr->setAddressLifetime(*preferred, *validity);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAddressEntry_clearAddressLifetime(QNetworkAddressEntry * this_ptr) {
  this_ptr->clearAddressLifetime();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAddressEntry_isPermanent(QNetworkAddressEntry const * this_ptr) {
  return this_ptr->isPermanent();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkAddressEntry_isTemporary(QNetworkAddressEntry const * this_ptr) {
  return this_ptr->isTemporary();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap19(QNetworkAddressEntry * value1, QNetworkAddressEntry * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkInterface_QNetworkInterface() {
  return new QNetworkInterface();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkInterface_QNetworkInterface1(QNetworkInterface const * other) {
  return new QNetworkInterface(*other);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkInterface_operator_1(QNetworkInterface * this_ptr, QNetworkInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkInterface_dQNetworkInterface(QNetworkInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkInterface_swap(QNetworkInterface * this_ptr, QNetworkInterface * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkInterface_isValid(QNetworkInterface const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkInterface_index(QNetworkInterface const * this_ptr) {
  return this_ptr->index();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkInterface_maximumTransmissionUnit(QNetworkInterface const * this_ptr) {
  return this_ptr->maximumTransmissionUnit();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkInterface_name(QNetworkInterface const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkInterface_humanReadableName(QNetworkInterface const * this_ptr) {
  return new QString(this_ptr->humanReadableName());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkInterface_flags(QNetworkInterface const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QNetworkInterface::InterfaceType ctr_qt_network_ffi_QNetworkInterface_type(QNetworkInterface const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkInterface_hardwareAddress(QNetworkInterface const * this_ptr) {
  return new QString(this_ptr->hardwareAddress());
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QNetworkInterface_addressEntries(QNetworkInterface const * this_ptr) {
  return new QList< QNetworkAddressEntry >(this_ptr->addressEntries());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkInterface_interfaceIndexFromName(QString const * name) {
  return QNetworkInterface::interfaceIndexFromName(*name);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkInterface_interfaceFromName(QString const * name) {
  return new QNetworkInterface(QNetworkInterface::interfaceFromName(*name));
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkInterface_interfaceFromIndex(int index) {
  return new QNetworkInterface(QNetworkInterface::interfaceFromIndex(index));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkInterface_interfaceNameFromIndex(int index) {
  return new QString(QNetworkInterface::interfaceNameFromIndex(index));
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QNetworkInterface_allInterfaces() {
  return new QList< QNetworkInterface >(QNetworkInterface::allInterfaces());
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QNetworkInterface_allAddresses() {
  return new QList< QHostAddress >(QNetworkInterface::allAddresses());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap20(QNetworkInterface * value1, QNetworkInterface * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__21(QDebug const * debug, QNetworkInterface const * networkInterface) {
  return new QDebug(operator<<(*debug, *networkInterface));
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery() {
  return new QNetworkProxyQuery();
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery1(QUrl const * requestUrl, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(*requestUrl, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery2(QString const * hostname, int port, QString const * protocolTag, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(*hostname, port, *protocolTag, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery3(quint16 bindPort, QString const * protocolTag, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(bindPort, *protocolTag, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery4(QNetworkConfiguration const * networkConfiguration, QUrl const * requestUrl, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(*networkConfiguration, *requestUrl, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery5(QNetworkConfiguration const * networkConfiguration, QString const * hostname, int port, QString const * protocolTag, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(*networkConfiguration, *hostname, port, *protocolTag, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery6(QNetworkConfiguration const * networkConfiguration, quint16 bindPort, QString const * protocolTag, QNetworkProxyQuery::QueryType queryType) {
  return new QNetworkProxyQuery(*networkConfiguration, bindPort, *protocolTag, queryType);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery7(QNetworkProxyQuery const * other) {
  return new QNetworkProxyQuery(*other);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_operator_1(QNetworkProxyQuery * this_ptr, QNetworkProxyQuery const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_dQNetworkProxyQuery(QNetworkProxyQuery * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_swap(QNetworkProxyQuery * this_ptr, QNetworkProxyQuery * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxyQuery_operator__(QNetworkProxyQuery const * this_ptr, QNetworkProxyQuery const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QNetworkProxyQuery::QueryType ctr_qt_network_ffi_QNetworkProxyQuery_queryType(QNetworkProxyQuery const * this_ptr) {
  return this_ptr->queryType();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setQueryType(QNetworkProxyQuery * this_ptr, QNetworkProxyQuery::QueryType type) {
  this_ptr->setQueryType(type);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkProxyQuery_peerPort(QNetworkProxyQuery const * this_ptr) {
  return this_ptr->peerPort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setPeerPort(QNetworkProxyQuery * this_ptr, int port) {
  this_ptr->setPeerPort(port);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkProxyQuery_peerHostName(QNetworkProxyQuery const * this_ptr) {
  return new QString(this_ptr->peerHostName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setPeerHostName(QNetworkProxyQuery * this_ptr, QString const * hostname) {
  this_ptr->setPeerHostName(*hostname);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkProxyQuery_localPort(QNetworkProxyQuery const * this_ptr) {
  return this_ptr->localPort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setLocalPort(QNetworkProxyQuery * this_ptr, int port) {
  this_ptr->setLocalPort(port);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkProxyQuery_protocolTag(QNetworkProxyQuery const * this_ptr) {
  return new QString(this_ptr->protocolTag());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setProtocolTag(QNetworkProxyQuery * this_ptr, QString const * protocolTag) {
  this_ptr->setProtocolTag(*protocolTag);
}


RITUAL_EXPORT QUrl * ctr_qt_network_ffi_QNetworkProxyQuery_url(QNetworkProxyQuery const * this_ptr) {
  return new QUrl(this_ptr->url());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setUrl(QNetworkProxyQuery * this_ptr, QUrl const * url) {
  this_ptr->setUrl(*url);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkProxyQuery_networkConfiguration(QNetworkProxyQuery const * this_ptr) {
  return new QNetworkConfiguration(this_ptr->networkConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyQuery_setNetworkConfiguration(QNetworkProxyQuery * this_ptr, QNetworkConfiguration const * networkConfiguration) {
  this_ptr->setNetworkConfiguration(*networkConfiguration);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap21(QNetworkProxyQuery * value1, QNetworkProxyQuery * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy() {
  return new QNetworkProxy();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy1(QNetworkProxy::ProxyType type, QString const * hostName, quint16 port, QString const * user, QString const * password) {
  return new QNetworkProxy(type, *hostName, port, *user, *password);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy2(QNetworkProxy const * other) {
  return new QNetworkProxy(*other);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_operator_1(QNetworkProxy * this_ptr, QNetworkProxy const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_dQNetworkProxy(QNetworkProxy * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_swap(QNetworkProxy * this_ptr, QNetworkProxy * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxy_operator__(QNetworkProxy const * this_ptr, QNetworkProxy const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setType(QNetworkProxy * this_ptr, QNetworkProxy::ProxyType type) {
  this_ptr->setType(type);
}


RITUAL_EXPORT QNetworkProxy::ProxyType ctr_qt_network_ffi_QNetworkProxy_type(QNetworkProxy const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setCapabilities(QNetworkProxy * this_ptr, int capab) {
  this_ptr->setCapabilities(QFlags< QNetworkProxy::Capability >(capab));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkProxy_capabilities(QNetworkProxy const * this_ptr) {
  return int(this_ptr->capabilities());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxy_isCachingProxy(QNetworkProxy const * this_ptr) {
  return this_ptr->isCachingProxy();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxy_isTransparentProxy(QNetworkProxy const * this_ptr) {
  return this_ptr->isTransparentProxy();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setUser(QNetworkProxy * this_ptr, QString const * userName) {
  this_ptr->setUser(*userName);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkProxy_user(QNetworkProxy const * this_ptr) {
  return new QString(this_ptr->user());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setPassword(QNetworkProxy * this_ptr, QString const * password) {
  this_ptr->setPassword(*password);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkProxy_password(QNetworkProxy const * this_ptr) {
  return new QString(this_ptr->password());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setHostName(QNetworkProxy * this_ptr, QString const * hostName) {
  this_ptr->setHostName(*hostName);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkProxy_hostName(QNetworkProxy const * this_ptr) {
  return new QString(this_ptr->hostName());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setPort(QNetworkProxy * this_ptr, quint16 port) {
  this_ptr->setPort(port);
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QNetworkProxy_port(QNetworkProxy const * this_ptr) {
  return this_ptr->port();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setApplicationProxy(QNetworkProxy const * proxy) {
  QNetworkProxy::setApplicationProxy(*proxy);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_applicationProxy() {
  return new QNetworkProxy(QNetworkProxy::applicationProxy());
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkProxy_header(QNetworkProxy const * this_ptr, QNetworkRequest::KnownHeaders header) {
  return new QVariant(this_ptr->header(header));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setHeader(QNetworkProxy * this_ptr, QNetworkRequest::KnownHeaders header, QVariant const * value) {
  this_ptr->setHeader(header, *value);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxy_hasRawHeader(QNetworkProxy const * this_ptr, QByteArray const * headerName) {
  return this_ptr->hasRawHeader(*headerName);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QNetworkProxy_rawHeaderList(QNetworkProxy const * this_ptr) {
  return new QList< QByteArray >(this_ptr->rawHeaderList());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkProxy_rawHeader(QNetworkProxy const * this_ptr, QByteArray const * headerName) {
  return new QByteArray(this_ptr->rawHeader(*headerName));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxy_setRawHeader(QNetworkProxy * this_ptr, QByteArray const * headerName, QByteArray const * value) {
  this_ptr->setRawHeader(*headerName, *value);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap22(QNetworkProxy * value1, QNetworkProxy * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyFactory_dQNetworkProxyFactory(QNetworkProxyFactory * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QNetworkProxyFactory_queryProxy(QNetworkProxyFactory * this_ptr, QNetworkProxyQuery const * query) {
  return new QList< QNetworkProxy >(this_ptr->queryProxy(*query));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkProxyFactory_usesSystemConfiguration() {
  return QNetworkProxyFactory::usesSystemConfiguration();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyFactory_setUseSystemConfiguration(bool enable) {
  QNetworkProxyFactory::setUseSystemConfiguration(enable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkProxyFactory_setApplicationProxyFactory(QNetworkProxyFactory * factory) {
  QNetworkProxyFactory::setApplicationProxyFactory(factory);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QNetworkProxyFactory_proxyForQuery(QNetworkProxyQuery const * query) {
  return new QList< QNetworkProxy >(QNetworkProxyFactory::proxyForQuery(*query));
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QNetworkProxyFactory_systemProxyForQuery(QNetworkProxyQuery const * query) {
  return new QList< QNetworkProxy >(QNetworkProxyFactory::systemProxyForQuery(*query));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__22(QDebug const * debug, QNetworkProxy const * proxy) {
  return new QDebug(operator<<(*debug, *proxy));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__23(QDebug const * debug, QNetworkProxyQuery const * proxyQuery) {
  return new QDebug(operator<<(*debug, *proxyQuery));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkReply_metaObject(QNetworkReply const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkReply_qt_metacast(QNetworkReply * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkReply_qt_metacall(QNetworkReply * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkReply_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkReply::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkReply_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkReply::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_dQNetworkReply(QNetworkReply * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_close(QNetworkReply * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkReply_isSequential(QNetworkReply const * this_ptr) {
  return this_ptr->isSequential();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QNetworkReply_readBufferSize(QNetworkReply const * this_ptr) {
  return this_ptr->readBufferSize();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_setReadBufferSize(QNetworkReply * this_ptr, qint64 size) {
  this_ptr->setReadBufferSize(size);
}


RITUAL_EXPORT QNetworkAccessManager * ctr_qt_network_ffi_QNetworkReply_manager(QNetworkReply const * this_ptr) {
  return this_ptr->manager();
}


RITUAL_EXPORT QNetworkAccessManager::Operation ctr_qt_network_ffi_QNetworkReply_operation(QNetworkReply const * this_ptr) {
  return this_ptr->operation();
}


RITUAL_EXPORT QNetworkRequest * ctr_qt_network_ffi_QNetworkReply_request(QNetworkReply const * this_ptr) {
  return new QNetworkRequest(this_ptr->request());
}


RITUAL_EXPORT QNetworkReply::NetworkError ctr_qt_network_ffi_QNetworkReply_error(QNetworkReply const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkReply_isFinished(QNetworkReply const * this_ptr) {
  return this_ptr->isFinished();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkReply_isRunning(QNetworkReply const * this_ptr) {
  return this_ptr->isRunning();
}


RITUAL_EXPORT QUrl * ctr_qt_network_ffi_QNetworkReply_url(QNetworkReply const * this_ptr) {
  return new QUrl(this_ptr->url());
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkReply_header(QNetworkReply const * this_ptr, QNetworkRequest::KnownHeaders header) {
  return new QVariant(this_ptr->header(header));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkReply_hasRawHeader(QNetworkReply const * this_ptr, QByteArray const * headerName) {
  return this_ptr->hasRawHeader(*headerName);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QNetworkReply_rawHeaderList(QNetworkReply const * this_ptr) {
  return new QList< QByteArray >(this_ptr->rawHeaderList());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkReply_rawHeader(QNetworkReply const * this_ptr, QByteArray const * headerName) {
  return new QByteArray(this_ptr->rawHeader(*headerName));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > const * ctr_qt_network_ffi_QNetworkReply_rawHeaderPairs(QNetworkReply const * this_ptr) {
  return &this_ptr->rawHeaderPairs();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkReply_attribute(QNetworkReply const * this_ptr, QNetworkRequest::Attribute code) {
  return new QVariant(this_ptr->attribute(code));
}


RITUAL_EXPORT QSslConfiguration * ctr_qt_network_ffi_QNetworkReply_sslConfiguration(QNetworkReply const * this_ptr) {
  return new QSslConfiguration(this_ptr->sslConfiguration());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_setSslConfiguration(QNetworkReply * this_ptr, QSslConfiguration const * configuration) {
  this_ptr->setSslConfiguration(*configuration);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_ignoreSslErrors(QNetworkReply * this_ptr, QList< QSslError > const * errors) {
  this_ptr->ignoreSslErrors(*errors);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_abort(QNetworkReply * this_ptr) {
  this_ptr->abort();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkReply_ignoreSslErrors1(QNetworkReply * this_ptr) {
  this_ptr->ignoreSslErrors();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QNetworkSession_metaObject(QNetworkSession const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QNetworkSession_qt_metacast(QNetworkSession * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkSession_qt_metacall(QNetworkSession * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkSession_tr(char const * s, char const * c, int n) {
  return new QString(QNetworkSession::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkSession_trUtf8(char const * s, char const * c, int n) {
  return new QString(QNetworkSession::trUtf8(s, c, n));
}


RITUAL_EXPORT QNetworkSession * ctr_qt_network_ffi_QNetworkSession_QNetworkSession(QNetworkConfiguration const * connConfig, QObject * parent) {
  return new QNetworkSession(*connConfig, parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_dQNetworkSession(QNetworkSession * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkSession_isOpen(QNetworkSession const * this_ptr) {
  return this_ptr->isOpen();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QNetworkSession_configuration(QNetworkSession const * this_ptr) {
  return new QNetworkConfiguration(this_ptr->configuration());
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QNetworkSession_interface(QNetworkSession const * this_ptr) {
  return new QNetworkInterface(this_ptr->interface());
}


RITUAL_EXPORT QNetworkSession::State ctr_qt_network_ffi_QNetworkSession_state(QNetworkSession const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT QNetworkSession::SessionError ctr_qt_network_ffi_QNetworkSession_error(QNetworkSession const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QNetworkSession_errorString(QNetworkSession const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkSession_sessionProperty(QNetworkSession const * this_ptr, QString const * key) {
  return new QVariant(this_ptr->sessionProperty(*key));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_setSessionProperty(QNetworkSession * this_ptr, QString const * key, QVariant const * value) {
  this_ptr->setSessionProperty(*key, *value);
}


RITUAL_EXPORT quint64 ctr_qt_network_ffi_QNetworkSession_bytesWritten(QNetworkSession const * this_ptr) {
  return this_ptr->bytesWritten();
}


RITUAL_EXPORT quint64 ctr_qt_network_ffi_QNetworkSession_bytesReceived(QNetworkSession const * this_ptr) {
  return this_ptr->bytesReceived();
}


RITUAL_EXPORT quint64 ctr_qt_network_ffi_QNetworkSession_activeTime(QNetworkSession const * this_ptr) {
  return this_ptr->activeTime();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QNetworkSession_usagePolicies(QNetworkSession const * this_ptr) {
  return int(this_ptr->usagePolicies());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkSession_waitForOpened(QNetworkSession * this_ptr, int msecs) {
  return this_ptr->waitForOpened(msecs);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_open(QNetworkSession * this_ptr) {
  this_ptr->open();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_close(QNetworkSession * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_stop(QNetworkSession * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_migrate(QNetworkSession * this_ptr) {
  this_ptr->migrate();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_ignore(QNetworkSession * this_ptr) {
  this_ptr->ignore();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_accept(QNetworkSession * this_ptr) {
  this_ptr->accept();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkSession_reject(QNetworkSession * this_ptr) {
  this_ptr->reject();
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash3(QOcspResponse const * response, unsigned int seed) {
  return qHash(*response, seed);
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QOcspResponse_QOcspResponse() {
  return new QOcspResponse();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QOcspResponse_QOcspResponse1(QOcspResponse const * other) {
  return new QOcspResponse(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QOcspResponse_dQOcspResponse(QOcspResponse * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QOcspResponse_operator_(QOcspResponse * this_ptr, QOcspResponse const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QOcspCertificateStatus ctr_qt_network_ffi_QOcspResponse_certificateStatus(QOcspResponse const * this_ptr) {
  return this_ptr->certificateStatus();
}


RITUAL_EXPORT QOcspRevocationReason ctr_qt_network_ffi_QOcspResponse_revocationReason(QOcspResponse const * this_ptr) {
  return this_ptr->revocationReason();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QOcspResponse_responder(QOcspResponse const * this_ptr) {
  return new QSslCertificate(this_ptr->responder());
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QOcspResponse_subject(QOcspResponse const * this_ptr) {
  return new QSslCertificate(this_ptr->subject());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QOcspResponse_swap(QOcspResponse * this_ptr, QOcspResponse * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap23(QOcspResponse * value1, QOcspResponse * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QPasswordDigestor_deriveKeyPbkdf1(QCryptographicHash::Algorithm algorithm, QByteArray const * password, QByteArray const * salt, int iterations, quint64 dkLen) {
  return new QByteArray(QPasswordDigestor::deriveKeyPbkdf1(algorithm, *password, *salt, iterations, dkLen));
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QPasswordDigestor_deriveKeyPbkdf2(QCryptographicHash::Algorithm algorithm, QByteArray const * password, QByteArray const * salt, int iterations, quint64 dkLen) {
  return new QByteArray(QPasswordDigestor::deriveKeyPbkdf2(algorithm, *password, *salt, iterations, dkLen));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QTcpServer_metaObject(QTcpServer const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QTcpServer_qt_metacast(QTcpServer * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QTcpServer_qt_metacall(QTcpServer * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QTcpServer_tr(char const * s, char const * c, int n) {
  return new QString(QTcpServer::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QTcpServer_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTcpServer::trUtf8(s, c, n));
}


RITUAL_EXPORT QTcpServer * ctr_qt_network_ffi_QTcpServer_QTcpServer(QObject * parent) {
  return new QTcpServer(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_dQTcpServer(QTcpServer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_listen(QTcpServer * this_ptr, QHostAddress const * address, quint16 port) {
  return this_ptr->listen(*address, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_close(QTcpServer * this_ptr) {
  this_ptr->close();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_isListening(QTcpServer const * this_ptr) {
  return this_ptr->isListening();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_setMaxPendingConnections(QTcpServer * this_ptr, int numConnections) {
  this_ptr->setMaxPendingConnections(numConnections);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QTcpServer_maxPendingConnections(QTcpServer const * this_ptr) {
  return this_ptr->maxPendingConnections();
}


RITUAL_EXPORT quint16 ctr_qt_network_ffi_QTcpServer_serverPort(QTcpServer const * this_ptr) {
  return this_ptr->serverPort();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QTcpServer_serverAddress(QTcpServer const * this_ptr) {
  return new QHostAddress(this_ptr->serverAddress());
}


RITUAL_EXPORT qintptr ctr_qt_network_ffi_QTcpServer_socketDescriptor(QTcpServer const * this_ptr) {
  return this_ptr->socketDescriptor();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_setSocketDescriptor(QTcpServer * this_ptr, qintptr socketDescriptor) {
  return this_ptr->setSocketDescriptor(socketDescriptor);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_waitForNewConnection(QTcpServer * this_ptr, int msec, bool * timedOut) {
  return this_ptr->waitForNewConnection(msec, timedOut);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_hasPendingConnections(QTcpServer const * this_ptr) {
  return this_ptr->hasPendingConnections();
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_QTcpServer_nextPendingConnection(QTcpServer * this_ptr) {
  return this_ptr->nextPendingConnection();
}


RITUAL_EXPORT QAbstractSocket::SocketError ctr_qt_network_ffi_QTcpServer_serverError(QTcpServer const * this_ptr) {
  return this_ptr->serverError();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QTcpServer_errorString(QTcpServer const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_pauseAccepting(QTcpServer * this_ptr) {
  this_ptr->pauseAccepting();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_resumeAccepting(QTcpServer * this_ptr) {
  this_ptr->resumeAccepting();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QTcpServer_setProxy(QTcpServer * this_ptr, QNetworkProxy const * networkProxy) {
  this_ptr->setProxy(*networkProxy);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QTcpServer_proxy(QTcpServer const * this_ptr) {
  return new QNetworkProxy(this_ptr->proxy());
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QSslCertificateExtension_QSslCertificateExtension() {
  return new QSslCertificateExtension();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QSslCertificateExtension_QSslCertificateExtension1(QSslCertificateExtension const * other) {
  return new QSslCertificateExtension(*other);
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QSslCertificateExtension_operator_1(QSslCertificateExtension * this_ptr, QSslCertificateExtension const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCertificateExtension_dQSslCertificateExtension(QSslCertificateExtension * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCertificateExtension_swap(QSslCertificateExtension * this_ptr, QSslCertificateExtension * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCertificateExtension_oid(QSslCertificateExtension const * this_ptr) {
  return new QString(this_ptr->oid());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCertificateExtension_name(QSslCertificateExtension const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QSslCertificateExtension_value(QSslCertificateExtension const * this_ptr) {
  return new QVariant(this_ptr->value());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificateExtension_isCritical(QSslCertificateExtension const * this_ptr) {
  return this_ptr->isCritical();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificateExtension_isSupported(QSslCertificateExtension const * this_ptr) {
  return this_ptr->isSupported();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap24(QSslCertificateExtension * value1, QSslCertificateExtension * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslCipher_QSslCipher() {
  return new QSslCipher();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslCipher_QSslCipher1(QString const * name) {
  return new QSslCipher(*name);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslCipher_QSslCipher2(QString const * name, QSsl::SslProtocol protocol) {
  return new QSslCipher(*name, protocol);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslCipher_QSslCipher3(QSslCipher const * other) {
  return new QSslCipher(*other);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QSslCipher_operator_1(QSslCipher * this_ptr, QSslCipher const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCipher_dQSslCipher(QSslCipher * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslCipher_swap(QSslCipher * this_ptr, QSslCipher * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCipher_operator__(QSslCipher const * this_ptr, QSslCipher const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCipher_isNull(QSslCipher const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCipher_name(QSslCipher const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslCipher_supportedBits(QSslCipher const * this_ptr) {
  return this_ptr->supportedBits();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslCipher_usedBits(QSslCipher const * this_ptr) {
  return this_ptr->usedBits();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCipher_keyExchangeMethod(QSslCipher const * this_ptr) {
  return new QString(this_ptr->keyExchangeMethod());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCipher_authenticationMethod(QSslCipher const * this_ptr) {
  return new QString(this_ptr->authenticationMethod());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCipher_encryptionMethod(QSslCipher const * this_ptr) {
  return new QString(this_ptr->encryptionMethod());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslCipher_protocolString(QSslCipher const * this_ptr) {
  return new QString(this_ptr->protocolString());
}


RITUAL_EXPORT QSsl::SslProtocol ctr_qt_network_ffi_QSslCipher_protocol(QSslCipher const * this_ptr) {
  return this_ptr->protocol();
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap25(QSslCipher * value1, QSslCipher * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__25(QDebug const * debug, QSslCipher const * cipher) {
  return new QDebug(operator<<(*debug, *cipher));
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash4(QSslDiffieHellmanParameters const * dhparam, unsigned int seed) {
  return qHash(*dhparam, seed);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__26(QDebug const * debug, QSslDiffieHellmanParameters const * dhparams) {
  return new QDebug(operator<<(*debug, *dhparams));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__27(QSslDiffieHellmanParameters const * lhs, QSslDiffieHellmanParameters const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_defaultParameters() {
  return new QSslDiffieHellmanParameters(QSslDiffieHellmanParameters::defaultParameters());
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_QSslDiffieHellmanParameters() {
  return new QSslDiffieHellmanParameters();
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_QSslDiffieHellmanParameters1(QSslDiffieHellmanParameters const * other) {
  return new QSslDiffieHellmanParameters(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslDiffieHellmanParameters_dQSslDiffieHellmanParameters(QSslDiffieHellmanParameters * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_operator_(QSslDiffieHellmanParameters * this_ptr, QSslDiffieHellmanParameters const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslDiffieHellmanParameters_swap(QSslDiffieHellmanParameters * this_ptr, QSslDiffieHellmanParameters * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded(QByteArray const * encoded, QSsl::EncodingFormat format) {
  return new QSslDiffieHellmanParameters(QSslDiffieHellmanParameters::fromEncoded(*encoded, format));
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded1(QIODevice * device, QSsl::EncodingFormat format) {
  return new QSslDiffieHellmanParameters(QSslDiffieHellmanParameters::fromEncoded(device, format));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslDiffieHellmanParameters_isEmpty(QSslDiffieHellmanParameters const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslDiffieHellmanParameters_isValid(QSslDiffieHellmanParameters const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QSslDiffieHellmanParameters::Error ctr_qt_network_ffi_QSslDiffieHellmanParameters_error(QSslDiffieHellmanParameters const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslDiffieHellmanParameters_errorString(QSslDiffieHellmanParameters const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap26(QSslDiffieHellmanParameters * value1, QSslDiffieHellmanParameters * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash5(QSslEllipticCurve const * curve, unsigned int seed) {
  return qHash(*curve, seed);
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QSslEllipticCurve_QSslEllipticCurve() {
  return new QSslEllipticCurve();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QSslEllipticCurve_fromShortName(QString const * name) {
  return new QSslEllipticCurve(QSslEllipticCurve::fromShortName(*name));
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QSslEllipticCurve_fromLongName(QString const * name) {
  return new QSslEllipticCurve(QSslEllipticCurve::fromLongName(*name));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslEllipticCurve_shortName(QSslEllipticCurve const * this_ptr) {
  return new QString(this_ptr->shortName());
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QSslEllipticCurve_longName(QSslEllipticCurve const * this_ptr) {
  return new QString(this_ptr->longName());
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslEllipticCurve_isValid(QSslEllipticCurve const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslEllipticCurve_isTlsNamedCurve(QSslEllipticCurve const * this_ptr) {
  return this_ptr->isTlsNamedCurve();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__29(QSslEllipticCurve const * lhs, QSslEllipticCurve const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__31(QDebug const * debug, QSslEllipticCurve const * curve) {
  return new QDebug(operator<<(*debug, *curve));
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey() {
  return new QSslKey();
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey1(QByteArray const * encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, QSsl::KeyType type, QByteArray const * passPhrase) {
  return new QSslKey(*encoded, algorithm, format, type, *passPhrase);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey2(QIODevice * device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, QSsl::KeyType type, QByteArray const * passPhrase) {
  return new QSslKey(device, algorithm, format, type, *passPhrase);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey3(void * handle, QSsl::KeyType type) {
  return new QSslKey(handle, type);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey4(QSslKey const * other) {
  return new QSslKey(*other);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_operator_1(QSslKey * this_ptr, QSslKey const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslKey_dQSslKey(QSslKey * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslKey_swap(QSslKey * this_ptr, QSslKey * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslKey_isNull(QSslKey const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslKey_clear(QSslKey * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QSslKey_length(QSslKey const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QSsl::KeyType ctr_qt_network_ffi_QSslKey_type(QSslKey const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QSsl::KeyAlgorithm ctr_qt_network_ffi_QSslKey_algorithm(QSslKey const * this_ptr) {
  return this_ptr->algorithm();
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslKey_toPem(QSslKey const * this_ptr, QByteArray const * passPhrase) {
  return new QByteArray(this_ptr->toPem(*passPhrase));
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslKey_toDer(QSslKey const * this_ptr, QByteArray const * passPhrase) {
  return new QByteArray(this_ptr->toDer(*passPhrase));
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QSslKey_handle(QSslKey const * this_ptr) {
  return this_ptr->handle();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslKey_operator__(QSslKey const * this_ptr, QSslKey const * key) {
  return this_ptr->operator==(*key);
}


RITUAL_EXPORT void ctr_qt_network_ffi_swap27(QSslKey * value1, QSslKey * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__32(QDebug const * debug, QSslKey const * key) {
  return new QDebug(operator<<(*debug, *key));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_QUdpSocket_metaObject(QUdpSocket const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_QUdpSocket_qt_metacast(QUdpSocket * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QUdpSocket_qt_metacall(QUdpSocket * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QUdpSocket_tr(char const * s, char const * c, int n) {
  return new QString(QUdpSocket::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QUdpSocket_trUtf8(char const * s, char const * c, int n) {
  return new QString(QUdpSocket::trUtf8(s, c, n));
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_QUdpSocket_QUdpSocket(QObject * parent) {
  return new QUdpSocket(parent);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QUdpSocket_dQUdpSocket(QUdpSocket * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QUdpSocket_joinMulticastGroup(QUdpSocket * this_ptr, QHostAddress const * groupAddress) {
  return this_ptr->joinMulticastGroup(*groupAddress);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QUdpSocket_joinMulticastGroup1(QUdpSocket * this_ptr, QHostAddress const * groupAddress, QNetworkInterface const * iface) {
  return this_ptr->joinMulticastGroup(*groupAddress, *iface);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QUdpSocket_leaveMulticastGroup(QUdpSocket * this_ptr, QHostAddress const * groupAddress) {
  return this_ptr->leaveMulticastGroup(*groupAddress);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QUdpSocket_leaveMulticastGroup1(QUdpSocket * this_ptr, QHostAddress const * groupAddress, QNetworkInterface const * iface) {
  return this_ptr->leaveMulticastGroup(*groupAddress, *iface);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QUdpSocket_multicastInterface(QUdpSocket const * this_ptr) {
  return new QNetworkInterface(this_ptr->multicastInterface());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QUdpSocket_setMulticastInterface(QUdpSocket * this_ptr, QNetworkInterface const * iface) {
  this_ptr->setMulticastInterface(*iface);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QUdpSocket_hasPendingDatagrams(QUdpSocket const * this_ptr) {
  return this_ptr->hasPendingDatagrams();
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_pendingDatagramSize(QUdpSocket const * this_ptr) {
  return this_ptr->pendingDatagramSize();
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QUdpSocket_receiveDatagram(QUdpSocket * this_ptr, qint64 maxSize) {
  return new QNetworkDatagram(this_ptr->receiveDatagram(maxSize));
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_readDatagram(QUdpSocket * this_ptr, char * data, qint64 maxlen, QHostAddress * host, quint16 * port) {
  return this_ptr->readDatagram(data, maxlen, host, port);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_writeDatagram(QUdpSocket * this_ptr, QNetworkDatagram const * datagram) {
  return this_ptr->writeDatagram(*datagram);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_writeDatagram1(QUdpSocket * this_ptr, char const * data, qint64 len, QHostAddress const * host, quint16 port) {
  return this_ptr->writeDatagram(data, len, *host, port);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_writeDatagram2(QUdpSocket * this_ptr, QByteArray const * datagram, QHostAddress const * host, quint16 port) {
  return this_ptr->writeDatagram(*datagram, *host, port);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup3() {
  return new QDnsLookup();
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_QTcpSocket_QTcpSocket1() {
  return new QTcpSocket();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate3() {
  return new QSslCertificate();
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_QSslSocket_QSslSocket1() {
  return new QSslSocket();
}


RITUAL_EXPORT QDtlsClientVerifier * ctr_qt_network_ffi_QDtlsClientVerifier_QDtlsClientVerifier1() {
  return new QDtlsClientVerifier();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_dGeneratorParameters(QDtlsClientVerifier::GeneratorParameters * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters2(QDtlsClientVerifier::GeneratorParameters const * other) {
  return new QDtlsClientVerifier::GeneratorParameters(*other);
}


RITUAL_EXPORT QDtlsClientVerifier::GeneratorParameters * ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_operator_(QDtlsClientVerifier::GeneratorParameters * this_ptr, QDtlsClientVerifier::GeneratorParameters const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QIPv6Address_dQIPv6Address(QIPv6Address * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIPv6Address * ctr_qt_network_ffi_QIPv6Address_QIPv6Address() {
  return new QIPv6Address();
}


RITUAL_EXPORT QIPv6Address * ctr_qt_network_ffi_QIPv6Address_QIPv6Address1(QIPv6Address const * other) {
  return new QIPv6Address(*other);
}


RITUAL_EXPORT QIPv6Address * ctr_qt_network_ffi_QIPv6Address_operator_(QIPv6Address * this_ptr, QIPv6Address const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHostInfo * ctr_qt_network_ffi_QHostInfo_QHostInfo3() {
  return new QHostInfo();
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart2() {
  return new QHttpMultiPart();
}


RITUAL_EXPORT QLocalServer * ctr_qt_network_ffi_QLocalServer_QLocalServer1() {
  return new QLocalServer();
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_QLocalSocket_QLocalSocket1() {
  return new QLocalSocket();
}


RITUAL_EXPORT QNetworkAccessManager * ctr_qt_network_ffi_QNetworkAccessManager_QNetworkAccessManager1() {
  return new QNetworkAccessManager();
}


RITUAL_EXPORT QNetworkConfigurationManager * ctr_qt_network_ffi_QNetworkConfigurationManager_QNetworkConfigurationManager1() {
  return new QNetworkConfigurationManager();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie2() {
  return new QNetworkCookie();
}


RITUAL_EXPORT QNetworkCookieJar * ctr_qt_network_ffi_QNetworkCookieJar_QNetworkCookieJar1() {
  return new QNetworkCookieJar();
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_QNetworkDiskCache_QNetworkDiskCache1() {
  return new QNetworkDiskCache();
}


RITUAL_EXPORT QNetworkProxyFactory * ctr_qt_network_ffi_QNetworkProxyFactory_operator_(QNetworkProxyFactory * this_ptr, QNetworkProxyFactory const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTcpServer * ctr_qt_network_ffi_QTcpServer_QTcpServer1() {
  return new QTcpServer();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslEllipticCurve_dQSslEllipticCurve(QSslEllipticCurve * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QSslEllipticCurve_QSslEllipticCurve1(QSslEllipticCurve const * other) {
  return new QSslEllipticCurve(*other);
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QSslEllipticCurve_operator_(QSslEllipticCurve * this_ptr, QSslEllipticCurve const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_QUdpSocket_QUdpSocket1() {
  return new QUdpSocket();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair() {
  return new QPair< QByteArray, QByteArray >();
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_QPair_QHostAddress_int_QPair() {
  return new QPair< QHostAddress, int >();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair1(QByteArray const * t1, QByteArray const * t2) {
  return new QPair< QByteArray, QByteArray >(*t1, *t2);
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_QPair_QHostAddress_int_QPair1(QHostAddress const * t1, int const * t2) {
  return new QPair< QHostAddress, int >(*t1, *t2);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QPair_QByteArray_QByteArray_swap(QPair< QByteArray, QByteArray > * this_ptr, QPair< QByteArray, QByteArray > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QPair_QHostAddress_int_swap(QPair< QHostAddress, int > * this_ptr, QPair< QHostAddress, int > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__33(QPair< QByteArray, QByteArray > const * p1, QPair< QByteArray, QByteArray > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__34(QPair< QHostAddress, int > const * p1, QPair< QHostAddress, int > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator_9(QPair< QByteArray, QByteArray > const * p1, QPair< QByteArray, QByteArray > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator_11(QPair< QByteArray, QByteArray > const * p1, QPair< QByteArray, QByteArray > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__37(QPair< QByteArray, QByteArray > const * p1, QPair< QByteArray, QByteArray > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__39(QPair< QByteArray, QByteArray > const * p1, QPair< QByteArray, QByteArray > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_qMakePair(QByteArray const * x, QByteArray const * y) {
  return new QPair< QByteArray, QByteArray >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_qMakePair1(QHostAddress const * x, int const * y) {
  return new QPair< QHostAddress, int >(qMakePair(*x, *y));
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash6(QPair< QByteArray, QByteArray > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash7(QPair< QHostAddress, int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_QVector() {
  return new QVector< QOcspResponse >();
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_QVector() {
  return new QVector< QSslError >();
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector() {
  return new QVector< QSslEllipticCurve >();
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_QVector() {
  return new QVector< QHstsPolicy >();
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_QVector1(int size) {
  return new QVector< QOcspResponse >(size);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_QVector1(int size) {
  return new QVector< QSslError >(size);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector1(int size) {
  return new QVector< QSslEllipticCurve >(size);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_QVector1(int size) {
  return new QVector< QHstsPolicy >(size);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_QVector2(int size, QOcspResponse const * t) {
  return new QVector< QOcspResponse >(size, *t);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_QVector2(int size, QSslError const * t) {
  return new QVector< QSslError >(size, *t);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector2(int size, QSslEllipticCurve const * t) {
  return new QVector< QSslEllipticCurve >(size, *t);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_QVector2(int size, QHstsPolicy const * t) {
  return new QVector< QHstsPolicy >(size, *t);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_QVector3(QVector< QOcspResponse > const * v) {
  return new QVector< QOcspResponse >(*v);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_QVector3(QVector< QSslError > const * v) {
  return new QVector< QSslError >(*v);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector3(QVector< QSslEllipticCurve > const * v) {
  return new QVector< QSslEllipticCurve >(*v);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_QVector3(QVector< QHstsPolicy > const * v) {
  return new QVector< QHstsPolicy >(*v);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_dQVector(QVector< QOcspResponse > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_dQVector(QVector< QSslError > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_dQVector(QVector< QSslEllipticCurve > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_dQVector(QVector< QHstsPolicy > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator_(QVector< QOcspResponse > * this_ptr, QVector< QOcspResponse > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator_(QVector< QSslError > * this_ptr, QVector< QSslError > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator_(QVector< QSslEllipticCurve > * this_ptr, QVector< QSslEllipticCurve > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator_(QVector< QHstsPolicy > * this_ptr, QVector< QHstsPolicy > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_swap(QVector< QOcspResponse > * this_ptr, QVector< QOcspResponse > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_swap(QVector< QSslError > * this_ptr, QVector< QSslError > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_swap(QVector< QSslEllipticCurve > * this_ptr, QVector< QSslEllipticCurve > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_swap(QVector< QHstsPolicy > * this_ptr, QVector< QHstsPolicy > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_operator__(QVector< QOcspResponse > const * this_ptr, QVector< QOcspResponse > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_operator__(QVector< QSslError > const * this_ptr, QVector< QSslError > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__(QVector< QSslEllipticCurve > const * this_ptr, QVector< QSslEllipticCurve > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_operator__(QVector< QHstsPolicy > const * this_ptr, QVector< QHstsPolicy > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_size(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_size(QVector< QSslError > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_size(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_size(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_isEmpty(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_isEmpty(QVector< QSslError > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_isEmpty(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_isEmpty(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_resize(QVector< QOcspResponse > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_resize(QVector< QSslError > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_resize(QVector< QSslEllipticCurve > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_resize(QVector< QHstsPolicy > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_capacity(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_capacity(QVector< QSslError > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_capacity(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_capacity(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_reserve(QVector< QOcspResponse > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_reserve(QVector< QSslError > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_reserve(QVector< QSslEllipticCurve > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_reserve(QVector< QHstsPolicy > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_squeeze(QVector< QOcspResponse > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_squeeze(QVector< QSslError > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_squeeze(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_squeeze(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_detach(QVector< QOcspResponse > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_detach(QVector< QSslError > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_detach(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_detach(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_isDetached(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_isDetached(QVector< QSslError > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_isDetached(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_isDetached(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_setSharable(QVector< QOcspResponse > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_setSharable(QVector< QSslError > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_setSharable(QVector< QSslEllipticCurve > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_setSharable(QVector< QHstsPolicy > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_isSharedWith(QVector< QOcspResponse > const * this_ptr, QVector< QOcspResponse > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_isSharedWith(QVector< QSslError > const * this_ptr, QVector< QSslError > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_isSharedWith(QVector< QSslEllipticCurve > const * this_ptr, QVector< QSslEllipticCurve > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_isSharedWith(QVector< QHstsPolicy > const * this_ptr, QVector< QHstsPolicy > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_data(QVector< QOcspResponse > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_data(QVector< QSslError > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_data(QVector< QSslEllipticCurve > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_data(QVector< QHstsPolicy > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_data1(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_data1(QVector< QSslError > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_data1(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_data1(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_constData(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_constData(QVector< QSslError > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_constData(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_constData(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_clear(QVector< QOcspResponse > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_clear(QVector< QSslError > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_clear(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_clear(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_at(QVector< QOcspResponse > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_at(QVector< QSslError > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_at(QVector< QSslEllipticCurve > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_at(QVector< QHstsPolicy > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_operator__2(QVector< QOcspResponse > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_operator__2(QVector< QSslError > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__2(QVector< QSslEllipticCurve > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__2(QVector< QHstsPolicy > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_operator__3(QVector< QOcspResponse > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_operator__3(QVector< QSslError > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__3(QVector< QSslEllipticCurve > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__3(QVector< QHstsPolicy > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_append(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_append(QVector< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_append(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_append(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_append2(QVector< QOcspResponse > * this_ptr, QVector< QOcspResponse > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_append2(QVector< QSslError > * this_ptr, QVector< QSslError > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_append2(QVector< QSslEllipticCurve > * this_ptr, QVector< QSslEllipticCurve > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_append2(QVector< QHstsPolicy > * this_ptr, QVector< QHstsPolicy > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_prepend1(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_prepend1(QVector< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_prepend1(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_prepend1(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_insert1(QVector< QOcspResponse > * this_ptr, int i, QOcspResponse const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_insert1(QVector< QSslError > * this_ptr, int i, QSslError const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_insert1(QVector< QSslEllipticCurve > * this_ptr, int i, QSslEllipticCurve const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_insert1(QVector< QHstsPolicy > * this_ptr, int i, QHstsPolicy const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_insert2(QVector< QOcspResponse > * this_ptr, int i, int n, QOcspResponse const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_insert2(QVector< QSslError > * this_ptr, int i, int n, QSslError const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_insert2(QVector< QSslEllipticCurve > * this_ptr, int i, int n, QSslEllipticCurve const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_insert2(QVector< QHstsPolicy > * this_ptr, int i, int n, QHstsPolicy const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_replace(QVector< QOcspResponse > * this_ptr, int i, QOcspResponse const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_replace(QVector< QSslError > * this_ptr, int i, QSslError const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_replace(QVector< QSslEllipticCurve > * this_ptr, int i, QSslEllipticCurve const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_replace(QVector< QHstsPolicy > * this_ptr, int i, QHstsPolicy const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_remove(QVector< QOcspResponse > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_remove(QVector< QSslError > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_remove(QVector< QSslEllipticCurve > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_remove(QVector< QHstsPolicy > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_remove1(QVector< QOcspResponse > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_remove1(QVector< QSslError > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_remove1(QVector< QSslEllipticCurve > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_remove1(QVector< QHstsPolicy > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_removeFirst(QVector< QOcspResponse > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_removeFirst(QVector< QSslError > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeFirst(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_removeFirst(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_removeLast(QVector< QOcspResponse > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_removeLast(QVector< QSslError > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeLast(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_removeLast(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_takeFirst(QVector< QOcspResponse > * this_ptr) {
  return new QOcspResponse(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_takeFirst(QVector< QSslError > * this_ptr) {
  return new QSslError(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeFirst(QVector< QSslEllipticCurve > * this_ptr) {
  return new QSslEllipticCurve(this_ptr->takeFirst());
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_takeFirst(QVector< QHstsPolicy > * this_ptr) {
  return new QHstsPolicy(this_ptr->takeFirst());
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_takeLast(QVector< QOcspResponse > * this_ptr) {
  return new QOcspResponse(this_ptr->takeLast());
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_takeLast(QVector< QSslError > * this_ptr) {
  return new QSslError(this_ptr->takeLast());
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeLast(QVector< QSslEllipticCurve > * this_ptr) {
  return new QSslEllipticCurve(this_ptr->takeLast());
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_takeLast(QVector< QHstsPolicy > * this_ptr) {
  return new QHstsPolicy(this_ptr->takeLast());
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_fill(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_fill(QVector< QSslError > * this_ptr, QSslError const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_fill(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_fill(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_indexOf(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_indexOf(QVector< QSslError > const * this_ptr, QSslError const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_indexOf(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_indexOf(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_lastIndexOf(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_lastIndexOf(QVector< QSslError > const * this_ptr, QSslError const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_lastIndexOf(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_lastIndexOf(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_contains(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_contains(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_contains(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_contains(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_count(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_count(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_count(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_count(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_removeAt(QVector< QOcspResponse > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_removeAt(QVector< QSslError > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeAt(QVector< QSslEllipticCurve > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_removeAt(QVector< QHstsPolicy > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_removeAll(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_removeAll(QVector< QSslError > * this_ptr, QSslError const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeAll(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_removeAll(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_removeOne(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_removeOne(QVector< QSslError > * this_ptr, QSslError const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeOne(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_removeOne(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_length(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_length(QVector< QSslError > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_length(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_length(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_takeAt(QVector< QOcspResponse > * this_ptr, int i) {
  return new QOcspResponse(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_takeAt(QVector< QSslError > * this_ptr, int i) {
  return new QSslError(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeAt(QVector< QSslEllipticCurve > * this_ptr, int i) {
  return new QSslEllipticCurve(this_ptr->takeAt(i));
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_takeAt(QVector< QHstsPolicy > * this_ptr, int i) {
  return new QHstsPolicy(this_ptr->takeAt(i));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_move(QVector< QOcspResponse > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_move(QVector< QSslError > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_move(QVector< QSslEllipticCurve > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_move(QVector< QHstsPolicy > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_count1(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_count1(QVector< QSslError > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_count1(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_count1(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_first(QVector< QOcspResponse > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_first(QVector< QSslError > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_first(QVector< QSslEllipticCurve > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_first(QVector< QHstsPolicy > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_first1(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_first1(QVector< QSslError > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_first1(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_first1(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_constFirst(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_constFirst(QVector< QSslError > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_constFirst(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_constFirst(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_last(QVector< QOcspResponse > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_last(QVector< QSslError > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_last(QVector< QSslEllipticCurve > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_last(QVector< QHstsPolicy > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_last1(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_last1(QVector< QSslError > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_last1(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_last1(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_constLast(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_constLast(QVector< QSslError > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_constLast(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_constLast(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_startsWith(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_startsWith(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_startsWith(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_startsWith(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_endsWith(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_endsWith(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_endsWith(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_endsWith(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_mid(QVector< QOcspResponse > const * this_ptr, int pos, int len) {
  return new QVector< QOcspResponse >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_mid(QVector< QSslError > const * this_ptr, int pos, int len) {
  return new QVector< QSslError >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_mid(QVector< QSslEllipticCurve > const * this_ptr, int pos, int len) {
  return new QVector< QSslEllipticCurve >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_mid(QVector< QHstsPolicy > const * this_ptr, int pos, int len) {
  return new QVector< QHstsPolicy >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_value(QVector< QOcspResponse > const * this_ptr, int i) {
  return new QOcspResponse(this_ptr->value(i));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_value(QVector< QSslError > const * this_ptr, int i) {
  return new QSslError(this_ptr->value(i));
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_value(QVector< QSslEllipticCurve > const * this_ptr, int i) {
  return new QSslEllipticCurve(this_ptr->value(i));
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_value(QVector< QHstsPolicy > const * this_ptr, int i) {
  return new QHstsPolicy(this_ptr->value(i));
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_value1(QVector< QOcspResponse > const * this_ptr, int i, QOcspResponse const * defaultValue) {
  return new QOcspResponse(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_value1(QVector< QSslError > const * this_ptr, int i, QSslError const * defaultValue) {
  return new QSslError(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_value1(QVector< QSslEllipticCurve > const * this_ptr, int i, QSslEllipticCurve const * defaultValue) {
  return new QSslEllipticCurve(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_value1(QVector< QHstsPolicy > const * this_ptr, int i, QHstsPolicy const * defaultValue) {
  return new QHstsPolicy(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_swapItemsAt(QVector< QOcspResponse > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_swapItemsAt(QVector< QSslError > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_swapItemsAt(QVector< QSslEllipticCurve > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_swapItemsAt(QVector< QHstsPolicy > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_push_back(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_push_back(QVector< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_push_back(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_push_back(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_push_front1(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_push_front1(QVector< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_push_front1(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_push_front1(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_pop_back(QVector< QOcspResponse > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_pop_back(QVector< QSslError > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_pop_back(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_pop_back(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_pop_front(QVector< QOcspResponse > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_pop_front(QVector< QSslError > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_pop_front(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_pop_front(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QOcspResponse_empty(QVector< QOcspResponse > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslError_empty(QVector< QSslError > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QSslEllipticCurve_empty(QVector< QSslEllipticCurve > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QVector_QHstsPolicy_empty(QVector< QHstsPolicy > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_front(QVector< QOcspResponse > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_front(QVector< QSslError > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_front(QVector< QSslEllipticCurve > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_front(QVector< QHstsPolicy > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_front1(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_front1(QVector< QSslError > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_front1(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_front1(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOcspResponse * ctr_qt_network_ffi_QVector_QOcspResponse_back(QVector< QOcspResponse > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QVector_QSslError_back(QVector< QSslError > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslEllipticCurve * ctr_qt_network_ffi_QVector_QSslEllipticCurve_back(QVector< QSslEllipticCurve > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QVector_QHstsPolicy_back(QVector< QHstsPolicy > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOcspResponse const * ctr_qt_network_ffi_QVector_QOcspResponse_back1(QVector< QOcspResponse > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QVector_QSslError_back1(QVector< QSslError > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslEllipticCurve const * ctr_qt_network_ffi_QVector_QSslEllipticCurve_back1(QVector< QSslEllipticCurve > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QHstsPolicy const * ctr_qt_network_ffi_QVector_QHstsPolicy_back1(QVector< QHstsPolicy > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QOcspResponse_shrink_to_fit(QVector< QOcspResponse > * this_ptr) {
  this_ptr->shrink_to_fit();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslError_shrink_to_fit(QVector< QSslError > * this_ptr) {
  this_ptr->shrink_to_fit();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QSslEllipticCurve_shrink_to_fit(QVector< QSslEllipticCurve > * this_ptr) {
  this_ptr->shrink_to_fit();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QVector_QHstsPolicy_shrink_to_fit(QVector< QHstsPolicy > * this_ptr) {
  this_ptr->shrink_to_fit();
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator__4(QVector< QOcspResponse > * this_ptr, QVector< QOcspResponse > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator__4(QVector< QSslError > * this_ptr, QVector< QSslError > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__4(QVector< QSslEllipticCurve > * this_ptr, QVector< QSslEllipticCurve > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__4(QVector< QHstsPolicy > * this_ptr, QVector< QHstsPolicy > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator_2(QVector< QOcspResponse > const * this_ptr, QVector< QOcspResponse > const * l) {
  return new QVector< QOcspResponse >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator_2(QVector< QSslError > const * this_ptr, QVector< QSslError > const * l) {
  return new QVector< QSslError >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator_2(QVector< QSslEllipticCurve > const * this_ptr, QVector< QSslEllipticCurve > const * l) {
  return new QVector< QSslEllipticCurve >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator_2(QVector< QHstsPolicy > const * this_ptr, QVector< QHstsPolicy > const * l) {
  return new QVector< QHstsPolicy >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator__5(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator__5(QVector< QSslError > * this_ptr, QSslError const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__5(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__5(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator__6(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator__6(QVector< QSslError > * this_ptr, QSslError const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__6(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__6(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_operator__7(QVector< QOcspResponse > * this_ptr, QVector< QOcspResponse > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_operator__7(QVector< QSslError > * this_ptr, QVector< QSslError > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__7(QVector< QSslEllipticCurve > * this_ptr, QVector< QSslEllipticCurve > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_operator__7(QVector< QHstsPolicy > * this_ptr, QVector< QHstsPolicy > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_fromList(QList< QSslError > const * list) {
  return new QVector< QSslError >(QVector< QSslError >::fromList(*list));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QVector_QSslError_toList(QVector< QSslError > const * this_ptr) {
  return new QList< QSslError >(this_ptr->toList());
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash8(QVector< QOcspResponse > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash9(QVector< QSslError > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash10(QVector< QSslEllipticCurve > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_QList() {
  return new QList< QPair< QByteArray, QByteArray > >();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_QList() {
  return new QList< QDnsDomainNameRecord >();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_QList() {
  return new QList< QDnsHostAddressRecord >();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_QList() {
  return new QList< QDnsMailExchangeRecord >();
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_QList() {
  return new QList< QDnsServiceRecord >();
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_QList() {
  return new QList< QDnsTextRecord >();
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_QList() {
  return new QList< QSslCertificateExtension >();
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_QList() {
  return new QList< QSslCertificate >();
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_QList() {
  return new QList< QSslError >();
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_QList() {
  return new QList< QSslCipher >();
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_QList() {
  return new QList< QHostAddress >();
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_QList() {
  return new QList< QNetworkConfiguration >();
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_QList() {
  return new QList< QNetworkCookie >();
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_QList() {
  return new QList< QNetworkAddressEntry >();
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_QList() {
  return new QList< QNetworkInterface >();
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_QList() {
  return new QList< QNetworkProxy >();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_QList1(QList< QPair< QByteArray, QByteArray > > const * l) {
  return new QList< QPair< QByteArray, QByteArray > >(*l);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_QList1(QList< QDnsDomainNameRecord > const * l) {
  return new QList< QDnsDomainNameRecord >(*l);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_QList1(QList< QDnsHostAddressRecord > const * l) {
  return new QList< QDnsHostAddressRecord >(*l);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_QList1(QList< QDnsMailExchangeRecord > const * l) {
  return new QList< QDnsMailExchangeRecord >(*l);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_QList1(QList< QDnsServiceRecord > const * l) {
  return new QList< QDnsServiceRecord >(*l);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_QList1(QList< QDnsTextRecord > const * l) {
  return new QList< QDnsTextRecord >(*l);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_QList1(QList< QSslCertificateExtension > const * l) {
  return new QList< QSslCertificateExtension >(*l);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_QList1(QList< QSslCertificate > const * l) {
  return new QList< QSslCertificate >(*l);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_QList1(QList< QSslError > const * l) {
  return new QList< QSslError >(*l);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_QList1(QList< QSslCipher > const * l) {
  return new QList< QSslCipher >(*l);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_QList1(QList< QHostAddress > const * l) {
  return new QList< QHostAddress >(*l);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_QList1(QList< QNetworkConfiguration > const * l) {
  return new QList< QNetworkConfiguration >(*l);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_QList1(QList< QNetworkCookie > const * l) {
  return new QList< QNetworkCookie >(*l);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_QList1(QList< QNetworkAddressEntry > const * l) {
  return new QList< QNetworkAddressEntry >(*l);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_QList1(QList< QNetworkInterface > const * l) {
  return new QList< QNetworkInterface >(*l);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_QList1(QList< QNetworkProxy > const * l) {
  return new QList< QNetworkProxy >(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_dQList(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_dQList(QList< QDnsDomainNameRecord > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_dQList(QList< QDnsHostAddressRecord > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_dQList(QList< QDnsMailExchangeRecord > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_dQList(QList< QDnsServiceRecord > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_dQList(QList< QDnsTextRecord > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_dQList(QList< QSslCertificateExtension > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_dQList(QList< QSslCertificate > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_dQList(QList< QSslError > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_dQList(QList< QSslCipher > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_dQList(QList< QHostAddress > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_dQList(QList< QNetworkConfiguration > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_dQList(QList< QNetworkCookie > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_dQList(QList< QNetworkAddressEntry > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_dQList(QList< QNetworkInterface > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_dQList(QList< QNetworkProxy > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator_(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator_(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator_(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator_(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator_(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator_(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator_(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator_(QList< QSslCertificate > * this_ptr, QList< QSslCertificate > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator_(QList< QSslError > * this_ptr, QList< QSslError > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator_(QList< QSslCipher > * this_ptr, QList< QSslCipher > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator_(QList< QHostAddress > * this_ptr, QList< QHostAddress > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator_(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator_(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator_(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator_(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator_(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swap(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swap(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swap(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swap(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_swap(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_swap(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_swap(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_swap(QList< QSslCertificate > * this_ptr, QList< QSslCertificate > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_swap(QList< QSslError > * this_ptr, QList< QSslError > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_swap(QList< QSslCipher > * this_ptr, QList< QSslCipher > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_swap(QList< QHostAddress > * this_ptr, QList< QHostAddress > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_swap(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_swap(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_swap(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_swap(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_swap(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QList< QPair< QByteArray, QByteArray > > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_operator__(QList< QSslCertificate > const * this_ptr, QList< QSslCertificate > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_operator__(QList< QSslError > const * this_ptr, QList< QSslError > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_operator__(QList< QSslCipher > const * this_ptr, QList< QSslCipher > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_operator__(QList< QHostAddress > const * this_ptr, QList< QHostAddress > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__(QList< QNetworkConfiguration > const * this_ptr, QList< QNetworkConfiguration > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_operator__(QList< QNetworkCookie > const * this_ptr, QList< QNetworkCookie > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__(QList< QNetworkAddressEntry > const * this_ptr, QList< QNetworkAddressEntry > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_operator__(QList< QNetworkProxy > const * this_ptr, QList< QNetworkProxy > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_size(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsDomainNameRecord_size(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsHostAddressRecord_size(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_size(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsServiceRecord_size(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsTextRecord_size(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificateExtension_size(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_size(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_size(QList< QSslError > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_size(QList< QSslCipher > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_size(QList< QHostAddress > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_size(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_size(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_size(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkInterface_size(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_size(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_detach(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_detach(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_detach(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_detach(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_detach(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_detach(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_detach(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_detach(QList< QSslCertificate > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_detach(QList< QSslError > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_detach(QList< QSslCipher > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_detach(QList< QHostAddress > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_detach(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_detach(QList< QNetworkCookie > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_detach(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_detach(QList< QNetworkInterface > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_detach(QList< QNetworkProxy > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_detachShared(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_detachShared(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_detachShared(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_detachShared(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_detachShared(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_detachShared(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_detachShared(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_detachShared(QList< QSslCertificate > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_detachShared(QList< QSslError > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_detachShared(QList< QSslCipher > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_detachShared(QList< QHostAddress > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_detachShared(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_detachShared(QList< QNetworkCookie > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_detachShared(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_detachShared(QList< QNetworkInterface > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_detachShared(QList< QNetworkProxy > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isDetached(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isDetached(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isDetached(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isDetached(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_isDetached(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_isDetached(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_isDetached(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_isDetached(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_isDetached(QList< QSslError > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_isDetached(QList< QSslCipher > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_isDetached(QList< QHostAddress > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_isDetached(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_isDetached(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_isDetached(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_isDetached(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_isDetached(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_setSharable(QList< QPair< QByteArray, QByteArray > > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_setSharable(QList< QDnsDomainNameRecord > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_setSharable(QList< QDnsHostAddressRecord > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_setSharable(QList< QDnsMailExchangeRecord > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_setSharable(QList< QDnsServiceRecord > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_setSharable(QList< QDnsTextRecord > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_setSharable(QList< QSslCertificateExtension > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_setSharable(QList< QSslCertificate > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_setSharable(QList< QSslError > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_setSharable(QList< QSslCipher > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_setSharable(QList< QHostAddress > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_setSharable(QList< QNetworkConfiguration > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_setSharable(QList< QNetworkCookie > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_setSharable(QList< QNetworkAddressEntry > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_setSharable(QList< QNetworkInterface > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_setSharable(QList< QNetworkProxy > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isSharedWith(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QList< QPair< QByteArray, QByteArray > > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isSharedWith(QList< QDnsDomainNameRecord > const * this_ptr, QList< QDnsDomainNameRecord > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isSharedWith(QList< QDnsHostAddressRecord > const * this_ptr, QList< QDnsHostAddressRecord > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isSharedWith(QList< QDnsMailExchangeRecord > const * this_ptr, QList< QDnsMailExchangeRecord > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_isSharedWith(QList< QDnsServiceRecord > const * this_ptr, QList< QDnsServiceRecord > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_isSharedWith(QList< QDnsTextRecord > const * this_ptr, QList< QDnsTextRecord > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_isSharedWith(QList< QSslCertificateExtension > const * this_ptr, QList< QSslCertificateExtension > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_isSharedWith(QList< QSslCertificate > const * this_ptr, QList< QSslCertificate > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_isSharedWith(QList< QSslError > const * this_ptr, QList< QSslError > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_isSharedWith(QList< QSslCipher > const * this_ptr, QList< QSslCipher > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_isSharedWith(QList< QHostAddress > const * this_ptr, QList< QHostAddress > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_isSharedWith(QList< QNetworkConfiguration > const * this_ptr, QList< QNetworkConfiguration > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_isSharedWith(QList< QNetworkCookie > const * this_ptr, QList< QNetworkCookie > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_isSharedWith(QList< QNetworkAddressEntry > const * this_ptr, QList< QNetworkAddressEntry > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_isSharedWith(QList< QNetworkInterface > const * this_ptr, QList< QNetworkInterface > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_isSharedWith(QList< QNetworkProxy > const * this_ptr, QList< QNetworkProxy > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isEmpty(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isEmpty(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isEmpty(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isEmpty(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_isEmpty(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_isEmpty(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_isEmpty(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_isEmpty(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_isEmpty(QList< QSslError > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_isEmpty(QList< QSslCipher > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_isEmpty(QList< QHostAddress > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_isEmpty(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_isEmpty(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_isEmpty(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_isEmpty(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_isEmpty(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_clear(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_clear(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_clear(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_clear(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_clear(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_clear(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_clear(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_clear(QList< QSslCertificate > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_clear(QList< QSslError > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_clear(QList< QSslCipher > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_clear(QList< QHostAddress > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_clear(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_clear(QList< QNetworkCookie > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_clear(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_clear(QList< QNetworkInterface > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_clear(QList< QNetworkProxy > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_at(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_at(QList< QDnsDomainNameRecord > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_at(QList< QDnsHostAddressRecord > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_at(QList< QDnsMailExchangeRecord > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_at(QList< QDnsServiceRecord > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_at(QList< QDnsTextRecord > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_at(QList< QSslCertificateExtension > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_at(QList< QSslCertificate > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_at(QList< QSslError > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_at(QList< QSslCipher > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_at(QList< QHostAddress > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_at(QList< QNetworkConfiguration > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_at(QList< QNetworkCookie > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_at(QList< QNetworkAddressEntry > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_at(QList< QNetworkInterface > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_at(QList< QNetworkProxy > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__2(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__2(QList< QDnsDomainNameRecord > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__2(QList< QDnsHostAddressRecord > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__2(QList< QDnsMailExchangeRecord > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__2(QList< QDnsServiceRecord > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__2(QList< QDnsTextRecord > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__2(QList< QSslCertificateExtension > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_operator__2(QList< QSslCertificate > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_operator__2(QList< QSslError > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_operator__2(QList< QSslCipher > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_operator__2(QList< QHostAddress > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__2(QList< QNetworkConfiguration > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_operator__2(QList< QNetworkCookie > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__2(QList< QNetworkAddressEntry > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_operator__2(QList< QNetworkInterface > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_operator__2(QList< QNetworkProxy > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__3(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__3(QList< QDnsDomainNameRecord > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__3(QList< QDnsHostAddressRecord > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__3(QList< QDnsMailExchangeRecord > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__3(QList< QDnsServiceRecord > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__3(QList< QDnsTextRecord > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__3(QList< QSslCertificateExtension > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_operator__3(QList< QSslCertificate > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_operator__3(QList< QSslError > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_operator__3(QList< QSslCipher > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_operator__3(QList< QHostAddress > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__3(QList< QNetworkConfiguration > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_operator__3(QList< QNetworkCookie > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__3(QList< QNetworkAddressEntry > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_operator__3(QList< QNetworkInterface > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_operator__3(QList< QNetworkProxy > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_reserve(QList< QPair< QByteArray, QByteArray > > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_reserve(QList< QDnsDomainNameRecord > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_reserve(QList< QDnsHostAddressRecord > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_reserve(QList< QDnsMailExchangeRecord > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_reserve(QList< QDnsServiceRecord > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_reserve(QList< QDnsTextRecord > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_reserve(QList< QSslCertificateExtension > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_reserve(QList< QSslCertificate > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_reserve(QList< QSslError > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_reserve(QList< QSslCipher > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_reserve(QList< QHostAddress > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_reserve(QList< QNetworkConfiguration > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_reserve(QList< QNetworkCookie > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_reserve(QList< QNetworkAddressEntry > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_reserve(QList< QNetworkInterface > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_reserve(QList< QNetworkProxy > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_append(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_append(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_append(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_append(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_append(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_append(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_append(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_append(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_append(QList< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_append(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_append(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_append(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_append(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_append(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_append(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_append(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_append1(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_append1(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_append1(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_append1(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_append1(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_append1(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_append1(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_append1(QList< QSslCertificate > * this_ptr, QList< QSslCertificate > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_append1(QList< QSslError > * this_ptr, QList< QSslError > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_append1(QList< QSslCipher > * this_ptr, QList< QSslCipher > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_append1(QList< QHostAddress > * this_ptr, QList< QHostAddress > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_append1(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_append1(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_append1(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_append1(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_append1(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_prepend(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_prepend(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_prepend(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_prepend(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_prepend(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_prepend(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_prepend(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_prepend(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_prepend(QList< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_prepend(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_prepend(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_prepend(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_prepend(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_prepend(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_prepend(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_prepend(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_insert(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_insert(QList< QDnsDomainNameRecord > * this_ptr, int i, QDnsDomainNameRecord const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_insert(QList< QDnsHostAddressRecord > * this_ptr, int i, QDnsHostAddressRecord const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_insert(QList< QDnsMailExchangeRecord > * this_ptr, int i, QDnsMailExchangeRecord const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_insert(QList< QDnsServiceRecord > * this_ptr, int i, QDnsServiceRecord const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_insert(QList< QDnsTextRecord > * this_ptr, int i, QDnsTextRecord const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_insert(QList< QSslCertificateExtension > * this_ptr, int i, QSslCertificateExtension const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_insert(QList< QSslCertificate > * this_ptr, int i, QSslCertificate const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_insert(QList< QSslError > * this_ptr, int i, QSslError const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_insert(QList< QSslCipher > * this_ptr, int i, QSslCipher const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_insert(QList< QHostAddress > * this_ptr, int i, QHostAddress const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_insert(QList< QNetworkConfiguration > * this_ptr, int i, QNetworkConfiguration const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_insert(QList< QNetworkCookie > * this_ptr, int i, QNetworkCookie const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_insert(QList< QNetworkAddressEntry > * this_ptr, int i, QNetworkAddressEntry const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_insert(QList< QNetworkInterface > * this_ptr, int i, QNetworkInterface const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_insert(QList< QNetworkProxy > * this_ptr, int i, QNetworkProxy const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_replace(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_replace(QList< QDnsDomainNameRecord > * this_ptr, int i, QDnsDomainNameRecord const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_replace(QList< QDnsHostAddressRecord > * this_ptr, int i, QDnsHostAddressRecord const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_replace(QList< QDnsMailExchangeRecord > * this_ptr, int i, QDnsMailExchangeRecord const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_replace(QList< QDnsServiceRecord > * this_ptr, int i, QDnsServiceRecord const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_replace(QList< QDnsTextRecord > * this_ptr, int i, QDnsTextRecord const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_replace(QList< QSslCertificateExtension > * this_ptr, int i, QSslCertificateExtension const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_replace(QList< QSslCertificate > * this_ptr, int i, QSslCertificate const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_replace(QList< QSslError > * this_ptr, int i, QSslError const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_replace(QList< QSslCipher > * this_ptr, int i, QSslCipher const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_replace(QList< QHostAddress > * this_ptr, int i, QHostAddress const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_replace(QList< QNetworkConfiguration > * this_ptr, int i, QNetworkConfiguration const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_replace(QList< QNetworkCookie > * this_ptr, int i, QNetworkCookie const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_replace(QList< QNetworkAddressEntry > * this_ptr, int i, QNetworkAddressEntry const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_replace(QList< QNetworkInterface > * this_ptr, int i, QNetworkInterface const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_replace(QList< QNetworkProxy > * this_ptr, int i, QNetworkProxy const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeAt(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeAt(QList< QDnsDomainNameRecord > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeAt(QList< QDnsHostAddressRecord > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeAt(QList< QDnsMailExchangeRecord > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_removeAt(QList< QDnsServiceRecord > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_removeAt(QList< QDnsTextRecord > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_removeAt(QList< QSslCertificateExtension > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_removeAt(QList< QSslCertificate > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_removeAt(QList< QSslError > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_removeAt(QList< QSslCipher > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_removeAt(QList< QHostAddress > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_removeAt(QList< QNetworkConfiguration > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_removeAt(QList< QNetworkCookie > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeAt(QList< QNetworkAddressEntry > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_removeAt(QList< QNetworkInterface > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_removeAt(QList< QNetworkProxy > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeAll(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_removeAll(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_removeAll(QList< QSslError > * this_ptr, QSslError const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_removeAll(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_removeAll(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_removeAll(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_removeAll(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeAll(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_removeAll(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeOne(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_removeOne(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_removeOne(QList< QSslError > * this_ptr, QSslError const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_removeOne(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_removeOne(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_removeOne(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_removeOne(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeOne(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_removeOne(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeAt(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i) {
  return new QPair< QByteArray, QByteArray >(this_ptr->takeAt(i));
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeAt(QList< QDnsDomainNameRecord > * this_ptr, int i) {
  return new QDnsDomainNameRecord(this_ptr->takeAt(i));
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeAt(QList< QDnsHostAddressRecord > * this_ptr, int i) {
  return new QDnsHostAddressRecord(this_ptr->takeAt(i));
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeAt(QList< QDnsMailExchangeRecord > * this_ptr, int i) {
  return new QDnsMailExchangeRecord(this_ptr->takeAt(i));
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_takeAt(QList< QDnsServiceRecord > * this_ptr, int i) {
  return new QDnsServiceRecord(this_ptr->takeAt(i));
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_takeAt(QList< QDnsTextRecord > * this_ptr, int i) {
  return new QDnsTextRecord(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_takeAt(QList< QSslCertificateExtension > * this_ptr, int i) {
  return new QSslCertificateExtension(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_takeAt(QList< QSslCertificate > * this_ptr, int i) {
  return new QSslCertificate(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_takeAt(QList< QSslError > * this_ptr, int i) {
  return new QSslError(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_takeAt(QList< QSslCipher > * this_ptr, int i) {
  return new QSslCipher(this_ptr->takeAt(i));
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_takeAt(QList< QHostAddress > * this_ptr, int i) {
  return new QHostAddress(this_ptr->takeAt(i));
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_takeAt(QList< QNetworkConfiguration > * this_ptr, int i) {
  return new QNetworkConfiguration(this_ptr->takeAt(i));
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_takeAt(QList< QNetworkCookie > * this_ptr, int i) {
  return new QNetworkCookie(this_ptr->takeAt(i));
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeAt(QList< QNetworkAddressEntry > * this_ptr, int i) {
  return new QNetworkAddressEntry(this_ptr->takeAt(i));
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_takeAt(QList< QNetworkInterface > * this_ptr, int i) {
  return new QNetworkInterface(this_ptr->takeAt(i));
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_takeAt(QList< QNetworkProxy > * this_ptr, int i) {
  return new QNetworkProxy(this_ptr->takeAt(i));
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeFirst(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return new QPair< QByteArray, QByteArray >(this_ptr->takeFirst());
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeFirst(QList< QDnsDomainNameRecord > * this_ptr) {
  return new QDnsDomainNameRecord(this_ptr->takeFirst());
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeFirst(QList< QDnsHostAddressRecord > * this_ptr) {
  return new QDnsHostAddressRecord(this_ptr->takeFirst());
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeFirst(QList< QDnsMailExchangeRecord > * this_ptr) {
  return new QDnsMailExchangeRecord(this_ptr->takeFirst());
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_takeFirst(QList< QDnsServiceRecord > * this_ptr) {
  return new QDnsServiceRecord(this_ptr->takeFirst());
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_takeFirst(QList< QDnsTextRecord > * this_ptr) {
  return new QDnsTextRecord(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_takeFirst(QList< QSslCertificateExtension > * this_ptr) {
  return new QSslCertificateExtension(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_takeFirst(QList< QSslCertificate > * this_ptr) {
  return new QSslCertificate(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_takeFirst(QList< QSslError > * this_ptr) {
  return new QSslError(this_ptr->takeFirst());
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_takeFirst(QList< QSslCipher > * this_ptr) {
  return new QSslCipher(this_ptr->takeFirst());
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_takeFirst(QList< QHostAddress > * this_ptr) {
  return new QHostAddress(this_ptr->takeFirst());
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_takeFirst(QList< QNetworkConfiguration > * this_ptr) {
  return new QNetworkConfiguration(this_ptr->takeFirst());
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_takeFirst(QList< QNetworkCookie > * this_ptr) {
  return new QNetworkCookie(this_ptr->takeFirst());
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeFirst(QList< QNetworkAddressEntry > * this_ptr) {
  return new QNetworkAddressEntry(this_ptr->takeFirst());
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_takeFirst(QList< QNetworkInterface > * this_ptr) {
  return new QNetworkInterface(this_ptr->takeFirst());
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_takeFirst(QList< QNetworkProxy > * this_ptr) {
  return new QNetworkProxy(this_ptr->takeFirst());
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeLast(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return new QPair< QByteArray, QByteArray >(this_ptr->takeLast());
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeLast(QList< QDnsDomainNameRecord > * this_ptr) {
  return new QDnsDomainNameRecord(this_ptr->takeLast());
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeLast(QList< QDnsHostAddressRecord > * this_ptr) {
  return new QDnsHostAddressRecord(this_ptr->takeLast());
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeLast(QList< QDnsMailExchangeRecord > * this_ptr) {
  return new QDnsMailExchangeRecord(this_ptr->takeLast());
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_takeLast(QList< QDnsServiceRecord > * this_ptr) {
  return new QDnsServiceRecord(this_ptr->takeLast());
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_takeLast(QList< QDnsTextRecord > * this_ptr) {
  return new QDnsTextRecord(this_ptr->takeLast());
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_takeLast(QList< QSslCertificateExtension > * this_ptr) {
  return new QSslCertificateExtension(this_ptr->takeLast());
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_takeLast(QList< QSslCertificate > * this_ptr) {
  return new QSslCertificate(this_ptr->takeLast());
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_takeLast(QList< QSslError > * this_ptr) {
  return new QSslError(this_ptr->takeLast());
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_takeLast(QList< QSslCipher > * this_ptr) {
  return new QSslCipher(this_ptr->takeLast());
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_takeLast(QList< QHostAddress > * this_ptr) {
  return new QHostAddress(this_ptr->takeLast());
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_takeLast(QList< QNetworkConfiguration > * this_ptr) {
  return new QNetworkConfiguration(this_ptr->takeLast());
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_takeLast(QList< QNetworkCookie > * this_ptr) {
  return new QNetworkCookie(this_ptr->takeLast());
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeLast(QList< QNetworkAddressEntry > * this_ptr) {
  return new QNetworkAddressEntry(this_ptr->takeLast());
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_takeLast(QList< QNetworkInterface > * this_ptr) {
  return new QNetworkInterface(this_ptr->takeLast());
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_takeLast(QList< QNetworkProxy > * this_ptr) {
  return new QNetworkProxy(this_ptr->takeLast());
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_move(QList< QPair< QByteArray, QByteArray > > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_move(QList< QDnsDomainNameRecord > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_move(QList< QDnsHostAddressRecord > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_move(QList< QDnsMailExchangeRecord > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_move(QList< QDnsServiceRecord > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_move(QList< QDnsTextRecord > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_move(QList< QSslCertificateExtension > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_move(QList< QSslCertificate > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_move(QList< QSslError > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_move(QList< QSslCipher > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_move(QList< QHostAddress > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_move(QList< QNetworkConfiguration > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_move(QList< QNetworkCookie > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_move(QList< QNetworkAddressEntry > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_move(QList< QNetworkInterface > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_move(QList< QNetworkProxy > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swapItemsAt(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swapItemsAt(QList< QDnsDomainNameRecord > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swapItemsAt(QList< QDnsHostAddressRecord > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swapItemsAt(QList< QDnsMailExchangeRecord > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_swapItemsAt(QList< QDnsServiceRecord > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_swapItemsAt(QList< QDnsTextRecord > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_swapItemsAt(QList< QSslCertificateExtension > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_swapItemsAt(QList< QSslCertificate > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_swapItemsAt(QList< QSslError > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_swapItemsAt(QList< QSslCipher > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_swapItemsAt(QList< QHostAddress > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_swapItemsAt(QList< QNetworkConfiguration > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_swapItemsAt(QList< QNetworkCookie > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_swapItemsAt(QList< QNetworkAddressEntry > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_swapItemsAt(QList< QNetworkInterface > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_swapItemsAt(QList< QNetworkProxy > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swap1(QList< QPair< QByteArray, QByteArray > > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swap1(QList< QDnsDomainNameRecord > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swap1(QList< QDnsHostAddressRecord > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swap1(QList< QDnsMailExchangeRecord > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_swap1(QList< QDnsServiceRecord > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_swap1(QList< QDnsTextRecord > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_swap1(QList< QSslCertificateExtension > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_swap1(QList< QSslCertificate > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_swap1(QList< QSslError > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_swap1(QList< QSslCipher > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_swap1(QList< QHostAddress > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_swap1(QList< QNetworkConfiguration > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_swap1(QList< QNetworkCookie > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_swap1(QList< QNetworkAddressEntry > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_swap1(QList< QNetworkInterface > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_swap1(QList< QNetworkProxy > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_indexOf(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_indexOf(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_indexOf(QList< QSslError > const * this_ptr, QSslError const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_indexOf(QList< QSslCipher > const * this_ptr, QSslCipher const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_indexOf(QList< QHostAddress > const * this_ptr, QHostAddress const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_indexOf(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_indexOf(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_indexOf(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_indexOf(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_lastIndexOf(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_lastIndexOf(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_lastIndexOf(QList< QSslError > const * this_ptr, QSslError const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_lastIndexOf(QList< QSslCipher > const * this_ptr, QSslCipher const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_lastIndexOf(QList< QHostAddress > const * this_ptr, QHostAddress const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_lastIndexOf(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_lastIndexOf(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_lastIndexOf(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_lastIndexOf(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_contains(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_contains(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_contains(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_contains(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_contains(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_contains(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_contains(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_contains(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_contains(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_count(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_count(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_count(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_count(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_count(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_count(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_count(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_count(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_count(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_iterator() {
  return new QList< QPair< QByteArray, QByteArray > >::iterator();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_iterator() {
  return new QList< QDnsDomainNameRecord >::iterator();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_iterator() {
  return new QList< QDnsHostAddressRecord >::iterator();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_iterator() {
  return new QList< QDnsMailExchangeRecord >::iterator();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_iterator() {
  return new QList< QDnsServiceRecord >::iterator();
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_iterator() {
  return new QList< QDnsTextRecord >::iterator();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_iterator() {
  return new QList< QSslCertificateExtension >::iterator();
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_iterator() {
  return new QList< QSslCertificate >::iterator();
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_iterator() {
  return new QList< QSslError >::iterator();
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_iterator() {
  return new QList< QSslCipher >::iterator();
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_iterator() {
  return new QList< QHostAddress >::iterator();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_iterator() {
  return new QList< QNetworkConfiguration >::iterator();
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_iterator() {
  return new QList< QNetworkCookie >::iterator();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_iterator() {
  return new QList< QNetworkAddressEntry >::iterator();
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_iterator() {
  return new QList< QNetworkInterface >::iterator();
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_iterator() {
  return new QList< QNetworkProxy >::iterator();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_iterator1(QList< QPair< QByteArray, QByteArray > >::iterator const * o) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(*o);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_iterator1(QList< QDnsDomainNameRecord >::iterator const * o) {
  return new QList< QDnsDomainNameRecord >::iterator(*o);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_iterator1(QList< QDnsHostAddressRecord >::iterator const * o) {
  return new QList< QDnsHostAddressRecord >::iterator(*o);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_iterator1(QList< QDnsMailExchangeRecord >::iterator const * o) {
  return new QList< QDnsMailExchangeRecord >::iterator(*o);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_iterator1(QList< QDnsServiceRecord >::iterator const * o) {
  return new QList< QDnsServiceRecord >::iterator(*o);
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_iterator1(QList< QDnsTextRecord >::iterator const * o) {
  return new QList< QDnsTextRecord >::iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_iterator1(QList< QSslCertificateExtension >::iterator const * o) {
  return new QList< QSslCertificateExtension >::iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_iterator1(QList< QSslCertificate >::iterator const * o) {
  return new QList< QSslCertificate >::iterator(*o);
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_iterator1(QList< QSslError >::iterator const * o) {
  return new QList< QSslError >::iterator(*o);
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_iterator1(QList< QSslCipher >::iterator const * o) {
  return new QList< QSslCipher >::iterator(*o);
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_iterator1(QList< QHostAddress >::iterator const * o) {
  return new QList< QHostAddress >::iterator(*o);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_iterator1(QList< QNetworkConfiguration >::iterator const * o) {
  return new QList< QNetworkConfiguration >::iterator(*o);
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_iterator1(QList< QNetworkCookie >::iterator const * o) {
  return new QList< QNetworkCookie >::iterator(*o);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_iterator1(QList< QNetworkAddressEntry >::iterator const * o) {
  return new QList< QNetworkAddressEntry >::iterator(*o);
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_iterator1(QList< QNetworkInterface >::iterator const * o) {
  return new QList< QNetworkInterface >::iterator(*o);
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_iterator1(QList< QNetworkProxy >::iterator const * o) {
  return new QList< QNetworkProxy >::iterator(*o);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_(QList< QDnsDomainNameRecord >::iterator * this_ptr, QList< QDnsDomainNameRecord >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_(QList< QDnsHostAddressRecord >::iterator * this_ptr, QList< QDnsHostAddressRecord >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_(QList< QDnsMailExchangeRecord >::iterator * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_(QList< QDnsServiceRecord >::iterator * this_ptr, QList< QDnsServiceRecord >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_(QList< QDnsTextRecord >::iterator * this_ptr, QList< QDnsTextRecord >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_(QList< QSslCertificateExtension >::iterator * this_ptr, QList< QSslCertificateExtension >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_(QList< QSslCertificate >::iterator * this_ptr, QList< QSslCertificate >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator_(QList< QSslError >::iterator * this_ptr, QList< QSslError >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_(QList< QSslCipher >::iterator * this_ptr, QList< QSslCipher >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_(QList< QHostAddress >::iterator * this_ptr, QList< QHostAddress >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_(QList< QNetworkConfiguration >::iterator * this_ptr, QList< QNetworkConfiguration >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_(QList< QNetworkCookie >::iterator * this_ptr, QList< QNetworkCookie >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_(QList< QNetworkAddressEntry >::iterator * this_ptr, QList< QNetworkAddressEntry >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_(QList< QNetworkInterface >::iterator * this_ptr, QList< QNetworkInterface >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_(QList< QNetworkProxy >::iterator * this_ptr, QList< QNetworkProxy >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_1(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_1(QList< QDnsDomainNameRecord >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_1(QList< QDnsHostAddressRecord >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_1(QList< QDnsMailExchangeRecord >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_1(QList< QDnsServiceRecord >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_1(QList< QDnsTextRecord >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_1(QList< QSslCertificateExtension >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_1(QList< QSslCertificate >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_iterator_operator_1(QList< QSslError >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_1(QList< QSslCipher >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_1(QList< QHostAddress >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_1(QList< QNetworkConfiguration >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_1(QList< QNetworkCookie >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_1(QList< QNetworkAddressEntry >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_1(QList< QNetworkInterface >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_1(QList< QNetworkProxy >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__(QList< QDnsDomainNameRecord >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__(QList< QDnsHostAddressRecord >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__(QList< QDnsMailExchangeRecord >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__(QList< QDnsServiceRecord >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__(QList< QDnsTextRecord >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__(QList< QSslCertificateExtension >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__(QList< QSslCertificate >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_iterator_operator__(QList< QSslError >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__(QList< QSslCipher >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__(QList< QHostAddress >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__(QList< QNetworkConfiguration >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__(QList< QNetworkCookie >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__(QList< QNetworkAddressEntry >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__(QList< QNetworkInterface >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__(QList< QNetworkProxy >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__1(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__1(QList< QDnsDomainNameRecord >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__1(QList< QDnsHostAddressRecord >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__1(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__1(QList< QDnsServiceRecord >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__1(QList< QDnsTextRecord >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__1(QList< QSslCertificateExtension >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__1(QList< QSslCertificate >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_iterator_operator__1(QList< QSslError >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__1(QList< QSslCipher >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__1(QList< QHostAddress >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__1(QList< QNetworkConfiguration >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__1(QList< QNetworkCookie >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__1(QList< QNetworkAddressEntry >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__1(QList< QNetworkInterface >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__1(QList< QNetworkProxy >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__2(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__2(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__2(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__2(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__2(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__2(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__2(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__2(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__2(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__2(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__2(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__2(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__2(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__2(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__2(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__2(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_2(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_2(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_2(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_2(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_2(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_2(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_2(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_2(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator_2(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_2(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_2(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_2(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_2(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_2(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_2(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_2(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__4(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__4(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__4(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__4(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__4(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__4(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__4(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__4(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__4(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__4(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__4(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__4(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__4(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__4(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__4(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__4(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_3(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_3(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_3(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_3(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_3(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_3(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_3(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_3(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator_3(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_3(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_3(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_3(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_3(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_3(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_3(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_3(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__5(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__5(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__5(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__5(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__5(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__5(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__5(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__5(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__5(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__5(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__5(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__5(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__5(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__5(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__5(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__5(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__6(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__6(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__6(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__6(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__6(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__6(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__6(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__6(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__6(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__6(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__6(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__6(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__6(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__6(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__6(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__6(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_4(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_4(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_4(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_4(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_4(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_4(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_4(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_4(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator_4(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_4(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_4(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_4(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_4(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_4(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_4(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_4(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__8(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__8(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__8(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__8(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__8(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__8(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__8(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__8(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__8(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__8(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__8(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__8(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__8(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__8(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__8(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__8(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_5(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_5(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_5(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_5(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_5(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_5(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_5(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_5(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator_5(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_5(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_5(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_5(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_5(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_5(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_5(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_5(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__9(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__9(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__9(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__9(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__9(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__9(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__9(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__9(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_iterator_operator__9(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__9(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__9(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__9(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__9(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__9(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__9(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__9(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__10(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__10(QList< QDnsDomainNameRecord >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__10(QList< QDnsHostAddressRecord >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__10(QList< QDnsMailExchangeRecord >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__10(QList< QDnsServiceRecord >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__10(QList< QDnsTextRecord >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__10(QList< QSslCertificateExtension >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__10(QList< QSslCertificate >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__10(QList< QSslError >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__10(QList< QSslCipher >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__10(QList< QHostAddress >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__10(QList< QNetworkConfiguration >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__10(QList< QNetworkCookie >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__10(QList< QNetworkAddressEntry >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__10(QList< QNetworkInterface >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__10(QList< QNetworkProxy >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__11(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr, int arg1) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__11(QList< QDnsDomainNameRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__11(QList< QDnsHostAddressRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__11(QList< QDnsMailExchangeRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__11(QList< QDnsServiceRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__11(QList< QDnsTextRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__11(QList< QSslCertificateExtension >::iterator * this_ptr, int arg1) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__11(QList< QSslCertificate >::iterator * this_ptr, int arg1) {
  return new QList< QSslCertificate >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__11(QList< QSslError >::iterator * this_ptr, int arg1) {
  return new QList< QSslError >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__11(QList< QSslCipher >::iterator * this_ptr, int arg1) {
  return new QList< QSslCipher >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__11(QList< QHostAddress >::iterator * this_ptr, int arg1) {
  return new QList< QHostAddress >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__11(QList< QNetworkConfiguration >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__11(QList< QNetworkCookie >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkCookie >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__11(QList< QNetworkAddressEntry >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__11(QList< QNetworkInterface >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkInterface >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__11(QList< QNetworkProxy >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkProxy >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__12(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__12(QList< QDnsDomainNameRecord >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__12(QList< QDnsHostAddressRecord >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__12(QList< QDnsMailExchangeRecord >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__12(QList< QDnsServiceRecord >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__12(QList< QDnsTextRecord >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__12(QList< QSslCertificateExtension >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__12(QList< QSslCertificate >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__12(QList< QSslError >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__12(QList< QSslCipher >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__12(QList< QHostAddress >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__12(QList< QNetworkConfiguration >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__12(QList< QNetworkCookie >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__12(QList< QNetworkAddressEntry >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__12(QList< QNetworkInterface >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__12(QList< QNetworkProxy >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__13(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr, int arg1) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__13(QList< QDnsDomainNameRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__13(QList< QDnsHostAddressRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__13(QList< QDnsMailExchangeRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__13(QList< QDnsServiceRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__13(QList< QDnsTextRecord >::iterator * this_ptr, int arg1) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__13(QList< QSslCertificateExtension >::iterator * this_ptr, int arg1) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__13(QList< QSslCertificate >::iterator * this_ptr, int arg1) {
  return new QList< QSslCertificate >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__13(QList< QSslError >::iterator * this_ptr, int arg1) {
  return new QList< QSslError >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__13(QList< QSslCipher >::iterator * this_ptr, int arg1) {
  return new QList< QSslCipher >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__13(QList< QHostAddress >::iterator * this_ptr, int arg1) {
  return new QList< QHostAddress >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__13(QList< QNetworkConfiguration >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__13(QList< QNetworkCookie >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkCookie >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__13(QList< QNetworkAddressEntry >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__13(QList< QNetworkInterface >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkInterface >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__13(QList< QNetworkProxy >::iterator * this_ptr, int arg1) {
  return new QList< QNetworkProxy >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__14(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__14(QList< QDnsDomainNameRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__14(QList< QDnsHostAddressRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__14(QList< QDnsMailExchangeRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__14(QList< QDnsServiceRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__14(QList< QDnsTextRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__14(QList< QSslCertificateExtension >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__14(QList< QSslCertificate >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__14(QList< QSslError >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__14(QList< QSslCipher >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__14(QList< QHostAddress >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__14(QList< QNetworkConfiguration >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__14(QList< QNetworkCookie >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__14(QList< QNetworkAddressEntry >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__14(QList< QNetworkInterface >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__14(QList< QNetworkProxy >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__15(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__15(QList< QDnsDomainNameRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__15(QList< QDnsHostAddressRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__15(QList< QDnsMailExchangeRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__15(QList< QDnsServiceRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__15(QList< QDnsTextRecord >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__15(QList< QSslCertificateExtension >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__15(QList< QSslCertificate >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator__15(QList< QSslError >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__15(QList< QSslCipher >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__15(QList< QHostAddress >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__15(QList< QNetworkConfiguration >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__15(QList< QNetworkCookie >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__15(QList< QNetworkAddressEntry >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__15(QList< QNetworkInterface >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__15(QList< QNetworkProxy >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_6(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, long long j) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_6(QList< QDnsDomainNameRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_6(QList< QDnsHostAddressRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_6(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_6(QList< QDnsServiceRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_6(QList< QDnsTextRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_6(QList< QSslCertificateExtension >::iterator const * this_ptr, long long j) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_6(QList< QSslCertificate >::iterator const * this_ptr, long long j) {
  return new QList< QSslCertificate >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator_6(QList< QSslError >::iterator const * this_ptr, long long j) {
  return new QList< QSslError >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_6(QList< QSslCipher >::iterator const * this_ptr, long long j) {
  return new QList< QSslCipher >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_6(QList< QHostAddress >::iterator const * this_ptr, long long j) {
  return new QList< QHostAddress >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_6(QList< QNetworkConfiguration >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_6(QList< QNetworkCookie >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkCookie >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_6(QList< QNetworkAddressEntry >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_6(QList< QNetworkInterface >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkInterface >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_6(QList< QNetworkProxy >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkProxy >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_7(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, long long j) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_7(QList< QDnsDomainNameRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_7(QList< QDnsHostAddressRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_7(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_7(QList< QDnsServiceRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_7(QList< QDnsTextRecord >::iterator const * this_ptr, long long j) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_7(QList< QSslCertificateExtension >::iterator const * this_ptr, long long j) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_7(QList< QSslCertificate >::iterator const * this_ptr, long long j) {
  return new QList< QSslCertificate >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_iterator_operator_7(QList< QSslError >::iterator const * this_ptr, long long j) {
  return new QList< QSslError >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_7(QList< QSslCipher >::iterator const * this_ptr, long long j) {
  return new QList< QSslCipher >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_7(QList< QHostAddress >::iterator const * this_ptr, long long j) {
  return new QList< QHostAddress >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_7(QList< QNetworkConfiguration >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_7(QList< QNetworkCookie >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkCookie >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_7(QList< QNetworkAddressEntry >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_7(QList< QNetworkInterface >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkInterface >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_7(QList< QNetworkProxy >::iterator const * this_ptr, long long j) {
  return new QList< QNetworkProxy >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_8(QList< QPair< QByteArray, QByteArray > >::iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_8(QList< QDnsDomainNameRecord >::iterator const * this_ptr, QList< QDnsDomainNameRecord >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_8(QList< QDnsHostAddressRecord >::iterator const * this_ptr, QList< QDnsHostAddressRecord >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_8(QList< QDnsMailExchangeRecord >::iterator const * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_8(QList< QDnsServiceRecord >::iterator const * this_ptr, QList< QDnsServiceRecord >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_8(QList< QDnsTextRecord >::iterator const * this_ptr, QList< QDnsTextRecord >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_8(QList< QSslCertificateExtension >::iterator const * this_ptr, QList< QSslCertificateExtension >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_8(QList< QSslCertificate >::iterator const * this_ptr, QList< QSslCertificate >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_iterator_operator_8(QList< QSslError >::iterator const * this_ptr, QList< QSslError >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_8(QList< QSslCipher >::iterator const * this_ptr, QList< QSslCipher >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_8(QList< QHostAddress >::iterator const * this_ptr, QList< QHostAddress >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_8(QList< QNetworkConfiguration >::iterator const * this_ptr, QList< QNetworkConfiguration >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_8(QList< QNetworkCookie >::iterator const * this_ptr, QList< QNetworkCookie >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_8(QList< QNetworkAddressEntry >::iterator const * this_ptr, QList< QNetworkAddressEntry >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_8(QList< QNetworkInterface >::iterator const * this_ptr, QList< QNetworkInterface >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_8(QList< QNetworkProxy >::iterator const * this_ptr, QList< QNetworkProxy >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator() {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator() {
  return new QList< QDnsDomainNameRecord >::const_iterator();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator() {
  return new QList< QDnsHostAddressRecord >::const_iterator();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator() {
  return new QList< QDnsMailExchangeRecord >::const_iterator();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator() {
  return new QList< QDnsServiceRecord >::const_iterator();
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator() {
  return new QList< QDnsTextRecord >::const_iterator();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator() {
  return new QList< QSslCertificateExtension >::const_iterator();
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator() {
  return new QList< QSslCertificate >::const_iterator();
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator() {
  return new QList< QSslError >::const_iterator();
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator() {
  return new QList< QSslCipher >::const_iterator();
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator() {
  return new QList< QHostAddress >::const_iterator();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator() {
  return new QList< QNetworkConfiguration >::const_iterator();
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator() {
  return new QList< QNetworkCookie >::const_iterator();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator() {
  return new QList< QNetworkAddressEntry >::const_iterator();
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator() {
  return new QList< QNetworkInterface >::const_iterator();
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator() {
  return new QList< QNetworkProxy >::const_iterator();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator1(QList< QPair< QByteArray, QByteArray > >::const_iterator const * o) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator1(QList< QDnsDomainNameRecord >::const_iterator const * o) {
  return new QList< QDnsDomainNameRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator1(QList< QDnsHostAddressRecord >::const_iterator const * o) {
  return new QList< QDnsHostAddressRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator1(QList< QDnsMailExchangeRecord >::const_iterator const * o) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator1(QList< QDnsServiceRecord >::const_iterator const * o) {
  return new QList< QDnsServiceRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator1(QList< QDnsTextRecord >::const_iterator const * o) {
  return new QList< QDnsTextRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator1(QList< QSslCertificateExtension >::const_iterator const * o) {
  return new QList< QSslCertificateExtension >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator1(QList< QSslCertificate >::const_iterator const * o) {
  return new QList< QSslCertificate >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator1(QList< QSslError >::const_iterator const * o) {
  return new QList< QSslError >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator1(QList< QSslCipher >::const_iterator const * o) {
  return new QList< QSslCipher >::const_iterator(*o);
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator1(QList< QHostAddress >::const_iterator const * o) {
  return new QList< QHostAddress >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator1(QList< QNetworkConfiguration >::const_iterator const * o) {
  return new QList< QNetworkConfiguration >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator1(QList< QNetworkCookie >::const_iterator const * o) {
  return new QList< QNetworkCookie >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator1(QList< QNetworkAddressEntry >::const_iterator const * o) {
  return new QList< QNetworkAddressEntry >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator1(QList< QNetworkInterface >::const_iterator const * o) {
  return new QList< QNetworkInterface >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator1(QList< QNetworkProxy >::const_iterator const * o) {
  return new QList< QNetworkProxy >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_(QList< QDnsDomainNameRecord >::const_iterator * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_(QList< QDnsHostAddressRecord >::const_iterator * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_(QList< QDnsServiceRecord >::const_iterator * this_ptr, QList< QDnsServiceRecord >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_(QList< QDnsTextRecord >::const_iterator * this_ptr, QList< QDnsTextRecord >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_(QList< QSslCertificateExtension >::const_iterator * this_ptr, QList< QSslCertificateExtension >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_(QList< QSslCertificate >::const_iterator * this_ptr, QList< QSslCertificate >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_(QList< QSslError >::const_iterator * this_ptr, QList< QSslError >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_(QList< QSslCipher >::const_iterator * this_ptr, QList< QSslCipher >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_(QList< QHostAddress >::const_iterator * this_ptr, QList< QHostAddress >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_(QList< QNetworkConfiguration >::const_iterator * this_ptr, QList< QNetworkConfiguration >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_(QList< QNetworkCookie >::const_iterator * this_ptr, QList< QNetworkCookie >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_(QList< QNetworkAddressEntry >::const_iterator * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_(QList< QNetworkInterface >::const_iterator * this_ptr, QList< QNetworkInterface >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_(QList< QNetworkProxy >::const_iterator * this_ptr, QList< QNetworkProxy >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator2(QList< QPair< QByteArray, QByteArray > >::iterator const * o) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator2(QList< QDnsDomainNameRecord >::iterator const * o) {
  return new QList< QDnsDomainNameRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator2(QList< QDnsHostAddressRecord >::iterator const * o) {
  return new QList< QDnsHostAddressRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator2(QList< QDnsMailExchangeRecord >::iterator const * o) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator2(QList< QDnsServiceRecord >::iterator const * o) {
  return new QList< QDnsServiceRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator2(QList< QDnsTextRecord >::iterator const * o) {
  return new QList< QDnsTextRecord >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator2(QList< QSslCertificateExtension >::iterator const * o) {
  return new QList< QSslCertificateExtension >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator2(QList< QSslCertificate >::iterator const * o) {
  return new QList< QSslCertificate >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator2(QList< QSslError >::iterator const * o) {
  return new QList< QSslError >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator2(QList< QSslCipher >::iterator const * o) {
  return new QList< QSslCipher >::const_iterator(*o);
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator2(QList< QHostAddress >::iterator const * o) {
  return new QList< QHostAddress >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator2(QList< QNetworkConfiguration >::iterator const * o) {
  return new QList< QNetworkConfiguration >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator2(QList< QNetworkCookie >::iterator const * o) {
  return new QList< QNetworkCookie >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator2(QList< QNetworkAddressEntry >::iterator const * o) {
  return new QList< QNetworkAddressEntry >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator2(QList< QNetworkInterface >::iterator const * o) {
  return new QList< QNetworkInterface >::const_iterator(*o);
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator2(QList< QNetworkProxy >::iterator const * o) {
  return new QList< QNetworkProxy >::const_iterator(*o);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_1(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_1(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_1(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_1(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_1(QList< QDnsServiceRecord >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_1(QList< QDnsTextRecord >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_1(QList< QSslCertificateExtension >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_1(QList< QSslCertificate >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_1(QList< QSslError >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_1(QList< QSslCipher >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_1(QList< QHostAddress >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_1(QList< QNetworkConfiguration >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_1(QList< QNetworkCookie >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_1(QList< QNetworkAddressEntry >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_1(QList< QNetworkInterface >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_1(QList< QNetworkProxy >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__(QList< QDnsServiceRecord >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__(QList< QDnsTextRecord >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__(QList< QSslCertificateExtension >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__(QList< QSslCertificate >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__(QList< QSslError >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__(QList< QSslCipher >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__(QList< QHostAddress >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__(QList< QNetworkConfiguration >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__(QList< QNetworkCookie >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__(QList< QNetworkAddressEntry >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__(QList< QNetworkInterface >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__(QList< QNetworkProxy >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__1(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__1(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__1(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__1(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__1(QList< QDnsServiceRecord >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__1(QList< QDnsTextRecord >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__1(QList< QSslCertificateExtension >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__1(QList< QSslCertificate >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__1(QList< QSslError >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__1(QList< QSslCipher >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__1(QList< QHostAddress >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__1(QList< QNetworkConfiguration >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__1(QList< QNetworkCookie >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__1(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__1(QList< QNetworkInterface >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__1(QList< QNetworkProxy >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__2(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__2(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__2(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__2(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__2(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__2(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__2(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__2(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__2(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__2(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__2(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__2(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__2(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__2(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__2(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__2(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_2(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_2(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_2(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_2(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_2(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_2(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_2(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_2(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_2(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_2(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_2(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_2(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_2(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_2(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_2(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_2(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__4(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__4(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__4(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__4(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__4(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__4(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__4(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__4(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__4(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__4(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__4(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__4(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__4(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__4(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__4(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__4(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_3(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_3(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_3(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_3(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_3(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_3(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_3(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_3(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_3(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_3(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_3(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_3(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_3(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_3(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_3(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_3(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__5(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__5(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__5(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__5(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__5(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__5(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__5(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__5(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__5(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__5(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__5(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__5(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__5(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__5(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__5(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__5(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__6(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__6(QList< QDnsDomainNameRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__6(QList< QDnsHostAddressRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__6(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__6(QList< QDnsServiceRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__6(QList< QDnsTextRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__6(QList< QSslCertificateExtension >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__6(QList< QSslCertificate >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__6(QList< QSslError >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__6(QList< QSslCipher >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__6(QList< QHostAddress >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__6(QList< QNetworkConfiguration >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__6(QList< QNetworkCookie >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__6(QList< QNetworkAddressEntry >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__6(QList< QNetworkInterface >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__6(QList< QNetworkProxy >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__7(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr, int arg1) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__7(QList< QDnsDomainNameRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__7(QList< QDnsHostAddressRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__7(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__7(QList< QDnsServiceRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__7(QList< QDnsTextRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__7(QList< QSslCertificateExtension >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__7(QList< QSslCertificate >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__7(QList< QSslError >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslError >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__7(QList< QSslCipher >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCipher >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__7(QList< QHostAddress >::const_iterator * this_ptr, int arg1) {
  return new QList< QHostAddress >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__7(QList< QNetworkConfiguration >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__7(QList< QNetworkCookie >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__7(QList< QNetworkAddressEntry >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__7(QList< QNetworkInterface >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__7(QList< QNetworkProxy >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__8(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__8(QList< QDnsDomainNameRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__8(QList< QDnsHostAddressRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__8(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__8(QList< QDnsServiceRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__8(QList< QDnsTextRecord >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__8(QList< QSslCertificateExtension >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__8(QList< QSslCertificate >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__8(QList< QSslError >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__8(QList< QSslCipher >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__8(QList< QHostAddress >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__8(QList< QNetworkConfiguration >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__8(QList< QNetworkCookie >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__8(QList< QNetworkAddressEntry >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__8(QList< QNetworkInterface >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__8(QList< QNetworkProxy >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__9(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr, int arg1) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__9(QList< QDnsDomainNameRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__9(QList< QDnsHostAddressRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__9(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__9(QList< QDnsServiceRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__9(QList< QDnsTextRecord >::const_iterator * this_ptr, int arg1) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__9(QList< QSslCertificateExtension >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__9(QList< QSslCertificate >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__9(QList< QSslError >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslError >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__9(QList< QSslCipher >::const_iterator * this_ptr, int arg1) {
  return new QList< QSslCipher >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__9(QList< QHostAddress >::const_iterator * this_ptr, int arg1) {
  return new QList< QHostAddress >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__9(QList< QNetworkConfiguration >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__9(QList< QNetworkCookie >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__9(QList< QNetworkAddressEntry >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__9(QList< QNetworkInterface >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__9(QList< QNetworkProxy >::const_iterator * this_ptr, int arg1) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__10(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__10(QList< QDnsDomainNameRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__10(QList< QDnsHostAddressRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__10(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__10(QList< QDnsServiceRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__10(QList< QDnsTextRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__10(QList< QSslCertificateExtension >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__10(QList< QSslCertificate >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__10(QList< QSslError >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__10(QList< QSslCipher >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__10(QList< QHostAddress >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__10(QList< QNetworkConfiguration >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__10(QList< QNetworkCookie >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__10(QList< QNetworkAddressEntry >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__10(QList< QNetworkInterface >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__10(QList< QNetworkProxy >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__11(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__11(QList< QDnsDomainNameRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__11(QList< QDnsHostAddressRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__11(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__11(QList< QDnsServiceRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__11(QList< QDnsTextRecord >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__11(QList< QSslCertificateExtension >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__11(QList< QSslCertificate >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__11(QList< QSslError >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__11(QList< QSslCipher >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__11(QList< QHostAddress >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__11(QList< QNetworkConfiguration >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__11(QList< QNetworkCookie >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__11(QList< QNetworkAddressEntry >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__11(QList< QNetworkInterface >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__11(QList< QNetworkProxy >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_4(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, long long j) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_4(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_4(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_4(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_4(QList< QDnsServiceRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_4(QList< QDnsTextRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_4(QList< QSslCertificateExtension >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_4(QList< QSslCertificate >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_4(QList< QSslError >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslError >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_4(QList< QSslCipher >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCipher >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_4(QList< QHostAddress >::const_iterator const * this_ptr, long long j) {
  return new QList< QHostAddress >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_4(QList< QNetworkConfiguration >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_4(QList< QNetworkCookie >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_4(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_4(QList< QNetworkInterface >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_4(QList< QNetworkProxy >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_5(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, long long j) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_5(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_5(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_5(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_5(QList< QDnsServiceRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_5(QList< QDnsTextRecord >::const_iterator const * this_ptr, long long j) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_5(QList< QSslCertificateExtension >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_5(QList< QSslCertificate >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_5(QList< QSslError >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslError >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_5(QList< QSslCipher >::const_iterator const * this_ptr, long long j) {
  return new QList< QSslCipher >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_5(QList< QHostAddress >::const_iterator const * this_ptr, long long j) {
  return new QList< QHostAddress >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_5(QList< QNetworkConfiguration >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_5(QList< QNetworkCookie >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_5(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_5(QList< QNetworkInterface >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_5(QList< QNetworkProxy >::const_iterator const * this_ptr, long long j) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_6(QList< QPair< QByteArray, QByteArray > >::const_iterator const * this_ptr, QList< QPair< QByteArray, QByteArray > >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_6(QList< QDnsDomainNameRecord >::const_iterator const * this_ptr, QList< QDnsDomainNameRecord >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_6(QList< QDnsHostAddressRecord >::const_iterator const * this_ptr, QList< QDnsHostAddressRecord >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_6(QList< QDnsMailExchangeRecord >::const_iterator const * this_ptr, QList< QDnsMailExchangeRecord >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_6(QList< QDnsServiceRecord >::const_iterator const * this_ptr, QList< QDnsServiceRecord >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_6(QList< QDnsTextRecord >::const_iterator const * this_ptr, QList< QDnsTextRecord >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_6(QList< QSslCertificateExtension >::const_iterator const * this_ptr, QList< QSslCertificateExtension >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_6(QList< QSslCertificate >::const_iterator const * this_ptr, QList< QSslCertificate >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_6(QList< QSslError >::const_iterator const * this_ptr, QList< QSslError >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_6(QList< QSslCipher >::const_iterator const * this_ptr, QList< QSslCipher >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_6(QList< QHostAddress >::const_iterator const * this_ptr, QList< QHostAddress >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_6(QList< QNetworkConfiguration >::const_iterator const * this_ptr, QList< QNetworkConfiguration >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_6(QList< QNetworkCookie >::const_iterator const * this_ptr, QList< QNetworkCookie >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_6(QList< QNetworkAddressEntry >::const_iterator const * this_ptr, QList< QNetworkAddressEntry >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_6(QList< QNetworkInterface >::const_iterator const * this_ptr, QList< QNetworkInterface >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_6(QList< QNetworkProxy >::const_iterator const * this_ptr, QList< QNetworkProxy >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_begin(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_begin(QList< QDnsDomainNameRecord > * this_ptr) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_begin(QList< QDnsHostAddressRecord > * this_ptr) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_begin(QList< QDnsMailExchangeRecord > * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_begin(QList< QDnsServiceRecord > * this_ptr) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_begin(QList< QDnsTextRecord > * this_ptr) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_begin(QList< QSslCertificateExtension > * this_ptr) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_begin(QList< QSslCertificate > * this_ptr) {
  return new QList< QSslCertificate >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_begin(QList< QSslError > * this_ptr) {
  return new QList< QSslError >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_begin(QList< QSslCipher > * this_ptr) {
  return new QList< QSslCipher >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_begin(QList< QHostAddress > * this_ptr) {
  return new QList< QHostAddress >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_begin(QList< QNetworkConfiguration > * this_ptr) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_begin(QList< QNetworkCookie > * this_ptr) {
  return new QList< QNetworkCookie >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_begin(QList< QNetworkAddressEntry > * this_ptr) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_begin(QList< QNetworkInterface > * this_ptr) {
  return new QList< QNetworkInterface >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_begin(QList< QNetworkProxy > * this_ptr) {
  return new QList< QNetworkProxy >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_begin1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_begin1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_begin1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_begin1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_begin1(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_begin1(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_begin1(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_begin1(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_begin1(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_begin1(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_begin1(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_begin1(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_begin1(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_begin1(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_begin1(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_begin1(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_cbegin(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_cbegin(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_cbegin(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_cbegin(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_cbegin(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_cbegin(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_cbegin(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_cbegin(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_cbegin(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_cbegin(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_cbegin(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_cbegin(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_cbegin(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_cbegin(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_cbegin(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_cbegin(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constBegin(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constBegin(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constBegin(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constBegin(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_constBegin(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_constBegin(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_constBegin(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_constBegin(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_constBegin(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_constBegin(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_constBegin(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_constBegin(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_constBegin(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_constBegin(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_constBegin(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_constBegin(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_end(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_end(QList< QDnsDomainNameRecord > * this_ptr) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_end(QList< QDnsHostAddressRecord > * this_ptr) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_end(QList< QDnsMailExchangeRecord > * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_end(QList< QDnsServiceRecord > * this_ptr) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_end(QList< QDnsTextRecord > * this_ptr) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_end(QList< QSslCertificateExtension > * this_ptr) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_end(QList< QSslCertificate > * this_ptr) {
  return new QList< QSslCertificate >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_end(QList< QSslError > * this_ptr) {
  return new QList< QSslError >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_end(QList< QSslCipher > * this_ptr) {
  return new QList< QSslCipher >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_end(QList< QHostAddress > * this_ptr) {
  return new QList< QHostAddress >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_end(QList< QNetworkConfiguration > * this_ptr) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_end(QList< QNetworkCookie > * this_ptr) {
  return new QList< QNetworkCookie >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_end(QList< QNetworkAddressEntry > * this_ptr) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_end(QList< QNetworkInterface > * this_ptr) {
  return new QList< QNetworkInterface >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_end(QList< QNetworkProxy > * this_ptr) {
  return new QList< QNetworkProxy >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_end1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_end1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_end1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_end1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_end1(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_end1(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_end1(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_end1(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_end1(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_end1(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_end1(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_end1(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_end1(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_end1(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_end1(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_end1(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_cend(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_cend(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_cend(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_cend(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_cend(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_cend(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_cend(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_cend(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_cend(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_cend(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_cend(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_cend(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_cend(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_cend(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_cend(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_cend(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::const_iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constEnd(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return new QList< QPair< QByteArray, QByteArray > >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constEnd(QList< QDnsDomainNameRecord > const * this_ptr) {
  return new QList< QDnsDomainNameRecord >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constEnd(QList< QDnsHostAddressRecord > const * this_ptr) {
  return new QList< QDnsHostAddressRecord >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constEnd(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return new QList< QDnsMailExchangeRecord >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QDnsServiceRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_constEnd(QList< QDnsServiceRecord > const * this_ptr) {
  return new QList< QDnsServiceRecord >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QDnsTextRecord >::const_iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_constEnd(QList< QDnsTextRecord > const * this_ptr) {
  return new QList< QDnsTextRecord >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QSslCertificateExtension >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_constEnd(QList< QSslCertificateExtension > const * this_ptr) {
  return new QList< QSslCertificateExtension >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QSslCertificate >::const_iterator * ctr_qt_network_ffi_QList_QSslCertificate_constEnd(QList< QSslCertificate > const * this_ptr) {
  return new QList< QSslCertificate >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QSslError >::const_iterator * ctr_qt_network_ffi_QList_QSslError_constEnd(QList< QSslError > const * this_ptr) {
  return new QList< QSslError >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QSslCipher >::const_iterator * ctr_qt_network_ffi_QList_QSslCipher_constEnd(QList< QSslCipher > const * this_ptr) {
  return new QList< QSslCipher >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QHostAddress >::const_iterator * ctr_qt_network_ffi_QList_QHostAddress_constEnd(QList< QHostAddress > const * this_ptr) {
  return new QList< QHostAddress >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QNetworkConfiguration >::const_iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_constEnd(QList< QNetworkConfiguration > const * this_ptr) {
  return new QList< QNetworkConfiguration >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QNetworkCookie >::const_iterator * ctr_qt_network_ffi_QList_QNetworkCookie_constEnd(QList< QNetworkCookie > const * this_ptr) {
  return new QList< QNetworkCookie >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::const_iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_constEnd(QList< QNetworkAddressEntry > const * this_ptr) {
  return new QList< QNetworkAddressEntry >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QNetworkInterface >::const_iterator * ctr_qt_network_ffi_QList_QNetworkInterface_constEnd(QList< QNetworkInterface > const * this_ptr) {
  return new QList< QNetworkInterface >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QNetworkProxy >::const_iterator * ctr_qt_network_ffi_QList_QNetworkProxy_constEnd(QList< QNetworkProxy > const * this_ptr) {
  return new QList< QNetworkProxy >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_insert1(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * before, QPair< QByteArray, QByteArray > const * t) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_insert1(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord >::iterator const * before, QDnsDomainNameRecord const * t) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_insert1(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord >::iterator const * before, QDnsHostAddressRecord const * t) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_insert1(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * before, QDnsMailExchangeRecord const * t) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_insert1(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord >::iterator const * before, QDnsServiceRecord const * t) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_insert1(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord >::iterator const * before, QDnsTextRecord const * t) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_insert1(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension >::iterator const * before, QSslCertificateExtension const * t) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_insert1(QList< QSslCertificate > * this_ptr, QList< QSslCertificate >::iterator const * before, QSslCertificate const * t) {
  return new QList< QSslCertificate >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_insert1(QList< QSslError > * this_ptr, QList< QSslError >::iterator const * before, QSslError const * t) {
  return new QList< QSslError >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_insert1(QList< QSslCipher > * this_ptr, QList< QSslCipher >::iterator const * before, QSslCipher const * t) {
  return new QList< QSslCipher >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_insert1(QList< QHostAddress > * this_ptr, QList< QHostAddress >::iterator const * before, QHostAddress const * t) {
  return new QList< QHostAddress >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_insert1(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration >::iterator const * before, QNetworkConfiguration const * t) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_insert1(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie >::iterator const * before, QNetworkCookie const * t) {
  return new QList< QNetworkCookie >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_insert1(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry >::iterator const * before, QNetworkAddressEntry const * t) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_insert1(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface >::iterator const * before, QNetworkInterface const * t) {
  return new QList< QNetworkInterface >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_insert1(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy >::iterator const * before, QNetworkProxy const * t) {
  return new QList< QNetworkProxy >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_erase(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * pos) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_erase(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord >::iterator const * pos) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_erase(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord >::iterator const * pos) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_erase(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * pos) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_erase(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord >::iterator const * pos) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_erase(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord >::iterator const * pos) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_erase(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension >::iterator const * pos) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_erase(QList< QSslCertificate > * this_ptr, QList< QSslCertificate >::iterator const * pos) {
  return new QList< QSslCertificate >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_erase(QList< QSslError > * this_ptr, QList< QSslError >::iterator const * pos) {
  return new QList< QSslError >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_erase(QList< QSslCipher > * this_ptr, QList< QSslCipher >::iterator const * pos) {
  return new QList< QSslCipher >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_erase(QList< QHostAddress > * this_ptr, QList< QHostAddress >::iterator const * pos) {
  return new QList< QHostAddress >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_erase(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration >::iterator const * pos) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_erase(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie >::iterator const * pos) {
  return new QList< QNetworkCookie >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_erase(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry >::iterator const * pos) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_erase(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface >::iterator const * pos) {
  return new QList< QNetworkInterface >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_erase(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy >::iterator const * pos) {
  return new QList< QNetworkProxy >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::iterator * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_erase1(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > >::iterator const * first, QList< QPair< QByteArray, QByteArray > >::iterator const * last) {
  return new QList< QPair< QByteArray, QByteArray > >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::iterator * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_erase1(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord >::iterator const * first, QList< QDnsDomainNameRecord >::iterator const * last) {
  return new QList< QDnsDomainNameRecord >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::iterator * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_erase1(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord >::iterator const * first, QList< QDnsHostAddressRecord >::iterator const * last) {
  return new QList< QDnsHostAddressRecord >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::iterator * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_erase1(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord >::iterator const * first, QList< QDnsMailExchangeRecord >::iterator const * last) {
  return new QList< QDnsMailExchangeRecord >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QDnsServiceRecord >::iterator * ctr_qt_network_ffi_QList_QDnsServiceRecord_erase1(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord >::iterator const * first, QList< QDnsServiceRecord >::iterator const * last) {
  return new QList< QDnsServiceRecord >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QDnsTextRecord >::iterator * ctr_qt_network_ffi_QList_QDnsTextRecord_erase1(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord >::iterator const * first, QList< QDnsTextRecord >::iterator const * last) {
  return new QList< QDnsTextRecord >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QSslCertificateExtension >::iterator * ctr_qt_network_ffi_QList_QSslCertificateExtension_erase1(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension >::iterator const * first, QList< QSslCertificateExtension >::iterator const * last) {
  return new QList< QSslCertificateExtension >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QSslCertificate >::iterator * ctr_qt_network_ffi_QList_QSslCertificate_erase1(QList< QSslCertificate > * this_ptr, QList< QSslCertificate >::iterator const * first, QList< QSslCertificate >::iterator const * last) {
  return new QList< QSslCertificate >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QSslError >::iterator * ctr_qt_network_ffi_QList_QSslError_erase1(QList< QSslError > * this_ptr, QList< QSslError >::iterator const * first, QList< QSslError >::iterator const * last) {
  return new QList< QSslError >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QSslCipher >::iterator * ctr_qt_network_ffi_QList_QSslCipher_erase1(QList< QSslCipher > * this_ptr, QList< QSslCipher >::iterator const * first, QList< QSslCipher >::iterator const * last) {
  return new QList< QSslCipher >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QHostAddress >::iterator * ctr_qt_network_ffi_QList_QHostAddress_erase1(QList< QHostAddress > * this_ptr, QList< QHostAddress >::iterator const * first, QList< QHostAddress >::iterator const * last) {
  return new QList< QHostAddress >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QNetworkConfiguration >::iterator * ctr_qt_network_ffi_QList_QNetworkConfiguration_erase1(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration >::iterator const * first, QList< QNetworkConfiguration >::iterator const * last) {
  return new QList< QNetworkConfiguration >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QNetworkCookie >::iterator * ctr_qt_network_ffi_QList_QNetworkCookie_erase1(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie >::iterator const * first, QList< QNetworkCookie >::iterator const * last) {
  return new QList< QNetworkCookie >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::iterator * ctr_qt_network_ffi_QList_QNetworkAddressEntry_erase1(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry >::iterator const * first, QList< QNetworkAddressEntry >::iterator const * last) {
  return new QList< QNetworkAddressEntry >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QNetworkInterface >::iterator * ctr_qt_network_ffi_QList_QNetworkInterface_erase1(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface >::iterator const * first, QList< QNetworkInterface >::iterator const * last) {
  return new QList< QNetworkInterface >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QNetworkProxy >::iterator * ctr_qt_network_ffi_QList_QNetworkProxy_erase1(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy >::iterator const * first, QList< QNetworkProxy >::iterator const * last) {
  return new QList< QNetworkProxy >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_count1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsDomainNameRecord_count1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsHostAddressRecord_count1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_count1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsServiceRecord_count1(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsTextRecord_count1(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificateExtension_count1(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_count1(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_count1(QList< QSslError > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_count1(QList< QSslCipher > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_count1(QList< QHostAddress > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_count1(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_count1(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_count1(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkInterface_count1(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_count1(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_length(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsDomainNameRecord_length(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsHostAddressRecord_length(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_length(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsServiceRecord_length(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QDnsTextRecord_length(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificateExtension_length(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_length(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_length(QList< QSslError > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_length(QList< QSslCipher > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_length(QList< QHostAddress > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_length(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_length(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_length(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkInterface_length(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_length(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_first(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_first(QList< QDnsDomainNameRecord > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_first(QList< QDnsHostAddressRecord > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_first(QList< QDnsMailExchangeRecord > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_first(QList< QDnsServiceRecord > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_first(QList< QDnsTextRecord > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_first(QList< QSslCertificateExtension > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_first(QList< QSslCertificate > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_first(QList< QSslError > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_first(QList< QSslCipher > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_first(QList< QHostAddress > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_first(QList< QNetworkConfiguration > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_first(QList< QNetworkCookie > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_first(QList< QNetworkAddressEntry > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_first(QList< QNetworkInterface > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_first(QList< QNetworkProxy > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constFirst(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constFirst(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constFirst(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constFirst(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_constFirst(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_constFirst(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_constFirst(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_constFirst(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_constFirst(QList< QSslError > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_constFirst(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_constFirst(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_constFirst(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_constFirst(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_constFirst(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_constFirst(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_constFirst(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_first1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_first1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_first1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_first1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_first1(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_first1(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_first1(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_first1(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_first1(QList< QSslError > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_first1(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_first1(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_first1(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_first1(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_first1(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_first1(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_first1(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_last(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_last(QList< QDnsDomainNameRecord > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_last(QList< QDnsHostAddressRecord > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_last(QList< QDnsMailExchangeRecord > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_last(QList< QDnsServiceRecord > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_last(QList< QDnsTextRecord > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_last(QList< QSslCertificateExtension > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_last(QList< QSslCertificate > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_last(QList< QSslError > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_last(QList< QSslCipher > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_last(QList< QHostAddress > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_last(QList< QNetworkConfiguration > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_last(QList< QNetworkCookie > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_last(QList< QNetworkAddressEntry > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_last(QList< QNetworkInterface > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_last(QList< QNetworkProxy > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_last1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_last1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_last1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_last1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_last1(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_last1(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_last1(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_last1(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_last1(QList< QSslError > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_last1(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_last1(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_last1(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_last1(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_last1(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_last1(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_last1(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constLast(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constLast(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constLast(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constLast(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_constLast(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_constLast(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_constLast(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_constLast(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_constLast(QList< QSslError > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_constLast(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_constLast(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_constLast(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_constLast(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_constLast(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_constLast(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_constLast(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeFirst(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeFirst(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeFirst(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeFirst(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_removeFirst(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_removeFirst(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_removeFirst(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_removeFirst(QList< QSslCertificate > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_removeFirst(QList< QSslError > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_removeFirst(QList< QSslCipher > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_removeFirst(QList< QHostAddress > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_removeFirst(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_removeFirst(QList< QNetworkCookie > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeFirst(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_removeFirst(QList< QNetworkInterface > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_removeFirst(QList< QNetworkProxy > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeLast(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeLast(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeLast(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeLast(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_removeLast(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_removeLast(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_removeLast(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_removeLast(QList< QSslCertificate > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_removeLast(QList< QSslError > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_removeLast(QList< QSslCipher > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_removeLast(QList< QHostAddress > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_removeLast(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_removeLast(QList< QNetworkCookie > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeLast(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_removeLast(QList< QNetworkInterface > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_removeLast(QList< QNetworkProxy > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_startsWith(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_startsWith(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_startsWith(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_startsWith(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_startsWith(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_startsWith(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_startsWith(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_startsWith(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_startsWith(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_endsWith(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_endsWith(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_endsWith(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_endsWith(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_endsWith(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_endsWith(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_endsWith(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_endsWith(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_endsWith(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_mid(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int pos, int length) {
  return new QList< QPair< QByteArray, QByteArray > >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_mid(QList< QDnsDomainNameRecord > const * this_ptr, int pos, int length) {
  return new QList< QDnsDomainNameRecord >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_mid(QList< QDnsHostAddressRecord > const * this_ptr, int pos, int length) {
  return new QList< QDnsHostAddressRecord >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_mid(QList< QDnsMailExchangeRecord > const * this_ptr, int pos, int length) {
  return new QList< QDnsMailExchangeRecord >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_mid(QList< QDnsServiceRecord > const * this_ptr, int pos, int length) {
  return new QList< QDnsServiceRecord >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_mid(QList< QDnsTextRecord > const * this_ptr, int pos, int length) {
  return new QList< QDnsTextRecord >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_mid(QList< QSslCertificateExtension > const * this_ptr, int pos, int length) {
  return new QList< QSslCertificateExtension >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_mid(QList< QSslCertificate > const * this_ptr, int pos, int length) {
  return new QList< QSslCertificate >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_mid(QList< QSslError > const * this_ptr, int pos, int length) {
  return new QList< QSslError >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_mid(QList< QSslCipher > const * this_ptr, int pos, int length) {
  return new QList< QSslCipher >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_mid(QList< QHostAddress > const * this_ptr, int pos, int length) {
  return new QList< QHostAddress >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_mid(QList< QNetworkConfiguration > const * this_ptr, int pos, int length) {
  return new QList< QNetworkConfiguration >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_mid(QList< QNetworkCookie > const * this_ptr, int pos, int length) {
  return new QList< QNetworkCookie >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_mid(QList< QNetworkAddressEntry > const * this_ptr, int pos, int length) {
  return new QList< QNetworkAddressEntry >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_mid(QList< QNetworkInterface > const * this_ptr, int pos, int length) {
  return new QList< QNetworkInterface >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_mid(QList< QNetworkProxy > const * this_ptr, int pos, int length) {
  return new QList< QNetworkProxy >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_value(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int i) {
  return new QPair< QByteArray, QByteArray >(this_ptr->value(i));
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_value(QList< QDnsDomainNameRecord > const * this_ptr, int i) {
  return new QDnsDomainNameRecord(this_ptr->value(i));
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_value(QList< QDnsHostAddressRecord > const * this_ptr, int i) {
  return new QDnsHostAddressRecord(this_ptr->value(i));
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_value(QList< QDnsMailExchangeRecord > const * this_ptr, int i) {
  return new QDnsMailExchangeRecord(this_ptr->value(i));
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_value(QList< QDnsServiceRecord > const * this_ptr, int i) {
  return new QDnsServiceRecord(this_ptr->value(i));
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_value(QList< QDnsTextRecord > const * this_ptr, int i) {
  return new QDnsTextRecord(this_ptr->value(i));
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_value(QList< QSslCertificateExtension > const * this_ptr, int i) {
  return new QSslCertificateExtension(this_ptr->value(i));
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_value(QList< QSslCertificate > const * this_ptr, int i) {
  return new QSslCertificate(this_ptr->value(i));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_value(QList< QSslError > const * this_ptr, int i) {
  return new QSslError(this_ptr->value(i));
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_value(QList< QSslCipher > const * this_ptr, int i) {
  return new QSslCipher(this_ptr->value(i));
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_value(QList< QHostAddress > const * this_ptr, int i) {
  return new QHostAddress(this_ptr->value(i));
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_value(QList< QNetworkConfiguration > const * this_ptr, int i) {
  return new QNetworkConfiguration(this_ptr->value(i));
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_value(QList< QNetworkCookie > const * this_ptr, int i) {
  return new QNetworkCookie(this_ptr->value(i));
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_value(QList< QNetworkAddressEntry > const * this_ptr, int i) {
  return new QNetworkAddressEntry(this_ptr->value(i));
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_value(QList< QNetworkInterface > const * this_ptr, int i) {
  return new QNetworkInterface(this_ptr->value(i));
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_value(QList< QNetworkProxy > const * this_ptr, int i) {
  return new QNetworkProxy(this_ptr->value(i));
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_value1(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int i, QPair< QByteArray, QByteArray > const * defaultValue) {
  return new QPair< QByteArray, QByteArray >(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_value1(QList< QDnsDomainNameRecord > const * this_ptr, int i, QDnsDomainNameRecord const * defaultValue) {
  return new QDnsDomainNameRecord(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_value1(QList< QDnsHostAddressRecord > const * this_ptr, int i, QDnsHostAddressRecord const * defaultValue) {
  return new QDnsHostAddressRecord(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_value1(QList< QDnsMailExchangeRecord > const * this_ptr, int i, QDnsMailExchangeRecord const * defaultValue) {
  return new QDnsMailExchangeRecord(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_value1(QList< QDnsServiceRecord > const * this_ptr, int i, QDnsServiceRecord const * defaultValue) {
  return new QDnsServiceRecord(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_value1(QList< QDnsTextRecord > const * this_ptr, int i, QDnsTextRecord const * defaultValue) {
  return new QDnsTextRecord(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_value1(QList< QSslCertificateExtension > const * this_ptr, int i, QSslCertificateExtension const * defaultValue) {
  return new QSslCertificateExtension(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_value1(QList< QSslCertificate > const * this_ptr, int i, QSslCertificate const * defaultValue) {
  return new QSslCertificate(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_value1(QList< QSslError > const * this_ptr, int i, QSslError const * defaultValue) {
  return new QSslError(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_value1(QList< QSslCipher > const * this_ptr, int i, QSslCipher const * defaultValue) {
  return new QSslCipher(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_value1(QList< QHostAddress > const * this_ptr, int i, QHostAddress const * defaultValue) {
  return new QHostAddress(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_value1(QList< QNetworkConfiguration > const * this_ptr, int i, QNetworkConfiguration const * defaultValue) {
  return new QNetworkConfiguration(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_value1(QList< QNetworkCookie > const * this_ptr, int i, QNetworkCookie const * defaultValue) {
  return new QNetworkCookie(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_value1(QList< QNetworkAddressEntry > const * this_ptr, int i, QNetworkAddressEntry const * defaultValue) {
  return new QNetworkAddressEntry(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_value1(QList< QNetworkInterface > const * this_ptr, int i, QNetworkInterface const * defaultValue) {
  return new QNetworkInterface(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_value1(QList< QNetworkProxy > const * this_ptr, int i, QNetworkProxy const * defaultValue) {
  return new QNetworkProxy(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_push_back(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_push_back(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_push_back(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_push_back(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_push_back(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_push_back(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_push_back(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_push_back(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_push_back(QList< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_push_back(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_push_back(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_push_back(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_push_back(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_push_back(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_push_back(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_push_back(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_push_front(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_push_front(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_push_front(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_push_front(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_push_front(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_push_front(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_push_front(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_push_front(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_push_front(QList< QSslError > * this_ptr, QSslError const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_push_front(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_push_front(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_push_front(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_push_front(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_push_front(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_push_front(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_push_front(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_front(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_front(QList< QDnsDomainNameRecord > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_front(QList< QDnsHostAddressRecord > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_front(QList< QDnsMailExchangeRecord > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_front(QList< QDnsServiceRecord > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_front(QList< QDnsTextRecord > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_front(QList< QSslCertificateExtension > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_front(QList< QSslCertificate > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_front(QList< QSslError > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_front(QList< QSslCipher > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_front(QList< QHostAddress > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_front(QList< QNetworkConfiguration > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_front(QList< QNetworkCookie > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_front(QList< QNetworkAddressEntry > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_front(QList< QNetworkInterface > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_front(QList< QNetworkProxy > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_front1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_front1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_front1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_front1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_front1(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_front1(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_front1(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_front1(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_front1(QList< QSslError > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_front1(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_front1(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_front1(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_front1(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_front1(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_front1(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_front1(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_back(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsDomainNameRecord * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_back(QList< QDnsDomainNameRecord > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsHostAddressRecord * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_back(QList< QDnsHostAddressRecord > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsMailExchangeRecord * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_back(QList< QDnsMailExchangeRecord > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsServiceRecord * ctr_qt_network_ffi_QList_QDnsServiceRecord_back(QList< QDnsServiceRecord > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsTextRecord * ctr_qt_network_ffi_QList_QDnsTextRecord_back(QList< QDnsTextRecord > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCertificateExtension * ctr_qt_network_ffi_QList_QSslCertificateExtension_back(QList< QSslCertificateExtension > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QList_QSslCertificate_back(QList< QSslCertificate > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslError * ctr_qt_network_ffi_QList_QSslError_back(QList< QSslError > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCipher * ctr_qt_network_ffi_QList_QSslCipher_back(QList< QSslCipher > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QHostAddress * ctr_qt_network_ffi_QList_QHostAddress_back(QList< QHostAddress > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkConfiguration * ctr_qt_network_ffi_QList_QNetworkConfiguration_back(QList< QNetworkConfiguration > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QList_QNetworkCookie_back(QList< QNetworkCookie > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkAddressEntry * ctr_qt_network_ffi_QList_QNetworkAddressEntry_back(QList< QNetworkAddressEntry > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkInterface * ctr_qt_network_ffi_QList_QNetworkInterface_back(QList< QNetworkInterface > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QList_QNetworkProxy_back(QList< QNetworkProxy > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > const * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_back1(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsDomainNameRecord const * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_back1(QList< QDnsDomainNameRecord > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsHostAddressRecord const * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_back1(QList< QDnsHostAddressRecord > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsMailExchangeRecord const * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_back1(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsServiceRecord const * ctr_qt_network_ffi_QList_QDnsServiceRecord_back1(QList< QDnsServiceRecord > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QDnsTextRecord const * ctr_qt_network_ffi_QList_QDnsTextRecord_back1(QList< QDnsTextRecord > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCertificateExtension const * ctr_qt_network_ffi_QList_QSslCertificateExtension_back1(QList< QSslCertificateExtension > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCertificate const * ctr_qt_network_ffi_QList_QSslCertificate_back1(QList< QSslCertificate > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslError const * ctr_qt_network_ffi_QList_QSslError_back1(QList< QSslError > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSslCipher const * ctr_qt_network_ffi_QList_QSslCipher_back1(QList< QSslCipher > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QHostAddress const * ctr_qt_network_ffi_QList_QHostAddress_back1(QList< QHostAddress > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkConfiguration const * ctr_qt_network_ffi_QList_QNetworkConfiguration_back1(QList< QNetworkConfiguration > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkCookie const * ctr_qt_network_ffi_QList_QNetworkCookie_back1(QList< QNetworkCookie > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkAddressEntry const * ctr_qt_network_ffi_QList_QNetworkAddressEntry_back1(QList< QNetworkAddressEntry > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkInterface const * ctr_qt_network_ffi_QList_QNetworkInterface_back1(QList< QNetworkInterface > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QNetworkProxy const * ctr_qt_network_ffi_QList_QNetworkProxy_back1(QList< QNetworkProxy > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_pop_front(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_pop_front(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_pop_front(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_pop_front(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_pop_front(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_pop_front(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_pop_front(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_pop_front(QList< QSslCertificate > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_pop_front(QList< QSslError > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_pop_front(QList< QSslCipher > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_pop_front(QList< QHostAddress > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_pop_front(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_pop_front(QList< QNetworkCookie > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_pop_front(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_pop_front(QList< QNetworkInterface > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_pop_front(QList< QNetworkProxy > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_pop_back(QList< QPair< QByteArray, QByteArray > > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_pop_back(QList< QDnsDomainNameRecord > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_pop_back(QList< QDnsHostAddressRecord > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_pop_back(QList< QDnsMailExchangeRecord > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_pop_back(QList< QDnsServiceRecord > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_pop_back(QList< QDnsTextRecord > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_pop_back(QList< QSslCertificateExtension > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_pop_back(QList< QSslCertificate > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_pop_back(QList< QSslError > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_pop_back(QList< QSslCipher > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_pop_back(QList< QHostAddress > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_pop_back(QList< QNetworkConfiguration > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_pop_back(QList< QNetworkCookie > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_pop_back(QList< QNetworkAddressEntry > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_pop_back(QList< QNetworkInterface > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_pop_back(QList< QNetworkProxy > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_empty(QList< QPair< QByteArray, QByteArray > > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsDomainNameRecord_empty(QList< QDnsDomainNameRecord > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsHostAddressRecord_empty(QList< QDnsHostAddressRecord > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_empty(QList< QDnsMailExchangeRecord > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsServiceRecord_empty(QList< QDnsServiceRecord > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QDnsTextRecord_empty(QList< QDnsTextRecord > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificateExtension_empty(QList< QSslCertificateExtension > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCertificate_empty(QList< QSslCertificate > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslError_empty(QList< QSslError > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QSslCipher_empty(QList< QSslCipher > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QHostAddress_empty(QList< QHostAddress > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkConfiguration_empty(QList< QNetworkConfiguration > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkCookie_empty(QList< QNetworkCookie > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkAddressEntry_empty(QList< QNetworkAddressEntry > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkInterface_empty(QList< QNetworkInterface > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QList_QNetworkProxy_empty(QList< QNetworkProxy > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__4(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__4(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__4(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__4(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__4(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__4(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__4(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator__4(QList< QSslCertificate > * this_ptr, QList< QSslCertificate > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator__4(QList< QSslError > * this_ptr, QList< QSslError > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator__4(QList< QSslCipher > * this_ptr, QList< QSslCipher > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator__4(QList< QHostAddress > * this_ptr, QList< QHostAddress > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__4(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator__4(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__4(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator__4(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator__4(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator_2(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QList< QPair< QByteArray, QByteArray > > const * l) {
  return new QList< QPair< QByteArray, QByteArray > >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator_2(QList< QDnsDomainNameRecord > const * this_ptr, QList< QDnsDomainNameRecord > const * l) {
  return new QList< QDnsDomainNameRecord >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator_2(QList< QDnsHostAddressRecord > const * this_ptr, QList< QDnsHostAddressRecord > const * l) {
  return new QList< QDnsHostAddressRecord >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator_2(QList< QDnsMailExchangeRecord > const * this_ptr, QList< QDnsMailExchangeRecord > const * l) {
  return new QList< QDnsMailExchangeRecord >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator_2(QList< QDnsServiceRecord > const * this_ptr, QList< QDnsServiceRecord > const * l) {
  return new QList< QDnsServiceRecord >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator_2(QList< QDnsTextRecord > const * this_ptr, QList< QDnsTextRecord > const * l) {
  return new QList< QDnsTextRecord >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator_2(QList< QSslCertificateExtension > const * this_ptr, QList< QSslCertificateExtension > const * l) {
  return new QList< QSslCertificateExtension >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator_2(QList< QSslCertificate > const * this_ptr, QList< QSslCertificate > const * l) {
  return new QList< QSslCertificate >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator_2(QList< QSslError > const * this_ptr, QList< QSslError > const * l) {
  return new QList< QSslError >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator_2(QList< QSslCipher > const * this_ptr, QList< QSslCipher > const * l) {
  return new QList< QSslCipher >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator_2(QList< QHostAddress > const * this_ptr, QList< QHostAddress > const * l) {
  return new QList< QHostAddress >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator_2(QList< QNetworkConfiguration > const * this_ptr, QList< QNetworkConfiguration > const * l) {
  return new QList< QNetworkConfiguration >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator_2(QList< QNetworkCookie > const * this_ptr, QList< QNetworkCookie > const * l) {
  return new QList< QNetworkCookie >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator_2(QList< QNetworkAddressEntry > const * this_ptr, QList< QNetworkAddressEntry > const * l) {
  return new QList< QNetworkAddressEntry >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator_2(QList< QNetworkInterface > const * this_ptr, QList< QNetworkInterface > const * l) {
  return new QList< QNetworkInterface >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator_2(QList< QNetworkProxy > const * this_ptr, QList< QNetworkProxy > const * l) {
  return new QList< QNetworkProxy >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__5(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__5(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__5(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__5(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__5(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__5(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__5(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator__5(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator__5(QList< QSslError > * this_ptr, QSslError const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator__5(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator__5(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__5(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator__5(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__5(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator__5(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator__5(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__6(QList< QPair< QByteArray, QByteArray > > * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__6(QList< QDnsDomainNameRecord > * this_ptr, QDnsDomainNameRecord const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__6(QList< QDnsHostAddressRecord > * this_ptr, QDnsHostAddressRecord const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__6(QList< QDnsMailExchangeRecord > * this_ptr, QDnsMailExchangeRecord const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__6(QList< QDnsServiceRecord > * this_ptr, QDnsServiceRecord const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__6(QList< QDnsTextRecord > * this_ptr, QDnsTextRecord const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__6(QList< QSslCertificateExtension > * this_ptr, QSslCertificateExtension const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator__6(QList< QSslCertificate > * this_ptr, QSslCertificate const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator__6(QList< QSslError > * this_ptr, QSslError const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator__6(QList< QSslCipher > * this_ptr, QSslCipher const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator__6(QList< QHostAddress > * this_ptr, QHostAddress const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__6(QList< QNetworkConfiguration > * this_ptr, QNetworkConfiguration const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator__6(QList< QNetworkCookie > * this_ptr, QNetworkCookie const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__6(QList< QNetworkAddressEntry > * this_ptr, QNetworkAddressEntry const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator__6(QList< QNetworkInterface > * this_ptr, QNetworkInterface const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator__6(QList< QNetworkProxy > * this_ptr, QNetworkProxy const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__7(QList< QPair< QByteArray, QByteArray > > * this_ptr, QList< QPair< QByteArray, QByteArray > > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__7(QList< QDnsDomainNameRecord > * this_ptr, QList< QDnsDomainNameRecord > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__7(QList< QDnsHostAddressRecord > * this_ptr, QList< QDnsHostAddressRecord > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__7(QList< QDnsMailExchangeRecord > * this_ptr, QList< QDnsMailExchangeRecord > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__7(QList< QDnsServiceRecord > * this_ptr, QList< QDnsServiceRecord > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_operator__7(QList< QDnsTextRecord > * this_ptr, QList< QDnsTextRecord > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__7(QList< QSslCertificateExtension > * this_ptr, QList< QSslCertificateExtension > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_operator__7(QList< QSslCertificate > * this_ptr, QList< QSslCertificate > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_operator__7(QList< QSslError > * this_ptr, QList< QSslError > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_operator__7(QList< QSslCipher > * this_ptr, QList< QSslCipher > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_operator__7(QList< QHostAddress > * this_ptr, QList< QHostAddress > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__7(QList< QNetworkConfiguration > * this_ptr, QList< QNetworkConfiguration > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_operator__7(QList< QNetworkCookie > * this_ptr, QList< QNetworkCookie > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__7(QList< QNetworkAddressEntry > * this_ptr, QList< QNetworkAddressEntry > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_operator__7(QList< QNetworkInterface > * this_ptr, QList< QNetworkInterface > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_operator__7(QList< QNetworkProxy > * this_ptr, QList< QNetworkProxy > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_fromVector(QVector< QSslError > const * vector) {
  return new QList< QSslError >(QList< QSslError >::fromVector(*vector));
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QList_QSslError_toVector(QList< QSslError > const * this_ptr) {
  return new QVector< QSslError >(this_ptr->toVector());
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash12(QList< QPair< QByteArray, QByteArray > > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash19(QList< QSslCertificate > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash20(QList< QSslError > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash22(QList< QHostAddress > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator_21(QList< QPair< QByteArray, QByteArray > > const * lhs, QList< QPair< QByteArray, QByteArray > > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator_37(QList< QPair< QByteArray, QByteArray > > const * lhs, QList< QPair< QByteArray, QByteArray > > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__49(QList< QPair< QByteArray, QByteArray > > const * lhs, QList< QPair< QByteArray, QByteArray > > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_operator__65(QList< QPair< QByteArray, QByteArray > > const * lhs, QList< QPair< QByteArray, QByteArray > > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QMap< QByteArray, QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_QMap() {
  return new QMap< QByteArray, QVariant >();
}


RITUAL_EXPORT QMap< QByteArray, QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_QMap1(QMap< QByteArray, QVariant > const * other) {
  return new QMap< QByteArray, QVariant >(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_dQMap(QMap< QByteArray, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QByteArray, QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator_(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_swap(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__(QMap< QByteArray, QVariant > const * this_ptr, QMap< QByteArray, QVariant > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMap_QByteArray_QVariant_size(QMap< QByteArray, QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_isEmpty(QMap< QByteArray, QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_detach(QMap< QByteArray, QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_isDetached(QMap< QByteArray, QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_setSharable(QMap< QByteArray, QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_isSharedWith(QMap< QByteArray, QVariant > const * this_ptr, QMap< QByteArray, QVariant > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_clear(QMap< QByteArray, QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMap_QByteArray_QVariant_remove(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_take(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return new QVariant(this_ptr->take(*key));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_contains(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key(QMap< QByteArray, QVariant > const * this_ptr, QVariant const * value, QByteArray const * defaultKey) {
  return new QByteArray(this_ptr->key(*value, *defaultKey));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_value(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__2(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__3(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QVariant(this_ptr->operator[](*key));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_keys(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QList< QByteArray >(this_ptr->keys());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_keys1(QMap< QByteArray, QVariant > const * this_ptr, QVariant const * value) {
  return new QList< QByteArray >(this_ptr->keys(*value));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_values(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QList< QVariant >(this_ptr->values());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_uniqueKeys(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QList< QByteArray >(this_ptr->uniqueKeys());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_values1(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QList< QVariant >(this_ptr->values(*key));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMap_QByteArray_QVariant_count(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_firstKey(QMap< QByteArray, QVariant > const * this_ptr) {
  return &this_ptr->firstKey();
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_lastKey(QMap< QByteArray, QVariant > const * this_ptr) {
  return &this_ptr->lastKey();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_first(QMap< QByteArray, QVariant > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_first1(QMap< QByteArray, QVariant > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_last(QMap< QByteArray, QVariant > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_last1(QMap< QByteArray, QVariant > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_iterator() {
  return new QMap< QByteArray, QVariant >::iterator();
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_key(QMap< QByteArray, QVariant >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_value(QMap< QByteArray, QVariant >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_(QMap< QByteArray, QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__(QMap< QByteArray, QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__1(QMap< QByteArray, QVariant >::iterator const * this_ptr, QMap< QByteArray, QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__3(QMap< QByteArray, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__4(QMap< QByteArray, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__5(QMap< QByteArray, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__6(QMap< QByteArray, QVariant >::iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_1(QMap< QByteArray, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_2(QMap< QByteArray, QVariant >::iterator const * this_ptr, int j) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__7(QMap< QByteArray, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__8(QMap< QByteArray, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__9(QMap< QByteArray, QVariant >::iterator const * this_ptr, QMap< QByteArray, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator() {
  return new QMap< QByteArray, QVariant >::const_iterator();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator1(QMap< QByteArray, QVariant >::iterator const * o) {
  return new QMap< QByteArray, QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_key(QMap< QByteArray, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_value(QMap< QByteArray, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_(QMap< QByteArray, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__(QMap< QByteArray, QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__1(QMap< QByteArray, QVariant >::const_iterator const * this_ptr, QMap< QByteArray, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__3(QMap< QByteArray, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__4(QMap< QByteArray, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__5(QMap< QByteArray, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__6(QMap< QByteArray, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_1(QMap< QByteArray, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_2(QMap< QByteArray, QVariant >::const_iterator const * this_ptr, int j) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__7(QMap< QByteArray, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__8(QMap< QByteArray, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator() {
  return new QMap< QByteArray, QVariant >::key_iterator();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator1(QMap< QByteArray, QVariant >::const_iterator const * o) {
  return new QMap< QByteArray, QVariant >::key_iterator(*o);
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator_(QMap< QByteArray, QVariant >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray const * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__(QMap< QByteArray, QVariant >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__1(QMap< QByteArray, QVariant >::key_iterator const * this_ptr, QMap< QByteArray, QVariant >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__3(QMap< QByteArray, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__4(QMap< QByteArray, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__5(QMap< QByteArray, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__6(QMap< QByteArray, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QMap< QByteArray, QVariant >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_base(QMap< QByteArray, QVariant >::key_iterator const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_begin(QMap< QByteArray, QVariant > * this_ptr) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_begin1(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_constBegin(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_cbegin(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_end(QMap< QByteArray, QVariant > * this_ptr) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_end1(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_constEnd(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_cend(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_keyBegin(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_keyEnd(QMap< QByteArray, QVariant > const * this_ptr) {
  return new QMap< QByteArray, QVariant >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_erase(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant >::iterator const * it) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMap_QByteArray_QVariant_count1(QMap< QByteArray, QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_find(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_find1(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_constFind(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_lowerBound(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_lowerBound1(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->lowerBound(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_upperBound(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_upperBound1(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QMap< QByteArray, QVariant >::const_iterator(this_ptr->upperBound(*key));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key, QVariant const * value) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert1(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant >::const_iterator const * pos, QByteArray const * key, QVariant const * value) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->insert(*pos, *key, *value));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert2(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant > const * map) {
  this_ptr->insert(*map);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_insertMulti(QMap< QByteArray, QVariant > * this_ptr, QByteArray const * key, QVariant const * value) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_insertMulti1(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant >::const_iterator const * pos, QByteArray const * akey, QVariant const * avalue) {
  return new QMap< QByteArray, QVariant >::iterator(this_ptr->insertMulti(*pos, *akey, *avalue));
}


RITUAL_EXPORT QMap< QByteArray, QVariant > * ctr_qt_network_ffi_QMap_QByteArray_QVariant_unite(QMap< QByteArray, QVariant > * this_ptr, QMap< QByteArray, QVariant > const * other) {
  return &this_ptr->unite(*other);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMap_QByteArray_QVariant_empty(QMap< QByteArray, QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QMultiMap< QSsl::AlternativeNameEntryType, QString > * ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_QMultiMap() {
  return new QMultiMap< QSsl::AlternativeNameEntryType, QString >();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_swap(QMultiMap< QSsl::AlternativeNameEntryType, QString > * this_ptr, QMultiMap< QSsl::AlternativeNameEntryType, QString > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QList< QString > * ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_values(QMultiMap< QSsl::AlternativeNameEntryType, QString > const * this_ptr, QSsl::AlternativeNameEntryType const * key) {
  return new QList< QString >(this_ptr->values(*key));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_contains(QMultiMap< QSsl::AlternativeNameEntryType, QString > const * this_ptr, QSsl::AlternativeNameEntryType const * key, QString const * value) {
  return this_ptr->contains(*key, *value);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_remove(QMultiMap< QSsl::AlternativeNameEntryType, QString > * this_ptr, QSsl::AlternativeNameEntryType const * key, QString const * value) {
  return this_ptr->remove(*key, *value);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_count(QMultiMap< QSsl::AlternativeNameEntryType, QString > const * this_ptr, QSsl::AlternativeNameEntryType const * key, QString const * value) {
  return this_ptr->count(*key, *value);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant > * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_QHash() {
  return new QHash< QNetworkRequest::Attribute, QVariant >();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_dQHash(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_size(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_isEmpty(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_capacity(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_reserve(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_squeeze(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_detach(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_isDetached(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_setSharable(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_clear(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_remove(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key) {
  return this_ptr->remove(*key);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_take(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QVariant(this_ptr->take(*key));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_contains(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return this_ptr->contains(*key);
}


RITUAL_EXPORT QNetworkRequest::Attribute ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QVariant const * value) {
  return this_ptr->key(*value);
}


RITUAL_EXPORT QNetworkRequest::Attribute ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QVariant const * value, QNetworkRequest::Attribute const * defaultKey) {
  return this_ptr->key(*value, *defaultKey);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_value(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_value1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key, QVariant const * defaultValue) {
  return new QVariant(this_ptr->value(*key, *defaultValue));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator__(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key) {
  return &this_ptr->operator[](*key);
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator__1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QVariant(this_ptr->operator[](*key));
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_values(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QList< QVariant >(this_ptr->values());
}


RITUAL_EXPORT QList< QVariant > * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_values1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QList< QVariant >(this_ptr->values(*key));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_count(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return this_ptr->count(*key);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator() {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator1(void * node) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(node);
}


RITUAL_EXPORT QNetworkRequest::Attribute const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_key(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_value(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__1(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__3(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__4(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__5(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__6(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_1(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr, int j) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_2(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr, int j) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__7(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__8(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__9(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator() {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator1(void * node) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(node);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator2(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * o) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(*o);
}


RITUAL_EXPORT QNetworkRequest::Attribute const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_key(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_value(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->value();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QVariant const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__1(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__3(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__4(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__5(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__6(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_1(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr, int j) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_2(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * this_ptr, int j) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__7(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__8(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator() {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator1(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * o) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(*o);
}


RITUAL_EXPORT QNetworkRequest::Attribute const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator_(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QNetworkRequest::Attribute const * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__1(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__3(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__4(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__5(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__6(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr, int arg1) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_base(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->base());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_begin(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_begin1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_cbegin(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constBegin(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_end(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_end1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_cend(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constEnd(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_keyBegin(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(this_ptr->keyBegin());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_keyEnd(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(this_ptr->keyEnd());
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_erase(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::iterator const * it) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_erase1(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * it) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->erase(*it));
}


RITUAL_EXPORT int ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_count1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_find(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_find1(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->find(*key));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constFind(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr, QNetworkRequest::Attribute const * key) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(this_ptr->constFind(*key));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_insert(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key, QVariant const * value) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->insert(*key, *value));
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_insertMulti(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QNetworkRequest::Attribute const * key, QVariant const * value) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(this_ptr->insertMulti(*key, *value));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_empty(QHash< QNetworkRequest::Attribute, QVariant > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__81(QDebug const * debug, QList< QPair< QByteArray, QByteArray > > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__88(QDebug const * debug, QList< QSslCertificate > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__89(QDebug const * debug, QList< QSslError > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__90(QDebug const * debug, QList< QSslCipher > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__91(QDebug const * debug, QList< QHostAddress > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__93(QDebug const * debug, QList< QNetworkCookie > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__95(QDebug const * debug, QList< QNetworkInterface > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__96(QDebug const * debug, QList< QNetworkProxy > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__98(QDebug const * debug, QVector< QSslError > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__99(QDebug const * debug, QVector< QSslEllipticCurve > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__101(QDebug const * debug, QMap< QByteArray, QVariant > const * map) {
  return new QDebug(operator<<(*debug, *map));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__102(QDebug const * debug, QHash< QNetworkRequest::Attribute, QVariant > const * hash) {
  return new QDebug(operator<<(*debug, *hash));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__103(QDebug const * debug, QPair< QByteArray, QByteArray > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__104(QDebug const * debug, QPair< QHostAddress, int > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__105(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QAbstractSocket::PauseMode >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__106(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QAbstractSocket::BindFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__107(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QHostAddress::ConversionModeFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__108(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QHstsPolicy::PolicyFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__109(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QLocalServer::SocketOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__110(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QNetworkConfiguration::StateFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__111(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QNetworkConfigurationManager::Capability >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__112(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QNetworkInterface::InterfaceFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__113(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QNetworkProxy::Capability >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_network_ffi_operator__114(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QNetworkSession::UsagePolicy >(flags)));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__115(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QAbstractSocket::PauseMode >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__116(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QAbstractSocket::BindFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__117(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QHostAddress::ConversionModeFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__118(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QHstsPolicy::PolicyFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__119(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QLocalServer::SocketOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__120(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QNetworkConfiguration::StateFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__121(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QNetworkConfigurationManager::Capability >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__122(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QNetworkInterface::InterfaceFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__123(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QNetworkProxy::Capability >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__124(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QNetworkSession::UsagePolicy >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__135(QDataStream * s, QList< QPair< QByteArray, QByteArray > > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__145(QDataStream * s, QList< QHostAddress > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__151(QDataStream * s, QList< QPair< QByteArray, QByteArray > > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__161(QDataStream * s, QList< QHostAddress > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__175(QDataStream * s, QHash< QNetworkRequest::Attribute, QVariant > * hash) {
  return &operator>>(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__176(QDataStream * s, QHash< QNetworkRequest::Attribute, QVariant > const * hash) {
  return &operator<<(*s, *hash);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__177(QDataStream * s, QMap< QByteArray, QVariant > * map) {
  return &operator>>(*s, *map);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__178(QDataStream * s, QMap< QByteArray, QVariant > const * map) {
  return &operator<<(*s, *map);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__179(QDataStream * s, QPair< QByteArray, QByteArray > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__180(QDataStream * s, QPair< QHostAddress, int > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__181(QDataStream * s, QPair< QByteArray, QByteArray > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_network_ffi_operator__182(QDataStream * s, QPair< QHostAddress, int > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QPair_QByteArray_QByteArray_dQPair(QPair< QByteArray, QByteArray > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QPair_QHostAddress_int_dQPair(QPair< QHostAddress, int > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair2(QPair< QByteArray, QByteArray > const * other) {
  return new QPair< QByteArray, QByteArray >(*other);
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_QPair_QHostAddress_int_QPair2(QPair< QHostAddress, int > const * other) {
  return new QPair< QHostAddress, int >(*other);
}


RITUAL_EXPORT QPair< QByteArray, QByteArray > * ctr_qt_network_ffi_QPair_QByteArray_QByteArray_operator_(QPair< QByteArray, QByteArray > * this_ptr, QPair< QByteArray, QByteArray > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< QHostAddress, int > * ctr_qt_network_ffi_QPair_QHostAddress_int_operator_(QPair< QHostAddress, int > * this_ptr, QPair< QHostAddress, int > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_dMemoryLayout(QList< QPair< QByteArray, QByteArray > >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_dMemoryLayout(QList< QDnsDomainNameRecord >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_dMemoryLayout(QList< QDnsHostAddressRecord >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_dMemoryLayout(QList< QDnsMailExchangeRecord >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_dMemoryLayout(QList< QDnsServiceRecord >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_dMemoryLayout(QList< QDnsTextRecord >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_dMemoryLayout(QList< QSslCertificateExtension >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_dMemoryLayout(QList< QSslCertificate >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_MemoryLayout_dMemoryLayout(QList< QSslError >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_dMemoryLayout(QList< QSslCipher >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_dMemoryLayout(QList< QHostAddress >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_dMemoryLayout(QList< QNetworkConfiguration >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_dMemoryLayout(QList< QNetworkCookie >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_dMemoryLayout(QList< QNetworkAddressEntry >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_dMemoryLayout(QList< QNetworkInterface >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_dMemoryLayout(QList< QNetworkProxy >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::MemoryLayout * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_MemoryLayout() {
  return new QList< QPair< QByteArray, QByteArray > >::MemoryLayout();
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_MemoryLayout() {
  return new QList< QDnsDomainNameRecord >::MemoryLayout();
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_MemoryLayout() {
  return new QList< QDnsHostAddressRecord >::MemoryLayout();
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_MemoryLayout() {
  return new QList< QDnsMailExchangeRecord >::MemoryLayout();
}


RITUAL_EXPORT QList< QDnsServiceRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_MemoryLayout() {
  return new QList< QDnsServiceRecord >::MemoryLayout();
}


RITUAL_EXPORT QList< QDnsTextRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_MemoryLayout() {
  return new QList< QDnsTextRecord >::MemoryLayout();
}


RITUAL_EXPORT QList< QSslCertificateExtension >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_MemoryLayout() {
  return new QList< QSslCertificateExtension >::MemoryLayout();
}


RITUAL_EXPORT QList< QSslCertificate >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_MemoryLayout() {
  return new QList< QSslCertificate >::MemoryLayout();
}


RITUAL_EXPORT QList< QSslError >::MemoryLayout * ctr_qt_network_ffi_QList_QSslError_MemoryLayout_MemoryLayout() {
  return new QList< QSslError >::MemoryLayout();
}


RITUAL_EXPORT QList< QSslCipher >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_MemoryLayout() {
  return new QList< QSslCipher >::MemoryLayout();
}


RITUAL_EXPORT QList< QHostAddress >::MemoryLayout * ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_MemoryLayout() {
  return new QList< QHostAddress >::MemoryLayout();
}


RITUAL_EXPORT QList< QNetworkConfiguration >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_MemoryLayout() {
  return new QList< QNetworkConfiguration >::MemoryLayout();
}


RITUAL_EXPORT QList< QNetworkCookie >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_MemoryLayout() {
  return new QList< QNetworkCookie >::MemoryLayout();
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_MemoryLayout() {
  return new QList< QNetworkAddressEntry >::MemoryLayout();
}


RITUAL_EXPORT QList< QNetworkInterface >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_MemoryLayout() {
  return new QList< QNetworkInterface >::MemoryLayout();
}


RITUAL_EXPORT QList< QNetworkProxy >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_MemoryLayout() {
  return new QList< QNetworkProxy >::MemoryLayout();
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::MemoryLayout * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_MemoryLayout1(QList< QPair< QByteArray, QByteArray > >::MemoryLayout const * other) {
  return new QList< QPair< QByteArray, QByteArray > >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_MemoryLayout1(QList< QDnsDomainNameRecord >::MemoryLayout const * other) {
  return new QList< QDnsDomainNameRecord >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_MemoryLayout1(QList< QDnsHostAddressRecord >::MemoryLayout const * other) {
  return new QList< QDnsHostAddressRecord >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_MemoryLayout1(QList< QDnsMailExchangeRecord >::MemoryLayout const * other) {
  return new QList< QDnsMailExchangeRecord >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_MemoryLayout1(QList< QDnsServiceRecord >::MemoryLayout const * other) {
  return new QList< QDnsServiceRecord >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QDnsTextRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_MemoryLayout1(QList< QDnsTextRecord >::MemoryLayout const * other) {
  return new QList< QDnsTextRecord >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_MemoryLayout1(QList< QSslCertificateExtension >::MemoryLayout const * other) {
  return new QList< QSslCertificateExtension >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QSslCertificate >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_MemoryLayout1(QList< QSslCertificate >::MemoryLayout const * other) {
  return new QList< QSslCertificate >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QSslError >::MemoryLayout * ctr_qt_network_ffi_QList_QSslError_MemoryLayout_MemoryLayout1(QList< QSslError >::MemoryLayout const * other) {
  return new QList< QSslError >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QSslCipher >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_MemoryLayout1(QList< QSslCipher >::MemoryLayout const * other) {
  return new QList< QSslCipher >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QHostAddress >::MemoryLayout * ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_MemoryLayout1(QList< QHostAddress >::MemoryLayout const * other) {
  return new QList< QHostAddress >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_MemoryLayout1(QList< QNetworkConfiguration >::MemoryLayout const * other) {
  return new QList< QNetworkConfiguration >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QNetworkCookie >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_MemoryLayout1(QList< QNetworkCookie >::MemoryLayout const * other) {
  return new QList< QNetworkCookie >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_MemoryLayout1(QList< QNetworkAddressEntry >::MemoryLayout const * other) {
  return new QList< QNetworkAddressEntry >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QNetworkInterface >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_MemoryLayout1(QList< QNetworkInterface >::MemoryLayout const * other) {
  return new QList< QNetworkInterface >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QNetworkProxy >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_MemoryLayout1(QList< QNetworkProxy >::MemoryLayout const * other) {
  return new QList< QNetworkProxy >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > >::MemoryLayout * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_operator_(QList< QPair< QByteArray, QByteArray > >::MemoryLayout * this_ptr, QList< QPair< QByteArray, QByteArray > >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QDnsDomainNameRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_operator_(QList< QDnsDomainNameRecord >::MemoryLayout * this_ptr, QList< QDnsDomainNameRecord >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QDnsHostAddressRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_operator_(QList< QDnsHostAddressRecord >::MemoryLayout * this_ptr, QList< QDnsHostAddressRecord >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_operator_(QList< QDnsMailExchangeRecord >::MemoryLayout * this_ptr, QList< QDnsMailExchangeRecord >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QDnsServiceRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_operator_(QList< QDnsServiceRecord >::MemoryLayout * this_ptr, QList< QDnsServiceRecord >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QDnsTextRecord >::MemoryLayout * ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_operator_(QList< QDnsTextRecord >::MemoryLayout * this_ptr, QList< QDnsTextRecord >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSslCertificateExtension >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_operator_(QList< QSslCertificateExtension >::MemoryLayout * this_ptr, QList< QSslCertificateExtension >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSslCertificate >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_operator_(QList< QSslCertificate >::MemoryLayout * this_ptr, QList< QSslCertificate >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSslError >::MemoryLayout * ctr_qt_network_ffi_QList_QSslError_MemoryLayout_operator_(QList< QSslError >::MemoryLayout * this_ptr, QList< QSslError >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSslCipher >::MemoryLayout * ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_operator_(QList< QSslCipher >::MemoryLayout * this_ptr, QList< QSslCipher >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QHostAddress >::MemoryLayout * ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_operator_(QList< QHostAddress >::MemoryLayout * this_ptr, QList< QHostAddress >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QNetworkConfiguration >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_operator_(QList< QNetworkConfiguration >::MemoryLayout * this_ptr, QList< QNetworkConfiguration >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QNetworkCookie >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_operator_(QList< QNetworkCookie >::MemoryLayout * this_ptr, QList< QNetworkCookie >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QNetworkAddressEntry >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_operator_(QList< QNetworkAddressEntry >::MemoryLayout * this_ptr, QList< QNetworkAddressEntry >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QNetworkInterface >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_operator_(QList< QNetworkInterface >::MemoryLayout * this_ptr, QList< QNetworkInterface >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QNetworkProxy >::MemoryLayout * ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_operator_(QList< QNetworkProxy >::MemoryLayout * this_ptr, QList< QNetworkProxy >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_diterator(QList< QPair< QByteArray, QByteArray > >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_diterator(QList< QDnsDomainNameRecord >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_diterator(QList< QDnsHostAddressRecord >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_diterator(QList< QDnsMailExchangeRecord >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_diterator(QList< QDnsServiceRecord >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_diterator(QList< QDnsTextRecord >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_diterator(QList< QSslCertificateExtension >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_iterator_diterator(QList< QSslCertificate >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_iterator_diterator(QList< QSslError >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_iterator_diterator(QList< QSslCipher >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_iterator_diterator(QList< QHostAddress >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_diterator(QList< QNetworkConfiguration >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_iterator_diterator(QList< QNetworkCookie >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_diterator(QList< QNetworkAddressEntry >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_iterator_diterator(QList< QNetworkInterface >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_iterator_diterator(QList< QNetworkProxy >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_dconst_iterator(QList< QPair< QByteArray, QByteArray > >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_dconst_iterator(QList< QDnsDomainNameRecord >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_dconst_iterator(QList< QDnsHostAddressRecord >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_dconst_iterator(QList< QDnsMailExchangeRecord >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_dconst_iterator(QList< QDnsServiceRecord >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_dconst_iterator(QList< QDnsTextRecord >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_dconst_iterator(QList< QSslCertificateExtension >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_dconst_iterator(QList< QSslCertificate >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslError_const_iterator_dconst_iterator(QList< QSslError >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QSslCipher_const_iterator_dconst_iterator(QList< QSslCipher >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QHostAddress_const_iterator_dconst_iterator(QList< QHostAddress >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_dconst_iterator(QList< QNetworkConfiguration >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_dconst_iterator(QList< QNetworkCookie >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_dconst_iterator(QList< QNetworkAddressEntry >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_dconst_iterator(QList< QNetworkInterface >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_dconst_iterator(QList< QNetworkProxy >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_diterator(QMap< QByteArray, QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_iterator1(QMap< QByteArray, QVariant >::iterator const * other) {
  return new QMap< QByteArray, QVariant >::iterator(*other);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_3(QMap< QByteArray, QVariant >::iterator * this_ptr, QMap< QByteArray, QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_dconst_iterator(QMap< QByteArray, QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator2(QMap< QByteArray, QVariant >::const_iterator const * other) {
  return new QMap< QByteArray, QVariant >::const_iterator(*other);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::const_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_3(QMap< QByteArray, QVariant >::const_iterator * this_ptr, QMap< QByteArray, QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_dkey_iterator(QMap< QByteArray, QVariant >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator2(QMap< QByteArray, QVariant >::key_iterator const * other) {
  return new QMap< QByteArray, QVariant >::key_iterator(*other);
}


RITUAL_EXPORT QMap< QByteArray, QVariant >::key_iterator * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator_1(QMap< QByteArray, QVariant >::key_iterator * this_ptr, QMap< QByteArray, QVariant >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_dQMultiMap(QMultiMap< QSsl::AlternativeNameEntryType, QString > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMultiMap< QSsl::AlternativeNameEntryType, QString > * ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_QMultiMap1(QMultiMap< QSsl::AlternativeNameEntryType, QString > const * other) {
  return new QMultiMap< QSsl::AlternativeNameEntryType, QString >(*other);
}


RITUAL_EXPORT QMultiMap< QSsl::AlternativeNameEntryType, QString > * ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_operator_(QMultiMap< QSsl::AlternativeNameEntryType, QString > * this_ptr, QMultiMap< QSsl::AlternativeNameEntryType, QString > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant > * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_QHash1(QHash< QNetworkRequest::Attribute, QVariant > const * other) {
  return new QHash< QNetworkRequest::Attribute, QVariant >(*other);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant > * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator_(QHash< QNetworkRequest::Attribute, QVariant > * this_ptr, QHash< QNetworkRequest::Attribute, QVariant > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_diterator(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator2(QHash< QNetworkRequest::Attribute, QVariant >::iterator const * other) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::iterator(*other);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_3(QHash< QNetworkRequest::Attribute, QVariant >::iterator * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_dconst_iterator(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator3(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * other) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::const_iterator(*other);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_3(QHash< QNetworkRequest::Attribute, QVariant >::const_iterator * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_dkey_iterator(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator2(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * other) {
  return new QHash< QNetworkRequest::Attribute, QVariant >::key_iterator(*other);
}


RITUAL_EXPORT QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator_1(QHash< QNetworkRequest::Attribute, QVariant >::key_iterator * this_ptr, QHash< QNetworkRequest::Attribute, QVariant >::key_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash29(QPair< QByteArray, QByteArray > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash30(QPair< QHostAddress, int > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_fill1(QVector< QOcspResponse > * this_ptr, QOcspResponse const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_fill1(QVector< QSslError > * this_ptr, QSslError const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_fill1(QVector< QSslEllipticCurve > * this_ptr, QSslEllipticCurve const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_fill1(QVector< QHstsPolicy > * this_ptr, QHstsPolicy const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_indexOf1(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_indexOf1(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_indexOf1(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_indexOf1(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QOcspResponse_lastIndexOf1(QVector< QOcspResponse > const * this_ptr, QOcspResponse const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslError_lastIndexOf1(QVector< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QSslEllipticCurve_lastIndexOf1(QVector< QSslEllipticCurve > const * this_ptr, QSslEllipticCurve const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QVector_QHstsPolicy_lastIndexOf1(QVector< QHstsPolicy > const * this_ptr, QHstsPolicy const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QVector< QOcspResponse > * ctr_qt_network_ffi_QVector_QOcspResponse_mid1(QVector< QOcspResponse > const * this_ptr, int pos) {
  return new QVector< QOcspResponse >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QSslError > * ctr_qt_network_ffi_QVector_QSslError_mid1(QVector< QSslError > const * this_ptr, int pos) {
  return new QVector< QSslError >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QSslEllipticCurve > * ctr_qt_network_ffi_QVector_QSslEllipticCurve_mid1(QVector< QSslEllipticCurve > const * this_ptr, int pos) {
  return new QVector< QSslEllipticCurve >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QHstsPolicy > * ctr_qt_network_ffi_QVector_QHstsPolicy_mid1(QVector< QHstsPolicy > const * this_ptr, int pos) {
  return new QVector< QHstsPolicy >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash31(QVector< QOcspResponse > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash32(QVector< QSslError > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash33(QVector< QSslEllipticCurve > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_indexOf1(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_indexOf1(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_indexOf1(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_indexOf1(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_indexOf1(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_indexOf1(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_indexOf1(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_indexOf1(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_indexOf1(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_lastIndexOf1(QList< QPair< QByteArray, QByteArray > > const * this_ptr, QPair< QByteArray, QByteArray > const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCertificate_lastIndexOf1(QList< QSslCertificate > const * this_ptr, QSslCertificate const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslError_lastIndexOf1(QList< QSslError > const * this_ptr, QSslError const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QSslCipher_lastIndexOf1(QList< QSslCipher > const * this_ptr, QSslCipher const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QHostAddress_lastIndexOf1(QList< QHostAddress > const * this_ptr, QHostAddress const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkConfiguration_lastIndexOf1(QList< QNetworkConfiguration > const * this_ptr, QNetworkConfiguration const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkCookie_lastIndexOf1(QList< QNetworkCookie > const * this_ptr, QNetworkCookie const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkAddressEntry_lastIndexOf1(QList< QNetworkAddressEntry > const * this_ptr, QNetworkAddressEntry const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_network_ffi_QList_QNetworkProxy_lastIndexOf1(QList< QNetworkProxy > const * this_ptr, QNetworkProxy const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QList< QPair< QByteArray, QByteArray > > * ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_mid1(QList< QPair< QByteArray, QByteArray > > const * this_ptr, int pos) {
  return new QList< QPair< QByteArray, QByteArray > >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QDnsDomainNameRecord > * ctr_qt_network_ffi_QList_QDnsDomainNameRecord_mid1(QList< QDnsDomainNameRecord > const * this_ptr, int pos) {
  return new QList< QDnsDomainNameRecord >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QDnsHostAddressRecord > * ctr_qt_network_ffi_QList_QDnsHostAddressRecord_mid1(QList< QDnsHostAddressRecord > const * this_ptr, int pos) {
  return new QList< QDnsHostAddressRecord >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QDnsMailExchangeRecord > * ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_mid1(QList< QDnsMailExchangeRecord > const * this_ptr, int pos) {
  return new QList< QDnsMailExchangeRecord >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QDnsServiceRecord > * ctr_qt_network_ffi_QList_QDnsServiceRecord_mid1(QList< QDnsServiceRecord > const * this_ptr, int pos) {
  return new QList< QDnsServiceRecord >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QDnsTextRecord > * ctr_qt_network_ffi_QList_QDnsTextRecord_mid1(QList< QDnsTextRecord > const * this_ptr, int pos) {
  return new QList< QDnsTextRecord >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QSslCertificateExtension > * ctr_qt_network_ffi_QList_QSslCertificateExtension_mid1(QList< QSslCertificateExtension > const * this_ptr, int pos) {
  return new QList< QSslCertificateExtension >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QList_QSslCertificate_mid1(QList< QSslCertificate > const * this_ptr, int pos) {
  return new QList< QSslCertificate >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QList_QSslError_mid1(QList< QSslError > const * this_ptr, int pos) {
  return new QList< QSslError >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QSslCipher > * ctr_qt_network_ffi_QList_QSslCipher_mid1(QList< QSslCipher > const * this_ptr, int pos) {
  return new QList< QSslCipher >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QHostAddress > * ctr_qt_network_ffi_QList_QHostAddress_mid1(QList< QHostAddress > const * this_ptr, int pos) {
  return new QList< QHostAddress >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QList_QNetworkConfiguration_mid1(QList< QNetworkConfiguration > const * this_ptr, int pos) {
  return new QList< QNetworkConfiguration >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QNetworkCookie > * ctr_qt_network_ffi_QList_QNetworkCookie_mid1(QList< QNetworkCookie > const * this_ptr, int pos) {
  return new QList< QNetworkCookie >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QNetworkAddressEntry > * ctr_qt_network_ffi_QList_QNetworkAddressEntry_mid1(QList< QNetworkAddressEntry > const * this_ptr, int pos) {
  return new QList< QNetworkAddressEntry >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QNetworkInterface > * ctr_qt_network_ffi_QList_QNetworkInterface_mid1(QList< QNetworkInterface > const * this_ptr, int pos) {
  return new QList< QNetworkInterface >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QList_QNetworkProxy_mid1(QList< QNetworkProxy > const * this_ptr, int pos) {
  return new QList< QNetworkProxy >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash35(QList< QPair< QByteArray, QByteArray > > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash42(QList< QSslCertificate > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash43(QList< QSslError > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash45(QList< QHostAddress > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QMap_QByteArray_QVariant_key1(QMap< QByteArray, QVariant > const * this_ptr, QVariant const * value) {
  return new QByteArray(this_ptr->key(*value));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QMap_QByteArray_QVariant_value1(QMap< QByteArray, QVariant > const * this_ptr, QByteArray const * key) {
  return new QVariant(this_ptr->value(*key));
}


RITUAL_EXPORT QVariant * ctr_qt_network_ffi_QNetworkRequest_attribute1(QNetworkRequest const * this_ptr, QNetworkRequest::Attribute code) {
  return new QVariant(this_ptr->attribute(code));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkRequest_setTransferTimeout1(QNetworkRequest * this_ptr) {
  this_ptr->setTransferTimeout();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind2(QAbstractSocket * this_ptr, QHostAddress const * address, quint16 port) {
  return this_ptr->bind(*address, port);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind3(QAbstractSocket * this_ptr, QHostAddress const * address) {
  return this_ptr->bind(*address);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind4(QAbstractSocket * this_ptr, quint16 port) {
  return this_ptr->bind(port);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_bind5(QAbstractSocket * this_ptr) {
  return this_ptr->bind();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_connectToHost2(QAbstractSocket * this_ptr, QString const * hostName, quint16 port, int mode) {
  this_ptr->connectToHost(*hostName, port, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_connectToHost3(QAbstractSocket * this_ptr, QString const * hostName, quint16 port) {
  this_ptr->connectToHost(*hostName, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QAbstractSocket_connectToHost4(QAbstractSocket * this_ptr, QHostAddress const * address, quint16 port) {
  this_ptr->connectToHost(*address, port);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor1(QAbstractSocket * this_ptr, qintptr socketDescriptor, QAbstractSocket::SocketState state) {
  return this_ptr->setSocketDescriptor(socketDescriptor, state);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor2(QAbstractSocket * this_ptr, qintptr socketDescriptor) {
  return this_ptr->setSocketDescriptor(socketDescriptor);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForConnected1(QAbstractSocket * this_ptr) {
  return this_ptr->waitForConnected();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForReadyRead1(QAbstractSocket * this_ptr) {
  return this_ptr->waitForReadyRead();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForBytesWritten1(QAbstractSocket * this_ptr) {
  return this_ptr->waitForBytesWritten();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QAbstractSocket_waitForDisconnected1(QAbstractSocket * this_ptr) {
  return this_ptr->waitForDisconnected();
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup5(QDnsLookup::Type type, QString const * name) {
  return new QDnsLookup(type, *name);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_QDnsLookup_QDnsLookup6(QDnsLookup::Type type, QString const * name, QHostAddress const * nameserver) {
  return new QDnsLookup(type, *name, *nameserver);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash52(QSslCertificate const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate4(QIODevice * device) {
  return new QSslCertificate(device);
}


RITUAL_EXPORT QSslCertificate * ctr_qt_network_ffi_QSslCertificate_QSslCertificate5(QByteArray const * data) {
  return new QSslCertificate(*data);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslCertificate_digest1(QSslCertificate const * this_ptr) {
  return new QByteArray(this_ptr->digest());
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromPath2(QString const * path, QSsl::EncodingFormat format) {
  return new QList< QSslCertificate >(QSslCertificate::fromPath(*path, format));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromPath3(QString const * path) {
  return new QList< QSslCertificate >(QSslCertificate::fromPath(*path));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromDevice1(QIODevice * device) {
  return new QList< QSslCertificate >(QSslCertificate::fromDevice(device));
}


RITUAL_EXPORT QList< QSslCertificate > * ctr_qt_network_ffi_QSslCertificate_fromData1(QByteArray const * data) {
  return new QList< QSslCertificate >(QSslCertificate::fromData(*data));
}


RITUAL_EXPORT QList< QSslError > * ctr_qt_network_ffi_QSslCertificate_verify1(QList< QSslCertificate > const * certificateChain) {
  return new QList< QSslError >(QSslCertificate::verify(*certificateChain));
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_importPkcs121(QIODevice * device, QSslKey * key, QSslCertificate * cert, QList< QSslCertificate > * caCertificates) {
  return QSslCertificate::importPkcs12(device, key, cert, caCertificates);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslCertificate_importPkcs122(QIODevice * device, QSslKey * key, QSslCertificate * cert) {
  return QSslCertificate::importPkcs12(device, key, cert);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash53(QSslError const * key) {
  return qHash(*key);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted2(QSslSocket * this_ptr, QString const * hostName, quint16 port, int mode) {
  this_ptr->connectToHostEncrypted(*hostName, port, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted3(QSslSocket * this_ptr, QString const * hostName, quint16 port) {
  this_ptr->connectToHostEncrypted(*hostName, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted4(QSslSocket * this_ptr, QString const * hostName, quint16 port, QString const * sslPeerName, int mode) {
  this_ptr->connectToHostEncrypted(*hostName, port, *sslPeerName, QFlags< QIODevice::OpenModeFlag >(mode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted5(QSslSocket * this_ptr, QString const * hostName, quint16 port, QString const * sslPeerName) {
  this_ptr->connectToHostEncrypted(*hostName, port, *sslPeerName);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_setSocketDescriptor1(QSslSocket * this_ptr, qintptr socketDescriptor, QAbstractSocket::SocketState state) {
  return this_ptr->setSocketDescriptor(socketDescriptor, state);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_setSocketDescriptor2(QSslSocket * this_ptr, qintptr socketDescriptor) {
  return this_ptr->setSocketDescriptor(socketDescriptor);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHost1(QSslSocket * this_ptr, QString const * hostName, quint16 port, int openMode) {
  this_ptr->connectToHost(*hostName, port, QFlags< QIODevice::OpenModeFlag >(openMode));
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_connectToHost2(QSslSocket * this_ptr, QString const * hostName, quint16 port) {
  this_ptr->connectToHost(*hostName, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setLocalCertificate2(QSslSocket * this_ptr, QString const * fileName) {
  this_ptr->setLocalCertificate(*fileName);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPrivateKey2(QSslSocket * this_ptr, QString const * fileName, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format) {
  this_ptr->setPrivateKey(*fileName, algorithm, format);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPrivateKey3(QSslSocket * this_ptr, QString const * fileName, QSsl::KeyAlgorithm algorithm) {
  this_ptr->setPrivateKey(*fileName, algorithm);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslSocket_setPrivateKey4(QSslSocket * this_ptr, QString const * fileName) {
  this_ptr->setPrivateKey(*fileName);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addCaCertificates2(QSslSocket * this_ptr, QString const * path, QSsl::EncodingFormat format) {
  return this_ptr->addCaCertificates(*path, format);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addCaCertificates3(QSslSocket * this_ptr, QString const * path) {
  return this_ptr->addCaCertificates(*path);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates2(QString const * path, QSsl::EncodingFormat format) {
  return QSslSocket::addDefaultCaCertificates(*path, format);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates3(QString const * path) {
  return QSslSocket::addDefaultCaCertificates(*path);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForConnected1(QSslSocket * this_ptr) {
  return this_ptr->waitForConnected();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForEncrypted1(QSslSocket * this_ptr) {
  return this_ptr->waitForEncrypted();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForReadyRead1(QSslSocket * this_ptr) {
  return this_ptr->waitForReadyRead();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForBytesWritten1(QSslSocket * this_ptr) {
  return this_ptr->waitForBytesWritten();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslSocket_waitForDisconnected1(QSslSocket * this_ptr) {
  return this_ptr->waitForDisconnected();
}


RITUAL_EXPORT QDtls * ctr_qt_network_ffi_QDtls_QDtls2(QSslSocket::SslMode mode) {
  return new QDtls(mode);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_setPeer1(QDtls * this_ptr, QHostAddress const * address, quint16 port) {
  return this_ptr->setPeer(*address, port);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QDtls_doHandshake1(QDtls * this_ptr, QUdpSocket * socket) {
  return this_ptr->doHandshake(socket);
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash54(QHostAddress const * key) {
  return qHash(*key);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QHostAddress_isEqual1(QHostAddress const * this_ptr, QHostAddress const * address) {
  return this_ptr->isEqual(*address);
}


RITUAL_EXPORT QHstsPolicy * ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy3(QDateTime const * expiry, int flags, QString const * host) {
  return new QHstsPolicy(*expiry, QFlags< QHstsPolicy::PolicyFlag >(flags), *host);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QHstsPolicy_setHost1(QHstsPolicy * this_ptr, QString const * host) {
  this_ptr->setHost(*host);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_QHstsPolicy_host1(QHstsPolicy const * this_ptr) {
  return new QString(this_ptr->host());
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart3(QHttpMultiPart::ContentType contentType) {
  return new QHttpMultiPart(contentType);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_waitForNewConnection1(QLocalServer * this_ptr, int msec) {
  return this_ptr->waitForNewConnection(msec);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalServer_waitForNewConnection2(QLocalServer * this_ptr) {
  return this_ptr->waitForNewConnection();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_connectToServer2(QLocalSocket * this_ptr) {
  this_ptr->connectToServer();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QLocalSocket_connectToServer3(QLocalSocket * this_ptr, QString const * name) {
  this_ptr->connectToServer(*name);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_open1(QLocalSocket * this_ptr) {
  return this_ptr->open();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor1(QLocalSocket * this_ptr, qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState) {
  return this_ptr->setSocketDescriptor(socketDescriptor, socketState);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor2(QLocalSocket * this_ptr, qintptr socketDescriptor) {
  return this_ptr->setSocketDescriptor(socketDescriptor);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForBytesWritten1(QLocalSocket * this_ptr) {
  return this_ptr->waitForBytesWritten();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForConnected1(QLocalSocket * this_ptr) {
  return this_ptr->waitForConnected();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForDisconnected1(QLocalSocket * this_ptr) {
  return this_ptr->waitForDisconnected();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QLocalSocket_waitForReadyRead1(QLocalSocket * this_ptr) {
  return this_ptr->waitForReadyRead();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_addCaCertificates2(QSslConfiguration * this_ptr, QString const * path, QSsl::EncodingFormat format) {
  return this_ptr->addCaCertificates(*path, format);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QSslConfiguration_addCaCertificates3(QSslConfiguration * this_ptr, QString const * path) {
  return this_ptr->addCaCertificates(*path);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QSslConfiguration_setBackendConfiguration1(QSslConfiguration * this_ptr) {
  this_ptr->setBackendConfiguration();
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_enableStrictTransportSecurityStore1(QNetworkAccessManager * this_ptr, bool enabled) {
  this_ptr->enableStrictTransportSecurityStore(enabled);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest3(QNetworkAccessManager * this_ptr, QNetworkRequest const * request, QByteArray const * verb) {
  return this_ptr->sendCustomRequest(*request, *verb);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted2(QNetworkAccessManager * this_ptr, QString const * hostName, quint16 port) {
  this_ptr->connectToHostEncrypted(*hostName, port);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted3(QNetworkAccessManager * this_ptr, QString const * hostName) {
  this_ptr->connectToHostEncrypted(*hostName);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_connectToHost1(QNetworkAccessManager * this_ptr, QString const * hostName) {
  this_ptr->connectToHost(*hostName);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkAccessManager_setTransferTimeout1(QNetworkAccessManager * this_ptr) {
  this_ptr->setTransferTimeout();
}


RITUAL_EXPORT QList< QNetworkConfiguration > * ctr_qt_network_ffi_QNetworkConfigurationManager_allConfigurations1(QNetworkConfigurationManager const * this_ptr) {
  return new QList< QNetworkConfiguration >(this_ptr->allConfigurations());
}


RITUAL_EXPORT QNetworkCookie * ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie3(QByteArray const * name) {
  return new QNetworkCookie(*name);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QNetworkCookie_toRawForm1(QNetworkCookie const * this_ptr) {
  return new QByteArray(this_ptr->toRawForm());
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram4(QByteArray const * data, QHostAddress const * destinationAddress) {
  return new QNetworkDatagram(*data, *destinationAddress);
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram5(QByteArray const * data) {
  return new QNetworkDatagram(*data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_QNetworkDatagram_setSender1(QNetworkDatagram * this_ptr, QHostAddress const * address) {
  this_ptr->setSender(*address);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery8(QUrl const * requestUrl) {
  return new QNetworkProxyQuery(*requestUrl);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery9(QString const * hostname, int port, QString const * protocolTag) {
  return new QNetworkProxyQuery(*hostname, port, *protocolTag);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery10(QString const * hostname, int port) {
  return new QNetworkProxyQuery(*hostname, port);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery11(quint16 bindPort, QString const * protocolTag) {
  return new QNetworkProxyQuery(bindPort, *protocolTag);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery12(quint16 bindPort) {
  return new QNetworkProxyQuery(bindPort);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery13(QNetworkConfiguration const * networkConfiguration, QUrl const * requestUrl) {
  return new QNetworkProxyQuery(*networkConfiguration, *requestUrl);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery14(QNetworkConfiguration const * networkConfiguration, QString const * hostname, int port, QString const * protocolTag) {
  return new QNetworkProxyQuery(*networkConfiguration, *hostname, port, *protocolTag);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery15(QNetworkConfiguration const * networkConfiguration, QString const * hostname, int port) {
  return new QNetworkProxyQuery(*networkConfiguration, *hostname, port);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery16(QNetworkConfiguration const * networkConfiguration, quint16 bindPort, QString const * protocolTag) {
  return new QNetworkProxyQuery(*networkConfiguration, bindPort, *protocolTag);
}


RITUAL_EXPORT QNetworkProxyQuery * ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery17(QNetworkConfiguration const * networkConfiguration, quint16 bindPort) {
  return new QNetworkProxyQuery(*networkConfiguration, bindPort);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy3(QNetworkProxy::ProxyType type, QString const * hostName, quint16 port, QString const * user) {
  return new QNetworkProxy(type, *hostName, port, *user);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy4(QNetworkProxy::ProxyType type, QString const * hostName, quint16 port) {
  return new QNetworkProxy(type, *hostName, port);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy5(QNetworkProxy::ProxyType type, QString const * hostName) {
  return new QNetworkProxy(type, *hostName);
}


RITUAL_EXPORT QNetworkProxy * ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy6(QNetworkProxy::ProxyType type) {
  return new QNetworkProxy(type);
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QNetworkProxyFactory_queryProxy1(QNetworkProxyFactory * this_ptr) {
  return new QList< QNetworkProxy >(this_ptr->queryProxy());
}


RITUAL_EXPORT QList< QNetworkProxy > * ctr_qt_network_ffi_QNetworkProxyFactory_systemProxyForQuery1() {
  return new QList< QNetworkProxy >(QNetworkProxyFactory::systemProxyForQuery());
}


RITUAL_EXPORT QNetworkSession * ctr_qt_network_ffi_QNetworkSession_QNetworkSession2(QNetworkConfiguration const * connConfig) {
  return new QNetworkSession(*connConfig);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QNetworkSession_waitForOpened1(QNetworkSession * this_ptr) {
  return this_ptr->waitForOpened();
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash55(QOcspResponse const * response) {
  return qHash(*response);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_listen1(QTcpServer * this_ptr, QHostAddress const * address) {
  return this_ptr->listen(*address);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_listen2(QTcpServer * this_ptr) {
  return this_ptr->listen();
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_waitForNewConnection1(QTcpServer * this_ptr, int msec) {
  return this_ptr->waitForNewConnection(msec);
}


RITUAL_EXPORT bool ctr_qt_network_ffi_QTcpServer_waitForNewConnection2(QTcpServer * this_ptr) {
  return this_ptr->waitForNewConnection();
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash56(QSslDiffieHellmanParameters const * dhparam) {
  return qHash(*dhparam);
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded2(QByteArray const * encoded) {
  return new QSslDiffieHellmanParameters(QSslDiffieHellmanParameters::fromEncoded(*encoded));
}


RITUAL_EXPORT QSslDiffieHellmanParameters * ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded3(QIODevice * device) {
  return new QSslDiffieHellmanParameters(QSslDiffieHellmanParameters::fromEncoded(device));
}


RITUAL_EXPORT unsigned int ctr_qt_network_ffi_qHash57(QSslEllipticCurve const * curve) {
  return qHash(*curve);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey6(QByteArray const * encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, QSsl::KeyType type) {
  return new QSslKey(*encoded, algorithm, format, type);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey7(QByteArray const * encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format) {
  return new QSslKey(*encoded, algorithm, format);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey8(QByteArray const * encoded, QSsl::KeyAlgorithm algorithm) {
  return new QSslKey(*encoded, algorithm);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey9(QIODevice * device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, QSsl::KeyType type) {
  return new QSslKey(device, algorithm, format, type);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey10(QIODevice * device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format) {
  return new QSslKey(device, algorithm, format);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey11(QIODevice * device, QSsl::KeyAlgorithm algorithm) {
  return new QSslKey(device, algorithm);
}


RITUAL_EXPORT QSslKey * ctr_qt_network_ffi_QSslKey_QSslKey12(void * handle) {
  return new QSslKey(handle);
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslKey_toPem1(QSslKey const * this_ptr) {
  return new QByteArray(this_ptr->toPem());
}


RITUAL_EXPORT QByteArray * ctr_qt_network_ffi_QSslKey_toDer1(QSslKey const * this_ptr) {
  return new QByteArray(this_ptr->toDer());
}


RITUAL_EXPORT QNetworkDatagram * ctr_qt_network_ffi_QUdpSocket_receiveDatagram1(QUdpSocket * this_ptr) {
  return new QNetworkDatagram(this_ptr->receiveDatagram());
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_readDatagram1(QUdpSocket * this_ptr, char * data, qint64 maxlen, QHostAddress * host) {
  return this_ptr->readDatagram(data, maxlen, host);
}


RITUAL_EXPORT qint64 ctr_qt_network_ffi_QUdpSocket_readDatagram2(QUdpSocket * this_ptr, char * data, qint64 maxlen) {
  return this_ptr->readDatagram(data, maxlen);
}


RITUAL_EXPORT QAbstractNetworkCache * ctr_qt_network_ffi_static_cast_QAbstractNetworkCache_ptr(QObject * ptr) {
  return static_cast< QAbstractNetworkCache * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr(QAbstractNetworkCache * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractNetworkCache * ctr_qt_network_ffi_dynamic_cast_QAbstractNetworkCache_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractNetworkCache * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr(QIODevice * ptr) {
  return static_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr(QAbstractSocket * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_dynamic_cast_QAbstractSocket_ptr(QIODevice * ptr) {
  return dynamic_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr1(QObject * ptr) {
  return static_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr1(QAbstractSocket * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_dynamic_cast_QAbstractSocket_ptr1(QObject * ptr) {
  return dynamic_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_static_cast_QDnsLookup_ptr(QObject * ptr) {
  return static_cast< QDnsLookup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr2(QDnsLookup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QDnsLookup * ctr_qt_network_ffi_dynamic_cast_QDnsLookup_ptr(QObject * ptr) {
  return dynamic_cast< QDnsLookup * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_static_cast_QTcpSocket_ptr(QAbstractSocket * ptr) {
  return static_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr2(QTcpSocket * ptr) {
  return static_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr(QAbstractSocket * ptr) {
  return dynamic_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_static_cast_QTcpSocket_ptr1(QIODevice * ptr) {
  return static_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr1(QTcpSocket * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr1(QIODevice * ptr) {
  return dynamic_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_static_cast_QTcpSocket_ptr2(QObject * ptr) {
  return static_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr3(QTcpSocket * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr2(QObject * ptr) {
  return dynamic_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_static_cast_QSslSocket_ptr(QTcpSocket * ptr) {
  return static_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QTcpSocket * ctr_qt_network_ffi_static_cast_QTcpSocket_ptr3(QSslSocket * ptr) {
  return static_cast< QTcpSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr(QTcpSocket * ptr) {
  return dynamic_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_static_cast_QSslSocket_ptr1(QAbstractSocket * ptr) {
  return static_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr3(QSslSocket * ptr) {
  return static_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr1(QAbstractSocket * ptr) {
  return dynamic_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_static_cast_QSslSocket_ptr2(QIODevice * ptr) {
  return static_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr2(QSslSocket * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr2(QIODevice * ptr) {
  return dynamic_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_static_cast_QSslSocket_ptr3(QObject * ptr) {
  return static_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr4(QSslSocket * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSslSocket * ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr3(QObject * ptr) {
  return dynamic_cast< QSslSocket * >(ptr);
}


RITUAL_EXPORT QDtlsClientVerifier * ctr_qt_network_ffi_static_cast_QDtlsClientVerifier_ptr(QObject * ptr) {
  return static_cast< QDtlsClientVerifier * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr5(QDtlsClientVerifier * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QDtlsClientVerifier * ctr_qt_network_ffi_dynamic_cast_QDtlsClientVerifier_ptr(QObject * ptr) {
  return dynamic_cast< QDtlsClientVerifier * >(ptr);
}


RITUAL_EXPORT QDtls * ctr_qt_network_ffi_static_cast_QDtls_ptr(QObject * ptr) {
  return static_cast< QDtls * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr6(QDtls * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QDtls * ctr_qt_network_ffi_dynamic_cast_QDtls_ptr(QObject * ptr) {
  return dynamic_cast< QDtls * >(ptr);
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_static_cast_QHttpMultiPart_ptr(QObject * ptr) {
  return static_cast< QHttpMultiPart * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr7(QHttpMultiPart * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QHttpMultiPart * ctr_qt_network_ffi_dynamic_cast_QHttpMultiPart_ptr(QObject * ptr) {
  return dynamic_cast< QHttpMultiPart * >(ptr);
}


RITUAL_EXPORT QLocalServer * ctr_qt_network_ffi_static_cast_QLocalServer_ptr(QObject * ptr) {
  return static_cast< QLocalServer * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr8(QLocalServer * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QLocalServer * ctr_qt_network_ffi_dynamic_cast_QLocalServer_ptr(QObject * ptr) {
  return dynamic_cast< QLocalServer * >(ptr);
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_static_cast_QLocalSocket_ptr(QIODevice * ptr) {
  return static_cast< QLocalSocket * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr3(QLocalSocket * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_dynamic_cast_QLocalSocket_ptr(QIODevice * ptr) {
  return dynamic_cast< QLocalSocket * >(ptr);
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_static_cast_QLocalSocket_ptr1(QObject * ptr) {
  return static_cast< QLocalSocket * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr9(QLocalSocket * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QLocalSocket * ctr_qt_network_ffi_dynamic_cast_QLocalSocket_ptr1(QObject * ptr) {
  return dynamic_cast< QLocalSocket * >(ptr);
}


RITUAL_EXPORT QNetworkAccessManager * ctr_qt_network_ffi_static_cast_QNetworkAccessManager_ptr(QObject * ptr) {
  return static_cast< QNetworkAccessManager * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr10(QNetworkAccessManager * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkAccessManager * ctr_qt_network_ffi_dynamic_cast_QNetworkAccessManager_ptr(QObject * ptr) {
  return dynamic_cast< QNetworkAccessManager * >(ptr);
}


RITUAL_EXPORT QNetworkConfigurationManager * ctr_qt_network_ffi_static_cast_QNetworkConfigurationManager_ptr(QObject * ptr) {
  return static_cast< QNetworkConfigurationManager * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr11(QNetworkConfigurationManager * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkConfigurationManager * ctr_qt_network_ffi_dynamic_cast_QNetworkConfigurationManager_ptr(QObject * ptr) {
  return dynamic_cast< QNetworkConfigurationManager * >(ptr);
}


RITUAL_EXPORT QNetworkCookieJar * ctr_qt_network_ffi_static_cast_QNetworkCookieJar_ptr(QObject * ptr) {
  return static_cast< QNetworkCookieJar * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr12(QNetworkCookieJar * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkCookieJar * ctr_qt_network_ffi_dynamic_cast_QNetworkCookieJar_ptr(QObject * ptr) {
  return dynamic_cast< QNetworkCookieJar * >(ptr);
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_static_cast_QNetworkDiskCache_ptr(QAbstractNetworkCache * ptr) {
  return static_cast< QNetworkDiskCache * >(ptr);
}


RITUAL_EXPORT QAbstractNetworkCache * ctr_qt_network_ffi_static_cast_QAbstractNetworkCache_ptr1(QNetworkDiskCache * ptr) {
  return static_cast< QAbstractNetworkCache * >(ptr);
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_dynamic_cast_QNetworkDiskCache_ptr(QAbstractNetworkCache * ptr) {
  return dynamic_cast< QNetworkDiskCache * >(ptr);
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_static_cast_QNetworkDiskCache_ptr1(QObject * ptr) {
  return static_cast< QNetworkDiskCache * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr13(QNetworkDiskCache * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkDiskCache * ctr_qt_network_ffi_dynamic_cast_QNetworkDiskCache_ptr1(QObject * ptr) {
  return dynamic_cast< QNetworkDiskCache * >(ptr);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_static_cast_QNetworkReply_ptr(QIODevice * ptr) {
  return static_cast< QNetworkReply * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr4(QNetworkReply * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_dynamic_cast_QNetworkReply_ptr(QIODevice * ptr) {
  return dynamic_cast< QNetworkReply * >(ptr);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_static_cast_QNetworkReply_ptr1(QObject * ptr) {
  return static_cast< QNetworkReply * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr14(QNetworkReply * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkReply * ctr_qt_network_ffi_dynamic_cast_QNetworkReply_ptr1(QObject * ptr) {
  return dynamic_cast< QNetworkReply * >(ptr);
}


RITUAL_EXPORT QNetworkSession * ctr_qt_network_ffi_static_cast_QNetworkSession_ptr(QObject * ptr) {
  return static_cast< QNetworkSession * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr15(QNetworkSession * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QNetworkSession * ctr_qt_network_ffi_dynamic_cast_QNetworkSession_ptr(QObject * ptr) {
  return dynamic_cast< QNetworkSession * >(ptr);
}


RITUAL_EXPORT QTcpServer * ctr_qt_network_ffi_static_cast_QTcpServer_ptr(QObject * ptr) {
  return static_cast< QTcpServer * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr16(QTcpServer * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTcpServer * ctr_qt_network_ffi_dynamic_cast_QTcpServer_ptr(QObject * ptr) {
  return dynamic_cast< QTcpServer * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_static_cast_QUdpSocket_ptr(QAbstractSocket * ptr) {
  return static_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QAbstractSocket * ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr4(QUdpSocket * ptr) {
  return static_cast< QAbstractSocket * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr(QAbstractSocket * ptr) {
  return dynamic_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_static_cast_QUdpSocket_ptr1(QIODevice * ptr) {
  return static_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QIODevice * ctr_qt_network_ffi_static_cast_QIODevice_ptr5(QUdpSocket * ptr) {
  return static_cast< QIODevice * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr1(QIODevice * ptr) {
  return dynamic_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_static_cast_QUdpSocket_ptr2(QObject * ptr) {
  return static_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr17(QUdpSocket * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QUdpSocket * ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr2(QObject * ptr) {
  return dynamic_cast< QUdpSocket * >(ptr);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_metaObject(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(QObject * parent, void (*callback)(void *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_set(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, void (*callback)(void *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_slot_(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QSslPreSharedKeyAuthenticator * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_metaObject(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr() {
  return new ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_emit_(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QSslPreSharedKeyAuthenticator * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(QObject * parent, void (*callback)(void *, QNetworkProxy const *, QAuthenticator *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_set(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, void (*callback)(void *, QNetworkProxy const *, QAuthenticator *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, QNetworkProxy const * arg0, QAuthenticator * arg1) {
  this_ptr->slot_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr, QNetworkProxy const * arg0, QAuthenticator * arg1) {
  this_ptr->emit_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_metaObject(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(QObject * parent, void (*callback)(void *, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_set(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, void (*callback)(void *, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_slot_(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, int arg0) {
  this_ptr->slot_(QFlags< QNetworkSession::UsagePolicy >(arg0));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_metaObject(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy() {
  return new ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_emit_(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr, int arg0) {
  this_ptr->emit_(QFlags< QNetworkSession::UsagePolicy >(arg0));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(QObject * parent, void (*callback)(void *, QNetworkReply *, QAuthenticator *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_set(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, void (*callback)(void *, QNetworkReply *, QAuthenticator *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, QNetworkReply * arg0, QAuthenticator * arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr, QNetworkReply * arg0, QAuthenticator * arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(QObject * parent, void (*callback)(void *, QNetworkAccessManager::NetworkAccessibility), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_set(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, void (*callback)(void *, QNetworkAccessManager::NetworkAccessibility), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, QNetworkAccessManager::NetworkAccessibility arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr, QNetworkAccessManager::NetworkAccessibility arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(QObject * parent, void (*callback)(void *, QNetworkReply::NetworkError), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_set(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * this_ptr, void (*callback)(void *, QNetworkReply::NetworkError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * this_ptr, QNetworkReply::NetworkError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * this_ptr, QNetworkReply::NetworkError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(QObject * parent, void (*callback)(void *, QNetworkReply *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_set(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, void (*callback)(void *, QNetworkReply *, QSslPreSharedKeyAuthenticator *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QNetworkReply * arg0, QSslPreSharedKeyAuthenticator * arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr, QNetworkReply * arg0, QSslPreSharedKeyAuthenticator * arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(QObject * parent, void (*callback)(void *, QUrl const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * this_ptr, void (*callback)(void *, QUrl const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * this_ptr, QUrl const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * this_ptr, QUrl const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_metaObject(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(QObject * parent, void (*callback)(void *, QLocalSocket::LocalSocketError), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_set(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * this_ptr, void (*callback)(void *, QLocalSocket::LocalSocketError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_slot_(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * this_ptr, QLocalSocket::LocalSocketError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_metaObject(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError() {
  return new ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_emit_(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * this_ptr, QLocalSocket::LocalSocketError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(QObject * parent, void (*callback)(void *, QHostAddress const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * this_ptr, void (*callback)(void *, QHostAddress const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * this_ptr, QHostAddress const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * this_ptr, QHostAddress const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(QObject * parent, void (*callback)(void *, QNetworkSession::SessionError), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_set(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * this_ptr, void (*callback)(void *, QNetworkSession::SessionError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * this_ptr, QNetworkSession::SessionError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * this_ptr, QNetworkSession::SessionError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_metaObject(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(QObject * parent, void (*callback)(void *, QLocalSocket::LocalSocketState), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_set(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * this_ptr, void (*callback)(void *, QLocalSocket::LocalSocketState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_slot_(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * this_ptr, QLocalSocket::LocalSocketState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_metaObject(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState() {
  return new ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_emit_(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * this_ptr, QLocalSocket::LocalSocketState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_metaObject(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(QObject * parent, void (*callback)(void *, QAbstractSocket::SocketState), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_set(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * this_ptr, void (*callback)(void *, QAbstractSocket::SocketState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_slot_(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * this_ptr, QAbstractSocket::SocketState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_metaObject(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState() {
  return new ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_emit_(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * this_ptr, QAbstractSocket::SocketState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(QObject * parent, void (*callback)(void *, QList< QSslError > const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * this_ptr, void (*callback)(void *, QList< QSslError > const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * this_ptr, QList< QSslError > const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * this_ptr, QList< QSslError > const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(QObject * parent, void (*callback)(void *, QNetworkProxy const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * this_ptr, void (*callback)(void *, QNetworkProxy const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * this_ptr, QNetworkProxy const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * this_ptr, QNetworkProxy const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(QObject * parent, void (*callback)(void *, QNetworkReply *, QList< QSslError > const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, void (*callback)(void *, QNetworkReply *, QList< QSslError > const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, QNetworkReply * arg0, QList< QSslError > const * arg1) {
  this_ptr->slot_(arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr, QNetworkReply * arg0, QList< QSslError > const * arg1) {
  this_ptr->emit_(arg0, *arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_metaObject(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(QObject * parent, void (*callback)(void *, QSslSocket::SslMode), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_set(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * this_ptr, void (*callback)(void *, QSslSocket::SslMode), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_slot_(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * this_ptr, QSslSocket::SslMode arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_metaObject(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode() {
  return new ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_emit_(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * this_ptr, QSslSocket::SslMode arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(QObject * parent, void (*callback)(void *, QSslError const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * this_ptr, void (*callback)(void *, QSslError const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * this_ptr, QSslError const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * this_ptr, QSslError const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(QObject * parent, void (*callback)(void *, QNetworkSession::State), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_set(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * this_ptr, void (*callback)(void *, QNetworkSession::State), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * this_ptr, QNetworkSession::State arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * this_ptr, QNetworkSession::State arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_qint64_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_metaObject(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_qt_metacast(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_qt_metacall(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_qint64_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_qint64_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ctr_qt_network_ffi_slot_wrapper_qint64_qint64(QObject * parent, void (*callback)(void *, qint64, qint64), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_qint64_qint64(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_set(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * this_ptr, void (*callback)(void *, qint64, qint64), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_slot_(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * this_ptr, qint64 arg0, qint64 arg1) {
  this_ptr->slot_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_qint64_qint64::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_metaObject(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_qt_metacast(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_qt_metacall(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_qint64_qint64::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_qint64_qint64::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ctr_qt_network_ffi_signal_wrapper_qint64_qint64() {
  return new ctr_qt_network_ffi_signal_wrapper_qint64_qint64();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_emit_(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * this_ptr, qint64 arg0, qint64 arg1) {
  this_ptr->emit_(arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(QObject * parent, void (*callback)(void *, QNetworkConfiguration const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_set(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * this_ptr, void (*callback)(void *, QNetworkConfiguration const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * this_ptr, QNetworkConfiguration const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * this_ptr, QNetworkConfiguration const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(QObject * parent, void (*callback)(void *, QNetworkConfiguration const *, bool), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_set(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, void (*callback)(void *, QNetworkConfiguration const *, bool), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, QNetworkConfiguration const * arg0, bool arg1) {
  this_ptr->slot_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr, QNetworkConfiguration const * arg0, bool arg1) {
  this_ptr->emit_(*arg0, arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_metaObject(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(QObject * parent, void (*callback)(void *, QNetworkReply *), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_set(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * this_ptr, void (*callback)(void *, QNetworkReply *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_slot_(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * this_ptr, QNetworkReply * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_metaObject(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr() {
  return new ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_emit_(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * this_ptr, QNetworkReply * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_metaObject(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(QObject * parent, void (*callback)(void *, QDnsLookup::Type), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_set(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * this_ptr, void (*callback)(void *, QDnsLookup::Type), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_slot_(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * this_ptr, QDnsLookup::Type arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_metaObject(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type() {
  return new ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_emit_(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * this_ptr, QDnsLookup::Type arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_staticMetaObject() {
  return &ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_metaObject(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_qt_metacast(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_qt_metacall(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(QObject * parent, void (*callback)(void *, QAbstractSocket::SocketError), void (*deleter)(void *), void * data) {
  return new ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_set(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * this_ptr, void (*callback)(void *, QAbstractSocket::SocketError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_slot_(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * this_ptr, QAbstractSocket::SocketError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_staticMetaObject() {
  return &ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_metaObject(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_qt_metacast(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_qt_metacall(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError() {
  return new ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError();
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_emit_(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * this_ptr, QAbstractSocket::SocketError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_dctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_dctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_dctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_dctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_dctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_dctr_qt_network_ffi_signal_wrapper_QUrl_const_ref(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_dctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_dctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_dctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_dctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_dctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_dctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_dctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_dctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_dctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_dctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_dctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_dctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QSslError_const_ref(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_dctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_dctr_qt_network_ffi_signal_wrapper_QNetworkSession_State(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_dctr_qt_network_ffi_slot_wrapper_qint64_qint64(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_dctr_qt_network_ffi_signal_wrapper_qint64_qint64(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_dctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_dctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_dctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_dctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_dctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_dctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr36(ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr37(ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr38(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr39(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr40(ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr41(ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr42(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr43(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr44(ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr45(ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr46(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr47(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr48(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr49(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr50(ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr51(ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr52(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr53(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr54(ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr55(ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr56(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr57(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr58(ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr59(ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr60(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr61(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr62(ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr63(ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr64(ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr65(ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr66(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr67(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr68(ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr69(ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr70(ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr71(ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr72(ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr73(ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr74(ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_qint64_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr75(ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_qint64_qint64 * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr76(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr77(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr78(ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr79(ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr80(ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr81(ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr82(ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr83(ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr84(ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_network_ffi_static_cast_QObject_ptr85(ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError * >(ptr);
}


} // extern "C"
#include "file1.moc"
