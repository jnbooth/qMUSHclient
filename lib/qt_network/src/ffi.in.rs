extern "C" {

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QAbstractSocket_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDnsLookup_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QTcpSocket_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QSslError_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QSslSocket_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_hash(
        this_ptr: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> ::qt_core::q_cryptographic_hash::Algorithm;

    pub fn ctr_qt_network_ffi_set_QDtlsClientVerifier_GeneratorParameters_hash(
        this_ptr: *mut crate::q_dtls_client_verifier::GeneratorParameters,
        value: ::qt_core::q_cryptographic_hash::Algorithm,
    );

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_secret(
        this_ptr: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> *const ::qt_core::QByteArray;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_secret_mut(
        this_ptr: *mut crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> *mut ::qt_core::QByteArray;

    pub fn ctr_qt_network_ffi_set_QDtlsClientVerifier_GeneratorParameters_secret(
        this_ptr: *mut crate::q_dtls_client_verifier::GeneratorParameters,
        value: *const ::qt_core::QByteArray,
    );

    pub fn ctr_qt_network_ffi_QDtls_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QHttpMultiPart_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QLocalServer_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QLocalSocket_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkInterface_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkReply_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkSession_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QTcpServer_staticMetaObject() -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QUdpSocket_staticMetaObject() -> *const ::qt_core::QMetaObject;

    /// <p>Constructs a QNetworkRequest object with no URL to be requested. Use <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">setUrl</a>() to set one.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#QNetworkRequest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkRequest object with no URL to be requested. Use <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">setUrl</a>() to set one.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">url</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">setUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest() -> *mut crate::QNetworkRequest;

    /// <p>Constructs a QNetworkRequest object with <i>url</i> as the URL to be requested.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#QNetworkRequest-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkRequest object with <i>url</i> as the URL to be requested.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">url</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">setUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest1(
        url: *const ::qt_core::QUrl,
    ) -> *mut crate::QNetworkRequest;

    /// <p>Creates a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#QNetworkRequest-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_QNetworkRequest2(
        other: *const crate::QNetworkRequest,
    ) -> *mut crate::QNetworkRequest;

    /// <p>Disposes of the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#dtor.QNetworkRequest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Disposes of the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_dQNetworkRequest(
        this_ptr: *mut crate::QNetworkRequest,
    );

    pub fn ctr_qt_network_ffi_QNetworkRequest_operator_1(
        this_ptr: *mut crate::QNetworkRequest,
        other: *const crate::QNetworkRequest,
    ) -> *mut crate::QNetworkRequest;

    /// <p>Swaps this network request with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network request with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_swap(
        this_ptr: *mut crate::QNetworkRequest,
        other: *mut crate::QNetworkRequest,
    );

    /// <p>Returns <code>true</code> if this object is the same as <i>other</i> (i.e., if they have the same URL, same headers and same meta-data settings).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this object is the same as <i>other</i> (i.e., if they have the same URL, same headers and same meta-data settings).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_operator__(
        this_ptr: *const crate::QNetworkRequest,
        other: *const crate::QNetworkRequest,
    ) -> bool;

    /// <p>Returns the URL this network request is referring to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the URL this network request is referring to.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">setUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_url(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut ::qt_core::QUrl;

    /// <p>Sets the URL this network request is referring to be <i>url</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setUrl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the URL this network request is referring to be <i>url</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">url</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setUrl(
        this_ptr: *mut crate::QNetworkRequest,
        url: *const ::qt_core::QUrl,
    );

    /// <p>Returns the value of the known network header <i>header</i> if it is present in this request. If it is not present, returns QVariant() (i.e., an invalid variant).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#header">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value of the known network header <i>header</i> if it is present in this request. If it is not present, returns QVariant() (i.e., an invalid variant).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeader">rawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHeader">setHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_header(
        this_ptr: *const crate::QNetworkRequest,
        header: crate::q_network_request::KnownHeaders,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">setRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#header">header</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setHeader(
        this_ptr: *mut crate::QNetworkRequest,
        header: crate::q_network_request::KnownHeaders,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns <code>true</code> if the raw header <i>headerName</i> is present in this network request.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#hasRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the raw header <i>headerName</i> is present in this network request.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeader">rawHeader</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">setRawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_hasRawHeader(
        this_ptr: *const crate::QNetworkRequest,
        headerName: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>Returns a list of all raw headers that are set in this network request. The list is in the order that the headers were set.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeaderList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of all raw headers that are set in this network request. The list is in the order that the headers were set.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#hasRawHeader">hasRawHeader</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeader">rawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_rawHeaderList(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns the raw form of header <i>headerName</i>. If no such header is present, an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is returned, which may be indistinguishable from a header that is present but has no content (use <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#hasRawHeader">hasRawHeader</a>() to find out if the header exists or not).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the raw form of header <i>headerName</i>. If no such header is present, an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is returned, which may be indistinguishable from a header that is present but has no content (use <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#hasRawHeader">hasRawHeader</a>() to find out if the header exists or not).</p>
    /// <p>Raw headers can be set with <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">setRawHeader</a>() or with <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHeader">setHeader</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#header">header</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">setRawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_rawHeader(
        this_ptr: *const crate::QNetworkRequest,
        headerName: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    /// <p>For example:</p>
    /// <pre class="cpp"> request<span class="operator">.</span>setRawHeader(<span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span>(<span class="string">"Last-Modified"</span>)<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span>(<span class="string">"Sun, 06 Nov 1994 08:49:37 GMT"</span>));
    /// </pre>
    /// <p>will also set the known header <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">LastModifiedHeader</a> to be the <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> object of the parsed date.</p>
    /// <p><b>Note: </b>Setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (",") and set one single raw header.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHeader">setHeader</a>(), <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#hasRawHeader">hasRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#rawHeader">rawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setRawHeader(
        this_ptr: *mut crate::QNetworkRequest,
        headerName: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QByteArray,
    );

    /// <p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns <i>defaultValue</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#attribute">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns <i>defaultValue</i>.</p>
    /// <p><b>Note: </b>This function does not apply the defaults listed in <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setAttribute">setAttribute</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_attribute(
        this_ptr: *const crate::QNetworkRequest,
        code: crate::q_network_request::Attribute,
        defaultValue: *const ::qt_core::QVariant,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Sets the attribute associated with code <i>code</i> to be value <i>value</i>. If the attribute is already set, the previous value is discarded. In special, if <i>value</i> is an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>, the attribute is unset.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setAttribute">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the attribute associated with code <i>code</i> to be value <i>value</i>. If the attribute is already set, the previous value is discarded. In special, if <i>value</i> is an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>, the attribute is unset.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#attribute">attribute</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setAttribute(
        this_ptr: *mut crate::QNetworkRequest,
        code: crate::q_network_request::Attribute,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns this network request's SSL configuration. By default this is the same as <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#sslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this network request's SSL configuration. By default this is the same as <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setSslConfiguration">setSslConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_sslConfiguration(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Sets this network request's SSL configuration to be <i>config</i>. The settings that apply are the private key, the local certificate, the SSL protocol (SSLv2, SSLv3, TLSv1.0 where applicable), the CA certificates and the ciphers that the SSL backend is allowed to use.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setSslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets this network request's SSL configuration to be <i>config</i>. The settings that apply are the private key, the local certificate, the SSL protocol (SSLv2, SSLv3, TLSv1.0 where applicable), the CA certificates and the ciphers that the SSL backend is allowed to use.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#sslConfiguration">sslConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setSslConfiguration(
        this_ptr: *mut crate::QNetworkRequest,
        configuration: *const crate::QSslConfiguration,
    );

    /// <p>Allows setting a reference to the <i>object</i> initiating the request.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setOriginatingObject">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Allows setting a reference to the <i>object</i> initiating the request.</p>
    /// <p>For example Qt WebKit sets the originating object to the QWebFrame that initiated the request.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#originatingObject">originatingObject</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setOriginatingObject(
        this_ptr: *mut crate::QNetworkRequest,
        object: *mut ::qt_core::QObject,
    );

    /// <p>Returns a reference to the object that initiated this network request; returns <code>nullptr</code> if not set or the object has been destroyed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#originatingObject">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the object that initiated this network request; returns <code>nullptr</code> if not set or the object has been destroyed.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setOriginatingObject">setOriginatingObject</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_originatingObject(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut ::qt_core::QObject;

    /// <p>Return the priority of this request.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#priority">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Return the priority of this request.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPriority">setPriority</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_priority(
        this_ptr: *const crate::QNetworkRequest,
    ) -> crate::q_network_request::Priority;

    /// <p>Set the priority of this request to <i>priority</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPriority">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Set the priority of this request to <i>priority</i>.</p>
    /// <p><b>Note: </b>The <i>priority</i> is only a hint to the network access manager. It can use it or not. Currently it is used for HTTP to decide which request should be sent first to a server.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#priority">priority</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setPriority(
        this_ptr: *mut crate::QNetworkRequest,
        priority: crate::q_network_request::Priority,
    );

    /// <p>Returns the maximum number of redirects allowed to be followed for this request.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#maximumRedirectsAllowed">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of redirects allowed to be followed for this request.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setMaximumRedirectsAllowed">setMaximumRedirectsAllowed</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_maximumRedirectsAllowed(
        this_ptr: *const crate::QNetworkRequest,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the maximum number of redirects allowed to be followed for this request to <i>maxRedirectsAllowed</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setMaximumRedirectsAllowed">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum number of redirects allowed to be followed for this request to <i>maxRedirectsAllowed</i>.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#maximumRedirectsAllowed">maximumRedirectsAllowed</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setMaximumRedirectsAllowed(
        this_ptr: *mut crate::QNetworkRequest,
        maximumRedirectsAllowed: ::std::os::raw::c_int,
    );

    /// <p>Returns the host name set for the certificate validation, as set by <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPeerVerifyName">setPeerVerifyName</a>. By default this returns a null string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#peerVerifyName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host name set for the certificate validation, as set by <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPeerVerifyName">setPeerVerifyName</a>. By default this returns a null string.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPeerVerifyName">setPeerVerifyName</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_peerVerifyName(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets <i>peerName</i> as host name for the certificate validation, instead of the one used for the TCP connection.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setPeerVerifyName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets <i>peerName</i> as host name for the certificate validation, instead of the one used for the TCP connection.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#peerVerifyName">peerVerifyName</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setPeerVerifyName(
        this_ptr: *mut crate::QNetworkRequest,
        peerName: *const ::qt_core::QString,
    );

    /// <p>Returns the current parameters that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is using for this request and its underlying HTTP/2 connection. This is either a configuration previously set by an application or a default configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#http2Configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current parameters that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is using for this request and its underlying HTTP/2 connection. This is either a configuration previously set by an application or a default configuration.</p>
    /// <p>The default values that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is using are:</p>
    /// <ul>
    /// <li>Window size for connection-level flowcontrol is 2147483647 octets</li>
    /// <li>Window size for stream-level flowcontrol is 21474836 octets</li>
    /// <li>Max frame size is 16384</li>
    /// </ul>
    /// <p>By default, server push is disabled, Huffman compression and string indexing are enabled.</p>
    /// <p>This function was introduced in Qt 5.14.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHttp2Configuration">setHttp2Configuration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_http2Configuration(
        this_ptr: *const crate::QNetworkRequest,
    ) -> *mut crate::QHttp2Configuration;

    /// <p>Sets request's HTTP/2 parameters from <i>configuration</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHttp2Configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets request's HTTP/2 parameters from <i>configuration</i>.</p>
    /// <p><b>Note: </b>The configuration must be set prior to making a request.</p>
    /// <p><b>Note: </b>HTTP/2 multiplexes several streams in a single HTTP/2 connection. This implies that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will use the configuration found in the first request from a series of requests sent to the same host.</p>
    /// <p>This function was introduced in Qt 5.14.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#http2Configuration">http2Configuration</a>, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>, and <a href="http://doc.qt.io/qt-5/qhttp2configuration.html">QHttp2Configuration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setHttp2Configuration(
        this_ptr: *mut crate::QNetworkRequest,
        configuration: *const crate::QHttp2Configuration,
    );

    /// <p>Returns the timeout used for transfers, in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#transferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the timeout used for transfers, in milliseconds.</p>
    /// <p>This timeout is zero if <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setTransferTimeout">setTransferTimeout</a> hasn't been called, which means that the timeout is not used.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setTransferTimeout">setTransferTimeout</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_transferTimeout(
        this_ptr: *const crate::QNetworkRequest,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setTransferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    /// <p>Transfers are aborted if no bytes are transferred before the timeout expires. Zero means no timer is set. If no argument is provided, the timeout is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#TransferTimeoutConstant-enum">QNetworkRequest::DefaultTransferTimeoutConstant</a>. If this function is not called, the timeout is disabled and has the value zero.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#transferTimeout">transferTimeout</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setTransferTimeout(
        this_ptr: *mut crate::QNetworkRequest,
        timeout: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_swap(
        value1: *mut crate::QNetworkRequest,
        value2: *mut crate::QNetworkRequest,
    );

    /// <p>Constructs an invalid network cache meta data.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#QNetworkCacheMetaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an invalid network cache meta data.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#isValid">isValid</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_QNetworkCacheMetaData(
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Constructs a copy of the <i>other</i> QNetworkCacheMetaData.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#QNetworkCacheMetaData-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of the <i>other</i> QNetworkCacheMetaData.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_QNetworkCacheMetaData1(
        other: *const crate::QNetworkCacheMetaData,
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Destroys the network cache meta data.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#dtor.QNetworkCacheMetaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the network cache meta data.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_dQNetworkCacheMetaData(
        this_ptr: *mut crate::QNetworkCacheMetaData,
    );

    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_operator_1(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        other: *const crate::QNetworkCacheMetaData,
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Swaps this metadata instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this metadata instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_swap(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        other: *mut crate::QNetworkCacheMetaData,
    );

    /// <p>Returns <code>true</code> if this meta data is equal to the <i>other</i> meta data; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this meta data is equal to the <i>other</i> meta data; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_operator__(
        this_ptr: *const crate::QNetworkCacheMetaData,
        other: *const crate::QNetworkCacheMetaData,
    ) -> bool;

    /// <p>Returns <code>true</code> if this network cache meta data has attributes that have been set otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this network cache meta data has attributes that have been set otherwise false.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_isValid(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> bool;

    /// <p>Returns the URL this network cache meta data is referring to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#url">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the URL this network cache meta data is referring to.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setUrl">setUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_url(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QUrl;

    /// <p>Sets the URL this network cache meta data to be <i>url</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setUrl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the URL this network cache meta data to be <i>url</i>.</p>
    /// <p>The password and fragment are removed from the url.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#url">url</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setUrl(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        url: *const ::qt_core::QUrl,
    );

    /// <p>Returns a list of all raw headers that are set in this meta data. The list is in the same order that the headers were set.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#rawHeaders">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of all raw headers that are set in this meta data. The list is in the same order that the headers were set.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setRawHeaders">setRawHeaders</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_rawHeaders(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Sets the raw headers to <i>list</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setRawHeaders">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the raw headers to <i>list</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#rawHeaders">rawHeaders</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setRawHeaders(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        headers: *const crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Returns the date and time when the meta data was last modified.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#lastModified">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the date and time when the meta data was last modified.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setLastModified">setLastModified</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_lastModified(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Sets the date and time when the meta data was last modified to <i>dateTime</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setLastModified">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the date and time when the meta data was last modified to <i>dateTime</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#lastModified">lastModified</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setLastModified(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        dateTime: *const ::qt_core::QDateTime,
    );

    /// <p>Returns the date and time when the meta data expires.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#expirationDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the date and time when the meta data expires.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setExpirationDate">setExpirationDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_expirationDate(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Sets the date and time when the meta data expires to <i>dateTime</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setExpirationDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the date and time when the meta data expires to <i>dateTime</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#expirationDate">expirationDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setExpirationDate(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        dateTime: *const ::qt_core::QDateTime,
    );

    /// <p>Returns is this cache should be allowed to be stored on disk.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#saveToDisk">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns is this cache should be allowed to be stored on disk.</p>
    /// <p>Some cache implementations can keep these cache items in memory for performance reasons, but for security reasons they should not be written to disk.</p>
    /// <p>Specifically with http, documents with Cache-control set to no-store or any https document that doesn't have "Cache-control: public" set will set the saveToDisk to false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setSaveToDisk">setSaveToDisk</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_saveToDisk(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> bool;

    /// <p>Sets whether this network cache meta data and associated content should be allowed to be stored on disk to <i>allow</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setSaveToDisk">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets whether this network cache meta data and associated content should be allowed to be stored on disk to <i>allow</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#saveToDisk">saveToDisk</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setSaveToDisk(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        allow: bool,
    );

    /// <p>Returns all the attributes stored with this cache item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#attributes">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns all the attributes stored with this cache item.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setAttributes">setAttributes</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_attributes(
        this_ptr: *const crate::QNetworkCacheMetaData,
    ) -> *mut crate::QHashOfAttributeQVariant;

    /// <p>Sets all attributes of this cache item to be the map <i>attributes</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#setAttributes">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets all attributes of this cache item to be the map <i>attributes</i>.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html#attributes">attributes</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setAttribute">QNetworkRequest::setAttribute</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCacheMetaData_setAttributes(
        this_ptr: *mut crate::QNetworkCacheMetaData,
        attributes: *const crate::QHashOfAttributeQVariant,
    );

    pub fn ctr_qt_network_ffi_swap1(
        value1: *mut crate::QNetworkCacheMetaData,
        value2: *mut crate::QNetworkCacheMetaData,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__(
        arg1: *mut ::qt_core::QDataStream,
        arg2: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a host address into <i>address</i> from the stream <i>in</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a host address into <i>address</i> from the stream <i>in</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__1(
        arg1: *mut ::qt_core::QDataStream,
        arg2: *mut crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QDataStream;

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_metaObject(
        this_ptr: *const crate::QAbstractNetworkCache,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_qt_metacast(
        this_ptr: *mut crate::QAbstractNetworkCache,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_qt_metacall(
        this_ptr: *mut crate::QAbstractNetworkCache,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Destroys the cache.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#dtor.QAbstractNetworkCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the cache.</p>
    /// <p>Any operations that have not been inserted are discarded.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_dQAbstractNetworkCache(
        this_ptr: *mut crate::QAbstractNetworkCache,
    );

    /// <p>Returns the meta data for the url <i>url</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the meta data for the url <i>url</i>.</p>
    /// <p>If the url is valid and the cache contains the data for url, a valid <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html">QNetworkCacheMetaData</a> is returned.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#updateMetaData">updateMetaData</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">data</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_metaData(
        this_ptr: *mut crate::QAbstractNetworkCache,
        url: *const ::qt_core::QUrl,
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Updates the cache meta date for the <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>'s url to <i>metaData</i></p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#updateMetaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Updates the cache meta date for the <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>'s url to <i>metaData</i></p>
    /// <p>If the cache does not contains a cache item for the url then no action is taken.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">prepare</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_updateMetaData(
        this_ptr: *mut crate::QAbstractNetworkCache,
        metaData: *const crate::QNetworkCacheMetaData,
    );

    /// <p>Returns the data associated with <i>url</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the data associated with <i>url</i>.</p>
    /// <p>It is up to the application that requests the data to delete the <a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a> when done with it.</p>
    /// <p>If there is no cache for <i>url</i>, the url is invalid, or if there is an internal cache error <code>nullptr</code> is returned.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">prepare</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_data(
        this_ptr: *mut crate::QAbstractNetworkCache,
        url: *const ::qt_core::QUrl,
    ) -> *mut ::qt_core::QIODevice;

    /// <p>Removes the cache entry for <i>url</i>, returning true if success otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the cache entry for <i>url</i>, returning true if success otherwise false.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#clear">clear</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">prepare</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_remove(
        this_ptr: *mut crate::QAbstractNetworkCache,
        url: *const ::qt_core::QUrl,
    ) -> bool;

    /// <p>Returns the current size taken up by the cache. Depending upon the cache implementation this might be disk or memory size.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current size taken up by the cache. Depending upon the cache implementation this might be disk or memory size.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_cacheSize(
        this_ptr: *const crate::QAbstractNetworkCache,
    ) -> i64;

    /// <p>Returns the device that should be populated with the data for the cache item <i>metaData</i>. When all of the data has been written <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">insert</a>() should be called. If <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a> is invalid or the url in the metadata is invalid <code>nullptr</code> is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the device that should be populated with the data for the cache item <i>metaData</i>. When all of the data has been written <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">insert</a>() should be called. If <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a> is invalid or the url in the metadata is invalid <code>nullptr</code> is returned.</p>
    /// <p>The cache owns the device and will take care of deleting it when it is inserted or removed.</p>
    /// <p>To cancel a prepared inserted call <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">remove</a>() on the metadata's url.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#updateMetaData">updateMetaData</a>(), and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_prepare(
        this_ptr: *mut crate::QAbstractNetworkCache,
        metaData: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QIODevice;

    /// <p>Inserts the data in <i>device</i> and the prepared meta data into the cache. After this function is called the data and meta data should be retrievable using <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts the data in <i>device</i> and the prepared meta data into the cache. After this function is called the data and meta data should be retrievable using <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">metaData</a>().</p>
    /// <p>To cancel a prepared inserted call <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">remove</a>() on the metadata's url.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">prepare</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_insert(
        this_ptr: *mut crate::QAbstractNetworkCache,
        device: *mut ::qt_core::QIODevice,
    );

    /// <p>Removes all items from the cache. Unless there was failures clearing the cache <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">cacheSize</a>() should return 0 after a call to clear.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the cache. Unless there was failures clearing the cache <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">cacheSize</a>() should return 0 after a call to clear.</p>
    /// <p>In the base class this is a pure virtual function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">cacheSize</a>() and <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractNetworkCache_clear(
        this_ptr: *mut crate::QAbstractNetworkCache,
    );

    pub fn ctr_qt_network_ffi_QAbstractSocket_metaObject(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QAbstractSocket_qt_metacast(
        this_ptr: *mut crate::QAbstractSocket,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QAbstractSocket_qt_metacall(
        this_ptr: *mut crate::QAbstractSocket,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QAbstractSocket_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QAbstractSocket_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a new abstract socket of type <i>socketType</i>. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#QAbstractSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a new abstract socket of type <i>socketType</i>. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketType">socketType</a>(), <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>, and <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_QAbstractSocket(
        socketType: crate::q_abstract_socket::SocketType,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QAbstractSocket;

    /// <p>Destroys the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#dtor.QAbstractSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the socket.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_dQAbstractSocket(
        this_ptr: *mut crate::QAbstractSocket,
    );

    /// <p>Continues data transfer on the socket. This method should only be used after the socket has been set to pause upon notifications and a notification has been received. The only notification currently supported is QSslSocket::sslErrors(). Calling this method if the socket is not paused results in undefined behavior.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Continues data transfer on the socket. This method should only be used after the socket has been set to pause upon notifications and a notification has been received. The only notification currently supported is QSslSocket::sslErrors(). Calling this method if the socket is not paused results in undefined behavior.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#pauseMode">pauseMode</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPauseMode">setPauseMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_resume(this_ptr: *mut crate::QAbstractSocket);

    /// <p>Returns the pause mode of this socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#pauseMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the pause mode of this socket.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPauseMode">setPauseMode</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">resume</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_pauseMode(
        this_ptr: *const crate::QAbstractSocket,
    ) -> ::std::os::raw::c_int;

    /// <p>Controls whether to pause upon receiving a notification. The <i>pauseMode</i> parameter specifies the conditions in which the socket should be paused. The only notification currently supported is QSslSocket::sslErrors(). If set to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#PauseMode-enum">PauseOnSslErrors</a>, data transfer on the socket will be paused and needs to be enabled explicitly again by calling <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">resume</a>(). By default this option is set to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#PauseMode-enum">PauseNever</a>. This option must be called before connecting to the server, otherwise it will result in undefined behavior.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPauseMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Controls whether to pause upon receiving a notification. The <i>pauseMode</i> parameter specifies the conditions in which the socket should be paused. The only notification currently supported is QSslSocket::sslErrors(). If set to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#PauseMode-enum">PauseOnSslErrors</a>, data transfer on the socket will be paused and needs to be enabled explicitly again by calling <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">resume</a>(). By default this option is set to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#PauseMode-enum">PauseNever</a>. This option must be called before connecting to the server, otherwise it will result in undefined behavior.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#pauseMode">pauseMode</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">resume</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setPauseMode(
        this_ptr: *mut crate::QAbstractSocket,
        pauseMode: ::std::os::raw::c_int,
    );

    /// <p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>For UDP sockets, after binding, the signal <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">QUdpSocket::readyRead</a>() is emitted whenever a UDP datagram arrives on the specified address and port. Thus, this function is useful to write UDP servers.</p>
    /// <p>For TCP sockets, this function may be used to specify which interface to use for an outgoing connection, which is useful in case of multiple network interfaces.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>On success, the function returns <code>true</code> and the socket enters <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>; otherwise it returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind(
        this_ptr: *mut crate::QAbstractSocket,
        address: *const crate::QHostAddress,
        port: u16,
        mode: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Binds to <a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a>:Any on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind1(
        this_ptr: *mut crate::QAbstractSocket,
        port: u16,
        mode: ::std::os::raw::c_int,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QAbstractSocket_connectToHost(
        this_ptr: *mut crate::QAbstractSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        mode: ::std::os::raw::c_int,
        protocol: crate::q_abstract_socket::NetworkLayerProtocol,
    );

    pub fn ctr_qt_network_ffi_QAbstractSocket_connectToHost1(
        this_ptr: *mut crate::QAbstractSocket,
        address: *const crate::QHostAddress,
        port: u16,
        mode: ::std::os::raw::c_int,
    );

    /// <p>Attempts to close the socket. If there is pending data waiting to be written, <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> will enter <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ClosingState</a> and wait until all data has been written. Eventually, it will enter <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">UnconnectedState</a> and emit the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnected">disconnected</a>() signal.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to close the socket. If there is pending data waiting to be written, <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> will enter <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ClosingState</a> and wait until all data has been written. Eventually, it will enter <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">UnconnectedState</a> and emit the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnected">disconnected</a>() signal.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_disconnectFromHost(
        this_ptr: *mut crate::QAbstractSocket,
    );

    /// <p>Returns <code>true</code> if the socket is valid and ready for use; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the socket is valid and ready for use; otherwise returns <code>false</code>.</p>
    /// <p><b>Note: </b>The socket's state must be <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a> before reading and writing can occur.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#state">state</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_isValid(
        this_ptr: *const crate::QAbstractSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">QIODevice::bytesAvailable</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesAvailable">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">QIODevice::bytesAvailable</a>() const.</p>
    /// <p>Returns the number of incoming bytes that are waiting to be read.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesToWrite">bytesToWrite</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bytesAvailable(
        this_ptr: *const crate::QAbstractSocket,
    ) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesToWrite">QIODevice::bytesToWrite</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesToWrite">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesToWrite">QIODevice::bytesToWrite</a>() const.</p>
    /// <p>Returns the number of bytes that are waiting to be written. The bytes are written when control goes back to the event loop or when <a href="http://doc.qt.io/qt-5/qabstractsocket.html#flush">flush</a>() is called.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesAvailable">bytesAvailable</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#flush">flush</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bytesToWrite(
        this_ptr: *const crate::QAbstractSocket,
    ) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#canReadLine">QIODevice::canReadLine</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#canReadLine">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#canReadLine">QIODevice::canReadLine</a>() const.</p>
    /// <p>Returns <code>true</code> if a line of data can be read from the socket; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qiodevice.html#readLine">readLine</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_canReadLine(
        this_ptr: *const crate::QAbstractSocket,
    ) -> bool;

    /// <p>Returns the host port number (in native byte order) of the local socket if available; otherwise returns 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#localPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host port number (in native byte order) of the local socket if available; otherwise returns 0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#localAddress">localAddress</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerPort">peerPort</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setLocalPort">setLocalPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_localPort(
        this_ptr: *const crate::QAbstractSocket,
    ) -> u16;

    /// <p>Returns the host address of the local socket if available; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#localAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host address of the local socket if available; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    /// <p>This is normally the main IP address of the host, but can be <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::LocalHost</a> (127.0.0.1) for connections to the local host.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#localPort">localPort</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerAddress">peerAddress</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setLocalAddress">setLocalAddress</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_localAddress(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the port of the connected peer if the socket is in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>; otherwise returns 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port of the connected peer if the socket is in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>; otherwise returns 0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerAddress">peerAddress</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#localPort">localPort</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPeerPort">setPeerPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_peerPort(
        this_ptr: *const crate::QAbstractSocket,
    ) -> u16;

    /// <p>Returns the address of the connected peer if the socket is in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the address of the connected peer if the socket is in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerName">peerName</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerPort">peerPort</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#localAddress">localAddress</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPeerAddress">setPeerAddress</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_peerAddress(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the name of the peer as specified by <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>(), or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>() has not been called.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the peer as specified by <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>(), or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>() has not been called.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerAddress">peerAddress</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#peerPort">peerPort</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPeerName">setPeerName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_peerName(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the size of the internal read buffer. This limits the amount of data that the client can receive before you call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#readAll">readAll</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#readBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the size of the internal read buffer. This limits the amount of data that the client can receive before you call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#readAll">readAll</a>().</p>
    /// <p>A read buffer size of 0 (the default) means that the buffer has no size limit, ensuring that no data is lost.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setReadBufferSize">setReadBufferSize</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_readBufferSize(
        this_ptr: *const crate::QAbstractSocket,
    ) -> i64;

    /// <p>Sets the size of <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a>'s internal read buffer to be <i>size</i> bytes.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setReadBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a>'s internal read buffer to be <i>size</i> bytes.</p>
    /// <p>If the buffer size is limited to a certain size, <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> won't buffer more than this size of data. Exceptionally, a buffer size of 0 means that the read buffer is unlimited and all incoming data is buffered. This is the default.</p>
    /// <p>This option is useful if you only read the data at certain points in time (e.g., in a real-time streaming application) or if you want to protect your socket against receiving too much data, which may eventually cause your application to run out of memory.</p>
    /// <p>Only <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> uses <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a>'s internal buffer; <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> does not use any buffering at all, but rather relies on the implicit buffering provided by the operating system. Because of this, calling this function on <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> has no effect.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#readBufferSize">readBufferSize</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setReadBufferSize(
        this_ptr: *mut crate::QAbstractSocket,
        size: i64,
    );

    /// <p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>(), this function immediately closes the socket, discarding any pending data in the write buffer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#abort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>(), this function immediately closes the socket, discarding any pending data in the write buffer.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_abort(this_ptr: *mut crate::QAbstractSocket);

    /// <p>Returns the native socket descriptor of the <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> object if this is available; otherwise returns -1.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the native socket descriptor of the <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> object if this is available; otherwise returns -1.</p>
    /// <p>If the socket is using <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, the returned descriptor may not be usable with native socket functions.</p>
    /// <p>The socket descriptor is not available when <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> is in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">UnconnectedState</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">setSocketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_socketDescriptor(
        this_ptr: *const crate::QAbstractSocket,
    ) -> isize;

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```virtual bool QAbstractSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    /// <p><b>Note:</b> It is not possible to initialize two abstract sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor(
        this_ptr: *mut crate::QAbstractSocket,
        socketDescriptor: isize,
        state: crate::q_abstract_socket::SocketState,
        openMode: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Sets the given <i>option</i> to the value described by <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the given <i>option</i> to the value described by <i>value</i>.</p>
    /// <p><b>Note: </b>On Windows Runtime, <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketOption-enum">QAbstractSocket::KeepAliveOption</a> must be set before the socket is connected.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketOption">socketOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setSocketOption(
        this_ptr: *mut crate::QAbstractSocket,
        option: crate::q_abstract_socket::SocketOption,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns the value of the <i>option</i> option.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value of the <i>option</i> option.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketOption">setSocketOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_socketOption(
        this_ptr: *mut crate::QAbstractSocket,
        option: crate::q_abstract_socket::SocketOption,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the socket type (TCP, UDP, or other).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket type (TCP, UDP, or other).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> and <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_socketType(
        this_ptr: *const crate::QAbstractSocket,
    ) -> crate::q_abstract_socket::SocketType;

    /// <p>Returns the state of the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#state">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the state of the socket.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_state(
        this_ptr: *const crate::QAbstractSocket,
    ) -> crate::q_abstract_socket::SocketState;

    /// <p>Returns the type of error that last occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of error that last occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#state">state</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_error(
        this_ptr: *const crate::QAbstractSocket,
    ) -> crate::q_abstract_socket::SocketError;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p>
    /// <p>Closes the I/O device for the socket and calls <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>() to close the socket's connection.</p>
    /// <p>See <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>() for a description of the actions that occur when an I/O device is closed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#abort">abort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_close(this_ptr: *mut crate::QAbstractSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#isSequential">QIODevice::isSequential</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#isSequential">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#isSequential">QIODevice::isSequential</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_isSequential(
        this_ptr: *const crate::QAbstractSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#atEnd">QIODevice::atEnd</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#atEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#atEnd">QIODevice::atEnd</a>() const.</p>
    /// <p>Returns <code>true</code> if no more data is currently available for reading; otherwise returns <code>false</code>.</p>
    /// <p>This function is most commonly used when reading data from the socket in a loop. For example:</p>
    /// <pre class="cpp">  <span class="comment">// This slot is connected to QAbstractSocket::readyRead()</span>
    ///   <span class="type">void</span> SocketClass<span class="operator">::</span>readyReadSlot()
    ///   {
    /// &#32;     <span class="keyword">while</span> (<span class="operator">!</span>socket<span class="operator">.</span>atEnd()) {
    /// &#32;   &#32;     <span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span> data <span class="operator">=</span> socket<span class="operator">.</span>read(<span class="number">100</span>);
    /// &#32;   &#32;     <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    /// &#32;     }
    ///   }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesAvailable">bytesAvailable</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_atEnd(
        this_ptr: *const crate::QAbstractSocket,
    ) -> bool;

    /// <p>This function writes as much as possible from the internal write buffer to the underlying network socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#flush">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function writes as much as possible from the internal write buffer to the underlying network socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    /// <p>Call this function if you need <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> to start sending buffered data immediately. The number of bytes successfully written depends on the operating system. In most cases, you do not need to call this function, because <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> will start sending data automatically once control goes back to the event loop. In the absence of an event loop, call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">waitForBytesWritten</a>() instead.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_flush(this_ptr: *mut crate::QAbstractSocket) -> bool;

    /// <p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be established:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToHost(<span class="string">"imap"</span><span class="operator">,</span> <span class="number">143</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForConnected(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Connected!"</span>);
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>Note: </b>This function may wait slightly longer than <i>msecs</i>, depending on the time it takes to complete the host lookup.</p>
    /// <p><b>Note: </b>Multiple calls to this functions do not accumulate the time. If the function times out, the connecting process will be aborted.</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connected">connected</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connected">connected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForConnected(
        this_ptr: *mut crate::QAbstractSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    /// <p>This function blocks until new data is available for reading and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal is emitted and there is new data available for reading; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForReadyRead(
        this_ptr: *mut crate::QAbstractSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    /// <p>This function blocks until at least one byte has been written on the socket and the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal is emitted; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">waitForReadyRead</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForBytesWritten(
        this_ptr: *mut crate::QAbstractSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be closed:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>disconnectFromHost();
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>state() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qabstractsocket.html#QAbstractSocket">QAbstractSocket</a></span><span class="operator">::</span>UnconnectedState
    /// &#32;    <span class="operator">|</span><span class="operator">|</span> socket<span class="operator">-</span><span class="operator">&gt;</span>waitForDisconnected(<span class="number">1000</span>)) {
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Disconnected!"</span>);
    ///  }
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnected">disconnected</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForDisconnected(
        this_ptr: *mut crate::QAbstractSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Sets the explicit network proxy for this socket to <i>networkProxy</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the explicit network proxy for this socket to <i>networkProxy</i>.</p>
    /// <p>To disable the use of a proxy for this socket, use the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::NoProxy</a> proxy type:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>setProxy(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a></span><span class="operator">::</span>NoProxy);
    /// </pre>
    /// <p>The default value for the proxy is <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>, which means the socket will use the application settings: if a proxy is set with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">QNetworkProxy::setApplicationProxy</a>, it will use that; otherwise, if a factory is set with <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#setApplicationProxyFactory">QNetworkProxyFactory::setApplicationProxyFactory</a>, it will query that factory with type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a>.</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#proxy">proxy</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, and <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#queryProxy">QNetworkProxyFactory::queryProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setProxy(
        this_ptr: *mut crate::QAbstractSocket,
        networkProxy: *const crate::QNetworkProxy,
    );

    /// <p>Returns the network proxy for this socket. By default <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> is used, which means this socket will query the default proxy settings for the application.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#proxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the network proxy for this socket. By default <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> is used, which means this socket will query the default proxy settings for the application.</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProxy">setProxy</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, and <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_proxy(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Returns the protocol tag for this socket. If the protocol tag is set then this is passed to <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> when this is created internally to indicate the protocol tag to be used.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#protocolTag">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the protocol tag for this socket. If the protocol tag is set then this is passed to <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> when this is created internally to indicate the protocol tag to be used.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProtocolTag">setProtocolTag</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_protocolTag(
        this_ptr: *const crate::QAbstractSocket,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the protocol tag for this socket to <i>tag</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProtocolTag">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the protocol tag for this socket to <i>tag</i>.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#protocolTag">protocolTag</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setProtocolTag(
        this_ptr: *mut crate::QAbstractSocket,
        tag: *const ::qt_core::QString,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__2(
        arg1: *const ::qt_core::QDebug,
        arg2: crate::q_abstract_socket::SocketError,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__3(
        arg1: *const ::qt_core::QDebug,
        arg2: crate::q_abstract_socket::SocketState,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Constructs an empty authentication object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#QAuthenticator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty authentication object.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_QAuthenticator() -> *mut crate::QAuthenticator;

    /// <p>Destructs the object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#dtor.QAuthenticator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destructs the object.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_dQAuthenticator(this_ptr: *mut crate::QAuthenticator);

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#QAuthenticator-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_QAuthenticator1(
        other: *const crate::QAuthenticator,
    ) -> *mut crate::QAuthenticator;

    /// <p>Assigns the contents of <i>other</i> to this authenticator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns the contents of <i>other</i> to this authenticator.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_operator_(
        this_ptr: *mut crate::QAuthenticator,
        other: *const crate::QAuthenticator,
    ) -> *mut crate::QAuthenticator;

    /// <p>Returns <code>true</code> if this authenticator is identical to <i>other</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this authenticator is identical to <i>other</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_operator__(
        this_ptr: *const crate::QAuthenticator,
        other: *const crate::QAuthenticator,
    ) -> bool;

    /// <p>Returns the user used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#user">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the user used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#setUser">setUser</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_user(
        this_ptr: *const crate::QAuthenticator,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the <i>user</i> used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#setUser">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the <i>user</i> used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#user">user</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#authenticationRequired">QNetworkAccessManager::authenticationRequired</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_setUser(
        this_ptr: *mut crate::QAuthenticator,
        user: *const ::qt_core::QString,
    );

    /// <p>Returns the password used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#password">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the password used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#setPassword">setPassword</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_password(
        this_ptr: *const crate::QAuthenticator,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the <i>password</i> used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#setPassword">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the <i>password</i> used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#password">password</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#authenticationRequired">QNetworkAccessManager::authenticationRequired</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_setPassword(
        this_ptr: *mut crate::QAuthenticator,
        password: *const ::qt_core::QString,
    );

    /// <p>Returns the realm requiring authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#realm">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the realm requiring authentication.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_realm(
        this_ptr: *const crate::QAuthenticator,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QAuthenticator_setRealm(
        this_ptr: *mut crate::QAuthenticator,
        realm: *const ::qt_core::QString,
    );

    /// <p>Returns the value related to option <i>opt</i> if it was set by the server. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on incoming options. If option <i>opt</i> isn't found, an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> will be returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#option">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value related to option <i>opt</i> if it was set by the server. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on incoming options. If option <i>opt</i> isn't found, an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> will be returned.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#setOption">setOption</a>(), <a href="http://doc.qt.io/qt-5/qauthenticator.html#options">options</a>(), and <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">QAuthenticator options</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_option(
        this_ptr: *const crate::QAuthenticator,
        opt: *const ::qt_core::QString,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns all incoming options set in this <a href="http://doc.qt.io/qt-5/qauthenticator.html">QAuthenticator</a> object by parsing the server reply. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on incoming options.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#options">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns all incoming options set in this <a href="http://doc.qt.io/qt-5/qauthenticator.html">QAuthenticator</a> object by parsing the server reply. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on incoming options.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#option">option</a>() and <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">QAuthenticator options</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_options(
        this_ptr: *const crate::QAuthenticator,
    ) -> *mut ::qt_core::QHashOfQStringQVariant;

    /// <p>Sets the outgoing option <i>opt</i> to value <i>value</i>. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on outgoing options.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#setOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the outgoing option <i>opt</i> to value <i>value</i>. See the <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">Options section</a> for more information on outgoing options.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qauthenticator.html#options">options</a>(), <a href="http://doc.qt.io/qt-5/qauthenticator.html#option">option</a>(), and <a href="http://doc.qt.io/qt-5/qauthenticator.html#qauthenticator-options">QAuthenticator options</a>.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_setOption(
        this_ptr: *mut crate::QAuthenticator,
        opt: *const ::qt_core::QString,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns <code>true</code> if the object has not been initialized. Returns <code>false</code> if non-const member functions have been called, or the content was constructed or copied from another initialized <a href="http://doc.qt.io/qt-5/qauthenticator.html">QAuthenticator</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qauthenticator.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the object has not been initialized. Returns <code>false</code> if non-const member functions have been called, or the content was constructed or copied from another initialized <a href="http://doc.qt.io/qt-5/qauthenticator.html">QAuthenticator</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QAuthenticator_isNull(this_ptr: *const crate::QAuthenticator)
        -> bool;

    pub fn ctr_qt_network_ffi_QAuthenticator_detach(this_ptr: *mut crate::QAuthenticator);

    /// <p>Constructs an empty domain name record object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#QDnsDomainNameRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty domain name record object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_QDnsDomainNameRecord(
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#QDnsDomainNameRecord-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_QDnsDomainNameRecord1(
        other: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_operator_1(
        this_ptr: *mut crate::QDnsDomainNameRecord,
        other: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Destroys a domain name record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#dtor.QDnsDomainNameRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys a domain name record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_dQDnsDomainNameRecord(
        this_ptr: *mut crate::QDnsDomainNameRecord,
    );

    /// <p>Swaps this domain-name record instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this domain-name record instance with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_swap(
        this_ptr: *mut crate::QDnsDomainNameRecord,
        other: *mut crate::QDnsDomainNameRecord,
    );

    /// <p>Returns the name for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_name(
        this_ptr: *const crate::QDnsDomainNameRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the duration in seconds for which this record is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#timeToLive">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the duration in seconds for which this record is valid.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_timeToLive(
        this_ptr: *const crate::QDnsDomainNameRecord,
    ) -> u32;

    /// <p>Returns the value for this domain name record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsdomainnamerecord.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value for this domain name record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsDomainNameRecord_value(
        this_ptr: *const crate::QDnsDomainNameRecord,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_swap2(
        value1: *mut crate::QDnsDomainNameRecord,
        value2: *mut crate::QDnsDomainNameRecord,
    );

    /// <p>Constructs an empty host address record object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#QDnsHostAddressRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty host address record object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_QDnsHostAddressRecord(
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#QDnsHostAddressRecord-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_QDnsHostAddressRecord1(
        other: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_operator_1(
        this_ptr: *mut crate::QDnsHostAddressRecord,
        other: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Destroys a host address record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#dtor.QDnsHostAddressRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys a host address record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_dQDnsHostAddressRecord(
        this_ptr: *mut crate::QDnsHostAddressRecord,
    );

    /// <p>Swaps this host address record instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this host address record instance with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_swap(
        this_ptr: *mut crate::QDnsHostAddressRecord,
        other: *mut crate::QDnsHostAddressRecord,
    );

    /// <p>Returns the name for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_name(
        this_ptr: *const crate::QDnsHostAddressRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the duration in seconds for which this record is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#timeToLive">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the duration in seconds for which this record is valid.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_timeToLive(
        this_ptr: *const crate::QDnsHostAddressRecord,
    ) -> u32;

    /// <p>Returns the value for this host address record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnshostaddressrecord.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value for this host address record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsHostAddressRecord_value(
        this_ptr: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QHostAddress;

    pub fn ctr_qt_network_ffi_swap3(
        value1: *mut crate::QDnsHostAddressRecord,
        value2: *mut crate::QDnsHostAddressRecord,
    );

    /// <p>Constructs an empty mail exchange record object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#QDnsMailExchangeRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty mail exchange record object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_QDnsMailExchangeRecord(
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#QDnsMailExchangeRecord-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_QDnsMailExchangeRecord1(
        other: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_operator_1(
        this_ptr: *mut crate::QDnsMailExchangeRecord,
        other: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Destroys a mail exchange record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#dtor.QDnsMailExchangeRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys a mail exchange record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_dQDnsMailExchangeRecord(
        this_ptr: *mut crate::QDnsMailExchangeRecord,
    );

    /// <p>Swaps this mail exchange record with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this mail exchange record with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_swap(
        this_ptr: *mut crate::QDnsMailExchangeRecord,
        other: *mut crate::QDnsMailExchangeRecord,
    );

    /// <p>Returns the domain name of the mail exchange for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#exchange">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the domain name of the mail exchange for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_exchange(
        this_ptr: *const crate::QDnsMailExchangeRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the name for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_name(
        this_ptr: *const crate::QDnsMailExchangeRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the preference for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#preference">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the preference for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_preference(
        this_ptr: *const crate::QDnsMailExchangeRecord,
    ) -> u16;

    /// <p>Returns the duration in seconds for which this record is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsmailexchangerecord.html#timeToLive">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the duration in seconds for which this record is valid.</p></div>
    pub fn ctr_qt_network_ffi_QDnsMailExchangeRecord_timeToLive(
        this_ptr: *const crate::QDnsMailExchangeRecord,
    ) -> u32;

    pub fn ctr_qt_network_ffi_swap4(
        value1: *mut crate::QDnsMailExchangeRecord,
        value2: *mut crate::QDnsMailExchangeRecord,
    );

    /// <p>Constructs an empty service record object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#QDnsServiceRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty service record object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_QDnsServiceRecord() -> *mut crate::QDnsServiceRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#QDnsServiceRecord-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_QDnsServiceRecord1(
        other: *const crate::QDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    pub fn ctr_qt_network_ffi_QDnsServiceRecord_operator_1(
        this_ptr: *mut crate::QDnsServiceRecord,
        other: *const crate::QDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Destroys a service record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#dtor.QDnsServiceRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys a service record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_dQDnsServiceRecord(
        this_ptr: *mut crate::QDnsServiceRecord,
    );

    /// <p>Swaps this service record instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this service record instance with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_swap(
        this_ptr: *mut crate::QDnsServiceRecord,
        other: *mut crate::QDnsServiceRecord,
    );

    /// <p>Returns the name for this record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name for this record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_name(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the port on the target host for this service record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#port">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port on the target host for this service record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_port(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> u16;

    /// <p>Returns the priority for this service record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#priority">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the priority for this service record.</p>
    /// <p>A client must attempt to contact the target host with the lowest-numbered priority.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_priority(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> u16;

    /// <p>Returns the domain name of the target host for this service record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#target">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the domain name of the target host for this service record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_target(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the duration in seconds for which this record is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#timeToLive">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the duration in seconds for which this record is valid.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_timeToLive(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> u32;

    /// <p>Returns the weight for this service record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnsservicerecord.html#weight">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the weight for this service record.</p>
    /// <p>The weight field specifies a relative weight for entries with the same priority. Entries with higher weights should be selected with a higher probability.</p></div>
    pub fn ctr_qt_network_ffi_QDnsServiceRecord_weight(
        this_ptr: *const crate::QDnsServiceRecord,
    ) -> u16;

    pub fn ctr_qt_network_ffi_swap5(
        value1: *mut crate::QDnsServiceRecord,
        value2: *mut crate::QDnsServiceRecord,
    );

    /// <p>Constructs an empty text record object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#QDnsTextRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty text record object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_QDnsTextRecord() -> *mut crate::QDnsTextRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#QDnsTextRecord-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_QDnsTextRecord1(
        other: *const crate::QDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    pub fn ctr_qt_network_ffi_QDnsTextRecord_operator_1(
        this_ptr: *mut crate::QDnsTextRecord,
        other: *const crate::QDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Destroys a text record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#dtor.QDnsTextRecord">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys a text record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_dQDnsTextRecord(this_ptr: *mut crate::QDnsTextRecord);

    /// <p>Swaps this text record instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this text record instance with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_swap(
        this_ptr: *mut crate::QDnsTextRecord,
        other: *mut crate::QDnsTextRecord,
    );

    /// <p>Returns the name for this text record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name for this text record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_name(
        this_ptr: *const crate::QDnsTextRecord,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the duration in seconds for which this record is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#timeToLive">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the duration in seconds for which this record is valid.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_timeToLive(
        this_ptr: *const crate::QDnsTextRecord,
    ) -> u32;

    /// <p>Returns the values for this text record.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnstextrecord.html#values">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the values for this text record.</p></div>
    pub fn ctr_qt_network_ffi_QDnsTextRecord_values(
        this_ptr: *const crate::QDnsTextRecord,
    ) -> *mut ::qt_core::QListOfQByteArray;

    pub fn ctr_qt_network_ffi_swap6(
        value1: *mut crate::QDnsTextRecord,
        value2: *mut crate::QDnsTextRecord,
    );

    pub fn ctr_qt_network_ffi_QDnsLookup_metaObject(
        this_ptr: *const crate::QDnsLookup,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDnsLookup_qt_metacast(
        this_ptr: *mut crate::QDnsLookup,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QDnsLookup_qt_metacall(
        this_ptr: *mut crate::QDnsLookup,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QDnsLookup_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QDnsLookup_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QDnsLookup object and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDnsLookup object and sets <i>parent</i> as the parent object.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qdnslookup.html#type-prop">type</a> property will default to <a href="http://doc.qt.io/qt-5/qdnslookup.html#Type-enum">QDnsLookup::A</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QDnsLookup;

    /// <p>Constructs a QDnsLookup object for the given <i>type</i> and <i>name</i> and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDnsLookup object for the given <i>type</i> and <i>name</i> and sets <i>parent</i> as the parent object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup1(
        type_: crate::q_dns_lookup::Type,
        name: *const ::qt_core::QString,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QDnsLookup;

    /// <p>Constructs a QDnsLookup object for the given <i>type</i>, <i>name</i> and <i>nameserver</i> and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDnsLookup object for the given <i>type</i>, <i>name</i> and <i>nameserver</i> and sets <i>parent</i> as the parent object.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup2(
        type_: crate::q_dns_lookup::Type,
        name: *const ::qt_core::QString,
        nameserver: *const crate::QHostAddress,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QDnsLookup;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qdnslookup.html">QDnsLookup</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#dtor.QDnsLookup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qdnslookup.html">QDnsLookup</a> object.</p>
    /// <p>It is safe to delete a <a href="http://doc.qt.io/qt-5/qdnslookup.html">QDnsLookup</a> object even if it is not finished, you will simply never receive its results.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_dQDnsLookup(this_ptr: *mut crate::QDnsLookup);

    /// <p>This property holds the type of error that occurred if the DNS lookup failed, or <a href="http://doc.qt.io/qt-5/qdnslookup.html#Error-enum">NoError</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#error-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the type of error that occurred if the DNS lookup failed, or <a href="http://doc.qt.io/qt-5/qdnslookup.html#Error-enum">NoError</a>.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QDnsLookup::Error </td><td class="memItemRight bottomAlign"><span class="name"><b>error</b></span>() const</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#finished">finished</a></b></span>()</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_error(
        this_ptr: *const crate::QDnsLookup,
    ) -> crate::q_dns_lookup::Error;

    /// <p>This property holds a human-readable description of the error if the DNS lookup failed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#errorString-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds a human-readable description of the error if the DNS lookup failed.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QString </td><td class="memItemRight bottomAlign"><span class="name"><b>errorString</b></span>() const</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#finished">finished</a></b></span>()</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_errorString(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns whether the reply has finished or was aborted.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#isFinished">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns whether the reply has finished or was aborted.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_isFinished(this_ptr: *const crate::QDnsLookup) -> bool;

    /// <p>This property holds the name to lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#name-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the name to lookup.</p>
    /// <p><b>Note: </b>The name will be encoded using IDNA, which means it's unsuitable for querying SRV records compatible with the DNS-SD specification.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QString </td><td class="memItemRight bottomAlign"><span class="name"><b>name</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setName</b></span>(const QString &amp;<i>name</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#nameChanged">nameChanged</a></b></span>(const QString &amp;<i>name</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_name(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut ::qt_core::QString;

    /// <p>This property holds the name to lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#name-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the name to lookup.</p>
    /// <p><b>Note: </b>The name will be encoded using IDNA, which means it's unsuitable for querying SRV records compatible with the DNS-SD specification.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QString </td><td class="memItemRight bottomAlign"><span class="name"><b>name</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setName</b></span>(const QString &amp;<i>name</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#nameChanged">nameChanged</a></b></span>(const QString &amp;<i>name</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_setName(
        this_ptr: *mut crate::QDnsLookup,
        name: *const ::qt_core::QString,
    );

    /// <p>This property holds the type of DNS lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#type-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the type of DNS lookup.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QDnsLookup::Type </td><td class="memItemRight bottomAlign"><span class="name"><b>type</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setType</b></span>(<i>QDnsLookup::Type</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#typeChanged">typeChanged</a></b></span>(QDnsLookup::Type <i>type</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_type(
        this_ptr: *const crate::QDnsLookup,
    ) -> crate::q_dns_lookup::Type;

    /// <p>This property holds the type of DNS lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#type-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the type of DNS lookup.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QDnsLookup::Type </td><td class="memItemRight bottomAlign"><span class="name"><b>type</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setType</b></span>(<i>QDnsLookup::Type</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qdnslookup.html#typeChanged">typeChanged</a></b></span>(QDnsLookup::Type <i>type</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_setType(
        this_ptr: *mut crate::QDnsLookup,
        arg1: crate::q_dns_lookup::Type,
    );

    /// <p>This property holds the nameserver to use for DNS lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#nameserver-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the nameserver to use for DNS lookup.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QHostAddress </td><td class="memItemRight bottomAlign"><span class="name"><b>nameserver</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setNameserver</b></span>(const QHostAddress &amp;<i>nameserver</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>nameserverChanged</b></span>(const QHostAddress &amp;<i>nameserver</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_nameserver(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QHostAddress;

    /// <p>This property holds the nameserver to use for DNS lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#nameserver-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This property holds the nameserver to use for DNS lookup.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QHostAddress </td><td class="memItemRight bottomAlign"><span class="name"><b>nameserver</b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setNameserver</b></span>(const QHostAddress &amp;<i>nameserver</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>Notifier signal:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>nameserverChanged</b></span>(const QHostAddress &amp;<i>nameserver</i>)</td></tr>
    /// </tbody></table></div></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_setNameserver(
        this_ptr: *mut crate::QDnsLookup,
        nameserver: *const crate::QHostAddress,
    );

    /// <p>Returns the list of canonical name records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#canonicalNameRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of canonical name records associated with this lookup.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_canonicalNameRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns the list of host address records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#hostAddressRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of host address records associated with this lookup.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_hostAddressRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Returns the list of mail exchange records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#mailExchangeRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of mail exchange records associated with this lookup.</p>
    /// <p>The records are sorted according to <a href="http://www.rfc-editor.org/rfc/rfc5321.txt">RFC 5321</a>, so if you use them to connect to servers, you should try them in the order they are listed.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_mailExchangeRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Returns the list of name server records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#nameServerRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of name server records associated with this lookup.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_nameServerRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns the list of pointer records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#pointerRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of pointer records associated with this lookup.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_pointerRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns the list of service records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#serviceRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of service records associated with this lookup.</p>
    /// <p>The records are sorted according to <a href="http://www.rfc-editor.org/rfc/rfc2782.txt">RFC 2782</a>, so if you use them to connect to servers, you should try them in the order they are listed.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_serviceRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Returns the list of text records associated with this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#textRecords">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of text records associated with this lookup.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_textRecords(
        this_ptr: *const crate::QDnsLookup,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Aborts the DNS lookup operation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#abort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the DNS lookup operation.</p>
    /// <p>If the lookup is already finished, does nothing.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_abort(this_ptr: *mut crate::QDnsLookup);

    /// <p>Performs the DNS lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#lookup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Performs the DNS lookup.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qdnslookup.html#finished">finished()</a> signal is emitted upon completion.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_lookup(this_ptr: *mut crate::QDnsLookup);

    pub fn ctr_qt_network_ffi_QTcpSocket_metaObject(
        this_ptr: *const crate::QTcpSocket,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QTcpSocket_qt_metacast(
        this_ptr: *mut crate::QTcpSocket,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QTcpSocket_qt_metacall(
        this_ptr: *mut crate::QTcpSocket,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QTcpSocket_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QTcpSocket_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a QTcpSocket object in state <code>UnconnectedState</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpsocket.html#QTcpSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QTcpSocket object in state <code>UnconnectedState</code>.</p>
    /// <p><i>parent</i> is passed on to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketType">socketType</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpSocket_QTcpSocket(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpSocket;

    /// <p>Destroys the socket, closing the connection if necessary.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpsocket.html#dtor.QTcpSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the socket, closing the connection if necessary.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpSocket_dQTcpSocket(this_ptr: *mut crate::QTcpSocket);

    /// <p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_qHash(
        key: *const crate::QSslCertificate,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs a QSslCertificate by reading <i>format</i> encoded data from <i>device</i> and using the first certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>device</i> contained a certificate, and if this certificate was loaded successfully.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCertificate by reading <i>format</i> encoded data from <i>device</i> and using the first certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>device</i> contained a certificate, and if this certificate was loaded successfully.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate(
        device: *mut ::qt_core::QIODevice,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslCertificate;

    /// <p>Constructs a QSslCertificate by parsing the <i>format</i> encoded <i>data</i> and using the first available certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>data</i> contained a certificate, and if this certificate was loaded successfully.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCertificate by parsing the <i>format</i> encoded <i>data</i> and using the first available certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>data</i> contained a certificate, and if this certificate was loaded successfully.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate1(
        data: *const ::qt_core::QByteArray,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslCertificate;

    /// <p>Constructs an identical copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an identical copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate2(
        other: *const crate::QSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#dtor.QSslCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_dQSslCertificate(
        this_ptr: *mut crate::QSslCertificate,
    );

    pub fn ctr_qt_network_ffi_QSslCertificate_operator_1(
        this_ptr: *mut crate::QSslCertificate,
        other: *const crate::QSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Swaps this certificate instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this certificate instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_swap(
        this_ptr: *mut crate::QSslCertificate,
        other: *mut crate::QSslCertificate,
    );

    /// <p>Returns <code>true</code> if this certificate is the same as <i>other</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this certificate is the same as <i>other</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_operator__(
        this_ptr: *const crate::QSslCertificate,
        other: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if this is a null certificate (i.e., a certificate with no contents); otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a null certificate (i.e., a certificate with no contents); otherwise returns <code>false</code>.</p>
    /// <p>By default, <a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a> constructs a null certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_isNull(
        this_ptr: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if this certificate is blacklisted; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isBlacklisted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this certificate is blacklisted; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_isBlacklisted(
        this_ptr: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if this certificate is self signed; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isSelfSigned">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this certificate is self signed; otherwise returns <code>false</code>.</p>
    /// <p>A certificate is considered self-signed its issuer and subject are identical.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_isSelfSigned(
        this_ptr: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Clears the contents of this certificate, making it a null certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Clears the contents of this certificate, making it a null certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_clear(this_ptr: *mut crate::QSslCertificate);

    /// <p>Returns the certificate's version string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#version">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate's version string.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_version(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the certificate's serial number string in hexadecimal format.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#serialNumber">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate's serial number string in hexadecimal format.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_serialNumber(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns a cryptographic digest of this certificate. By default, an MD5 digest will be generated, but you can also specify a custom <i>algorithm</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#digest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a cryptographic digest of this certificate. By default, an MD5 digest will be generated, but you can also specify a custom <i>algorithm</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_digest(
        this_ptr: *const crate::QSslCertificate,
        algorithm: ::qt_core::q_cryptographic_hash::Algorithm,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the issuer information for the <i>subject</i> from the certificate, or an empty list if there is no information for <i>subject</i> in the certificate. There can be more than one entry of each type.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the issuer information for the <i>subject</i> from the certificate, or an empty list if there is no information for <i>subject</i> in the certificate. There can be more than one entry of each type.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_issuerInfo(
        this_ptr: *const crate::QSslCertificate,
        info: crate::q_ssl_certificate::SubjectInfo,
    ) -> *mut ::qt_core::QStringList;

    /// <p>Returns the issuer information for <i>attribute</i> from the certificate, or an empty list if there is no information for <i>attribute</i> in the certificate. There can be more than one entry for an attribute.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the issuer information for <i>attribute</i> from the certificate, or an empty list if there is no information for <i>attribute</i> in the certificate. There can be more than one entry for an attribute.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_issuerInfo1(
        this_ptr: *const crate::QSslCertificate,
        attribute: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QStringList;

    /// <p>Returns the information for the <i>subject</i>, or an empty list if there is no information for <i>subject</i> in the certificate. There can be more than one entry of each type.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the information for the <i>subject</i>, or an empty list if there is no information for <i>subject</i> in the certificate. There can be more than one entry of each type.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_subjectInfo(
        this_ptr: *const crate::QSslCertificate,
        info: crate::q_ssl_certificate::SubjectInfo,
    ) -> *mut ::qt_core::QStringList;

    /// <p>Returns the subject information for <i>attribute</i>, or an empty list if there is no information for <i>attribute</i> in the certificate. There can be more than one entry for an attribute.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the subject information for <i>attribute</i>, or an empty list if there is no information for <i>attribute</i> in the certificate. There can be more than one entry for an attribute.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_subjectInfo1(
        this_ptr: *const crate::QSslCertificate,
        attribute: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QStringList;

    /// <p>Returns a name that describes the issuer. It returns the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::CommonName</a> if available, otherwise falls back to the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::Organization</a> or the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerDisplayName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a name that describes the issuer. It returns the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::CommonName</a> if available, otherwise falls back to the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::Organization</a> or the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</a>.</p>
    /// <p>This function was introduced in Qt 5.12.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_issuerDisplayName(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns a name that describes the subject. It returns the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::CommonName</a> if available, otherwise falls back to the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::Organization</a> or the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectDisplayName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a name that describes the subject. It returns the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::CommonName</a> if available, otherwise falls back to the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::Organization</a> or the first <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">QSslCertificate::OrganizationalUnitName</a>.</p>
    /// <p>This function was introduced in Qt 5.12.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_subjectDisplayName(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns a list of the attributes that have values in the subject information of this certificate. The information associated with a given attribute can be accessed using the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfoAttributes">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of the attributes that have values in the subject information of this certificate. The information associated with a given attribute can be accessed using the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_subjectInfoAttributes(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns a list of the attributes that have values in the issuer information of this certificate. The information associated with a given attribute can be accessed using the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfoAttributes">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of the attributes that have values in the issuer information of this certificate. The information associated with a given attribute can be accessed using the <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>() method. Note that this list may include the OIDs for any elements that are not known by the SSL backend.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_issuerInfoAttributes(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns the list of alternative subject names for this certificate. The alternative names typically contain host names, optionally with wildcards, that are valid for this certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectAlternativeNames">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of alternative subject names for this certificate. The alternative names typically contain host names, optionally with wildcards, that are valid for this certificate.</p>
    /// <p>These names are tested against the connected peer's host name, if either the subject information for <a href="http://doc.qt.io/qt-5/qsslcertificate.html#SubjectInfo-enum">CommonName</a> doesn't define a valid host name, or the subject info name doesn't match the peer's host name.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_subjectAlternativeNames(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut crate::QMultiMapOfAlternativeNameEntryTypeQString;

    /// <p>Returns the date-time that the certificate becomes valid, or an empty <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> if this is a null certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#effectiveDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the date-time that the certificate becomes valid, or an empty <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> if this is a null certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#expiryDate">expiryDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_effectiveDate(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Returns the date-time that the certificate expires, or an empty <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> if this is a null certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#expiryDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the date-time that the certificate expires, or an empty <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> if this is a null certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#effectiveDate">effectiveDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_expiryDate(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Returns the certificate subject's public key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#publicKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate subject's public key.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_publicKey(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut crate::QSslKey;

    /// <p>Returns a list containing the X509 extensions of this certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#extensions">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing the X509 extensions of this certificate.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_extensions(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Returns this certificate converted to a PEM (Base64) encoded representation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#toPem">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this certificate converted to a PEM (Base64) encoded representation.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_toPem(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns this certificate converted to a DER (binary) encoded representation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#toDer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this certificate converted to a DER (binary) encoded representation.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_toDer(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns this certificate converted to a human-readable text representation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#toText">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this certificate converted to a human-readable text representation.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_toText(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QString;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">C++ documentation</a> for <span style='color: green;'>```static QList<QSslCertificate> QSslCertificate::fromPath(const QString &path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and returns them in a list. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="keyword">const</span> <span class="keyword">auto</span> certs <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>fromPath(<span class="string">"C:/ssl/certificate.*.pem"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;     <span class="type">QSsl</span><span class="operator">::</span>Pem<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qregexp.html">QRegExp</a></span><span class="operator">::</span>Wildcard);
    ///  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span> <span class="operator">&amp;</span>cert : certs) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> cert<span class="operator">.</span>issuerInfo(<span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>Organization);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromPath(
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
        syntax: ::qt_core::q_reg_exp::PatternSyntax,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">C++ documentation</a> for <span style='color: green;'>```static QList<QSslCertificate> QSslCertificate::fromPath(const QString &path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and returns them in a list. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="keyword">const</span> <span class="keyword">auto</span> certs <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>fromPath(<span class="string">"C:/ssl/certificate.*.pem"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;     <span class="type">QSsl</span><span class="operator">::</span>Pem<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qregexp.html">QRegExp</a></span><span class="operator">::</span>Wildcard);
    ///  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span> <span class="operator">&amp;</span>cert : certs) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> cert<span class="operator">.</span>issuerInfo(<span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>Organization);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromPath1(
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
        syntax: crate::q_ssl_certificate::PatternSyntax,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Searches for and parses all certificates in <i>device</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromDevice">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches for and parses all certificates in <i>device</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromDevice(
        device: *mut ::qt_core::QIODevice,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Searches for and parses all certificates in <i>data</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches for and parses all certificates in <i>data</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromDevice">fromDevice</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromData(
        data: *const ::qt_core::QByteArray,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Verifies a certificate chain. The chain to be verified is passed in the <i>certificateChain</i> parameter. The first certificate in the list should be the leaf certificate of the chain to be verified. If <i>hostName</i> is specified then the certificate is also checked to see if it is valid for the specified host name.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#verify">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Verifies a certificate chain. The chain to be verified is passed in the <i>certificateChain</i> parameter. The first certificate in the list should be the leaf certificate of the chain to be verified. If <i>hostName</i> is specified then the certificate is also checked to see if it is valid for the specified host name.</p>
    /// <p>Note that the root (CA) certificate should not be included in the list to be verified, this will be looked up automatically either using the CA list specified by QSslSocket::defaultCaCertificates() or, if possible, it will be loaded on demand on Unix.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_verify(
        certificateChain: *const crate::QListOfQSslCertificate,
        hostName: *const ::qt_core::QString,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#importPkcs12">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    /// <p><b>Note: </b>The <i>device</i> must be open and ready to be read from.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_importPkcs12(
        device: *mut ::qt_core::QIODevice,
        key: *mut crate::QSslKey,
        cert: *mut crate::QSslCertificate,
        caCertificates: *mut crate::QListOfQSslCertificate,
        passPhrase: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>Returns a pointer to the native certificate handle, if there is one, else <code>nullptr</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#handle">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the native certificate handle, if there is one, else <code>nullptr</code>.</p>
    /// <p>You can use this handle, together with the native API, to access extended information about the certificate.</p>
    /// <p><b>Warning:</b> Use of this function has a high probability of being non-portable, and its return value may vary from platform to platform or change from minor release to minor release.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_handle(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_swap7(
        value1: *mut crate::QSslCertificate,
        value2: *mut crate::QSslCertificate,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__4(
        debug: *const ::qt_core::QDebug,
        certificate: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__5(
        debug: *const ::qt_core::QDebug,
        info: crate::q_ssl_certificate::SubjectInfo,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Constructs a QSslError object with no error and default certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#QSslError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslError object with no error and default certificate.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_QSslError() -> *mut crate::QSslError;

    /// <p>Constructs a QSslError object. The argument specifies the <i>error</i> that occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#QSslError-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslError object. The argument specifies the <i>error</i> that occurred.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_QSslError1(
        error: crate::q_ssl_error::SslError,
    ) -> *mut crate::QSslError;

    /// <p>Constructs a QSslError object. The two arguments specify the <i>error</i> that occurred, and which <i>certificate</i> the error relates to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#QSslError-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslError object. The two arguments specify the <i>error</i> that occurred, and which <i>certificate</i> the error relates to.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_QSslError2(
        error: crate::q_ssl_error::SslError,
        certificate: *const crate::QSslCertificate,
    ) -> *mut crate::QSslError;

    /// <p>Constructs an identical copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#QSslError-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an identical copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_QSslError3(
        other: *const crate::QSslError,
    ) -> *mut crate::QSslError;

    /// <p>Swaps this error instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this error instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_swap(
        this_ptr: *mut crate::QSslError,
        other: *mut crate::QSslError,
    );

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#dtor.QSslError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_dQSslError(this_ptr: *mut crate::QSslError);

    pub fn ctr_qt_network_ffi_QSslError_operator_1(
        this_ptr: *mut crate::QSslError,
        other: *const crate::QSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns <code>true</code> if this error is equal to <i>other</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this error is equal to <i>other</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslError_operator__(
        this_ptr: *const crate::QSslError,
        other: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns the type of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of the error.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslerror.html#errorString">errorString</a>() and <a href="http://doc.qt.io/qt-5/qsslerror.html#certificate">certificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslError_error(
        this_ptr: *const crate::QSslError,
    ) -> crate::q_ssl_error::SslError;

    /// <p>Returns a short localized human-readable description of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a short localized human-readable description of the error.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslerror.html#error">error</a>() and <a href="http://doc.qt.io/qt-5/qsslerror.html#certificate">certificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslError_errorString(
        this_ptr: *const crate::QSslError,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the certificate associated with this error, or a null certificate if the error does not relate to any certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslerror.html#certificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate associated with this error, or a null certificate if the error does not relate to any certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslerror.html#error">error</a>() and <a href="http://doc.qt.io/qt-5/qsslerror.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslError_certificate(
        this_ptr: *const crate::QSslError,
    ) -> *mut crate::QSslCertificate;

    pub fn ctr_qt_network_ffi_swap8(value1: *mut crate::QSslError, value2: *mut crate::QSslError);

    /// <p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_qHash1(
        key: *const crate::QSslError,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__6(
        debug: *const ::qt_core::QDebug,
        error: *const crate::QSslError,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__7(
        debug: *const ::qt_core::QDebug,
        error: *const crate::q_ssl_error::SslError,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_QSslSocket_metaObject(
        this_ptr: *const crate::QSslSocket,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QSslSocket_qt_metacast(
        this_ptr: *mut crate::QSslSocket,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QSslSocket_qt_metacall(
        this_ptr: *mut crate::QSslSocket,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QSslSocket_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QSslSocket_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QSslSocket object. <i>parent</i> is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor. The new socket's <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a> suite is set to the one returned by the static method defaultCiphers().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslSocket object. <i>parent</i> is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor. The new socket's <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a> suite is set to the one returned by the static method defaultCiphers().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_QSslSocket(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QSslSocket;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#dtor.QSslSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_dQSslSocket(this_ptr: *mut crate::QSslSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">QAbstractSocket::resume</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#resume">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#resume">QAbstractSocket::resume</a>().</p>
    /// <p>Continues data transfer on the socket after it has been paused. If "<a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPauseMode">setPauseMode</a>(<a href="http://doc.qt.io/qt-5/qabstractsocket.html#PauseMode-enum">QAbstractSocket::PauseOnSslErrors</a>);" has been called on this socket and a sslErrors() signal is received, calling this method is necessary for the socket to continue.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#pauseMode">QAbstractSocket::pauseMode</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setPauseMode">QAbstractSocket::setPauseMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_resume(this_ptr: *mut crate::QSslSocket);

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        mode: ::std::os::raw::c_int,
        protocol: crate::q_abstract_socket::NetworkLayerProtocol,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted1(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        sslPeerName: *const ::qt_core::QString,
        mode: ::std::os::raw::c_int,
        protocol: crate::q_abstract_socket::NetworkLayerProtocol,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```[override virtual] bool QSslSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState state = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>state</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setSocketDescriptor(
        this_ptr: *mut crate::QSslSocket,
        socketDescriptor: isize,
        state: crate::q_abstract_socket::SocketState,
        openMode: ::std::os::raw::c_int,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHost(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        openMode: ::std::os::raw::c_int,
        protocol: crate::q_abstract_socket::NetworkLayerProtocol,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_disconnectFromHost(this_ptr: *mut crate::QSslSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketOption">QAbstractSocket::setSocketOption</a>(QAbstractSocket::SocketOption option, const QVariant &amp;value).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketOption">QAbstractSocket::setSocketOption</a>(QAbstractSocket::SocketOption option, const QVariant &amp;value).</p>
    /// <p>Sets the given <i>option</i> to the value described by <i>value</i>.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#socketOption">socketOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setSocketOption(
        this_ptr: *mut crate::QSslSocket,
        option: crate::q_abstract_socket::SocketOption,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketOption">QAbstractSocket::socketOption</a>(QAbstractSocket::SocketOption option).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#socketOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketOption">QAbstractSocket::socketOption</a>(QAbstractSocket::SocketOption option).</p>
    /// <p>Returns the value of the <i>option</i> option.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketOption">setSocketOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_socketOption(
        this_ptr: *mut crate::QSslSocket,
        option: crate::q_abstract_socket::SocketOption,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the current mode for the socket; either <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>, where <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> behaves identially to <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>, or one of <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">SslClientMode</a> or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">SslServerMode</a>, where the client is either negotiating or in encrypted mode.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#mode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current mode for the socket; either <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>, where <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> behaves identially to <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>, or one of <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">SslClientMode</a> or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">SslServerMode</a>, where the client is either negotiating or in encrypted mode.</p>
    /// <p>When the mode changes, <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> emits <a href="http://doc.qt.io/qt-5/qsslsocket.html#modeChanged">modeChanged</a>()</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">SslMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_mode(
        this_ptr: *const crate::QSslSocket,
    ) -> crate::q_ssl_socket::SslMode;

    /// <p>Returns <code>true</code> if the socket is encrypted; otherwise, false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#isEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the socket is encrypted; otherwise, false is returned.</p>
    /// <p>An encrypted socket encrypts all data that is written by calling <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#putChar">putChar</a>() before the data is written to the network, and decrypts all incoming data as the data is received from the network, before you call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>(), <a href="http://doc.qt.io/qt-5/qiodevice.html#readLine">readLine</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#getChar">getChar</a>().</p>
    /// <p><a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> emits <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() when it enters encrypted mode.</p>
    /// <p>You can call <a href="http://doc.qt.io/qt-5/qsslsocket.html#sessionCipher">sessionCipher</a>() to find which cryptographic cipher is used to encrypt and decrypt your data.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#mode">mode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_isEncrypted(this_ptr: *const crate::QSslSocket) -> bool;

    /// <p>Returns the socket's SSL protocol. By default, <a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::SecureProtocols</a> is used.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#protocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's SSL protocol. By default, <a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::SecureProtocols</a> is used.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setProtocol">setProtocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_protocol(
        this_ptr: *const crate::QSslSocket,
    ) -> crate::q_ssl::SslProtocol;

    /// <p>Sets the socket's SSL protocol to <i>protocol</i>. This will affect the next initiated handshake; calling this function on an already-encrypted socket will not affect the socket's protocol.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket's SSL protocol to <i>protocol</i>. This will affect the next initiated handshake; calling this function on an already-encrypted socket will not affect the socket's protocol.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#protocol">protocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setProtocol(
        this_ptr: *mut crate::QSslSocket,
        protocol: crate::q_ssl::SslProtocol,
    );

    /// <p>Returns the socket's verify mode. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's verify mode. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    /// <p>The default mode is <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">AutoVerifyPeer</a>, which tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to use <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">VerifyPeer</a> for clients and <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">QueryPeer</a> for servers.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyMode">setPeerVerifyMode</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyDepth">peerVerifyDepth</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#mode">mode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_peerVerifyMode(
        this_ptr: *const crate::QSslSocket,
    ) -> crate::q_ssl_socket::PeerVerifyMode;

    /// <p>Sets the socket's verify mode to <i>mode</i>. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket's verify mode to <i>mode</i>. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    /// <p>The default mode is <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">AutoVerifyPeer</a>, which tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to use <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">VerifyPeer</a> for clients and <a href="http://doc.qt.io/qt-5/qsslsocket.html#PeerVerifyMode-enum">QueryPeer</a> for servers.</p>
    /// <p>Setting this mode after encryption has started has no effect on the current connection.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyMode">peerVerifyMode</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyDepth">setPeerVerifyDepth</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#mode">mode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPeerVerifyMode(
        this_ptr: *mut crate::QSslSocket,
        mode: crate::q_ssl_socket::PeerVerifyMode,
    );

    /// <p>Returns the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, or 0 (the default) if no maximum depth has been set, indicating that the whole certificate chain should be checked.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyDepth">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, or 0 (the default) if no maximum depth has been set, indicating that the whole certificate chain should be checked.</p>
    /// <p>The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyDepth">setPeerVerifyDepth</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyMode">peerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_peerVerifyDepth(
        this_ptr: *const crate::QSslSocket,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, to <i>depth</i>. Setting a depth of 0 means that no maximum depth is set, indicating that the whole certificate chain should be checked.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyDepth">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, to <i>depth</i>. Setting a depth of 0 means that no maximum depth is set, indicating that the whole certificate chain should be checked.</p>
    /// <p>The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyDepth">peerVerifyDepth</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyMode">setPeerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPeerVerifyDepth(
        this_ptr: *mut crate::QSslSocket,
        depth: ::std::os::raw::c_int,
    );

    /// <p>Returns the different hostname for the certificate validation, as set by <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyName">setPeerVerifyName</a> or by <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the different hostname for the certificate validation, as set by <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyName">setPeerVerifyName</a> or by <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyName">setPeerVerifyName</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_peerVerifyName(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets a different host name, given by <i>hostName</i>, for the certificate validation instead of the one used for the TCP connection.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPeerVerifyName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets a different host name, given by <i>hostName</i>, for the certificate validation instead of the one used for the TCP connection.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#peerVerifyName">peerVerifyName</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPeerVerifyName(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesAvailable">QAbstractSocket::bytesAvailable</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#bytesAvailable">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesAvailable">QAbstractSocket::bytesAvailable</a>() const.</p>
    /// <p>Returns the number of decrypted bytes that are immediately available for reading.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_bytesAvailable(this_ptr: *const crate::QSslSocket) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesToWrite">QAbstractSocket::bytesToWrite</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#bytesToWrite">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bytesToWrite">QAbstractSocket::bytesToWrite</a>() const.</p>
    /// <p>Returns the number of unencrypted bytes that are waiting to be encrypted and written to the network.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_bytesToWrite(this_ptr: *const crate::QSslSocket) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#canReadLine">QAbstractSocket::canReadLine</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#canReadLine">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#canReadLine">QAbstractSocket::canReadLine</a>() const.</p>
    /// <p>Returns <code>true</code> if you can read one while line (terminated by a single ASCII '\n' character) of decrypted characters; otherwise, false is returned.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_canReadLine(this_ptr: *const crate::QSslSocket) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">QAbstractSocket::close</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">QAbstractSocket::close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_close(this_ptr: *mut crate::QSslSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#atEnd">QAbstractSocket::atEnd</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#atEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#atEnd">QAbstractSocket::atEnd</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_atEnd(this_ptr: *const crate::QSslSocket) -> bool;

    /// <p>This function writes as much as possible from the internal write buffer to the underlying network socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#flush">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function writes as much as possible from the internal write buffer to the underlying network socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    /// <p>Call this function if you need <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to start sending buffered data immediately. The number of bytes successfully written depends on the operating system. In most cases, you do not need to call this function, because <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> will start sending data automatically once control goes back to the event loop. In the absence of an event loop, call <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForBytesWritten">waitForBytesWritten</a>() instead.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_flush(this_ptr: *mut crate::QSslSocket) -> bool;

    /// <p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>(), this function immediately closes the socket, clearing any pending data in the write buffer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#abort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>(), this function immediately closes the socket, clearing any pending data in the write buffer.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_abort(this_ptr: *mut crate::QSslSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setReadBufferSize">QAbstractSocket::setReadBufferSize</a>(qint64 size).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setReadBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setReadBufferSize">QAbstractSocket::setReadBufferSize</a>(qint64 size).</p>
    /// <p>Sets the size of <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>'s internal read buffer to be <i>size</i> bytes.</p>
    /// <p>This function was introduced in Qt 4.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setReadBufferSize(
        this_ptr: *mut crate::QSslSocket,
        size: i64,
    );

    /// <p>Returns the number of encrypted bytes that are awaiting decryption. Normally, this function will return 0 because <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> decrypts its incoming data as soon as it can.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#encryptedBytesAvailable">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of encrypted bytes that are awaiting decryption. Normally, this function will return 0 because <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> decrypts its incoming data as soon as it can.</p>
    /// <p>This function was introduced in Qt 4.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_encryptedBytesAvailable(
        this_ptr: *const crate::QSslSocket,
    ) -> i64;

    /// <p>Returns the number of encrypted bytes that are waiting to be written to the network.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#encryptedBytesToWrite">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of encrypted bytes that are waiting to be written to the network.</p>
    /// <p>This function was introduced in Qt 4.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_encryptedBytesToWrite(
        this_ptr: *const crate::QSslSocket,
    ) -> i64;

    /// <p>Returns the socket's SSL configuration state. The default SSL configuration of a socket is to use the default ciphers, default CA certificates, no local private key or certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's SSL configuration state. The default SSL configuration of a socket is to use the default ciphers, default CA certificates, no local private key or certificate.</p>
    /// <p>The SSL configuration also contains fields that can change with time without notice.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setSslConfiguration">setSslConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificate">localCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificate">peerCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificateChain">peerCertificateChain</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#sessionCipher">sessionCipher</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">QSslConfiguration::ciphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslConfiguration(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Sets the socket's SSL configuration to be the contents of <i>configuration</i>. This function sets the local certificate, the ciphers, the private key and the CA certificates to those stored in <i>configuration</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket's SSL configuration to be the contents of <i>configuration</i>. This function sets the local certificate, the ciphers, the private key and the CA certificates to those stored in <i>configuration</i>.</p>
    /// <p>It is not possible to set the SSL-state related fields.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#sslConfiguration">sslConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey">setPrivateKey</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">QSslConfiguration::setCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setSslConfiguration(
        this_ptr: *mut crate::QSslSocket,
        config: *const crate::QSslConfiguration,
    );

    /// <p>Sets the certificate chain to be presented to the peer during the SSL handshake to be <i>localChain</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the certificate chain to be presented to the peer during the SSL handshake to be <i>localChain</i>.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificateChain">localCertificateChain</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificateChain">QSslConfiguration::setLocalCertificateChain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setLocalCertificateChain(
        this_ptr: *mut crate::QSslSocket,
        localChain: *const crate::QListOfQSslCertificate,
    );

    /// <p>Returns the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> chain, or an empty list if no local certificates have been assigned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> chain, or an empty list if no local certificates have been assigned.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificateChain">setLocalCertificateChain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_localCertificateChain(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Sets the socket's local certificate to <i>certificate</i>. The local certificate is necessary if you need to confirm your identity to the peer. It is used together with the private key; if you set the local certificate, you must also set the private key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket's local certificate to <i>certificate</i>. The local certificate is necessary if you need to confirm your identity to the peer. It is used together with the private key; if you set the local certificate, you must also set the private key.</p>
    /// <p>The local certificate and private key are always necessary for server sockets, but are also rarely used by client sockets if the server requires the client to authenticate.</p>
    /// <p><b>Note: </b>Secure Transport SSL backend on macOS may update the default keychain (the default is probably your login keychain) by importing your local certificates and keys. This can also result in system dialogs showing up and asking for permission when your application is using these private keys. If such behavior is undesired, set the QT_SSL_USE_TEMPORARY_KEYCHAIN environment variable to a non-zero value; this will prompt <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to use its own temporary keychain.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificate">localCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey">setPrivateKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setLocalCertificate(
        this_ptr: *mut crate::QSslSocket,
        certificate: *const crate::QSslCertificate,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sets the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> to the first one found in file <i>path</i>, which is parsed according to the specified <i>format</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setLocalCertificate1(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
    );

    /// <p>Returns the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a>, or an empty certificate if no local certificate has been assigned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a>, or an empty certificate if no local certificate has been assigned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_localCertificate(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns the peer's digital certificate (i.e., the immediate certificate of the host you are connected to), or a null certificate, if the peer has not assigned a certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's digital certificate (i.e., the immediate certificate of the host you are connected to), or a null certificate, if the peer has not assigned a certificate.</p>
    /// <p>The peer certificate is checked automatically during the handshake phase, so this function is normally used to fetch the certificate for display or for connection diagnostic purposes. It contains information about the peer, including its host name, the certificate issuer, and the peer's public key.</p>
    /// <p>Because the peer certificate is set during the handshake phase, it is safe to access the peer certificate from a slot connected to the sslErrors() signal or the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() signal.</p>
    /// <p>If a null certificate is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.</p>
    /// <p>If you want to check the peer's complete chain of certificates, use <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificateChain">peerCertificateChain</a>() to get them all at once.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificateChain">peerCertificateChain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_peerCertificate(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns the peer's chain of digital certificates, or an empty list of certificates.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's chain of digital certificates, or an empty list of certificates.</p>
    /// <p>Peer certificates are checked automatically during the handshake phase. This function is normally used to fetch certificates for display, or for performing connection diagnostics. Certificates contain information about the peer and the certificate issuers, including host name, issuer names, and issuer public keys.</p>
    /// <p>The peer certificates are set in <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> during the handshake phase, so it is safe to call this function from a slot connected to the sslErrors() signal or the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() signal.</p>
    /// <p>If an empty list is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.</p>
    /// <p>If you want to get only the peer's immediate certificate, use <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificate">peerCertificate</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificate">peerCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_peerCertificateChain(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Returns the socket's cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a>, or a null cipher if the connection isn't encrypted. The socket's cipher for the session is set during the handshake phase. The cipher is used to encrypt and decrypt data transmitted through the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sessionCipher">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a>, or a null cipher if the connection isn't encrypted. The socket's cipher for the session is set during the handshake phase. The cipher is used to encrypt and decrypt data transmitted through the socket.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> also provides functions for setting the ordered list of ciphers from which the handshake phase will eventually select the session cipher. This ordered list must be in place before the handshake phase begins.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">QSslConfiguration::ciphers</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">QSslConfiguration::ciphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedCiphers">QSslConfiguration::supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sessionCipher(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns the socket's SSL/TLS protocol or UnknownProtocol if the connection isn't encrypted. The socket's protocol for the session is set during the handshake phase.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sessionProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's SSL/TLS protocol or UnknownProtocol if the connection isn't encrypted. The socket's protocol for the session is set during the handshake phase.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#protocol">protocol</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setProtocol">setProtocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sessionProtocol(
        this_ptr: *const crate::QSslSocket,
    ) -> crate::q_ssl::SslProtocol;

    /// <p>This function returns Online Certificate Status Protocol responses that a server may send during a TLS handshake using OCSP stapling. The vector is empty if no definitive response or no response at all was received.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#ocspResponses">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns Online Certificate Status Protocol responses that a server may send during a TLS handshake using OCSP stapling. The vector is empty if no definitive response or no response at all was received.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setOcspStaplingEnabled">QSslConfiguration::setOcspStaplingEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_ocspResponses(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Sets the socket's private <a href="http://doc.qt.io/qt-5/qsslkey.html">key</a> to <i>key</i>. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket's private <a href="http://doc.qt.io/qt-5/qsslkey.html">key</a> to <i>key</i>. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPrivateKey(
        this_ptr: *mut crate::QSslSocket,
        key: *const crate::QSslKey,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Reads the string in file <i>fileName</i> and decodes it using a specified <i>algorithm</i> and encoding <i>format</i> to construct an <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a>. If the encoded key is encrypted, <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>The socket's private key is set to the constructed key. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPrivateKey1(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
        passPhrase: *const ::qt_core::QByteArray,
    );

    /// <p>Returns this socket's private key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this socket's private key.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey">setPrivateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#localCertificate">localCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_privateKey(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QSslKey;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#ciphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">QSslConfiguration::ciphers</a>() instead.</p>
    /// <p>Returns this socket's current cryptographic cipher suite. This list is used during the socket's handshake phase for choosing a session cipher. The returned list of ciphers is ordered by descending preference. (i.e., the first cipher in the list is the most preferred cipher). The session cipher will be the first one in the list that is also supported by the peer.</p>
    /// <p>By default, the handshake phase can choose any of the ciphers supported by this system's SSL libraries, which may vary from system to system. The list of ciphers supported by this system's SSL libraries is returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>(). You can restrict the list of ciphers used for choosing the session cipher for this socket by calling <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>() with a subset of the supported ciphers. You can revert to using the entire set by calling <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>() with the list returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p>
    /// <p>You can restrict the list of ciphers used for choosing the session cipher for <i>all</i> sockets by calling <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCiphers">setDefaultCiphers</a>() with a subset of the supported ciphers. You can revert to using the entire set by calling <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>() with the list returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCiphers">defaultCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCiphers">setDefaultCiphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_ciphers(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslCipher;

    pub fn ctr_qt_network_ffi_QSslSocket_setCiphers(
        this_ptr: *mut crate::QSslSocket,
        ciphers: *const crate::QListOfQSslCipher,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>() instead.</p>
    /// <p>Sets the cryptographic cipher suite for this socket to <i>ciphers</i>, which is a colon-separated list of cipher suite names. The ciphers are listed in order of preference, starting with the most preferred cipher. For example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span> socket;
    ///  socket<span class="operator">.</span>setCiphers(<span class="string">"DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:AES256-SHA"</span>);
    /// </pre>
    /// <p>Each cipher name in <i>ciphers</i> must be the name of a cipher in the list returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>(). Restricting the cipher suite must be done before the handshake phase, where the session cipher is chosen.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#ciphers">ciphers</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCiphers">setDefaultCiphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setCiphers1(
        this_ptr: *mut crate::QSslSocket,
        ciphers: *const ::qt_core::QString,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCiphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Sets the default cryptographic cipher suite for all sockets in this application to <i>ciphers</i>, which must contain a subset of the ciphers in the list returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p>
    /// <p>Restricting the default cipher suite only affects SSL sockets that perform their handshake phase after the default cipher suite has been changed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCiphers">defaultCiphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setDefaultCiphers(
        ciphers: *const crate::QListOfQSslCipher,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCiphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">QSslConfiguration::ciphers</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Returns the default cryptographic cipher suite for all sockets in this application. This list is used during the socket's handshake phase when negotiating with the peer to choose a session cipher. The list is ordered by preference (i.e., the first cipher in the list is the most preferred cipher).</p>
    /// <p>By default, the handshake phase can choose any of the ciphers supported by this system's SSL libraries, which may vary from system to system. The list of ciphers supported by this system's SSL libraries is returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCiphers">setDefaultCiphers</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_defaultCiphers() -> *mut crate::QListOfQSslCipher;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedCiphers">QSslConfiguration::supportedCiphers</a>() instead.</p>
    /// <p>Returns the list of cryptographic ciphers supported by this system. This list is set by the system's SSL libraries and may vary from system to system.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCiphers">defaultCiphers</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#ciphers">ciphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCiphers">setCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_supportedCiphers() -> *mut crate::QListOfQSslCipher;

    pub fn ctr_qt_network_ffi_QSslSocket_addCaCertificates(
        this_ptr: *mut crate::QSslSocket,
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
        syntax: ::qt_core::q_reg_exp::PatternSyntax,
    ) -> bool;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificate">C++ documentation</a> for <span style='color: green;'>```void QSslSocket::addCaCertificate(const QSslCertificate &certificate)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>() instead.</p>
    /// <p>Adds the <i>certificate</i> to this socket's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p>To add multiple certificates, use <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificates">addCaCertificates</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">QSslConfiguration::setCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addCaCertificate(
        this_ptr: *mut crate::QSslSocket,
        certificate: *const crate::QSslCertificate,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_addCaCertificates1(
        this_ptr: *mut crate::QSslSocket,
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCaCertificates">C++ documentation</a> for <span style='color: green;'>```void QSslSocket::setCaCertificates(const QList<QSslCertificate> &certificates)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">QSslConfiguration::setCaCertificates</a>() instead.</p>
    /// <p>Sets this socket's CA certificate database to be <i>certificates</i>. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p>The CA certificate database can be reset to the current default CA certificate database by calling this function with the list of CA certificates returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">defaultCaCertificates</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#caCertificates">caCertificates</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">defaultCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setCaCertificates(
        this_ptr: *mut crate::QSslSocket,
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#caCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>() instead.</p>
    /// <p>Returns this socket's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate. It can be moodified prior to the handshake with <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificate">addCaCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificates">addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCaCertificates">setCaCertificates</a>().</p>
    /// <p><b>Note: </b>On Unix, this method may return an empty list if the root certificates are loaded on demand.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificate">addCaCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addCaCertificates">addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setCaCertificates">setCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_caCertificates(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Searches all files in the <i>path</i> for certificates with the specified <i>encoding</i> and adds them to the default CA certificate database. <i>path</i> can be an explicit file, or it can contain wildcards in the format specified by <i>syntax</i>. Returns <code>true</code> if any CA certificates are added to the default database.</p>
    /// <p>Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates(
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
        syntax: ::qt_core::q_reg_exp::PatternSyntax,
    ) -> bool;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Adds <i>certificate</i> to the default CA certificate database. Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificate(
        certificate: *const crate::QSslCertificate,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificates-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Adds <i>certificates</i> to the default CA certificate database. Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates1(
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">QSslConfiguration::setCaCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Sets the default CA certificate database to <i>certificates</i>. The default CA certificate database is originally set to your system's default CA certificate database. You can override the default CA certificate database with your own CA certificate database using this function.</p>
    /// <p>Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">defaultCaCertificates</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificate">addDefaultCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setDefaultCaCertificates(
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Returns the current default CA certificate database. This database is originally set to your system's default CA certificate database. If no system default database is found, an empty database will be returned. You can override the default CA certificate database with your own CA certificate database using <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCaCertificates">setDefaultCaCertificates</a>().</p>
    /// <p>Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>Note: </b>On Unix, this method may return an empty list if the root certificates are loaded on demand.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCaCertificates">setDefaultCaCertificates</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#caCertificates">caCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_defaultCaCertificates(
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#systemCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use QSslConfiguration::systemDefaultCaCertificates instead.</p>
    /// <p>This function provides the CA certificate database provided by the operating system. The CA certificate database returned by this function is used to initialize the database returned by <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">defaultCaCertificates</a>(). You can replace that database with your own with <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCaCertificates">setDefaultCaCertificates</a>().</p>
    /// <p><b>Note: </b>: On OS X, only certificates that are either trusted for all purposes or trusted for the purpose of SSL in the keychain will be returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#caCertificates">caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#defaultCaCertificates">defaultCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#setDefaultCaCertificates">setDefaultCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_systemCaCertificates() -> *mut crate::QListOfQSslCertificate;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>(int msecs).</p>
    /// <p>Waits until the socket is connected, or <i>msecs</i> milliseconds, whichever happens first. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForConnected(
        this_ptr: *mut crate::QSslSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits until the socket has completed the SSL handshake and has emitted <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), or <i>msecs</i> milliseconds, whichever comes first. If <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() has been emitted, this function returns true; otherwise (e.g., the socket is disconnected, or the SSL handshake fails), false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has completed the SSL handshake and has emitted <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), or <i>msecs</i> milliseconds, whichever comes first. If <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() has been emitted, this function returns true; otherwise (e.g., the socket is disconnected, or the SSL handshake fails), false is returned.</p>
    /// <p>The following example waits up to one second for the socket to be encrypted:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToHostEncrypted(<span class="string">"imap"</span><span class="operator">,</span> <span class="number">993</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForEncrypted(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Encrypted!"</span>);
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#startClientEncryption">startClientEncryption</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#startServerEncryption">startServerEncryption</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#isEncrypted">isEncrypted</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForEncrypted(
        this_ptr: *mut crate::QSslSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">QAbstractSocket::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">QAbstractSocket::waitForReadyRead</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForReadyRead(
        this_ptr: *mut crate::QSslSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">QAbstractSocket::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">QAbstractSocket::waitForBytesWritten</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForBytesWritten(
        this_ptr: *mut crate::QSslSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>(int msecs).</p>
    /// <p>Waits until the socket has disconnected or <i>msecs</i> milliseconds, whichever comes first. If the connection has been disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForDisconnected(
        this_ptr: *mut crate::QSslSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#sslErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslHandshakeErrors">sslHandshakeErrors</a>() instead.</p>
    /// <p>Returns a list of the last SSL errors that occurred. This is the same list as <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> passes via the sslErrors() signal. If the connection has been encrypted with no errors, this function will return an empty list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslHandshakeErrors">sslHandshakeErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslErrors(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns a list of the last SSL errors that occurred. This is the same list as <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> passes via the sslErrors() signal. If the connection has been encrypted with no errors, this function will return an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslHandshakeErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of the last SSL errors that occurred. This is the same list as <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> passes via the sslErrors() signal. If the connection has been encrypted with no errors, this function will return an empty list.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslHandshakeErrors(
        this_ptr: *const crate::QSslSocket,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns <code>true</code> if this platform supports SSL; otherwise, returns false. If the platform doesn't support SSL, the socket will fail in the connection phase.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#supportsSsl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this platform supports SSL; otherwise, returns false. If the platform doesn't support SSL, the socket will fail in the connection phase.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_supportsSsl() -> bool;

    /// <p>Returns the version number of the SSL library in use. Note that this is the version of the library in use at run-time not compile time. If no SSL support is available then this will return an undefined value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryVersionNumber">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the version number of the SSL library in use. Note that this is the version of the library in use at run-time not compile time. If no SSL support is available then this will return an undefined value.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslLibraryVersionNumber() -> ::std::os::raw::c_long;

    /// <p>Returns the version string of the SSL library in use. Note that this is the version of the library in use at run-time not compile time. If no SSL support is available then this will return an empty value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryVersionString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the version string of the SSL library in use. Note that this is the version of the library in use at run-time not compile time. If no SSL support is available then this will return an empty value.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslLibraryVersionString() -> *mut ::qt_core::QString;

    /// <p>Returns the version number of the SSL library in use at compile time. If no SSL support is available then this will return an undefined value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryBuildVersionNumber">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the version number of the SSL library in use at compile time. If no SSL support is available then this will return an undefined value.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryVersionNumber">sslLibraryVersionNumber</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslLibraryBuildVersionNumber() -> ::std::os::raw::c_long;

    /// <p>Returns the version string of the SSL library in use at compile time. If no SSL support is available then this will return an empty value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryBuildVersionString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the version string of the SSL library in use at compile time. If no SSL support is available then this will return an empty value.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#sslLibraryVersionString">sslLibraryVersionString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_sslLibraryBuildVersionString() -> *mut ::qt_core::QString;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>This method tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to ignore only the errors given in <i>errors</i>.</p>
    /// <p><b>Note: </b>Because most SSL errors are associated with a certificate, for most of them you must set the expected certificate this SSL error is related to. If, for instance, you want to connect to a server that uses a self-signed certificate, consider the following snippet:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">&gt;</span> cert <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">::</span>fromPath(QLatin1String(<span class="string">"server-certificate.pem"</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span> error(<span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">::</span>SelfSignedCertificate<span class="operator">,</span> cert<span class="operator">.</span>at(<span class="number">0</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">&gt;</span> expectedSslErrors;
    ///  expectedSslErrors<span class="operator">.</span>append(error);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span> socket;
    ///  socket<span class="operator">.</span>ignoreSslErrors(expectedSslErrors);
    ///  socket<span class="operator">.</span>connectToHostEncrypted(<span class="string">"server.tld"</span><span class="operator">,</span> <span class="number">443</span>);
    /// </pre>
    /// <p>Multiple calls to this function will replace the list of errors that were passed in previous calls. You can clear the list of errors you want to ignore by calling this function with an empty list.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#sslErrors">sslErrors</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#sslHandshakeErrors">sslHandshakeErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_ignoreSslErrors(
        this_ptr: *mut crate::QSslSocket,
        errors: *const crate::QListOfQSslError,
    );

    /// <p>Starts a delayed SSL handshake for a client connection. This function can be called when the socket is in the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a> but still in the <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>. If it is not yet connected, or if it is already encrypted, this function has no effect.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#startClientEncryption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Starts a delayed SSL handshake for a client connection. This function can be called when the socket is in the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a> but still in the <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>. If it is not yet connected, or if it is already encrypted, this function has no effect.</p>
    /// <p>Clients that implement STARTTLS functionality often make use of delayed SSL handshakes. Most other clients can avoid calling this function directly by using <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>() instead, which automatically performs the handshake.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#startServerEncryption">startServerEncryption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_startClientEncryption(this_ptr: *mut crate::QSslSocket);

    /// <p>Starts a delayed SSL handshake for a server connection. This function can be called when the socket is in the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a> but still in <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>. If it is not connected or it is already encrypted, the function has no effect.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#startServerEncryption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Starts a delayed SSL handshake for a server connection. This function can be called when the socket is in the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a> but still in <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">UnencryptedMode</a>. If it is not connected or it is already encrypted, the function has no effect.</p>
    /// <p>For server sockets, calling this function is the only way to initiate the SSL handshake. Most servers will call this function immediately upon receiving a connection, or as a result of having received a protocol-specific command to enter SSL mode (e.g, the server may respond to receiving the string "STARTTLS\r\n" by calling this function).</p>
    /// <p>The most common way to implement an SSL server is to create a subclass of <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> and reimplement <a href="http://doc.qt.io/qt-5/qtcpserver.html#incomingConnection">QTcpServer::incomingConnection</a>(). The returned socket descriptor is then passed to <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketDescriptor">QSslSocket::setSocketDescriptor</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#startClientEncryption">startClientEncryption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_startServerEncryption(this_ptr: *mut crate::QSslSocket);

    /// <p>This slot tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to ignore errors during <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>'s handshake phase and continue connecting. If you want to continue with the connection even if errors occur during the handshake phase, then you must call this slot, either from a slot connected to sslErrors(), or before the handshake phase. If you don't call this slot, either in response to errors or before the handshake, the connection will be dropped after the sslErrors() signal has been emitted.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This slot tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to ignore errors during <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>'s handshake phase and continue connecting. If you want to continue with the connection even if errors occur during the handshake phase, then you must call this slot, either from a slot connected to sslErrors(), or before the handshake phase. If you don't call this slot, either in response to errors or before the handshake, the connection will be dropped after the sslErrors() signal has been emitted.</p>
    /// <p>If there are no errors during the SSL handshake phase (i.e., the identity of the peer is established with no problems), <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> will not emit the sslErrors() signal, and it is unnecessary to call this function.</p>
    /// <p><b>Warning:</b> Be sure to always let the user inspect the errors reported by the sslErrors() signal, and only call this method upon confirmation from the user that proceeding is ok. If there are unexpected errors, the connection should be aborted. Calling this method without inspecting the actual errors will most likely pose a security risk for your application. Use it with great care!</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#sslErrors">sslErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_ignoreSslErrors1(this_ptr: *mut crate::QSslSocket);

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_metaObject(
        this_ptr: *const crate::QDtlsClientVerifier,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_qt_metacast(
        this_ptr: *mut crate::QDtlsClientVerifier,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_qt_metacall(
        this_ptr: *mut crate::QDtlsClientVerifier,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QDtlsClientVerifier object, <i>parent</i> is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#QDtlsClientVerifier">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDtlsClientVerifier object, <i>parent</i> is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_QDtlsClientVerifier(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtlsClientVerifier;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#dtor.QDtlsClientVerifier">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_dQDtlsClientVerifier(
        this_ptr: *mut crate::QDtlsClientVerifier,
    );

    /// <p>Default constructs GeneratorParameters object with <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha1</a> as its algorithm and an empty secret.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html#GeneratorParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Default constructs GeneratorParameters object with <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha1</a> as its algorithm and an empty secret.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">QDtlsClientVerifier::setCookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">QDtlsClientVerifier::cookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">QDtls::setCookieGeneratorParameters</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#cookieGeneratorParameters">QDtls::cookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters(
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    /// <p>Constructs GeneratorParameters object from <i>algorithm</i> and <i>secret</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html#GeneratorParameters-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs GeneratorParameters object from <i>algorithm</i> and <i>secret</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">QDtlsClientVerifier::setCookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">QDtlsClientVerifier::cookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">QDtls::setCookieGeneratorParameters</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#cookieGeneratorParameters">QDtls::cookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters1(
        a: ::qt_core::q_cryptographic_hash::Algorithm,
        s: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    /// <p>Sets the secret and the cryptographic hash algorithm from <i>params</i>. This <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use these to generate cookies. If the new secret has size zero, this function returns <code>false</code> and does not change the cookie generator parameters.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the secret and the cryptographic hash algorithm from <i>params</i>. This <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use these to generate cookies. If the new secret has size zero, this function returns <code>false</code> and does not change the cookie generator parameters.</p>
    /// <p><b>Note: </b>The secret is supposed to be a cryptographically secure sequence of bytes.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">QDtlsClientVerifier::GeneratorParameters</a>, <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">cookieGeneratorParameters</a>(), and <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Algorithm</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_setCookieGeneratorParameters(
        this_ptr: *mut crate::QDtlsClientVerifier,
        params: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> bool;

    /// <p>Returns the current secret and hash algorithm used to generate cookies. The default hash algorithm is <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha256</a> if Qt was configured to support it, <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha1</a> otherwise. The default secret is obtained from the backend-specific cryptographically strong pseudorandom number generator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current secret and hash algorithm used to generate cookies. The default hash algorithm is <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha256</a> if Qt was configured to support it, <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha1</a> otherwise. The default secret is obtained from the backend-specific cryptographically strong pseudorandom number generator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Algorithm</a>, <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">QDtlsClientVerifier::GeneratorParameters</a>, and <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_cookieGeneratorParameters(
        this_ptr: *const crate::QDtlsClientVerifier,
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    /// <p><i>socket</i> must be a valid pointer, <i>dgram</i> must be a non-empty datagram, <i>address</i> cannot be null, broadcast, or multicast. <i>port</i> is the remote peer's port. This function returns <code>true</code> if <i>dgram</i> contains a ClientHello message with a valid cookie. If no matching cookie is found, verifyClient() will send a HelloVerifyRequest message using <i>socket</i> and return <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#verifyClient">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><i>socket</i> must be a valid pointer, <i>dgram</i> must be a non-empty datagram, <i>address</i> cannot be null, broadcast, or multicast. <i>port</i> is the remote peer's port. This function returns <code>true</code> if <i>dgram</i> contains a ClientHello message with a valid cookie. If no matching cookie is found, verifyClient() will send a HelloVerifyRequest message using <i>socket</i> and return <code>false</code>.</p>
    /// <p>The following snippet shows how a server application may check for errors:</p>
    /// <pre class="cpp"> <span class="keyword">if</span> (<span class="operator">!</span>verifier<span class="operator">.</span>verifyClient(<span class="operator">&amp;</span>socket<span class="operator">,</span> message<span class="operator">,</span> address<span class="operator">,</span> port)) {
    /// &#32;    <span class="keyword">switch</span> (verifyClient<span class="operator">.</span>dtlsError()) {
    /// &#32;    <span class="keyword">case</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>NoError:
    /// &#32;   &#32;    <span class="comment">// Not verified yet, but no errors found and we have to wait for the next</span>
    /// &#32;   &#32;    <span class="comment">// message from this client.</span>
    /// &#32;   &#32;    <span class="keyword">return</span>;
    /// &#32;    <span class="keyword">case</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>TlsInitializationError:
    /// &#32;   &#32;    <span class="comment">// This error is fatal, nothing we can do about it.</span>
    /// &#32;   &#32;    <span class="comment">// Probably, quit the server after reporting the error.</span>
    /// &#32;   &#32;    <span class="keyword">return</span>;
    /// &#32;    <span class="keyword">case</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>UnderlyingSocketError:
    /// &#32;   &#32;    <span class="comment">// There is some problem in QUdpSocket, handle it (see QUdpSocket::error())</span>
    /// &#32;   &#32;    <span class="keyword">return</span>;
    /// &#32;    <span class="keyword">case</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>InvalidInputParameters:
    /// &#32;    <span class="keyword">default</span>:
    /// &#32;   &#32;    Q_UNREACHABLE();
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isNull">QHostAddress::isNull</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isBroadcast">QHostAddress::isBroadcast</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">QHostAddress::isMulticast</a>(), <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>(), and <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">cookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_verifyClient(
        this_ptr: *mut crate::QDtlsClientVerifier,
        socket: *mut crate::QUdpSocket,
        dgram: *const ::qt_core::QByteArray,
        address: *const crate::QHostAddress,
        port: u16,
    ) -> bool;

    /// <p>Convenience function. Returns the last ClientHello message that was successfully verified, or an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> if no verification has completed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#verifiedHello">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Convenience function. Returns the last ClientHello message that was successfully verified, or an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> if no verification has completed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#verifyClient">verifyClient</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_verifiedHello(
        this_ptr: *const crate::QDtlsClientVerifier,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the last error that occurred or QDtlsError::NoError.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#dtlsError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the last error that occurred or QDtlsError::NoError.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a> and <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#dtlsErrorString">dtlsErrorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_dtlsError(
        this_ptr: *const crate::QDtlsClientVerifier,
    ) -> crate::QDtlsError;

    /// <p>Returns a textual description of the last error, or an empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#dtlsErrorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a textual description of the last error, or an empty string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#dtlsError">dtlsError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_dtlsErrorString(
        this_ptr: *const crate::QDtlsClientVerifier,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QDtls_metaObject(
        this_ptr: *const crate::QDtls,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QDtls_qt_metacast(
        this_ptr: *mut crate::QDtls,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QDtls_qt_metacall(
        this_ptr: *mut crate::QDtls,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QDtls_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QDtls_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a QDtls object, <i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor. <i>mode</i> is <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side DTLS connection or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#QDtls">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QDtls object, <i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor. <i>mode</i> is <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side DTLS connection or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#sslMode">sslMode</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_QDtls(
        mode: crate::q_ssl_socket::SslMode,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtls;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#dtor.QDtls">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_dQDtls(this_ptr: *mut crate::QDtls);

    /// <p>Sets the peer's address, <i>port</i>, and host name and returns <code>true</code> if successful. <i>address</i> must not be null, multicast, or broadcast. <i>verificationName</i> is the host name used for the certificate validation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">C++ documentation</a> for <span style='color: green;'>```bool QDtls::setPeer(const QHostAddress &address, quint16 port, const QString &verificationName = {})```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the peer's address, <i>port</i>, and host name and returns <code>true</code> if successful. <i>address</i> must not be null, multicast, or broadcast. <i>verificationName</i> is the host name used for the certificate validation.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#peerAddress">peerAddress</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#peerPort">peerPort</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationName">peerVerificationName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setPeer(
        this_ptr: *mut crate::QDtls,
        address: *const crate::QHostAddress,
        port: u16,
        verificationName: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Sets the host <i>name</i> that will be used for the certificate validation and returns <code>true</code> if successful.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#setPeerVerificationName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the host <i>name</i> that will be used for the certificate validation and returns <code>true</code> if successful.</p>
    /// <p><b>Note: </b>This function must be called before the handshake starts.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationName">peerVerificationName</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setPeerVerificationName(
        this_ptr: *mut crate::QDtls,
        name: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Returns the peer's address, set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>(), or <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#peerAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's address, set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>(), or <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_peerAddress(
        this_ptr: *const crate::QDtls,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the peer's port number, set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>(), or 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#peerPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's port number, set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>(), or 0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_peerPort(this_ptr: *const crate::QDtls) -> u16;

    /// <p>Returns the host name set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>() or <a href="http://doc.qt.io/qt-5/qdtls.html#setPeerVerificationName">setPeerVerificationName</a>(). The default value is an empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host name set by <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>() or <a href="http://doc.qt.io/qt-5/qdtls.html#setPeerVerificationName">setPeerVerificationName</a>(). The default value is an empty string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setPeerVerificationName">setPeerVerificationName</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">setPeer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_peerVerificationName(
        this_ptr: *const crate::QDtls,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side connection and <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#sslMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side connection and <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#QDtls">QDtls</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_sslMode(
        this_ptr: *const crate::QDtls,
    ) -> crate::q_ssl_socket::SslMode;

    /// <p><i>mtuHint</i> is the maximum transmission unit (MTU), either discovered or guessed by the application. The application is not required to set this value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#setMtuHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><i>mtuHint</i> is the maximum transmission unit (MTU), either discovered or guessed by the application. The application is not required to set this value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#mtuHint">mtuHint</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketOption-enum">QAbstractSocket::PathMtuSocketOption</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setMtuHint(this_ptr: *mut crate::QDtls, mtuHint: u16);

    /// <p>Returns the value previously set by <a href="http://doc.qt.io/qt-5/qdtls.html#setMtuHint">setMtuHint</a>(). The default value is 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#mtuHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value previously set by <a href="http://doc.qt.io/qt-5/qdtls.html#setMtuHint">setMtuHint</a>(). The default value is 0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setMtuHint">setMtuHint</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_mtuHint(this_ptr: *const crate::QDtls) -> u16;

    /// <p>Sets the cryptographic hash algorithm and the secret from <i>params</i>. This function is only needed for a server-side <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> connection. Returns <code>true</code> if successful.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the cryptographic hash algorithm and the secret from <i>params</i>. This function is only needed for a server-side <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> connection. Returns <code>true</code> if successful.</p>
    /// <p><b>Note: </b>This function must be called before the handshake starts.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#cookieGeneratorParameters">cookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>(), <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a>, and <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#cookieGeneratorParameters">QDtlsClientVerifier::cookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setCookieGeneratorParameters(
        this_ptr: *mut crate::QDtls,
        params: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> bool;

    /// <p>Returns the current hash algorithm and secret, either default ones or previously set by a call to <a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#cookieGeneratorParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current hash algorithm and secret, either default ones or previously set by a call to <a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>().</p>
    /// <p>The default hash algorithm is <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha256</a> if Qt was configured to support it, <a href="http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum">QCryptographicHash::Sha1</a> otherwise. The default secret is obtained from the backend-specific cryptographically strong pseudorandom number generator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>(), <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a>, and cookieGeneratorParameters().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_cookieGeneratorParameters(
        this_ptr: *const crate::QDtls,
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    /// <p>Sets the connection's TLS configuration from <i>configuration</i> and returns <code>true</code> if successful.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the connection's TLS configuration from <i>configuration</i> and returns <code>true</code> if successful.</p>
    /// <p><b>Note: </b>This function must be called before the handshake starts.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#dtlsConfiguration">dtlsConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setDtlsConfiguration(
        this_ptr: *mut crate::QDtls,
        configuration: *const crate::QSslConfiguration,
    ) -> bool;

    /// <p>Returns either the default DTLS configuration or the configuration set by an earlier call to <a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns either the default DTLS configuration or the configuration set by an earlier call to <a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultDtlsConfiguration">QSslConfiguration::defaultDtlsConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_dtlsConfiguration(
        this_ptr: *const crate::QDtls,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Returns the current handshake state for this <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current handshake state for this <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#HandshakeState-enum">QDtls::HandshakeState</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_handshakeState(
        this_ptr: *const crate::QDtls,
    ) -> crate::q_dtls::HandshakeState;

    /// <p>Starts or continues a DTLS handshake. <i>socket</i> must be a valid pointer. When starting a server-side DTLS handshake, <i>dgram</i> must contain the initial ClientHello message read from <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>. This function returns <code>true</code> if no error was found. Handshake state can be tested using <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(). <code>false</code> return means some error occurred, use <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>() for more detailed information.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">C++ documentation</a> for <span style='color: green;'>```bool QDtls::doHandshake(QUdpSocket *socket, const QByteArray &dgram = {})```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Starts or continues a DTLS handshake. <i>socket</i> must be a valid pointer. When starting a server-side DTLS handshake, <i>dgram</i> must contain the initial ClientHello message read from <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>. This function returns <code>true</code> if no error was found. Handshake state can be tested using <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(). <code>false</code> return means some error occurred, use <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>() for more detailed information.</p>
    /// <p><b>Note: </b>If the identity of the peer can't be established, the error is set to QDtlsError::PeerVerificationError. If you want to ignore verification errors and continue connecting, you must call <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>() and then <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>(). If the errors cannot be ignored, you must call <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">abortHandshake</a>().</p>
    /// <pre class="cpp"> <span class="keyword">if</span> (<span class="operator">!</span>dtls<span class="operator">.</span>doHandshake(<span class="operator">&amp;</span>socket<span class="operator">,</span> dgram)) {
    /// &#32;    <span class="keyword">if</span> (dtls<span class="operator">.</span>dtlsError() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>PeerVerificationError)
    /// &#32;   &#32;    dtls<span class="operator">.</span>abortAfterError(<span class="operator">&amp;</span>socket);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">abortHandshake</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_doHandshake(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
        dgram: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>If a timeout occures during the handshake, the <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeTimeout">handshakeTimeout</a>() signal is emitted. The application must call handleTimeout() to retransmit handshake messages; handleTimeout() returns <code>true</code> if a timeout has occurred, false otherwise. <i>socket</i> must be a valid pointer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#handleTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If a timeout occures during the handshake, the <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeTimeout">handshakeTimeout</a>() signal is emitted. The application must call handleTimeout() to retransmit handshake messages; handleTimeout() returns <code>true</code> if a timeout has occurred, false otherwise. <i>socket</i> must be a valid pointer.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#handshakeTimeout">handshakeTimeout</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_handleTimeout(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
    ) -> bool;

    /// <p>If peer verification errors were ignored during the handshake, resumeHandshake() resumes and completes the handshake and returns <code>true</code>. <i>socket</i> must be a valid pointer. Returns <code>false</code> if the handshake could not be resumed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If peer verification errors were ignored during the handshake, resumeHandshake() resumes and completes the handshake and returns <code>true</code>. <i>socket</i> must be a valid pointer. Returns <code>false</code> if the handshake could not be resumed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">abortHandshake</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationErrors">peerVerificationErrors</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_resumeHandshake(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
    ) -> bool;

    /// <p>Aborts the ongoing handshake. Returns true if one was on-going on <i>socket</i>; otherwise, sets a suitable error and returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the ongoing handshake. Returns true if one was on-going on <i>socket</i>; otherwise, sets a suitable error and returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_abortHandshake(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
    ) -> bool;

    /// <p>Sends an encrypted shutdown alert message and closes the DTLS connection. Handshake state changes to <a href="http://doc.qt.io/qt-5/qdtls.html#HandshakeState-enum">QDtls::HandshakeNotStarted</a>. <i>socket</i> must be a valid pointer. This function returns <code>true</code> on success.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#shutdown">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends an encrypted shutdown alert message and closes the DTLS connection. Handshake state changes to <a href="http://doc.qt.io/qt-5/qdtls.html#HandshakeState-enum">QDtls::HandshakeNotStarted</a>. <i>socket</i> must be a valid pointer. This function returns <code>true</code> on success.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_shutdown(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
    ) -> bool;

    /// <p>Returns <code>true</code> if DTLS handshake completed successfully.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#isConnectionEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if DTLS handshake completed successfully.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_isConnectionEncrypted(this_ptr: *const crate::QDtls) -> bool;

    /// <p>Returns the cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a> used by this connection, or a null cipher if the connection isn't encrypted. The cipher for the session is selected during the handshake phase. The cipher is used to encrypt and decrypt data.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#sessionCipher">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a> used by this connection, or a null cipher if the connection isn't encrypted. The cipher for the session is selected during the handshake phase. The cipher is used to encrypt and decrypt data.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> provides functions for setting the ordered list of ciphers from which the handshake phase will eventually select the session cipher. This ordered list must be in place before the handshake phase begins.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>, <a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsConfiguration">dtlsConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_sessionCipher(
        this_ptr: *const crate::QDtls,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns the DTLS protocol version used by this connection, or UnknownProtocol if the connection isn't encrypted yet. The protocol for the connection is selected during the handshake phase.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#sessionProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the DTLS protocol version used by this connection, or UnknownProtocol if the connection isn't encrypted yet. The protocol for the connection is selected during the handshake phase.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>() can set the preferred version before the handshake starts.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#setDtlsConfiguration">setDtlsConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultDtlsConfiguration">QSslConfiguration::defaultDtlsConfiguration</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setProtocol">QSslConfiguration::setProtocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_sessionProtocol(
        this_ptr: *const crate::QDtls,
    ) -> crate::q_ssl::SslProtocol;

    /// <p>Encrypts <i>dgram</i> and writes the encrypted data into <i>socket</i>. Returns the number of bytes written, or -1 in case of error. The handshake must be completed before writing encrypted data. <i>socket</i> must be a valid pointer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#writeDatagramEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Encrypts <i>dgram</i> and writes the encrypted data into <i>socket</i>. Returns the number of bytes written, or -1 in case of error. The handshake must be completed before writing encrypted data. <i>socket</i> must be a valid pointer.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#isConnectionEncrypted">isConnectionEncrypted</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_writeDatagramEncrypted(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
        dgram: *const ::qt_core::QByteArray,
    ) -> i64;

    /// <p>Decrypts <i>dgram</i> and returns its contents as plain text. The handshake must be completed before datagrams can be decrypted. Depending on the type of the TLS message the connection may write into <i>socket</i>, which must be a valid pointer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#decryptDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Decrypts <i>dgram</i> and returns its contents as plain text. The handshake must be completed before datagrams can be decrypted. Depending on the type of the TLS message the connection may write into <i>socket</i>, which must be a valid pointer.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_decryptDatagram(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
        dgram: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the last error encountered by the connection or QDtlsError::NoError.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the last error encountered by the connection or QDtlsError::NoError.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#dtlsErrorString">dtlsErrorString</a>() and <a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_dtlsError(this_ptr: *const crate::QDtls) -> crate::QDtlsError;

    /// <p>Returns a textual description for the last error encountered by the connection or empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsErrorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a textual description for the last error encountered by the connection or empty string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_dtlsErrorString(
        this_ptr: *const crate::QDtls,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns errors found while establishing the identity of the peer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns errors found while establishing the identity of the peer.</p>
    /// <p>If you want to continue connecting despite the errors that have occurred, you must call <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_peerVerificationErrors(
        this_ptr: *const crate::QDtls,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>This method tells <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> to ignore only the errors given in <i>errorsToIgnore</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This method tells <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a> to ignore only the errors given in <i>errorsToIgnore</i>.</p>
    /// <p>If, for instance, you want to connect to a server that uses a self-signed certificate, consider the following snippet:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">&gt;</span> cert <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">::</span>fromPath(QLatin1String(<span class="string">"server-certificate.pem"</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span> error(<span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">::</span>SelfSignedCertificate<span class="operator">,</span> cert<span class="operator">.</span>at(<span class="number">0</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">&gt;</span> expectedSslErrors;
    ///  expectedSslErrors<span class="operator">.</span>append(error);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtls">QDtls</a></span> dtls;
    ///  dtls<span class="operator">.</span>ignoreVerificationErrors(expectedSslErrors);
    ///  dtls<span class="operator">.</span>doHandshake(udpSocket);
    /// </pre>
    /// <p>You can also call this function after <a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>() encountered the QDtlsError::PeerVerificationError error, and then resume the handshake by calling <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>().</p>
    /// <p>Later calls to this function will replace the list of errors that were passed in previous calls. You can clear the list of errors you want to ignore by calling this function with an empty list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">doHandshake</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>(), and <a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_ignoreVerificationErrors(
        this_ptr: *mut crate::QDtls,
        errorsToIgnore: *const crate::QVectorOfQSslError,
    );

    pub fn ctr_qt_network_ffi_QIPv6Address_operator__(
        this_ptr: *mut crate::QIPv6Address,
        index: ::std::os::raw::c_int,
    ) -> *mut u8;

    pub fn ctr_qt_network_ffi_QIPv6Address_operator__1(
        this_ptr: *const crate::QIPv6Address,
        index: ::std::os::raw::c_int,
    ) -> u8;

    pub fn ctr_qt_network_ffi_qHash2(
        key: *const crate::QHostAddress,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs a null host address object, i.e. an address which is not valid for any host or interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a null host address object, i.e. an address which is not valid for any host or interface.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress() -> *mut crate::QHostAddress;

    /// <p>Constructs a host address object with the IPv4 address <i>ip4Addr</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a host address object with the IPv4 address <i>ip4Addr</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress1(ip4Addr: u32) -> *mut crate::QHostAddress;

    /// <p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p>
    /// <p><i>ip6Addr</i> must be a 16-byte array in network byte order (big endian).</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress2(
        ip6Addr: *mut u8,
    ) -> *mut crate::QHostAddress;

    /// <p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p>
    /// <p><i>ip6Addr</i> must be a 16-byte array in network byte order (big endian).</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress3(
        ip6Addr: *const u8,
    ) -> *mut crate::QHostAddress;

    /// <p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-4">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a host address object with the IPv6 address <i>ip6Addr</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress4(
        ip6Addr: *const crate::QIPv6Address,
    ) -> *mut crate::QHostAddress;

    /// <p>Constructs an IPv4 or IPv6 address based on the string <i>address</i> (e.g., "127.0.0.1").</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-6">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an IPv4 or IPv6 address based on the string <i>address</i> (e.g., "127.0.0.1").</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress">setAddress</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress6(
        address: *const ::qt_core::QString,
    ) -> *mut crate::QHostAddress;

    /// <p>Constructs a copy of the given <i>address</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-7">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of the given <i>address</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress7(
        copy: *const crate::QHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Constructs a QHostAddress object for <i>address</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#QHostAddress-8">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QHostAddress object for <i>address</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_QHostAddress8(
        address: crate::q_host_address::SpecialAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Destroys the host address object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#dtor.QHostAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the host address object.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_dQHostAddress(this_ptr: *mut crate::QHostAddress);

    pub fn ctr_qt_network_ffi_QHostAddress_operator_1(
        this_ptr: *mut crate::QHostAddress,
        other: *const crate::QHostAddress,
    ) -> *mut crate::QHostAddress;

    pub fn ctr_qt_network_ffi_QHostAddress_operator_2(
        this_ptr: *mut crate::QHostAddress,
        address: *const ::qt_core::QString,
    ) -> *mut crate::QHostAddress;

    pub fn ctr_qt_network_ffi_QHostAddress_operator_3(
        this_ptr: *mut crate::QHostAddress,
        address: crate::q_host_address::SpecialAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Swaps this host address with <i>other</i>. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this host address with <i>other</i>. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.6.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_swap(
        this_ptr: *mut crate::QHostAddress,
        other: *mut crate::QHostAddress,
    );

    /// <p>Set the IPv4 address specified by <i>ip4Addr</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Set the IPv4 address specified by <i>ip4Addr</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress(
        this_ptr: *mut crate::QHostAddress,
        ip4Addr: u32,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Set the IPv6 address specified by <i>ip6Addr</i>.</p>
    /// <p><i>ip6Addr</i> must be an array of 16 bytes in network byte order (high-order byte first).</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress1(
        this_ptr: *mut crate::QHostAddress,
        ip6Addr: *mut u8,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Set the IPv6 address specified by <i>ip6Addr</i>.</p>
    /// <p><i>ip6Addr</i> must be an array of 16 bytes in network byte order (high-order byte first).</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress2(
        this_ptr: *mut crate::QHostAddress,
        ip6Addr: *const u8,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Set the IPv6 address specified by <i>ip6Addr</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress3(
        this_ptr: *mut crate::QHostAddress,
        ip6Addr: *const crate::QIPv6Address,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress-5">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sets the IPv4 or IPv6 address specified by the string representation specified by <i>address</i> (e.g. "127.0.0.1"). Returns <code>true</code> and sets the address if the address was successfully parsed; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress5(
        this_ptr: *mut crate::QHostAddress,
        address: *const ::qt_core::QString,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setAddress-6">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sets the special address specified by <i>address</i>.</p>
    /// <p>This function was introduced in Qt 5.8.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setAddress6(
        this_ptr: *mut crate::QHostAddress,
        address: crate::q_host_address::SpecialAddress,
    );

    /// <p>Returns the network layer protocol of the host address.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#protocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the network layer protocol of the host address.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_protocol(
        this_ptr: *const crate::QHostAddress,
    ) -> crate::q_abstract_socket::NetworkLayerProtocol;

    /// <p>Returns the IPv4 address as a number.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#toIPv4Address">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the IPv4 address as a number.</p>
    /// <p>For example, if the address is 127.0.0.1, the returned value is 2130706433 (i.e. 0x7f000001).</p>
    /// <p>This value is valid if the <a href="http://doc.qt.io/qt-5/qhostaddress.html#protocol">protocol</a>() is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv4Protocol</a>, or if the protocol is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv6Protocol</a>, and the IPv6 address is an IPv4 mapped address. (RFC4291)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#toString">toString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_toIPv4Address(
        this_ptr: *const crate::QHostAddress,
    ) -> u32;

    /// <p>Returns the IPv4 address as a number.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#toIPv4Address-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the IPv4 address as a number.</p>
    /// <p>For example, if the address is 127.0.0.1, the returned value is 2130706433 (i.e. 0x7f000001).</p>
    /// <p>This value is valid if the <a href="http://doc.qt.io/qt-5/qhostaddress.html#protocol">protocol</a>() is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv4Protocol</a>, or if the protocol is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv6Protocol</a>, and the IPv6 address is an IPv4 mapped address. (RFC4291). In those cases, <i>ok</i> will be set to true. Otherwise, it will be set to false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#toString">toString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_toIPv4Address1(
        this_ptr: *const crate::QHostAddress,
        ok: *mut bool,
    ) -> u32;

    /// <p>Returns the IPv6 address as a Q_IPV6ADDR structure. The structure consists of 16 unsigned characters.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#toIPv6Address">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the IPv6 address as a Q_IPV6ADDR structure. The structure consists of 16 unsigned characters.</p>
    /// <pre class="cpp"> Q_IPV6ADDR addr <span class="operator">=</span> hostAddr<span class="operator">.</span>toIPv6Address();
    ///  <span class="comment">// addr contains 16 unsigned characters</span>
    ///
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">16</span>; <span class="operator">+</span><span class="operator">+</span>i) {
    /// &#32;    <span class="comment">// process addr[i]</span>
    ///  }
    /// </pre>
    /// <p>This value is valid if the <a href="http://doc.qt.io/qt-5/qhostaddress.html#protocol">protocol</a>() is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv6Protocol</a>. If the protocol is <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">IPv4Protocol</a>, then the address is returned an an IPv4 mapped IPv6 address. (RFC4291)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#toString">toString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_toIPv6Address(
        this_ptr: *const crate::QHostAddress,
    ) -> *mut crate::QIPv6Address;

    /// <p>Returns the address as a string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#toString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the address as a string.</p>
    /// <p>For example, if the address is the IPv4 address 127.0.0.1, the returned string is "127.0.0.1". For IPv6 the string format will follow the RFC5952 recommendation. For <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, its IPv4 address will be returned ("0.0.0.0")</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#toIPv4Address">toIPv4Address</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_toString(
        this_ptr: *const crate::QHostAddress,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the scope ID of an IPv6 address. For IPv4 addresses, or if the address does not contain a scope ID, an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#scopeId">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the scope ID of an IPv6 address. For IPv4 addresses, or if the address does not contain a scope ID, an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> is returned.</p>
    /// <p>The IPv6 scope ID specifies the scope of <i>reachability</i> for non-global IPv6 addresses, limiting the area in which the address can be used. All IPv6 addresses are associated with such a reachability scope. The scope ID is used to disambiguate addresses that are not guaranteed to be globally unique.</p>
    /// <p>IPv6 specifies the following four levels of reachability:</p>
    /// <ul>
    /// <li>Node-local: Addresses that are only used for communicating with services on the same interface (e.g., the loopback interface "::1").</li>
    /// <li>Link-local: Addresses that are local to the network interface (<i>link</i>). There is always one link-local address for each IPv6 interface on your host. Link-local addresses ("fe80...") are generated from the MAC address of the local network adaptor, and are not guaranteed to be unique.</li>
    /// <li>Global: For globally routable addresses, such as public servers on the Internet.</li>
    /// </ul>
    /// <p>When using a link-local or site-local address for IPv6 connections, you must specify the scope ID. The scope ID for a link-local address is usually the same as the interface name (e.g., "eth0", "en1") or number (e.g., "1", "2").</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#setScopeId">setScopeId</a>(), <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>, and <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromName">QNetworkInterface::interfaceFromName</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_scopeId(
        this_ptr: *const crate::QHostAddress,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the IPv6 scope ID of the address to <i>id</i>. If the address protocol is not IPv6, this function does nothing. The scope ID may be set as an interface name (such as "eth0" or "en1") or as an integer representing the interface index. If <i>id</i> is an interface name, <a href="http://doc.qt.io/qt-5/qtnetwork-module.html">QtNetwork</a> will convert to an interface index using <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceIndexFromName">QNetworkInterface::interfaceIndexFromName</a>() before calling the operating system networking functions.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#setScopeId">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the IPv6 scope ID of the address to <i>id</i>. If the address protocol is not IPv6, this function does nothing. The scope ID may be set as an interface name (such as "eth0" or "en1") or as an integer representing the interface index. If <i>id</i> is an interface name, <a href="http://doc.qt.io/qt-5/qtnetwork-module.html">QtNetwork</a> will convert to an interface index using <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceIndexFromName">QNetworkInterface::interfaceIndexFromName</a>() before calling the operating system networking functions.</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#scopeId">scopeId</a>(), <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>, and <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromName">QNetworkInterface::interfaceFromName</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_setScopeId(
        this_ptr: *mut crate::QHostAddress,
        id: *const ::qt_core::QString,
    );

    /// <p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p>
    /// <p>The parameter <i>mode</i> controls which conversions are preformed between addresses of differing protocols. If no <i>mode</i> is given, <code>TolerantConversion</code> is performed by default.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#ConversionModeFlag-enum">ConversionMode</a> and <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-eq-eq">operator==</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isEqual(
        this_ptr: *const crate::QHostAddress,
        address: *const crate::QHostAddress,
        mode: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>. This operator just calls <a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">isEqual</a>(other, <a href="http://doc.qt.io/qt-5/qhostaddress.html#ConversionModeFlag-enum">StrictConversion</a>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>. This operator just calls <a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">isEqual</a>(other, <a href="http://doc.qt.io/qt-5/qhostaddress.html#ConversionModeFlag-enum">StrictConversion</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">isEqual</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_operator__(
        this_ptr: *const crate::QHostAddress,
        address: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-eq-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_operator__1(
        this_ptr: *const crate::QHostAddress,
        address: crate::q_host_address::SpecialAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if this host address is not valid for any host or interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this host address is not valid for any host or interface.</p>
    /// <p>The default constructor creates a null address.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isNull(this_ptr: *const crate::QHostAddress) -> bool;

    /// <p>Sets the host address to null and sets the protocol to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">QAbstractSocket::UnknownNetworkLayerProtocol</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the host address to null and sets the protocol to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#NetworkLayerProtocol-enum">QAbstractSocket::UnknownNetworkLayerProtocol</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_clear(this_ptr: *mut crate::QHostAddress);

    /// <p>Returns <code>true</code> if this IP is in the subnet described by the network prefix <i>subnet</i> and netmask <i>netmask</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isInSubnet">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this IP is in the subnet described by the network prefix <i>subnet</i> and netmask <i>netmask</i>.</p>
    /// <p>An IP is considered to belong to a subnet if it is contained between the lowest and the highest address in that subnet. In the case of IP version 4, the lowest address is the network address, while the highest address is the broadcast address.</p>
    /// <p>The <i>subnet</i> argument does not have to be the actual network address (the lowest address in the subnet). It can be any valid IP belonging to that subnet. In particular, if it is equal to the IP address held by this object, this function will always return true (provided the netmask is a valid value).</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#parseSubnet">parseSubnet</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isInSubnet(
        this_ptr: *const crate::QHostAddress,
        subnet: *const crate::QHostAddress,
        netmask: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isInSubnet-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Returns <code>true</code> if this IP is in the subnet described by <i>subnet</i>. The <a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a> member of <i>subnet</i> contains the network prefix and the int (second) member contains the netmask (prefix length).</p>
    /// <p>This function was introduced in Qt 4.5.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isInSubnet1(
        this_ptr: *const crate::QHostAddress,
        subnet: *const crate::QPairOfQHostAddressInt,
    ) -> bool;

    /// <p>returns <code>true</code> if the address is the IPv6 loopback address, or any of the IPv4 loopback addresses.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>returns <code>true</code> if the address is the IPv6 loopback address, or any of the IPv4 loopback addresses.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isLoopback(this_ptr: *const crate::QHostAddress)
        -> bool;

    /// <p>Returns <code>true</code> if the address is an IPv4 or IPv6 global address, <code>false</code> otherwise. A global address is an address that is not reserved for special purposes (like loopback or multicast) or future purposes.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is an IPv4 or IPv6 global address, <code>false</code> otherwise. A global address is an address that is not reserved for special purposes (like loopback or multicast) or future purposes.</p>
    /// <p>Note that IPv6 unique local unicast addresses are considered global addresses (see <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>()), as are IPv4 addresses reserved for local networks by <a href="https://tools.ietf.org/html/rfc1918">RFC 1918</a>.</p>
    /// <p>Also note that IPv6 site-local addresses are deprecated and should be considered as global in new applications. This function returns true for site-local addresses too.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isSiteLocal">isSiteLocal</a>(), and <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isGlobal(this_ptr: *const crate::QHostAddress) -> bool;

    /// <p>Returns <code>true</code> if the address is an IPv4 or IPv6 link-local address, <code>false</code> otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLinkLocal">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is an IPv4 or IPv6 link-local address, <code>false</code> otherwise.</p>
    /// <p>An IPv4 link-local address is an address in the network 169.254.0.0/16. An IPv6 link-local address is one in the network fe80::/10. See the <a href="https://www.iana.org/assignments/ipv6-address-space/ipv6-address-space.xhtml">IANA IPv6 Address Space</a> registry for more information.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">isMulticast</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isSiteLocal">isSiteLocal</a>(), and <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isLinkLocal(
        this_ptr: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the address is an IPv6 site-local address, <code>false</code> otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isSiteLocal">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is an IPv6 site-local address, <code>false</code> otherwise.</p>
    /// <p>An IPv6 site-local address is one in the network fec0::/10. See the <a href="https://www.iana.org/assignments/ipv6-address-space/ipv6-address-space.xhtml">IANA IPv6 Address Space</a> registry for more information.</p>
    /// <p>IPv6 site-local addresses are deprecated and should not be depended upon in new applications. New applications should not depend on this function and should consider site-local addresses the same as global (which is why <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>() also returns true). Site-local addresses were replaced by Unique Local Addresses (ULA).</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">isMulticast</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLinkLocal">isLinkLocal</a>(), and <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isSiteLocal(
        this_ptr: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the address is an IPv6 unique local unicast address, <code>false</code> otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is an IPv6 unique local unicast address, <code>false</code> otherwise.</p>
    /// <p>An IPv6 unique local unicast address is one in the network fc00::/7. See the <a href="https://www.iana.org/assignments/ipv6-address-space/ipv6-address-space.xhtml">IANA IPv6 Address Space</a> registry for more information.</p>
    /// <p>Note that Unique local unicast addresses count as global addresses too. RFC 4193 says that, in practice, "applications may treat these addresses like global scoped addresses." Only routers need care about the distinction.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">isMulticast</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLinkLocal">isLinkLocal</a>(), and isUniqueLocalUnicast().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isUniqueLocalUnicast(
        this_ptr: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the address is an IPv4 or IPv6 multicast address, <code>false</code> otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is an IPv4 or IPv6 multicast address, <code>false</code> otherwise.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLinkLocal">isLinkLocal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isSiteLocal">isSiteLocal</a>(), and <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isMulticast(
        this_ptr: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the address is the IPv4 broadcast address, <code>false</code> otherwise. The IPv4 broadcast address is 255.255.255.255.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isBroadcast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address is the IPv4 broadcast address, <code>false</code> otherwise. The IPv4 broadcast address is 255.255.255.255.</p>
    /// <p>Note that this function does not return true for an IPv4 network's local broadcast address. For that, please use <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> to obtain the broadcast addresses of the local machine.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isLoopback">isLoopback</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isGlobal">isGlobal</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isMulticast">isMulticast</a>(), <a href="http://doc.qt.io/qt-5/qhostaddress.html#isLinkLocal">isLinkLocal</a>(), and <a href="http://doc.qt.io/qt-5/qhostaddress.html#isUniqueLocalUnicast">isUniqueLocalUnicast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isBroadcast(
        this_ptr: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Parses the IP and subnet information contained in <i>subnet</i> and returns the network prefix for that network and its prefix length.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#parseSubnet">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Parses the IP and subnet information contained in <i>subnet</i> and returns the network prefix for that network and its prefix length.</p>
    /// <p>The IP address and the netmask must be separated by a slash (/).</p>
    /// <p>This function supports arguments in the form:</p>
    /// <ul>
    /// <li>123.123.123.123/n where n is any value between 0 and 32</li>
    /// <li>123.123.123.123/255.255.255.255</li>
    /// <li>&lt;ipv6-address&gt;/n where n is any value between 0 and 128</li>
    /// </ul>
    /// <p>For IP version 4, this function accepts as well missing trailing components (i.e., less than 4 octets, like "192.168.1"), followed or not by a dot. If the netmask is also missing in that case, it is set to the number of octets actually passed (in the example above, it would be 24, for 3 octets).</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isInSubnet">isInSubnet</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_parseSubnet(
        subnet: *const ::qt_core::QString,
    ) -> *mut crate::QPairOfQHostAddressInt;

    pub fn ctr_qt_network_ffi_swap9(
        value1: *mut crate::QHostAddress,
        value2: *mut crate::QHostAddress,
    );

    /// <p>Returns <code>true</code> if special address <i>lhs</i> is the same as host address <i>rhs</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if special address <i>lhs</i> is the same as host address <i>rhs</i>; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">isEqual</a>().</p></div>
    pub fn ctr_qt_network_ffi_operator__8(
        address1: crate::q_host_address::SpecialAddress,
        address2: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__10(
        arg1: *const ::qt_core::QDebug,
        arg2: *const crate::QHostAddress,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__11(
        arg1: *mut ::qt_core::QDataStream,
        arg2: *const crate::QHostAddress,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a host address into <i>address</i> from the stream <i>in</i> and returns a reference to the stream.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-gt-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a host address into <i>address</i> from the stream <i>in</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__12(
        arg1: *mut ::qt_core::QDataStream,
        arg2: *mut crate::QHostAddress,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Constructs an empty host info object with lookup ID <i>id</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty host info object with lookup ID <i>id</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupId">lookupId</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_QHostInfo(
        lookupId: ::std::os::raw::c_int,
    ) -> *mut crate::QHostInfo;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_QHostInfo1(
        d: *const crate::QHostInfo,
    ) -> *mut crate::QHostInfo;

    /// <p>Assigns the data of the <i>other</i> object to this host info object, and returns a reference to it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns the data of the <i>other</i> object to this host info object, and returns a reference to it.</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_operator_(
        this_ptr: *mut crate::QHostInfo,
        d: *const crate::QHostInfo,
    ) -> *mut crate::QHostInfo;

    /// <p>Destroys the host info object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#dtor.QHostInfo">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the host info object.</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_dQHostInfo(this_ptr: *mut crate::QHostInfo);

    /// <p>Swaps host-info <i>other</i> with this host-info. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps host-info <i>other</i> with this host-info. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.10.</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_swap(
        this_ptr: *mut crate::QHostInfo,
        other: *mut crate::QHostInfo,
    );

    /// <p>Returns the name of the host whose IP addresses were looked up.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the host whose IP addresses were looked up.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#setHostName">setHostName</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#localHostName">localHostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_hostName(
        this_ptr: *const crate::QHostInfo,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the host name of this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>hostName</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#setHostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the host name of this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>hostName</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_setHostName(
        this_ptr: *mut crate::QHostInfo,
        name: *const ::qt_core::QString,
    );

    /// <p>Returns the list of IP addresses associated with <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>(). This list may be empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#addresses">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of IP addresses associated with <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>(). This list may be empty.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span> info;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="keyword">if</span> (<span class="operator">!</span>info<span class="operator">.</span>addresses()<span class="operator">.</span>isEmpty()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span> address <span class="operator">=</span> info<span class="operator">.</span>addresses()<span class="operator">.</span>first();
    /// &#32;    <span class="comment">// use the first IP address</span>
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#setAddresses">setAddresses</a>(), <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>(), and <a href="http://doc.qt.io/qt-5/qhostinfo.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_addresses(
        this_ptr: *const crate::QHostInfo,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Sets the list of addresses in this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>addresses</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#setAddresses">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the list of addresses in this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>addresses</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#addresses">addresses</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_setAddresses(
        this_ptr: *mut crate::QHostInfo,
        addresses: *const crate::QListOfQHostAddress,
    );

    /// <p>Returns the type of error that occurred if the host name lookup failed; otherwise returns <a href="http://doc.qt.io/qt-5/qhostinfo.html#HostInfoError-enum">NoError</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of error that occurred if the host name lookup failed; otherwise returns <a href="http://doc.qt.io/qt-5/qhostinfo.html#HostInfoError-enum">NoError</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#setError">setError</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_error(
        this_ptr: *const crate::QHostInfo,
    ) -> crate::q_host_info::HostInfoError;

    /// <p>Sets the error type of this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>error</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#setError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the error type of this <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> to <i>error</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#error">error</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_setError(
        this_ptr: *mut crate::QHostInfo,
        error: crate::q_host_info::HostInfoError,
    );

    /// <p>If the lookup failed, this function returns a human readable description of the error; otherwise "Unknown error" is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If the lookup failed, this function returns a human readable description of the error; otherwise "Unknown error" is returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#setErrorString">setErrorString</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_errorString(
        this_ptr: *const crate::QHostInfo,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the human readable description of the error that occurred to <i>str</i> if the lookup failed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#setErrorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the human readable description of the error that occurred to <i>str</i> if the lookup failed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#errorString">errorString</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#setError">setError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_setErrorString(
        this_ptr: *mut crate::QHostInfo,
        errorString: *const ::qt_core::QString,
    );

    /// <p>Sets the ID of this lookup to <i>id</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#setLookupId">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the ID of this lookup to <i>id</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupId">lookupId</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_setLookupId(
        this_ptr: *mut crate::QHostInfo,
        id: ::std::os::raw::c_int,
    );

    /// <p>Returns the ID of this lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupId">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the ID of this lookup.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#setLookupId">setLookupId</a>(), <a href="http://doc.qt.io/qt-5/qhostinfo.html#abortHostLookup">abortHostLookup</a>(), and <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_lookupId(
        this_ptr: *const crate::QHostInfo,
    ) -> ::std::os::raw::c_int;

    /// <p>Looks up the IP address(es) associated with host name <i>name</i>, and returns an ID for the lookup. When the result of the lookup is ready, the slot or signal <i>member</i> in <i>receiver</i> is called with a <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> argument. The <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> object can then be inspected to get the results of the lookup.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Looks up the IP address(es) associated with host name <i>name</i>, and returns an ID for the lookup. When the result of the lookup is ready, the slot or signal <i>member</i> in <i>receiver</i> is called with a <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> argument. The <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> object can then be inspected to get the results of the lookup.</p>
    /// <p>The lookup is performed by a single function call, for example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>lookupHost(<span class="string">"www.kde.org"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;      <span class="keyword">this</span><span class="operator">,</span> SLOT(lookedUp(<span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span>)));
    /// </pre>
    /// <p>The implementation of the slot prints basic information about the addresses returned by the lookup, or reports an error if it failed:</p>
    /// <pre class="cpp"> <span class="type">void</span> MyWidget<span class="operator">::</span>lookedUp(<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span> <span class="operator">&amp;</span>host)
    ///  {
    /// &#32;    <span class="keyword">if</span> (host<span class="operator">.</span>error() <span class="operator">!</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>NoError) {
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Lookup failed:"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> host<span class="operator">.</span>errorString();
    /// &#32;   &#32;    <span class="keyword">return</span>;
    /// &#32;    }
    ///
    /// &#32;    <span class="keyword">const</span> <span class="keyword">auto</span> addresses <span class="operator">=</span> host<span class="operator">.</span>addresses();
    /// &#32;    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span> <span class="operator">&amp;</span>address : addresses)
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Found address:"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> address<span class="operator">.</span>toString();
    ///  }
    /// </pre>
    /// <p>If you pass a literal IP address to <i>name</i> instead of a host name, <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will search for the domain name for the IP (i.e., <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will perform a <i>reverse</i> lookup). On success, the resulting <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will contain both the resolved domain name and IP addresses for the host name. Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>lookupHost(<span class="string">"4.2.2.1"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;      <span class="keyword">this</span><span class="operator">,</span> SLOT(lookedUp(<span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span>)));
    /// </pre>
    /// <p><b>Note: </b>There is no guarantee on the order the signals will be emitted if you start multiple requests with lookupHost().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#abortHostLookup">abortHostLookup</a>(), <a href="http://doc.qt.io/qt-5/qhostinfo.html#addresses">addresses</a>(), <a href="http://doc.qt.io/qt-5/qhostinfo.html#error">error</a>(), and <a href="http://doc.qt.io/qt-5/qhostinfo.html#fromName">fromName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_lookupHost(
        name: *const ::qt_core::QString,
        receiver: *mut ::qt_core::QObject,
        member: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;

    /// <p>Aborts the host lookup with the ID <i>id</i>, as returned by <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#abortHostLookup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the host lookup with the ID <i>id</i>, as returned by <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupId">lookupId</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_abortHostLookup(lookupId: ::std::os::raw::c_int);

    /// <p>Looks up the IP address(es) for the given host <i>name</i>. The function blocks during the lookup which means that execution of the program is suspended until the results of the lookup are ready. Returns the result of the lookup in a <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#fromName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Looks up the IP address(es) for the given host <i>name</i>. The function blocks during the lookup which means that execution of the program is suspended until the results of the lookup are ready. Returns the result of the lookup in a <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> object.</p>
    /// <p>If you pass a literal IP address to <i>name</i> instead of a host name, <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will search for the domain name for the IP (i.e., <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will perform a <i>reverse</i> lookup). On success, the returned <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> will contain both the resolved domain name and IP addresses for the host name.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_fromName(
        name: *const ::qt_core::QString,
    ) -> *mut crate::QHostInfo;

    /// <p>Returns this machine's host name, if one is configured. Note that hostnames are not guaranteed to be globally unique, especially if they were configured automatically.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#localHostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this machine's host name, if one is configured. Note that hostnames are not guaranteed to be globally unique, especially if they were configured automatically.</p>
    /// <p>This function does not guarantee the returned host name is a Fully Qualified Domain Name (FQDN). For that, use <a href="http://doc.qt.io/qt-5/qhostinfo.html#fromName">fromName</a>() to resolve the returned name to an FQDN.</p>
    /// <p>This function returns the same as <a href="http://doc.qt.io/qt-5/qsysinfo.html#machineHostName">QSysInfo::machineHostName</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>() and <a href="http://doc.qt.io/qt-5/qhostinfo.html#localDomainName">localDomainName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_localHostName() -> *mut ::qt_core::QString;

    /// <p>Returns the DNS domain of this machine.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html#localDomainName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the DNS domain of this machine.</p>
    /// <p><b>Note: </b>DNS domains are not related to domain names found in Windows networks.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_localDomainName() -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_swap10(value1: *mut crate::QHostInfo, value2: *mut crate::QHostInfo);

    /// <p>Constructs an invalid (expired) policy with empty host name and subdomains not included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#QHstsPolicy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an invalid (expired) policy with empty host name and subdomains not included.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy() -> *mut crate::QHstsPolicy;

    /// <p>Constructs QHstsPolicy with <i>expiry</i> (in UTC); <i>flags</i> is a value indicating whether this policy must also include subdomains, <i>host</i> data is interpreted according to <i>mode</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#QHstsPolicy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs QHstsPolicy with <i>expiry</i> (in UTC); <i>flags</i> is a value indicating whether this policy must also include subdomains, <i>host</i> data is interpreted according to <i>mode</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qurl.html#setHost">QUrl::setHost</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#ParsingMode-enum">QUrl::ParsingMode</a>, and <a href="http://doc.qt.io/qt-5/qhstspolicy.html#PolicyFlag-enum">QHstsPolicy::PolicyFlag</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy1(
        expiry: *const ::qt_core::QDateTime,
        flags: ::std::os::raw::c_int,
        host: *const ::qt_core::QString,
        mode: ::qt_core::q_url::ParsingMode,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Creates a copy of <i>other</i> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#QHstsPolicy-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of <i>other</i> object.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy2(
        rhs: *const crate::QHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Copy-assignment operator, makes a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copy-assignment operator, makes a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_operator_(
        this_ptr: *mut crate::QHstsPolicy,
        rhs: *const crate::QHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Destructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#dtor.QHstsPolicy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destructor.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_dQHstsPolicy(this_ptr: *mut crate::QHstsPolicy);

    /// <p>Swaps this policy with the <i>other</i> policy.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this policy with the <i>other</i> policy.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_swap(
        this_ptr: *mut crate::QHstsPolicy,
        other: *mut crate::QHstsPolicy,
    );

    /// <p>Sets a host, <i>host</i> data is interpreted according to <i>mode</i> parameter.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#setHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets a host, <i>host</i> data is interpreted according to <i>mode</i> parameter.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#host">host</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#setHost">QUrl::setHost</a>(), and <a href="http://doc.qt.io/qt-5/qurl.html#ParsingMode-enum">QUrl::ParsingMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_setHost(
        this_ptr: *mut crate::QHstsPolicy,
        host: *const ::qt_core::QString,
        mode: ::qt_core::q_url::ParsingMode,
    );

    /// <p>Returns a host for a given policy, formatted according to <i>options</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#host">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a host for a given policy, formatted according to <i>options</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#setHost">setHost</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#host">QUrl::host</a>(), and <a href="http://doc.qt.io/qt-5/qurl.html#ComponentFormattingOption-enum">QUrl::ComponentFormattingOptions</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_host(
        this_ptr: *const crate::QHstsPolicy,
        options: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the expiration date for the policy (in UTC) to <i>expiry</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#setExpiry">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the expiration date for the policy (in UTC) to <i>expiry</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#expiry">expiry</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_setExpiry(
        this_ptr: *mut crate::QHstsPolicy,
        expiry: *const ::qt_core::QDateTime,
    );

    /// <p>Returns the expiration date for the policy (in UTC).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#expiry">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the expiration date for the policy (in UTC).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#setExpiry">setExpiry</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_expiry(
        this_ptr: *const crate::QHstsPolicy,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Sets whether subdomains are included for this policy to <i>include</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#setIncludesSubDomains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets whether subdomains are included for this policy to <i>include</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#includesSubDomains">includesSubDomains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_setIncludesSubDomains(
        this_ptr: *mut crate::QHstsPolicy,
        include: bool,
    );

    /// <p>Returns <code>true</code> if this policy also includes subdomains.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#includesSubDomains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this policy also includes subdomains.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#setIncludesSubDomains">setIncludesSubDomains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_includesSubDomains(
        this_ptr: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Return <code>true</code> if this policy has a valid expiration date and this date is greater than QDateTime::currentGetDateTimeUtc().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#isExpired">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Return <code>true</code> if this policy has a valid expiration date and this date is greater than QDateTime::currentGetDateTimeUtc().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#setExpiry">setExpiry</a>() and <a href="http://doc.qt.io/qt-5/qhstspolicy.html#expiry">expiry</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_isExpired(this_ptr: *const crate::QHstsPolicy) -> bool;

    pub fn ctr_qt_network_ffi_swap11(
        value1: *mut crate::QHstsPolicy,
        value2: *mut crate::QHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_operator__13(
        lhs: *const crate::QHstsPolicy,
        rhs: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Default constructs a QHttp2Configuration object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#QHttp2Configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Default constructs a QHttp2Configuration object.</p>
    /// <p>Such a configuration has the following values:</p>
    /// <ul>
    /// <li>Server push is disabled</li>
    /// <li>Huffman string compression is enabled</li>
    /// <li>Window size for connection-level flow control is 65535 octets</li>
    /// <li>Window size for stream-level flow control is 65535 octets</li>
    /// <li>Frame size is 16384 octets</li>
    /// </ul></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_QHttp2Configuration(
    ) -> *mut crate::QHttp2Configuration;

    /// <p>Copy-constructs this QHttp2Configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#QHttp2Configuration-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copy-constructs this QHttp2Configuration.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_QHttp2Configuration1(
        other: *const crate::QHttp2Configuration,
    ) -> *mut crate::QHttp2Configuration;

    /// <p>Copy-assigns to this <a href="http://doc.qt.io/qt-5/qhttp2configuration.html">QHttp2Configuration</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copy-assigns to this <a href="http://doc.qt.io/qt-5/qhttp2configuration.html">QHttp2Configuration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_operator_(
        this_ptr: *mut crate::QHttp2Configuration,
        other: *const crate::QHttp2Configuration,
    ) -> *mut crate::QHttp2Configuration;

    /// <p>Destructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#dtor.QHttp2Configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destructor.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_dQHttp2Configuration(
        this_ptr: *mut crate::QHttp2Configuration,
    );

    /// <p>If <i>enable</i> is <code>true</code>, a remote server can potentially use server push to send reponses in advance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setServerPushEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enable</i> is <code>true</code>, a remote server can potentially use server push to send reponses in advance.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#serverPushEnabled">serverPushEnabled</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_setServerPushEnabled(
        this_ptr: *mut crate::QHttp2Configuration,
        enable: bool,
    );

    /// <p>Returns true if server push was enabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#serverPushEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if server push was enabled.</p>
    /// <p><b>Note: </b>By default, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> disables server push via the 'SETTINGS' frame.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setServerPushEnabled">setServerPushEnabled</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_serverPushEnabled(
        this_ptr: *const crate::QHttp2Configuration,
    ) -> bool;

    /// <p>If <i>enable</i> is <code>true</code>, HPACK compression will additionally compress string using the Huffman coding. Enabled by default.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setHuffmanCompressionEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enable</i> is <code>true</code>, HPACK compression will additionally compress string using the Huffman coding. Enabled by default.</p>
    /// <p><b>Note: </b>This parameter only affects 'HEADERS' frames that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is sending.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#huffmanCompressionEnabled">huffmanCompressionEnabled</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_setHuffmanCompressionEnabled(
        this_ptr: *mut crate::QHttp2Configuration,
        enable: bool,
    );

    /// <p>Returns <code>true</code> if the Huffman coding in HPACK is enabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#huffmanCompressionEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the Huffman coding in HPACK is enabled.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setHuffmanCompressionEnabled">setHuffmanCompressionEnabled</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_huffmanCompressionEnabled(
        this_ptr: *const crate::QHttp2Configuration,
    ) -> bool;

    /// <p>Sets the window size for connection-level flow control. <i>size</i> cannot be 0 and must not exceed 2147483647 octets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setSessionReceiveWindowSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the window size for connection-level flow control. <i>size</i> cannot be 0 and must not exceed 2147483647 octets.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#sessionReceiveWindowSize">sessionReceiveWindowSize</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_setSessionReceiveWindowSize(
        this_ptr: *mut crate::QHttp2Configuration,
        size: ::std::os::raw::c_uint,
    ) -> bool;

    /// <p>Returns the window size for connection-level flow control. The default value <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will be using is 2147483647 octets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#sessionReceiveWindowSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the window size for connection-level flow control. The default value <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will be using is 2147483647 octets.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setSessionReceiveWindowSize">setSessionReceiveWindowSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_sessionReceiveWindowSize(
        this_ptr: *const crate::QHttp2Configuration,
    ) -> ::std::os::raw::c_uint;

    /// <p>Sets the window size for stream-level flow control. <i>size</i> cannot be 0 and must not exceed 2147483647 octets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setStreamReceiveWindowSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the window size for stream-level flow control. <i>size</i> cannot be 0 and must not exceed 2147483647 octets.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#streamReceiveWindowSize">streamReceiveWindowSize</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_setStreamReceiveWindowSize(
        this_ptr: *mut crate::QHttp2Configuration,
        size: ::std::os::raw::c_uint,
    ) -> bool;

    /// <p>Returns the window size for stream-level flow control. The default value <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will be using is 21474836 octets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#streamReceiveWindowSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the window size for stream-level flow control. The default value <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will be using is 21474836 octets.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setStreamReceiveWindowSize">setStreamReceiveWindowSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_streamReceiveWindowSize(
        this_ptr: *const crate::QHttp2Configuration,
    ) -> ::std::os::raw::c_uint;

    /// <p>Sets the maximum frame size that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will advertise to the server when sending its initial SETTINGS frame.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setMaxFrameSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum frame size that <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will advertise to the server when sending its initial SETTINGS frame.</p>
    /// <p><b>Note: </b>While this <i>size</i> is required to be within a range between 16384 and 16777215 inclusive, the actual payload size in frames that carry payload maybe be less than 16384.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#maxFrameSize">maxFrameSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_setMaxFrameSize(
        this_ptr: *mut crate::QHttp2Configuration,
        size: ::std::os::raw::c_uint,
    ) -> bool;

    /// <p>The maximum payload size that HTTP/2 frames can have. The default (initial) value is 16384 octets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#maxFrameSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The maximum payload size that HTTP/2 frames can have. The default (initial) value is 16384 octets.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttp2configuration.html#setMaxFrameSize">setMaxFrameSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_maxFrameSize(
        this_ptr: *const crate::QHttp2Configuration,
    ) -> ::std::os::raw::c_uint;

    /// <p>Swaps this configuration with the <i>other</i> configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttp2configuration.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this configuration with the <i>other</i> configuration.</p></div>
    pub fn ctr_qt_network_ffi_QHttp2Configuration_swap(
        this_ptr: *mut crate::QHttp2Configuration,
        other: *mut crate::QHttp2Configuration,
    );

    pub fn ctr_qt_network_ffi_swap12(
        value1: *mut crate::QHttp2Configuration,
        value2: *mut crate::QHttp2Configuration,
    );

    pub fn ctr_qt_network_ffi_operator__15(
        lhs: *const crate::QHttp2Configuration,
        rhs: *const crate::QHttp2Configuration,
    ) -> bool;

    /// <p>Constructs an empty QHttpPart object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#QHttpPart">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty QHttpPart object.</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_QHttpPart() -> *mut crate::QHttpPart;

    /// <p>Creates a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#QHttpPart-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_QHttpPart1(
        other: *const crate::QHttpPart,
    ) -> *mut crate::QHttpPart;

    /// <p>Destroys this <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#dtor.QHttpPart">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys this <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_dQHttpPart(this_ptr: *mut crate::QHttpPart);

    pub fn ctr_qt_network_ffi_QHttpPart_operator_1(
        this_ptr: *mut crate::QHttpPart,
        other: *const crate::QHttpPart,
    ) -> *mut crate::QHttpPart;

    /// <p>Swaps this HTTP part with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this HTTP part with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_swap(
        this_ptr: *mut crate::QHttpPart,
        other: *mut crate::QHttpPart,
    );

    /// <p>Returns <code>true</code> if this object is the same as <i>other</i> (i.e., if they have the same headers and body).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this object is the same as <i>other</i> (i.e., if they have the same headers and body).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttppart.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_operator__(
        this_ptr: *const crate::QHttpPart,
        other: *const crate::QHttpPart,
    ) -> bool;

    /// <p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#setHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qhttppart.html#setRawHeader">setRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setHeader">QNetworkRequest::setHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_setHeader(
        this_ptr: *mut crate::QHttpPart,
        header: crate::q_network_request::KnownHeaders,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#setRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    /// <p><b>Note: </b>Setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (",") and set one single raw header.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qhttppart.html#setHeader">setHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setRawHeader">QNetworkRequest::setRawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_setRawHeader(
        this_ptr: *mut crate::QHttpPart,
        headerName: *const ::qt_core::QByteArray,
        headerValue: *const ::qt_core::QByteArray,
    );

    /// <p>Sets the body of this MIME part to <i>body</i>. The body set with this method will be used unless the device is set via <a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">setBodyDevice</a>(). For a large amount of data (e.g. an image), use <a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">setBodyDevice</a>(), which will not copy the data internally.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the body of this MIME part to <i>body</i>. The body set with this method will be used unless the device is set via <a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">setBodyDevice</a>(). For a large amount of data (e.g. an image), use <a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">setBodyDevice</a>(), which will not copy the data internally.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">setBodyDevice</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_setBody(
        this_ptr: *mut crate::QHttpPart,
        body: *const ::qt_core::QByteArray,
    );

    /// <p>Sets the device to read the content from to <i>device</i>. For large amounts of data this method should be preferred over <a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">setBody</a>(), because the content is not copied when using this method, but read directly from the device. <i>device</i> must be open and readable. <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a> does not take ownership of <i>device</i>, i.e. the device must be closed and destroyed if necessary. if <i>device</i> is sequential (e.g. sockets, but not files), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>() should be called after <i>device</i> has emitted finished(). For unsetting the device and using data set via <a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">setBody</a>(), use "setBodyDevice(0)".</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttppart.html#setBodyDevice">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the device to read the content from to <i>device</i>. For large amounts of data this method should be preferred over <a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">setBody</a>(), because the content is not copied when using this method, but read directly from the device. <i>device</i> must be open and readable. <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a> does not take ownership of <i>device</i>, i.e. the device must be closed and destroyed if necessary. if <i>device</i> is sequential (e.g. sockets, but not files), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>() should be called after <i>device</i> has emitted finished(). For unsetting the device and using data set via <a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">setBody</a>(), use "setBodyDevice(0)".</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttppart.html#setBody">setBody</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpPart_setBodyDevice(
        this_ptr: *mut crate::QHttpPart,
        device: *mut ::qt_core::QIODevice,
    );

    pub fn ctr_qt_network_ffi_swap13(value1: *mut crate::QHttpPart, value2: *mut crate::QHttpPart);

    pub fn ctr_qt_network_ffi_QHttpMultiPart_metaObject(
        this_ptr: *const crate::QHttpMultiPart,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QHttpMultiPart_qt_metacast(
        this_ptr: *mut crate::QHttpMultiPart,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QHttpMultiPart_qt_metacall(
        this_ptr: *mut crate::QHttpMultiPart,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QHttpMultiPart_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QHttpMultiPart_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QHttpMultiPart with content type <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">MixedType</a> and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QHttpMultiPart with content type <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">MixedType</a> and sets <i>parent</i> as the parent object.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QHttpMultiPart;

    /// <p>Constructs a QHttpMultiPart with content type <i>contentType</i> and sets parent as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QHttpMultiPart with content type <i>contentType</i> and sets parent as the parent object.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart1(
        contentType: crate::q_http_multi_part::ContentType,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QHttpMultiPart;

    /// <p>Destroys the multipart.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#dtor.QHttpMultiPart">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the multipart.</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_dQHttpMultiPart(this_ptr: *mut crate::QHttpMultiPart);

    /// <p>Appends <i>httpPart</i> to this multipart.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>httpPart</i> to this multipart.</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_append(
        this_ptr: *mut crate::QHttpMultiPart,
        httpPart: *const crate::QHttpPart,
    );

    /// <p>Sets the content type to <i>contentType</i>. The content type will be used in the HTTP header section when sending the multipart message via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>(). In case you want to use a multipart subtype not contained in <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a>, you can add the "Content-Type" header field to the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a> by hand, and then use this request together with the multipart message for posting.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#setContentType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the content type to <i>contentType</i>. The content type will be used in the HTTP header section when sending the multipart message via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>(). In case you want to use a multipart subtype not contained in <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a>, you can add the "Content-Type" header field to the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a> by hand, and then use this request together with the multipart message for posting.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a> and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">QNetworkAccessManager::post</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_setContentType(
        this_ptr: *mut crate::QHttpMultiPart,
        contentType: crate::q_http_multi_part::ContentType,
    );

    /// <p>returns the boundary.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#boundary">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>returns the boundary.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#setBoundary">setBoundary</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_boundary(
        this_ptr: *const crate::QHttpMultiPart,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the boundary to <i>boundary</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#setBoundary">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the boundary to <i>boundary</i>.</p>
    /// <p>Usually, you do not need to generate a boundary yourself; upon construction the boundary is initiated with the string "boundary_.oOo.<a href="http://doc.qt.io/qt-5/qromancalendar.html">_</a>" followed by random characters, and provides enough uniqueness to make sure it does not occur inside the parts itself.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#boundary">boundary</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_setBoundary(
        this_ptr: *mut crate::QHttpMultiPart,
        boundary: *const ::qt_core::QByteArray,
    );

    pub fn ctr_qt_network_ffi_QLocalServer_metaObject(
        this_ptr: *const crate::QLocalServer,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QLocalServer_qt_metacast(
        this_ptr: *mut crate::QLocalServer,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QLocalServer_qt_metacall(
        this_ptr: *mut crate::QLocalServer,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QLocalServer_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QLocalServer_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Create a new local socket server with the given <i>parent</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#QLocalServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Create a new local socket server with the given <i>parent</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_QLocalServer(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalServer;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> object. If the server is listening for connections, it is automatically closed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#dtor.QLocalServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> object. If the server is listening for connections, it is automatically closed.</p>
    /// <p>Any client QLocalSockets that are still connected must either disconnect or be reparented before the server is deleted.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_dQLocalServer(this_ptr: *mut crate::QLocalServer);

    /// <p>Stop listening for incoming connections. Existing connections are not affected, but any new connections will be refused.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Stop listening for incoming connections. Existing connections are not affected, but any new connections will be refused.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#isListening">isListening</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_close(this_ptr: *mut crate::QLocalServer);

    /// <p>Returns the human-readable message appropriate to the current error reported by <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverError">serverError</a>(). If no suitable string is available, an empty string is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the human-readable message appropriate to the current error reported by <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverError">serverError</a>(). If no suitable string is available, an empty string is returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#serverError">serverError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_errorString(
        this_ptr: *const crate::QLocalServer,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns <code>true</code> if the server has a pending connection; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the server has a pending connection; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#setMaxPendingConnections">setMaxPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_hasPendingConnections(
        this_ptr: *const crate::QLocalServer,
    ) -> bool;

    /// <p>Returns <code>true</code> if the server is listening for incoming connections otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#isListening">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the server is listening for incoming connections otherwise false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_isListening(
        this_ptr: *const crate::QLocalServer,
    ) -> bool;

    /// <p>Tells the server to listen for incoming connections on <i>name</i>. If the server is currently listening then it will return false. Return true on success otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Tells the server to listen for incoming connections on <i>name</i>. If the server is currently listening then it will return false. Return true on success otherwise false.</p>
    /// <p><i>name</i> can be a single name and <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> will determine the correct platform specific path. <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">serverName</a>() will return the name that is passed into listen.</p>
    /// <p>Usually you would just pass in a name like "foo", but on Unix this could also be a path such as "/tmp/foo" and on Windows this could be a pipe path such as "\\.\pipe\foo"</p>
    /// <p><b>Note: </b>On Unix if the server crashes without closing listen will fail with AddressInUseError. To create a new server the file should be removed. On Windows two local servers can listen to the same pipe at the same time, but any connections will go to one of the server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">serverName</a>(), <a href="http://doc.qt.io/qt-5/qlocalserver.html#isListening">isListening</a>(), and <a href="http://doc.qt.io/qt-5/qlocalserver.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_listen(
        this_ptr: *mut crate::QLocalServer,
        name: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Instructs the server to listen for incoming connections on <i>socketDescriptor</i>. The property returns <code>false</code> if the server is currently listening. It returns <code>true</code> on success; otherwise, it returns <code>false</code>. The socket must be ready to accept new connections with no extra platform-specific functions called. The socket is set into non-blocking mode.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Instructs the server to listen for incoming connections on <i>socketDescriptor</i>. The property returns <code>false</code> if the server is currently listening. It returns <code>true</code> on success; otherwise, it returns <code>false</code>. The socket must be ready to accept new connections with no extra platform-specific functions called. The socket is set into non-blocking mode.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">serverName</a>(), <a href="http://doc.qt.io/qt-5/qlocalserver.html#fullServerName">fullServerName</a>() may return a string with a name if this option is supported by the platform; otherwise, they return an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#isListening">isListening</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_listen1(
        this_ptr: *mut crate::QLocalServer,
        socketDescriptor: isize,
    ) -> bool;

    /// <p>Returns the maximum number of pending accepted connections. The default is 30.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#maxPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of pending accepted connections. The default is 30.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#setMaxPendingConnections">setMaxPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_maxPendingConnections(
        this_ptr: *const crate::QLocalServer,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the next pending connection as a connected <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the next pending connection as a connected <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> object.</p>
    /// <p>The socket is created as a child of the server, which means that it is automatically deleted when the <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</p>
    /// <p><code>nullptr</code> is returned if this function is called when there are no pending connections.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>(), <a href="http://doc.qt.io/qt-5/qlocalserver.html#newConnection">newConnection</a>(), and <a href="http://doc.qt.io/qt-5/qlocalserver.html#incomingConnection">incomingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_nextPendingConnection(
        this_ptr: *mut crate::QLocalServer,
    ) -> *mut crate::QLocalSocket;

    /// <p>Returns the server name if the server is listening for connections; otherwise returns QString()</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the server name if the server is listening for connections; otherwise returns QString()</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#fullServerName">fullServerName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_serverName(
        this_ptr: *const crate::QLocalServer,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the full path that the server is listening on.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#fullServerName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the full path that the server is listening on.</p>
    /// <p>Note: This is platform specific</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">serverName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_fullServerName(
        this_ptr: *const crate::QLocalServer,
    ) -> *mut ::qt_core::QString;

    /// <p>Removes any server instance that might cause a call to <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() to fail and returns <code>true</code> if successful; otherwise returns <code>false</code>. This function is meant to recover from a crash, when the previous server instance has not been cleaned up.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#removeServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes any server instance that might cause a call to <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() to fail and returns <code>true</code> if successful; otherwise returns <code>false</code>. This function is meant to recover from a crash, when the previous server instance has not been cleaned up.</p>
    /// <p>On Windows, this function does nothing; on Unix, it removes the socket file given by <i>name</i>.</p>
    /// <p><b>Warning:</b> Be careful to avoid removing sockets of running instances.</p>
    /// <p>This function was introduced in Qt 4.5.</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_removeServer(name: *const ::qt_core::QString) -> bool;

    /// <p>Returns the type of error that occurred last or <a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">NoError</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of error that occurred last or <a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">NoError</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_serverError(
        this_ptr: *const crate::QLocalServer,
    ) -> crate::q_abstract_socket::SocketError;

    /// <p>Sets the maximum number of pending accepted connections to <i>numConnections</i>. <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> will accept no more than <i>numConnections</i> incoming connections before <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>() is called.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#setMaxPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum number of pending accepted connections to <i>numConnections</i>. <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> will accept no more than <i>numConnections</i> incoming connections before <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>() is called.</p>
    /// <p>Note: Even though <a href="http://doc.qt.io/qt-5/qlocalserver.html">QLocalServer</a> will stop accepting new connections after it has reached its maximum number of pending connections, the operating system may still keep them in queue which will result in clients signaling that it is connected.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#maxPendingConnections">maxPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_setMaxPendingConnections(
        this_ptr: *mut crate::QLocalServer,
        numConnections: ::std::os::raw::c_int,
    );

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    /// <p>This is a blocking function call. Its use is ill-advised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qlocalserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_waitForNewConnection(
        this_ptr: *mut crate::QLocalServer,
        msec: ::std::os::raw::c_int,
        timedOut: *mut bool,
    ) -> bool;

    /// <p>The setSocketOptions method controls how the socket operates. For example the socket may restrict access to what user ids can connect to the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#socketOptions-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The setSocketOptions method controls how the socket operates. For example the socket may restrict access to what user ids can connect to the socket.</p>
    /// <p>These options must be set before <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() is called.</p>
    /// <p>In some cases, such as with Unix domain sockets on Linux, the access to the socket will be determined by file system permissions, and are created based on the umask. Setting the access flags will overide this and will restrict or permit access as specified.</p>
    /// <p>Other Unix-based operating systems, such as macOS, do not honor file permissions for Unix domain sockets and by default have WorldAccess and these permission flags will have no effect.</p>
    /// <p>On Windows, <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">UserAccessOption</a> is sufficient to allow a non elevated process to connect to a local server created by an elevated process run by the same user. <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">GroupAccessOption</a> refers to the primary group of the process (see TokenPrimaryGroup in the Windows documentation). <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">OtherAccessOption</a> refers to the well known "Everyone" group.</p>
    /// <p>By default none of the flags are set, access permissions are the platform default.</p>
    /// <p>This property was introduced in Qt 5.0.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QLocalServer::SocketOptions </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qlocalserver.html#socketOptions">socketOptions</a></b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setSocketOptions</b></span>(QLocalServer::SocketOptions <i>options</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_setSocketOptions(
        this_ptr: *mut crate::QLocalServer,
        options: ::std::os::raw::c_int,
    );

    /// <p>The setSocketOptions method controls how the socket operates. For example the socket may restrict access to what user ids can connect to the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#socketOptions-prop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The setSocketOptions method controls how the socket operates. For example the socket may restrict access to what user ids can connect to the socket.</p>
    /// <p>These options must be set before <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() is called.</p>
    /// <p>In some cases, such as with Unix domain sockets on Linux, the access to the socket will be determined by file system permissions, and are created based on the umask. Setting the access flags will overide this and will restrict or permit access as specified.</p>
    /// <p>Other Unix-based operating systems, such as macOS, do not honor file permissions for Unix domain sockets and by default have WorldAccess and these permission flags will have no effect.</p>
    /// <p>On Windows, <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">UserAccessOption</a> is sufficient to allow a non elevated process to connect to a local server created by an elevated process run by the same user. <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">GroupAccessOption</a> refers to the primary group of the process (see TokenPrimaryGroup in the Windows documentation). <a href="http://doc.qt.io/qt-5/qlocalserver.html#SocketOption-enum">OtherAccessOption</a> refers to the well known "Everyone" group.</p>
    /// <p>By default none of the flags are set, access permissions are the platform default.</p>
    /// <p>This property was introduced in Qt 5.0.</p>
    /// <p><b>Access functions:</b></p>
    /// <div class="table"><table class="alignedsummary">
    /// <tbody><tr><td class="memItemLeft topAlign rightAlign"> QLocalServer::SocketOptions </td><td class="memItemRight bottomAlign"><span class="name"><b><a href="http://doc.qt.io/qt-5/qlocalserver.html#socketOptions">socketOptions</a></b></span>() const</td></tr>
    /// <tr><td class="memItemLeft topAlign rightAlign"> void </td><td class="memItemRight bottomAlign"><span class="name"><b>setSocketOptions</b></span>(QLocalServer::SocketOptions <i>options</i>)</td></tr>
    /// </tbody></table></div>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_socketOptions(
        this_ptr: *const crate::QLocalServer,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the native socket descriptor the server uses to listen for incoming instructions, or -1 if the server is not listening.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#socketDescriptor">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the native socket descriptor the server uses to listen for incoming instructions, or -1 if the server is not listening.</p>
    /// <p>The type of the descriptor depends on the platform:</p>
    /// <ul>
    /// <li>On Windows, the returned value is a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms740522(v=vs.85).aspx">Winsock 2 Socket Handle</a>.</li>
    /// <li>With WinRT and on INTEGRITY, the returned value is the <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> socket descriptor and the type is defined by <a href="http://doc.qt.io/qt-5/qtcpserver.html#socketDescriptor">socketDescriptor</a>.</li>
    /// <li>On all other UNIX-like operating systems, the type is a file descriptor representing a listening socket.</li>
    /// </ul>
    /// <p>This function was introduced in Qt 5.10.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_socketDescriptor(
        this_ptr: *const crate::QLocalServer,
    ) -> isize;

    pub fn ctr_qt_network_ffi_QLocalSocket_metaObject(
        this_ptr: *const crate::QLocalSocket,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QLocalSocket_qt_metacast(
        this_ptr: *mut crate::QLocalSocket,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QLocalSocket_qt_metacall(
        this_ptr: *mut crate::QLocalSocket,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QLocalSocket_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QLocalSocket_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a new local socket. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#QLocalSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a new local socket. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>'s constructor.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_QLocalSocket(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalSocket;

    /// <p>Destroys the socket, closing the connection if necessary.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#dtor.QLocalSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the socket, closing the connection if necessary.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_dQLocalSocket(this_ptr: *mut crate::QLocalSocket);

    pub fn ctr_qt_network_ffi_QLocalSocket_connectToServer(
        this_ptr: *mut crate::QLocalSocket,
        openMode: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_QLocalSocket_connectToServer1(
        this_ptr: *mut crate::QLocalSocket,
        name: *const ::qt_core::QString,
        openMode: ::std::os::raw::c_int,
    );

    /// <p>Attempts to close the socket. If there is pending data waiting to be written, <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> will enter <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">ClosingState</a> and wait until all data has been written. Eventually, it will enter <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">UnconnectedState</a> and emit the disconnectedFromServer() signal.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to close the socket. If there is pending data waiting to be written, <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> will enter <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">ClosingState</a> and wait until all data has been written. Eventually, it will enter <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">UnconnectedState</a> and emit the disconnectedFromServer() signal.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_disconnectFromServer(this_ptr: *mut crate::QLocalSocket);

    /// <p>Set the <i>name</i> of the peer to connect to. On Windows name is the name of a named pipe; on Unix name is the name of a local domain socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Set the <i>name</i> of the peer to connect to. On Windows name is the name of a named pipe; on Unix name is the name of a local domain socket.</p>
    /// <p>This function must be called when the socket is not connected.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#serverName">serverName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_setServerName(
        this_ptr: *mut crate::QLocalSocket,
        name: *const ::qt_core::QString,
    );

    /// <p>Returns the name of the peer as specified by <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>(), or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>() has not been called or <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() failed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#serverName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the peer as specified by <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>(), or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>() has not been called or <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() failed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>(), and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#fullServerName">fullServerName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_serverName(
        this_ptr: *const crate::QLocalSocket,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the server path that the socket is connected to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#fullServerName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the server path that the socket is connected to.</p>
    /// <p><b>Note: </b>The return value of this function is platform specific.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#serverName">serverName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_fullServerName(
        this_ptr: *const crate::QLocalSocket,
    ) -> *mut ::qt_core::QString;

    /// <p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">disconnectFromServer</a>(), this function immediately closes the socket, clearing any pending data in the write buffer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#abort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the current connection and resets the socket. Unlike <a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">disconnectFromServer</a>(), this function immediately closes the socket, clearing any pending data in the write buffer.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">disconnectFromServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_abort(this_ptr: *mut crate::QLocalSocket);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#isSequential">QIODevice::isSequential</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#isSequential">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#isSequential">QIODevice::isSequential</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_isSequential(
        this_ptr: *const crate::QLocalSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">QIODevice::bytesAvailable</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#bytesAvailable">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">QIODevice::bytesAvailable</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_bytesAvailable(
        this_ptr: *const crate::QLocalSocket,
    ) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesToWrite">QIODevice::bytesToWrite</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#bytesToWrite">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesToWrite">QIODevice::bytesToWrite</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_bytesToWrite(
        this_ptr: *const crate::QLocalSocket,
    ) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#canReadLine">QIODevice::canReadLine</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#canReadLine">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#canReadLine">QIODevice::canReadLine</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_canReadLine(
        this_ptr: *const crate::QLocalSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#open">QIODevice::open</a>(QIODevice::OpenMode mode).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlocalsocket.html#open">C++ documentation</a> for <span style='color: green;'>```[override virtual] bool QLocalSocket::open(QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#open">QIODevice::open</a>(QIODevice::OpenMode mode).</p>
    /// <p>Equivalent to <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>(<a href="http://doc.qt.io/qt-5/qiodevice.html#OpenModeFlag-enum">OpenMode</a> mode). The socket is opened in the given <i>openMode</i> to the server defined by <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>().</p>
    /// <p>Note that unlike in most other <a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a> subclasses, open() may not open the device directly. The function return false if the socket was already connected or if the server to connect to was not defined and true in any other case. The <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connected">connected</a>() or <a href="http://doc.qt.io/qt-5/qlocalsocket.html#errorOccurred">errorOccurred</a>() signals will be emitted once the device is actualy open (or the connection failed).</p>
    /// <p>See <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() for more details.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_open(
        this_ptr: *mut crate::QLocalSocket,
        openMode: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_close(this_ptr: *mut crate::QLocalSocket);

    /// <p>Returns the type of error that last occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of error that last occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">state</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_error(
        this_ptr: *const crate::QLocalSocket,
    ) -> crate::q_local_socket::LocalSocketError;

    /// <p>This function writes as much as possible from the internal write buffer to the socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#flush">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function writes as much as possible from the internal write buffer to the socket, without blocking. If any data was written, this function returns <code>true</code>; otherwise false is returned.</p>
    /// <p>Call this function if you need <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> to start sending buffered data immediately. The number of bytes successfully written depends on the operating system. In most cases, you do not need to call this function, because <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> will start sending data automatically once control goes back to the event loop. In the absence of an event loop, call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">waitForBytesWritten</a>() instead.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_flush(this_ptr: *mut crate::QLocalSocket) -> bool;

    /// <p>Returns <code>true</code> if the socket is valid and ready for use; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the socket is valid and ready for use; otherwise returns <code>false</code>.</p>
    /// <p><b>Note: </b>The socket's state must be <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">ConnectedState</a> before reading and writing can occur.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">state</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_isValid(this_ptr: *const crate::QLocalSocket) -> bool;

    /// <p>Returns the size of the internal read buffer. This limits the amount of data that the client can receive before you call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#readAll">readAll</a>(). A read buffer size of 0 (the default) means that the buffer has no size limit, ensuring that no data is lost.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#readBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the size of the internal read buffer. This limits the amount of data that the client can receive before you call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#readAll">readAll</a>(). A read buffer size of 0 (the default) means that the buffer has no size limit, ensuring that no data is lost.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#setReadBufferSize">setReadBufferSize</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_readBufferSize(
        this_ptr: *const crate::QLocalSocket,
    ) -> i64;

    /// <p>Sets the size of <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a>'s internal read buffer to be <i>size</i> bytes.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setReadBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a>'s internal read buffer to be <i>size</i> bytes.</p>
    /// <p>If the buffer size is limited to a certain size, <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> won't buffer more than this size of data. Exceptionally, a buffer size of 0 means that the read buffer is unlimited and all incoming data is buffered. This is the default.</p>
    /// <p>This option is useful if you only read the data at certain points in time (e.g., in a real-time streaming application) or if you want to protect your socket against receiving too much data, which may eventually cause your application to run out of memory.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#readBufferSize">readBufferSize</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_setReadBufferSize(
        this_ptr: *mut crate::QLocalSocket,
        size: i64,
    );

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```bool QLocalSocket::setSocketDescriptor(qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two local sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">state</a>(), and <a href="http://doc.qt.io/qt-5/qiodevice.html#openMode">openMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor(
        this_ptr: *mut crate::QLocalSocket,
        socketDescriptor: isize,
        socketState: crate::q_local_socket::LocalSocketState,
        openMode: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Returns the native socket descriptor of the <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> object if this is available; otherwise returns -1.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the native socket descriptor of the <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> object if this is available; otherwise returns -1.</p>
    /// <p>The socket descriptor is not available when <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> is in <a href="http://doc.qt.io/qt-5/qlocalsocket.html#LocalSocketState-enum">UnconnectedState</a>. The type of the descriptor depends on the platform:</p>
    /// <ul>
    /// <li>On Windows, the returned value is a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms740522(v=vs.85).aspx">Winsock 2 Socket Handle</a>.</li>
    /// <li>With WinRT and on INTEGRITY, the returned value is the <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> socket descriptor and the type is defined by <a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>.</li>
    /// <li>On all other UNIX-like operating systems, the type is a file descriptor representing a socket.</li>
    /// </ul>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#setSocketDescriptor">setSocketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_socketDescriptor(
        this_ptr: *const crate::QLocalSocket,
    ) -> isize;

    /// <p>Returns the state of the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the state of the socket.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_state(
        this_ptr: *const crate::QLocalSocket,
    ) -> crate::q_local_socket::LocalSocketState;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForBytesWritten(
        this_ptr: *mut crate::QLocalSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be established:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToServer(<span class="string">"market"</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForConnected(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Connected!"</span>);
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connected">connected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForConnected(
        this_ptr: *mut crate::QLocalSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be closed:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>disconnectFromServer();
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>state() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qlocalsocket.html#QLocalSocket">QLocalSocket</a></span><span class="operator">::</span>UnconnectedState
    /// &#32;    <span class="operator">|</span><span class="operator">|</span> socket<span class="operator">-</span><span class="operator">&gt;</span>waitForDisconnected(<span class="number">1000</span>)) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Disconnected!"</span>);
    ///  }
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">disconnectFromServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForDisconnected(
        this_ptr: *mut crate::QLocalSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    /// <p>This function blocks until data is available for reading and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if data is available for reading; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForReadyRead(
        this_ptr: *mut crate::QLocalSocket,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__17(
        arg1: *const ::qt_core::QDebug,
        arg2: crate::q_local_socket::LocalSocketError,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__18(
        arg1: *const ::qt_core::QDebug,
        arg2: crate::q_local_socket::LocalSocketState,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Constructs an empty SSL configuration. This configuration contains no valid settings and the state will be empty. <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#isNull">isNull</a>() will return true after this constructor is called.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#QSslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty SSL configuration. This configuration contains no valid settings and the state will be empty. <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#isNull">isNull</a>() will return true after this constructor is called.</p>
    /// <p>Once any setter methods are called, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#isNull">isNull</a>() will return false.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_QSslConfiguration() -> *mut crate::QSslConfiguration;

    /// <p>Copies the configuration and state of <i>other</i>. If <i>other</i> is null, this object will be null too.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#QSslConfiguration-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copies the configuration and state of <i>other</i>. If <i>other</i> is null, this object will be null too.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_QSslConfiguration1(
        other: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Releases any resources held by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#dtor.QSslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Releases any resources held by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_dQSslConfiguration(
        this_ptr: *mut crate::QSslConfiguration,
    );

    pub fn ctr_qt_network_ffi_QSslConfiguration_operator_1(
        this_ptr: *mut crate::QSslConfiguration,
        other: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Swaps this SSL configuration instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this SSL configuration instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_swap(
        this_ptr: *mut crate::QSslConfiguration,
        other: *mut crate::QSslConfiguration,
    );

    /// <p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object is equal to <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object is equal to <i>other</i>.</p>
    /// <p>Two <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> objects are considered equal if they have the exact same settings and state.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_operator__(
        this_ptr: *const crate::QSslConfiguration,
        other: *const crate::QSslConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if this is a null <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a null <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object.</p>
    /// <p>A <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object is null if it has been default-constructed and no setter methods have been called.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setProtocol">setProtocol</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificate">setLocalCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPrivateKey">setPrivateKey</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_isNull(
        this_ptr: *const crate::QSslConfiguration,
    ) -> bool;

    /// <p>Returns the protocol setting for this SSL configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#protocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the protocol setting for this SSL configuration.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setProtocol">setProtocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_protocol(
        this_ptr: *const crate::QSslConfiguration,
    ) -> crate::q_ssl::SslProtocol;

    /// <p>Sets the protocol setting for this configuration to be <i>protocol</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the protocol setting for this configuration to be <i>protocol</i>.</p>
    /// <p>Setting the protocol once the connection has already been established has no effect.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#protocol">protocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setProtocol(
        this_ptr: *mut crate::QSslConfiguration,
        protocol: crate::q_ssl::SslProtocol,
    );

    /// <p>Returns the verify mode. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerVerifyMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the verify mode. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    /// <p>The default mode is AutoVerifyPeer, which tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to use VerifyPeer for clients, QueryPeer for servers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPeerVerifyMode">setPeerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_peerVerifyMode(
        this_ptr: *const crate::QSslConfiguration,
    ) -> crate::q_ssl_socket::PeerVerifyMode;

    /// <p>Sets the verify mode to <i>mode</i>. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPeerVerifyMode">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the verify mode to <i>mode</i>. This mode decides whether <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> should request a certificate from the peer (i.e., the client requests a certificate from the server, or a server requesting a certificate from the client), and whether it should require that this certificate is valid.</p>
    /// <p>The default mode is AutoVerifyPeer, which tells <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> to use VerifyPeer for clients, QueryPeer for servers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerVerifyMode">peerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setPeerVerifyMode(
        this_ptr: *mut crate::QSslConfiguration,
        mode: crate::q_ssl_socket::PeerVerifyMode,
    );

    /// <p>Returns the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, or 0 (the default) if no maximum depth has been set, indicating that the whole certificate chain should be checked.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerVerifyDepth">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, or 0 (the default) if no maximum depth has been set, indicating that the whole certificate chain should be checked.</p>
    /// <p>The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPeerVerifyDepth">setPeerVerifyDepth</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerVerifyMode">peerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_peerVerifyDepth(
        this_ptr: *const crate::QSslConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, to <i>depth</i>. Setting a depth of 0 means that no maximum depth is set, indicating that the whole certificate chain should be checked.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPeerVerifyDepth">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum number of certificates in the peer's certificate chain to be checked during the SSL handshake phase, to <i>depth</i>. Setting a depth of 0 means that no maximum depth is set, indicating that the whole certificate chain should be checked.</p>
    /// <p>The certificates are checked in issuing order, starting with the peer's own certificate, then its issuer's certificate, and so on.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerVerifyDepth">peerVerifyDepth</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPeerVerifyMode">setPeerVerifyMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setPeerVerifyDepth(
        this_ptr: *mut crate::QSslConfiguration,
        depth: ::std::os::raw::c_int,
    );

    /// <p>Returns the certificate chain to be presented to the peer during the SSL handshake process.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate chain to be presented to the peer during the SSL handshake process.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificateChain">setLocalCertificateChain</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificate">localCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_localCertificateChain(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Sets the certificate chain to be presented to the peer during the SSL handshake to be <i>localChain</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the certificate chain to be presented to the peer during the SSL handshake to be <i>localChain</i>.</p>
    /// <p>Setting the certificate chain once the connection has been established has no effect.</p>
    /// <p>A certificate is the means of identification used in the SSL process. The local certificate is used by the remote end to verify the local user's identity against its list of Certification Authorities. In most cases, such as in HTTP web browsing, only servers identify to the clients, so the client does not send a certificate.</p>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificate">QSslConfiguration::setLocalCertificate</a>() this method allows you to specify any intermediate certificates required in order to validate your certificate. The first item in the list must be the leaf certificate.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificateChain">localCertificateChain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setLocalCertificateChain(
        this_ptr: *mut crate::QSslConfiguration,
        localChain: *const crate::QListOfQSslCertificate,
    );

    /// <p>Returns the certificate to be presented to the peer during the SSL handshake process.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate to be presented to the peer during the SSL handshake process.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_localCertificate(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslCertificate;

    /// <p>Sets the certificate to be presented to the peer during SSL handshake to be <i>certificate</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the certificate to be presented to the peer during SSL handshake to be <i>certificate</i>.</p>
    /// <p>Setting the certificate once the connection has been established has no effect.</p>
    /// <p>A certificate is the means of identification used in the SSL process. The local certificate is used by the remote end to verify the local user's identity against its list of Certification Authorities. In most cases, such as in HTTP web browsing, only servers identify to the clients, so the client does not send a certificate.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificate">localCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setLocalCertificate(
        this_ptr: *mut crate::QSslConfiguration,
        certificate: *const crate::QSslCertificate,
    );

    /// <p>Returns the peer's digital certificate (i.e., the immediate certificate of the host you are connected to), or a null certificate, if the peer has not assigned a certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's digital certificate (i.e., the immediate certificate of the host you are connected to), or a null certificate, if the peer has not assigned a certificate.</p>
    /// <p>The peer certificate is checked automatically during the handshake phase, so this function is normally used to fetch the certificate for display or for connection diagnostic purposes. It contains information about the peer, including its host name, the certificate issuer, and the peer's public key.</p>
    /// <p>Because the peer certificate is set during the handshake phase, it is safe to access the peer certificate from a slot connected to the QSslSocket::sslErrors() signal, <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">QNetworkReply::sslErrors</a>() signal, or the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">QSslSocket::encrypted</a>() signal.</p>
    /// <p>If a null certificate is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.</p>
    /// <p>If you want to check the peer's complete chain of certificates, use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificateChain">peerCertificateChain</a>() to get them all at once.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificateChain">peerCertificateChain</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#sslErrors">QSslSocket::sslErrors</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">QSslSocket::ignoreSslErrors</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">QNetworkReply::sslErrors</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#ignoreSslErrors">QNetworkReply::ignoreSslErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_peerCertificate(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns the peer's chain of digital certificates, starting with the peer's immediate certificate and ending with the CA's certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificateChain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the peer's chain of digital certificates, starting with the peer's immediate certificate and ending with the CA's certificate.</p>
    /// <p>Peer certificates are checked automatically during the handshake phase. This function is normally used to fetch certificates for display, or for performing connection diagnostics. Certificates contain information about the peer and the certificate issuers, including host name, issuer names, and issuer public keys.</p>
    /// <p>Because the peer certificate is set during the handshake phase, it is safe to access the peer certificate from a slot connected to the QSslSocket::sslErrors() signal, <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">QNetworkReply::sslErrors</a>() signal, or the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">QSslSocket::encrypted</a>() signal.</p>
    /// <p>If an empty list is returned, it can mean the SSL handshake failed, or it can mean the host you are connected to doesn't have a certificate, or it can mean there is no connection.</p>
    /// <p>If you want to get only the peer's immediate certificate, use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificate">peerCertificate</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#peerCertificate">peerCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#sslErrors">QSslSocket::sslErrors</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">QSslSocket::ignoreSslErrors</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">QNetworkReply::sslErrors</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#ignoreSslErrors">QNetworkReply::ignoreSslErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_peerCertificateChain(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Returns the socket's cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a>, or a null cipher if the connection isn't encrypted. The socket's cipher for the session is set during the handshake phase. The cipher is used to encrypt and decrypt data transmitted through the socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionCipher">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's cryptographic <a href="http://doc.qt.io/qt-5/qsslcipher.html">cipher</a>, or a null cipher if the connection isn't encrypted. The socket's cipher for the session is set during the handshake phase. The cipher is used to encrypt and decrypt data transmitted through the socket.</p>
    /// <p>The SSL infrastructure also provides functions for setting the ordered list of ciphers from which the handshake phase will eventually select the session cipher. This ordered list must be in place before the handshake phase begins.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">ciphers</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">QSslSocket::supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_sessionCipher(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns the socket's SSL/TLS protocol or UnknownProtocol if the connection isn't encrypted. The socket's protocol for the session is set during the handshake phase.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the socket's SSL/TLS protocol or UnknownProtocol if the connection isn't encrypted. The socket's protocol for the session is set during the handshake phase.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#protocol">protocol</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setProtocol">setProtocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_sessionProtocol(
        this_ptr: *const crate::QSslConfiguration,
    ) -> crate::q_ssl::SslProtocol;

    /// <p>Returns the <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a> assigned to this connection or a null key if none has been assigned yet.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#privateKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a> assigned to this connection or a null key if none has been assigned yet.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPrivateKey">setPrivateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#localCertificate">localCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_privateKey(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslKey;

    /// <p>Sets the connection's private <a href="http://doc.qt.io/qt-5/qsslkey.html">key</a> to <i>key</i>. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPrivateKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the connection's private <a href="http://doc.qt.io/qt-5/qsslkey.html">key</a> to <i>key</i>. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setPrivateKey(
        this_ptr: *mut crate::QSslConfiguration,
        key: *const crate::QSslKey,
    );

    /// <p>Returns this connection's current cryptographic cipher suite. This list is used during the handshake phase for choosing a session cipher. The returned list of ciphers is ordered by descending preference. (i.e., the first cipher in the list is the most preferred cipher). The session cipher will be the first one in the list that is also supported by the peer.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this connection's current cryptographic cipher suite. This list is used during the handshake phase for choosing a session cipher. The returned list of ciphers is ordered by descending preference. (i.e., the first cipher in the list is the most preferred cipher). The session cipher will be the first one in the list that is also supported by the peer.</p>
    /// <p>By default, the handshake phase can choose any of the ciphers supported by this system's SSL libraries, which may vary from system to system. The list of ciphers supported by this system's SSL libraries is returned by QSslSocket::supportedCiphers(). You can restrict the list of ciphers used for choosing the session cipher for this socket by calling <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>() with a subset of the supported ciphers. You can revert to using the entire set by calling <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>() with the list returned by QSslSocket::supportedCiphers().</p>
    /// <p><b>Note: </b>This is not currently supported in the Schannel backend.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">QSslSocket::supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_ciphers(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Sets the cryptographic cipher suite for this socket to <i>ciphers</i>, which must contain a subset of the ciphers in the list returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedCiphers">supportedCiphers</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the cryptographic cipher suite for this socket to <i>ciphers</i>, which must contain a subset of the ciphers in the list returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedCiphers">supportedCiphers</a>().</p>
    /// <p>Restricting the cipher suite must be done before the handshake phase, where the session cipher is chosen.</p>
    /// <p><b>Note: </b>This is not currently supported in the Schannel backend.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">ciphers</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">QSslSocket::supportedCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setCiphers(
        this_ptr: *mut crate::QSslConfiguration,
        ciphers: *const crate::QListOfQSslCipher,
    );

    /// <p>Returns the list of cryptographic ciphers supported by this system. This list is set by the system's SSL libraries and may vary from system to system.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedCiphers">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of cryptographic ciphers supported by this system. This list is set by the system's SSL libraries and may vary from system to system.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ciphers">ciphers</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">setCiphers</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_supportedCiphers() -> *mut crate::QListOfQSslCipher;

    /// <p>Returns this connection's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate. It can be modified prior to the handshake with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), or with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this connection's CA certificate database. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate. It can be modified prior to the handshake with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), or with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_caCertificates(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Sets this socket's CA certificate database to be <i>certificates</i>. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets this socket's CA certificate database to be <i>certificates</i>. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p><b>Note: </b>The default configuration uses the system CA certificate database. If that is not available (as is commonly the case on iOS), the default database is empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setCaCertificates(
        this_ptr: *mut crate::QSslConfiguration,
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    /// <p>The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p>For more precise control, use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>().</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">QSslCertificate::fromPath</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_addCaCertificates(
        this_ptr: *mut crate::QSslConfiguration,
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
        syntax: crate::q_ssl_certificate::PatternSyntax,
    ) -> bool;

    /// <p>Adds <i>certificate</i> to this configuration's CA certificate database. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Adds <i>certificate</i> to this configuration's CA certificate database. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p><b>Note: </b>The default configuration uses the system CA certificate database. If that is not available (as is commonly the case on iOS), the default database is empty.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_addCaCertificate(
        this_ptr: *mut crate::QSslConfiguration,
        certificate: *const crate::QSslCertificate,
    );

    /// <p>Adds <i>certificates</i> to this configuration's CA certificate database. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Adds <i>certificates</i> to this configuration's CA certificate database. The certificate database must be set prior to the SSL handshake. The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p><b>Note: </b>The default configuration uses the system CA certificate database. If that is not available (as is commonly the case on iOS), the default database is empty.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_addCaCertificates1(
        this_ptr: *mut crate::QSslConfiguration,
        certificates: *const crate::QListOfQSslCertificate,
    );

    /// <p>This function provides the CA certificate database provided by the operating system. The CA certificate database returned by this function is used to initialize the database returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#systemCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function provides the CA certificate database provided by the operating system. The CA certificate database returned by this function is used to initialize the database returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCaCertificates">setCaCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">defaultConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">addCaCertificates</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_systemCaCertificates(
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Enables or disables an SSL compatibility <i>option</i>. If <i>on</i> is true, the <i>option</i> is enabled. If <i>on</i> is false, the <i>option</i> is disabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSslOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Enables or disables an SSL compatibility <i>option</i>. If <i>on</i> is true, the <i>option</i> is enabled. If <i>on</i> is false, the <i>option</i> is disabled.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#testSslOption">testSslOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setSslOption(
        this_ptr: *mut crate::QSslConfiguration,
        option: crate::q_ssl::SslOption,
        on: bool,
    );

    /// <p>Returns <code>true</code> if the specified SSL compatibility <i>option</i> is enabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#testSslOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the specified SSL compatibility <i>option</i> is enabled.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSslOption">setSslOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_testSslOption(
        this_ptr: *const crate::QSslConfiguration,
        option: crate::q_ssl::SslOption,
    ) -> bool;

    /// <p>If <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was turned off, this function returns the session ticket used in the SSL handshake in ASN.1 format, suitable to e.g. be persisted to disk. If no session ticket was used or <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was not turned off, this function returns an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was turned off, this function returns the session ticket used in the SSL handshake in ASN.1 format, suitable to e.g. be persisted to disk. If no session ticket was used or <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was not turned off, this function returns an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a>.</p>
    /// <p><b>Note: </b>When persisting the session ticket to disk or similar, be careful not to expose the session to a potential attacker, as knowledge of the session allows for eavesdropping on data encrypted with the session parameters.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSessionTicket">setSessionTicket</a>(), <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a>, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSslOption">setSslOption</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#newSessionTicketReceived">QSslSocket::newSessionTicketReceived</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_sessionTicket(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the session ticket to be used in an SSL handshake. <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> must be turned off for this to work, and <i>sessionTicket</i> must be in ASN.1 format as returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicket">sessionTicket</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSessionTicket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the session ticket to be used in an SSL handshake. <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> must be turned off for this to work, and <i>sessionTicket</i> must be in ASN.1 format as returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicket">sessionTicket</a>().</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicket">sessionTicket</a>(), <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a>, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSslOption">setSslOption</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#newSessionTicketReceived">QSslSocket::newSessionTicketReceived</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setSessionTicket(
        this_ptr: *mut crate::QSslConfiguration,
        sessionTicket: *const ::qt_core::QByteArray,
    );

    /// <p>If <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was turned off, this function returns the session ticket life time hint sent by the server (which might be 0). If the server did not send a session ticket (e.g. when resuming a session or when the server does not support it) or <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was not turned off, this function returns -1.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicketLifeTimeHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was turned off, this function returns the session ticket life time hint sent by the server (which might be 0). If the server did not send a session ticket (e.g. when resuming a session or when the server does not support it) or <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a> was not turned off, this function returns -1.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#sessionTicket">sessionTicket</a>(), <a href="http://doc.qt.io/qt-5/qssl.html#SslOption-enum">QSsl::SslOptionDisableSessionPersistence</a>, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setSslOption">setSslOption</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#newSessionTicketReceived">QSslSocket::newSessionTicketReceived</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_sessionTicketLifeTimeHint(
        this_ptr: *const crate::QSslConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the ephemeral server key used for cipher algorithms with forward secrecy, e.g. DHE-RSA-AES128-SHA.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ephemeralServerKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the ephemeral server key used for cipher algorithms with forward secrecy, e.g. DHE-RSA-AES128-SHA.</p>
    /// <p>The ephemeral key is only available when running in client mode, i.e. <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a>. When running in server mode or using a cipher algorithm without forward secrecy a null key is returned. The ephemeral server key will be set before emitting the encrypted() signal.</p>
    /// <p>This function was introduced in Qt 5.7.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_ephemeralServerKey(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslKey;

    /// <p>Returns this connection's current list of elliptic curves. This list is used during the handshake phase for choosing an elliptic curve (when using an elliptic curve cipher). The returned list of curves is ordered by descending preference (i.e., the first curve in the list is the most preferred one).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ellipticCurves">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this connection's current list of elliptic curves. This list is used during the handshake phase for choosing an elliptic curve (when using an elliptic curve cipher). The returned list of curves is ordered by descending preference (i.e., the first curve in the list is the most preferred one).</p>
    /// <p>By default, the handshake phase can choose any of the curves supported by this system's SSL libraries, which may vary from system to system. The list of curves supported by this system's SSL libraries is returned by QSslSocket::supportedEllipticCurves().</p>
    /// <p>You can restrict the list of curves used for choosing the session cipher for this socket by calling <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setEllipticCurves">setEllipticCurves</a>() with a subset of the supported ciphers. You can revert to using the entire set by calling <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setEllipticCurves">setEllipticCurves</a>() with the list returned by QSslSocket::supportedEllipticCurves().</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setEllipticCurves">setEllipticCurves</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_ellipticCurves(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Sets the list of elliptic curves to be used by this socket to <i>curves</i>, which must contain a subset of the curves in the list returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">supportedEllipticCurves</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setEllipticCurves">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the list of elliptic curves to be used by this socket to <i>curves</i>, which must contain a subset of the curves in the list returned by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">supportedEllipticCurves</a>().</p>
    /// <p>Restricting the elliptic curves must be done before the handshake phase, where the session cipher is chosen.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ellipticCurves">ellipticCurves</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setEllipticCurves(
        this_ptr: *mut crate::QSslConfiguration,
        curves: *const crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Returns the list of elliptic curves supported by this system. This list is set by the system's SSL libraries and may vary from system to system.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of elliptic curves supported by this system. This list is set by the system's SSL libraries and may vary from system to system.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ellipticCurves">ellipticCurves</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setEllipticCurves">setEllipticCurves</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_supportedEllipticCurves(
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Returns the identity hint.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#preSharedKeyIdentityHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the identity hint.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPreSharedKeyIdentityHint">setPreSharedKeyIdentityHint</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_preSharedKeyIdentityHint(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the identity hint for a preshared key authentication to <i>hint</i>. This will affect the next initiated handshake; calling this function on an already-encrypted socket will not affect the socket's identity hint.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setPreSharedKeyIdentityHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the identity hint for a preshared key authentication to <i>hint</i>. This will affect the next initiated handshake; calling this function on an already-encrypted socket will not affect the socket's identity hint.</p>
    /// <p>The identity hint is used in <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> only!</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#preSharedKeyIdentityHint">preSharedKeyIdentityHint</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setPreSharedKeyIdentityHint(
        this_ptr: *mut crate::QSslConfiguration,
        hint: *const ::qt_core::QByteArray,
    );

    /// <p>Retrieves the current set of Diffie-Hellman parameters.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#diffieHellmanParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Retrieves the current set of Diffie-Hellman parameters.</p>
    /// <p>If no Diffie-Hellman parameters have been set, the <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object defaults to using the 1024-bit MODP group from RFC 2409.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDiffieHellmanParameters">setDiffieHellmanParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_diffieHellmanParameters(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Sets a custom set of Diffie-Hellman parameters to be used by this socket when functioning as a server to <i>dhparams</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDiffieHellmanParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets a custom set of Diffie-Hellman parameters to be used by this socket when functioning as a server to <i>dhparams</i>.</p>
    /// <p>If no Diffie-Hellman parameters have been set, the <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object defaults to using the 1024-bit MODP group from RFC 2409.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#diffieHellmanParameters">diffieHellmanParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setDiffieHellmanParameters(
        this_ptr: *mut crate::QSslConfiguration,
        dhparams: *const crate::QSslDiffieHellmanParameters,
    );

    /// <p>Returns the backend-specific configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#backendConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the backend-specific configuration.</p>
    /// <p>Only options set by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>() or <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfiguration">setBackendConfiguration</a>() will be returned. The internal standard configuration of the backend is not reported.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfiguration">setBackendConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_backendConfiguration(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut crate::QMapOfQByteArrayQVariant;

    /// <p>Sets the option <i>name</i> in the backend-specific configuration to <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the option <i>name</i> in the backend-specific configuration to <i>value</i>.</p>
    /// <p>Options supported by the OpenSSL (&gt;= 1.0.2) backend are available in the <a href="https://www.openssl.org/docs/manmaster/man3/SSL_CONF_cmd.html#SUPPORTED-CONFIGURATION-FILE-COMMANDS">supported configuration file commands</a> documentation. The expected type for the <i>value</i> parameter is a <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> for all options. The <a href="https://www.openssl.org/docs/manmaster/man3/SSL_CONF_cmd.html#EXAMPLES">examples</a> show how to use some of the options.</p>
    /// <p><b>Note: </b>The backend-specific configuration will be applied after the general configuration. Using the backend-specific configuration to set a general configuration option again will overwrite the general configuration option.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#backendConfiguration">backendConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfiguration">setBackendConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setBackendConfigurationOption(
        this_ptr: *mut crate::QSslConfiguration,
        name: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Sets or clears the backend-specific configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets or clears the backend-specific configuration.</p>
    /// <p>Without a <i>backendConfiguration</i> parameter this function will clear the backend-specific configuration. More information about the supported options is available in the documentation of <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>().</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#backendConfiguration">backendConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setBackendConfiguration(
        this_ptr: *mut crate::QSslConfiguration,
        backendConfiguration: *const crate::QMapOfQByteArrayQVariant,
    );

    /// <p>Returns the default SSL configuration to be used in new SSL connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the default SSL configuration to be used in new SSL connections.</p>
    /// <p>The default SSL configuration consists of:</p>
    /// <ul>
    /// <li>no local certificate and no private key</li>
    /// <li>protocol <a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">SecureProtocols</a></li>
    /// <li>the system's default CA certificate list</li>
    /// <li>the cipher list equal to the list of the SSL libraries' supported SSL ciphers that are 128 bits or more</li>
    /// </ul>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">QSslSocket::supportedCiphers</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDefaultConfiguration">setDefaultConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_defaultConfiguration(
    ) -> *mut crate::QSslConfiguration;

    /// <p>Sets the default SSL configuration to be used in new SSL connections to be <i>configuration</i>. Existing connections are not affected by this call.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDefaultConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the default SSL configuration to be used in new SSL connections to be <i>configuration</i>. Existing connections are not affected by this call.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#supportedCiphers">QSslSocket::supportedCiphers</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">defaultConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setDefaultConfiguration(
        configuration: *const crate::QSslConfiguration,
    );

    /// <p>This function returns true if DTLS cookie verification was enabled on a server-side socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#dtlsCookieVerificationEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns true if DTLS cookie verification was enabled on a server-side socket.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDtlsCookieVerificationEnabled">setDtlsCookieVerificationEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_dtlsCookieVerificationEnabled(
        this_ptr: *const crate::QSslConfiguration,
    ) -> bool;

    /// <p>This function enables DTLS cookie verification when <i>enable</i> is true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDtlsCookieVerificationEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function enables DTLS cookie verification when <i>enable</i> is true.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#dtlsCookieVerificationEnabled">dtlsCookieVerificationEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setDtlsCookieVerificationEnabled(
        this_ptr: *mut crate::QSslConfiguration,
        enable: bool,
    );

    /// <p>Returns the default DTLS configuration to be used in new DTLS connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultDtlsConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the default DTLS configuration to be used in new DTLS connections.</p>
    /// <p>The default DTLS configuration consists of:</p>
    /// <ul>
    /// <li>no local certificate and no private key</li>
    /// <li>protocol DtlsV1_2OrLater</li>
    /// <li>the system's default CA certificate list</li>
    /// <li>the cipher list equal to the list of the SSL libraries' supported TLS 1.2 ciphers that use 128 or more secret bits for the cipher.</li>
    /// </ul>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDefaultDtlsConfiguration">setDefaultDtlsConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_defaultDtlsConfiguration(
    ) -> *mut crate::QSslConfiguration;

    /// <p>Sets the default DTLS configuration to be used in new DTLS connections to be <i>configuration</i>. Existing connections are not affected by this call.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setDefaultDtlsConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the default DTLS configuration to be used in new DTLS connections to be <i>configuration</i>. Existing connections are not affected by this call.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultDtlsConfiguration">defaultDtlsConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setDefaultDtlsConfiguration(
        configuration: *const crate::QSslConfiguration,
    );

    /// <p>If <i>enabled</i> is true, client <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> will send a certificate status request to its peer when initiating a handshake. During the handshake <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> will verify the server's response. This value must be set before the handshake starts.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setOcspStaplingEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enabled</i> is true, client <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> will send a certificate status request to its peer when initiating a handshake. During the handshake <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> will verify the server's response. This value must be set before the handshake starts.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ocspStaplingEnabled">ocspStaplingEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setOcspStaplingEnabled(
        this_ptr: *mut crate::QSslConfiguration,
        enable: bool,
    );

    /// <p>Returns true if OCSP stapling was enabled by setOCSPStaplingEnabled(), otherwise false (which is the default value).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#ocspStaplingEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if OCSP stapling was enabled by setOCSPStaplingEnabled(), otherwise false (which is the default value).</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setOcspStaplingEnabled">setOcspStaplingEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_ocspStaplingEnabled(
        this_ptr: *const crate::QSslConfiguration,
    ) -> bool;

    /// <p>This function sets the allowed <i>protocols</i> to be negotiated with the server through the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension; each element in <i>protocols</i> must define one allowed protocol. The function must be called explicitly before connecting to send the NPN/ALPN extension in the SSL handshake. Whether or not the negotiation succeeded can be queried through <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">nextProtocolNegotiationStatus</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function sets the allowed <i>protocols</i> to be negotiated with the server through the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension; each element in <i>protocols</i> must define one allowed protocol. The function must be called explicitly before connecting to send the NPN/ALPN extension in the SSL handshake. Whether or not the negotiation succeeded can be queried through <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">nextProtocolNegotiationStatus</a>().</p>
    /// <p>This function was introduced in Qt 5.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextNegotiatedProtocol">nextNegotiatedProtocol</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">nextProtocolNegotiationStatus</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#allowedNextProtocols">allowedNextProtocols</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a>, and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolHttp1_1-var">QSslConfiguration::NextProtocolHttp1_1</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setAllowedNextProtocols(
        this_ptr: *mut crate::QSslConfiguration,
        protocols: *const ::qt_core::QListOfQByteArray,
    );

    /// <p>This function returns the allowed protocols to be negotiated with the server through the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension, as set by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#allowedNextProtocols">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns the allowed protocols to be negotiated with the server through the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension, as set by <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>().</p>
    /// <p>This function was introduced in Qt 5.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextNegotiatedProtocol">nextNegotiatedProtocol</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">nextProtocolNegotiationStatus</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a>, and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolHttp1_1-var">QSslConfiguration::NextProtocolHttp1_1</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_allowedNextProtocols(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>This function returns the protocol negotiated with the server if the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension was enabled. In order for the NPN/ALPN extension to be enabled, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>() needs to be called explicitly before connecting to the server.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextNegotiatedProtocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns the protocol negotiated with the server if the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN) TLS extension was enabled. In order for the NPN/ALPN extension to be enabled, <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>() needs to be called explicitly before connecting to the server.</p>
    /// <p>If no protocol could be negotiated or the extension was not enabled, this function returns a <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> which is null.</p>
    /// <p>This function was introduced in Qt 5.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">nextProtocolNegotiationStatus</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_nextNegotiatedProtocol(
        this_ptr: *const crate::QSslConfiguration,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>This function returns the status of the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN). If the feature has not been enabled through <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>(), this function returns <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolNegotiationStatus-enum">NextProtocolNegotiationNone</a>. The status will be set before emitting the encrypted() signal.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextProtocolNegotiationStatus">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns the status of the Next Protocol Negotiation (NPN) or Application-Layer Protocol Negotiation (ALPN). If the feature has not been enabled through <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>(), this function returns <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolNegotiationStatus-enum">NextProtocolNegotiationNone</a>. The status will be set before emitting the encrypted() signal.</p>
    /// <p>This function was introduced in Qt 5.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setAllowedNextProtocols">setAllowedNextProtocols</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#allowedNextProtocols">allowedNextProtocols</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#nextNegotiatedProtocol">nextNegotiatedProtocol</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolNegotiationStatus-enum">QSslConfiguration::NextProtocolNegotiationStatus</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_nextProtocolNegotiationStatus(
        this_ptr: *const crate::QSslConfiguration,
    ) -> crate::q_ssl_configuration::NextProtocolNegotiationStatus;

    pub fn ctr_qt_network_ffi_swap14(
        value1: *mut crate::QSslConfiguration,
        value2: *mut crate::QSslConfiguration,
    );

    /// <p>Constructs a default QSslPreSharedKeyAuthenticator object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#QSslPreSharedKeyAuthenticator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a default QSslPreSharedKeyAuthenticator object.</p>
    /// <p>The identity hint, the identity and the key will be initialized to empty byte arrays; the maximum length for both the identity and the key will be initialized to 0.</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_QSslPreSharedKeyAuthenticator(
    ) -> *mut crate::QSslPreSharedKeyAuthenticator;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#dtor.QSslPreSharedKeyAuthenticator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_dQSslPreSharedKeyAuthenticator(
        this_ptr: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    /// <p>Constructs a QSslPreSharedKeyAuthenticator object as a copy of <i>authenticator</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#QSslPreSharedKeyAuthenticator-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslPreSharedKeyAuthenticator object as a copy of <i>authenticator</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_QSslPreSharedKeyAuthenticator1(
        authenticator: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> *mut crate::QSslPreSharedKeyAuthenticator;

    /// <p>Assigns the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object <i>authenticator</i> to this object, and returns a reference to the copy.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object <i>authenticator</i> to this object, and returns a reference to the copy.</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_operator_(
        this_ptr: *mut crate::QSslPreSharedKeyAuthenticator,
        authenticator: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> *mut crate::QSslPreSharedKeyAuthenticator;

    /// <p>Swaps the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object <i>authenticator</i> with this object. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html">QSslPreSharedKeyAuthenticator</a> object <i>authenticator</i> with this object. This operation is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_swap(
        this_ptr: *mut crate::QSslPreSharedKeyAuthenticator,
        other: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    /// <p>Returns the PSK identity hint as provided by the server. The interpretation of this hint is left to the application.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#identityHint">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the PSK identity hint as provided by the server. The interpretation of this hint is left to the application.</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_identityHint(
        this_ptr: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the PSK client identity (to be advised to the server) to <i>identity</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setIdentity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the PSK client identity (to be advised to the server) to <i>identity</i>.</p>
    /// <p><b>Note: </b>it is possible to set an identity whose length is greater than <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumIdentityLength">maximumIdentityLength</a>(); in this case, only the first <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumIdentityLength">maximumIdentityLength</a>() bytes will be actually sent to the server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#identity">identity</a>() and <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumIdentityLength">maximumIdentityLength</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_setIdentity(
        this_ptr: *mut crate::QSslPreSharedKeyAuthenticator,
        identity: *const ::qt_core::QByteArray,
    );

    /// <p>Returns the PSK client identity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#identity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the PSK client identity.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setIdentity">setIdentity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_identity(
        this_ptr: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the maximum length, in bytes, of the PSK client identity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumIdentityLength">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum length, in bytes, of the PSK client identity.</p>
    /// <p><b>Note: </b>it is possible to set an identity whose length is greater than maximumIdentityLength(); in this case, only the first maximumIdentityLength() bytes will be actually sent to the server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setIdentity">setIdentity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_maximumIdentityLength(
        this_ptr: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the pre shared key to <i>preSharedKey</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setPreSharedKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the pre shared key to <i>preSharedKey</i>.</p>
    /// <p><b>Note: </b>it is possible to set a key whose length is greater than the <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumPreSharedKeyLength">maximumPreSharedKeyLength</a>(); in this case, only the first <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumPreSharedKeyLength">maximumPreSharedKeyLength</a>() bytes will be actually sent to the server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#preSharedKey">preSharedKey</a>(), <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumPreSharedKeyLength">maximumPreSharedKeyLength</a>(), and <a href="http://doc.qt.io/qt-5/qbytearray.html#fromHex">QByteArray::fromHex</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_setPreSharedKey(
        this_ptr: *mut crate::QSslPreSharedKeyAuthenticator,
        preSharedKey: *const ::qt_core::QByteArray,
    );

    /// <p>Returns the pre shared key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#preSharedKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the pre shared key.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setPreSharedKey">setPreSharedKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_preSharedKey(
        this_ptr: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the maximum length, in bytes, of the pre shared key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#maximumPreSharedKeyLength">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum length, in bytes, of the pre shared key.</p>
    /// <p><b>Note: </b>it is possible to set a key whose length is greater than the maximumPreSharedKeyLength(); in this case, only the first maximumPreSharedKeyLength() bytes will be actually sent to the server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslpresharedkeyauthenticator.html#setPreSharedKey">setPreSharedKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslPreSharedKeyAuthenticator_maximumPreSharedKeyLength(
        this_ptr: *const crate::QSslPreSharedKeyAuthenticator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_swap15(
        value1: *mut crate::QSslPreSharedKeyAuthenticator,
        value2: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_metaObject(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_qt_metacast(
        this_ptr: *mut crate::QNetworkAccessManager,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_qt_metacall(
        this_ptr: *mut crate::QNetworkAccessManager,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkAccessManager_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QNetworkAccessManager object that is the center of the Network Access API and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#QNetworkAccessManager">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkAccessManager object that is the center of the Network Access API and sets <i>parent</i> as the parent object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_QNetworkAccessManager(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkAccessManager;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object and frees up any resources. Note that <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> objects that are returned from this class have this object set as their parents, which means that they will be deleted along with it if you don't call <a href="http://doc.qt.io/qt-5/qobject.html#setParent">QObject::setParent</a>() on them.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#dtor.QNetworkAccessManager">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object and frees up any resources. Note that <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> objects that are returned from this class have this object set as their parents, which means that they will be deleted along with it if you don't call <a href="http://doc.qt.io/qt-5/qobject.html#setParent">QObject::setParent</a>() on them.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_dQNetworkAccessManager(
        this_ptr: *mut crate::QNetworkAccessManager,
    );

    /// <p>Lists all the URL schemes supported by the access manager.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#supportedSchemes">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Lists all the URL schemes supported by the access manager.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#supportedSchemesImplementation">supportedSchemesImplementation</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_supportedSchemes(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut ::qt_core::QStringList;

    /// <p>Flushes the internal cache of authentication data and network connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearAccessCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Flushes the internal cache of authentication data and network connections.</p>
    /// <p>This function is useful for doing auto tests.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearConnectionCache">clearConnectionCache</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_clearAccessCache(
        this_ptr: *mut crate::QNetworkAccessManager,
    );

    /// <p>Flushes the internal cache of network connections. In contrast to <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearAccessCache">clearAccessCache</a>() the authentication data is preserved.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearConnectionCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Flushes the internal cache of network connections. In contrast to <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearAccessCache">clearAccessCache</a>() the authentication data is preserved.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#clearAccessCache">clearAccessCache</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_clearConnectionCache(
        this_ptr: *mut crate::QNetworkAccessManager,
    );

    /// <p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> that the requests sent using this <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object will use. The default value for the proxy is <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> that the requests sent using this <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object will use. The default value for the proxy is <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxy">setProxy</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxyFactory">setProxyFactory</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyAuthenticationRequired">proxyAuthenticationRequired</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_proxy(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Sets the proxy to be used in future requests to be <i>proxy</i>. This does not affect requests that have already been sent. The <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyAuthenticationRequired">proxyAuthenticationRequired</a>() signal will be emitted if the proxy requests authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the proxy to be used in future requests to be <i>proxy</i>. This does not affect requests that have already been sent. The <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyAuthenticationRequired">proxyAuthenticationRequired</a>() signal will be emitted if the proxy requests authentication.</p>
    /// <p>A proxy set with this function will be used for all requests issued by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>. In some cases, it might be necessary to select different proxies depending on the type of request being sent or the destination host. If that's the case, you should consider using <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxyFactory">setProxyFactory</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxy">proxy</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyAuthenticationRequired">proxyAuthenticationRequired</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setProxy(
        this_ptr: *mut crate::QNetworkAccessManager,
        proxy: *const crate::QNetworkProxy,
    );

    /// <p>Returns the proxy factory that this <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object is using to determine the proxies to be used for requests.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyFactory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the proxy factory that this <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object is using to determine the proxies to be used for requests.</p>
    /// <p>Note that the pointer returned by this function is managed by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> and could be deleted at any time.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxyFactory">setProxyFactory</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxy">proxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_proxyFactory(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QNetworkProxyFactory;

    /// <p>Sets the proxy factory for this class to be <i>factory</i>. A proxy factory is used to determine a more specific list of proxies to be used for a given request, instead of trying to use the same proxy value for all requests.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxyFactory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the proxy factory for this class to be <i>factory</i>. A proxy factory is used to determine a more specific list of proxies to be used for a given request, instead of trying to use the same proxy value for all requests.</p>
    /// <p>All queries sent by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will have type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>.</p>
    /// <p>For example, a proxy factory could apply the following rules:</p>
    /// <ul>
    /// <li>if the target address is in the local network (for example, if the hostname contains no dots or if it's an IP address in the organization's range), return <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::NoProxy</a></li>
    /// <li>if the request is FTP, return an FTP proxy</li>
    /// <li>if the request is HTTP or HTTPS, then return an HTTP proxy</li>
    /// <li>otherwise, return a SOCKSv5 proxy server</li>
    /// </ul>
    /// <p>The lifetime of the object <i>factory</i> will be managed by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>. It will delete the object when necessary.</p>
    /// <p><b>Note: </b>If a specific proxy is set with <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxy">setProxy</a>(), the factory will not be used.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#proxyFactory">proxyFactory</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setProxy">setProxy</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setProxyFactory(
        this_ptr: *mut crate::QNetworkAccessManager,
        factory: *mut crate::QNetworkProxyFactory,
    );

    /// <p>Returns the cache that is used to store data obtained from the network.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#cache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cache that is used to store data obtained from the network.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCache">setCache</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_cache(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QAbstractNetworkCache;

    /// <p>Sets the manager's network cache to be the <i>cache</i> specified. The cache is used for all requests dispatched by the manager.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the manager's network cache to be the <i>cache</i> specified. The cache is used for all requests dispatched by the manager.</p>
    /// <p>Use this function to set the network cache object to a class that implements additional features, like saving the cookies to permanent storage.</p>
    /// <p><b>Note: </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> takes ownership of the <i>cache</i> object.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> by default does not have a set cache. Qt provides a simple disk cache, <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html">QNetworkDiskCache</a>, which can be used.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#cache">cache</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#CacheLoadControl-enum">QNetworkRequest::CacheLoadControl</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setCache(
        this_ptr: *mut crate::QNetworkAccessManager,
        cache: *mut crate::QAbstractNetworkCache,
    );

    /// <p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> that is used to store cookies obtained from the network as well as cookies that are about to be sent.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#cookieJar">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> that is used to store cookies obtained from the network as well as cookies that are about to be sent.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCookieJar">setCookieJar</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_cookieJar(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QNetworkCookieJar;

    /// <p>Sets the manager's cookie jar to be the <i>cookieJar</i> specified. The cookie jar is used by all requests dispatched by the manager.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCookieJar">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the manager's cookie jar to be the <i>cookieJar</i> specified. The cookie jar is used by all requests dispatched by the manager.</p>
    /// <p>Use this function to set the cookie jar object to a class that implements additional features, like saving the cookies to permanent storage.</p>
    /// <p><b>Note: </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> takes ownership of the <i>cookieJar</i> object.</p>
    /// <p>If <i>cookieJar</i> is in the same thread as this <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>, it will set the parent of the <i>cookieJar</i> so that the cookie jar is deleted when this object is deleted as well. If you want to share cookie jars between different <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> objects, you may want to set the cookie jar's parent to 0 after calling this function.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> by default does not implement any cookie policy of its own: it accepts all cookies sent by the server, as long as they are well formed and meet the minimum security requirements (cookie domain matches the request's and cookie path matches the request's). In order to implement your own security policy, override the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#cookiesForUrl">QNetworkCookieJar::cookiesForUrl</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#setCookiesFromUrl">QNetworkCookieJar::setCookiesFromUrl</a>() virtual functions. Those functions are called by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> when it detects a new cookie.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#cookieJar">cookieJar</a>(), <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#cookiesForUrl">QNetworkCookieJar::cookiesForUrl</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#setCookiesFromUrl">QNetworkCookieJar::setCookiesFromUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setCookieJar(
        this_ptr: *mut crate::QNetworkAccessManager,
        cookieJar: *mut crate::QNetworkCookieJar,
    );

    /// <p>If <i>enabled</i> is <code>true</code>, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> follows the HTTP Strict Transport Security policy (HSTS, RFC6797). When processing a request, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> automatically replaces the "http" scheme with "https" and uses a secure transport for HSTS hosts. If it's set explicitly, port 80 is replaced by port 443.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setStrictTransportSecurityEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enabled</i> is <code>true</code>, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> follows the HTTP Strict Transport Security policy (HSTS, RFC6797). When processing a request, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> automatically replaces the "http" scheme with "https" and uses a secure transport for HSTS hosts. If it's set explicitly, port 80 is replaced by port 443.</p>
    /// <p>When HSTS is enabled, for each HTTP response containing HSTS header and received over a secure transport, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> will update its HSTS cache, either remembering a host with a valid policy or removing a host with an expired or disabled HSTS policy.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#isStrictTransportSecurityEnabled">isStrictTransportSecurityEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setStrictTransportSecurityEnabled(
        this_ptr: *mut crate::QNetworkAccessManager,
        enabled: bool,
    );

    /// <p>Returns true if HTTP Strict Transport Security (HSTS) was enabled. By default HSTS is disabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#isStrictTransportSecurityEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if HTTP Strict Transport Security (HSTS) was enabled. By default HSTS is disabled.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setStrictTransportSecurityEnabled">setStrictTransportSecurityEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_isStrictTransportSecurityEnabled(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> bool;

    /// <p>If <i>enabled</i> is <code>true</code>, the internal HSTS cache will use a persistent store to read and write HSTS policies. <i>storeDir</i> defines where this store will be located. The default location is defined by <a href="http://doc.qt.io/qt-5/qstandardpaths.html#StandardLocation-enum">QStandardPaths::CacheLocation</a>. If there is no writable QStandartPaths::CacheLocation and <i>storeDir</i> is an empty string, the store will be located in the program's working directory.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#enableStrictTransportSecurityStore">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enabled</i> is <code>true</code>, the internal HSTS cache will use a persistent store to read and write HSTS policies. <i>storeDir</i> defines where this store will be located. The default location is defined by <a href="http://doc.qt.io/qt-5/qstandardpaths.html#StandardLocation-enum">QStandardPaths::CacheLocation</a>. If there is no writable QStandartPaths::CacheLocation and <i>storeDir</i> is an empty string, the store will be located in the program's working directory.</p>
    /// <p><b>Note: </b>If HSTS cache already contains HSTS policies by the time persistent store is enabled, these policies will be preserved in the store. In case both cache and store contain the same known hosts, policies from cache are considered to be more up-to-date (and thus will overwrite the previous values in the store). If this behavior is undesired, enable HSTS store before enabling Strict Tranport Security. By default, the persistent store of HSTS policies is disabled.</p>
    /// <p>This function was introduced in Qt 5.10.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#isStrictTransportSecurityStoreEnabled">isStrictTransportSecurityStoreEnabled</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setStrictTransportSecurityEnabled">setStrictTransportSecurityEnabled</a>(), and <a href="http://doc.qt.io/qt-5/qstandardpaths.html#standardLocations">QStandardPaths::standardLocations</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_enableStrictTransportSecurityStore(
        this_ptr: *mut crate::QNetworkAccessManager,
        enabled: bool,
        storeDir: *const ::qt_core::QString,
    );

    /// <p>Returns true if HSTS cache uses a permanent store to load and store HSTS policies.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#isStrictTransportSecurityStoreEnabled">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if HSTS cache uses a permanent store to load and store HSTS policies.</p>
    /// <p>This function was introduced in Qt 5.10.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#enableStrictTransportSecurityStore">enableStrictTransportSecurityStore</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_isStrictTransportSecurityStoreEnabled(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> bool;

    /// <p>Adds HTTP Strict Transport Security policies into HSTS cache. <i>knownHosts</i> contains the known hosts that have <a href="http://doc.qt.io/qt-5/qhstspolicy.html">QHstsPolicy</a> information.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#addStrictTransportSecurityHosts">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Adds HTTP Strict Transport Security policies into HSTS cache. <i>knownHosts</i> contains the known hosts that have <a href="http://doc.qt.io/qt-5/qhstspolicy.html">QHstsPolicy</a> information.</p>
    /// <p><b>Note: </b>An expired policy will remove a known host from the cache, if previously present.</p>
    /// <p><b>Note: </b>While processing HTTP responses, <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> can also update the HSTS cache, removing or updating exitsting policies or introducing new <i>knownHosts</i>. The current implementation thus is server-driven, client code can provide <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> with previously known or discovered policies, but this information can be overridden by "Strict-Transport-Security" response headers.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b>addStrictTransportSecurityHosts(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#enableStrictTransportSecurityStore">enableStrictTransportSecurityStore</a>(), and <a href="http://doc.qt.io/qt-5/qhstspolicy.html">QHstsPolicy</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_addStrictTransportSecurityHosts(
        this_ptr: *mut crate::QNetworkAccessManager,
        knownHosts: *const crate::QVectorOfQHstsPolicy,
    );

    /// <p>Returns the list of HTTP Strict Transport Security policies. This list can differ from what was initially set via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#addStrictTransportSecurityHosts">addStrictTransportSecurityHosts</a>() if HSTS cache was updated from a "Strict-Transport-Security" response header.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#strictTransportSecurityHosts">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of HTTP Strict Transport Security policies. This list can differ from what was initially set via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#addStrictTransportSecurityHosts">addStrictTransportSecurityHosts</a>() if HSTS cache was updated from a "Strict-Transport-Security" response header.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#addStrictTransportSecurityHosts">addStrictTransportSecurityHosts</a>() and <a href="http://doc.qt.io/qt-5/qhstspolicy.html">QHstsPolicy</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_strictTransportSecurityHosts(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Posts a request to obtain the network headers for <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object which will contain such headers.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#head">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Posts a request to obtain the network headers for <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object which will contain such headers.</p>
    /// <p>The function is named after the HTTP request associated (HEAD).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_head(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
    ) -> *mut crate::QNetworkReply;

    /// <p>Posts a request to obtain the contents of the target <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object opened for reading which emits the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal whenever new data arrives.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Posts a request to obtain the contents of the target <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object opened for reading which emits the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal whenever new data arrives.</p>
    /// <p>The contents as well as associated headers will be downloaded.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">sendCustomRequest</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_get(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
    ) -> *mut crate::QNetworkReply;

    /// <p>Sends an HTTP POST request to the destination specified by <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object opened for reading that will contain the reply sent by the server. The contents of the <i>data</i> device will be uploaded to the server.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends an HTTP POST request to the destination specified by <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object opened for reading that will contain the reply sent by the server. The contents of the <i>data</i> device will be uploaded to the server.</p>
    /// <p><i>data</i> must be open for reading and must remain valid until the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#finished">finished</a>() signal is emitted for this reply.</p>
    /// <p><b>Note: </b>Sending a POST request on protocols other than HTTP and HTTPS is undefined and will probably fail.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">sendCustomRequest</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_post(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        data: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the contents of the <i>data</i> byte array to the destination specified by <i>request</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_post1(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkReply;

    /// <p>Uploads the contents of <i>data</i> to the destination <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object that will be open for reply.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Uploads the contents of <i>data</i> to the destination <i>request</i> and returns a new <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object that will be open for reply.</p>
    /// <p><i>data</i> must be opened for reading when this function is called and must remain valid until the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#finished">finished</a>() signal is emitted for this reply.</p>
    /// <p>Whether anything will be available for reading from the returned object is protocol dependent. For HTTP, the server may send a small HTML page indicating the upload was successful (or not). Other protocols will probably have content in their replies.</p>
    /// <p><b>Note: </b>For HTTP, this request will send a PUT request, which most servers do not allow. Form upload mechanisms, including that of uploading files through HTML forms, use the POST mechanism.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">sendCustomRequest</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_put(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        data: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the contents of the <i>data</i> byte array to the destination specified by <i>request</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_put1(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkReply;

    /// <p>Sends a request to delete the resource identified by the URL of <i>request</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends a request to delete the resource identified by the URL of <i>request</i>.</p>
    /// <p><b>Note: </b>This feature is currently available for HTTP only, performing an HTTP DELETE request.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">sendCustomRequest</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_deleteResource(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
    ) -> *mut crate::QNetworkReply;

    /// <p>Sends a custom request to the server identified by the URL of <i>request</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends a custom request to the server identified by the URL of <i>request</i>.</p>
    /// <p>It is the user's responsibility to send a <i>verb</i> to the server that is valid according to the HTTP specification.</p>
    /// <p>This method provides means to send verbs other than the common ones provided via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>() or <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>() etc., for instance sending an HTTP OPTIONS command.</p>
    /// <p>If <i>data</i> is not empty, the contents of the <i>data</i> device will be uploaded to the server; in that case, data must be open for reading and must remain valid until the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#finished">finished</a>() signal is emitted for this reply.</p>
    /// <p><b>Note: </b>This feature is currently available for HTTP(S) only.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        verb: *const ::qt_core::QByteArray,
        data: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the contents of the <i>data</i> byte array to the destination specified by <i>request</i>.</p>
    /// <p>This function was introduced in Qt 5.8.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest1(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        verb: *const ::qt_core::QByteArray,
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the contents of the <i>multiPart</i> message to the destination specified by <i>request</i>.</p>
    /// <p>This can be used for sending MIME multipart messages over HTTP.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html">QHttpMultiPart</a>, <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>, and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_post2(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        multiPart: *mut crate::QHttpMultiPart,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the contents of the <i>multiPart</i> message to the destination specified by <i>request</i>.</p>
    /// <p>This can be used for sending MIME multipart messages over HTTP.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html">QHttpMultiPart</a>, <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>, and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_put2(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        multiPart: *mut crate::QHttpMultiPart,
    ) -> *mut crate::QNetworkReply;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends a custom request to the server identified by the URL of <i>request</i>.</p>
    /// <p>Sends the contents of the <i>multiPart</i> message to the destination specified by <i>request</i>.</p>
    /// <p>This can be used for sending MIME multipart messages for custom verbs.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html">QHttpMultiPart</a>, <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>, and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest2(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        verb: *const ::qt_core::QByteArray,
        multiPart: *mut crate::QHttpMultiPart,
    ) -> *mut crate::QNetworkReply;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#setConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Sets the network configuration that will be used when creating the <a href="http://doc.qt.io/qt-5/qnetworksession.html">network session</a> to <i>config</i>.</p>
    /// <p>The network configuration is used to create and open a network session before any request that requires network access is process. If no network configuration is explicitly set via this function the network configuration returned by <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#defaultConfiguration">QNetworkConfigurationManager::defaultConfiguration</a>() will be used.</p>
    /// <p>To restore the default network configuration set the network configuration to the value returned from <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#defaultConfiguration">QNetworkConfigurationManager::defaultConfiguration</a>().</p>
    /// <p>Setting a network configuration means that the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> instance will only be using the specified one. In particular, if the default network configuration changes (upon e.g. Wifi being available), this new configuration needs to be enabled manually if desired.</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html">QNetworkConfigurationManager</a></span> manager;
    ///  networkAccessManager<span class="operator">-</span><span class="operator">&gt;</span>setConfiguration(manager<span class="operator">.</span>defaultConfiguration());
    /// </pre>
    /// <p>If an invalid network configuration is set, a network session will not be created. In this case network requests will be processed regardless, but may fail. For example:</p>
    /// <pre class="cpp"> networkAccessManager<span class="operator">-</span><span class="operator">&gt;</span>setConfiguration(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span>());
    /// </pre>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#configuration">configuration</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html">QNetworkSession</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setConfiguration(
        this_ptr: *mut crate::QNetworkAccessManager,
        config: *const crate::QNetworkConfiguration,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Returns the network configuration that will be used to create the <a href="http://doc.qt.io/qt-5/qnetworksession.html">network session</a> which will be used when processing network requests.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#setConfiguration">setConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#activeConfiguration">activeConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_configuration(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#activeConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Returns the current active network configuration.</p>
    /// <p>If the network configuration returned by <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#configuration">configuration</a>() is of type <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">QNetworkConfiguration::ServiceNetwork</a> this function will return the current active child network configuration of that configuration. Otherwise returns the same network configuration as <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#configuration">configuration</a>().</p>
    /// <p>Use this function to return the actual network configuration currently in use by the network session.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#configuration">configuration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_activeConfiguration(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#setNetworkAccessible">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Overrides the reported network accessibility. If <i>accessible</i> is <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#NetworkAccessibility-enum">NotAccessible</a> the reported network accessiblity will always be <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#NetworkAccessibility-enum">NotAccessible</a>. Otherwise the reported network accessibility will reflect the actual device state.</p>
    /// <p><b>Note: </b>Setter function for property <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#networkAccessible">networkAccessible</a>. </p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#networkAccessible">networkAccessible</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setNetworkAccessible(
        this_ptr: *mut crate::QNetworkAccessManager,
        accessible: crate::q_network_access_manager::NetworkAccessibility,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#networkAccessible">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Returns the current network accessibility.</p>
    /// <p><b>Note: </b>Getter function for property networkAccessible. </p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager-obsolete.html#setNetworkAccessible">setNetworkAccessible</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_networkAccessible(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> crate::q_network_access_manager::NetworkAccessibility;

    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>Preconnecting a SPDY connection can be done by calling setAllowedNextProtocols() on <i>sslConfiguration</i> with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a> contained in the list of allowed protocols. When using SPDY, one single connection per host is enough, i.e. calling this method multiple times per host will not result in faster network transactions.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">connectToHost</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
        port: u16,
        sslConfiguration: *const crate::QSslConfiguration,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i> with <i>peerName</i> set to be the hostName used for certificate validation. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>Preconnecting a SPDY connection can be done by calling setAllowedNextProtocols() on <i>sslConfiguration</i> with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a> contained in the list of allowed protocols. When using SPDY, one single connection per host is enough, i.e. calling this method multiple times per host will not result in faster network transactions.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">connectToHost</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted1(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
        port: u16,
        sslConfiguration: *const crate::QSslConfiguration,
        peerName: *const ::qt_core::QString,
    );

    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>. This function is useful to complete the TCP handshake to a host before the HTTP request is made, resulting in a lower network latency.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>. This function is useful to complete the TCP handshake to a host before the HTTP request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted">connectToHostEncrypted</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHost(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
        port: u16,
    );

    /// <p>Sets the manager's redirect policy to be the <i>policy</i> specified. This policy will affect all subsequent requests created by the manager.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setRedirectPolicy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the manager's redirect policy to be the <i>policy</i> specified. This policy will affect all subsequent requests created by the manager.</p>
    /// <p>Use this function to enable or disable HTTP redirects on the manager's level.</p>
    /// <p><b>Note: </b>When creating a request QNetworkRequest::RedirectAttributePolicy has the highest priority, next by priority is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::FollowRedirectsAttribute</a>. Finally, the manager's policy has the lowest priority.</p>
    /// <p>For backwards compatibility the default value is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#RedirectPolicy-enum">QNetworkRequest::ManualRedirectPolicy</a>. This may change in the future and some type of auto-redirect policy will become the default; clients relying on manual redirect handling are encouraged to set this policy explicitly in their code.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#redirectPolicy">redirectPolicy</a>(), <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#RedirectPolicy-enum">QNetworkRequest::RedirectPolicy</a>, and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::FollowRedirectsAttribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setRedirectPolicy(
        this_ptr: *mut crate::QNetworkAccessManager,
        policy: crate::q_network_request::RedirectPolicy,
    );

    /// <p>Returns the redirect policy that is used when creating new requests.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#redirectPolicy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the redirect policy that is used when creating new requests.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setRedirectPolicy">setRedirectPolicy</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#RedirectPolicy-enum">QNetworkRequest::RedirectPolicy</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_redirectPolicy(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> crate::q_network_request::RedirectPolicy;

    /// <p>Returns the true if <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is currently configured to automatically delete QNetworkReplies, false otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#autoDeleteReplies">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the true if <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> is currently configured to automatically delete QNetworkReplies, false otherwise.</p>
    /// <p>This function was introduced in Qt 5.14.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setAutoDeleteReplies">setAutoDeleteReplies</a> and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::AutoDeleteReplyOnFinishAttribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_autoDeleteReplies(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> bool;

    /// <p>Enables or disables automatic deletion of <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReplies</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setAutoDeleteReplies">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Enables or disables automatic deletion of <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReplies</a>.</p>
    /// <p>Setting <i>shouldAutoDelete</i> to true is the same as setting the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::AutoDeleteReplyOnFinishAttribute</a> attribute to true on all <i>future</i> <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequests</a> passed to this instance of <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> unless the attribute was already explicitly set on the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a>.</p>
    /// <p>This function was introduced in Qt 5.14.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#autoDeleteReplies">autoDeleteReplies</a> and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::AutoDeleteReplyOnFinishAttribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setAutoDeleteReplies(
        this_ptr: *mut crate::QNetworkAccessManager,
        autoDelete: bool,
    );

    /// <p>Returns the timeout used for transfers, in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#transferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the timeout used for transfers, in milliseconds.</p>
    /// <p>This timeout is zero if <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setTransferTimeout">setTransferTimeout</a>() hasn't been called, which means that the timeout is not used.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setTransferTimeout">setTransferTimeout</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_transferTimeout(
        this_ptr: *const crate::QNetworkAccessManager,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setTransferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    /// <p>Transfers are aborted if no bytes are transferred before the timeout expires. Zero means no timer is set. If no argument is provided, the timeout is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#TransferTimeoutConstant-enum">QNetworkRequest::DefaultTransferTimeoutConstant</a>. If this function is not called, the timeout is disabled and has the value zero. The request-specific non-zero timeouts set for the requests that are executed override this value. This means that if <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> has an enabled timeout, it needs to be disabled to execute a request without a timeout.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#transferTimeout">transferTimeout</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setTransferTimeout(
        this_ptr: *mut crate::QNetworkAccessManager,
        timeout: ::std::os::raw::c_int,
    );

    /// <p>Constructs an invalid configuration object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#QNetworkConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an invalid configuration object.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#isValid">isValid</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_QNetworkConfiguration(
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Creates a copy of the QNetworkConfiguration object contained in <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#QNetworkConfiguration-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of the QNetworkConfiguration object contained in <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_QNetworkConfiguration1(
        other: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    pub fn ctr_qt_network_ffi_QNetworkConfiguration_operator_1(
        this_ptr: *mut crate::QNetworkConfiguration,
        other: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html" class="obsolete">QNetworkConfiguration</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#dtor.QNetworkConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html" class="obsolete">QNetworkConfiguration</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_dQNetworkConfiguration(
        this_ptr: *mut crate::QNetworkConfiguration,
    );

    /// <p>Swaps this network configuration with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network configuration with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_swap(
        this_ptr: *mut crate::QNetworkConfiguration,
        other: *mut crate::QNetworkConfiguration,
    );

    /// <p>Returns <code>true</code>, if this configuration is the same as the <i>other</i> configuration given; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code>, if this configuration is the same as the <i>other</i> configuration given; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_operator__(
        this_ptr: *const crate::QNetworkConfiguration,
        other: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns the current state of the configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#state">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current state of the configuration.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_state(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the type of the configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#type">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of the configuration.</p>
    /// <p>A configuration can represent a single access point configuration or a set of access point configurations. Such a set is called service network. A configuration that is based on a service network can potentially support roaming of network sessions.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_type(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> crate::q_network_configuration::Type;

    /// <p>Returns the purpose of this configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#purpose">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the purpose of this configuration.</p>
    /// <p>The purpose field may be used to programmatically determine the purpose of a configuration. Such information is usually part of the access point or service network meta data.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_purpose(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> crate::q_network_configuration::Purpose;

    /// <p>Returns the type of bearer used by this network configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of bearer used by this network configuration.</p>
    /// <p>If the bearer type is <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">unknown</a> the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeName">bearerTypeName</a>() function can be used to retrieve a textural type name for the bearer.</p>
    /// <p>An invalid network configuration always returns the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerUnknown</a> value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeName">bearerTypeName</a>() and <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeFamily">bearerTypeFamily</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_bearerType(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> crate::q_network_configuration::BearerType;

    /// <p>Returns the bearer type family used by this network configuration. The following table lists how <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerType">bearerType</a>() values map to bearerTypeFamily() values:</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeFamily">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the bearer type family used by this network configuration. The following table lists how <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerType">bearerType</a>() values map to bearerTypeFamily() values:</p>
    /// <div class="table"><table class="generic">
    ///  <thead><tr class="qt-style"><th>bearer type</th><th>bearer type family</th></tr></thead>
    /// <tbody><tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerUnknown</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer2G</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerEthernet</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWLAN</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerBluetooth</a></td><td>(same type)</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerCDMA2000</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerEVDO</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWCDMA</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerHSPA</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer3G</a></td><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer3G</a></td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWiMAX</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerLTE</a>, <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer4G</a></td><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer4G</a></td></tr>
    /// </tbody></table></div>
    /// <p>An invalid network configuration always returns the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerUnknown</a> value.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerType">bearerType</a>() and <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeName">bearerTypeName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_bearerTypeFamily(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> crate::q_network_configuration::BearerType;

    /// <p>Returns the type of bearer used by this network configuration as a string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of bearer used by this network configuration as a string.</p>
    /// <p>The string is not translated and therefore cannot be shown to the user. The subsequent table shows the fixed mappings between <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerType</a> and the bearer type name for known types. If the <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerType</a> is unknown this function may return additional information if it is available; otherwise an empty string will be returned.</p>
    /// <div class="table"><table class="generic">
    ///  <thead><tr class="qt-style"><th><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerType</a></th><th>Value</th></tr></thead>
    /// <tbody><tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerUnknown</a></td><td>The session is based on an unknown or unspecified bearer type. The value of the string returned describes the bearer type.</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerEthernet</a></td><td>Ethernet</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWLAN</a></td><td>WLAN</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer2G</a></td><td>2G</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer3G</a></td><td>3G</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">Bearer4G</a></td><td>4G</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerCDMA2000</a></td><td>CDMA2000</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWCDMA</a></td><td>WCDMA</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerHSPA</a></td><td>HSPA</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerBluetooth</a></td><td>Bluetooth</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerWiMAX</a></td><td>WiMAX</td></tr>
    /// <tr valign="top" class="even"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerEVDO</a></td><td>EVDO</td></tr>
    /// <tr valign="top" class="odd"><td><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#BearerType-enum">BearerLTE</a></td><td>LTE</td></tr>
    /// </tbody></table></div>
    /// <p>This function returns an empty string if this is an invalid configuration, a network configuration of type <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">QNetworkConfiguration::ServiceNetwork</a> or <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">QNetworkConfiguration::UserChoice</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerType">bearerType</a>() and <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#bearerTypeFamily">bearerTypeFamily</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_bearerTypeName(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the unique and platform specific identifier for this network configuration; otherwise an empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#identifier">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the unique and platform specific identifier for this network configuration; otherwise an empty string.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_identifier(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns <code>true</code> if this configuration supports roaming; otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#isRoamingAvailable">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this configuration supports roaming; otherwise false.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_isRoamingAvailable(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns all sub configurations of this network configuration in priority order. The first sub configuration in the list has the highest priority.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#children">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns all sub configurations of this network configuration in priority order. The first sub configuration in the list has the highest priority.</p>
    /// <p>Only network configurations of type <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">ServiceNetwork</a> can have children. Otherwise this function returns an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_children(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Returns the user visible name of this configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the user visible name of this configuration.</p>
    /// <p>The name may either be the name of the underlying access point or the name for service network that this configuration represents.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_name(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html" class="obsolete">QNetworkConfiguration</a> object is valid. A configuration may become invalid if the user deletes the configuration or the configuration was default-constructed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html" class="obsolete">QNetworkConfiguration</a> object is valid. A configuration may become invalid if the user deletes the configuration or the configuration was default-constructed.</p>
    /// <p>The addition and removal of configurations can be monitored via the QNetworkConfigurationManager.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html">QNetworkConfigurationManager</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_isValid(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns the connect timeout of this configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#connectTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the connect timeout of this configuration.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#setConnectTimeout">setConnectTimeout</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_connectTimeout(
        this_ptr: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the connect timeout of this configuration to <i>timeout</i>. This allows control of the timeout used by <code>QAbstractSocket</code> to establish a connection.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#setConnectTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the connect timeout of this configuration to <i>timeout</i>. This allows control of the timeout used by <code>QAbstractSocket</code> to establish a connection.</p>
    /// <p><b>Note: </b><i>timeout</i> is in millisecond.</p>
    /// <p><b>Warning:</b> This will have no effect if the bearer plugin doesn't have the CanStartAndStopInterfaces capability.</p>
    /// <p>Returns true if succeeded.</p>
    /// <p>This function was introduced in Qt 5.9.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#connectTimeout">connectTimeout</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfiguration_setConnectTimeout(
        this_ptr: *mut crate::QNetworkConfiguration,
        timeout: ::std::os::raw::c_int,
    ) -> bool;

    pub fn ctr_qt_network_ffi_swap16(
        value1: *mut crate::QNetworkConfiguration,
        value2: *mut crate::QNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_metaObject(
        this_ptr: *const crate::QNetworkConfigurationManager,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_qt_metacast(
        this_ptr: *mut crate::QNetworkConfigurationManager,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_qt_metacall(
        this_ptr: *mut crate::QNetworkConfigurationManager,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QNetworkConfigurationManager with the given <i>parent</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#QNetworkConfigurationManager">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkConfigurationManager with the given <i>parent</i>.</p>
    /// <p>Note that to ensure a valid list of current configurations immediately available, updating is done during construction which causes some delay.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_QNetworkConfigurationManager(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkConfigurationManager;

    /// <p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html" class="obsolete">QNetworkConfigurationManager</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#dtor.QNetworkConfigurationManager">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html" class="obsolete">QNetworkConfigurationManager</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_dQNetworkConfigurationManager(
        this_ptr: *mut crate::QNetworkConfigurationManager,
    );

    /// <p>Returns the capabilities supported by the current platform.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#capabilities">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the capabilities supported by the current platform.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_capabilities(
        this_ptr: *const crate::QNetworkConfigurationManager,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the default configuration to be used. This function always returns a discovered configuration; otherwise an invalid configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#defaultConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the default configuration to be used. This function always returns a discovered configuration; otherwise an invalid configuration.</p>
    /// <p>In some cases it may be required to call <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">updateConfigurations</a>() and wait for the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateCompleted">updateCompleted</a>() signal before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">allConfigurations</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_defaultConfiguration(
        this_ptr: *const crate::QNetworkConfigurationManager,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns the list of configurations which comply with the given <i>filter</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of configurations which comply with the given <i>filter</i>.</p>
    /// <p>By default this function returns all (defined and undefined) configurations.</p>
    /// <p>A wireless network with a particular SSID may only be accessible in a certain area despite the fact that the system has a valid configuration for it. Therefore the filter flag may be used to limit the list to discovered and possibly connected configurations only.</p>
    /// <p>If <i>filter</i> is set to zero this function returns all possible configurations.</p>
    /// <p>Note that this function returns the states for all configurations as they are known at the time of this function call. If for instance a configuration of type WLAN is defined the system may have to perform a WLAN scan in order to determine whether it is actually available. To obtain the most accurate state <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">updateConfigurations</a>() should be used to update each configuration's state. Note that such an update may require some time. It's completion is signalled by <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateCompleted">updateCompleted</a>(). In the absence of a configuration update this function returns the best estimate at the time of the call. Therefore, if WLAN configurations are of interest, it is recommended that <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">updateConfigurations</a>() is called once after <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html" class="obsolete">QNetworkConfigurationManager</a> instantiation (WLAN scans are too time consuming to perform in constructor). After this the data is kept automatically up-to-date as the system reports any changes.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_allConfigurations(
        this_ptr: *const crate::QNetworkConfigurationManager,
        flags: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Returns the QNetworkConfiguration for <i>identifier</i>; otherwise returns an invalid QNetworkConfiguration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationFromIdentifier">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the QNetworkConfiguration for <i>identifier</i>; otherwise returns an invalid QNetworkConfiguration.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#identifier">QNetworkConfiguration::identifier</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_configurationFromIdentifier(
        this_ptr: *const crate::QNetworkConfigurationManager,
        identifier: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns <code>true</code> if the system is considered to be connected to another device via an active network interface; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#isOnline">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the system is considered to be connected to another device via an active network interface; otherwise returns <code>false</code>.</p>
    /// <p>This is equivalent to the following code snippet:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#QNetworkConfigurationManager">QNetworkConfigurationManager</a></span> mgr;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span><span class="operator">&gt;</span> activeConfigs <span class="operator">=</span> mgr<span class="operator">.</span>allConfigurations(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span><span class="operator">::</span>Active);
    ///  <span class="keyword">if</span> (activeConfigs<span class="operator">.</span>count() <span class="operator">&gt;</span> <span class="number">0</span>)
    /// &#32;    Q_ASSERT(mgr<span class="operator">.</span>isOnline());
    ///  <span class="keyword">else</span>
    /// &#32;    Q_ASSERT(<span class="operator">!</span>mgr<span class="operator">.</span>isOnline());
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#onlineStateChanged">onlineStateChanged</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_isOnline(
        this_ptr: *const crate::QNetworkConfigurationManager,
    ) -> bool;

    /// <p>Initiates an update of all configurations. This may be used to initiate WLAN scans or other time consuming updates which may be required to obtain the correct state for configurations.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates an update of all configurations. This may be used to initiate WLAN scans or other time consuming updates which may be required to obtain the correct state for configurations.</p>
    /// <p>This call is asynchronous. On completion of this update the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateCompleted">updateCompleted</a>() signal is emitted. If new configurations are discovered or old ones were removed or changed the update process may trigger the emission of one or multiple <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationAdded">configurationAdded</a>(), <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationRemoved">configurationRemoved</a>() and <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationChanged">configurationChanged</a>() signals.</p>
    /// <p>If a configuration state changes as a result of this update all existing QNetworkConfiguration instances are updated automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">allConfigurations</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_updateConfigurations(
        this_ptr: *mut crate::QNetworkConfigurationManager,
    );

    /// <p>Create a new QNetworkCookie object, initializing the cookie name to <i>name</i> and its value to <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#QNetworkCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Create a new QNetworkCookie object, initializing the cookie name to <i>name</i> and its value to <i>value</i>.</p>
    /// <p>A cookie is only valid if it has a name. However, the value is opaque to the application and being empty may have significance to the remote server.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie(
        name: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Creates a new QNetworkCookie object by copying the contents of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#QNetworkCookie-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a new QNetworkCookie object by copying the contents of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie1(
        other: *const crate::QNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#dtor.QNetworkCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_dQNetworkCookie(this_ptr: *mut crate::QNetworkCookie);

    pub fn ctr_qt_network_ffi_QNetworkCookie_operator_1(
        this_ptr: *mut crate::QNetworkCookie,
        other: *const crate::QNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Swaps this cookie with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this cookie with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_swap(
        this_ptr: *mut crate::QNetworkCookie,
        other: *mut crate::QNetworkCookie,
    );

    /// <p>Returns <code>true</code> if this cookie is equal to <i>other</i>. This function only returns <code>true</code> if all fields of the cookie are the same.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this cookie is equal to <i>other</i>. This function only returns <code>true</code> if all fields of the cookie are the same.</p>
    /// <p>However, in some contexts, two cookies of the same name could be considered equal.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#operator-not-eq">operator!=</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#hasSameIdentifier">hasSameIdentifier</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_operator__(
        this_ptr: *const crate::QNetworkCookie,
        other: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if the "secure" option was specified in the cookie string, false otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSecure">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the "secure" option was specified in the cookie string, false otherwise.</p>
    /// <p>Secure cookies may contain private information and should not be resent over unencrypted connections.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setSecure">setSecure</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_isSecure(
        this_ptr: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Sets the secure flag of this cookie to <i>enable</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setSecure">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the secure flag of this cookie to <i>enable</i>.</p>
    /// <p>Secure cookies may contain private information and should not be resent over unencrypted connections.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSecure">isSecure</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setSecure(
        this_ptr: *mut crate::QNetworkCookie,
        enable: bool,
    );

    /// <p>Returns <code>true</code> if the "HttpOnly" flag is enabled for this cookie.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isHttpOnly">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the "HttpOnly" flag is enabled for this cookie.</p>
    /// <p>A cookie that is "HttpOnly" is only set and retrieved by the network requests and replies; i.e., the HTTP protocol. It is not accessible from scripts running on browsers.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSecure">isSecure</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_isHttpOnly(
        this_ptr: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Sets this cookie's "HttpOnly" flag to <i>enable</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setHttpOnly">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets this cookie's "HttpOnly" flag to <i>enable</i>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isHttpOnly">isHttpOnly</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setHttpOnly(
        this_ptr: *mut crate::QNetworkCookie,
        enable: bool,
    );

    /// <p>Returns <code>true</code> if this cookie is a session cookie. A session cookie is a cookie which has no expiration date, which means it should be discarded when the application's concept of session is over (usually, when the application exits).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSessionCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this cookie is a session cookie. A session cookie is a cookie which has no expiration date, which means it should be discarded when the application's concept of session is over (usually, when the application exits).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#expirationDate">expirationDate</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setExpirationDate">setExpirationDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_isSessionCookie(
        this_ptr: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Returns the expiration date for this cookie. If this cookie is a session cookie, the <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> returned will not be valid. If the date is in the past, this cookie has already expired and should not be sent again back to a remote server.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#expirationDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the expiration date for this cookie. If this cookie is a session cookie, the <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> returned will not be valid. If the date is in the past, this cookie has already expired and should not be sent again back to a remote server.</p>
    /// <p>The expiration date corresponds to the parameters of the "expires" entry in the cookie string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSessionCookie">isSessionCookie</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setExpirationDate">setExpirationDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_expirationDate(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QDateTime;

    /// <p>Sets the expiration date of this cookie to <i>date</i>. Setting an invalid expiration date to this cookie will mean it's a session cookie.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setExpirationDate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the expiration date of this cookie to <i>date</i>. Setting an invalid expiration date to this cookie will mean it's a session cookie.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#isSessionCookie">isSessionCookie</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#expirationDate">expirationDate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setExpirationDate(
        this_ptr: *mut crate::QNetworkCookie,
        date: *const ::qt_core::QDateTime,
    );

    /// <p>Returns the domain this cookie is associated with. This corresponds to the "domain" field of the cookie string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#domain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the domain this cookie is associated with. This corresponds to the "domain" field of the cookie string.</p>
    /// <p>Note that the domain here may start with a dot, which is not a valid hostname. However, it means this cookie matches all hostnames ending with that domain name.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setDomain">setDomain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_domain(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the domain associated with this cookie to be <i>domain</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setDomain">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the domain associated with this cookie to be <i>domain</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#domain">domain</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setDomain(
        this_ptr: *mut crate::QNetworkCookie,
        domain: *const ::qt_core::QString,
    );

    /// <p>Returns the path associated with this cookie. This corresponds to the "path" field of the cookie string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#path">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the path associated with this cookie. This corresponds to the "path" field of the cookie string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setPath">setPath</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_path(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the path associated with this cookie to be <i>path</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setPath">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the path associated with this cookie to be <i>path</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#path">path</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setPath(
        this_ptr: *mut crate::QNetworkCookie,
        path: *const ::qt_core::QString,
    );

    /// <p>Returns the name of this cookie. The only mandatory field of a cookie is its name, without which it is not considered valid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of this cookie. The only mandatory field of a cookie is its name, without which it is not considered valid.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setName">setName</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_name(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the name of this cookie to be <i>cookieName</i>. Note that setting a cookie name to an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> will make this cookie invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the name of this cookie to be <i>cookieName</i>. Note that setting a cookie name to an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> will make this cookie invalid.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#name">name</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setName(
        this_ptr: *mut crate::QNetworkCookie,
        cookieName: *const ::qt_core::QByteArray,
    );

    /// <p>Returns this cookies value, as specified in the cookie string. Note that a cookie is still valid if its value is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns this cookies value, as specified in the cookie string. Note that a cookie is still valid if its value is empty.</p>
    /// <p>Cookie name-value pairs are considered opaque to the application: that is, their values don't mean anything.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setValue">setValue</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#name">name</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_value(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the value of this cookie to be <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#setValue">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the value of this cookie to be <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#name">name</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_setValue(
        this_ptr: *mut crate::QNetworkCookie,
        value: *const ::qt_core::QByteArray,
    );

    /// <p>Returns the raw form of this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a>. The <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> returned by this function is suitable for an HTTP header, either in a server response (the Set-Cookie header) or the client request (the Cookie header). You can choose from one of two formats, using <i>form</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#toRawForm">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the raw form of this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a>. The <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> returned by this function is suitable for an HTTP header, either in a server response (the Set-Cookie header) or the client request (the Cookie header). You can choose from one of two formats, using <i>form</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#parseCookies">parseCookies</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_toRawForm(
        this_ptr: *const crate::QNetworkCookie,
        form: crate::q_network_cookie::RawForm,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns <code>true</code> if this cookie has the same identifier tuple as <i>other</i>. The identifier tuple is composed of the name, domain and path.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#hasSameIdentifier">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this cookie has the same identifier tuple as <i>other</i>. The identifier tuple is composed of the name, domain and path.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#operator-eq-eq">operator==</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_hasSameIdentifier(
        this_ptr: *const crate::QNetworkCookie,
        other: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>This functions normalizes the path and domain of the cookie if they were previously empty. The <i>url</i> parameter is used to determine the correct domain and path.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#normalize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This functions normalizes the path and domain of the cookie if they were previously empty. The <i>url</i> parameter is used to determine the correct domain and path.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_normalize(
        this_ptr: *mut crate::QNetworkCookie,
        url: *const ::qt_core::QUrl,
    );

    /// <p>Parses the cookie string <i>cookieString</i> as received from a server response in the "Set-Cookie:" header. If there's a parsing error, this function returns an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#parseCookies">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Parses the cookie string <i>cookieString</i> as received from a server response in the "Set-Cookie:" header. If there's a parsing error, this function returns an empty list.</p>
    /// <p>Since the HTTP header can set more than one cookie at the same time, this function returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a>&gt;, one for each cookie that is parsed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#toRawForm">toRawForm</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_parseCookies(
        cookieString: *const ::qt_core::QByteArray,
    ) -> *mut crate::QListOfQNetworkCookie;

    pub fn ctr_qt_network_ffi_swap17(
        value1: *mut crate::QNetworkCookie,
        value2: *mut crate::QNetworkCookie,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__20(
        arg1: *const ::qt_core::QDebug,
        arg2: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_metaObject(
        this_ptr: *const crate::QNetworkCookieJar,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_qt_metacast(
        this_ptr: *mut crate::QNetworkCookieJar,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_qt_metacall(
        this_ptr: *mut crate::QNetworkCookieJar,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkCookieJar_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a QNetworkCookieJar object and sets the parent object to be <i>parent</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#QNetworkCookieJar">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QNetworkCookieJar object and sets the parent object to be <i>parent</i>.</p>
    /// <p>The cookie jar is initialized to empty.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_QNetworkCookieJar(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkCookieJar;

    /// <p>Destroys this cookie jar object and discards all cookies stored in it. Cookies are not saved to disk in the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> default implementation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#dtor.QNetworkCookieJar">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys this cookie jar object and discards all cookies stored in it. Cookies are not saved to disk in the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> default implementation.</p>
    /// <p>If you need to save the cookies to disk, you have to derive from <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> and save the cookies to disk yourself.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_dQNetworkCookieJar(
        this_ptr: *mut crate::QNetworkCookieJar,
    );

    /// <p>Returns the cookies to be added to when a request is sent to <i>url</i>. This function is called by the default <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#createRequest">QNetworkAccessManager::createRequest</a>(), which adds the cookies returned by this function to the request being sent.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#cookiesForUrl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cookies to be added to when a request is sent to <i>url</i>. This function is called by the default <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#createRequest">QNetworkAccessManager::createRequest</a>(), which adds the cookies returned by this function to the request being sent.</p>
    /// <p>If more than one cookie with the same name is found, but with differing paths, the one with longer path is returned before the one with shorter path. In other words, this function returns cookies sorted decreasingly by path length.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> class implements only a very basic security policy (it makes sure that the cookies' domain and path match the reply's). To enhance the security policy with your own algorithms, override cookiesForUrl().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#setCookiesFromUrl">setCookiesFromUrl</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCookieJar">QNetworkAccessManager::setCookieJar</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_cookiesForUrl(
        this_ptr: *const crate::QNetworkCookieJar,
        url: *const ::qt_core::QUrl,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Adds the cookies in the list <i>cookieList</i> to this cookie jar. Before being inserted cookies are normalized.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#setCookiesFromUrl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Adds the cookies in the list <i>cookieList</i> to this cookie jar. Before being inserted cookies are normalized.</p>
    /// <p>Returns <code>true</code> if one or more cookies are set for <i>url</i>, otherwise false.</p>
    /// <p>If a cookie already exists in the cookie jar, it will be overridden by those in <i>cookieList</i>.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> class implements only a very basic security policy (it makes sure that the cookies' domain and path match the reply's). To enhance the security policy with your own algorithms, override setCookiesFromUrl().</p>
    /// <p>Also, <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">QNetworkCookieJar</a> does not have a maximum cookie jar size. Reimplement this function to discard older cookies to create room for new ones.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#cookiesForUrl">cookiesForUrl</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setCookieJar">QNetworkAccessManager::setCookieJar</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#normalize">QNetworkCookie::normalize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_setCookiesFromUrl(
        this_ptr: *mut crate::QNetworkCookieJar,
        cookieList: *const crate::QListOfQNetworkCookie,
        url: *const ::qt_core::QUrl,
    ) -> bool;

    /// <p>Adds <i>cookie</i> to this cookie jar.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#insertCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Adds <i>cookie</i> to this cookie jar.</p>
    /// <p>Returns <code>true</code> if <i>cookie</i> was added, false otherwise.</p>
    /// <p>If a cookie with the same identifier already exists in the cookie jar, it will be overridden.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_insertCookie(
        this_ptr: *mut crate::QNetworkCookieJar,
        cookie: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>If a cookie with the same identifier as <i>cookie</i> exists in this cookie jar it will be updated. This function uses <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#insertCookie">insertCookie</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#updateCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If a cookie with the same identifier as <i>cookie</i> exists in this cookie jar it will be updated. This function uses <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#insertCookie">insertCookie</a>().</p>
    /// <p>Returns <code>true</code> if <i>cookie</i> was updated, false if no cookie in the jar matches the identifier of <i>cookie</i>.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#hasSameIdentifier">QNetworkCookie::hasSameIdentifier</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_updateCookie(
        this_ptr: *mut crate::QNetworkCookieJar,
        cookie: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Deletes from cookie jar the cookie found to have the same identifier as <i>cookie</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#deleteCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Deletes from cookie jar the cookie found to have the same identifier as <i>cookie</i>.</p>
    /// <p>Returns <code>true</code> if a cookie was deleted, false otherwise.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#hasSameIdentifier">QNetworkCookie::hasSameIdentifier</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_deleteCookie(
        this_ptr: *mut crate::QNetworkCookieJar,
        cookie: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Creates a QNetworkDatagram object with no payload data and undefined destination address.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#QNetworkDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QNetworkDatagram object with no payload data and undefined destination address.</p>
    /// <p>The payload can be modified by using <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setData">setData</a>() and the destination address can be set with <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>().</p>
    /// <p>If the destination address is left undefined, <a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">QUdpSocket::writeDatagram</a>() will attempt to send the datagram to the address last associated with, by using <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">QUdpSocket::connectToHost</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram() -> *mut crate::QNetworkDatagram;

    /// <p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#QNetworkDatagram-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram1(
        data: *const ::qt_core::QByteArray,
        destinationAddress: *const crate::QHostAddress,
        port: u16,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Creates a copy of the <i>other</i> datagram, including the payload and metadata.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#QNetworkDatagram-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of the <i>other</i> datagram, including the payload and metadata.</p>
    /// <p>To create a datagram suitable for sending in a reply, use <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#makeReply">QNetworkDatagram::makeReply</a>();</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram2(
        other: *const crate::QNetworkDatagram,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Copies the <i>other</i> datagram, including the payload and metadata.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copies the <i>other</i> datagram, including the payload and metadata.</p>
    /// <p>To create a datagram suitable for sending in a reply, use <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#makeReply">QNetworkDatagram::makeReply</a>();</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_operator_(
        this_ptr: *mut crate::QNetworkDatagram,
        other: *const crate::QNetworkDatagram,
    ) -> *mut crate::QNetworkDatagram;

    pub fn ctr_qt_network_ffi_QNetworkDatagram_dQNetworkDatagram(
        this_ptr: *mut crate::QNetworkDatagram,
    );

    /// <p>Swaps this instance with <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this instance with <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_swap(
        this_ptr: *mut crate::QNetworkDatagram,
        other: *mut crate::QNetworkDatagram,
    );

    /// <p>Clears the payload data and metadata in this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, resetting them to their default values.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Clears the payload data and metadata in this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, resetting them to their default values.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_clear(this_ptr: *mut crate::QNetworkDatagram);

    /// <p>Returns true if this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object is valid. A valid <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object contains at least one sender or receiver address. Valid datagrams can contain empty payloads.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object is valid. A valid <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object contains at least one sender or receiver address. Valid datagrams can contain empty payloads.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_isValid(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> bool;

    /// <p>Returns true if this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object is null. This function is the opposite of <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isValid">isValid</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if this <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object is null. This function is the opposite of <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isValid">isValid</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_isNull(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> bool;

    /// <p>Returns the interface index this datagram is associated with. The interface index is a positive number that uniquely identifies the network interface in the operating system. This number matches the value returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#index">QNetworkInterface::index</a>() for the interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#interfaceIndex">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the interface index this datagram is associated with. The interface index is a positive number that uniquely identifies the network interface in the operating system. This number matches the value returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#index">QNetworkInterface::index</a>() for the interface.</p>
    /// <p>If this datagram was received from the network, this is the index of the interface that the packet was received from. If this is an outgoing datagram, this is the index of the interface that the datagram should be sent on.</p>
    /// <p>A value of 0 indicates that the interface index is unknown.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setInterfaceIndex">setInterfaceIndex</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_interfaceIndex(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> ::std::os::raw::c_uint;

    /// <p>Sets the interface index this datagram is associated with to <i>index</i>. The interface index is a positive number that uniquely identifies the network interface in the operating system. This number matches the value returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#index">QNetworkInterface::index</a>() for the interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setInterfaceIndex">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the interface index this datagram is associated with to <i>index</i>. The interface index is a positive number that uniquely identifies the network interface in the operating system. This number matches the value returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#index">QNetworkInterface::index</a>() for the interface.</p>
    /// <p>It is usually not necessary to call this function on datagrams received from the network.</p>
    /// <p>If this is an outgoing packet, this is the index of the interface the datagram should be sent on. A value of 0 indicates that the operating system should choose the interface based on other factors.</p>
    /// <p>Note that the interface index can also be set with <a href="http://doc.qt.io/qt-5/qhostaddress.html#setScopeId">QHostAddress::setScopeId</a>() for IPv6 destination addresses and then with <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>(). If the scope ID set in the destination address and <i>index</i> are different and neither is zero, it is undefined which interface the operating system will send the datagram on.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#interfaceIndex">interfaceIndex</a>() and setInterfaceIndex().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setInterfaceIndex(
        this_ptr: *mut crate::QNetworkDatagram,
        index: ::std::os::raw::c_uint,
    );

    /// <p>Returns the sender address associated with this datagram. For a datagram received from the network, it is the address of the peer node that sent the datagram. For an outgoing datagrams, it is the local address to be used when sending.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the sender address associated with this datagram. For a datagram received from the network, it is the address of the peer node that sent the datagram. For an outgoing datagrams, it is the local address to be used when sending.</p>
    /// <p>If no sender address was set on this datagram, the returned object will report true to <a href="http://doc.qt.io/qt-5/qhostaddress.html#isNull">QHostAddress::isNull</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationAddress">destinationAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderPort">senderPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setSender">setSender</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_senderAddress(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the destination address associated with this datagram. For a datagram received from the network, it is the address the peer node sent the datagram to, which can either be a local address of this machine or a multicast or broadcast address. For an outgoing datagrams, it is the address the datagram should be sent to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the destination address associated with this datagram. For a datagram received from the network, it is the address the peer node sent the datagram to, which can either be a local address of this machine or a multicast or broadcast address. For an outgoing datagrams, it is the address the datagram should be sent to.</p>
    /// <p>If no destination address was set on this datagram, the returned object will report true to <a href="http://doc.qt.io/qt-5/qhostaddress.html#isNull">QHostAddress::isNull</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderAddress">senderAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationPort">destinationPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_destinationAddress(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the port number of the sender associated with this datagram. For a datagram received from the network, it is the port number that the peer node sent the datagram from. For an outgoing datagram, it is the local port the datagram should be sent from.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port number of the sender associated with this datagram. For a datagram received from the network, it is the port number that the peer node sent the datagram from. For an outgoing datagram, it is the local port the datagram should be sent from.</p>
    /// <p>If no sender address was associated with this datagram, this function returns -1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderAddress">senderAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationPort">destinationPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setSender">setSender</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_senderPort(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the port number of the destination associated with this datagram. For a datagram received from the network, it is the local port number that the peer node sent the datagram to. For an outgoing datagram, it is the peer port the datagram should be sent to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port number of the destination associated with this datagram. For a datagram received from the network, it is the local port number that the peer node sent the datagram to. For an outgoing datagram, it is the peer port the datagram should be sent to.</p>
    /// <p>If no destination address was associated with this datagram, this function returns -1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationAddress">destinationAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderPort">senderPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_destinationPort(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the sender address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The sender address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setSender">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the sender address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The sender address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    /// <p>For outgoing datagrams, this function can be used to set the address the datagram should carry. The address <i>address</i> must usually be one of the local addresses assigned to this machine, which can be obtained using <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>. If left unset, the operating system will choose the most appropriate address to use given the destination in question.</p>
    /// <p>The port number <i>port</i> must be the port number associated with the socket, if there is one. The value of 0 can be used to indicate that the operating system should choose the port number.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">QUdpSocket::writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderAddress">senderAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderPort">senderPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setSender(
        this_ptr: *mut crate::QNetworkDatagram,
        address: *const crate::QHostAddress,
        port: u16,
    );

    /// <p>Sets the destination address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The destination address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the destination address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The destination address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    /// <p>For outgoing datagrams, this function can be used to set the address the datagram should be sent to. It can be the unicast address used to communicate with the peer or a broadcast or multicast address to send to a group of devices.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">QUdpSocket::writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationAddress">destinationAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#destinationPort">destinationPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setSender">setSender</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setDestination(
        this_ptr: *mut crate::QNetworkDatagram,
        address: *const crate::QHostAddress,
        port: u16,
    );

    /// <p>Returns the hop count limit associated with this datagram. The hop count limit is the number of nodes that are allowed to forward the IP packet before it expires and an error is sent back to the sender of the datagram. In IPv4, this value is usually known as "time to live" (TTL).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#hopLimit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hop count limit associated with this datagram. The hop count limit is the number of nodes that are allowed to forward the IP packet before it expires and an error is sent back to the sender of the datagram. In IPv4, this value is usually known as "time to live" (TTL).</p>
    /// <p>If this datagram was received from the network, this is the remaining hop count of the datagram after reception and was decremented by 1 by each node that forwarded the packet. A value of -1 indicates that the hop limit count not be obtained.</p>
    /// <p>If this is an outgoing datagram, this is the value to be set in the IP header upon sending. A value of -1 indicates the operating system should choose the value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setHopLimit">setHopLimit</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_hopLimit(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the hop count limit associated with this datagram to <i>count</i>. The hop count limit is the number of nodes that are allowed to forward the IP packet before it expires and an error is sent back to the sender of the datagram. In IPv4, this value is usually known as "time to live" (TTL).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setHopLimit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the hop count limit associated with this datagram to <i>count</i>. The hop count limit is the number of nodes that are allowed to forward the IP packet before it expires and an error is sent back to the sender of the datagram. In IPv4, this value is usually known as "time to live" (TTL).</p>
    /// <p>It is usually not necessary to call this function on datagrams received from the network.</p>
    /// <p>If this is an outgoing packet, this is the value to be set in the IP header upon sending. The valid range for the value is 1 to 255. This function also accepts a value of -1 to indicate that the operating system should choose the value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#hopLimit">hopLimit</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setHopLimit(
        this_ptr: *mut crate::QNetworkDatagram,
        count: ::std::os::raw::c_int,
    );

    /// <p>Returns the data payload of this datagram. For a datagram received from the network, it contains the payload of the datagram. For an outgoing datagram, it is the datagram to be sent.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the data payload of this datagram. For a datagram received from the network, it contains the payload of the datagram. For an outgoing datagram, it is the datagram to be sent.</p>
    /// <p>Note that datagrams can be transmitted with no data, so the returned <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> may be empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setData">setData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_data(
        this_ptr: *const crate::QNetworkDatagram,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the data payload of this datagram to <i>data</i>. It is usually not necessary to call this function on received datagrams. For outgoing datagrams, this function sets the data to be sent on the network.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the data payload of this datagram to <i>data</i>. It is usually not necessary to call this function on received datagrams. For outgoing datagrams, this function sets the data to be sent on the network.</p>
    /// <p>Since datagrams can empty, an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is a valid value for <i>data</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#data">data</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setData(
        this_ptr: *mut crate::QNetworkDatagram,
        data: *const ::qt_core::QByteArray,
    );

    pub fn ctr_qt_network_ffi_QNetworkDatagram_makeReply(
        this_ptr: *const crate::QNetworkDatagram,
        payload: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkDatagram;

    pub fn ctr_qt_network_ffi_QNetworkDatagram_makeReply1(
        this_ptr: *mut crate::QNetworkDatagram,
        payload: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkDatagram;

    pub fn ctr_qt_network_ffi_swap18(
        value1: *mut crate::QNetworkDatagram,
        value2: *mut crate::QNetworkDatagram,
    );

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_metaObject(
        this_ptr: *const crate::QNetworkDiskCache,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_qt_metacast(
        this_ptr: *mut crate::QNetworkDiskCache,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_qt_metacall(
        this_ptr: *mut crate::QNetworkDiskCache,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkDiskCache_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a new disk cache. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html">QAbstractNetworkCache</a>'s constructor.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#QNetworkDiskCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a new disk cache. The <i>parent</i> argument is passed to <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html">QAbstractNetworkCache</a>'s constructor.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_QNetworkDiskCache(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkDiskCache;

    /// <p>Destroys the cache object. This does not clear the disk cache.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#dtor.QNetworkDiskCache">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the cache object. This does not clear the disk cache.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_dQNetworkDiskCache(
        this_ptr: *mut crate::QNetworkDiskCache,
    );

    /// <p>Returns the location where cached files will be stored.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#cacheDirectory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the location where cached files will be stored.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#setCacheDirectory">setCacheDirectory</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_cacheDirectory(
        this_ptr: *const crate::QNetworkDiskCache,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the directory where cached files will be stored to <i>cacheDir</i></p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#setCacheDirectory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the directory where cached files will be stored to <i>cacheDir</i></p>
    /// <p><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html">QNetworkDiskCache</a> will create this directory if it does not exists.</p>
    /// <p>Prepared cache items will be stored in the new cache directory when they are inserted.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#cacheDirectory">cacheDirectory</a>() and <a href="http://doc.qt.io/qt-5/qdesktopservices-obsolete.html#StandardLocation-enum">QDesktopServices::CacheLocation</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_setCacheDirectory(
        this_ptr: *mut crate::QNetworkDiskCache,
        cacheDir: *const ::qt_core::QString,
    );

    /// <p>Returns the current maximum size for the disk cache.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#maximumCacheSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current maximum size for the disk cache.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#setMaximumCacheSize">setMaximumCacheSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_maximumCacheSize(
        this_ptr: *const crate::QNetworkDiskCache,
    ) -> i64;

    /// <p>Sets the maximum size of the disk cache to be <i>size</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#setMaximumCacheSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum size of the disk cache to be <i>size</i>.</p>
    /// <p>If the new size is smaller then the current cache size then the cache will call <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#expire">expire</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#maximumCacheSize">maximumCacheSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_setMaximumCacheSize(
        this_ptr: *mut crate::QNetworkDiskCache,
        size: i64,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">QAbstractNetworkCache::cacheSize</a>() const.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#cacheSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#cacheSize">QAbstractNetworkCache::cacheSize</a>() const.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_cacheSize(
        this_ptr: *const crate::QNetworkDiskCache,
    ) -> i64;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">QAbstractNetworkCache::metaData</a>(const QUrl &amp;url).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#metaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#metaData">QAbstractNetworkCache::metaData</a>(const QUrl &amp;url).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_metaData(
        this_ptr: *mut crate::QNetworkDiskCache,
        url: *const ::qt_core::QUrl,
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#updateMetaData">QAbstractNetworkCache::updateMetaData</a>(const QNetworkCacheMetaData &amp;metaData).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#updateMetaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#updateMetaData">QAbstractNetworkCache::updateMetaData</a>(const QNetworkCacheMetaData &amp;metaData).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_updateMetaData(
        this_ptr: *mut crate::QNetworkDiskCache,
        metaData: *const crate::QNetworkCacheMetaData,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">QAbstractNetworkCache::data</a>(const QUrl &amp;url).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#data">QAbstractNetworkCache::data</a>(const QUrl &amp;url).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_data(
        this_ptr: *mut crate::QNetworkDiskCache,
        url: *const ::qt_core::QUrl,
    ) -> *mut ::qt_core::QIODevice;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">QAbstractNetworkCache::remove</a>(const QUrl &amp;url).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#remove">QAbstractNetworkCache::remove</a>(const QUrl &amp;url).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_remove(
        this_ptr: *mut crate::QNetworkDiskCache,
        url: *const ::qt_core::QUrl,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">QAbstractNetworkCache::prepare</a>(const QNetworkCacheMetaData &amp;metaData).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#prepare">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#prepare">QAbstractNetworkCache::prepare</a>(const QNetworkCacheMetaData &amp;metaData).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_prepare(
        this_ptr: *mut crate::QNetworkDiskCache,
        metaData: *const crate::QNetworkCacheMetaData,
    ) -> *mut ::qt_core::QIODevice;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">QAbstractNetworkCache::insert</a>(QIODevice *device).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#insert">QAbstractNetworkCache::insert</a>(QIODevice *device).</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_insert(
        this_ptr: *mut crate::QNetworkDiskCache,
        device: *mut ::qt_core::QIODevice,
    );

    /// <p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html">QNetworkCacheMetaData</a> for the cache file <i>fileName</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#fileMetaData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html">QNetworkCacheMetaData</a> for the cache file <i>fileName</i>.</p>
    /// <p>If <i>fileName</i> is not a cache file <a href="http://doc.qt.io/qt-5/qnetworkcachemetadata.html">QNetworkCacheMetaData</a> will be invalid.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_fileMetaData(
        this_ptr: *const crate::QNetworkDiskCache,
        fileName: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkCacheMetaData;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#clear">QAbstractNetworkCache::clear</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractnetworkcache.html#clear">QAbstractNetworkCache::clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_clear(this_ptr: *mut crate::QNetworkDiskCache);

    /// <p>Constructs an empty QNetworkAddressEntry object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#QNetworkAddressEntry">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty QNetworkAddressEntry object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_QNetworkAddressEntry(
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Constructs a QNetworkAddressEntry object that is a copy of the object <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#QNetworkAddressEntry-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkAddressEntry object that is a copy of the object <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_QNetworkAddressEntry1(
        other: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_operator_1(
        this_ptr: *mut crate::QNetworkAddressEntry,
        other: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#dtor.QNetworkAddressEntry">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_dQNetworkAddressEntry(
        this_ptr: *mut crate::QNetworkAddressEntry,
    );

    /// <p>Swaps this network address entry instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network address entry instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_swap(
        this_ptr: *mut crate::QNetworkAddressEntry,
        other: *mut crate::QNetworkAddressEntry,
    );

    /// <p>Returns <code>true</code> if this network address entry is the same as <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this network address entry is the same as <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_operator__(
        this_ptr: *const crate::QNetworkAddressEntry,
        other: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns whether this address is eligible for publication in the Domain Name System (DNS) or similar name resolution mechanisms.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#dnsEligibility">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns whether this address is eligible for publication in the Domain Name System (DNS) or similar name resolution mechanisms.</p>
    /// <p>In general, an address is suitable for publication if it is an address this machine will be reached at for an indeterminate amount of time, though it need not be permanent. For example, addresses obtained via DHCP are often eligible, but cryptographically-generated temporary IPv6 addresses are not.</p>
    /// <p>On some systems, <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> will need to heuristically determine which addresses are eligible.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isPermanent">isPermanent</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setDnsEligibility">setDnsEligibility</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_dnsEligibility(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> crate::q_network_address_entry::DnsEligibilityStatus;

    /// <p>Sets the DNS eligibility flag for this address to <i>status</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setDnsEligibility">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the DNS eligibility flag for this address to <i>status</i>.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#dnsEligibility">dnsEligibility</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setDnsEligibility(
        this_ptr: *mut crate::QNetworkAddressEntry,
        status: crate::q_network_address_entry::DnsEligibilityStatus,
    );

    /// <p>This function returns one IPv4 or IPv6 address found, that was found in a network interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#ip">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns one IPv4 or IPv6 address found, that was found in a network interface.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setIp">setIp</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_ip(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QHostAddress;

    /// <p>Sets the IP address the <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object contains to <i>newIp</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setIp">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the IP address the <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object contains to <i>newIp</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#ip">ip</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setIp(
        this_ptr: *mut crate::QNetworkAddressEntry,
        newIp: *const crate::QHostAddress,
    );

    /// <p>Returns the netmask associated with the IP address. The netmask is expressed in the form of an IP address, such as 255.255.0.0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the netmask associated with the IP address. The netmask is expressed in the form of an IP address, such as 255.255.0.0.</p>
    /// <p>For IPv6 addresses, the prefix length is converted to an address where the number of bits set to 1 is equal to the prefix length. For a prefix length of 64 bits (the most common value), the netmask will be expressed as a <a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a> holding the address FFFF:FFFF:FFFF:FFFF::</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setNetmask">setNetmask</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#prefixLength">prefixLength</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_netmask(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QHostAddress;

    /// <p>Sets the netmask that this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object contains to <i>newNetmask</i>. Setting the netmask also sets the prefix length to match the new netmask.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setNetmask">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the netmask that this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object contains to <i>newNetmask</i>. Setting the netmask also sets the prefix length to match the new netmask.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setPrefixLength">setPrefixLength</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setNetmask(
        this_ptr: *mut crate::QNetworkAddressEntry,
        newNetmask: *const crate::QHostAddress,
    );

    /// <p>Returns the prefix length of this IP address. The prefix length matches the number of bits set to 1 in the netmask (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>()). For IPv4 addresses, the value is between 0 and 32. For IPv6 addresses, it's contained between 0 and 128 and is the preferred form of representing addresses.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#prefixLength">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the prefix length of this IP address. The prefix length matches the number of bits set to 1 in the netmask (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>()). For IPv4 addresses, the value is between 0 and 32. For IPv6 addresses, it's contained between 0 and 128 and is the preferred form of representing addresses.</p>
    /// <p>This function returns -1 if the prefix length could not be determined (i.e., <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>() returns a null QHostAddress()).</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setPrefixLength">setPrefixLength</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_prefixLength(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the prefix length of this IP address to <i>length</i>. The value of <i>length</i> must be valid for this type of IP address: between 0 and 32 for IPv4 addresses, between 0 and 128 for IPv6 addresses. Setting to any invalid value is equivalent to setting to -1, which means "no prefix length".</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setPrefixLength">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the prefix length of this IP address to <i>length</i>. The value of <i>length</i> must be valid for this type of IP address: between 0 and 32 for IPv4 addresses, between 0 and 128 for IPv6 addresses. Setting to any invalid value is equivalent to setting to -1, which means "no prefix length".</p>
    /// <p>Setting the prefix length also sets the netmask (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#netmask">netmask</a>()).</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#prefixLength">prefixLength</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setNetmask">setNetmask</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setPrefixLength(
        this_ptr: *mut crate::QNetworkAddressEntry,
        length: ::std::os::raw::c_int,
    );

    /// <p>Returns the broadcast address associated with the IPv4 address and netmask. It can usually be derived from those two by setting to 1 the bits of the IP address where the netmask contains a 0. (In other words, by bitwise-OR'ing the IP address with the inverse of the netmask)</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#broadcast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the broadcast address associated with the IPv4 address and netmask. It can usually be derived from those two by setting to 1 the bits of the IP address where the netmask contains a 0. (In other words, by bitwise-OR'ing the IP address with the inverse of the netmask)</p>
    /// <p>This member is always empty for IPv6 addresses, since the concept of broadcast has been abandoned in that system in favor of multicast. In particular, the group of hosts corresponding to all the nodes in the local network can be reached by the "all-nodes" special multicast group (address FF02::1).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setBroadcast">setBroadcast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_broadcast(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QHostAddress;

    /// <p>Sets the broadcast IP address of this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object to <i>newBroadcast</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setBroadcast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the broadcast IP address of this <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> object to <i>newBroadcast</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#broadcast">broadcast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setBroadcast(
        this_ptr: *mut crate::QNetworkAddressEntry,
        newBroadcast: *const crate::QHostAddress,
    );

    /// <p>Returns <code>true</code> if the address lifetime is known, <code>false</code> if not. If the lifetime is not known, both <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>() will return <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the address lifetime is known, <code>false</code> if not. If the lifetime is not known, both <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>() and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>() will return <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setAddressLifetime">setAddressLifetime</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#clearAddressLifetime">clearAddressLifetime</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_isLifetimeKnown(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns the deadline when this address becomes deprecated (no longer preferred), if known. If the address lifetime is not known (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>()), this function always returns <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the deadline when this address becomes deprecated (no longer preferred), if known. If the address lifetime is not known (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>()), this function always returns <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    /// <p>While an address is preferred, it may be used by the operating system as the source address for new, outgoing packets. After it becomes deprecated, it will remain valid for incoming packets for a while longer until finally removed (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>()).</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setAddressLifetime">setAddressLifetime</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#clearAddressLifetime">clearAddressLifetime</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_preferredLifetime(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> *mut ::qt_core::QDeadlineTimer;

    /// <p>Returns the deadline when this address becomes invalid and will be removed from the networking stack, if known. If the address lifetime is not known (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>()), this function always returns <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the deadline when this address becomes invalid and will be removed from the networking stack, if known. If the address lifetime is not known (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>()), this function always returns <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    /// <p>While an address is valid, it will be accepted by the operating system as a valid destination address for this machine. Whether it is used as a source address for new, outgoing packets is controlled by, among other rules, the preferred lifetime (see <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>()).</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setAddressLifetime">setAddressLifetime</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#clearAddressLifetime">clearAddressLifetime</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_validityLifetime(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> *mut ::qt_core::QDeadlineTimer;

    /// <p>Sets both the preferred and valid lifetimes for this address to the <i>preferred</i> and <i>validity</i> deadlines, respectively. After this call, <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>() will return <code>true</code>, even if both parameters are <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setAddressLifetime">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets both the preferred and valid lifetimes for this address to the <i>preferred</i> and <i>validity</i> deadlines, respectively. After this call, <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>() will return <code>true</code>, even if both parameters are <a href="http://doc.qt.io/qt-5/qdeadlinetimer.html#ForeverConstant-enum">QDeadlineTimer::Forever</a>.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#clearAddressLifetime">clearAddressLifetime</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_setAddressLifetime(
        this_ptr: *mut crate::QNetworkAddressEntry,
        preferred: *const ::qt_core::QDeadlineTimer,
        validity: *const ::qt_core::QDeadlineTimer,
    );

    /// <p>Resets both the preferred and valid lifetimes for this address. After this call, <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>() will return <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#clearAddressLifetime">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Resets both the preferred and valid lifetimes for this address. After this call, <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>() will return <code>false</code>.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#preferredLifetime">preferredLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#setAddressLifetime">setAddressLifetime</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_clearAddressLifetime(
        this_ptr: *mut crate::QNetworkAddressEntry,
    );

    /// <p>Returns <code>true</code> if this address is permanent on this interface, <code>false</code> if it's temporary. A permenant address is one which has no expiration time and is often static (manually configured).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isPermanent">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this address is permanent on this interface, <code>false</code> if it's temporary. A permenant address is one which has no expiration time and is often static (manually configured).</p>
    /// <p>If this information could not be determined, this function returns <code>true</code>.</p>
    /// <p><b>Note: </b>Depending on the operating system and the networking configuration tool, it is possible for a temporary address to be interpreted as permanent, if the tool did not inform the details correctly to the operating system.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isTemporary">isTemporary</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_isPermanent(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if this address is temporary on this interface, <code>false</code> if it's permanent.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isTemporary">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this address is temporary on this interface, <code>false</code> if it's permanent.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isLifetimeKnown">isLifetimeKnown</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#validityLifetime">validityLifetime</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#isPermanent">isPermanent</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAddressEntry_isTemporary(
        this_ptr: *const crate::QNetworkAddressEntry,
    ) -> bool;

    pub fn ctr_qt_network_ffi_swap19(
        value1: *mut crate::QNetworkAddressEntry,
        value2: *mut crate::QNetworkAddressEntry,
    );

    /// <p>Constructs an empty network interface object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#QNetworkInterface">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty network interface object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_QNetworkInterface() -> *mut crate::QNetworkInterface;

    /// <p>Creates a copy of the QNetworkInterface object contained in <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#QNetworkInterface-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a copy of the QNetworkInterface object contained in <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_QNetworkInterface1(
        other: *const crate::QNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    pub fn ctr_qt_network_ffi_QNetworkInterface_operator_1(
        this_ptr: *mut crate::QNetworkInterface,
        other: *const crate::QNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#dtor.QNetworkInterface">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_dQNetworkInterface(
        this_ptr: *mut crate::QNetworkInterface,
    );

    /// <p>Swaps this network interface instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network interface instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_swap(
        this_ptr: *mut crate::QNetworkInterface,
        other: *mut crate::QNetworkInterface,
    );

    /// <p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object contains valid information about a network interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object contains valid information about a network interface.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_isValid(
        this_ptr: *const crate::QNetworkInterface,
    ) -> bool;

    /// <p>Returns the interface system index, if known. This is an integer assigned by the operating system to identify this interface and it generally doesn't change. It matches the scope ID field in IPv6 addresses.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#index">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the interface system index, if known. This is an integer assigned by the operating system to identify this interface and it generally doesn't change. It matches the scope ID field in IPv6 addresses.</p>
    /// <p>If the index isn't known, this function returns 0.</p>
    /// <p>This function was introduced in Qt 4.5.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_index(
        this_ptr: *const crate::QNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the maximum transmission unit on this interface, if known, or 0 otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#maximumTransmissionUnit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum transmission unit on this interface, if known, or 0 otherwise.</p>
    /// <p>The maximum transmission unit is the largest packet that may be sent on this interface without incurring link-level fragmentation. Applications may use this value to calculate the size of the payload that will fit an unfragmented UDP datagram. Remember to subtract the sizes of headers used in your communication over the interface, e.g. TCP (20 bytes) or UDP (12), IPv4 (20) or IPv6 (40, absent some form of header compression), when computing how big a payload you can transmit. Also note that the MTU along the full path (the Path MTU) to the destination may be smaller than the interface's MTU.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_maximumTransmissionUnit(
        this_ptr: *const crate::QNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the name of this network interface. On Unix systems, this is a string containing the type of the interface and optionally a sequence number, such as "eth0", "lo" or "pcn0". On Windows, it's an internal ID that cannot be changed by the user.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of this network interface. On Unix systems, this is a string containing the type of the interface and optionally a sequence number, such as "eth0", "lo" or "pcn0". On Windows, it's an internal ID that cannot be changed by the user.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_name(
        this_ptr: *const crate::QNetworkInterface,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the human-readable name of this network interface on Windows, such as "Local Area Connection", if the name could be determined. If it couldn't, this function returns the same as <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#name">name</a>(). The human-readable name is a name that the user can modify in the Windows Control Panel, so it may change during the execution of the program.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#humanReadableName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the human-readable name of this network interface on Windows, such as "Local Area Connection", if the name could be determined. If it couldn't, this function returns the same as <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#name">name</a>(). The human-readable name is a name that the user can modify in the Windows Control Panel, so it may change during the execution of the program.</p>
    /// <p>On Unix, this function currently always returns the same as <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#name">name</a>(), since Unix systems don't store a configuration for human-readable names.</p>
    /// <p>This function was introduced in Qt 4.5.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_humanReadableName(
        this_ptr: *const crate::QNetworkInterface,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the flags associated with this network interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#flags">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the flags associated with this network interface.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_flags(
        this_ptr: *const crate::QNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the type of this interface, if it could be determined. If it could not be determined, this function returns <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#InterfaceType-enum">QNetworkInterface::Unknown</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#type">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of this interface, if it could be determined. If it could not be determined, this function returns <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#InterfaceType-enum">QNetworkInterface::Unknown</a>.</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#hardwareAddress">hardwareAddress</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_type(
        this_ptr: *const crate::QNetworkInterface,
    ) -> crate::q_network_interface::InterfaceType;

    /// <p>Returns the low-level hardware address for this interface. On Ethernet interfaces, this will be a MAC address in string representation, separated by colons.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#hardwareAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the low-level hardware address for this interface. On Ethernet interfaces, this will be a MAC address in string representation, separated by colons.</p>
    /// <p>Other interface types may have other types of hardware addresses. Implementations should not depend on this function returning a valid MAC address.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#type">type</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_hardwareAddress(
        this_ptr: *const crate::QNetworkInterface,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the list of IP addresses that this interface possesses along with their associated netmasks and broadcast addresses.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#addressEntries">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of IP addresses that this interface possesses along with their associated netmasks and broadcast addresses.</p>
    /// <p>If the netmask or broadcast address or other information is not necessary, you can call the <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#allAddresses">allAddresses</a>() function to obtain just the IP addresses of the active interfaces.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_addressEntries(
        this_ptr: *const crate::QNetworkInterface,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Returns the index of the interface whose name is <i>name</i> or 0 if there is no interface with that name. This function should produce the same result as the following code, but will probably execute faster.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceIndexFromName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index of the interface whose name is <i>name</i> or 0 if there is no interface with that name. This function should produce the same result as the following code, but will probably execute faster.</p>
    /// <pre class="cpp">     <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#QNetworkInterface">QNetworkInterface</a></span><span class="operator">::</span>interfaceFromName(name)<span class="operator">.</span>index()
    /// </pre>
    /// <p>This function was introduced in Qt 5.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromName">interfaceFromName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceNameFromIndex">interfaceNameFromIndex</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#interfaceIndex">QNetworkDatagram::interfaceIndex</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_interfaceIndexFromName(
        name: *const ::qt_core::QString,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object for the interface named <i>name</i>. If no such interface exists, this function returns an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object for the interface named <i>name</i>. If no such interface exists, this function returns an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object.</p>
    /// <p>The string <i>name</i> may be either an actual interface name (such as "eth0" or "en1") or an interface index in string form ("1", "2", etc.).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#name">name</a>() and <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#isValid">isValid</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_interfaceFromName(
        name: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object for the interface whose internal ID is <i>index</i>. Network interfaces have a unique identifier called the "interface index" to distinguish it from other interfaces on the system. Often, this value is assigned progressively and interfaces being removed and then added again get a different value every time.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromIndex">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> object for the interface whose internal ID is <i>index</i>. Network interfaces have a unique identifier called the "interface index" to distinguish it from other interfaces on the system. Often, this value is assigned progressively and interfaces being removed and then added again get a different value every time.</p>
    /// <p>This index is also found in the IPv6 address' scope ID field.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_interfaceFromIndex(
        index: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns the name of the interface whose index is <i>index</i> or an empty string if there is no interface with that index. This function should produce the same result as the following code, but will probably execute faster.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceNameFromIndex">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the interface whose index is <i>index</i> or an empty string if there is no interface with that index. This function should produce the same result as the following code, but will probably execute faster.</p>
    /// <pre class="cpp">     <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#QNetworkInterface">QNetworkInterface</a></span><span class="operator">::</span>interfaceFromIndex(index)<span class="operator">.</span>name()
    /// </pre>
    /// <p>This function was introduced in Qt 5.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceFromIndex">interfaceFromIndex</a>(), <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#interfaceIndexFromName">interfaceIndexFromName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#interfaceIndex">QNetworkDatagram::interfaceIndex</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_interfaceNameFromIndex(
        index: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns a listing of all the network interfaces found on the host machine. In case of failure it returns a list with zero elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#allInterfaces">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a listing of all the network interfaces found on the host machine. In case of failure it returns a list with zero elements.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_allInterfaces(
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>This convenience function returns all IP addresses found on the host machine. It is equivalent to calling <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#addressEntries">addressEntries</a>() on all the objects returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#allInterfaces">allInterfaces</a>() that are in the <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#InterfaceFlag-enum">QNetworkInterface::IsUp</a> state to obtain lists of <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> objects then calling <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#ip">QNetworkAddressEntry::ip</a>() on each of these.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#allAddresses">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This convenience function returns all IP addresses found on the host machine. It is equivalent to calling <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#addressEntries">addressEntries</a>() on all the objects returned by <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#allInterfaces">allInterfaces</a>() that are in the <a href="http://doc.qt.io/qt-5/qnetworkinterface.html#InterfaceFlag-enum">QNetworkInterface::IsUp</a> state to obtain lists of <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html">QNetworkAddressEntry</a> objects then calling <a href="http://doc.qt.io/qt-5/qnetworkaddressentry.html#ip">QNetworkAddressEntry::ip</a>() on each of these.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkInterface_allAddresses() -> *mut crate::QListOfQHostAddress;

    pub fn ctr_qt_network_ffi_swap20(
        value1: *mut crate::QNetworkInterface,
        value2: *mut crate::QNetworkInterface,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__21(
        debug: *const ::qt_core::QDebug,
        networkInterface: *const crate::QNetworkInterface,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Constructs a default QNetworkProxyQuery object. By default, the query type will be <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a default QNetworkProxyQuery object. By default, the query type will be <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery(
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery with the URL <i>requestUrl</i> and sets the query type to <i>queryType</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery with the URL <i>requestUrl</i> and sets the query type to <i>queryType</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#protocolTag">protocolTag</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery1(
        requestUrl: *const ::qt_core::QUrl,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery2(
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
        protocolTag: *const ::qt_core::QString,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    /// <p>Note that <i>bindPort</i> is of type quint16 to indicate the exact port number that is requested. The value of -1 (unknown) is not allowed in this context.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery3(
        bindPort: u16,
        protocolTag: *const ::qt_core::QString,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery4(
        networkConfiguration: *const crate::QNetworkConfiguration,
        requestUrl: *const ::qt_core::QUrl,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery5(
        networkConfiguration: *const crate::QNetworkConfiguration,
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
        protocolTag: *const ::qt_core::QString,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery6(
        networkConfiguration: *const crate::QNetworkConfiguration,
        bindPort: u16,
        protocolTag: *const ::qt_core::QString,
        queryType: crate::q_network_proxy_query::QueryType,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery object that is a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-7">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery object that is a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery7(
        other: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_operator_1(
        this_ptr: *mut crate::QNetworkProxyQuery,
        other: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#dtor.QNetworkProxyQuery">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_dQNetworkProxyQuery(
        this_ptr: *mut crate::QNetworkProxyQuery,
    );

    /// <p>Swaps this network proxy query instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network proxy query instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_swap(
        this_ptr: *mut crate::QNetworkProxyQuery,
        other: *mut crate::QNetworkProxyQuery,
    );

    /// <p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object contains the same data as <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object contains the same data as <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_operator__(
        this_ptr: *const crate::QNetworkProxyQuery,
        other: *const crate::QNetworkProxyQuery,
    ) -> bool;

    /// <p>Returns the query type.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#queryType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the query type.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setQueryType">setQueryType</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_queryType(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> crate::q_network_proxy_query::QueryType;

    /// <p>Sets the query type of this object to be <i>type</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setQueryType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the query type of this object to be <i>type</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#queryType">queryType</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setQueryType(
        this_ptr: *mut crate::QNetworkProxyQuery,
        type_: crate::q_network_proxy_query::QueryType,
    );

    /// <p>Returns the port number for the outgoing request or -1 if the port number is not known.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port number for the outgoing request or -1 if the port number is not known.</p>
    /// <p>If the query type is <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>, this function returns the port number of the URL being requested. In general, frameworks will fill in the port number from their default values.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerPort">setPeerPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_peerPort(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the requested port number for the outgoing connection to be <i>port</i>. Valid values are 1 to 65535, or -1 to indicate that the remote port number is unknown.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the requested port number for the outgoing connection to be <i>port</i>. Valid values are 1 to 65535, or -1 to indicate that the remote port number is unknown.</p>
    /// <p>The peer port number can also be used to indicate the expected port number of an incoming connection in the case of <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UdpSocket</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpServer</a> query types.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerHostName">setPeerHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setLocalPort">setLocalPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setPeerPort(
        this_ptr: *mut crate::QNetworkProxyQuery,
        port: ::std::os::raw::c_int,
    );

    /// <p>Returns the host name or IP address being of the outgoing connection being requested, or an empty string if the remote hostname is not known.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host name or IP address being of the outgoing connection being requested, or an empty string if the remote hostname is not known.</p>
    /// <p>If the query type is <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>, this function returns the host component of the URL being requested.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerHostName">setPeerHostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_peerHostName(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the hostname of the outgoing connection being requested to <i>hostname</i>. An empty hostname can be used to indicate that the remote host is unknown.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerHostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the hostname of the outgoing connection being requested to <i>hostname</i>. An empty hostname can be used to indicate that the remote host is unknown.</p>
    /// <p>The peer host name can also be used to indicate the expected source address of an incoming connection in the case of <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UdpSocket</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpServer</a> query types.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerPort">setPeerPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setLocalPort">setLocalPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setPeerHostName(
        this_ptr: *mut crate::QNetworkProxyQuery,
        hostname: *const ::qt_core::QString,
    );

    /// <p>Returns the port number of the socket that will accept incoming packets from remote servers or -1 if the port is not known.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port number of the socket that will accept incoming packets from remote servers or -1 if the port is not known.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setLocalPort">setLocalPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_localPort(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> ::std::os::raw::c_int;

    /// <p>Sets the port number that the socket wishes to use locally to accept incoming packets from remote servers to <i>port</i>. The local port is most often used with the <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpServer</a> and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UdpSocket</a> query types.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setLocalPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the port number that the socket wishes to use locally to accept incoming packets from remote servers to <i>port</i>. The local port is most often used with the <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpServer</a> and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UdpSocket</a> query types.</p>
    /// <p>Valid values are 0 to 65535 (with 0 indicating that any port number will be acceptable) or -1, which means the local port number is unknown or not applicable.</p>
    /// <p>In some circumstances, for special protocols, it's the local port number can also be used with a query of type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a>. When that happens, the socket is indicating it wishes to use the port number <i>port</i> when connecting to a remote host.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerPort">setPeerPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setPeerHostName">setPeerHostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setLocalPort(
        this_ptr: *mut crate::QNetworkProxyQuery,
        port: ::std::os::raw::c_int,
    );

    /// <p>Returns the protocol tag for this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object, or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> in case the protocol tag is unknown.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#protocolTag">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the protocol tag for this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object, or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> in case the protocol tag is unknown.</p>
    /// <p>In the case of queries of type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>, this function returns the value of the scheme component of the URL.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setProtocolTag">setProtocolTag</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#url">url</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_protocolTag(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the protocol tag for this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object to be <i>protocolTag</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setProtocolTag">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the protocol tag for this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object to be <i>protocolTag</i>.</p>
    /// <p>The protocol tag is an arbitrary string that indicates which protocol is being talked over the socket, such as "http", "xmpp", "telnet", etc. The protocol tag is used by the backend to return a request that is more specific to the protocol in question: for example, a HTTP connection could be use a caching HTTP proxy server, while all other connections use a more powerful SOCKSv5 proxy server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#protocolTag">protocolTag</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setProtocolTag(
        this_ptr: *mut crate::QNetworkProxyQuery,
        protocolTag: *const ::qt_core::QString,
    );

    /// <p>Returns the URL component of this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object in case of a query of type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#url">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the URL component of this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object in case of a query of type <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::UrlRequest</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setUrl">setUrl</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_url(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> *mut ::qt_core::QUrl;

    /// <p>Sets the URL component of this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object to be <i>url</i>. Setting the URL will also set the protocol tag, the remote host name and port number. This is done so as to facilitate the implementation of the code that determines the proxy server to be used.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#setUrl">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the URL component of this <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html">QNetworkProxyQuery</a> object to be <i>url</i>. Setting the URL will also set the protocol tag, the remote host name and port number. This is done so as to facilitate the implementation of the code that determines the proxy server to be used.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#url">url</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setUrl(
        this_ptr: *mut crate::QNetworkProxyQuery,
        url: *const ::qt_core::QUrl,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery-obsolete.html#networkConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Returns QNetworkConfiguration().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery-obsolete.html#setNetworkConfiguration">setNetworkConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_networkConfiguration(
        this_ptr: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qnetworkproxyquery-obsolete.html#setNetworkConfiguration">C++ documentation</a> for <span style='color: green;'>```void QNetworkProxyQuery::setNetworkConfiguration(const QNetworkConfiguration &networkConfiguration)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This function does nothing. The specified <i>networkConfiguration</i> parameter is ignored.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery-obsolete.html#networkConfiguration">networkConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_setNetworkConfiguration(
        this_ptr: *mut crate::QNetworkProxyQuery,
        networkConfiguration: *const crate::QNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_swap21(
        value1: *mut crate::QNetworkProxyQuery,
        value2: *mut crate::QNetworkProxyQuery,
    );

    /// <p>Constructs a QNetworkProxy with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">DefaultProxy</a> type.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">DefaultProxy</a> type.</p>
    /// <p>The proxy type is determined by <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#applicationProxy">applicationProxy</a>(), which defaults to <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">NoProxy</a> or a system-wide proxy if one is configured.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setType">setType</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">setApplicationProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy() -> *mut crate::QNetworkProxy;

    /// <p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    /// <p>The default capabilities for proxy type <i>type</i> are set automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy1(
        type_: crate::q_network_proxy::ProxyType,
        hostName: *const ::qt_core::QString,
        port: u16,
        user: *const ::qt_core::QString,
        password: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy2(
        other: *const crate::QNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    pub fn ctr_qt_network_ffi_QNetworkProxy_operator_1(
        this_ptr: *mut crate::QNetworkProxy,
        other: *const crate::QNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#dtor.QNetworkProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_dQNetworkProxy(this_ptr: *mut crate::QNetworkProxy);

    /// <p>Swaps this network proxy instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this network proxy instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_swap(
        this_ptr: *mut crate::QNetworkProxy,
        other: *mut crate::QNetworkProxy,
    );

    /// <p>Compares the value of this network proxy to <i>other</i> and returns <code>true</code> if they are equal (same proxy type, server as well as username and password)</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Compares the value of this network proxy to <i>other</i> and returns <code>true</code> if they are equal (same proxy type, server as well as username and password)</p>
    /// <p>This function was introduced in Qt 4.4.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_operator__(
        this_ptr: *const crate::QNetworkProxy,
        other: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Sets the proxy type for this instance to be <i>type</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setType">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the proxy type for this instance to be <i>type</i>.</p>
    /// <p>Note that changing the type of a proxy does not change the set of capabilities this <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> object holds if any capabilities have been set with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">setCapabilities</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#type">type</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">setCapabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setType(
        this_ptr: *mut crate::QNetworkProxy,
        type_: crate::q_network_proxy::ProxyType,
    );

    /// <p>Returns the proxy type for this instance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#type">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the proxy type for this instance.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setType">setType</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_type(
        this_ptr: *const crate::QNetworkProxy,
    ) -> crate::q_network_proxy::ProxyType;

    /// <p>Sets the capabilities of this proxy to <i>capabilities</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the capabilities of this proxy to <i>capabilities</i>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setType">setType</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setCapabilities(
        this_ptr: *mut crate::QNetworkProxy,
        capab: ::std::os::raw::c_int,
    );

    /// <p>Returns the capabilities of this proxy server.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the capabilities of this proxy server.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">setCapabilities</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#type">type</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_capabilities(
        this_ptr: *const crate::QNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if this proxy supports the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#Capability-enum">QNetworkProxy::CachingCapability</a> capability.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#isCachingProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this proxy supports the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#Capability-enum">QNetworkProxy::CachingCapability</a> capability.</p>
    /// <p>In Qt 4.4, the capability was tied to the proxy type, but since Qt 4.5 it is possible to remove the capability of caching from a proxy by calling <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">setCapabilities</a>().</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#type">type</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#isTransparentProxy">isTransparentProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_isCachingProxy(
        this_ptr: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Returns <code>true</code> if this proxy supports transparent tunneling of TCP connections. This matches the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#Capability-enum">QNetworkProxy::TunnelingCapability</a> capability.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#isTransparentProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this proxy supports transparent tunneling of TCP connections. This matches the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#Capability-enum">QNetworkProxy::TunnelingCapability</a> capability.</p>
    /// <p>In Qt 4.4, the capability was tied to the proxy type, but since Qt 4.5 it is possible to remove the capability of caching from a proxy by calling <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setCapabilities">setCapabilities</a>().</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#type">type</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#isCachingProxy">isCachingProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_isTransparentProxy(
        this_ptr: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Sets the user name for proxy authentication to be <i>user</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setUser">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the user name for proxy authentication to be <i>user</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#user">user</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPassword">setPassword</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#password">password</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setUser(
        this_ptr: *mut crate::QNetworkProxy,
        userName: *const ::qt_core::QString,
    );

    /// <p>Returns the user name used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#user">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the user name used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setUser">setUser</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPassword">setPassword</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#password">password</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_user(
        this_ptr: *const crate::QNetworkProxy,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the password for proxy authentication to be <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPassword">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the password for proxy authentication to be <i>password</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#user">user</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setUser">setUser</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#password">password</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setPassword(
        this_ptr: *mut crate::QNetworkProxy,
        password: *const ::qt_core::QString,
    );

    /// <p>Returns the password used for authentication.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#password">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the password used for authentication.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#user">user</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPassword">setPassword</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setUser">setUser</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_password(
        this_ptr: *const crate::QNetworkProxy,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the host name of the proxy host to be <i>hostName</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the host name of the proxy host to be <i>hostName</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hostName">hostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPort">setPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#port">port</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setHostName(
        this_ptr: *mut crate::QNetworkProxy,
        hostName: *const ::qt_core::QString,
    );

    /// <p>Returns the host name of the proxy host.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hostName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the host name of the proxy host.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHostName">setHostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPort">setPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#port">port</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_hostName(
        this_ptr: *const crate::QNetworkProxy,
    ) -> *mut ::qt_core::QString;

    /// <p>Sets the port of the proxy host to be <i>port</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the port of the proxy host to be <i>port</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hostName">hostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHostName">setHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#port">port</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setPort(this_ptr: *mut crate::QNetworkProxy, port: u16);

    /// <p>Returns the port of the proxy host.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#port">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the port of the proxy host.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHostName">setHostName</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setPort">setPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hostName">hostName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_port(this_ptr: *const crate::QNetworkProxy) -> u16;

    /// <p>Sets the application level network proxying to be <i>networkProxy</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the application level network proxying to be <i>networkProxy</i>.</p>
    /// <p>If a <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> or <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> has the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> type, then the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> set with this function is used. If you want more flexibility in determining which proxy is used, use the <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a> class.</p>
    /// <p>Setting a default proxy value with this function will override the application proxy factory set with <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#setApplicationProxyFactory">QNetworkProxyFactory::setApplicationProxyFactory</a>, and disable the use of a system proxy.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a>, <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#applicationProxy">applicationProxy</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProxy">QAbstractSocket::setProxy</a>(), and <a href="http://doc.qt.io/qt-5/qtcpserver.html#setProxy">QTcpServer::setProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setApplicationProxy(proxy: *const crate::QNetworkProxy);

    /// <p>Returns the application level network proxying.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#applicationProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the application level network proxying.</p>
    /// <p>If a <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> or <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> has the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> type, then the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> returned by this function is used.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a>, <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">setApplicationProxy</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#proxy">QAbstractSocket::proxy</a>(), and <a href="http://doc.qt.io/qt-5/qtcpserver.html#proxy">QTcpServer::proxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_applicationProxy() -> *mut crate::QNetworkProxy;

    /// <p>Returns the value of the known network header <i>header</i> if it is in use for this proxy. If it is not present, returns QVariant() (i.e., an invalid variant).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#header">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value of the known network header <i>header</i> if it is in use for this proxy. If it is not present, returns QVariant() (i.e., an invalid variant).</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeader">rawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHeader">setHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_header(
        this_ptr: *const crate::QNetworkProxy,
        header: crate::q_network_request::KnownHeaders,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the value of the known header <i>header</i> to be <i>value</i>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</p>
    /// <p>If the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a> this has no effect.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setRawHeader">setRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#header">header</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setHeader(
        this_ptr: *mut crate::QNetworkProxy,
        header: crate::q_network_request::KnownHeaders,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns <code>true</code> if the raw header <i>headerName</i> is in use for this proxy. Returns <code>false</code> if the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hasRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the raw header <i>headerName</i> is in use for this proxy. Returns <code>false</code> if the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a>.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeader">rawHeader</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setRawHeader">setRawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_hasRawHeader(
        this_ptr: *const crate::QNetworkProxy,
        headerName: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>Returns a list of all raw headers that are set in this network proxy. The list is in the order that the headers were set.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeaderList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of all raw headers that are set in this network proxy. The list is in the order that the headers were set.</p>
    /// <p>If the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a> an empty <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> is returned.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hasRawHeader">hasRawHeader</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeader">rawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_rawHeaderList(
        this_ptr: *const crate::QNetworkProxy,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns the raw form of header <i>headerName</i>. If no such header is present or the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a>, an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is returned, which may be indistinguishable from a header that is present but has no content (use <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hasRawHeader">hasRawHeader</a>() to find out if the header exists or not).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the raw form of header <i>headerName</i>. If no such header is present or the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a>, an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is returned, which may be indistinguishable from a header that is present but has no content (use <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hasRawHeader">hasRawHeader</a>() to find out if the header exists or not).</p>
    /// <p>Raw headers can be set with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setRawHeader">setRawHeader</a>() or with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHeader">setHeader</a>().</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#header">header</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setRawHeader">setRawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_rawHeader(
        this_ptr: *const crate::QNetworkProxy,
        headerName: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the header <i>headerName</i> to be of value <i>headerValue</i>. If <i>headerName</i> corresponds to a known header (see <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>), the raw format will be parsed and the corresponding "cooked" header will be set as well.</p>
    /// <p>For example:</p>
    /// <pre class="cpp"> request<span class="operator">.</span>setRawHeader(<span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span>(<span class="string">"Last-Modified"</span>)<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span>(<span class="string">"Sun, 06 Nov 1994 08:49:37 GMT"</span>));
    /// </pre>
    /// <p>will also set the known header LastModifiedHeader to be the <a href="http://doc.qt.io/qt-5/qdatetime.html">QDateTime</a> object of the parsed date.</p>
    /// <p><b>Note: </b>Setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (",") and set one single raw header.</p>
    /// <p>If the proxy is not of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpProxy</a> or <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">HttpCachingProxy</a> this has no effect.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#KnownHeaders-enum">QNetworkRequest::KnownHeaders</a>, <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setHeader">setHeader</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#hasRawHeader">hasRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#rawHeader">rawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_setRawHeader(
        this_ptr: *mut crate::QNetworkProxy,
        headerName: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QByteArray,
    );

    pub fn ctr_qt_network_ffi_swap22(
        value1: *mut crate::QNetworkProxy,
        value2: *mut crate::QNetworkProxy,
    );

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#dtor.QNetworkProxyFactory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_dQNetworkProxyFactory(
        this_ptr: *mut crate::QNetworkProxyFactory,
    );

    /// <p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#queryProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    /// <p>When reimplementing this class, take care to return at least one element.</p>
    /// <p>If you cannot determine a better proxy alternative, use <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>, which tells the code querying for a proxy to use a higher alternative. For example, if this factory is set to a <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object, DefaultProxy will tell it to query the application-level proxy settings.</p>
    /// <p>If this factory is set as the application proxy factory, DefaultProxy and NoProxy will have the same meaning.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_queryProxy(
        this_ptr: *mut crate::QNetworkProxyFactory,
        query: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Returns whether the use of platform-specific proxy settings are enabled.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#usesSystemConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns whether the use of platform-specific proxy settings are enabled.</p>
    /// <p>This function was introduced in Qt 5.8.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_usesSystemConfiguration() -> bool;

    /// <p>Enables the use of the platform-specific proxy settings, and only those. See <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#systemProxyForQuery">systemProxyForQuery</a>() for more information.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#setUseSystemConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Enables the use of the platform-specific proxy settings, and only those. See <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#systemProxyForQuery">systemProxyForQuery</a>() for more information.</p>
    /// <p>Calling this function with <i>enable</i> set to <code>true</code> resets any proxy or <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">QNetworkProxyFactory</a> that is already set.</p>
    /// <p><b>Note: </b>See the <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#systemProxyForQuery">systemProxyForQuery</a>() documentation for a list of limitations related to the use of system proxies.</p>
    /// <p>This function was introduced in Qt 4.6.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_setUseSystemConfiguration(enable: bool);

    /// <p>Sets the application-wide proxy factory to be <i>factory</i>. This function will take ownership of that object and will delete it when necessary.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#setApplicationProxyFactory">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the application-wide proxy factory to be <i>factory</i>. This function will take ownership of that object and will delete it when necessary.</p>
    /// <p>The application-wide proxy is used as a last-resort when all other proxy selection requests returned <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>. For example, <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> objects can have a proxy set with <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProxy">QTcpSocket::setProxy</a>, but if none is set, the proxy factory class set with this function will be queried.</p>
    /// <p>If you set a proxy factory with this function, any application level proxies set with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">QNetworkProxy::setApplicationProxy</a> will be overridden, and <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#usesSystemConfiguration">usesSystemConfiguration</a>() will return <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">QNetworkProxy::setApplicationProxy</a>(), <a href="http://doc.qt.io/qt-5/qabstractsocket.html#proxy">QAbstractSocket::proxy</a>(), and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setProxy">QAbstractSocket::setProxy</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_setApplicationProxyFactory(
        factory: *mut crate::QNetworkProxyFactory,
    );

    /// <p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#proxyForQuery">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_proxyForQuery(
        query: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#systemProxyForQuery">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    /// <p>This function can be used to determine the platform-specific proxy settings. This function will use the libraries provided by the operating system to determine the proxy for a given connection, if such libraries exist. If they don't, this function will just return a <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::NoProxy</a>.</p>
    /// <p>On Windows, this function will use the WinHTTP DLL functions. Despite its name, Microsoft suggests using it for all applications that require network connections, not just HTTP. This will respect the proxy settings set on the registry with the proxycfg.exe tool. If those settings are not found, this function will attempt to obtain Internet Explorer's settings and use them.</p>
    /// <p>On macOS, this function will obtain the proxy settings using the SystemConfiguration framework from Apple. It will apply the FTP, HTTP and HTTPS proxy configurations for queries that contain the protocol tag "ftp", "http" and "https", respectively. If the SOCKS proxy is enabled in that configuration, this function will use the SOCKS server for all queries. If SOCKS isn't enabled, it will use the HTTPS proxy for all TcpSocket and UrlRequest queries.</p>
    /// <p>On other systems, this function will pick up proxy settings from the "http_proxy" environment variable. This variable must be a URL using one of the following schemes: "http", "socks5" or "socks5h".</p>
    /// <a name="limitations"></a>
    /// <h4 id="limitations">Limitations</h4>
    /// <p>These are the limitations for the current version of this function. Future versions of Qt may lift some of the limitations listed here.</p>
    /// <ul>
    /// <li>On macOS, this function will ignore the Proxy Auto Configuration settings, since it cannot execute the associated ECMAScript code.</li>
    /// <li>On Windows platforms, this function may take several seconds to execute depending on the configuration of the user's system.</li>
    /// </ul></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_systemProxyForQuery(
        query: *const crate::QNetworkProxyQuery,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__22(
        debug: *const ::qt_core::QDebug,
        proxy: *const crate::QNetworkProxy,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__23(
        debug: *const ::qt_core::QDebug,
        proxyQuery: *const crate::QNetworkProxyQuery,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_QNetworkReply_metaObject(
        this_ptr: *const crate::QNetworkReply,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkReply_qt_metacast(
        this_ptr: *mut crate::QNetworkReply,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkReply_qt_metacall(
        this_ptr: *mut crate::QNetworkReply,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkReply_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkReply_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Disposes of this reply and frees any resources associated with it. If any network connections are still open, they will be closed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#dtor.QNetworkReply">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Disposes of this reply and frees any resources associated with it. If any network connections are still open, they will be closed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#abort">abort</a>() and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_dQNetworkReply(this_ptr: *mut crate::QNetworkReply);

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#close">QIODevice::close</a>().</p>
    /// <p>Closes this device for reading. Unread data is discarded, but the network resources are not discarded until they are finished. In particular, if any upload is in progress, it will continue until it is done.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qnetworkreply.html#finished">finished</a>() signal is emitted when all operations are over and the network resources are freed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#abort">abort</a>() and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#finished">finished</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_close(this_ptr: *mut crate::QNetworkReply);

    pub fn ctr_qt_network_ffi_QNetworkReply_isSequential(
        this_ptr: *const crate::QNetworkReply,
    ) -> bool;

    /// <p>Returns the size of the read buffer, in bytes.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#readBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the size of the read buffer, in bytes.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setReadBufferSize">setReadBufferSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_readBufferSize(
        this_ptr: *const crate::QNetworkReply,
    ) -> i64;

    /// <p>Sets the size of the read buffer to be <i>size</i> bytes. The read buffer is the buffer that holds data that is being downloaded off the network, before it is read with <a href="http://doc.qt.io/qt-5/qiodevice.html#read">QIODevice::read</a>(). Setting the buffer size to 0 will make the buffer unlimited in size.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#setReadBufferSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of the read buffer to be <i>size</i> bytes. The read buffer is the buffer that holds data that is being downloaded off the network, before it is read with <a href="http://doc.qt.io/qt-5/qiodevice.html#read">QIODevice::read</a>(). Setting the buffer size to 0 will make the buffer unlimited in size.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> will try to stop reading from the network once this buffer is full (i.e., <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">bytesAvailable</a>() returns <i>size</i> or more), thus causing the download to throttle down as well. If the buffer is not limited in size, <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> will try to download as fast as possible from the network.</p>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setReadBufferSize">QAbstractSocket::setReadBufferSize</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> cannot guarantee precision in the read buffer size. That is, <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesAvailable">bytesAvailable</a>() can return more than <i>size</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#readBufferSize">readBufferSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_setReadBufferSize(
        this_ptr: *mut crate::QNetworkReply,
        size: i64,
    );

    /// <p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> that was used to create this <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object. Initially, it is also the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#manager">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> that was used to create this <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object. Initially, it is also the parent object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_manager(
        this_ptr: *const crate::QNetworkReply,
    ) -> *mut crate::QNetworkAccessManager;

    /// <p>Returns the operation that was posted for this reply.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#operation">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the operation that was posted for this reply.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setOperation">setOperation</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_operation(
        this_ptr: *const crate::QNetworkReply,
    ) -> crate::q_network_access_manager::Operation;

    /// <p>Returns the request that was posted for this reply. In special, note that the URL for the request may be different than that of the reply.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#request">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the request that was posted for this reply. In special, note that the URL for the request may be different than that of the reply.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">QNetworkRequest::url</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#url">url</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#setRequest">setRequest</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_request(
        this_ptr: *const crate::QNetworkReply,
    ) -> *mut crate::QNetworkRequest;

    /// <p>Returns the error that was found during the processing of this request. If no error was found, returns <a href="http://doc.qt.io/qt-5/qnetworkreply.html#NetworkError-enum">NoError</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the error that was found during the processing of this request. If no error was found, returns <a href="http://doc.qt.io/qt-5/qnetworkreply.html#NetworkError-enum">NoError</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setError">setError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_error(
        this_ptr: *const crate::QNetworkReply,
    ) -> crate::q_network_reply::NetworkError;

    /// <p>Returns <code>true</code> when the reply has finished or was aborted.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#isFinished">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> when the reply has finished or was aborted.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#isRunning">isRunning</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_isFinished(
        this_ptr: *const crate::QNetworkReply,
    ) -> bool;

    /// <p>Returns <code>true</code> when the request is still processing and the reply has not finished or was aborted yet.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#isRunning">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> when the request is still processing and the reply has not finished or was aborted yet.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#isFinished">isFinished</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_isRunning(
        this_ptr: *const crate::QNetworkReply,
    ) -> bool;

    /// <p>Returns the URL of the content downloaded or uploaded. Note that the URL may be different from that of the original request. If the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::FollowRedirectsAttribute</a> was set in the request, then this function returns the current url that the network API is accessing, i.e the url emitted in the <a href="http://doc.qt.io/qt-5/qnetworkreply.html#redirected">QNetworkReply::redirected</a> signal.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#url">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the URL of the content downloaded or uploaded. Note that the URL may be different from that of the original request. If the <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::FollowRedirectsAttribute</a> was set in the request, then this function returns the current url that the network API is accessing, i.e the url emitted in the <a href="http://doc.qt.io/qt-5/qnetworkreply.html#redirected">QNetworkReply::redirected</a> signal.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#request">request</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#setUrl">setUrl</a>(), <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#url">QNetworkRequest::url</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#redirected">redirected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_url(
        this_ptr: *const crate::QNetworkReply,
    ) -> *mut ::qt_core::QUrl;

    /// <p>Returns the value of the known header <i>header</i>, if that header was sent by the remote server. If the header was not sent, returns an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#header">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value of the known header <i>header</i>, if that header was sent by the remote server. If the header was not sent, returns an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#rawHeader">rawHeader</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#setHeader">setHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#header">QNetworkRequest::header</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_header(
        this_ptr: *const crate::QNetworkReply,
        header: crate::q_network_request::KnownHeaders,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns <code>true</code> if the raw header of name <i>headerName</i> was sent by the remote server</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#hasRawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the raw header of name <i>headerName</i> was sent by the remote server</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#rawHeader">rawHeader</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_hasRawHeader(
        this_ptr: *const crate::QNetworkReply,
        headerName: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>Returns a list of headers fields that were sent by the remote server, in the order that they were sent. Duplicate headers are merged together and take place of the latter duplicate.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#rawHeaderList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of headers fields that were sent by the remote server, in the order that they were sent. Duplicate headers are merged together and take place of the latter duplicate.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_rawHeaderList(
        this_ptr: *const crate::QNetworkReply,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns the raw contents of the header <i>headerName</i> as sent by the remote server. If there is no such header, returns an empty byte array, which may be indistinguishable from an empty header. Use <a href="http://doc.qt.io/qt-5/qnetworkreply.html#hasRawHeader">hasRawHeader</a>() to verify if the server sent such header field.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#rawHeader">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the raw contents of the header <i>headerName</i> as sent by the remote server. If there is no such header, returns an empty byte array, which may be indistinguishable from an empty header. Use <a href="http://doc.qt.io/qt-5/qnetworkreply.html#hasRawHeader">hasRawHeader</a>() to verify if the server sent such header field.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setRawHeader">setRawHeader</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#hasRawHeader">hasRawHeader</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#header">header</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_rawHeader(
        this_ptr: *const crate::QNetworkReply,
        headerName: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns a list of raw header pairs.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#rawHeaderPairs">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list of raw header pairs.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_rawHeaderPairs(
        this_ptr: *const crate::QNetworkReply,
    ) -> *const crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> (type <a href="http://doc.qt.io/qt-5/qmetatype.html#Type-enum">QMetaType::UnknownType</a>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#attribute">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> (type <a href="http://doc.qt.io/qt-5/qmetatype.html#Type-enum">QMetaType::UnknownType</a>).</p>
    /// <p>You can expect the default values listed in <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a> to be applied to the values returned by this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setAttribute">setAttribute</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_attribute(
        this_ptr: *const crate::QNetworkReply,
        code: crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the SSL configuration and state associated with this reply, if SSL was used. It will contain the remote server's certificate, its certificate chain leading to the Certificate Authority as well as the encryption ciphers in use.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the SSL configuration and state associated with this reply, if SSL was used. It will contain the remote server's certificate, its certificate chain leading to the Certificate Authority as well as the encryption ciphers in use.</p>
    /// <p>The peer's certificate and its certificate chain will be known by the time <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">sslErrors</a>() is emitted, if it's emitted.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#setSslConfiguration">setSslConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_sslConfiguration(
        this_ptr: *const crate::QNetworkReply,
    ) -> *mut crate::QSslConfiguration;

    /// <p>Sets the SSL configuration for the network connection associated with this request, if possible, to be that of <i>config</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#setSslConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the SSL configuration for the network connection associated with this request, if possible, to be that of <i>config</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslConfiguration">sslConfiguration</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_setSslConfiguration(
        this_ptr: *mut crate::QNetworkReply,
        configuration: *const crate::QSslConfiguration,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#ignoreSslErrors-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If this function is called, the SSL errors given in <i>errors</i> will be ignored.</p>
    /// <p><b>Note: </b>Because most SSL errors are associated with a certificate, for most of them you must set the expected certificate this SSL error is related to. If, for instance, you want to issue a request to a server that uses a self-signed certificate, consider the following snippet:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">&gt;</span> cert <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">::</span>fromPath(QLatin1String(<span class="string">"server-certificate.pem"</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span> error(<span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">::</span>SelfSignedCertificate<span class="operator">,</span> cert<span class="operator">.</span>at(<span class="number">0</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslerror.html">QSslError</a></span><span class="operator">&gt;</span> expectedSslErrors;
    ///  expectedSslErrors<span class="operator">.</span>append(error);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html#QNetworkReply">QNetworkReply</a></span> <span class="operator">*</span>reply <span class="operator">=</span> manager<span class="operator">.</span>get(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span>(<span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span>(<span class="string">"https://server.tld/index.html"</span>)));
    ///  reply<span class="operator">-</span><span class="operator">&gt;</span>ignoreSslErrors(expectedSslErrors);
    ///  <span class="comment">// here connect signals etc.</span>
    /// </pre>
    /// <p>Multiple calls to this function will replace the list of errors that were passed in previous calls. You can clear the list of errors you want to ignore by calling this function with an empty list.</p>
    /// <p><b>Note: </b>If HTTP Strict Transport Security is enabled for <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>, this function has no effect.</p>
    /// <p>This function was introduced in Qt 4.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslConfiguration">sslConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">sslErrors</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">QSslSocket::ignoreSslErrors</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setStrictTransportSecurityEnabled">QNetworkAccessManager::setStrictTransportSecurityEnabled</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_ignoreSslErrors(
        this_ptr: *mut crate::QNetworkReply,
        errors: *const crate::QListOfQSslError,
    );

    /// <p>Aborts the operation immediately and close down any network connections still open. Uploads still in progress are also aborted.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#abort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Aborts the operation immediately and close down any network connections still open. Uploads still in progress are also aborted.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qnetworkreply.html#finished">finished</a>() signal will also be emitted.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#close">close</a>() and <a href="http://doc.qt.io/qt-5/qnetworkreply.html#finished">finished</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_abort(this_ptr: *mut crate::QNetworkReply);

    /// <p>If this function is called, SSL errors related to network connection will be ignored, including certificate validation errors.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkreply.html#ignoreSslErrors">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If this function is called, SSL errors related to network connection will be ignored, including certificate validation errors.</p>
    /// <p><b>Warning:</b> Be sure to always let the user inspect the errors reported by the <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">sslErrors</a>() signal, and only call this method upon confirmation from the user that proceeding is ok. If there are unexpected errors, the reply should be aborted. Calling this method without inspecting the actual errors will most likely pose a security risk for your application. Use it with great care!</p>
    /// <p>This function can be called from the slot connected to the <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">sslErrors</a>() signal, which indicates which errors were found.</p>
    /// <p><b>Note: </b>If HTTP Strict Transport Security is enabled for <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>, this function has no effect.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslConfiguration">sslConfiguration</a>(), <a href="http://doc.qt.io/qt-5/qnetworkreply.html#sslErrors">sslErrors</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">QSslSocket::ignoreSslErrors</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkReply_ignoreSslErrors1(this_ptr: *mut crate::QNetworkReply);

    pub fn ctr_qt_network_ffi_QNetworkSession_metaObject(
        this_ptr: *const crate::QNetworkSession,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QNetworkSession_qt_metacast(
        this_ptr: *mut crate::QNetworkSession,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QNetworkSession_qt_metacall(
        this_ptr: *mut crate::QNetworkSession,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QNetworkSession_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QNetworkSession_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a session based on <i>connectionConfig</i> with the given <i>parent</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#QNetworkSession">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a session based on <i>connectionConfig</i> with the given <i>parent</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_QNetworkSession(
        connConfig: *const crate::QNetworkConfiguration,
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkSession;

    /// <p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworksession.html" class="obsolete">QNetworkSession</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#dtor.QNetworkSession">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Frees the resources associated with the <a href="http://doc.qt.io/qt-5/qnetworksession.html" class="obsolete">QNetworkSession</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_dQNetworkSession(
        this_ptr: *mut crate::QNetworkSession,
    );

    /// <p>Returns <code>true</code> if this session is open. If the number of all open sessions is greater than zero the underlying network interface will remain connected/up.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#isOpen">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this session is open. If the number of all open sessions is greater than zero the underlying network interface will remain connected/up.</p>
    /// <p>The session can be controlled via <a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_isOpen(
        this_ptr: *const crate::QNetworkSession,
    ) -> bool;

    /// <p>Returns the QNetworkConfiguration that this network session object is based on.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#configuration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the QNetworkConfiguration that this network session object is based on.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_configuration(
        this_ptr: *const crate::QNetworkSession,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns the network interface that is used by this session.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#interface">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the network interface that is used by this session.</p>
    /// <p>This function only returns a valid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> when this session is <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Connected</a>.</p>
    /// <p>The returned interface may change as a result of a roaming process.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_interface(
        this_ptr: *const crate::QNetworkSession,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns the state of the session.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#state">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the state of the session.</p>
    /// <p>If the session is based on a single access point configuration the state of the session is the same as the state of the associated network interface. Therefore a network session object can be used to monitor network interfaces.</p>
    /// <p>A <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">QNetworkConfiguration::ServiceNetwork</a> based session summarizes the state of all its children and therefore returns the <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Connected</a> state if at least one of the service network's <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#children">children()</a> configurations is active.</p>
    /// <p>Note that it is not required to hold an open session in order to obtain the network interface state. A connected but closed session may be used to monitor network interfaces whereas an open and connected session object may prevent the network interface from being shut down.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#stateChanged">stateChanged</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_state(
        this_ptr: *const crate::QNetworkSession,
    ) -> crate::q_network_session::State;

    /// <p>Returns the type of error that last occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of error that last occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_error(
        this_ptr: *const crate::QNetworkSession,
    ) -> crate::q_network_session::SessionError;

    /// <p>Returns a human-readable description of the last device error that occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a human-readable description of the last device error that occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_errorString(
        this_ptr: *const crate::QNetworkSession,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the value for property <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#sessionProperty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value for property <i>key</i>.</p>
    /// <p>A network session can have properties attached which may describe the session in more details. This function can be used to gain access to those properties.</p>
    /// <p>The following property keys are guaranteed to be specified on all platforms:</p>
    /// <div class="table"><table class="generic" width="80%">
    ///  <thead><tr class="qt-style"><th>Key</th><th>Description</th></tr></thead>
    /// <tbody><tr valign="top" class="odd"><td>ActiveConfiguration</td><td>If the session <a href="http://doc.qt.io/qt-5/qnetworksession.html#isOpen">isOpen</a>() this property returns the identifier of the QNetworkConfiguration that is used by this session; otherwise an empty string.<p>The main purpose of this key is to determine which Internet access point is used if the session is based on a <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">ServiceNetwork</a>. The following code snippet highlights the difference:</p>
    /// <pre class="cpp">     <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html">QNetworkConfigurationManager</a></span> mgr;
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span> ap <span class="operator">=</span> mgr<span class="operator">.</span>defaultConfiguration();
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qnetworksession.html#QNetworkSession">QNetworkSession</a></span> <span class="operator">*</span>session <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworksession.html#QNetworkSession">QNetworkSession</a></span>(ap);
    /// &#32;    <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span> <span class="comment">//code activates session</span>
    ///
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> ident <span class="operator">=</span> session<span class="operator">-</span><span class="operator">&gt;</span>sessionProperty(<span class="string">"ActiveConfiguration"</span>)<span class="operator">.</span>toString();
    /// &#32;    <span class="keyword">if</span> ( ap<span class="operator">.</span>type() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span><span class="operator">::</span>ServiceNetwork ) {
    /// &#32;   &#32;    Q_ASSERT( ap<span class="operator">.</span>identifier() <span class="operator">!</span><span class="operator">=</span> ident );
    /// &#32;   &#32;    Q_ASSERT( ap<span class="operator">.</span>children()<span class="operator">.</span>contains( mgr<span class="operator">.</span>configurationFromIdentifier(ident) ) );
    /// &#32;    } <span class="keyword">else</span> <span class="keyword">if</span> ( ap<span class="operator">.</span>type() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a></span><span class="operator">::</span>InternetAccessPoint ) {
    /// &#32;   &#32;    Q_ASSERT( ap<span class="operator">.</span>identifier() <span class="operator">=</span><span class="operator">=</span> ident );
    /// &#32;    }
    /// &#32;   &#32;   &#32;   &#32;    \endcode
    /// </pre>
    /// </td></tr>
    /// <tr valign="top" class="even"><td>UserChoiceConfiguration</td><td>If the session <a href="http://doc.qt.io/qt-5/qnetworksession.html#isOpen">isOpen</a>() and is bound to a QNetworkConfiguration of type UserChoice, this property returns the identifier of the QNetworkConfiguration that the configuration resolved to when <a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() was called; otherwise an empty string.<p>The purpose of this key is to determine the real QNetworkConfiguration that the session is using. This key is different from <i>ActiveConfiguration</i> in that this key may return an identifier for either a <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">service network</a> or a <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">Internet access points</a> configurations, whereas <i>ActiveConfiguration</i> always returns identifiers to <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#Type-enum">Internet access points</a> configurations.</p>
    /// </td></tr>
    /// <tr valign="top" class="odd"><td>ConnectInBackground</td><td>Setting this property to <i>true</i> before calling <a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() implies that the connection attempt is made but if no connection can be established, the user is not connsulted and asked to select a suitable connection. This property is not set by default and support for it depends on the platform.</td></tr>
    /// <tr valign="top" class="even"><td>AutoCloseSessionTimeout</td><td>If the session requires polling to keep its state up to date, this property holds the timeout in milliseconds before the session will automatically close. If the value of this property is -1 the session will not automatically close. This property is set to -1 by default.<p>The purpose of this property is to minimize resource use on platforms that use polling to update the state of the session. Applications can set the value of this property to the desired timeout before the session is closed. In response to the <a href="http://doc.qt.io/qt-5/qnetworksession.html#closed">closed</a>() signal the network session should be deleted to ensure that all polling is stopped. The session can then be recreated once it is required again. This property has no effect for sessions that do not require polling.</p>
    /// </td></tr>
    /// </tbody></table></div>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#setSessionProperty">setSessionProperty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_sessionProperty(
        this_ptr: *const crate::QNetworkSession,
        key: *const ::qt_core::QString,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Sets the property <i>value</i> on the session. The property is identified using <i>key</i>. Removing an already set property can be achieved by passing an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#setSessionProperty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the property <i>value</i> on the session. The property is identified using <i>key</i>. Removing an already set property can be achieved by passing an invalid <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    /// <p>Note that the <i>UserChoiceConfiguration</i> and <i>ActiveConfiguration</i> properties are read only and cannot be changed using this method.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#sessionProperty">sessionProperty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_setSessionProperty(
        this_ptr: *mut crate::QNetworkSession,
        key: *const ::qt_core::QString,
        value: *const ::qt_core::QVariant,
    );

    /// <p>Returns the amount of data sent in bytes; otherwise 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#bytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the amount of data sent in bytes; otherwise 0.</p>
    /// <p>This field value includes the usage across all open network sessions which use the same network interface.</p>
    /// <p>If the session is based on a service network configuration the number of sent bytes across all active member configurations are returned.</p>
    /// <p>This function may not always be supported on all platforms and returns 0. The platform capability can be detected via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#Capability-enum">QNetworkConfigurationManager::DataStatistics</a>.</p>
    /// <p><b>Note: </b>On some platforms this function may run the main event loop.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_bytesWritten(
        this_ptr: *const crate::QNetworkSession,
    ) -> u64;

    /// <p>Returns the amount of data received in bytes; otherwise 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#bytesReceived">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the amount of data received in bytes; otherwise 0.</p>
    /// <p>This field value includes the usage across all open network sessions which use the same network interface.</p>
    /// <p>If the session is based on a service network configuration the number of sent bytes across all active member configurations are returned.</p>
    /// <p>This function may not always be supported on all platforms and returns 0. The platform capability can be detected via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#Capability-enum">QNetworkConfigurationManager::DataStatistics</a>.</p>
    /// <p><b>Note: </b>On some platforms this function may run the main event loop.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_bytesReceived(
        this_ptr: *const crate::QNetworkSession,
    ) -> u64;

    /// <p>Returns the number of seconds that the session has been active.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#activeTime">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of seconds that the session has been active.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_activeTime(
        this_ptr: *const crate::QNetworkSession,
    ) -> u64;

    /// <p>Returns the network usage policies currently in force by the system.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#usagePolicies">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the network usage policies currently in force by the system.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_usagePolicies(
        this_ptr: *const crate::QNetworkSession,
    ) -> ::std::os::raw::c_int;

    /// <p>Waits until the session has been opened, up to <i>msecs</i> milliseconds. If the session has been opened, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#waitForOpened">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the session has been opened, up to <i>msecs</i> milliseconds. If the session has been opened, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for the session to be opened:</p>
    /// <pre class="cpp">     session<span class="operator">-</span><span class="operator">&gt;</span>open();
    /// &#32;    <span class="keyword">if</span> (session<span class="operator">-</span><span class="operator">&gt;</span>waitForOpened(<span class="number">1000</span>))
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Open!"</span>);
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_waitForOpened(
        this_ptr: *mut crate::QNetworkSession,
        msecs: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Creates an open session which increases the session counter on the underlying network interface. The system will not terminate a network interface until the session reference counter reaches zero. Therefore an open session allows an application to register its use of the interface.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#open">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates an open session which increases the session counter on the underlying network interface. The system will not terminate a network interface until the session reference counter reaches zero. Therefore an open session allows an application to register its use of the interface.</p>
    /// <p>As a result of calling open() the interface will be started if it is not connected/up yet. Some platforms may not provide support for out-of-process sessions. On such platforms the session counter ignores any sessions held by another process. The platform capabilities can be detected via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#capabilities">QNetworkConfigurationManager::capabilities</a>().</p>
    /// <p>Note that this call is asynchronous. Depending on the outcome of this call the results can be enquired by connecting to the <a href="http://doc.qt.io/qt-5/qnetworksession.html#stateChanged">stateChanged</a>(), <a href="http://doc.qt.io/qt-5/qnetworksession.html#opened">opened</a>() or <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() signals.</p>
    /// <p>It is not a requirement to open a session in order to monitor the underlying network interface.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#close">close</a>(), <a href="http://doc.qt.io/qt-5/qnetworksession.html#stop">stop</a>(), and <a href="http://doc.qt.io/qt-5/qnetworksession.html#isOpen">isOpen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_open(this_ptr: *mut crate::QNetworkSession);

    /// <p>Decreases the session counter on the associated network configuration. If the session counter reaches zero the active network interface is shut down. This also means that <a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>() will only change from <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Connected</a> to <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Disconnected</a> if the current session was the last open session.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Decreases the session counter on the associated network configuration. If the session counter reaches zero the active network interface is shut down. This also means that <a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>() will only change from <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Connected</a> to <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Disconnected</a> if the current session was the last open session.</p>
    /// <p>If the platform does not support out-of-process sessions calling this function does not stop the interface. In this case <a href="http://doc.qt.io/qt-5/qnetworksession.html#stop">stop</a>() has to be used to force a shut down. The platform capabilities can be detected via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#capabilities">QNetworkConfigurationManager::capabilities</a>().</p>
    /// <p>Note that this call is asynchronous. Depending on the outcome of this call the results can be enquired by connecting to the <a href="http://doc.qt.io/qt-5/qnetworksession.html#stateChanged">stateChanged</a>(), <a href="http://doc.qt.io/qt-5/qnetworksession.html#opened">opened</a>() or <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() signals.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>(), <a href="http://doc.qt.io/qt-5/qnetworksession.html#stop">stop</a>(), and <a href="http://doc.qt.io/qt-5/qnetworksession.html#isOpen">isOpen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_close(this_ptr: *mut crate::QNetworkSession);

    /// <p>Invalidates all open sessions against the network interface and therefore stops the underlying network interface. This function always changes the session's <a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>() flag to <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Disconnected</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#stop">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Invalidates all open sessions against the network interface and therefore stops the underlying network interface. This function always changes the session's <a href="http://doc.qt.io/qt-5/qnetworksession.html#state">state</a>() flag to <a href="http://doc.qt.io/qt-5/qnetworksession.html#State-enum">Disconnected</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_stop(this_ptr: *mut crate::QNetworkSession);

    /// <p>Instructs the session to roam to the new access point. The old access point remains active until the application calls <a href="http://doc.qt.io/qt-5/qnetworksession.html#accept">accept</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#migrate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Instructs the session to roam to the new access point. The old access point remains active until the application calls <a href="http://doc.qt.io/qt-5/qnetworksession.html#accept">accept</a>().</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qnetworksession.html#newConfigurationActivated">newConfigurationActivated</a>() signal is emitted once roaming has been completed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#accept">accept</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_migrate(this_ptr: *mut crate::QNetworkSession);

    /// <p>This function indicates that the application does not wish to roam the session.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#ignore">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function indicates that the application does not wish to roam the session.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#migrate">migrate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_ignore(this_ptr: *mut crate::QNetworkSession);

    /// <p>Instructs the session to permanently accept the new access point. Once this function has been called the session may not return to the old access point.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#accept">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Instructs the session to permanently accept the new access point. Once this function has been called the session may not return to the old access point.</p>
    /// <p>The old access point may be closed in the process if there are no other network sessions for it. Therefore any open socket that still uses the old access point may become unusable and should be closed before completing the migration.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_accept(this_ptr: *mut crate::QNetworkSession);

    /// <p>The new access point is not suitable for the application. By calling this function the session returns to the previous access point/configuration. This action may invalidate any socket that has been created via the not desired access point.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#reject">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The new access point is not suitable for the application. By calling this function the session returns to the previous access point/configuration. This action may invalidate any socket that has been created via the not desired access point.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#accept">accept</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_reject(this_ptr: *mut crate::QNetworkSession);

    /// <p>Returns the hash value for the <i>response</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>response</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_qHash3(
        response: *const crate::QOcspResponse,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Creates a new response with status QOcspCertificateStatus::Unknown and revocation reason QOcspRevocationReason::None.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#QOcspResponse">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a new response with status QOcspCertificateStatus::Unknown and revocation reason QOcspRevocationReason::None.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qocspresponse.html#QOcspCertificateStatus-enum">QOcspCertificateStatus</a>.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_QOcspResponse() -> *mut crate::QOcspResponse;

    /// <p>Copy-constructs a QOcspResponse instance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#QOcspResponse-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copy-constructs a QOcspResponse instance.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_QOcspResponse1(
        other: *const crate::QOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Destroys the response.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#dtor.QOcspResponse">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the response.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_dQOcspResponse(this_ptr: *mut crate::QOcspResponse);

    /// <p>Copy-assigns and returns a reference to this response.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copy-assigns and returns a reference to this response.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_operator_(
        this_ptr: *mut crate::QOcspResponse,
        other: *const crate::QOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns the certificate status.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#certificateStatus">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the certificate status.</p>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qocspresponse.html#QOcspCertificateStatus-enum">QOcspCertificateStatus</a>.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_certificateStatus(
        this_ptr: *const crate::QOcspResponse,
    ) -> crate::QOcspCertificateStatus;

    /// <p>Returns the reason for revocation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#revocationReason">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the reason for revocation.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_revocationReason(
        this_ptr: *const crate::QOcspResponse,
    ) -> crate::QOcspRevocationReason;

    /// <p>This function returns a certificate used to sign OCSP response.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#responder">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns a certificate used to sign OCSP response.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_responder(
        this_ptr: *const crate::QOcspResponse,
    ) -> *mut crate::QSslCertificate;

    /// <p>This function returns a certificate, for which this response was issued.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#subject">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function returns a certificate, for which this response was issued.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_subject(
        this_ptr: *const crate::QOcspResponse,
    ) -> *mut crate::QSslCertificate;

    /// <p>Swaps this response with <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qocspresponse.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this response with <i>other</i>.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_QOcspResponse_swap(
        this_ptr: *mut crate::QOcspResponse,
        other: *mut crate::QOcspResponse,
    );

    pub fn ctr_qt_network_ffi_swap23(
        value1: *mut crate::QOcspResponse,
        value2: *mut crate::QOcspResponse,
    );

    /// <p>Returns a hash computed using the PBKDF1-algorithm as defined in <a href="https://tools.ietf.org/html/rfc8018#section-5.1">RFC 8018</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpassworddigestor.html#deriveKeyPbkdf1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a hash computed using the PBKDF1-algorithm as defined in <a href="https://tools.ietf.org/html/rfc8018#section-5.1">RFC 8018</a>.</p>
    /// <p>The function takes the <i>data</i> and <i>salt</i>, and then hashes it repeatedly for <i>iterations</i> iterations using the specified hash <i>algorithm</i>. If the resulting hash is longer than <i>dkLen</i> then it is truncated before it is returned.</p>
    /// <p>This function only supports SHA-1 and MD5! The max output size is 160 bits (20 bytes) when using SHA-1, or 128 bits (16 bytes) when using MD5. Specifying a value for <i>dkLen</i> which is greater than this results in a warning and an empty <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> is returned. To programmatically check this limit you can use <a href="http://doc.qt.io/qt-5/qcryptographichash.html#hashLength">QCryptographicHash::hashLength</a>. Furthermore: the <i>salt</i> must always be 8 bytes long!</p>
    /// <p><b>Note: </b>This function is provided for use with legacy applications and all new applications are recommended to use <a href="http://doc.qt.io/qt-5/qpassworddigestor.html#deriveKeyPbkdf2">PBKDF2</a>.</p>
    /// <p>This function was introduced in Qt 5.12.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qpassworddigestor.html#deriveKeyPbkdf2">deriveKeyPbkdf2</a>, <a href="http://doc.qt.io/qt-5/qcryptographichash.html">QCryptographicHash</a>, and <a href="http://doc.qt.io/qt-5/qcryptographichash.html#hashLength">QCryptographicHash::hashLength</a>.</p></div>
    pub fn ctr_qt_network_ffi_QPasswordDigestor_deriveKeyPbkdf1(
        algorithm: ::qt_core::q_cryptographic_hash::Algorithm,
        password: *const ::qt_core::QByteArray,
        salt: *const ::qt_core::QByteArray,
        iterations: ::std::os::raw::c_int,
        dkLen: u64,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Derive a key using the PBKDF2-algorithm as defined in <a href="https://tools.ietf.org/html/rfc8018#section-5.2">RFC 8018</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpassworddigestor.html#deriveKeyPbkdf2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Derive a key using the PBKDF2-algorithm as defined in <a href="https://tools.ietf.org/html/rfc8018#section-5.2">RFC 8018</a>.</p>
    /// <p>This function takes the <i>data</i> and <i>salt</i>, and then applies HMAC-X, where the X is <i>algorithm</i>, repeatedly. It internally concatenates intermediate results to the final output until at least <i>dkLen</i> amount of bytes have been computed and it will execute HMAC-X <i>iterations</i> times each time a concatenation is required. The total number of times it will execute HMAC-X depends on <i>iterations</i>, <i>dkLen</i> and <i>algorithm</i> and can be calculated as <code>iterations * ceil(dkLen / QCryptographicHash::hashLength(algorithm))</code>.</p>
    /// <p>This function was introduced in Qt 5.12.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qpassworddigestor.html#deriveKeyPbkdf1">deriveKeyPbkdf1</a>, <a href="http://doc.qt.io/qt-5/qmessageauthenticationcode.html">QMessageAuthenticationCode</a>, and <a href="http://doc.qt.io/qt-5/qcryptographichash.html">QCryptographicHash</a>.</p></div>
    pub fn ctr_qt_network_ffi_QPasswordDigestor_deriveKeyPbkdf2(
        algorithm: ::qt_core::q_cryptographic_hash::Algorithm,
        password: *const ::qt_core::QByteArray,
        salt: *const ::qt_core::QByteArray,
        iterations: ::std::os::raw::c_int,
        dkLen: u64,
    ) -> *mut ::qt_core::QByteArray;

    pub fn ctr_qt_network_ffi_QTcpServer_metaObject(
        this_ptr: *const crate::QTcpServer,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QTcpServer_qt_metacast(
        this_ptr: *mut crate::QTcpServer,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QTcpServer_qt_metacall(
        this_ptr: *mut crate::QTcpServer,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QTcpServer_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QTcpServer_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QTcpServer object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#QTcpServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QTcpServer object.</p>
    /// <p><i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#setSocketDescriptor">setSocketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_QTcpServer(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpServer;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> object. If the server is listening for connections, the socket is automatically closed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#dtor.QTcpServer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> object. If the server is listening for connections, the socket is automatically closed.</p>
    /// <p>Any client <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>s that are still connected must either disconnect or be reparented before the server is deleted.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_dQTcpServer(this_ptr: *mut crate::QTcpServer);

    /// <p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    /// <p>Returns <code>true</code> on success; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">isListening</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_listen(
        this_ptr: *mut crate::QTcpServer,
        address: *const crate::QHostAddress,
        port: u16,
    ) -> bool;

    /// <p>Closes the server. The server will no longer listen for incoming connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#close">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Closes the server. The server will no longer listen for incoming connections.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_close(this_ptr: *mut crate::QTcpServer);

    /// <p>Returns <code>true</code> if the server is currently listening for incoming connections; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the server is currently listening for incoming connections; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_isListening(this_ptr: *const crate::QTcpServer) -> bool;

    /// <p>Sets the maximum number of pending accepted connections to <i>numConnections</i>. <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> will accept no more than <i>numConnections</i> incoming connections before <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>() is called. By default, the limit is 30 pending connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#setMaxPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the maximum number of pending accepted connections to <i>numConnections</i>. <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> will accept no more than <i>numConnections</i> incoming connections before <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>() is called. By default, the limit is 30 pending connections.</p>
    /// <p>Clients may still able to connect after the server has reached its maximum number of pending connections (i.e., <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> can still emit the connected() signal). <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> will stop accepting the new connections, but the operating system may still keep them in queue.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#maxPendingConnections">maxPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_setMaxPendingConnections(
        this_ptr: *mut crate::QTcpServer,
        numConnections: ::std::os::raw::c_int,
    );

    /// <p>Returns the maximum number of pending accepted connections. The default is 30.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#maxPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of pending accepted connections. The default is 30.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#setMaxPendingConnections">setMaxPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_maxPendingConnections(
        this_ptr: *const crate::QTcpServer,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the server's port if the server is listening for connections; otherwise returns 0.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverPort">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the server's port if the server is listening for connections; otherwise returns 0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#serverAddress">serverAddress</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_serverPort(this_ptr: *const crate::QTcpServer) -> u16;

    /// <p>Returns the server's address if the server is listening for connections; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverAddress">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the server's address if the server is listening for connections; otherwise returns <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Null</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#serverPort">serverPort</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_serverAddress(
        this_ptr: *const crate::QTcpServer,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the native socket descriptor the server uses to listen for incoming instructions, or -1 if the server is not listening.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#socketDescriptor">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the native socket descriptor the server uses to listen for incoming instructions, or -1 if the server is not listening.</p>
    /// <p>If the server is using <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, the returned descriptor may not be usable with native socket functions.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#setSocketDescriptor">setSocketDescriptor</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">isListening</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_socketDescriptor(
        this_ptr: *const crate::QTcpServer,
    ) -> isize;

    /// <p>Sets the socket descriptor this server should use when listening for incoming connections to <i>socketDescriptor</i>. Returns <code>true</code> if the socket is set successfully; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#setSocketDescriptor">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the socket descriptor this server should use when listening for incoming connections to <i>socketDescriptor</i>. Returns <code>true</code> if the socket is set successfully; otherwise returns <code>false</code>.</p>
    /// <p>The socket is assumed to be in listening state.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#socketDescriptor">socketDescriptor</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">isListening</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_setSocketDescriptor(
        this_ptr: *mut crate::QTcpServer,
        socketDescriptor: isize,
    ) -> bool;

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    /// <p>This is a blocking function call. Its use is disadvised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qtcpserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_waitForNewConnection(
        this_ptr: *mut crate::QTcpServer,
        msec: ::std::os::raw::c_int,
        timedOut: *mut bool,
    ) -> bool;

    /// <p>Returns <code>true</code> if the server has a pending connection; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the server has a pending connection; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#setMaxPendingConnections">setMaxPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_hasPendingConnections(
        this_ptr: *const crate::QTcpServer,
    ) -> bool;

    /// <p>Returns the next pending connection as a connected <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the next pending connection as a connected <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> object.</p>
    /// <p>The socket is created as a child of the server, which means that it is automatically deleted when the <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a> object is destroyed. It is still a good idea to delete the object explicitly when you are done with it, to avoid wasting memory.</p>
    /// <p><code>nullptr</code> is returned if this function is called when there are no pending connections.</p>
    /// <p><b>Note: </b>The returned <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> object cannot be used from another thread. If you want to use an incoming connection from another thread, you need to override <a href="http://doc.qt.io/qt-5/qtcpserver.html#incomingConnection">incomingConnection</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_nextPendingConnection(
        this_ptr: *mut crate::QTcpServer,
    ) -> *mut crate::QTcpSocket;

    /// <p>Returns an error code for the last error that occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverError">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an error code for the last error that occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#errorString">errorString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_serverError(
        this_ptr: *const crate::QTcpServer,
    ) -> crate::q_abstract_socket::SocketError;

    /// <p>Returns a human readable description of the last error that occurred.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a human readable description of the last error that occurred.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#serverError">serverError</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_errorString(
        this_ptr: *const crate::QTcpServer,
    ) -> *mut ::qt_core::QString;

    /// <p>Pauses accepting new connections. Queued connections will remain in queue.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#pauseAccepting">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Pauses accepting new connections. Queued connections will remain in queue.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#resumeAccepting">resumeAccepting</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_pauseAccepting(this_ptr: *mut crate::QTcpServer);

    /// <p>Resumes accepting new connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#resumeAccepting">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Resumes accepting new connections.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#pauseAccepting">pauseAccepting</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_resumeAccepting(this_ptr: *mut crate::QTcpServer);

    /// <p>Sets the explicit network proxy for this socket to <i>networkProxy</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#setProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the explicit network proxy for this socket to <i>networkProxy</i>.</p>
    /// <p>To disable the use of a proxy for this socket, use the <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::NoProxy</a> proxy type:</p>
    /// <pre class="cpp"> server<span class="operator">-</span><span class="operator">&gt;</span>setProxy(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a></span><span class="operator">::</span>NoProxy);
    /// </pre>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#proxy">proxy</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>.</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_setProxy(
        this_ptr: *mut crate::QTcpServer,
        networkProxy: *const crate::QNetworkProxy,
    );

    /// <p>Returns the network proxy for this socket. By default <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> is used.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#proxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the network proxy for this socket. By default <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a> is used.</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#setProxy">setProxy</a>() and <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>.</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_proxy(
        this_ptr: *const crate::QTcpServer,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Constructs a QSslCertificateExtension.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#QSslCertificateExtension">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCertificateExtension.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_QSslCertificateExtension(
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#QSslCertificateExtension-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_QSslCertificateExtension1(
        other: *const crate::QSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    pub fn ctr_qt_network_ffi_QSslCertificateExtension_operator_1(
        this_ptr: *mut crate::QSslCertificateExtension,
        other: *const crate::QSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Destroys the extension.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#dtor.QSslCertificateExtension">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the extension.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_dQSslCertificateExtension(
        this_ptr: *mut crate::QSslCertificateExtension,
    );

    /// <p>Swaps this certificate extension instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this certificate extension instance with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_swap(
        this_ptr: *mut crate::QSslCertificateExtension,
        other: *mut crate::QSslCertificateExtension,
    );

    /// <p>Returns the ASN.1 OID of this extension.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#oid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the ASN.1 OID of this extension.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_oid(
        this_ptr: *const crate::QSslCertificateExtension,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the name of the extension. If no name is known for the extension then the OID will be returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the extension. If no name is known for the extension then the OID will be returned.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_name(
        this_ptr: *const crate::QSslCertificateExtension,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the value of the extension. The structure of the value returned depends on the extension type.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value of the extension. The structure of the value returned depends on the extension type.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_value(
        this_ptr: *const crate::QSslCertificateExtension,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the criticality of the extension.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#isCritical">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the criticality of the extension.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_isCritical(
        this_ptr: *const crate::QSslCertificateExtension,
    ) -> bool;

    /// <p>Returns the true if this extension is supported. In this case, supported simply means that the structure of the <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> returned by the <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#value">value</a>() accessor will remain unchanged between versions. Unsupported extensions can be freely used, however there is no guarantee that the returned data will have the same structure between versions.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#isSupported">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the true if this extension is supported. In this case, supported simply means that the structure of the <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a> returned by the <a href="http://doc.qt.io/qt-5/qsslcertificateextension.html#value">value</a>() accessor will remain unchanged between versions. Unsupported extensions can be freely used, however there is no guarantee that the returned data will have the same structure between versions.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificateExtension_isSupported(
        this_ptr: *const crate::QSslCertificateExtension,
    ) -> bool;

    pub fn ctr_qt_network_ffi_swap24(
        value1: *mut crate::QSslCertificateExtension,
        value2: *mut crate::QSslCertificateExtension,
    );

    /// <p>Constructs an empty QSslCipher object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#QSslCipher">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty QSslCipher object.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_QSslCipher() -> *mut crate::QSslCipher;

    /// <p>Constructs a QSslCipher object for the cipher determined by <i>name</i>. The constructor accepts only supported ciphers (i.e., the <i>name</i> must identify a cipher in the list of ciphers returned by QSslSocket::supportedCiphers()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#QSslCipher-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCipher object for the cipher determined by <i>name</i>. The constructor accepts only supported ciphers (i.e., the <i>name</i> must identify a cipher in the list of ciphers returned by QSslSocket::supportedCiphers()).</p>
    /// <p>You can call <a href="http://doc.qt.io/qt-5/qsslcipher.html#isNull">isNull</a>() after construction to check if <i>name</i> correctly identified a supported cipher.</p>
    /// <p>This function was introduced in Qt 5.3.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_QSslCipher1(
        name: *const ::qt_core::QString,
    ) -> *mut crate::QSslCipher;

    /// <p>Constructs a QSslCipher object for the cipher determined by <i>name</i> and <i>protocol</i>. The constructor accepts only supported ciphers (i.e., the <i>name</i> and <i>protocol</i> must identify a cipher in the list of ciphers returned by QSslSocket::supportedCiphers()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#QSslCipher-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCipher object for the cipher determined by <i>name</i> and <i>protocol</i>. The constructor accepts only supported ciphers (i.e., the <i>name</i> and <i>protocol</i> must identify a cipher in the list of ciphers returned by QSslSocket::supportedCiphers()).</p>
    /// <p>You can call <a href="http://doc.qt.io/qt-5/qsslcipher.html#isNull">isNull</a>() after construction to check if <i>name</i> and <i>protocol</i> correctly identified a supported cipher.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_QSslCipher2(
        name: *const ::qt_core::QString,
        protocol: crate::q_ssl::SslProtocol,
    ) -> *mut crate::QSslCipher;

    /// <p>Constructs an identical copy of the <i>other</i> cipher.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#QSslCipher-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an identical copy of the <i>other</i> cipher.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_QSslCipher3(
        other: *const crate::QSslCipher,
    ) -> *mut crate::QSslCipher;

    pub fn ctr_qt_network_ffi_QSslCipher_operator_1(
        this_ptr: *mut crate::QSslCipher,
        other: *const crate::QSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslcipher.html">QSslCipher</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#dtor.QSslCipher">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslcipher.html">QSslCipher</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_dQSslCipher(this_ptr: *mut crate::QSslCipher);

    /// <p>Swaps this cipher instance with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this cipher instance with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_swap(
        this_ptr: *mut crate::QSslCipher,
        other: *mut crate::QSslCipher,
    );

    /// <p>Returns <code>true</code> if this cipher is the same as <i>other</i>; otherwise, false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this cipher is the same as <i>other</i>; otherwise, false is returned.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_operator__(
        this_ptr: *const crate::QSslCipher,
        other: *const crate::QSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if this is a null cipher; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a null cipher; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_isNull(this_ptr: *const crate::QSslCipher) -> bool;

    /// <p>Returns the name of the cipher, or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if this is a null cipher.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#name">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the name of the cipher, or an empty <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> if this is a null cipher.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcipher.html#isNull">isNull</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_name(
        this_ptr: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the number of bits supported by the cipher.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#supportedBits">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of bits supported by the cipher.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcipher.html#usedBits">usedBits</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_supportedBits(
        this_ptr: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of bits used by the cipher.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#usedBits">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of bits used by the cipher.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcipher.html#supportedBits">supportedBits</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_usedBits(
        this_ptr: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the cipher's key exchange method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#keyExchangeMethod">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cipher's key exchange method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_keyExchangeMethod(
        this_ptr: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the cipher's authentication method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#authenticationMethod">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cipher's authentication method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_authenticationMethod(
        this_ptr: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the cipher's encryption method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#encryptionMethod">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cipher's encryption method as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_encryptionMethod(
        this_ptr: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the cipher's protocol as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#protocolString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cipher's protocol as a <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcipher.html#protocol">protocol</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_protocolString(
        this_ptr: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the cipher's protocol type, or <a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::UnknownProtocol</a> if <a href="http://doc.qt.io/qt-5/qsslcipher.html">QSslCipher</a> is unable to determine the protocol (<a href="http://doc.qt.io/qt-5/qsslcipher.html#protocolString">protocolString</a>() may contain more information).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcipher.html#protocol">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the cipher's protocol type, or <a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::UnknownProtocol</a> if <a href="http://doc.qt.io/qt-5/qsslcipher.html">QSslCipher</a> is unable to determine the protocol (<a href="http://doc.qt.io/qt-5/qsslcipher.html#protocolString">protocolString</a>() may contain more information).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcipher.html#protocolString">protocolString</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCipher_protocol(
        this_ptr: *const crate::QSslCipher,
    ) -> crate::q_ssl::SslProtocol;

    pub fn ctr_qt_network_ffi_swap25(
        value1: *mut crate::QSslCipher,
        value2: *mut crate::QSslCipher,
    );

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__25(
        debug: *const ::qt_core::QDebug,
        cipher: *const crate::QSslCipher,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_qHash4(
        dhparam: *const crate::QSslDiffieHellmanParameters,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__26(
        debug: *const ::qt_core::QDebug,
        dhparams: *const crate::QSslDiffieHellmanParameters,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_operator__27(
        lhs: *const crate::QSslDiffieHellmanParameters,
        rhs: *const crate::QSslDiffieHellmanParameters,
    ) -> bool;

    /// <p>Returns the default <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> used by <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#defaultParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the default <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> used by <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>.</p>
    /// <p>This is currently the 1024-bit MODP group from RFC 2459, also known as the Second Oakley Group.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_defaultParameters(
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Constructs an empty QSslDiffieHellmanParameters instance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#QSslDiffieHellmanParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty QSslDiffieHellmanParameters instance.</p>
    /// <p>If an empty QSslDiffieHellmanParameters instance is set on a <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> object, Diffie-Hellman negotiation will be disabled.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_QSslDiffieHellmanParameters(
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Constructs an identical copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#QSslDiffieHellmanParameters-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an identical copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_QSslDiffieHellmanParameters1(
        other: *const crate::QSslDiffieHellmanParameters,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#dtor.QSslDiffieHellmanParameters">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_dQSslDiffieHellmanParameters(
        this_ptr: *mut crate::QSslDiffieHellmanParameters,
    );

    /// <p>Copies the contents of <i>other</i> into this <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a>, making the two <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> identical.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Copies the contents of <i>other</i> into this <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a>, making the two <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> identical.</p>
    /// <p>Returns a reference to this <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_operator_(
        this_ptr: *mut crate::QSslDiffieHellmanParameters,
        other: *const crate::QSslDiffieHellmanParameters,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Swaps this <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> with <i>other</i>. This function is very fast and never fails.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_swap(
        this_ptr: *mut crate::QSslDiffieHellmanParameters,
        other: *mut crate::QSslDiffieHellmanParameters,
    );

    /// <p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object using the byte array <i>encoded</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#fromEncoded">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object using the byte array <i>encoded</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    /// <p>Use the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() method on the returned object to check whether the Diffie-Hellman parameters were valid and loaded correctly.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded(
        encoded: *const ::qt_core::QByteArray,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object by reading from <i>device</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#fromEncoded-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object by reading from <i>device</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    /// <p>Use the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() method on the returned object to check whether the Diffie-Hellman parameters were valid and loaded correctly.</p>
    /// <p>In particular, if <i>device</i> is <code>nullptr</code> or not open for reading, an invalid object will be returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded1(
        device: *mut ::qt_core::QIODevice,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Returns <code>true</code> if this is a an empty <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> instance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a an empty <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> instance.</p>
    /// <p>Setting an empty <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> instance on a <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a>-based server will disable Diffie-Hellman key exchange.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_isEmpty(
        this_ptr: *const crate::QSslDiffieHellmanParameters,
    ) -> bool;

    /// <p>Returns <code>true</code> if this is a valid <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a>; otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a valid <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a>; otherwise false.</p>
    /// <p>This method should be used after constructing a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object to determine its validity.</p>
    /// <p>If a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object is not valid, you can use the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#error">error</a>() method to determine what error prevented the object from being constructed.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_isValid(
        this_ptr: *const crate::QSslDiffieHellmanParameters,
    ) -> bool;

    /// <p>Returns the error that caused the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object to be invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#error">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the error that caused the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object to be invalid.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_error(
        this_ptr: *const crate::QSslDiffieHellmanParameters,
    ) -> crate::q_ssl_diffie_hellman_parameters::Error;

    /// <p>Returns a human-readable description of the error that caused the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object to be invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#errorString">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a human-readable description of the error that caused the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object to be invalid.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_errorString(
        this_ptr: *const crate::QSslDiffieHellmanParameters,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_swap26(
        value1: *mut crate::QSslDiffieHellmanParameters,
        value2: *mut crate::QSslDiffieHellmanParameters,
    );

    /// <p>Returns an hash value for the curve <i>curve</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an hash value for the curve <i>curve</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_qHash5(
        curve: *const crate::QSslEllipticCurve,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs an invalid elliptic curve.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#QSslEllipticCurve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an invalid elliptic curve.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_QSslEllipticCurve() -> *mut crate::QSslEllipticCurve;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance representing the named curve <i>name</i>. The <i>name</i> is the conventional short name for the curve, as represented by RFC 4492 (for instance <code>secp521r1</code>), or as NIST short names (for instance <code>P-256</code>). The actual set of recognized names depends on the SSL implementation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#fromShortName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance representing the named curve <i>name</i>. The <i>name</i> is the conventional short name for the curve, as represented by RFC 4492 (for instance <code>secp521r1</code>), or as NIST short names (for instance <code>P-256</code>). The actual set of recognized names depends on the SSL implementation.</p>
    /// <p>If the given <i>name</i> is not supported, returns an invalid <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance.</p>
    /// <p><b>Note: </b>The OpenSSL implementation of this function treats the name case-sensitively.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#shortName">shortName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_fromShortName(
        name: *const ::qt_core::QString,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance representing the named curve <i>name</i>. The <i>name</i> is a long name for the curve, whose exact spelling depends on the SSL implementation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#fromLongName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance representing the named curve <i>name</i>. The <i>name</i> is a long name for the curve, whose exact spelling depends on the SSL implementation.</p>
    /// <p>If the given <i>name</i> is not supported, returns an invalid <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">QSslEllipticCurve</a> instance.</p>
    /// <p><b>Note: </b>The OpenSSL implementation of this function treats the name case-sensitively.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#longName">longName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_fromLongName(
        name: *const ::qt_core::QString,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns the conventional short name for this curve. If this curve is invalid, returns an empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#shortName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the conventional short name for this curve. If this curve is invalid, returns an empty string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#longName">longName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_shortName(
        this_ptr: *const crate::QSslEllipticCurve,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns the conventional long name for this curve. If this curve is invalid, returns an empty string.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#longName">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the conventional long name for this curve. If this curve is invalid, returns an empty string.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#shortName">shortName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_longName(
        this_ptr: *const crate::QSslEllipticCurve,
    ) -> *mut ::qt_core::QString;

    /// <p>Returns true if this elliptic curve is a valid curve, false otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#isValid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if this elliptic curve is a valid curve, false otherwise.</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_isValid(
        this_ptr: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Returns true if this elliptic curve is one of the named curves that can be used in the key exchange when using an elliptic curve cipher with TLS; false otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#isTlsNamedCurve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns true if this elliptic curve is one of the named curves that can be used in the key exchange when using an elliptic curve cipher with TLS; false otherwise.</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_isTlsNamedCurve(
        this_ptr: *const crate::QSslEllipticCurve,
    ) -> bool;

    pub fn ctr_qt_network_ffi_operator__29(
        lhs: *const crate::QSslEllipticCurve,
        rhs: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__31(
        debug: *const ::qt_core::QDebug,
        curve: *const crate::QSslEllipticCurve,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Constructs a null key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a null key.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey() -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>encoded</i> contained a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey1(
        encoded: *const ::qt_core::QByteArray,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
        type_: crate::q_ssl::KeyType,
        passPhrase: *const ::qt_core::QByteArray,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>device</i> provided a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey2(
        device: *mut ::qt_core::QIODevice,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
        type_: crate::q_ssl::KeyType,
        passPhrase: *const ::qt_core::QByteArray,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey from a valid native key <i>handle</i>. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey from a valid native key <i>handle</i>. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>QSslKey will take ownership for this key and you must not free the key using the native library.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey3(
        handle: *mut ::std::ffi::c_void,
        type_: crate::q_ssl::KeyType,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs an identical copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-4">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an identical copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey4(other: *const crate::QSslKey)
        -> *mut crate::QSslKey;

    pub fn ctr_qt_network_ffi_QSslKey_operator_1(
        this_ptr: *mut crate::QSslKey,
        other: *const crate::QSslKey,
    ) -> *mut crate::QSslKey;

    /// <p>Destroys the <a href="http://doc.qt.io/qt-5/qsslkey.html">QSslKey</a> object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#dtor.QSslKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the <a href="http://doc.qt.io/qt-5/qsslkey.html">QSslKey</a> object.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_dQSslKey(this_ptr: *mut crate::QSslKey);

    /// <p>Swaps this ssl key with <i>other</i>. This function is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this ssl key with <i>other</i>. This function is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_swap(
        this_ptr: *mut crate::QSslKey,
        other: *mut crate::QSslKey,
    );

    /// <p>Returns <code>true</code> if this is a null key; otherwise false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this is a null key; otherwise false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslkey.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_isNull(this_ptr: *const crate::QSslKey) -> bool;

    /// <p>Clears the contents of this key, making it a null key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Clears the contents of this key, making it a null key.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_clear(this_ptr: *mut crate::QSslKey);

    /// <p>Returns the length of the key in bits, or -1 if the key is null.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the length of the key in bits, or -1 if the key is null.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_length(
        this_ptr: *const crate::QSslKey,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the type of the key (i.e., PublicKey or PrivateKey).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#type">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the type of the key (i.e., PublicKey or PrivateKey).</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_type(
        this_ptr: *const crate::QSslKey,
    ) -> crate::q_ssl::KeyType;

    /// <p>Returns the key algorithm.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#algorithm">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the key algorithm.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_algorithm(
        this_ptr: *const crate::QSslKey,
    ) -> crate::q_ssl::KeyAlgorithm;

    /// <p>Returns the key in PEM encoding. The result is encrypted with <i>passPhrase</i> if the key is a private key and <i>passPhrase</i> is non-empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#toPem">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the key in PEM encoding. The result is encrypted with <i>passPhrase</i> if the key is a private key and <i>passPhrase</i> is non-empty.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_toPem(
        this_ptr: *const crate::QSslKey,
        passPhrase: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the key in DER encoding.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#toDer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the key in DER encoding.</p>
    /// <p>The <i>passPhrase</i> argument should be omitted as DER cannot be encrypted. It will be removed in a future version of Qt.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_toDer(
        this_ptr: *const crate::QSslKey,
        passPhrase: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns a pointer to the native key handle, if there is one, else <code>nullptr</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#handle">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the native key handle, if there is one, else <code>nullptr</code>.</p>
    /// <p>You can use this handle together with the native API to access extended information about the key.</p>
    /// <p><b>Warning:</b> Use of this function has a high probability of being non-portable, and its return value may vary across platforms, and between minor Qt releases.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_handle(
        this_ptr: *const crate::QSslKey,
    ) -> *mut ::std::ffi::c_void;

    /// <p>Returns <code>true</code> if this key is equal to <i>other</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this key is equal to <i>other</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_operator__(
        this_ptr: *const crate::QSslKey,
        key: *const crate::QSslKey,
    ) -> bool;

    pub fn ctr_qt_network_ffi_swap27(value1: *mut crate::QSslKey, value2: *mut crate::QSslKey);

    /// <p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QHostAddress &address)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes host address <i>address</i> to the stream <i>out</i> and returns a reference to the stream.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Serializing Qt Data Types</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__32(
        debug: *const ::qt_core::QDebug,
        key: *const crate::QSslKey,
    ) -> *mut ::qt_core::QDebug;

    pub fn ctr_qt_network_ffi_QUdpSocket_metaObject(
        this_ptr: *const crate::QUdpSocket,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_QUdpSocket_qt_metacast(
        this_ptr: *mut crate::QUdpSocket,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_QUdpSocket_qt_metacall(
        this_ptr: *mut crate::QUdpSocket,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QUdpSocket_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_QUdpSocket_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    /// <p>Creates a QUdpSocket object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#QUdpSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QUdpSocket object.</p>
    /// <p><i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketType">socketType</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_QUdpSocket(
        parent: *mut ::qt_core::QObject,
    ) -> *mut crate::QUdpSocket;

    /// <p>Destroys the socket, closing the connection if necessary.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#dtor.QUdpSocket">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the socket, closing the connection if necessary.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_dQUdpSocket(this_ptr: *mut crate::QUdpSocket);

    /// <p>Joins the multicast group specified by <i>groupAddress</i> on the default interface chosen by the operating system. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an error occurs.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Joins the multicast group specified by <i>groupAddress</i> on the default interface chosen by the operating system. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an error occurs.</p>
    /// <p>Note that if you are attempting to join an IPv4 group, your socket must not be bound using IPv6 (or in dual mode, using <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>). You must use <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::AnyIPv4</a> instead.</p>
    /// <p>This function returns <code>true</code> if successful; otherwise it returns <code>false</code> and sets the socket error accordingly.</p>
    /// <p><b>Note: </b>Joining IPv6 multicast groups without an interface selection is not supported in all operating systems. Consider using the overload where the interface is specified.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup">leaveMulticastGroup</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_joinMulticastGroup(
        this_ptr: *mut crate::QUdpSocket,
        groupAddress: *const crate::QHostAddress,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Joins the multicast group address <i>groupAddress</i> on the interface <i>iface</i>.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup">leaveMulticastGroup</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_joinMulticastGroup1(
        this_ptr: *mut crate::QUdpSocket,
        groupAddress: *const crate::QHostAddress,
        iface: *const crate::QNetworkInterface,
    ) -> bool;

    /// <p>Leaves the multicast group specified by <i>groupAddress</i> on the default interface chosen by the operating system. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an error occurs.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Leaves the multicast group specified by <i>groupAddress</i> on the default interface chosen by the operating system. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an error occurs.</p>
    /// <p>This function returns <code>true</code> if successful; otherwise it returns <code>false</code> and sets the socket error accordingly.</p>
    /// <p><b>Note: </b>This function should be called with the same arguments as were passed to <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>().</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_leaveMulticastGroup(
        this_ptr: *mut crate::QUdpSocket,
        groupAddress: *const crate::QHostAddress,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Leaves the multicast group specified by <i>groupAddress</i> on the interface <i>iface</i>.</p>
    /// <p><b>Note: </b>This function should be called with the same arguments as were passed to <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>().</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_leaveMulticastGroup1(
        this_ptr: *mut crate::QUdpSocket,
        groupAddress: *const crate::QHostAddress,
        iface: *const crate::QNetworkInterface,
    ) -> bool;

    /// <p>Returns the interface for the outgoing interface for multicast datagrams. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. If no interface has been previously set, this function returns an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#multicastInterface">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the interface for the outgoing interface for multicast datagrams. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. If no interface has been previously set, this function returns an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise an invalid <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a> is returned.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#setMulticastInterface">setMulticastInterface</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_multicastInterface(
        this_ptr: *const crate::QUdpSocket,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Sets the outgoing interface for multicast datagrams to the interface <i>iface</i>. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise this function does nothing.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#setMulticastInterface">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the outgoing interface for multicast datagrams to the interface <i>iface</i>. This corresponds to the IP_MULTICAST_IF socket option for IPv4 sockets and the IPV6_MULTICAST_IF socket option for IPv6 sockets. The socket must be in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>, otherwise this function does nothing.</p>
    /// <p>This function was introduced in Qt 4.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#multicastInterface">multicastInterface</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup">leaveMulticastGroup</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_setMulticastInterface(
        this_ptr: *mut crate::QUdpSocket,
        iface: *const crate::QNetworkInterface,
    );

    /// <p>Returns <code>true</code> if at least one datagram is waiting to be read; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if at least one datagram is waiting to be read; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>() and <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">readDatagram</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_hasPendingDatagrams(
        this_ptr: *const crate::QUdpSocket,
    ) -> bool;

    /// <p>Returns the size of the first pending UDP datagram. If there is no datagram available, this function returns -1.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the size of the first pending UDP datagram. If there is no datagram available, this function returns -1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>() and <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">readDatagram</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_pendingDatagramSize(
        this_ptr: *const crate::QUdpSocket,
    ) -> i64;

    /// <p>Receives a datagram no larger than <i>maxSize</i> bytes and returns it in the <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#receiveDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Receives a datagram no larger than <i>maxSize</i> bytes and returns it in the <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</p>
    /// <p>On failure, returns a <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> that reports <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isValid">not valid</a>.</p>
    /// <p>If <i>maxSize</i> is too small, the rest of the datagram will be lost. If <i>maxSize</i> is 0, the datagram will be discarded. If <i>maxSize</i> is -1 (the default), this function will attempt to read the entire datagram.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_receiveDatagram(
        this_ptr: *mut crate::QUdpSocket,
        maxSize: i64,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    /// <p>Returns the size of the datagram on success; otherwise returns -1.</p>
    /// <p>If <i>maxSize</i> is too small, the rest of the datagram will be lost. To avoid loss of data, call <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>() to determine the size of the pending datagram before attempting to read it. If <i>maxSize</i> is 0, the datagram will be discarded.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_readDatagram(
        this_ptr: *mut crate::QUdpSocket,
        data: *mut ::std::os::raw::c_char,
        maxlen: i64,
        host: *mut crate::QHostAddress,
        port: *mut u16,
    ) -> i64;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the datagram <i>datagram</i> to the host address and port numbers contained in <i>datagram</i>, using the network interface and hop count limits also set there. If the destination address and port numbers are unset, this function will send to the address that was passed to <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>().</p>
    /// <p>If the destination address is IPv6 with a non-empty <a href="http://doc.qt.io/qt-5/qhostaddress.html#scopeId">scope id</a> but differs from the interface index in <i>datagram</i>, it is undefined which interface the operating system will choose to send on.</p>
    /// <p>The function returns the number of bytes sent if it succeeded or -1 if it encountered an error.</p>
    /// <p><b>Warning:</b> Calling this function on a connected UDP socket may result in an error and no packet being sent. If you are using a connected socket, use <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() to send datagrams.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">QNetworkDatagram::setDestination</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setHopLimit">QNetworkDatagram::setHopLimit</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setInterfaceIndex">QNetworkDatagram::setInterfaceIndex</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_writeDatagram(
        this_ptr: *mut crate::QUdpSocket,
        datagram: *const crate::QNetworkDatagram,
    ) -> i64;

    /// <p>Sends the datagram at <i>data</i> of size <i>size</i> to the host address <i>address</i> at port <i>port</i>. Returns the number of bytes sent on success; otherwise returns -1.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends the datagram at <i>data</i> of size <i>size</i> to the host address <i>address</i> at port <i>port</i>. Returns the number of bytes sent on success; otherwise returns -1.</p>
    /// <p>Datagrams are always written as one block. The maximum size of a datagram is highly platform-dependent, but can be as low as 8192 bytes. If the datagram is too large, this function will return -1 and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() will return <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketError-enum">DatagramTooLargeError</a>.</p>
    /// <p>Sending datagrams larger than 512 bytes is in general disadvised, as even if they are sent successfully, they are likely to be fragmented by the IP layer before arriving at their final destination.</p>
    /// <p><b>Warning:</b> Calling this function on a connected UDP socket may result in an error and no packet being sent. If you are using a connected socket, use <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() to send datagrams.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">readDatagram</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_writeDatagram1(
        this_ptr: *mut crate::QUdpSocket,
        data: *const ::std::os::raw::c_char,
        len: i64,
        host: *const crate::QHostAddress,
        port: u16,
    ) -> i64;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sends the datagram <i>datagram</i> to the host address <i>host</i> and at port <i>port</i>.</p>
    /// <p>The function returns the number of bytes sent if it succeeded or -1 if it encountered an error.</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_writeDatagram2(
        this_ptr: *mut crate::QUdpSocket,
        datagram: *const ::qt_core::QByteArray,
        host: *const crate::QHostAddress,
        port: u16,
    ) -> i64;

    /// <p>QDnsLookup uses the mechanisms provided by the operating system to perform DNS lookups. To perform a lookup you need to specify a <a href="http://doc.qt.io/qt-5/qdnslookup.html#name-prop">name</a> and <a href="http://doc.qt.io/qt-5/qdnslookup.html#type-prop">type</a> then invoke the <a href="http://doc.qt.io/qt-5/qdnslookup.html#lookup">lookup()</a> slot. The <a href="http://doc.qt.io/qt-5/qdnslookup.html#finished">finished()</a> signal will be emitted upon completion.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QDnsLookup uses the mechanisms provided by the operating system to perform DNS lookups. To perform a lookup you need to specify a <a href="http://doc.qt.io/qt-5/qdnslookup.html#name-prop">name</a> and <a href="http://doc.qt.io/qt-5/qdnslookup.html#type-prop">type</a> then invoke the <a href="http://doc.qt.io/qt-5/qdnslookup.html#lookup">lookup()</a> slot. The <a href="http://doc.qt.io/qt-5/qdnslookup.html#finished">finished()</a> signal will be emitted upon completion.</p>
    /// <p>For example, you can determine which servers an XMPP chat client should connect to for a given domain with:</p>
    /// <pre class="cpp"> <span class="type">void</span> MyObject<span class="operator">::</span>lookupServers()
    ///  {
    /// &#32;    <span class="comment">// Create a DNS lookup.</span>
    /// &#32;    dns <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup">QDnsLookup</a></span>(<span class="keyword">this</span>);
    /// &#32;    connect(dns<span class="operator">,</span> SIGNAL(finished())<span class="operator">,</span>
    /// &#32;   &#32;   &#32;    <span class="keyword">this</span><span class="operator">,</span> SLOT(handleServers()));
    ///
    /// &#32;    <span class="comment">// Find the XMPP servers for gmail.com</span>
    /// &#32;    dns<span class="operator">-</span><span class="operator">&gt;</span>setType(<span class="type"><a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup">QDnsLookup</a></span><span class="operator">::</span>SRV);
    /// &#32;    dns<span class="operator">-</span><span class="operator">&gt;</span>setName(<span class="string">"_xmpp-client._tcp.gmail.com"</span>);
    /// &#32;    dns<span class="operator">-</span><span class="operator">&gt;</span>lookup();
    ///  }
    /// </pre>
    /// <p>Once the request finishes you can handle the results with:</p>
    /// <pre class="cpp"> <span class="type">void</span> MyObject<span class="operator">::</span>handleServers()
    ///  {
    /// &#32;    <span class="comment">// Check the lookup succeeded.</span>
    /// &#32;    <span class="keyword">if</span> (dns<span class="operator">-</span><span class="operator">&gt;</span>error() <span class="operator">!</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup">QDnsLookup</a></span><span class="operator">::</span>NoError) {
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qWarning">qWarning</a>(<span class="string">"DNS lookup failed"</span>);
    /// &#32;   &#32;    dns<span class="operator">-</span><span class="operator">&gt;</span>deleteLater();
    /// &#32;   &#32;    <span class="keyword">return</span>;
    /// &#32;    }
    ///
    /// &#32;    <span class="comment">// Handle the results.</span>
    /// &#32;    <span class="keyword">const</span> <span class="keyword">auto</span> records <span class="operator">=</span> dns<span class="operator">-</span><span class="operator">&gt;</span>serviceRecords();
    /// &#32;    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdnsservicerecord.html">QDnsServiceRecord</a></span> <span class="operator">&amp;</span>record : records) {
    /// &#32;   &#32;    <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    /// &#32;    }
    /// &#32;    dns<span class="operator">-</span><span class="operator">&gt;</span>deleteLater();
    ///  }
    /// </pre>
    /// <p><b>Note: </b>If you simply want to find the IP address(es) associated with a host name, or the host name associated with an IP address you should use <a href="http://doc.qt.io/qt-5/qhostinfo.html">QHostInfo</a> instead.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup3() -> *mut crate::QDnsLookup;

    /// <p>TCP (Transmission Control Protocol) is a reliable, stream-oriented, connection-oriented transport protocol. It is especially well suited for continuous transmission of data.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpsocket.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>TCP (Transmission Control Protocol) is a reliable, stream-oriented, connection-oriented transport protocol. It is especially well suited for continuous transmission of data.</p>
    /// <p>QTcpSocket is a convenience subclass of <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> that allows you to establish a TCP connection and transfer streams of data. See the <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> documentation for details.</p>
    /// <p><b>Note: </b>TCP sockets cannot be opened in <a href="http://doc.qt.io/qt-5/qiodevice.html#OpenModeFlag-enum">QIODevice::Unbuffered</a> mode.</p></div>
    pub fn ctr_qt_network_ffi_QTcpSocket_QTcpSocket1() -> *mut crate::QTcpSocket;

    /// <p>QSslCertificate stores an X509 certificate, and is commonly used to verify the identity and store information about the local host, a remotely connected peer, or a trusted third party Certificate Authority.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QSslCertificate stores an X509 certificate, and is commonly used to verify the identity and store information about the local host, a remotely connected peer, or a trusted third party Certificate Authority.</p>
    /// <p>There are many ways to construct a QSslCertificate. The most common way is to call <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificate">QSslSocket::peerCertificate</a>(), which returns a QSslCertificate object, or <a href="http://doc.qt.io/qt-5/qsslsocket.html#peerCertificateChain">QSslSocket::peerCertificateChain</a>(), which returns a list of them. You can also load certificates from a DER (binary) or PEM (Base64) encoded bundle, typically stored as one or more local files, or in a Qt Resource.</p>
    /// <p>You can call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to check if your certificate is null. By default, QSslCertificate constructs a null certificate. A null certificate is invalid, but an invalid certificate is not necessarily null. If you want to reset all contents in a certificate, call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#clear">clear</a>().</p>
    /// <p>After loading a certificate, you can find information about the certificate, its subject, and its issuer, by calling one of the many accessor functions, including <a href="http://doc.qt.io/qt-5/qsslcertificate.html#version">version</a>(), <a href="http://doc.qt.io/qt-5/qsslcertificate.html#serialNumber">serialNumber</a>(), <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>() and <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>(). You can call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#effectiveDate">effectiveDate</a>() and <a href="http://doc.qt.io/qt-5/qsslcertificate.html#expiryDate">expiryDate</a>() to check when the certificate starts being effective and when it expires. The <a href="http://doc.qt.io/qt-5/qsslcertificate.html#publicKey">publicKey</a>() function returns the certificate subject's public key as a <a href="http://doc.qt.io/qt-5/qsslkey.html">QSslKey</a>. You can call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#issuerInfo">issuerInfo</a>() or <a href="http://doc.qt.io/qt-5/qsslcertificate.html#subjectInfo">subjectInfo</a>() to get detailed information about the certificate issuer and its subject.</p>
    /// <p>Internally, QSslCertificate is stored as an X509 structure. You can access this handle by calling <a href="http://doc.qt.io/qt-5/qsslcertificate.html#handle">handle</a>(), but the results are likely to not be portable.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate3() -> *mut crate::QSslCertificate;

    /// <p>QSslSocket establishes a secure, encrypted TCP connection you can use for transmitting encrypted data. It can operate in both client and server mode, and it supports modern SSL protocols, including SSL 3 and TLS 1.2. By default, QSslSocket uses only SSL protocols which are considered to be secure (<a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::SecureProtocols</a>), but you can change the SSL protocol by calling <a href="http://doc.qt.io/qt-5/qsslsocket.html#setProtocol">setProtocol</a>() as long as you do it before the handshake has started.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QSslSocket establishes a secure, encrypted TCP connection you can use for transmitting encrypted data. It can operate in both client and server mode, and it supports modern SSL protocols, including SSL 3 and TLS 1.2. By default, QSslSocket uses only SSL protocols which are considered to be secure (<a href="http://doc.qt.io/qt-5/qssl.html#SslProtocol-enum">QSsl::SecureProtocols</a>), but you can change the SSL protocol by calling <a href="http://doc.qt.io/qt-5/qsslsocket.html#setProtocol">setProtocol</a>() as long as you do it before the handshake has started.</p>
    /// <p>SSL encryption operates on top of the existing TCP stream after the socket enters the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>. There are two simple ways to establish a secure connection using QSslSocket: With an immediate SSL handshake, or with a delayed SSL handshake occurring after the connection has been established in unencrypted mode.</p>
    /// <p>The most common way to use QSslSocket is to construct an object and start a secure connection by calling <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>(). This method starts an immediate SSL handshake once the connection has been established.</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span> <span class="operator">*</span>socket <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span>(<span class="keyword">this</span>);
    ///  connect(socket<span class="operator">,</span> SIGNAL(encrypted())<span class="operator">,</span> <span class="keyword">this</span><span class="operator">,</span> SLOT(ready()));
    ///
    ///  socket<span class="operator">-</span><span class="operator">&gt;</span>connectToHostEncrypted(<span class="string">"imap.example.com"</span><span class="operator">,</span> <span class="number">993</span>);
    /// </pre>
    /// <p>As with a plain <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>, QSslSocket enters the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">HostLookupState</a>, <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectingState</a>, and finally the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">ConnectedState</a>, if the connection is successful. The handshake then starts automatically, and if it succeeds, the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() signal is emitted to indicate the socket has entered the encrypted state and is ready for use.</p>
    /// <p>Note that data can be written to the socket immediately after the return from <a href="http://doc.qt.io/qt-5/qsslsocket.html#connectToHostEncrypted">connectToHostEncrypted</a>() (i.e., before the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() signal is emitted). The data is queued in QSslSocket until after the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() signal is emitted.</p>
    /// <p>An example of using the delayed SSL handshake to secure an existing connection is the case where an SSL server secures an incoming connection. Suppose you create an SSL server class as a subclass of <a href="http://doc.qt.io/qt-5/qtcpserver.html">QTcpServer</a>. You would override <a href="http://doc.qt.io/qt-5/qtcpserver.html#incomingConnection">QTcpServer::incomingConnection</a>() with something like the example below, which first constructs an instance of QSslSocket and then calls <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketDescriptor">setSocketDescriptor</a>() to set the new socket's descriptor to the existing one passed in. It then initiates the SSL handshake by calling <a href="http://doc.qt.io/qt-5/qsslsocket.html#startServerEncryption">startServerEncryption</a>().</p>
    /// <pre class="cpp"> <span class="type">void</span> SslServer<span class="operator">::</span>incomingConnection(qintptr socketDescriptor)
    ///  {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span> <span class="operator">*</span>serverSocket <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span>;
    /// &#32;    <span class="keyword">if</span> (serverSocket<span class="operator">-</span><span class="operator">&gt;</span>setSocketDescriptor(socketDescriptor)) {
    /// &#32;   &#32;    addPendingConnection(serverSocket);
    /// &#32;   &#32;    connect(serverSocket<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span><span class="operator">::</span>encrypted<span class="operator">,</span> <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>SslServer<span class="operator">::</span>ready);
    /// &#32;   &#32;    serverSocket<span class="operator">-</span><span class="operator">&gt;</span>startServerEncryption();
    /// &#32;    } <span class="keyword">else</span> {
    /// &#32;   &#32;    <span class="keyword">delete</span> serverSocket;
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p>If an error occurs, QSslSocket emits the sslErrors() signal. In this case, if no action is taken to ignore the error(s), the connection is dropped. To continue, despite the occurrence of an error, you can call <a href="http://doc.qt.io/qt-5/qsslsocket.html#ignoreSslErrors">ignoreSslErrors</a>(), either from within this slot after the error occurs, or any time after construction of the QSslSocket and before the connection is attempted. This will allow QSslSocket to ignore the errors it encounters when establishing the identity of the peer. Ignoring errors during an SSL handshake should be used with caution, since a fundamental characteristic of secure connections is that they should be established with a successful handshake.</p>
    /// <p>Once encrypted, you use QSslSocket as a regular <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>. When <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() is emitted, you can call <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#canReadLine">canReadLine</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#readLine">readLine</a>(), or <a href="http://doc.qt.io/qt-5/qiodevice.html#getChar">getChar</a>() to read decrypted data from QSslSocket's internal buffer, and you can call <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() or <a href="http://doc.qt.io/qt-5/qiodevice.html#putChar">putChar</a>() to write data back to the peer. QSslSocket will automatically encrypt the written data for you, and emit <a href="http://doc.qt.io/qt-5/qsslsocket.html#encryptedBytesWritten">encryptedBytesWritten</a>() once the data has been written to the peer.</p>
    /// <p>As a convenience, QSslSocket supports <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>'s blocking functions <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForConnected">waitForConnected</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForReadyRead">waitForReadyRead</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForBytesWritten">waitForBytesWritten</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForDisconnected">waitForDisconnected</a>(). It also provides <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForEncrypted">waitForEncrypted</a>(), which will block the calling thread until an encrypted connection has been established.</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qsslsocket.html#QSslSocket">QSslSocket</a></span> socket;
    ///  socket<span class="operator">.</span>connectToHostEncrypted(<span class="string">"http.example.com"</span><span class="operator">,</span> <span class="number">443</span>);
    ///  <span class="keyword">if</span> (<span class="operator">!</span>socket<span class="operator">.</span>waitForEncrypted()) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> socket<span class="operator">.</span>errorString();
    /// &#32;    <span class="keyword">return</span> <span class="keyword">false</span>;
    ///  }
    ///
    ///  socket<span class="operator">.</span>write(<span class="string">"GET / HTTP/1.0\r\n\r\n"</span>);
    ///  <span class="keyword">while</span> (socket<span class="operator">.</span>waitForReadyRead())
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> socket<span class="operator">.</span>readAll()<span class="operator">.</span>data();
    /// </pre>
    /// <p>QSslSocket provides an extensive, easy-to-use API for handling cryptographic ciphers, private keys, and local, peer, and Certification Authority (CA) certificates. It also provides an API for handling errors that occur during the handshake phase.</p>
    /// <p>The following features can also be customized:</p>
    /// <ul>
    /// <li>The socket's cryptographic cipher suite can be customized before the handshake phase with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setCiphers">QSslConfiguration::setCiphers</a>() and QSslConfiguration::setDefaultCiphers().</li>
    /// <li>The socket's local certificate and private key can be customized before the handshake phase with <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey">setPrivateKey</a>().</li>
    /// <li>The CA certificate database can be extended and customized with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>().</li>
    /// </ul>
    /// <p>To extend the list of <i>default</i> CA certificates used by the SSL sockets during the SSL handshake you must update the default configuration, as in the snippet below:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a></span><span class="operator">&gt;</span> certificates <span class="operator">=</span> getCertificates();
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a></span> configuration <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a></span><span class="operator">::</span>defaultConfiguration();
    ///  configuration<span class="operator">.</span>addCaCertificates(certificates);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a></span><span class="operator">::</span>setDefaultConfiguration(configuration);
    /// </pre>
    /// <p><b>Note: </b>If available, root certificates on Unix (excluding macOS) will be loaded on demand from the standard certificate directories. If you do not want to load root certificates on demand, you need to call either <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>().setCaCertificates() before the first SSL handshake is made in your application (for example, via passing QSslSocket::systemCaCertificates() to it), or call <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#defaultConfiguration">QSslConfiguration::defaultConfiguration</a>()::setCaCertificates() on your QSslSocket instance prior to the SSL handshake.</p>
    /// <p>For more information about ciphers and certificates, refer to <a href="http://doc.qt.io/qt-5/qsslcipher.html">QSslCipher</a> and <a href="http://doc.qt.io/qt-5/qsslcertificate.html">QSslCertificate</a>.</p>
    /// <p>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit (<a href="http://www.openssl.org/">http://www.openssl.org/</a>).</p>
    /// <p><b>Note: </b>Be aware of the difference between the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal and the <a href="http://doc.qt.io/qt-5/qsslsocket.html#encryptedBytesWritten">encryptedBytesWritten</a>() signal. For a <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>, <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() will get emitted as soon as data has been written to the TCP socket. For a QSslSocket, <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() will get emitted when the data is being encrypted and <a href="http://doc.qt.io/qt-5/qsslsocket.html#encryptedBytesWritten">encryptedBytesWritten</a>() will get emitted as soon as data has been written to the TCP socket.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_QSslSocket1() -> *mut crate::QSslSocket;

    /// <p>The QDtlsClientVerifier class implements server-side DTLS cookie generation and verification. Datagram security protocols are highly susceptible to a variety of Denial-of-Service attacks. According to <a href="https://tools.ietf.org/html/rfc6347#section-4.2.1">RFC 6347, section 4.2.1</a>, these are two of the more common types of attack:</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The QDtlsClientVerifier class implements server-side DTLS cookie generation and verification. Datagram security protocols are highly susceptible to a variety of Denial-of-Service attacks. According to <a href="https://tools.ietf.org/html/rfc6347#section-4.2.1">RFC 6347, section 4.2.1</a>, these are two of the more common types of attack:</p>
    /// <ul>
    /// <li>An attacker transmits a series of handshake initiation requests, causing a server to allocate excessive resources and potentially perform expensive cryptographic operations.</li>
    /// <li>An attacker transmits a series of handshake initiation requests with a forged source of the victim, making the server act as an amplifier. Normally, the server would reply to the victim machine with a Certificate message, which can be quite large, thus flooding the victim machine with datagrams.</li>
    /// </ul>
    /// <p>As a countermeasure to these attacks, <a href="https://tools.ietf.org/html/rfc6347#section-4.2.1">RFC 6347, section 4.2.1</a> proposes a stateless cookie technique that a server may deploy:</p>
    /// <ul>
    /// <li>In response to the initial ClientHello message, the server sends a HelloVerifyRequest, which contains a cookie. This cookie is a cryptographic hash and is generated using the client's address, port number, and the server's secret (which is a cryptographically strong pseudo-random sequence of bytes).</li>
    /// <li>A reachable DTLS client is expected to reply with a new ClientHello message containing this cookie.</li>
    /// <li>When the server receives the ClientHello message with a cookie, it generates a new cookie as described above. This new cookie is compared to the one found in the ClientHello message.</li>
    /// <li>In the cookies are equal, the client is considered to be real, and the server can continue with a TLS handshake procedure.</li>
    /// </ul>
    /// <p><b>Note: </b>A DTLS server is not required to use DTLS cookies.</p>
    /// <p>QDtlsClientVerifier is designed to work in pair with <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>, as shown in the following code-excerpt:</p>
    /// <pre class="cpp"> <span class="keyword">class</span> DtlsServer : <span class="keyword">public</span> <span class="type"><a href="http://doc.qt.io/qt-5/qobject.html#QObject">QObject</a></span>
    ///  {
    ///  <span class="keyword">public</span>:
    /// &#32;    bool listen(<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span> <span class="operator">&amp;</span>address<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#quint16-typedef">quint16</a></span> port);
    /// &#32;    <span class="comment">// ...</span>
    ///
    ///  <span class="keyword">private</span>:
    /// &#32;    <span class="type">void</span> readyRead();
    /// &#32;    <span class="comment">// ...</span>
    ///
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a></span> serverSocket;
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#QDtlsClientVerifier">QDtlsClientVerifier</a></span> verifier;
    /// &#32;    <span class="comment">// ...</span>
    ///  };
    ///
    ///  bool DtlsServer<span class="operator">::</span>listen(<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span> <span class="operator">&amp;</span>serverAddress<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#quint16-typedef">quint16</a></span> serverPort)
    ///  {
    /// &#32;    <span class="keyword">if</span> (serverSocket<span class="operator">.</span>bind(serverAddress<span class="operator">,</span> serverPort))
    /// &#32;   &#32;    connect(<span class="operator">&amp;</span>serverSocket<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a></span><span class="operator">::</span>readyRead<span class="operator">,</span> <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>DtlsServer<span class="operator">::</span>readyRead);
    /// &#32;    <span class="keyword">return</span> serverSocket<span class="operator">.</span>state() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a></span><span class="operator">::</span>BoundState;
    ///  }
    ///
    ///  <span class="type">void</span> DtlsServer<span class="operator">::</span>readyRead()
    ///  {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span> dgram(serverSocket<span class="operator">.</span>pendingDatagramSize()<span class="operator">,</span> <span class="type">Qt</span><span class="operator">::</span>Uninitialized);
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span> address;
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#quint16-typedef">quint16</a></span> port <span class="operator">=</span> {};
    /// &#32;    serverSocket<span class="operator">.</span>readDatagram(dgram<span class="operator">.</span>data()<span class="operator">,</span> dgram<span class="operator">.</span>size()<span class="operator">,</span> <span class="operator">&amp;</span>address<span class="operator">,</span> <span class="operator">&amp;</span>port);
    /// &#32;    <span class="keyword">if</span> (verifiedClients<span class="operator">.</span>contains({address<span class="operator">,</span> port}) {
    /// &#32;   &#32;    <span class="comment">// This client was verified previously, we either continue the</span>
    /// &#32;   &#32;    <span class="comment">// handshake or decrypt the incoming message.</span>
    /// &#32;    } <span class="keyword">else</span> <span class="keyword">if</span> (verifier<span class="operator">.</span>verifyClient(<span class="operator">&amp;</span>serverSocket<span class="operator">,</span> dgram<span class="operator">,</span> address<span class="operator">,</span> port)) {
    /// &#32;   &#32;    <span class="comment">// Apparently we have a real DTLS client who wants to send us</span>
    /// &#32;   &#32;    <span class="comment">// encrypted datagrams. Remember this client as verified</span>
    /// &#32;   &#32;    <span class="comment">// and proceed with a handshake.</span>
    /// &#32;    } <span class="keyword">else</span> {
    /// &#32;   &#32;    <span class="comment">// No matching cookie was found in the incoming datagram,</span>
    /// &#32;   &#32;    <span class="comment">// verifyClient() has sent a ClientVerify message.</span>
    /// &#32;   &#32;    <span class="comment">// We'll hear from the client again soon, if they're real.</span>
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p>QDtlsClientVerifier does not impose any restrictions on how the application uses <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>. For example, it is possible to have a server with a single <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> in state <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">QAbstractSocket::BoundState</a>, handling multiple DTLS clients simultaneously:</p>
    /// <ul>
    /// <li>Testing if new clients are real DTLS-capable clients.</li>
    /// <li>Completing TLS handshakes with the verified clients (see <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>).</li>
    /// <li>Decrypting datagrams coming from the connected clients (see <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>).</li>
    /// <li>Sending encrypted datagrams to the connected clients (see <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>).</li>
    /// </ul>
    /// <p>This implies that QDtlsClientVerifier does not read directly from a socket, instead it expects the application to read an incoming datagram, extract the sender's address, and port, and then pass this data to <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#verifyClient">verifyClient</a>(). To send a HelloVerifyRequest message, <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#verifyClient">verifyClient</a>() can write to the <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>.</p>
    /// <p><b>Note: </b>QDtlsClientVerifier does not take ownership of the <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> object.</p>
    /// <p>By default QDtlsClientVerifier obtains its secret from a cryptographically strong pseudorandom number generator.</p>
    /// <p><b>Note: </b>The default secret is shared by all objects of the classes QDtlsClientVerifier and <a href="http://doc.qt.io/qt-5/qdtls.html">QDtls</a>. Since this can impose security risks, RFC 6347 recommends to change the server's secret frequently. Please see <a href="https://tools.ietf.org/html/rfc6347">RFC 6347, section 4.2.1</a> for hints about possible server implementations. Cookie generator parameters can be set using the class <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">QDtlsClientVerifier::GeneratorParameters</a> and <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">setCookieGeneratorParameters</a>():</p>
    /// <pre class="cpp"> <span class="type">void</span> DtlsServer<span class="operator">::</span>updateServerSecret()
    ///  {
    /// &#32;    <span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a></span> newSecret(generateCryptoStrongSecret());
    /// &#32;    <span class="keyword">if</span> (newSecret<span class="operator">.</span>size()) {
    /// &#32;   &#32;    usedCookies<span class="operator">.</span>append(newSecret);
    /// &#32;   &#32;    verifier<span class="operator">.</span>setCookieGeneratorParameters({<span class="type"><a href="http://doc.qt.io/qt-5/qcryptographichash.html">QCryptographicHash</a></span><span class="operator">::</span>Sha1<span class="operator">,</span> newSecret});
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p>The <a href="http://doc.qt.io/qt-5/qtnetwork-secureudpserver-example.html">DTLS server</a> example illustrates how to use QDtlsClientVerifier in a server application.</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_QDtlsClientVerifier1(
    ) -> *mut crate::QDtlsClientVerifier;

    /// <p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    /// <p><b>Note: </b>An empty secret is considered to be invalid by <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">QDtlsClientVerifier::setCookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_dGeneratorParameters(
        this_ptr: *mut crate::q_dtls_client_verifier::GeneratorParameters,
    );

    /// <p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    /// <p><b>Note: </b>An empty secret is considered to be invalid by <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">QDtlsClientVerifier::setCookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_GeneratorParameters2(
        other: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    /// <p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtlsclientverifier-generatorparameters.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>An object of this class provides the parameters that <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html">QDtlsClientVerifier</a> will use to generate DTLS cookies. They include a cryptographic hash algorithm and a secret.</p>
    /// <p><b>Note: </b>An empty secret is considered to be invalid by <a href="http://doc.qt.io/qt-5/qdtlsclientverifier.html#setCookieGeneratorParameters">QDtlsClientVerifier::setCookieGeneratorParameters</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtlsClientVerifier_GeneratorParameters_operator_(
        this_ptr: *mut crate::q_dtls_client_verifier::GeneratorParameters,
        other: *const crate::q_dtls_client_verifier::GeneratorParameters,
    ) -> *mut crate::q_dtls_client_verifier::GeneratorParameters;

    pub fn ctr_qt_network_ffi_QIPv6Address_dQIPv6Address(this_ptr: *mut crate::QIPv6Address);

    pub fn ctr_qt_network_ffi_QIPv6Address_QIPv6Address() -> *mut crate::QIPv6Address;

    pub fn ctr_qt_network_ffi_QIPv6Address_QIPv6Address1(
        other: *const crate::QIPv6Address,
    ) -> *mut crate::QIPv6Address;

    pub fn ctr_qt_network_ffi_QIPv6Address_operator_(
        this_ptr: *mut crate::QIPv6Address,
        other: *const crate::QIPv6Address,
    ) -> *mut crate::QIPv6Address;

    /// <p>QHostInfo finds the IP address(es) associated with a host name, or the host name associated with an IP address. The class provides two static convenience functions: one that works asynchronously and emits a signal once the host is found, and one that blocks and returns a QHostInfo object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostinfo.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QHostInfo finds the IP address(es) associated with a host name, or the host name associated with an IP address. The class provides two static convenience functions: one that works asynchronously and emits a signal once the host is found, and one that blocks and returns a QHostInfo object.</p>
    /// <p>To look up a host's IP addresses asynchronously, call <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>(), which takes the host name or IP address, a receiver object, and a slot signature as arguments and returns an ID. You can abort the lookup by calling <a href="http://doc.qt.io/qt-5/qhostinfo.html#abortHostLookup">abortHostLookup</a>() with the lookup ID.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="comment">// To find the IP address of qt-project.org</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>lookupHost(<span class="string">"qt-project.org"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;      <span class="keyword">this</span><span class="operator">,</span> SLOT(printResults(<span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span>)));
    ///
    ///  <span class="comment">// To find the host name for 4.2.2.1</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>lookupHost(<span class="string">"4.2.2.1"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;      <span class="keyword">this</span><span class="operator">,</span> SLOT(printResults(<span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span>)));
    /// </pre>
    /// <p>The slot is invoked when the results are ready. The results are stored in a QHostInfo object. Call <a href="http://doc.qt.io/qt-5/qhostinfo.html#addresses">addresses</a>() to get the list of IP addresses for the host, and <a href="http://doc.qt.io/qt-5/qhostinfo.html#hostName">hostName</a>() to get the host name that was looked up.</p>
    /// <p>If the lookup failed, <a href="http://doc.qt.io/qt-5/qhostinfo.html#error">error</a>() returns the type of error that occurred. <a href="http://doc.qt.io/qt-5/qhostinfo.html#errorString">errorString</a>() gives a human-readable description of the lookup error.</p>
    /// <p>If you want a blocking lookup, use the <a href="http://doc.qt.io/qt-5/qhostinfo.html#fromName">QHostInfo::fromName</a>() function:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span> info <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhostinfo.html#QHostInfo">QHostInfo</a></span><span class="operator">::</span>fromName(<span class="string">"qt-project.org"</span>);
    /// </pre>
    /// <p>QHostInfo supports Internationalized Domain Names (IDNs) through the IDNA and Punycode standards.</p>
    /// <p>To retrieve the name of the local host, use the static <a href="http://doc.qt.io/qt-5/qhostinfo.html#localHostName">QHostInfo::localHostName</a>() function.</p>
    /// <p>QHostInfo uses the mechanisms provided by the operating system to perform the lookup. As per {https://tools.ietf.org/html/rfc6724}{RFC 6724} there is no guarantee that all IP addresses registered for a domain or host will be returned.</p>
    /// <p><b>Note: </b>Since Qt 4.6.1 QHostInfo is using multiple threads for DNS lookup instead of one dedicated DNS thread. This improves performance, but also changes the order of signal emissions when using <a href="http://doc.qt.io/qt-5/qhostinfo.html#lookupHost">lookupHost</a>() compared to previous versions of Qt.</p>
    /// <p><b>Note: </b>Since Qt 4.6.3 QHostInfo is using a small internal 60 second DNS cache for performance improvements.</p></div>
    pub fn ctr_qt_network_ffi_QHostInfo_QHostInfo3() -> *mut crate::QHostInfo;

    /// <p>The QHttpMultiPart resembles a MIME multipart message, as described in RFC 2046, which is to be sent over HTTP. A multipart message consists of an arbitrary number of body parts (see <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>), which are separated by a unique boundary. The boundary of the QHttpMultiPart is constructed with the string "boundary_.oOo.<a href="http://doc.qt.io/qt-5/qromancalendar.html">_</a>" followed by random characters, and provides enough uniqueness to make sure it does not occur inside the parts itself. If desired, the boundary can still be set via <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#setBoundary">setBoundary</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The QHttpMultiPart resembles a MIME multipart message, as described in RFC 2046, which is to be sent over HTTP. A multipart message consists of an arbitrary number of body parts (see <a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a>), which are separated by a unique boundary. The boundary of the QHttpMultiPart is constructed with the string "boundary_.oOo.<a href="http://doc.qt.io/qt-5/qromancalendar.html">_</a>" followed by random characters, and provides enough uniqueness to make sure it does not occur inside the parts itself. If desired, the boundary can still be set via <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#setBoundary">setBoundary</a>().</p>
    /// <p>As an example, consider the following code snippet, which constructs a multipart message containing a text part followed by an image part:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart">QHttpMultiPart</a></span> <span class="operator">*</span>multiPart <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart">QHttpMultiPart</a></span>(<span class="type"><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart">QHttpMultiPart</a></span><span class="operator">::</span>FormDataType);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a></span> textPart;
    ///  textPart<span class="operator">.</span>setHeader(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>ContentDispositionHeader<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a></span>(<span class="string">"form-data; name=\"text\""</span>));
    ///  textPart<span class="operator">.</span>setBody(<span class="string">"my text"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhttppart.html">QHttpPart</a></span> imagePart;
    ///  imagePart<span class="operator">.</span>setHeader(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>ContentTypeHeader<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a></span>(<span class="string">"image/jpeg"</span>));
    ///  imagePart<span class="operator">.</span>setHeader(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>ContentDispositionHeader<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a></span>(<span class="string">"form-data; name=\"image\""</span>));
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qfile.html">QFile</a></span> <span class="operator">*</span>file <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qfile.html">QFile</a></span>(<span class="string">"image.jpg"</span>);
    ///  file<span class="operator">-</span><span class="operator">&gt;</span>open(<span class="type"><a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a></span><span class="operator">::</span>ReadOnly);
    ///  imagePart<span class="operator">.</span>setBodyDevice(file);
    ///  file<span class="operator">-</span><span class="operator">&gt;</span>setParent(multiPart); <span class="comment">// we cannot delete the file now, so delete it with the multiPart</span>
    ///
    ///  multiPart<span class="operator">-</span><span class="operator">&gt;</span>append(textPart);
    ///  multiPart<span class="operator">-</span><span class="operator">&gt;</span>append(imagePart);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span> url(<span class="string">"http://my.server.tld"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span> request(url);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a></span> manager;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a></span> <span class="operator">*</span>reply <span class="operator">=</span> manager<span class="operator">.</span>post(request<span class="operator">,</span> multiPart);
    ///  multiPart<span class="operator">-</span><span class="operator">&gt;</span>setParent(reply); <span class="comment">// delete the multiPart with the reply</span>
    ///  <span class="comment">// here connect signals etc.</span>
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart2() -> *mut crate::QHttpMultiPart;

    /// <p>This class makes it possible to accept incoming local socket connections.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This class makes it possible to accept incoming local socket connections.</p>
    /// <p>Call <a href="http://doc.qt.io/qt-5/qlocalserver.html#listen">listen</a>() to have the server start listening for incoming connections on a specified key. The <a href="http://doc.qt.io/qt-5/qlocalserver.html#newConnection">newConnection</a>() signal is then emitted each time a client connects to the server.</p>
    /// <p>Call <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>() to accept the pending connection as a connected <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a>. The function returns a pointer to a <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> that can be used for communicating with the client.</p>
    /// <p>If an error occurs, <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverError">serverError</a>() returns the type of error, and <a href="http://doc.qt.io/qt-5/qlocalserver.html#errorString">errorString</a>() can be called to get a human readable description of what happened.</p>
    /// <p>When listening for connections, the name which the server is listening on is available through <a href="http://doc.qt.io/qt-5/qlocalserver.html#serverName">serverName</a>().</p>
    /// <p>Calling <a href="http://doc.qt.io/qt-5/qlocalserver.html#close">close</a>() makes QLocalServer stop listening for incoming connections.</p>
    /// <p>Although QLocalServer is designed for use with an event loop, it's possible to use it without one. In that case, you must use <a href="http://doc.qt.io/qt-5/qlocalserver.html#waitForNewConnection">waitForNewConnection</a>(), which blocks until either a connection is available or a timeout expires.</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_QLocalServer1() -> *mut crate::QLocalServer;

    /// <p>On Windows this is a named pipe and on Unix this is a local domain socket.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>On Windows this is a named pipe and on Unix this is a local domain socket.</p>
    /// <p>If an error occurs, <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() returns the type of error, and <a href="http://doc.qt.io/qt-5/qiodevice.html#errorString">errorString</a>() can be called to get a human readable description of what happened.</p>
    /// <p>Although QLocalSocket is designed for use with an event loop, it's possible to use it without one. In that case, you must use <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForConnected">waitForConnected</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForReadyRead">waitForReadyRead</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">waitForBytesWritten</a>(), and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForDisconnected">waitForDisconnected</a>() which blocks until the operation is complete or the timeout expires.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_QLocalSocket1() -> *mut crate::QLocalSocket;

    /// <p>The Network Access API is constructed around one QNetworkAccessManager object, which holds the common configuration and settings for the requests it sends. It contains the proxy and cache configuration, as well as the signals related to such issues, and reply signals that can be used to monitor the progress of a network operation. One QNetworkAccessManager instance should be enough for the whole Qt application. Since QNetworkAccessManager is based on <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>, it can only be used from the thread it belongs to.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The Network Access API is constructed around one QNetworkAccessManager object, which holds the common configuration and settings for the requests it sends. It contains the proxy and cache configuration, as well as the signals related to such issues, and reply signals that can be used to monitor the progress of a network operation. One QNetworkAccessManager instance should be enough for the whole Qt application. Since QNetworkAccessManager is based on <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a>, it can only be used from the thread it belongs to.</p>
    /// <p>Once a QNetworkAccessManager object has been created, the application can use it to send requests over the network. A group of standard functions are supplied that take a request and optional data, and each return a <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object. The returned object is used to obtain any data returned in response to the corresponding request.</p>
    /// <p>A simple download off the network could be accomplished with:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#QNetworkAccessManager">QNetworkAccessManager</a></span> <span class="operator">*</span>manager <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#QNetworkAccessManager">QNetworkAccessManager</a></span>(<span class="keyword">this</span>);
    ///  connect(manager<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#QNetworkAccessManager">QNetworkAccessManager</a></span><span class="operator">::</span>finished<span class="operator">,</span>
    /// &#32;   &#32;    <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>MyClass<span class="operator">::</span>replyFinished);
    ///
    ///  manager<span class="operator">-</span><span class="operator">&gt;</span>get(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span>(<span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span>(<span class="string">"http://qt-project.org"</span>)));
    /// </pre>
    /// <p>QNetworkAccessManager has an asynchronous API. When the <code>replyFinished</code> slot above is called, the parameter it takes is the <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object containing the downloaded data as well as meta-data (headers, etc.).</p>
    /// <p><b>Note: </b>After the request has finished, it is the responsibility of the user to delete the <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> object at an appropriate time. Do not directly delete it inside the slot connected to <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#finished">finished</a>(). You can use the <a href="http://doc.qt.io/qt-5/qobject.html#deleteLater">deleteLater</a>() function.</p>
    /// <p><b>Note: </b>QNetworkAccessManager queues the requests it receives. The number of requests executed in parallel is dependent on the protocol. Currently, for the HTTP protocol on desktop platforms, 6 requests are executed in parallel for one host/port combination.</p>
    /// <p>A more involved example, assuming the manager is already existent, can be:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span> request;
    ///  request<span class="operator">.</span>setUrl(<span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span>(<span class="string">"http://qt-project.org"</span>));
    ///  request<span class="operator">.</span>setRawHeader(<span class="string">"User-Agent"</span><span class="operator">,</span> <span class="string">"MyOwnBrowser 1.0"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a></span> <span class="operator">*</span>reply <span class="operator">=</span> manager<span class="operator">-</span><span class="operator">&gt;</span>get(request);
    ///  connect(reply<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a></span><span class="operator">::</span>readyRead<span class="operator">,</span> <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>MyClass<span class="operator">::</span>slotReadyRead);
    ///  connect(reply<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a></span><span class="operator">::</span>errorOccurred<span class="operator">,</span>
    /// &#32;   &#32;    <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>MyClass<span class="operator">::</span>slotError);
    ///  connect(reply<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a></span><span class="operator">::</span>sslErrors<span class="operator">,</span>
    /// &#32;   &#32;    <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>MyClass<span class="operator">::</span>slotSslErrors);
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_QNetworkAccessManager1(
    ) -> *mut crate::QNetworkAccessManager;

    /// <p>QNetworkConfigurationManager provides access to the network configurations known to the system and enables applications to detect the system capabilities (with regards to network sessions) at runtime.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QNetworkConfigurationManager provides access to the network configurations known to the system and enables applications to detect the system capabilities (with regards to network sessions) at runtime.</p>
    /// <p>A <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a> abstracts a set of configuration options describing how a network interface has to be configured to connect to a particular target network. QNetworkConfigurationManager maintains and updates the global list of QNetworkConfigurations. Applications can access and filter this list via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">allConfigurations</a>(). If a new configuration is added or an existing one is removed or changed the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationAdded">configurationAdded</a>(), <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationRemoved">configurationRemoved</a>() and <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#configurationChanged">configurationChanged</a>() signals are emitted respectively.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#defaultConfiguration">defaultConfiguration</a>() can be used when intending to immediately create a new network session without caring about the particular configuration. It returns a <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html#StateFlag-enum">QNetworkConfiguration::Discovered</a> configuration. If there are not any discovered ones an invalid configuration is returned.</p>
    /// <p>Some configuration updates may require some time to perform updates. A WLAN scan is such an example. Unless the platform performs internal updates it may be required to manually trigger configuration updates via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">QNetworkConfigurationManager::updateConfigurations</a>(). The completion of the update process is indicated by emitting the <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateCompleted">updateCompleted</a>() signal. The update process ensures that every existing <a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a> instance is updated. There is no need to ask for a renewed configuration list via <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">allConfigurations</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_QNetworkConfigurationManager1(
    ) -> *mut crate::QNetworkConfigurationManager;

    /// <p>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</p>
    /// <p>A cookie is set by a remote server when it replies to a request and it expects the same cookie to be sent back when further requests are sent.</p>
    /// <p>QNetworkCookie holds one such cookie as received from the network. A cookie has a name and a value, but those are opaque to the application (that is, the information stored in them has no meaning to the application). A cookie has an associated path name and domain, which indicate when the cookie should be sent again to the server.</p>
    /// <p>A cookie can also have an expiration date, indicating its validity. If the expiration date is not present, the cookie is considered a "session cookie" and should be discarded when the application exits (or when its concept of session is over).</p>
    /// <p>QNetworkCookie provides a way of parsing a cookie from the HTTP header format using the <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#parseCookies">QNetworkCookie::parseCookies</a>() function. However, when received in a <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a>, the cookie is already parsed.</p>
    /// <p>This class implements cookies as described by the initial cookie specification by Netscape, which is somewhat similar to the <a href="http://www.rfc-editor.org/rfc/rfc2109.txt">RFC 2109</a> specification, plus the "HttpOnly" extension. The more recent <a href="http://www.rfc-editor.org/rfc/rfc2965.txt">RFC 2965</a> specification (which uses the Set-Cookie2 header) is not supported.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie2() -> *mut crate::QNetworkCookie;

    /// <p>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Cookies are small bits of information that stateless protocols like HTTP use to maintain some persistent information across requests.</p>
    /// <p>A cookie is set by a remote server when it replies to a request and it expects the same cookie to be sent back when further requests are sent.</p>
    /// <p>The cookie jar is the object that holds all cookies set in previous requests. Web browsers save their cookie jars to disk in order to conserve permanent cookies across invocations of the application.</p>
    /// <p>QNetworkCookieJar does not implement permanent storage: it only keeps the cookies in memory. Once the QNetworkCookieJar object is deleted, all cookies it held will be discarded as well. If you want to save the cookies, you should derive from this class and implement the saving to disk to your own storage format.</p>
    /// <p>This class implements only the basic security recommended by the cookie specifications and does not implement any cookie acceptance policy (it accepts all cookies set by any requests). In order to override those rules, you should reimplement the <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#cookiesForUrl">cookiesForUrl</a>() and <a href="http://doc.qt.io/qt-5/qnetworkcookiejar.html#setCookiesFromUrl">setCookiesFromUrl</a>() virtual functions. They are called by <a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a> and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> when they detect new cookies and when they require cookies.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookieJar_QNetworkCookieJar1() -> *mut crate::QNetworkCookieJar;

    /// <p>QNetworkDiskCache stores each url in its own file inside of the <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#cacheDirectory">cacheDirectory</a> using <a href="http://doc.qt.io/qt-5/qdatastream.html">QDataStream</a>. Files with a text MimeType are compressed using <a href="http://doc.qt.io/qt-5/qbytearray.html#qCompress">qCompress</a>. Data is written to disk only in <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#updateMetaData">updateMetaData</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QNetworkDiskCache stores each url in its own file inside of the <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#cacheDirectory">cacheDirectory</a> using <a href="http://doc.qt.io/qt-5/qdatastream.html">QDataStream</a>. Files with a text MimeType are compressed using <a href="http://doc.qt.io/qt-5/qbytearray.html#qCompress">qCompress</a>. Data is written to disk only in <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#updateMetaData">updateMetaData</a>().</p>
    /// <p>Currently you cannot share the same cache files with more than one disk cache.</p>
    /// <p>QNetworkDiskCache by default limits the amount of space that the cache will use on the system to 50MB.</p>
    /// <p>Note you have to set the cache directory before it will work.</p>
    /// <p>A network disk cache can be enabled by:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a></span> <span class="operator">*</span>manager <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a></span>(<span class="keyword">this</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#QNetworkDiskCache">QNetworkDiskCache</a></span> <span class="operator">*</span>diskCache <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkdiskcache.html#QNetworkDiskCache">QNetworkDiskCache</a></span>(<span class="keyword">this</span>);
    ///  diskCache<span class="operator">-</span><span class="operator">&gt;</span>setCacheDirectory(<span class="string">"cacheDir"</span>);
    ///  manager<span class="operator">-</span><span class="operator">&gt;</span>setCache(diskCache);
    /// </pre>
    /// <p>When sending requests, to control the preference of when to use the cache and when to use the network, consider the following:</p>
    /// <pre class="cpp"> <span class="comment">// do a normal request (preferred from network, as this is the default)</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span> request(<span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span>(<span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span>(<span class="string">"http://qt-project.org"</span>)));
    ///  manager<span class="operator">-</span><span class="operator">&gt;</span>get(request);
    ///
    ///  <span class="comment">// do a request preferred from cache</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span> request2(<span class="type"><a href="http://doc.qt.io/qt-5/qurl.html">QUrl</a></span>(<span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span>(<span class="string">"http://qt-project.org"</span>)));
    ///  request2<span class="operator">.</span>setAttribute(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>CacheLoadControlAttribute<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>PreferCache);
    ///  manager<span class="operator">-</span><span class="operator">&gt;</span>get(request2);
    /// </pre>
    /// <p>To check whether the response came from the cache or from the network, the following can be applied:</p>
    /// <pre class="cpp"> <span class="type">void</span> replyFinished(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkreply.html">QNetworkReply</a></span> <span class="operator">*</span>reply) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a></span> fromCache <span class="operator">=</span> reply<span class="operator">-</span><span class="operator">&gt;</span>attribute(<span class="type"><a href="http://doc.qt.io/qt-5/qnetworkrequest.html">QNetworkRequest</a></span><span class="operator">::</span>SourceIsFromCacheAttribute);
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"page from cache?"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> fromCache<span class="operator">.</span>toBool();
    ///  }
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QNetworkDiskCache_QNetworkDiskCache1() -> *mut crate::QNetworkDiskCache;

    /// <p>QNetworkProxyFactory is an extension to <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, allowing applications to have a more fine-grained control over which proxy servers are used, depending on the socket requesting the proxy. This allows an application to apply different settings, according to the protocol or destination hostname, for instance.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QNetworkProxyFactory is an extension to <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a>, allowing applications to have a more fine-grained control over which proxy servers are used, depending on the socket requesting the proxy. This allows an application to apply different settings, according to the protocol or destination hostname, for instance.</p>
    /// <p>QNetworkProxyFactory can be set globally for an application, in which case it will override any global proxies set with <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#setApplicationProxy">QNetworkProxy::setApplicationProxy</a>(). If set globally, any sockets created with Qt will query the factory to determine the proxy to be used.</p>
    /// <p>A factory can also be set in certain frameworks that support multiple connections, such as <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a>. When set on such object, the factory will be queried for sockets created by that framework only.</p>
    /// <a name="system-proxies"></a></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_operator_(
        this_ptr: *mut crate::QNetworkProxyFactory,
        other: *const crate::QNetworkProxyFactory,
    ) -> *mut crate::QNetworkProxyFactory;

    /// <p>This class makes it possible to accept incoming TCP connections. You can specify the port or have QTcpServer pick one automatically. You can listen on a specific address or on all the machine's addresses.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This class makes it possible to accept incoming TCP connections. You can specify the port or have QTcpServer pick one automatically. You can listen on a specific address or on all the machine's addresses.</p>
    /// <p>Call <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">listen</a>() to have the server listen for incoming connections. The <a href="http://doc.qt.io/qt-5/qtcpserver.html#newConnection">newConnection</a>() signal is then emitted each time a client connects to the server.</p>
    /// <p>Call <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>() to accept the pending connection as a connected <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a>. The function returns a pointer to a <a href="http://doc.qt.io/qt-5/qtcpsocket.html">QTcpSocket</a> in <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">QAbstractSocket::ConnectedState</a> that you can use for communicating with the client.</p>
    /// <p>If an error occurs, <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverError">serverError</a>() returns the type of error, and <a href="http://doc.qt.io/qt-5/qtcpserver.html#errorString">errorString</a>() can be called to get a human readable description of what happened.</p>
    /// <p>When listening for connections, the address and port on which the server is listening are available as <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverAddress">serverAddress</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#serverPort">serverPort</a>().</p>
    /// <p>Calling <a href="http://doc.qt.io/qt-5/qtcpserver.html#close">close</a>() makes QTcpServer stop listening for incoming connections.</p>
    /// <p>Although QTcpServer is mostly designed for use with an event loop, it's possible to use it without one. In that case, you must use <a href="http://doc.qt.io/qt-5/qtcpserver.html#waitForNewConnection">waitForNewConnection</a>(), which blocks until either a connection is available or a timeout expires.</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_QTcpServer1() -> *mut crate::QTcpServer;

    /// <p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    /// <p>Elliptic curves can be constructed from a "short name" (SN) (<a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#fromShortName">fromShortName</a>()), and by a call to <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</a>().</p>
    /// <p>QSslEllipticCurve instances can be compared for equality and can be used as keys in <a href="http://doc.qt.io/qt-5/qhash-proxy.html">QHash</a> and <a href="http://doc.qt.io/qt-5/qset.html">QSet</a>. They cannot be used as key in a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>.</p>
    /// <p><b>Note: </b>This class is currently only supported in OpenSSL.</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_dQSslEllipticCurve(
        this_ptr: *mut crate::QSslEllipticCurve,
    );

    /// <p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    /// <p>Elliptic curves can be constructed from a "short name" (SN) (<a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#fromShortName">fromShortName</a>()), and by a call to <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</a>().</p>
    /// <p>QSslEllipticCurve instances can be compared for equality and can be used as keys in <a href="http://doc.qt.io/qt-5/qhash-proxy.html">QHash</a> and <a href="http://doc.qt.io/qt-5/qset.html">QSet</a>. They cannot be used as key in a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>.</p>
    /// <p><b>Note: </b>This class is currently only supported in OpenSSL.</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_QSslEllipticCurve1(
        other: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslellipticcurve.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The class QSslEllipticCurve represents an elliptic curve for use by elliptic-curve cipher algorithms.</p>
    /// <p>Elliptic curves can be constructed from a "short name" (SN) (<a href="http://doc.qt.io/qt-5/qsslellipticcurve.html#fromShortName">fromShortName</a>()), and by a call to <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</a>().</p>
    /// <p>QSslEllipticCurve instances can be compared for equality and can be used as keys in <a href="http://doc.qt.io/qt-5/qhash-proxy.html">QHash</a> and <a href="http://doc.qt.io/qt-5/qset.html">QSet</a>. They cannot be used as key in a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>.</p>
    /// <p><b>Note: </b>This class is currently only supported in OpenSSL.</p></div>
    pub fn ctr_qt_network_ffi_QSslEllipticCurve_operator_(
        this_ptr: *mut crate::QSslEllipticCurve,
        other: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>UDP (User Datagram Protocol) is a lightweight, unreliable, datagram-oriented, connectionless protocol. It can be used when reliability isn't important. QUdpSocket is a subclass of <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> that allows you to send and receive UDP datagrams.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>UDP (User Datagram Protocol) is a lightweight, unreliable, datagram-oriented, connectionless protocol. It can be used when reliability isn't important. QUdpSocket is a subclass of <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> that allows you to send and receive UDP datagrams.</p>
    /// <p>The most common way to use this class is to bind to an address and port using <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind">bind</a>(), then call <a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>() and <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">readDatagram</a>() / <a href="http://doc.qt.io/qt-5/qudpsocket.html#receiveDatagram">receiveDatagram</a>() to transfer data. If you want to use the standard <a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a> functions <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>(), <a href="http://doc.qt.io/qt-5/qiodevice.html#readLine">readLine</a>(), <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>(), etc., you must first connect the socket directly to a peer by calling <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>().</p>
    /// <p>The socket emits the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal every time a datagram is written to the network. If you just want to send datagrams, you don't need to call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind">bind</a>().</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal is emitted whenever datagrams arrive. In that case, <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>() returns <code>true</code>. Call <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>() to obtain the size of the first pending datagram, and <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">readDatagram</a>() or <a href="http://doc.qt.io/qt-5/qudpsocket.html#receiveDatagram">receiveDatagram</a>() to read it.</p>
    /// <p><b>Note: </b>An incoming datagram should be read when you receive the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal, otherwise this signal will not be emitted for the next datagram.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type">void</span> Server<span class="operator">::</span>initSocket()
    ///  {
    /// &#32;    udpSocket <span class="operator">=</span> <span class="keyword">new</span> <span class="type"><a href="http://doc.qt.io/qt-5/qudpsocket.html#QUdpSocket">QUdpSocket</a></span>(<span class="keyword">this</span>);
    /// &#32;    udpSocket<span class="operator">-</span><span class="operator">&gt;</span>bind(<span class="type"><a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a></span><span class="operator">::</span>LocalHost<span class="operator">,</span> <span class="number">7755</span>);
    ///
    /// &#32;    connect(udpSocket<span class="operator">,</span> <span class="operator">&amp;</span><span class="type"><a href="http://doc.qt.io/qt-5/qudpsocket.html#QUdpSocket">QUdpSocket</a></span><span class="operator">::</span>readyRead<span class="operator">,</span>
    /// &#32;   &#32;   &#32;    <span class="keyword">this</span><span class="operator">,</span> <span class="operator">&amp;</span>Server<span class="operator">::</span>readPendingDatagrams);
    ///  }
    ///
    ///  <span class="type">void</span> Server<span class="operator">::</span>readPendingDatagrams()
    ///  {
    /// &#32;    <span class="keyword">while</span> (udpSocket<span class="operator">-</span><span class="operator">&gt;</span>hasPendingDatagrams()) {
    /// &#32;   &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a></span> datagram <span class="operator">=</span> udpSocket<span class="operator">-</span><span class="operator">&gt;</span>receiveDatagram();
    /// &#32;   &#32;    processTheDatagram(datagram);
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p>QUdpSocket also supports UDP multicast. Use <a href="http://doc.qt.io/qt-5/qudpsocket.html#joinMulticastGroup">joinMulticastGroup</a>() and <a href="http://doc.qt.io/qt-5/qudpsocket.html#leaveMulticastGroup">leaveMulticastGroup</a>() to control group membership, and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketOption-enum">QAbstractSocket::MulticastTtlOption</a> and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketOption-enum">QAbstractSocket::MulticastLoopbackOption</a> to set the TTL and loopback socket options. Use <a href="http://doc.qt.io/qt-5/qudpsocket.html#setMulticastInterface">setMulticastInterface</a>() to control the outgoing interface for multicast datagrams, and <a href="http://doc.qt.io/qt-5/qudpsocket.html#multicastInterface">multicastInterface</a>() to query it.</p>
    /// <p>With QUdpSocket, you can also establish a virtual connection to a UDP server using <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>() and then use <a href="http://doc.qt.io/qt-5/qiodevice.html#read">read</a>() and <a href="http://doc.qt.io/qt-5/qiodevice.html#write">write</a>() to exchange datagrams without specifying the receiver for each datagram.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qtnetwork-broadcastsender-example.html">Broadcast Sender</a>, <a href="http://doc.qt.io/qt-5/qtnetwork-broadcastreceiver-example.html">Broadcast Receiver</a>, <a href="http://doc.qt.io/qt-5/qtnetwork-multicastsender-example.html">Multicast Sender</a>, and <a href="http://doc.qt.io/qt-5/qtnetwork-multicastreceiver-example.html">Multicast Receiver</a> examples illustrate how to use QUdpSocket in applications.</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_QUdpSocket1() -> *mut crate::QUdpSocket;

    /// <p>Constructs an empty pair. The <code>first</code> and <code>second</code> elements are initialized with <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>s.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#QPair">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty pair. The <code>first</code> and <code>second</code> elements are initialized with <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>s.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair(
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Constructs an empty pair. The <code>first</code> and <code>second</code> elements are initialized with <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>s.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#QPair">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty pair. The <code>first</code> and <code>second</code> elements are initialized with <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>s.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_QPair() -> *mut crate::QPairOfQHostAddressInt;

    /// <p>Constructs a pair and initializes the <code>first</code> element with <i>value1</i> and the <code>second</code> element with <i>value2</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#QPair-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a pair and initializes the <code>first</code> element with <i>value1</i> and the <code>second</code> element with <i>value2</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qpair.html#qMakePair">qMakePair</a>().</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair1(
        t1: *const ::qt_core::QByteArray,
        t2: *const ::qt_core::QByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Constructs a pair and initializes the <code>first</code> element with <i>value1</i> and the <code>second</code> element with <i>value2</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#QPair-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a pair and initializes the <code>first</code> element with <i>value1</i> and the <code>second</code> element with <i>value2</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qpair.html#qMakePair">qMakePair</a>().</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_QPair1(
        t1: *const crate::QHostAddress,
        t2: *const ::std::os::raw::c_int,
    ) -> *mut crate::QPairOfQHostAddressInt;

    /// <p>Swaps this pair with <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this pair with <i>other</i>.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> <a href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qSwap">qSwap</a>(<span class="keyword">this</span><span class="operator">-</span><span class="operator">&gt;</span>first<span class="operator">,</span> other<span class="operator">.</span>first);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qSwap">qSwap</a>(<span class="keyword">this</span><span class="operator">-</span><span class="operator">&gt;</span>second<span class="operator">,</span> other<span class="operator">.</span>second);
    /// </pre>
    /// <p>Swap overloads are found in namespace <code>std</code> as well as via argument-dependent lookup (ADL) in the namespace of <code>T</code> .</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_swap(
        this_ptr: *mut crate::QPairOfQByteArrayQByteArray,
        other: *mut crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>Swaps this pair with <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps this pair with <i>other</i>.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> <a href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qSwap">qSwap</a>(<span class="keyword">this</span><span class="operator">-</span><span class="operator">&gt;</span>first<span class="operator">,</span> other<span class="operator">.</span>first);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms-obsolete.html#qSwap">qSwap</a>(<span class="keyword">this</span><span class="operator">-</span><span class="operator">&gt;</span>second<span class="operator">,</span> other<span class="operator">.</span>second);
    /// </pre>
    /// <p>Swap overloads are found in namespace <code>std</code> as well as via argument-dependent lookup (ADL) in the namespace of <code>T</code> .</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_swap(
        this_ptr: *mut crate::QPairOfQHostAddressInt,
        other: *mut crate::QPairOfQHostAddressInt,
    );

    /// <p>Returns <code>true</code> if <i>lhs</i> and <i>rhs</i> are equal, otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#operator-eq-eq">C++ documentation</a> for <span style='color: green;'>```bool operator==(const QByteArray::FromBase64Result &lhs, const QByteArray::FromBase64Result &rhs)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>lhs</i> and <i>rhs</i> are equal, otherwise returns <code>false</code>.</p>
    /// <p><i>lhs</i> and <i>rhs</i> are equal if and only if they contain the same decoding status and, if the status is QByteArray::Base64DecodingStatus::Ok, if and only if they contain the same decoded data.</p></div>
    pub fn ctr_qt_network_ffi_operator__33(
        p1: *const crate::QPairOfQByteArrayQByteArray,
        p2: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>lhs</i> and <i>rhs</i> are equal, otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#operator-eq-eq">C++ documentation</a> for <span style='color: green;'>```bool operator==(const QByteArray::FromBase64Result &lhs, const QByteArray::FromBase64Result &rhs)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>lhs</i> and <i>rhs</i> are equal, otherwise returns <code>false</code>.</p>
    /// <p><i>lhs</i> and <i>rhs</i> are equal if and only if they contain the same decoding status and, if the status is QByteArray::Base64DecodingStatus::Ok, if and only if they contain the same decoded data.</p></div>
    pub fn ctr_qt_network_ffi_operator__34(
        p1: *const crate::QPairOfQHostAddressInt,
        p2: *const crate::QPairOfQHostAddressInt,
    ) -> bool;

    pub fn ctr_qt_network_ffi_operator_9(
        p1: *const crate::QPairOfQByteArrayQByteArray,
        p2: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    pub fn ctr_qt_network_ffi_operator_11(
        p1: *const crate::QPairOfQByteArrayQByteArray,
        p2: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is less than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qchar.html#operator-lt-eq">C++ documentation</a> for <span style='color: green;'>```bool operator<=(QChar c1, QChar c2)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is less than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_operator__37(
        p1: *const crate::QPairOfQByteArrayQByteArray,
        p2: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is greater than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qchar.html#operator-gt-eq">C++ documentation</a> for <span style='color: green;'>```bool operator>=(QChar c1, QChar c2)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is greater than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_operator__39(
        p1: *const crate::QPairOfQByteArrayQByteArray,
        p2: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt; that contains <i>value1</i> and <i>value2</i>. Example:</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#qMakePair">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt; that contains <i>value1</i> and <i>value2</i>. Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> <span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(qMakePair(<span class="number">66</span><span class="operator">,</span> M_PI));
    /// </pre>
    /// <p>This is equivalent to <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt;(<i>value1</i>, <i>value2</i>), but usually requires less typing.</p></div>
    pub fn ctr_qt_network_ffi_qMakePair(
        x: *const ::qt_core::QByteArray,
        y: *const ::qt_core::QByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt; that contains <i>value1</i> and <i>value2</i>. Example:</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html#qMakePair">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt; that contains <i>value1</i> and <i>value2</i>. Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> <span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(qMakePair(<span class="number">66</span><span class="operator">,</span> M_PI));
    /// </pre>
    /// <p>This is equivalent to <a href="http://doc.qt.io/qt-5/qpair.html">QPair</a>&lt;T1, T2&gt;(<i>value1</i>, <i>value2</i>), but usually requires less typing.</p></div>
    pub fn ctr_qt_network_ffi_qMakePair1(
        x: *const crate::QHostAddress,
        y: *const ::std::os::raw::c_int,
    ) -> *mut crate::QPairOfQHostAddressInt;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash6(
        key: *const crate::QPairOfQByteArrayQByteArray,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash7(
        key: *const crate::QPairOfQHostAddressInt,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs an empty vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_QVector() -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Constructs an empty vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_QVector() -> *mut crate::QVectorOfQSslError;

    /// <p>Constructs an empty vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector(
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Constructs an empty vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_QVector() -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    /// <p>The elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_QVector1(
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    /// <p>The elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_QVector1(
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    /// <p>The elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector1(
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements.</p>
    /// <p>The elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_QVector1(
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_QVector2(
        size: ::std::os::raw::c_int,
        t: *const crate::QOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_QVector2(
        size: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector2(
        size: ::std::os::raw::c_int,
        t: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a vector with an initial size of <i>size</i> elements. Each element is initialized with <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_QVector2(
        size: ::std::os::raw::c_int,
        t: *const crate::QHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QVector is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QVector from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_QVector3(
        v: *const crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QVector is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QVector from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_QVector3(
        v: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QVector is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QVector from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_QVector3(
        v: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#QVector-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QVector is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QVector from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_QVector3(
        v: *const crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Destroys the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#dtor.QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_dQVector(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Destroys the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#dtor.QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_dQVector(this_ptr: *mut crate::QVectorOfQSslError);

    /// <p>Destroys the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#dtor.QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_dQVector(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Destroys the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#dtor.QVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_dQVector(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator_(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        v: *const crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator_(
        this_ptr: *mut crate::QVectorOfQSslError,
        v: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator_(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        v: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this vector and returns a reference to this vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator_(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        v: *const crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_swap(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        other: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_swap(
        this_ptr: *mut crate::QVectorOfQSslError,
        other: *mut crate::QVectorOfQSslError,
    );

    /// <p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_swap(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        other: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps vector <i>other</i> with this vector. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_swap(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        other: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    /// <p>Two vectors are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        v: *const crate::QVectorOfQOcspResponse,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    /// <p>Two vectors are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__(
        this_ptr: *const crate::QVectorOfQSslError,
        v: *const crate::QVectorOfQSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    /// <p>Two vectors are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        v: *const crate::QVectorOfQSslEllipticCurve,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this vector; otherwise returns <code>false</code>.</p>
    /// <p>Two vectors are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        v: *const crate::QVectorOfQHstsPolicy,
    ) -> bool;

    /// <p>Returns the number of items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_size(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_size(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_size(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_size(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_isEmpty(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_isEmpty(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_isEmpty(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector has size 0; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_isEmpty(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> bool;

    /// <p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#resize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    /// <p>Since Qt 5.6, resize() doesn't shrink the capacity anymore. To shed excess capacity, use <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_resize(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        size: ::std::os::raw::c_int,
    );

    /// <p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#resize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    /// <p>Since Qt 5.6, resize() doesn't shrink the capacity anymore. To shed excess capacity, use <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_resize(
        this_ptr: *mut crate::QVectorOfQSslError,
        size: ::std::os::raw::c_int,
    );

    /// <p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#resize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    /// <p>Since Qt 5.6, resize() doesn't shrink the capacity anymore. To shed excess capacity, use <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_resize(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        size: ::std::os::raw::c_int,
    );

    /// <p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#resize">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the size of the vector to <i>size</i>. If <i>size</i> is greater than the current size, elements are added to the end; the new elements are initialized with a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If <i>size</i> is less than the current size, elements are removed from the end.</p>
    /// <p>Since Qt 5.6, resize() doesn't shrink the capacity anymore. To shed excess capacity, use <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_resize(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        size: ::std::os::raw::c_int,
    );

    /// <p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#capacity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the vector, call <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_capacity(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#capacity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the vector, call <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_capacity(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#capacity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the vector, call <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_capacity(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#capacity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the maximum number of items that can be stored in the vector without forcing a reallocation.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the vector, call <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_capacity(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    /// <p>If <i>size</i> is an underestimate, the worst that will happen is that the <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> will be a bit slower. If <i>size</i> is an overestimate, you may have used more memory than the normal <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> growth strategy would have allocated—or you may have used less.</p>
    /// <p>An alternative to reserve() is calling <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>(). Whether or not that is faster than reserve() depends on the element type, because <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() default-constructs all elements, and requires assignment to existing entries rather than calling <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>(), which copy- or move-constructs. For simple types, like <code>int</code> or <code>double</code>, <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() is typically faster, but for anything more complex, you should prefer reserve().</p>
    /// <p><b>Warning:</b> If the size passed to <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() was underestimated, you run out of allocated space and into undefined behavior. This problem does not exist with reserve(), because it treats the size as just a hint.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_reserve(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        size: ::std::os::raw::c_int,
    );

    /// <p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    /// <p>If <i>size</i> is an underestimate, the worst that will happen is that the <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> will be a bit slower. If <i>size</i> is an overestimate, you may have used more memory than the normal <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> growth strategy would have allocated—or you may have used less.</p>
    /// <p>An alternative to reserve() is calling <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>(). Whether or not that is faster than reserve() depends on the element type, because <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() default-constructs all elements, and requires assignment to existing entries rather than calling <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>(), which copy- or move-constructs. For simple types, like <code>int</code> or <code>double</code>, <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() is typically faster, but for anything more complex, you should prefer reserve().</p>
    /// <p><b>Warning:</b> If the size passed to <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() was underestimated, you run out of allocated space and into undefined behavior. This problem does not exist with reserve(), because it treats the size as just a hint.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_reserve(
        this_ptr: *mut crate::QVectorOfQSslError,
        size: ::std::os::raw::c_int,
    );

    /// <p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    /// <p>If <i>size</i> is an underestimate, the worst that will happen is that the <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> will be a bit slower. If <i>size</i> is an overestimate, you may have used more memory than the normal <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> growth strategy would have allocated—or you may have used less.</p>
    /// <p>An alternative to reserve() is calling <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>(). Whether or not that is faster than reserve() depends on the element type, because <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() default-constructs all elements, and requires assignment to existing entries rather than calling <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>(), which copy- or move-constructs. For simple types, like <code>int</code> or <code>double</code>, <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() is typically faster, but for anything more complex, you should prefer reserve().</p>
    /// <p><b>Warning:</b> If the size passed to <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() was underestimated, you run out of allocated space and into undefined behavior. This problem does not exist with reserve(), because it treats the size as just a hint.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_reserve(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        size: ::std::os::raw::c_int,
    );

    /// <p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Attempts to allocate memory for at least <i>size</i> elements. If you know in advance how large the vector will be, you should call this function to prevent reallocations and memory fragmentation.</p>
    /// <p>If <i>size</i> is an underestimate, the worst that will happen is that the <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> will be a bit slower. If <i>size</i> is an overestimate, you may have used more memory than the normal <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> growth strategy would have allocated—or you may have used less.</p>
    /// <p>An alternative to reserve() is calling <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>(). Whether or not that is faster than reserve() depends on the element type, because <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() default-constructs all elements, and requires assignment to existing entries rather than calling <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>(), which copy- or move-constructs. For simple types, like <code>int</code> or <code>double</code>, <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() is typically faster, but for anything more complex, you should prefer reserve().</p>
    /// <p><b>Warning:</b> If the size passed to <a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>() was underestimated, you run out of allocated space and into undefined behavior. This problem does not exist with reserve(), because it treats the size as just a hint.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_reserve(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        size: ::std::os::raw::c_int,
    );

    /// <p>Releases any memory not required to store the items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Releases any memory not required to store the items.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_squeeze(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Releases any memory not required to store the items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Releases any memory not required to store the items.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_squeeze(this_ptr: *mut crate::QVectorOfQSslError);

    /// <p>Releases any memory not required to store the items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Releases any memory not required to store the items.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_squeeze(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Releases any memory not required to store the items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Releases any memory not required to store the items.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>'s memory usage. In general, you will rarely ever need to call this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_squeeze(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_detach(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslError_detach(this_ptr: *mut crate::QVectorOfQSslError);

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_detach(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_detach(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_isDetached(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QSslError_isDetached(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_isDetached(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_isDetached(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_setSharable(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslError_setSharable(
        this_ptr: *mut crate::QVectorOfQSslError,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_setSharable(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_setSharable(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_isSharedWith(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        other: *const crate::QVectorOfQOcspResponse,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QSslError_isSharedWith(
        this_ptr: *const crate::QVectorOfQSslError,
        other: *const crate::QVectorOfQSslError,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_isSharedWith(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        other: *const crate::QVectorOfQSslEllipticCurve,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_isSharedWith(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        other: *const crate::QVectorOfQHstsPolicy,
    ) -> bool;

    /// <p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> vector(<span class="number">10</span>);
    ///  <span class="type">int</span> <span class="operator">*</span>data <span class="operator">=</span> vector<span class="operator">.</span>data();
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">10</span>; <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    data<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">*</span> i;
    /// </pre>
    /// <p>The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constData">constData</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_data(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> vector(<span class="number">10</span>);
    ///  <span class="type">int</span> <span class="operator">*</span>data <span class="operator">=</span> vector<span class="operator">.</span>data();
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">10</span>; <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    data<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">*</span> i;
    /// </pre>
    /// <p>The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constData">constData</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_data(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> vector(<span class="number">10</span>);
    ///  <span class="type">int</span> <span class="operator">*</span>data <span class="operator">=</span> vector<span class="operator">.</span>data();
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">10</span>; <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    data<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">*</span> i;
    /// </pre>
    /// <p>The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constData">constData</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_data(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the data stored in the vector. The pointer can be used to access and modify the items in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> vector(<span class="number">10</span>);
    ///  <span class="type">int</span> <span class="operator">*</span>data <span class="operator">=</span> vector<span class="operator">.</span>data();
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">10</span>; <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    data<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span> <span class="number">2</span> <span class="operator">*</span> i;
    /// </pre>
    /// <p>The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constData">constData</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_data(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_data1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_data1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_data1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#data-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_data1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_constData(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_constData(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_constData(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const pointer to the data stored in the vector. The pointer can be used to access the items in the vector. The pointer remains valid as long as the vector isn't reallocated.</p>
    /// <p>This function is mostly useful to pass a vector to a function that accepts a plain C++ array.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#data">data</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_constData(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Removes all the elements from the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the elements from the vector.</p>
    /// <p><b>Note: </b>Until Qt 5.6, this also released the memory used by the vector. From Qt 5.7, the capacity is preserved. To shed all capacity, swap with a default-constructed vector:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span> v <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span>()<span class="operator">.</span>swap(v);
    ///  Q_ASSERT(v<span class="operator">.</span>capacity() <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>);
    /// </pre>
    /// <p>or call <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_clear(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Removes all the elements from the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the elements from the vector.</p>
    /// <p><b>Note: </b>Until Qt 5.6, this also released the memory used by the vector. From Qt 5.7, the capacity is preserved. To shed all capacity, swap with a default-constructed vector:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span> v <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span>()<span class="operator">.</span>swap(v);
    ///  Q_ASSERT(v<span class="operator">.</span>capacity() <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>);
    /// </pre>
    /// <p>or call <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_clear(this_ptr: *mut crate::QVectorOfQSslError);

    /// <p>Removes all the elements from the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the elements from the vector.</p>
    /// <p><b>Note: </b>Until Qt 5.6, this also released the memory used by the vector. From Qt 5.7, the capacity is preserved. To shed all capacity, swap with a default-constructed vector:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span> v <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span>()<span class="operator">.</span>swap(v);
    ///  Q_ASSERT(v<span class="operator">.</span>capacity() <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>);
    /// </pre>
    /// <p>or call <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_clear(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Removes all the elements from the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the elements from the vector.</p>
    /// <p><b>Note: </b>Until Qt 5.6, this also released the memory used by the vector. From Qt 5.7, the capacity is preserved. To shed all capacity, swap with a default-constructed vector:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span> v <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>;
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span>()<span class="operator">.</span>swap(v);
    ///  Q_ASSERT(v<span class="operator">.</span>capacity() <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>);
    /// </pre>
    /// <p>or call <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_clear(this_ptr: *mut crate::QVectorOfQHstsPolicy);

    /// <p>Returns the item at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the vector.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_at(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QOcspResponse;

    /// <p>Returns the item at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the vector.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_at(
        this_ptr: *const crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslError;

    /// <p>Returns the item at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the vector.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_at(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>Returns the item at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the vector.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_at(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p>Note that using non-const operators can cause <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> to do a deep copy.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__2(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p>Note that using non-const operators can cause <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> to do a deep copy.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__2(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p>Note that using non-const operators can cause <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> to do a deep copy.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__2(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p>Note that using non-const operators can cause <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> to do a deep copy.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__2(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as at(<i>i</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__3(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as at(<i>i</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__3(
        this_ptr: *const crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as at(<i>i</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__3(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as at(<i>i</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__3(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QHstsPolicy;

    /// <p>Inserts <i>value</i> at the end of the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  vector<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> three <span class="operator">=</span> <span class="string">"three"</span>;
    ///  vector<span class="operator">.</span>append(three);
    ///  <span class="comment">// vector: ["one", "two", "three"]</span>
    ///  <span class="comment">// three: "three"</span>
    /// </pre>
    /// <p>This is the same as calling resize(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() + 1) and assigning <i>value</i> to the new last element in the vector.</p>
    /// <p>This operation is relatively fast, because <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> typically allocates more memory than necessary, so it can grow without reallocating the entire vector each time.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_append(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    );

    /// <p>Inserts <i>value</i> at the end of the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  vector<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> three <span class="operator">=</span> <span class="string">"three"</span>;
    ///  vector<span class="operator">.</span>append(three);
    ///  <span class="comment">// vector: ["one", "two", "three"]</span>
    ///  <span class="comment">// three: "three"</span>
    /// </pre>
    /// <p>This is the same as calling resize(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() + 1) and assigning <i>value</i> to the new last element in the vector.</p>
    /// <p>This operation is relatively fast, because <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> typically allocates more memory than necessary, so it can grow without reallocating the entire vector each time.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_append(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>Inserts <i>value</i> at the end of the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  vector<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> three <span class="operator">=</span> <span class="string">"three"</span>;
    ///  vector<span class="operator">.</span>append(three);
    ///  <span class="comment">// vector: ["one", "two", "three"]</span>
    ///  <span class="comment">// three: "three"</span>
    /// </pre>
    /// <p>This is the same as calling resize(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() + 1) and assigning <i>value</i> to the new last element in the vector.</p>
    /// <p>This operation is relatively fast, because <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> typically allocates more memory than necessary, so it can grow without reallocating the entire vector each time.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_append(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    );

    /// <p>Inserts <i>value</i> at the end of the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  vector<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> three <span class="operator">=</span> <span class="string">"three"</span>;
    ///  vector<span class="operator">.</span>append(three);
    ///  <span class="comment">// vector: ["one", "two", "three"]</span>
    ///  <span class="comment">// three: "three"</span>
    /// </pre>
    /// <p>This is the same as calling resize(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() + 1) and assigning <i>value</i> to the new last element in the vector.</p>
    /// <p>This operation is relatively fast, because <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> typically allocates more memory than necessary, so it can grow without reallocating the entire vector each time.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_append(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> vector to this vector.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_append2(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        l: *const crate::QVectorOfQOcspResponse,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> vector to this vector.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_append2(
        this_ptr: *mut crate::QVectorOfQSslError,
        l: *const crate::QVectorOfQSslError,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> vector to this vector.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_append2(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        l: *const crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#append-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> vector to this vector.</p>
    /// <p>This function was introduced in Qt 5.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_append2(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        l: *const crate::QVectorOfQHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_prepend1(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslError_prepend1(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_prepend1(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    );

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_prepend1(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_insert1(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        t: *const crate::QOcspResponse,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslError_insert1(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_insert1(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslEllipticCurve,
    );

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_insert1(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        t: *const crate::QHstsPolicy,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#insert-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>count</i> copies of <i>value</i> at index position <i>i</i> in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">2.718</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">1.442</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">0.4342</span>;
    ///  vector<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">9.9</span>);
    ///  <span class="comment">// vector: [2.718, 9.9, 9.9, 9.9, 1.442, 0.4342]</span>
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_insert2(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        t: *const crate::QOcspResponse,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#insert-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>count</i> copies of <i>value</i> at index position <i>i</i> in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">2.718</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">1.442</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">0.4342</span>;
    ///  vector<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">9.9</span>);
    ///  <span class="comment">// vector: [2.718, 9.9, 9.9, 9.9, 1.442, 0.4342]</span>
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_insert2(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#insert-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>count</i> copies of <i>value</i> at index position <i>i</i> in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">2.718</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">1.442</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">0.4342</span>;
    ///  vector<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">9.9</span>);
    ///  <span class="comment">// vector: [2.718, 9.9, 9.9, 9.9, 1.442, 0.4342]</span>
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_insert2(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        t: *const crate::QSslEllipticCurve,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#insert-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>count</i> copies of <i>value</i> at index position <i>i</i> in the vector.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">2.718</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">1.442</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">0.4342</span>;
    ///  vector<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="number">3</span><span class="operator">,</span> <span class="number">9.9</span>);
    ///  <span class="comment">// vector: [2.718, 9.9, 9.9, 9.9, 1.442, 0.4342]</span>
    /// </pre></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_insert2(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
        t: *const crate::QHstsPolicy,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_replace(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        t: *const crate::QOcspResponse,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_replace(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_replace(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslEllipticCurve,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>.</p>
    /// <p><i>i</i> must be a valid index position in the vector (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_replace(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        t: *const crate::QHstsPolicy,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes the element at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_remove(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes the element at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_remove(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes the element at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_remove(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes the element at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_remove(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes <i>count</i> elements from the middle of the vector, starting at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_remove1(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes <i>count</i> elements from the middle of the vector, starting at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_remove1(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes <i>count</i> elements from the middle of the vector, starting at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_remove1(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#remove-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes <i>count</i> elements from the middle of the vector, starting at index position <i>i</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#insert">insert</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fill">fill</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_remove1(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );

    /// <p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_removeFirst(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_removeFirst(
        this_ptr: *mut crate::QVectorOfQSslError,
    );

    /// <p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeFirst(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector. Calling this function is equivalent to calling remove(0). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_removeFirst(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_removeLast(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_removeLast(
        this_ptr: *mut crate::QVectorOfQSslError,
    );

    /// <p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeLast(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the vector. Calling this function is equivalent to calling remove(<a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() - 1). The vector must not be empty. If the vector can be empty, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_removeLast(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_takeFirst(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_takeFirst(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeFirst(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the vector and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_takeFirst(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_takeLast(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_takeLast(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeLast(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This function assumes the vector is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_takeLast(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_fill(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_fill(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_fill(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_fill(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
        size: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_indexOf(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_indexOf(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_indexOf(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_indexOf(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_lastIndexOf(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_lastIndexOf(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_lastIndexOf(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_lastIndexOf(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_contains(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_contains(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_contains(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the vector contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_contains(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_count(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_count(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_count(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the vector.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_count(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the element at index position <i>i</i>. Equivalent to</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i>. Equivalent to</p>
    /// <pre class="cpp"> remove(i);
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">QList::removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_removeAt(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the element at index position <i>i</i>. Equivalent to</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i>. Equivalent to</p>
    /// <pre class="cpp"> remove(i);
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">QList::removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_removeAt(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the element at index position <i>i</i>. Equivalent to</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i>. Equivalent to</p>
    /// <pre class="cpp"> remove(i);
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">QList::removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeAt(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the element at index position <i>i</i>. Equivalent to</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i>. Equivalent to</p>
    /// <pre class="cpp"> remove(i);
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#remove">remove</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">QList::removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_removeAt(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeOne">removeOne</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">QList::removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_removeAll(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeOne">removeOne</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">QList::removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_removeAll(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeOne">removeOne</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">QList::removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeAll(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all elements that compare equal to <i>t</i> from the vector. Returns the number of elements removed, if any.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeOne">removeOne</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">QList::removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_removeAll(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeAll">removeAll</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">QList::removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_removeOne(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> bool;

    /// <p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeAll">removeAll</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">QList::removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_removeOne(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeAll">removeAll</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">QList::removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_removeOne(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first element that compares equal to <i>t</i> from the vector. Returns whether an element was, in fact, removed.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#removeAll">removeAll</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">QList::removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_removeOne(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#length">QList::length</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_length(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#length">QList::length</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_length(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#length">QList::length</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_length(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>().</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#count-1">count</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#length">QList::length</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_length(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the element at index position <i>i</i> and returns it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i> and returns it.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> T t <span class="operator">=</span> at(i);
    ///  remove(i);
    ///  <span class="keyword">return</span> t;
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">QList::takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_takeAt(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QOcspResponse;

    /// <p>Removes the element at index position <i>i</i> and returns it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i> and returns it.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> T t <span class="operator">=</span> at(i);
    ///  remove(i);
    ///  <span class="keyword">return</span> t;
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">QList::takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_takeAt(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Removes the element at index position <i>i</i> and returns it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i> and returns it.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> T t <span class="operator">=</span> at(i);
    ///  remove(i);
    ///  <span class="keyword">return</span> t;
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">QList::takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_takeAt(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Removes the element at index position <i>i</i> and returns it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the element at index position <i>i</i> and returns it.</p>
    /// <p>Equivalent to</p>
    /// <pre class="cpp"> T t <span class="operator">=</span> at(i);
    ///  remove(i);
    ///  <span class="keyword">return</span> t;
    /// </pre>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#takeLast">takeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">QList::takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_takeAt(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">QList::move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_move(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">QList::move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_move(
        this_ptr: *mut crate::QVectorOfQSslError,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">QList::move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_move(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Provided for compatibility with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">QList::move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_move(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_count1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_count1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_count1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_count1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_first(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_first(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_first(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_first(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_first1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_first1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_first1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_first1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_constFirst(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_constFirst(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_constFirst(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_constFirst(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_last(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_last(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_last(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#constLast">constLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_last(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_last1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_last1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_last1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_last1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_constLast(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_constLast(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_constLast(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the last item in the vector. This function assumes that the vector isn't empty.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_constLast(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_startsWith(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_startsWith(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_startsWith(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_startsWith(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_endsWith(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_endsWith(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_endsWith(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> bool;

    /// <p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this vector is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_endsWith(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> bool;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_mid(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        pos: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_mid(
        this_ptr: *const crate::QVectorOfQSslError,
        pos: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_mid(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        pos: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_mid(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        pos: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns the value at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the vector.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that <i>i</i> is within bounds, you can use <a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_value(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QOcspResponse;

    /// <p>Returns the value at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the vector.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that <i>i</i> is within bounds, you can use <a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_value(
        this_ptr: *const crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Returns the value at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the vector.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that <i>i</i> is within bounds, you can use <a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_value(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>Returns the value at index position <i>i</i> in the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the vector.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that <i>i</i> is within bounds, you can use <a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_value(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_value1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_value1(
        this_ptr: *const crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslError,
    ) -> *mut crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_value1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_value1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p>This function was introduced in Qt 5.14.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_swapItemsAt(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p>This function was introduced in Qt 5.14.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_swapItemsAt(
        this_ptr: *mut crate::QVectorOfQSslError,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p>This function was introduced in Qt 5.14.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_swapItemsAt(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qvector.html#size">size</a>().</p>
    /// <p>This function was introduced in Qt 5.14.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_swapItemsAt(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_push_back(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_push_back(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_push_back(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to append(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_push_back(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    );

    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_push_front1(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslError_push_front1(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    );

    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_push_front1(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    );

    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_push_front1(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_pop_back(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_pop_back(this_ptr: *mut crate::QVectorOfQSslError);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_pop_back(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_pop_back(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_pop_front(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_pop_front(this_ptr: *mut crate::QVectorOfQSslError);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_pop_front(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_pop_front(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_empty(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_empty(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_empty(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#isEmpty">isEmpty</a>(), returning <code>true</code> if the vector is empty; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_empty(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_front(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_front(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_front(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_front(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_front1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_front1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_front1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_front1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_back(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QOcspResponse;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_back(
        this_ptr: *mut crate::QVectorOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_back(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QSslEllipticCurve;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_back(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_back1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
    ) -> *const crate::QOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_back1(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_back1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *const crate::QSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_back1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
    ) -> *const crate::QHstsPolicy;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#shrink_to_fit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p>This function was introduced in Qt 5.10.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_shrink_to_fit(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#shrink_to_fit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p>This function was introduced in Qt 5.10.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_shrink_to_fit(
        this_ptr: *mut crate::QVectorOfQSslError,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#shrink_to_fit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p>This function was introduced in Qt 5.10.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_shrink_to_fit(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#shrink_to_fit">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qvector.html#squeeze">squeeze</a>().</p>
    /// <p>This function was introduced in Qt 5.10.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_shrink_to_fit(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
    );

    /// <p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__4(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        l: *const crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__4(
        this_ptr: *mut crate::QVectorOfQSslError,
        l: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__4(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        l: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> vector to this vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__4(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        l: *const crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator_2(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        l: *const crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator_2(
        this_ptr: *const crate::QVectorOfQSslError,
        l: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator_2(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        l: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a vector that contains all the items in this vector followed by all the items in the <i>other</i> vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator_2(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        l: *const crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__5(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__5(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__5(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__5(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__6(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__6(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__6(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>value</i> to the vector and returns a reference to this vector.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__6(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Appends <i>other</i> to the vector and returns a reference to the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>other</i> to the vector and returns a reference to the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_operator__7(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        l: *const crate::QVectorOfQOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Appends <i>other</i> to the vector and returns a reference to the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>other</i> to the vector and returns a reference to the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_operator__7(
        this_ptr: *mut crate::QVectorOfQSslError,
        l: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Appends <i>other</i> to the vector and returns a reference to the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>other</i> to the vector and returns a reference to the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_operator__7(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        l: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Appends <i>other</i> to the vector and returns a reference to the vector.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends <i>other</i> to the vector and returns a reference to the vector.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_operator__7(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        l: *const crate::QVectorOfQHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> object with the data contained in <i>list</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fromList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> object with the data contained in <i>list</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qstringlist.html">QStringList</a></span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Sven"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Kim"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Ola"</span>;
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vect <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>fromList(list);
    ///  <span class="comment">// vect: ["Sven", "Kim", "Ola"]</span>
    /// </pre>
    /// <p><b>Note: </b>Since Qt 5.14, range constructors are available for Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a> and should be used in place of this method.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#toList">toList</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#toVector">QList::toVector</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_fromList(
        list: *const crate::QListOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> object with the data contained in this <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#toList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> object with the data contained in this <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vect;
    ///  vect <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"red"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"green"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"blue"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"black"</span>;
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> list <span class="operator">=</span> vect<span class="operator">.</span>toList();
    ///  <span class="comment">// list: ["red", "green", "blue", "black"]</span>
    /// </pre>
    /// <p><b>Note: </b>Since Qt 5.14, range constructors are available for Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a> and should be used in place of this method.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#fromList">fromList</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#fromVector">QList::fromVector</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_toList(
        this_ptr: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash8(
        key: *const crate::QVectorOfQOcspResponse,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash9(
        key: *const crate::QVectorOfQSslError,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash10(
        key: *const crate::QVectorOfQSslEllipticCurve,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_QList(
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_QList(
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_QList(
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_QList(
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_QList() -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_QList() -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_QList(
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_QList() -> *mut crate::QListOfQSslCertificate;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_QList() -> *mut crate::QListOfQSslError;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_QList() -> *mut crate::QListOfQSslCipher;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_QList() -> *mut crate::QListOfQHostAddress;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_QList(
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_QList() -> *mut crate::QListOfQNetworkCookie;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_QList(
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_QList() -> *mut crate::QListOfQNetworkInterface;

    /// <p>Constructs an empty list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_QList() -> *mut crate::QListOfQNetworkProxy;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_QList1(
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_QList1(
        l: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_QList1(
        l: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_QList1(
        l: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_QList1(
        l: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_QList1(
        l: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_QList1(
        l: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_QList1(
        l: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_QList1(
        l: *const crate::QListOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_QList1(
        l: *const crate::QListOfQSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_QList1(
        l: *const crate::QListOfQHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_QList1(
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_QList1(
        l: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_QList1(
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_QList1(
        l: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#QList-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>, because QList is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QList from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_QList1(
        l: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_dQList(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_dQList(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_dQList(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_dQList(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_dQList(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_dQList(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_dQList(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_dQList(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_dQList(this_ptr: *mut crate::QListOfQSslError);

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_dQList(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_dQList(this_ptr: *mut crate::QListOfQHostAddress);

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_dQList(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_dQList(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_dQList(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_dQList(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#dtor.QList">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the list. References to the values in the list and all iterators of this list become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_dQList(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator_(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator_(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        l: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator_(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        l: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator_(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        l: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator_(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        l: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator_(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        l: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator_(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        l: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator_(
        this_ptr: *mut crate::QListOfQSslCertificate,
        l: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator_(
        this_ptr: *mut crate::QListOfQSslError,
        l: *const crate::QListOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator_(
        this_ptr: *mut crate::QListOfQSslCipher,
        l: *const crate::QListOfQSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator_(
        this_ptr: *mut crate::QListOfQHostAddress,
        l: *const crate::QListOfQHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator_(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator_(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        l: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator_(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator_(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        l: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Assigns <i>other</i> to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this list and returns a reference to this list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator_(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        l: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swap(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        other: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swap(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        other: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swap(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        other: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swap(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        other: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_swap(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        other: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_swap(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        other: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_swap(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        other: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_swap(
        this_ptr: *mut crate::QListOfQSslCertificate,
        other: *mut crate::QListOfQSslCertificate,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_swap(
        this_ptr: *mut crate::QListOfQSslError,
        other: *mut crate::QListOfQSslError,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_swap(
        this_ptr: *mut crate::QListOfQSslCipher,
        other: *mut crate::QListOfQSslCipher,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_swap(
        this_ptr: *mut crate::QListOfQHostAddress,
        other: *mut crate::QListOfQHostAddress,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_swap(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        other: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_swap(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        other: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_swap(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        other: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_swap(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        other: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_swap(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        other: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__(
        this_ptr: *const crate::QListOfQSslCertificate,
        l: *const crate::QListOfQSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__(
        this_ptr: *const crate::QListOfQSslError,
        l: *const crate::QListOfQSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__(
        this_ptr: *const crate::QListOfQSslCipher,
        l: *const crate::QListOfQSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__(
        this_ptr: *const crate::QListOfQHostAddress,
        l: *const crate::QListOfQHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__(
        this_ptr: *const crate::QListOfQNetworkCookie,
        l: *const crate::QListOfQNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this list; otherwise returns false.</p>
    /// <p>Two lists are considered equal if they contain the same values in the same order.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__(
        this_ptr: *const crate::QListOfQNetworkProxy,
        l: *const crate::QListOfQNetworkProxy,
    ) -> bool;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_size(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_size(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_size(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_size(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_size(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_size(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_size(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_size(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_size(
        this_ptr: *const crate::QListOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_size(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_size(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_size(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_size(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_size(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_size(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_size(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_detach(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_detach(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_detach(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_detach(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_detach(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_detach(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_detach(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_detach(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    pub fn ctr_qt_network_ffi_QList_QSslError_detach(this_ptr: *mut crate::QListOfQSslError);

    pub fn ctr_qt_network_ffi_QList_QSslCipher_detach(this_ptr: *mut crate::QListOfQSslCipher);

    pub fn ctr_qt_network_ffi_QList_QHostAddress_detach(this_ptr: *mut crate::QListOfQHostAddress);

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_detach(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_detach(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_detach(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_detach(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_detach(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_detachShared(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_detachShared(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_detachShared(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_detachShared(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_detachShared(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_detachShared(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_detachShared(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_detachShared(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    pub fn ctr_qt_network_ffi_QList_QSslError_detachShared(this_ptr: *mut crate::QListOfQSslError);

    pub fn ctr_qt_network_ffi_QList_QSslCipher_detachShared(
        this_ptr: *mut crate::QListOfQSslCipher,
    );

    pub fn ctr_qt_network_ffi_QList_QHostAddress_detachShared(
        this_ptr: *mut crate::QListOfQHostAddress,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_detachShared(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_detachShared(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_detachShared(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_detachShared(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_detachShared(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isDetached(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isDetached(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isDetached(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isDetached(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_isDetached(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_isDetached(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_isDetached(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_isDetached(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_isDetached(
        this_ptr: *const crate::QListOfQSslError,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_isDetached(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_isDetached(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_isDetached(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_isDetached(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_isDetached(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_isDetached(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_isDetached(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_setSharable(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_setSharable(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_setSharable(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_setSharable(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_setSharable(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_setSharable(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_setSharable(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_setSharable(
        this_ptr: *mut crate::QListOfQSslCertificate,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QSslError_setSharable(
        this_ptr: *mut crate::QListOfQSslError,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCipher_setSharable(
        this_ptr: *mut crate::QListOfQSslCipher,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QHostAddress_setSharable(
        this_ptr: *mut crate::QListOfQHostAddress,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_setSharable(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_setSharable(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_setSharable(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_setSharable(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_setSharable(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isSharedWith(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        other: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isSharedWith(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        other: *const crate::QListOfQDnsDomainNameRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isSharedWith(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        other: *const crate::QListOfQDnsHostAddressRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isSharedWith(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        other: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_isSharedWith(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        other: *const crate::QListOfQDnsServiceRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_isSharedWith(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        other: *const crate::QListOfQDnsTextRecord,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_isSharedWith(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        other: *const crate::QListOfQSslCertificateExtension,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_isSharedWith(
        this_ptr: *const crate::QListOfQSslCertificate,
        other: *const crate::QListOfQSslCertificate,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_isSharedWith(
        this_ptr: *const crate::QListOfQSslError,
        other: *const crate::QListOfQSslError,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_isSharedWith(
        this_ptr: *const crate::QListOfQSslCipher,
        other: *const crate::QListOfQSslCipher,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_isSharedWith(
        this_ptr: *const crate::QListOfQHostAddress,
        other: *const crate::QListOfQHostAddress,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_isSharedWith(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        other: *const crate::QListOfQNetworkConfiguration,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_isSharedWith(
        this_ptr: *const crate::QListOfQNetworkCookie,
        other: *const crate::QListOfQNetworkCookie,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_isSharedWith(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        other: *const crate::QListOfQNetworkAddressEntry,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_isSharedWith(
        this_ptr: *const crate::QListOfQNetworkInterface,
        other: *const crate::QListOfQNetworkInterface,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_isSharedWith(
        this_ptr: *const crate::QListOfQNetworkProxy,
        other: *const crate::QListOfQNetworkProxy,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_isEmpty(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_isEmpty(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_isEmpty(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_isEmpty(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_isEmpty(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_isEmpty(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_isEmpty(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_isEmpty(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_isEmpty(
        this_ptr: *const crate::QListOfQSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_isEmpty(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_isEmpty(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_isEmpty(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_isEmpty(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_isEmpty(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_isEmpty(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_isEmpty(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> bool;

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_clear(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_clear(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_clear(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_clear(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_clear(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_clear(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_clear(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_clear(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_clear(this_ptr: *mut crate::QListOfQSslError);

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_clear(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_clear(this_ptr: *mut crate::QListOfQHostAddress);

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_clear(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_clear(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_clear(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_clear(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>Removes all items from the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_clear(this_ptr: *mut crate::QListOfQNetworkProxy);

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_at(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_at(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_at(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_at(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_at(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_at(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_at(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_at(
        this_ptr: *const crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_at(
        this_ptr: *const crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslError;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_at(
        this_ptr: *const crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCipher;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_at(
        this_ptr: *const crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QHostAddress;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_at(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_at(
        this_ptr: *const crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_at(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_at(
        this_ptr: *const crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#at">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> in the list. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>This function is very fast (<a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_at(
        this_ptr: *const crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__2(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__2(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__2(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__2(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__2(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__2(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__2(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__2(
        this_ptr: *const crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__2(
        this_ptr: *const crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__2(
        this_ptr: *const crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__2(
        this_ptr: *const crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__2(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__2(
        this_ptr: *const crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__2(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__2(
        this_ptr: *const crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>(). This function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__2(
        this_ptr: *const crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__3(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__3(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__3(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__3(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__3(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__3(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__3(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__3(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__3(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__3(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__3(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__3(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__3(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__3(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__3(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at index position <i>i</i> as a modifiable reference. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If this function is called on a list that is currently being shared, it will trigger a copy of all elements. Otherwise, this function runs in <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>. If you do not want to modify the list you should use <a href="http://doc.qt.io/qt-5/qlist.html#at">QList::at</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__3(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_reserve(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_reserve(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_reserve(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_reserve(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_reserve(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_reserve(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_reserve(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_reserve(
        this_ptr: *mut crate::QListOfQSslCertificate,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_reserve(
        this_ptr: *mut crate::QListOfQSslError,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_reserve(
        this_ptr: *mut crate::QListOfQSslCipher,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_reserve(
        this_ptr: *mut crate::QListOfQHostAddress,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_reserve(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_reserve(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_reserve(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_reserve(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reserve space for <i>alloc</i> elements.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reserve space for <i>alloc</i> elements.</p>
    /// <p>If <i>alloc</i> is smaller than the current size of the list, nothing will happen.</p>
    /// <p>Use this function to avoid repetetive reallocation of <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>'s internal data if you can predict how many elements will be appended. Note that the reservation applies only to the internal pointer array.</p>
    /// <p>This function was introduced in Qt 4.7.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_reserve(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        size: ::std::os::raw::c_int,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_append(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_append(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_append(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_append(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_append(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_append(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_append(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_append(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_append(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_append(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_append(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_append(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_append(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_append(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_append(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    );

    /// <p>Inserts <i>value</i> at the end of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the end of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["one", "two", "three"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_append(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_append1(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_append1(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_append1(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_append1(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_append1(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QListOfQDnsServiceRecord,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_append1(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QListOfQDnsTextRecord,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_append1(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QListOfQSslCertificateExtension,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_append1(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QListOfQSslCertificate,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_append1(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QListOfQSslError,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_append1(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QListOfQSslCipher,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_append1(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QListOfQHostAddress,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_append1(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QListOfQNetworkConfiguration,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_append1(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QListOfQNetworkCookie,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_append1(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QListOfQNetworkAddressEntry,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_append1(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QListOfQNetworkInterface,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#append-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends the items of the <i>value</i> list to this list.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_append1(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QListOfQNetworkProxy,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_prepend(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_prepend(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_prepend(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_prepend(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_prepend(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_prepend(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_prepend(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_prepend(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_prepend(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_prepend(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_prepend(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_prepend(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_prepend(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_prepend(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_prepend(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    );

    /// <p>Inserts <i>value</i> at the beginning of the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#prepend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at the beginning of the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>prepend(<span class="string">"one"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"two"</span>);
    ///  list<span class="operator">.</span>prepend(<span class="string">"three"</span>);
    ///  <span class="comment">// list: ["three", "two", "one"]</span>
    /// </pre>
    /// <p>This is the same as list.insert(0, <i>value</i>).</p>
    /// <p>If this list is not shared, this operation is typically very fast (amortized <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>), because <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> preallocates extra space on both sides of its internal buffer to allow for fast growth at both ends of the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_prepend(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_insert(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_insert(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_insert(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_insert(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_insert(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_insert(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_insert(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_insert(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCertificate,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_insert(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_insert(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCipher,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_insert(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
        t: *const crate::QHostAddress,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_insert(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_insert(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkCookie,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_insert(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_insert(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkInterface,
    );

    /// <p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts <i>value</i> at index position <i>i</i> in the list.</p>
    /// <p>If <i>i</i> == 0, the value is prepended to the list. If <i>i</i> == <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(), the value is appended to the list.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"alpha"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"beta"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"delta"</span>;
    ///  list<span class="operator">.</span>insert(<span class="number">2</span><span class="operator">,</span> <span class="string">"gamma"</span>);
    ///  <span class="comment">// list: ["alpha", "beta", "gamma", "delta"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_insert(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkProxy,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_replace(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_replace(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_replace(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_replace(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_replace(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_replace(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_replace(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_replace(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCertificate,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_replace(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslError,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_replace(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
        t: *const crate::QSslCipher,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_replace(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
        t: *const crate::QHostAddress,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_replace(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_replace(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkCookie,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_replace(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_replace(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkInterface,
    );

    /// <p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#replace">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Replaces the item at index position <i>i</i> with <i>value</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_replace(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
        t: *const crate::QNetworkProxy,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeAt(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeAt(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeAt(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeAt(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_removeAt(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_removeAt(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_removeAt(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_removeAt(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_removeAt(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_removeAt(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_removeAt(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_removeAt(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_removeAt(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeAt(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_removeAt(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i>. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_removeAt(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    );

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeAll(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_removeAll(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_removeAll(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_removeAll(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_removeAll(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_removeAll(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_removeAll(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeAll(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeAll">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all occurrences of <i>value</i> in the list and returns the number of entries removed.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeAll(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeOne">removeOne</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_removeAll(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeOne(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_removeOne(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_removeOne(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_removeOne(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_removeOne(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_removeOne(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_removeOne(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeOne(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeOne">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first occurrence of <i>value</i> in the list and returns true on success; otherwise returns <code>false</code>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"cloud"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"sun"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"rain"</span>;
    ///  list<span class="operator">.</span>removeOne(<span class="string">"sun"</span>);
    ///  <span class="comment">// list: ["cloud", "sun", "rain"]</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>This function was introduced in Qt 4.4.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAll">removeAll</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#replace">replace</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_removeOne(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeAt(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeAt(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeAt(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeAt(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_takeAt(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_takeAt(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_takeAt(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_takeAt(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificate;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_takeAt(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_takeAt(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCipher;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_takeAt(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHostAddress;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_takeAt(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_takeAt(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeAt(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_takeAt(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item at index position <i>i</i> and returns it. <i>i</i> must be a valid index position in the list (i.e., 0 &lt;= <i>i</i> &lt; <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>()).</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_takeAt(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeFirst(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeFirst(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeFirst(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeFirst(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_takeFirst(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_takeFirst(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_takeFirst(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_takeFirst(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_takeFirst(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_takeFirst(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_takeFirst(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_takeFirst(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_takeFirst(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeFirst(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_takeFirst(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(0). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_takeFirst(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_takeLast(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_takeLast(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_takeLast(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_takeLast(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_takeLast(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_takeLast(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_takeLast(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_takeLast(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_takeLast(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_takeLast(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_takeLast(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_takeLast(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_takeLast(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_takeLast(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_takeLast(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list and returns it. This is the same as <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). This function assumes the list is not empty. To avoid failure, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>If this list is not shared, this operation takes <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">constant time</a>.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_takeLast(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_move(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_move(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_move(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_move(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_move(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_move(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_move(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_move(
        this_ptr: *mut crate::QListOfQSslCertificate,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_move(
        this_ptr: *mut crate::QListOfQSslError,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_move(
        this_ptr: *mut crate::QListOfQSslCipher,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_move(
        this_ptr: *mut crate::QListOfQHostAddress,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_move(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_move(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_move(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_move(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#move">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Moves the item at index position <i>from</i> to index position <i>to</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>move(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "C", "D", "E", "B", "F"]</span>
    /// </pre>
    /// <p>This is the same as insert(<i>to</i>, <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>(<i>from</i>)).This function assumes that both <i>from</i> and <i>to</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>from</i> and <i>to</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#swap">swap</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#takeAt">takeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_move(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        from: ::std::os::raw::c_int,
        to: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swapItemsAt(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swapItemsAt(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swapItemsAt(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swapItemsAt(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_swapItemsAt(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_swapItemsAt(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_swapItemsAt(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_swapItemsAt(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_swapItemsAt(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_swapItemsAt(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_swapItemsAt(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_swapItemsAt(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_swapItemsAt(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_swapItemsAt(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_swapItemsAt(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#swapItemsAt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Exchange the item at index position <i>i</i> with the item at index position <i>j</i>. This function assumes that both <i>i</i> and <i>j</i> are at least 0 but less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>(). To avoid failure, test that both <i>i</i> and <i>j</i> are at least 0 and less than <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"D"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"E"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"F"</span>;
    ///  list<span class="operator">.</span>swapItemsAt(<span class="number">1</span><span class="operator">,</span> <span class="number">4</span>);
    ///  <span class="comment">// list: ["A", "E", "C", "D", "B", "F"]</span>
    /// </pre>
    /// <p>This function was introduced in Qt 5.13.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#move">move</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_swapItemsAt(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_swap1(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_swap1(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_swap1(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_swap1(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_swap1(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_swap1(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_swap1(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_swap1(
        this_ptr: *mut crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_swap1(
        this_ptr: *mut crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_swap1(
        this_ptr: *mut crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_swap1(
        this_ptr: *mut crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_swap1(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_swap1(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_swap1(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_swap1(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlist.html#swap">C++ documentation</a> for <span style='color: green;'>```void QList::swap(QList<T> &other)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps list <i>other</i> with this list. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_swap1(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    );

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_indexOf(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_indexOf(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_indexOf(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_indexOf(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_indexOf(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_indexOf(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_indexOf(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_indexOf(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_indexOf(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_lastIndexOf(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_lastIndexOf(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_lastIndexOf(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_lastIndexOf(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_lastIndexOf(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_lastIndexOf(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_lastIndexOf(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_lastIndexOf(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_lastIndexOf(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_contains(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_contains(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_contains(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_contains(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_contains(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_contains(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_contains(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_contains(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the list contains an occurrence of <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_contains(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_count(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_count(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_count(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_count(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_count(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_count(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_count(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_count(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of occurrences of <i>value</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of occurrences of <i>value</i> in the list.</p>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_count(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_iterator(
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_iterator(
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_iterator(
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_iterator(
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_iterator(
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_iterator(
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_iterator(
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_iterator(
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_iterator(
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_iterator(
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_iterator(
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_iterator(
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_iterator(
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_iterator(
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_iterator(
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_iterator(
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_iterator1(
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_iterator1(
        o: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_iterator1(
        o: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_iterator1(
        o: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_iterator1(
        o: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_iterator1(
        o: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_iterator1(
        o: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_iterator1(
        o: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_iterator1(
        o: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_iterator1(
        o: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_iterator1(
        o: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_iterator1(
        o: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_iterator1(
        o: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_iterator1(
        o: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_iterator1(
        o: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_iterator1(
        o: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
        o: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
        o: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        o: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
        o: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
        o: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
        o: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
        o: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
        o: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
        o: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
        o: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
        o: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
        o: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>Assigns <i>other</i> to this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlinkedlist-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
        o: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::QSslError;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::QSslError;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QSslError;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValueRef iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p>The return value is of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, a helper class for <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> and <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a>. When you get an object of type <a href="http://doc.qt.io/qt-5/qjsonvalue.html#qjsonvalueref">QJsonValueRef</a>, you can use it as if it were a reference to a <a href="http://doc.qt.io/qt-5/qjsonvalue.html">QJsonValue</a>. If you assign to it, the assignment will apply to the element in the <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> or <a href="http://doc.qt.io/qt-5/qjsonobject.html">QJsonObject</a> from which you got the reference.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::QNetworkProxy;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        o: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        o: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        o: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        o: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        o: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        o: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        o: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        o: *const crate::q_list_of_q_host_address::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        o: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        o: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        o: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        o: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        o: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        o: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        o: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        o: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        o: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        o: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        o: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        o: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        o: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        o: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        o: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        o: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        o: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        o: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__6(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        o: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__8(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__9(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__12(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__13(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__14(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```iterator &iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator__15(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_7(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        j: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        j: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        j: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        j: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_dns_service_record::Iterator,
        j: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_dns_text_record::Iterator,
        j: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        j: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::Iterator,
        j: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_ssl_error::Iterator,
        j: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::Iterator,
        j: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_host_address::Iterator,
        j: *const crate::q_list_of_q_host_address::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_network_configuration::Iterator,
        j: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_network_cookie::Iterator,
        j: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_network_address_entry::Iterator,
        j: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_network_interface::Iterator,
        j: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_operator_8(
        this_ptr: *const crate::q_list_of_q_network_proxy::Iterator,
        j: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> ::std::os::raw::c_int;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator(
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator1(
        o: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        o: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
        o: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
        o: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
        o: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
        o: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
        o: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
        o: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
        o: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
        o: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Assigns <i>other</i> to this.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
        o: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_const_iterator2(
        o: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *const crate::QSslError;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *const crate::QSslCipher;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> *const crate::QHostAddress;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_1(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *const crate::QSslError;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *const crate::QSslCipher;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> *const crate::QHostAddress;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QSslError;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QSslCipher;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QHostAddress;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-5b-5d">C++ documentation</a> for <span style='color: green;'>```QJsonValue const_iterator::operator[](int j) const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the item at offset <i>j</i> from the item pointed to by this iterator (the item at position <code>*this + j</code>).</p>
    /// <p>This function is provided to make <a href="http://doc.qt.io/qt-5/qjsonarray.html">QJsonArray</a> iterators behave like C++ pointers.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__1(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        o: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        o: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        o: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        o: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        o: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        o: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        o: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        o: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        o: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        o: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        o: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__2(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        o: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_2(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-lt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__4(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_3(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        other: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        other: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        other: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        other: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        other: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        other: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        other: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        other: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        other: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> bool;

    /// <p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qjsonarray-const-iterator.html#operator-gt-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <i>other</i> iterator.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__5(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        other: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__6(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__7(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__8(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__9(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator+=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__10(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a> for <span style='color: green;'>```const_iterator &const_iterator::operator-=(int j)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator__11(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_4(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_5(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        j: ::std::os::raw::c_longlong,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
        j: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
        j: *const crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
        j: *const crate::q_list_of_q_dns_host_address_record::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
        j: *const crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_service_record::ConstIterator,
        j: *const crate::q_list_of_q_dns_service_record::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_dns_text_record::ConstIterator,
        j: *const crate::q_list_of_q_dns_text_record::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
        j: *const crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
        j: *const crate::q_list_of_q_ssl_certificate::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_error::ConstIterator,
        j: *const crate::q_list_of_q_ssl_error::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
        j: *const crate::q_list_of_q_ssl_cipher::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_host_address::ConstIterator,
        j: *const crate::q_list_of_q_host_address::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_configuration::ConstIterator,
        j: *const crate::q_list_of_q_network_configuration::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_cookie::ConstIterator,
        j: *const crate::q_list_of_q_network_cookie::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_address_entry::ConstIterator,
        j: *const crate::q_list_of_q_network_address_entry::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_interface::ConstIterator,
        j: *const crate::q_list_of_q_network_interface::ConstIterator,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_operator_6(
        this_ptr: *const crate::q_list_of_q_network_proxy::ConstIterator,
        j: *const crate::q_list_of_q_network_proxy::ConstIterator,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_begin(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_begin(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_begin(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_begin(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_begin(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_begin(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_begin(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_begin(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_begin(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_begin(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_begin(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_begin(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_begin(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_begin(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_begin(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_begin(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_begin1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_begin1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_begin1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_begin1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_begin1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_begin1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_begin1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_begin1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_begin1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_begin1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_begin1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_begin1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_begin1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_begin1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_begin1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_begin1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_cbegin(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_cbegin(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_cbegin(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_cbegin(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_cbegin(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_cbegin(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_cbegin(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_cbegin(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_cbegin(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_cbegin(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_cbegin(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_cbegin(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_cbegin(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_cbegin(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_cbegin(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_cbegin(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constBegin(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constBegin(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constBegin(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constBegin(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_constBegin(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_constBegin(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_constBegin(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_constBegin(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_constBegin(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_constBegin(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_constBegin(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_constBegin(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_constBegin(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_constBegin(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_constBegin(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_constBegin(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_end(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_end(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_end(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_end(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_end(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_end(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_end(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_end(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_end(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_end(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_end(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_end(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_end(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_end(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_end(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_end(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_end1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_end1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_end1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_end1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_end1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_end1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_end1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_end1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_end1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_end1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_end1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_end1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_end1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_end1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_end1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_end1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_cend(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_cend(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_cend(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_cend(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_cend(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_cend(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_cend(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_cend(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_cend(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_cend(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_cend(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_cend(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_cend(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_cend(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_cend(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_cend(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constEnd(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constEnd(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constEnd(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constEnd(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_constEnd(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_constEnd(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_constEnd(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_constEnd(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_constEnd(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_constEnd(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_constEnd(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_constEnd(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_constEnd(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_constEnd(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_constEnd(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_constEnd(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_insert1(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        before: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_insert1(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        before: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        t: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_insert1(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        before: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        t: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_insert1(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        before: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        t: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_insert1(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        before: *const crate::q_list_of_q_dns_service_record::Iterator,
        t: *const crate::QDnsServiceRecord,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_insert1(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        before: *const crate::q_list_of_q_dns_text_record::Iterator,
        t: *const crate::QDnsTextRecord,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_insert1(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        before: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        t: *const crate::QSslCertificateExtension,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_insert1(
        this_ptr: *mut crate::QListOfQSslCertificate,
        before: *const crate::q_list_of_q_ssl_certificate::Iterator,
        t: *const crate::QSslCertificate,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_insert1(
        this_ptr: *mut crate::QListOfQSslError,
        before: *const crate::q_list_of_q_ssl_error::Iterator,
        t: *const crate::QSslError,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_insert1(
        this_ptr: *mut crate::QListOfQSslCipher,
        before: *const crate::q_list_of_q_ssl_cipher::Iterator,
        t: *const crate::QSslCipher,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_insert1(
        this_ptr: *mut crate::QListOfQHostAddress,
        before: *const crate::q_list_of_q_host_address::Iterator,
        t: *const crate::QHostAddress,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_insert1(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        before: *const crate::q_list_of_q_network_configuration::Iterator,
        t: *const crate::QNetworkConfiguration,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_insert1(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        before: *const crate::q_list_of_q_network_cookie::Iterator,
        t: *const crate::QNetworkCookie,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_insert1(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        before: *const crate::q_list_of_q_network_address_entry::Iterator,
        t: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_insert1(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        before: *const crate::q_list_of_q_network_interface::Iterator,
        t: *const crate::QNetworkInterface,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts <i>value</i> in front of the item pointed to by the iterator <i>before</i>. Returns an iterator pointing at the inserted item. Note that the iterator passed to the function will be invalid after the call; the returned iterator should be used instead.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_insert1(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        before: *const crate::q_list_of_q_network_proxy::Iterator,
        t: *const crate::QNetworkProxy,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_erase(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        pos: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_erase(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        pos: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_erase(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        pos: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_erase(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        pos: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_erase(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        pos: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_erase(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        pos: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_erase(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        pos: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_erase(
        this_ptr: *mut crate::QListOfQSslCertificate,
        pos: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_erase(
        this_ptr: *mut crate::QListOfQSslError,
        pos: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_erase(
        this_ptr: *mut crate::QListOfQSslCipher,
        pos: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_erase(
        this_ptr: *mut crate::QListOfQHostAddress,
        pos: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_erase(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        pos: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_erase(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        pos: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_erase(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        pos: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_erase(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        pos: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item associated with the iterator <i>pos</i> from the list, and returns an iterator to the next item in the list (which may be <a href="http://doc.qt.io/qt-5/qlist.html#end">end</a>()).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_erase(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        pos: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_erase1(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        first: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
        last: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_erase1(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        first: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
        last: *const crate::q_list_of_q_dns_domain_name_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_erase1(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        first: *const crate::q_list_of_q_dns_host_address_record::Iterator,
        last: *const crate::q_list_of_q_dns_host_address_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_erase1(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        first: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
        last: *const crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_erase1(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        first: *const crate::q_list_of_q_dns_service_record::Iterator,
        last: *const crate::q_list_of_q_dns_service_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_service_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_erase1(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        first: *const crate::q_list_of_q_dns_text_record::Iterator,
        last: *const crate::q_list_of_q_dns_text_record::Iterator,
    ) -> *mut crate::q_list_of_q_dns_text_record::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_erase1(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        first: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
        last: *const crate::q_list_of_q_ssl_certificate_extension::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_erase1(
        this_ptr: *mut crate::QListOfQSslCertificate,
        first: *const crate::q_list_of_q_ssl_certificate::Iterator,
        last: *const crate::q_list_of_q_ssl_certificate::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_certificate::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_erase1(
        this_ptr: *mut crate::QListOfQSslError,
        first: *const crate::q_list_of_q_ssl_error::Iterator,
        last: *const crate::q_list_of_q_ssl_error::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_error::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_erase1(
        this_ptr: *mut crate::QListOfQSslCipher,
        first: *const crate::q_list_of_q_ssl_cipher::Iterator,
        last: *const crate::q_list_of_q_ssl_cipher::Iterator,
    ) -> *mut crate::q_list_of_q_ssl_cipher::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_erase1(
        this_ptr: *mut crate::QListOfQHostAddress,
        first: *const crate::q_list_of_q_host_address::Iterator,
        last: *const crate::q_list_of_q_host_address::Iterator,
    ) -> *mut crate::q_list_of_q_host_address::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_erase1(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        first: *const crate::q_list_of_q_network_configuration::Iterator,
        last: *const crate::q_list_of_q_network_configuration::Iterator,
    ) -> *mut crate::q_list_of_q_network_configuration::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_erase1(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        first: *const crate::q_list_of_q_network_cookie::Iterator,
        last: *const crate::q_list_of_q_network_cookie::Iterator,
    ) -> *mut crate::q_list_of_q_network_cookie::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_erase1(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        first: *const crate::q_list_of_q_network_address_entry::Iterator,
        last: *const crate::q_list_of_q_network_address_entry::Iterator,
    ) -> *mut crate::q_list_of_q_network_address_entry::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_erase1(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        first: *const crate::q_list_of_q_network_interface::Iterator,
        last: *const crate::q_list_of_q_network_interface::Iterator,
    ) -> *mut crate::q_list_of_q_network_interface::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Removes all the items from <i>begin</i> up to (but not including) <i>end</i>. Returns an iterator to the same item that <i>end</i> referred to before the call.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_erase1(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        first: *const crate::q_list_of_q_network_proxy::Iterator,
        last: *const crate::q_list_of_q_network_proxy::Iterator,
    ) -> *mut crate::q_list_of_q_network_proxy::Iterator;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_count1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_count1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_count1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_count1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_count1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_count1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_count1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_count1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_count1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_count1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_count1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_count1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_count1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_count1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_count1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the list. This is effectively the same as <a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_count1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_length(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_length(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_length(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_length(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_length(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_length(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_length(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_length(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_length(
        this_ptr: *const crate::QListOfQSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_length(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_length(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_length(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_length(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_length(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_length(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> ::std::os::raw::c_int;

    /// <p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#length">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is identical to <a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_length(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_first(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_first(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_first(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_first(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_first(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_first(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_first(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_first(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_first(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_first(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_first(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_first(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_first(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_first(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_first(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_first(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constFirst(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constFirst(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constFirst(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constFirst(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_constFirst(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_constFirst(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_constFirst(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_constFirst(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_constFirst(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_constFirst(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_constFirst(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_constFirst(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_constFirst(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_constFirst(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_constFirst(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const reference to the first item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_constFirst(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_first1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_first1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_first1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_first1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_first1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_first1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_first1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_first1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_first1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_first1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_first1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_first1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_first1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_first1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_first1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_first1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_last(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_last(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_last(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_last(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_last(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_last(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_last(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_last(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_last(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_last(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_last(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_last(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_last(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_last(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_last(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constLast">constLast</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_last(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_last1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_last1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_last1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_last1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_last1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_last1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_last1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_last1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_last1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_last1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_last1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_last1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_last1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_last1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_last1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_last1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_constLast(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_constLast(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_constLast(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_constLast(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_constLast(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_constLast(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_constLast(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_constLast(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_constLast(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_constLast(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_constLast(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_constLast(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_constLast(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_constLast(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_constLast(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#constLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last item in the list. The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#constFirst">constFirst</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>(), and <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_constLast(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeFirst(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeFirst(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeFirst(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeFirst(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_removeFirst(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_removeFirst(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_removeFirst(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_removeFirst(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_removeFirst(this_ptr: *mut crate::QListOfQSslError);

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_removeFirst(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_removeFirst(
        this_ptr: *mut crate::QListOfQHostAddress,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_removeFirst(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_removeFirst(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeFirst(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_removeFirst(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the first item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(0). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeFirst">takeFirst</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_removeFirst(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_removeLast(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_removeLast(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_removeLast(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_removeLast(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_removeLast(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_removeLast(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_removeLast(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_removeLast(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_removeLast(this_ptr: *mut crate::QListOfQSslError);

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_removeLast(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_removeLast(
        this_ptr: *mut crate::QListOfQHostAddress,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_removeLast(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_removeLast(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_removeLast(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_removeLast(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the last item in the list. Calling this function is equivalent to calling <a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>(<a href="http://doc.qt.io/qt-5/qlist.html#size">size</a>() - 1). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#removeAt">removeAt</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#takeLast">takeLast</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_removeLast(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_startsWith(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_startsWith(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_startsWith(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_startsWith(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_startsWith(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_startsWith(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_startsWith(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_startsWith(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#startsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its first item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_startsWith(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_endsWith(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_endsWith(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_endsWith(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_endsWith(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_endsWith(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_endsWith(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_endsWith(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_endsWith(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> bool;

    /// <p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#endsWith">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this list is not empty and its last item is equal to <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.5.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_endsWith(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> bool;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_mid(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_mid(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_mid(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_mid(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_mid(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_mid(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_mid(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_mid(
        this_ptr: *const crate::QListOfQSslCertificate,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_mid(
        this_ptr: *const crate::QListOfQSslError,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_mid(
        this_ptr: *const crate::QListOfQSslCipher,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_mid(
        this_ptr: *const crate::QListOfQHostAddress,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_mid(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_mid(
        this_ptr: *const crate::QListOfQNetworkCookie,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_mid(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_mid(
        this_ptr: *const crate::QListOfQNetworkInterface,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_mid(
        this_ptr: *const crate::QListOfQNetworkProxy,
        pos: ::std::os::raw::c_int,
        length: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_value(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_value(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_value(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_value(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_value(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_value(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_value(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_value(
        this_ptr: *const crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_value(
        this_ptr: *const crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslError;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_value(
        this_ptr: *const crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QSslCipher;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_value(
        this_ptr: *const crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QHostAddress;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_value(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_value(
        this_ptr: *const crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_value(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_value(
        this_ptr: *const crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkInterface;

    /// <p>Returns the value at index position <i>i</i> in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value at index position <i>i</i> in the list.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If you are certain that the index is going to be within bounds, you can use <a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() instead, which is slightly faster.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#at">at</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_value(
        this_ptr: *const crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_value1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_value1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_value1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_value1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_value1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_value1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_value1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_value1(
        this_ptr: *const crate::QListOfQSslCertificate,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_value1(
        this_ptr: *const crate::QListOfQSslError,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslError,
    ) -> *mut crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_value1(
        this_ptr: *const crate::QListOfQSslCipher,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_value1(
        this_ptr: *const crate::QListOfQHostAddress,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_value1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_value1(
        this_ptr: *const crate::QListOfQNetworkCookie,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_value1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_value1(
        this_ptr: *const crate::QListOfQNetworkInterface,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the index <i>i</i> is out of bounds, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_value1(
        this_ptr: *const crate::QListOfQNetworkProxy,
        i: ::std::os::raw::c_int,
        defaultValue: *const crate::QNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_push_back(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_push_back(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_push_back(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_push_back(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_push_back(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_push_back(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_push_back(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_push_back(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_push_back(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_push_back(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_push_back(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_push_back(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_push_back(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_push_back(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_push_back(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_push_back(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_push_front(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_push_front(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_push_front(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_push_front(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_push_front(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_push_front(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_push_front(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_push_front(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_push_front(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_push_front(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_push_front(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_push_front(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_push_front(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_push_front(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_push_front(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#push_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#prepend">prepend</a>(<i>value</i>).</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_push_front(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_front(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_front(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_front(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_front(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_front(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_front(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_front(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_front(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_front(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_front(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_front(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_front(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_front(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_front(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_front(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#first">first</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_front(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_front1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_front1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_front1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_front1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_front1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_front1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_front1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_front1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_front1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_front1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_front1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_front1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_front1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_front1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_front1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#front-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_front1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_back(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_back(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QDnsDomainNameRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_back(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QDnsHostAddressRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_back(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QDnsMailExchangeRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_back(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QDnsServiceRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_back(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QDnsTextRecord;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_back(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QSslCertificateExtension;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_back(
        this_ptr: *mut crate::QListOfQSslCertificate,
    ) -> *mut crate::QSslCertificate;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_back(
        this_ptr: *mut crate::QListOfQSslError,
    ) -> *mut crate::QSslError;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_back(
        this_ptr: *mut crate::QListOfQSslCipher,
    ) -> *mut crate::QSslCipher;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_back(
        this_ptr: *mut crate::QListOfQHostAddress,
    ) -> *mut crate::QHostAddress;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_back(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QNetworkConfiguration;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_back(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    ) -> *mut crate::QNetworkCookie;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_back(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QNetworkAddressEntry;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_back(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    ) -> *mut crate::QNetworkInterface;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#last">last</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_back(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_back1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *const crate::QPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_back1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *const crate::QDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_back1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *const crate::QDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_back1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *const crate::QDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_back1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> *const crate::QDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_back1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> *const crate::QDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_back1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> *const crate::QSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_back1(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> *const crate::QSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_back1(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *const crate::QSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_back1(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> *const crate::QSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_back1(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> *const crate::QHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_back1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> *const crate::QNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_back1(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> *const crate::QNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_back1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> *const crate::QNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_back1(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> *const crate::QNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#back-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_back1(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> *const crate::QNetworkProxy;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_pop_front(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_pop_front(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_pop_front(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_pop_front(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_pop_front(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_pop_front(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_pop_front(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_pop_front(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_pop_front(this_ptr: *mut crate::QListOfQSslError);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_pop_front(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_pop_front(
        this_ptr: *mut crate::QListOfQHostAddress,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_pop_front(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_pop_front(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_pop_front(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_pop_front(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_front">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeFirst">removeFirst</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_pop_front(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_pop_back(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_pop_back(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_pop_back(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_pop_back(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_pop_back(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_pop_back(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_pop_back(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_pop_back(
        this_ptr: *mut crate::QListOfQSslCertificate,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_pop_back(this_ptr: *mut crate::QListOfQSslError);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_pop_back(this_ptr: *mut crate::QListOfQSslCipher);

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_pop_back(
        this_ptr: *mut crate::QListOfQHostAddress,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_pop_back(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_pop_back(
        this_ptr: *mut crate::QListOfQNetworkCookie,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_pop_back(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_pop_back(
        this_ptr: *mut crate::QListOfQNetworkInterface,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#pop_back">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#removeLast">removeLast</a>(). The list must not be empty. If the list can be empty, call <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() before calling this function.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_pop_back(
        this_ptr: *mut crate::QListOfQNetworkProxy,
    );

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_empty(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_empty(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_empty(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_empty(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_empty(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_empty(
        this_ptr: *const crate::QListOfQDnsTextRecord,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_empty(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_empty(
        this_ptr: *const crate::QListOfQSslCertificate,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_empty(
        this_ptr: *const crate::QListOfQSslError,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_empty(
        this_ptr: *const crate::QListOfQSslCipher,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_empty(
        this_ptr: *const crate::QListOfQHostAddress,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_empty(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_empty(
        this_ptr: *const crate::QListOfQNetworkCookie,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_empty(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_empty(
        this_ptr: *const crate::QListOfQNetworkInterface,
    ) -> bool;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qlist.html#isEmpty">isEmpty</a>() and returns <code>true</code> if the list is empty.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_empty(
        this_ptr: *const crate::QListOfQNetworkProxy,
    ) -> bool;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__4(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__4(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        l: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__4(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        l: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__4(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        l: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__4(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        l: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__4(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        l: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__4(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        l: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__4(
        this_ptr: *mut crate::QListOfQSslCertificate,
        l: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__4(
        this_ptr: *mut crate::QListOfQSslError,
        l: *const crate::QListOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__4(
        this_ptr: *mut crate::QListOfQSslCipher,
        l: *const crate::QListOfQSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__4(
        this_ptr: *mut crate::QListOfQHostAddress,
        l: *const crate::QListOfQHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__4(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__4(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        l: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__4(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__4(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        l: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__4(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        l: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator_2(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator_2(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        l: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator_2(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        l: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator_2(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        l: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator_2(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        l: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator_2(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        l: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator_2(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        l: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator_2(
        this_ptr: *const crate::QListOfQSslCertificate,
        l: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator_2(
        this_ptr: *const crate::QListOfQSslError,
        l: *const crate::QListOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator_2(
        this_ptr: *const crate::QListOfQSslCipher,
        l: *const crate::QListOfQSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator_2(
        this_ptr: *const crate::QListOfQHostAddress,
        l: *const crate::QListOfQHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator_2(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator_2(
        this_ptr: *const crate::QListOfQNetworkCookie,
        l: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator_2(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator_2(
        this_ptr: *const crate::QListOfQNetworkInterface,
        l: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list that contains all the items in this list followed by all the items in the <i>other</i> list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator_2(
        this_ptr: *const crate::QListOfQNetworkProxy,
        l: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__5(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__5(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__5(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__5(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__5(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__5(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__5(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__5(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__5(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__5(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__5(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__5(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__5(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__5(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__5(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">operator&lt;&lt;</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__5(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__6(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__6(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        t: *const crate::QDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__6(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        t: *const crate::QDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__6(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        t: *const crate::QDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__6(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        t: *const crate::QDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__6(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        t: *const crate::QDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__6(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        t: *const crate::QSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__6(
        this_ptr: *mut crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__6(
        this_ptr: *mut crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__6(
        this_ptr: *mut crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__6(
        this_ptr: *mut crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__6(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__6(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__6(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__6(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        t: *const crate::QNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Appends <i>value</i> to the list.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__6(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_operator__7(
        this_ptr: *mut crate::QListOfQPairOfQByteArrayQByteArray,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_operator__7(
        this_ptr: *mut crate::QListOfQDnsDomainNameRecord,
        l: *const crate::QListOfQDnsDomainNameRecord,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_operator__7(
        this_ptr: *mut crate::QListOfQDnsHostAddressRecord,
        l: *const crate::QListOfQDnsHostAddressRecord,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_operator__7(
        this_ptr: *mut crate::QListOfQDnsMailExchangeRecord,
        l: *const crate::QListOfQDnsMailExchangeRecord,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_operator__7(
        this_ptr: *mut crate::QListOfQDnsServiceRecord,
        l: *const crate::QListOfQDnsServiceRecord,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_operator__7(
        this_ptr: *mut crate::QListOfQDnsTextRecord,
        l: *const crate::QListOfQDnsTextRecord,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_operator__7(
        this_ptr: *mut crate::QListOfQSslCertificateExtension,
        l: *const crate::QListOfQSslCertificateExtension,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_operator__7(
        this_ptr: *mut crate::QListOfQSslCertificate,
        l: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_operator__7(
        this_ptr: *mut crate::QListOfQSslError,
        l: *const crate::QListOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_operator__7(
        this_ptr: *mut crate::QListOfQSslCipher,
        l: *const crate::QListOfQSslCipher,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_operator__7(
        this_ptr: *mut crate::QListOfQHostAddress,
        l: *const crate::QListOfQHostAddress,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_operator__7(
        this_ptr: *mut crate::QListOfQNetworkConfiguration,
        l: *const crate::QListOfQNetworkConfiguration,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_operator__7(
        this_ptr: *mut crate::QListOfQNetworkCookie,
        l: *const crate::QListOfQNetworkCookie,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_operator__7(
        this_ptr: *mut crate::QListOfQNetworkAddressEntry,
        l: *const crate::QListOfQNetworkAddressEntry,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_operator__7(
        this_ptr: *mut crate::QListOfQNetworkInterface,
        l: *const crate::QListOfQNetworkInterface,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#operator-lt-lt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Appends the items of the <i>other</i> list to this list and returns a reference to this list.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#append">append</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_operator__7(
        this_ptr: *mut crate::QListOfQNetworkProxy,
        l: *const crate::QListOfQNetworkProxy,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> object with the data contained in <i>vector</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#fromVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> object with the data contained in <i>vector</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html">QVector</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> vect;
    ///  vect <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">20.0</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">30.0</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">40.0</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="number">50.0</span>;
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> list <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html">QVector</a></span><span class="operator">&lt;</span>T<span class="operator">&gt;</span><span class="operator">::</span>fromVector(vect);
    ///  <span class="comment">// list: [20.0, 30.0, 40.0, 50.0]</span>
    /// </pre>
    /// <p><b>Note: </b>Since Qt 5.14, range constructors are available for Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a> and should be used in place of this method.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#fromSet">fromSet</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#toVector">toVector</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#toList">QVector::toList</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_fromVector(
        vector: *const crate::QVectorOfQSslError,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns a <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> object with the data contained in this <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#toVector">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a <a href="http://doc.qt.io/qt-5/qvector.html">QVector</a> object with the data contained in this <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qstringlist.html">QStringList</a></span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Sven"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Kim"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Ola"</span>;
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vect <span class="operator">=</span> list<span class="operator">.</span>toVector();
    ///  <span class="comment">// vect: ["Sven", "Kim", "Ola"]</span>
    /// </pre>
    /// <p><b>Note: </b>Since Qt 5.14, range constructors are available for Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a> and should be used in place of this method.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#toSet">toSet</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#fromVector">fromVector</a>(), and <a href="http://doc.qt.io/qt-5/qvector.html#fromList">QVector::fromList</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_toVector(
        this_ptr: *const crate::QListOfQSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash12(
        key: *const crate::QListOfQPairOfQByteArrayQByteArray,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash19(
        key: *const crate::QListOfQSslCertificate,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash20(
        key: *const crate::QListOfQSslError,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash22(
        key: *const crate::QListOfQHostAddress,
        seed: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;

    pub fn ctr_qt_network_ffi_operator_21(
        lhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
        rhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    pub fn ctr_qt_network_ffi_operator_37(
        lhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
        rhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is less than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qchar.html#operator-lt-eq">C++ documentation</a> for <span style='color: green;'>```bool operator<=(QChar c1, QChar c2)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is less than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_operator__49(
        lhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
        rhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is greater than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qchar.html#operator-gt-eq">C++ documentation</a> for <span style='color: green;'>```bool operator>=(QChar c1, QChar c2)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the numeric Unicode value of <i>c1</i> is greater than or equal to that of <i>c2</i>; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_operator__65(
        lhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
        rhs: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> bool;

    /// <p>Constructs an empty map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#QMap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_QMap() -> *mut crate::QMapOfQByteArrayQVariant;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#QMap-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p>
    /// <p>This operation occurs in <a href="http://doc.qt.io/qt-5/containers.html#constant-time">constant time</a>, because QMap is <a href="http://doc.qt.io/qt-5/implicit-sharing.html">implicitly shared</a>. This makes returning a QMap from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and this takes <a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#operator-eq">operator=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_QMap1(
        other: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::QMapOfQByteArrayQVariant;

    /// <p>Destroys the map. References to the values in the map, and all iterators over this map, become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#dtor.QMap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the map. References to the values in the map, and all iterators over this map, become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_dQMap(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    );

    /// <p>Assigns <i>other</i> to this map and returns a reference to this map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#operator-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>other</i> to this map and returns a reference to this map.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator_(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        other: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::QMapOfQByteArrayQVariant;

    /// <p>Swaps map <i>other</i> with this map. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps map <i>other</i> with this map. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_swap(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        other: *mut crate::QMapOfQByteArrayQVariant,
    );

    /// <p>Returns <code>true</code> if <i>other</i> is equal to this map; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> is equal to this map; otherwise returns false.</p>
    /// <p>Two maps are considered equal if they contain the same (key, value) pairs.</p>
    /// <p>This function requires the value type to implement <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        other: *const crate::QMapOfQByteArrayQVariant,
    ) -> bool;

    /// <p>Returns the number of (key, value) pairs in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of (key, value) pairs in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_size(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if the map contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the map contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_isEmpty(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_detach(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    );

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_isDetached(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_setSharable(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        sharable: bool,
    );

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_isSharedWith(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        other: *const crate::QMapOfQByteArrayQVariant,
    ) -> bool;

    /// <p>Removes all items from the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_clear(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    );

    /// <p>Removes all the items that have the key <i>key</i> from the map. Returns the number of items removed which will be 1 if the key exists in the map, and 0 otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the items that have the key <i>key</i> from the map. Returns the number of items removed which will be 1 if the key exists in the map, and 0 otherwise.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#clear">clear</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#take">take</a>(), and <a href="http://doc.qt.io/qt-5/qmultimap.html#remove">QMultiMap::remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_remove(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the item with the key <i>key</i> from the map and returns the value associated with it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#take">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item with the key <i>key</i> from the map and returns the value associated with it.</p>
    /// <p>If the item does not exist in the map, the function simply returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If there are multiple items for <i>key</i> in the map, only the most recently inserted one is removed and returned.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qmap.html#remove">remove</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_take(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns <code>true</code> if the map contains an item with key <i>key</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the map contains an item with key <i>key</i>; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#count-1">count</a>() and <a href="http://doc.qt.io/qt-5/qmultimap.html#contains">QMultiMap::contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_contains(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Returns the first key with value <i>value</i>, or <i>defaultKey</i> if the map contains no item with value <i>value</i>. If no <i>defaultKey</i> is provided the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed key</a>.</p>
    /// <p>This function can be slow (<a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>), because <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s internal data structure is optimized for fast lookup by key, not by value.</p>
    /// <p>This function was introduced in Qt 4.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#keys">keys</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        value: *const ::qt_core::QVariant,
        defaultKey: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the value associated with the key <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value associated with the key <i>key</i>.</p>
    /// <p>If the map contains no item with key <i>key</i>, the function returns <i>defaultValue</i>. If no <i>defaultValue</i> is specified, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If there are multiple items for <i>key</i> in the map, the value of the most recently inserted one is returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#values">values</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#contains">contains</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_value(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
        defaultValue: *const ::qt_core::QVariant,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the value associated with the key <i>key</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value associated with the key <i>key</i> as a modifiable reference.</p>
    /// <p>If the map contains no item with key <i>key</i>, the function inserts a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a> into the map with key <i>key</i>, and returns a reference to it. If the map contains multiple items with key <i>key</i>, this function returns a reference to the most recently inserted value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__2(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QVariant;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_operator__3(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a list containing all the keys in the map in ascending order. Keys that occur multiple times in the map (because the method is operating on a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) also occur multiple times in the list.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#keys">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the keys in the map in ascending order. Keys that occur multiple times in the map (because the method is operating on a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) also occur multiple times in the list.</p>
    /// <p>The order is guaranteed to be the same as that used by <a href="http://doc.qt.io/qt-5/qmap.html#values">values</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#uniqueKeys">QMultiMap::uniqueKeys</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#values">values</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_keys(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#keys-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Returns a list containing all the keys associated with value <i>value</i> in ascending order.</p>
    /// <p>This function can be slow (<a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>), because <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s internal data structure is optimized for fast lookup by key, not by value.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_keys1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        value: *const ::qt_core::QVariant,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns a list containing all the values in the map, in ascending order of their keys. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#values">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the values in the map, in ascending order of their keys. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#keys">keys</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_values(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QListOfQVariant;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-obsolete.html#uniqueKeys">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a> for storing multiple values with the same key.</p>
    /// <p>Returns a list containing all the keys in the map in ascending order. Keys that occur multiple times in the map (because items were inserted with <a href="http://doc.qt.io/qt-5/qmap-obsolete.html#insertMulti">insertMulti</a>(), or <a href="http://doc.qt.io/qt-5/qmap-obsolete.html#unite">unite</a>() was used) occur only once in the returned list.</p>
    /// <p>This function was introduced in Qt 4.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#uniqueKeys">QMultiMap::uniqueKeys</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_uniqueKeys(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QListOfQByteArray;

    /// <p>Returns a list containing all the values in the map, in ascending order of their keys. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qmap.html#values">C++ documentation</a> for <span style='color: green;'>```QList<T> QMap::values() const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the values in the map, in ascending order of their keys. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#keys">keys</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_values1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QListOfQVariant;

    /// <p>Returns the number of items associated with key <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items associated with key <i>key</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qmultimap.html#count">QMultiMap::count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_count(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a reference to the smallest key in the map. This function assumes that the map is not empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#firstKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the smallest key in the map. This function assumes that the map is not empty.</p>
    /// <p>This executes in <a href="http://doc.qt.io/qt-5/containers.html#constant-time">constant time</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#lastKey">lastKey</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">keyBegin</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_firstKey(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns a reference to the largest key in the map. This function assumes that the map is not empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#lastKey">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the largest key in the map. This function assumes that the map is not empty.</p>
    /// <p>This executes in <a href="http://doc.qt.io/qt-5/containers.html#logarithmic-time">logarithmic time</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#firstKey">firstKey</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">keyEnd</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_lastKey(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns a reference to the first value in the map, that is the value mapped to the smallest key. This function assumes that the map is not empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#first">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the first value in the map, that is the value mapped to the smallest key. This function assumes that the map is not empty.</p>
    /// <p>When unshared (or const version is called), this executes in <a href="http://doc.qt.io/qt-5/containers.html#constant-time">constant time</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#last">last</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#firstKey">firstKey</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_first(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QVariant;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#first-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>This function was introduced in Qt 5.2.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_first1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns a reference to the last value in the map, that is the value mapped to the largest key. This function assumes that the map is not empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#last">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a reference to the last value in the map, that is the value mapped to the largest key. This function assumes that the map is not empty.</p>
    /// <p>When unshared (or const version is called), this executes in <a href="http://doc.qt.io/qt-5/containers.html#logarithmic-time">logarithmic time</a>.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#first">first</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#lastKey">lastKey</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_last(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QVariant;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#last-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>This function was introduced in Qt 5.2.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_last1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *const ::qt_core::QVariant;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like <a href="http://doc.qt.io/qt-5/qmap-iterator.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qmap-iterator.html#value">value</a>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#begin">QMap::begin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#end">QMap::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_iterator(
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>Returns the current item's key as a const reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current item's key as a const reference.</p>
    /// <p>There is no direct way of changing an item's key through an iterator, although it can be done by calling <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>() followed by <a href="http://doc.qt.io/qt-5/qhash.html#insert">QHash::insert</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_key(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>You can change the value of an item by using value() on the left side of an assignment, for example:</p>
    /// <pre class="cpp"> <span class="keyword">if</span> (i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"Hello"</span>)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">=</span> <span class="string">"Bonjour"</span>;
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">operator*</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_value(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__1(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
        o: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__3(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__4(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__5(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__6(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Returns an iterator to the item at <i>j</i> positions forward from this iterator. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p>This operation can be slow for large <i>j</i> values.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_1(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Returns an iterator to the item at <i>j</i> positions backward from this iterator. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p>This operation can be slow for large <i>j</i> values.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_2(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__7(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__8(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator__9(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
        o: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> bool;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html#value">value</a>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#constBegin">QMap::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">QMap::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator(
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html#const_iterator-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator1(
        o: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns the current key, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current key, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_key(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_value(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__1(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        o: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__3(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__4(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__5(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__6(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an iterator to the item at <i>j</i> positions forward from this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator to the item at <i>j</i> positions forward from this iterator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_1(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an iterator to the item at <i>j</i> positions backward from this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator to the item at <i>j</i> positions backward from this iterator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_2(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__7(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator__8(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator(
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator1(
        o: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>Returns the current item's key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current item's key.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator_(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns a pointer to the current item's key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's key.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *const ::qt_core::QByteArray;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__1(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
        o: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">QHash::keyEnd</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__3(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previous item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__4(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">QHash::keyBegin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__5(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previous item.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator__6(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>Returns the underlying <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">const_iterator</a> this <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">key_iterator</a> is based on.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#base">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the underlying <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">const_iterator</a> this <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">key_iterator</a> is based on.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_base(
        this_ptr: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_begin(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#begin-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_begin1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_constBegin(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the map.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_cbegin(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_end(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#end-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_end1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_constEnd(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the map.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_cend(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first key in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first key in the map.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">keyEnd</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#firstKey">firstKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_keyBegin(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last key in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last key in the map.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">keyBegin</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#lastKey">lastKey</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_keyEnd(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>Removes the (key, value) pair pointed to by the iterator <i>pos</i> from the map, and returns an iterator to the next item in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the (key, value) pair pointed to by the iterator <i>pos</i> from the map, and returns an iterator to the next item in the map.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_erase(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        it: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qmap.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_count1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns an iterator pointing to the item with key <i>key</i> in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#find">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator pointing to the item with key <i>key</i> in the map.</p>
    /// <p>If the map contains no item with key <i>key</i>, the function returns <a href="http://doc.qt.io/qt-5/qmap.html#end">end</a>().</p>
    /// <p>If the map contains multiple items with key <i>key</i>, this function returns an iterator that points to the most recently inserted value. The other values are accessible by incrementing the iterator. For example, here's some code that iterates over all the items with the same key:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i <span class="operator">=</span> map<span class="operator">.</span>find(<span class="string">"HDR"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"HDR"</span>) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#constFind">constFind</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#values">values</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#lowerBound">lowerBound</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#upperBound">upperBound</a>(), and <a href="http://doc.qt.io/qt-5/qmultimap.html#find">QMultiMap::find</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_find(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#find-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_find1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an const iterator pointing to the item with key <i>key</i> in the map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#constFind">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an const iterator pointing to the item with key <i>key</i> in the map.</p>
    /// <p>If the map contains no item with key <i>key</i>, the function returns <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>().</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#find">find</a>() and <a href="http://doc.qt.io/qt-5/qmultimap.html#constFind">QMultiMap::constFind</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_constFind(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an iterator pointing to the first item with key <i>key</i> in the map. If the map contains no item with key <i>key</i>, the function returns an iterator to the nearest item with a greater key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#lowerBound">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator pointing to the first item with key <i>key</i> in the map. If the map contains no item with key <i>key</i>, the function returns an iterator to the nearest item with a greater key.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="string">"one"</span>);
    ///  map<span class="operator">.</span>insert(<span class="number">5</span><span class="operator">,</span> <span class="string">"five"</span>);
    ///  map<span class="operator">.</span>insert(<span class="number">10</span><span class="operator">,</span> <span class="string">"ten"</span>);
    ///
    ///  map<span class="operator">.</span>lowerBound(<span class="number">0</span>);      <span class="comment">// returns iterator to (1, "one")</span>
    ///  map<span class="operator">.</span>lowerBound(<span class="number">1</span>);      <span class="comment">// returns iterator to (1, "one")</span>
    ///  map<span class="operator">.</span>lowerBound(<span class="number">2</span>);      <span class="comment">// returns iterator to (5, "five")</span>
    ///  map<span class="operator">.</span>lowerBound(<span class="number">10</span>);     <span class="comment">// returns iterator to (10, "ten")</span>
    ///  map<span class="operator">.</span>lowerBound(<span class="number">999</span>);    <span class="comment">// returns end()</span>
    /// </pre>
    /// <p>If the map contains multiple items with key <i>key</i>, this function returns an iterator that points to the most recently inserted value. The other values are accessible by incrementing the iterator. For example, here's some code that iterates over all the items with the same key:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i <span class="operator">=</span> map<span class="operator">.</span>lowerBound(<span class="string">"HDR"</span>);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator upperBound <span class="operator">=</span> map<span class="operator">.</span>upperBound(<span class="string">"HDR"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> upperBound) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#upperBound">upperBound</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#find">find</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_lowerBound(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#lowerBound-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_lowerBound1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Returns an iterator pointing to the item that immediately follows the last item with key <i>key</i> in the map. If the map contains no item with key <i>key</i>, the function returns an iterator to the nearest item with a greater key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#upperBound">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator pointing to the item that immediately follows the last item with key <i>key</i> in the map. If the map contains no item with key <i>key</i>, the function returns an iterator to the nearest item with a greater key.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="number">1</span><span class="operator">,</span> <span class="string">"one"</span>);
    ///  map<span class="operator">.</span>insert(<span class="number">5</span><span class="operator">,</span> <span class="string">"five"</span>);
    ///  map<span class="operator">.</span>insert(<span class="number">10</span><span class="operator">,</span> <span class="string">"ten"</span>);
    ///
    ///  map<span class="operator">.</span>upperBound(<span class="number">0</span>);      <span class="comment">// returns iterator to (1, "one")</span>
    ///  map<span class="operator">.</span>upperBound(<span class="number">1</span>);      <span class="comment">// returns iterator to (5, "five")</span>
    ///  map<span class="operator">.</span>upperBound(<span class="number">2</span>);      <span class="comment">// returns iterator to (5, "five")</span>
    ///  map<span class="operator">.</span>upperBound(<span class="number">10</span>);     <span class="comment">// returns end()</span>
    ///  map<span class="operator">.</span>upperBound(<span class="number">999</span>);    <span class="comment">// returns end()</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#lowerBound">lowerBound</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#find">find</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_upperBound(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#upperBound-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_upperBound1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p>Inserts a new item with the key <i>key</i> and a value of <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts a new item with the key <i>key</i> and a value of <i>value</i>.</p>
    /// <p>If there is already an item with the key <i>key</i>, that item's value is replaced with <i>value</i>.</p>
    /// <p>If there are multiple items with the key <i>key</i>, the most recently inserted item's value is replaced with <i>value</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#insert">QMultiMap::insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#insert-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Inserts a new item with the key <i>key</i> and value <i>value</i> and with hint <i>pos</i> suggesting where to do the insert.</p>
    /// <p>If <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">constBegin</a>() is used as hint it indicates that the <i>key</i> is less than any key in the map while <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>() suggests that the <i>key</i> is (strictly) larger than any key in the map. Otherwise the hint should meet the condition (<i>pos</i> - 1).<a href="http://doc.qt.io/qt-5/qmap.html#key">key</a>() &lt; <i>key</i> &lt;= pos.<a href="http://doc.qt.io/qt-5/qmap.html#key">key</a>(). If the hint <i>pos</i> is wrong it is ignored and a regular insert is done.</p>
    /// <p>If there is already an item with the key <i>key</i>, that item's value is replaced with <i>value</i>.</p>
    /// <p>If there are multiple items with the key <i>key</i>, then exactly one of them is replaced with <i>value</i>.</p>
    /// <p>If the hint is correct and the map is unshared, the insert executes in amortized <a href="http://doc.qt.io/qt-5/containers.html#constant-time">constant time</a>.</p>
    /// <p>When creating a map from sorted data inserting the largest key first with <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">constBegin</a>() is faster than inserting in sorted order with <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>(), since <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">constEnd</a>() - 1 (which is needed to check if the hint is valid) needs <a href="http://doc.qt.io/qt-5/containers.html#logarithmic-time">logarithmic time</a>.</p>
    /// <p><b>Note:</b> Be careful with the hint. Providing an iterator from an older shared instance might crash but there is also a risk that it will silently corrupt both the map and the <i>pos</i> map.</p>
    /// <p>This function was introduced in Qt 5.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#insert">QMultiMap::insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert1(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        pos: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        key: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>Inserts all the items in <i>map</i> into this map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#insert-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts all the items in <i>map</i> into this map.</p>
    /// <p>If a key is common to both maps, its value will be replaced with the value stored in <i>map</i>.</p>
    /// <p><b>Note: </b>If <i>map</i> contains multiple entries with the same key then the final value of the key is undefined.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#insert">QMultiMap::insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_insert2(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        map: *const crate::QMapOfQByteArrayQVariant,
    );

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-obsolete.html#insertMulti">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a> for storing multiple values with the same key.</p>
    /// <p>Inserts a new item with the key <i>key</i> and a value of <i>value</i>.</p>
    /// <p>If there is already an item with the same key in the map, this function will simply create a new one. (This behavior is different from <a href="http://doc.qt.io/qt-5/qmap.html#insert">insert</a>(), which overwrites the value of an existing item.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#insert">QMultiMap::insert</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_insertMulti(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
        value: *const ::qt_core::QVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_insertMulti1(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        pos: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        akey: *const ::qt_core::QByteArray,
        avalue: *const ::qt_core::QVariant,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-obsolete.html#unite">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a> for storing multiple values with the same key.</p>
    /// <p>Inserts all the items in the <i>other</i> map into this map. If a key is common to both maps, the resulting map will contain the key multiple times.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmultimap.html#unite">QMultiMap::unite</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_unite(
        this_ptr: *mut crate::QMapOfQByteArrayQVariant,
        other: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut crate::QMapOfQByteArrayQVariant;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>(), returning true if the map is empty; otherwise returning false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>(), returning true if the map is empty; otherwise returning false.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_empty(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
    ) -> bool;

    /// <p>Constructs an empty map.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty map.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_QMultiMap(
    ) -> *mut crate::QMultiMapOfAlternativeNameEntryTypeQString;

    /// <p>Swaps map <i>other</i> with this map. This operation is very fast and never fails.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#swap">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Swaps map <i>other</i> with this map. This operation is very fast and never fails.</p>
    /// <p>This function was introduced in Qt 4.8.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_swap(
        this_ptr: *mut crate::QMultiMapOfAlternativeNameEntryTypeQString,
        other: *mut crate::QMultiMapOfAlternativeNameEntryTypeQString,
    );

    /// <p>Returns a list containing all the values associated with key <i>key</i>, from the most recently inserted to the least recently inserted one.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#values">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the values associated with key <i>key</i>, from the most recently inserted to the least recently inserted one.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_values(
        this_ptr: *const crate::QMultiMapOfAlternativeNameEntryTypeQString,
        key: *const crate::q_ssl::AlternativeNameEntryType,
    ) -> *mut ::qt_core::QListOfQString;

    /// <p>Returns <code>true</code> if the map contains an item with key <i>key</i> and value <i>value</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the map contains an item with key <i>key</i> and value <i>value</i>; otherwise returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 4.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#contains">QMap::contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_contains(
        this_ptr: *const crate::QMultiMapOfAlternativeNameEntryTypeQString,
        key: *const crate::q_ssl::AlternativeNameEntryType,
        value: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Removes all the items that have the key <i>key</i> and the value <i>value</i> from the map. Returns the number of items removed.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the items that have the key <i>key</i> and the value <i>value</i> from the map. Returns the number of items removed.</p>
    /// <p>This function was introduced in Qt 4.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#remove">QMap::remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_remove(
        this_ptr: *mut crate::QMultiMapOfAlternativeNameEntryTypeQString,
        key: *const crate::q_ssl::AlternativeNameEntryType,
        value: *const ::qt_core::QString,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the number of items with key <i>key</i> and value <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items with key <i>key</i> and value <i>value</i>.</p>
    /// <p>This function was introduced in Qt 4.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#count-1">QMap::count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_count(
        this_ptr: *const crate::QMultiMapOfAlternativeNameEntryTypeQString,
        key: *const crate::q_ssl::AlternativeNameEntryType,
        value: *const ::qt_core::QString,
    ) -> ::std::os::raw::c_int;

    /// <p>Constructs an empty hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#QHash">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an empty hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#clear">clear</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_QHash(
    ) -> *mut crate::QHashOfAttributeQVariant;

    /// <p>Destroys the hash. References to the values in the hash and all iterators of this hash become invalid.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#dtor.QHash">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Destroys the hash. References to the values in the hash and all iterators of this hash become invalid.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_dQHash(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    );

    /// <p>Returns the number of items in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#size">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items in the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#isEmpty">isEmpty</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#count-1">count</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_size(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns <code>true</code> if the hash contains no items; otherwise returns false.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#isEmpty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the hash contains no items; otherwise returns false.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_isEmpty(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> bool;

    /// <p>Returns the number of buckets in the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#capacity">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of buckets in the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s memory usage. In general, you will rarely ever need to call this function. If you want to know how many items are in the hash, call <a href="http://doc.qt.io/qt-5/qhash.html#size">size</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#squeeze">squeeze</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_capacity(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> ::std::os::raw::c_int;

    /// <p>Ensures that the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table consists of at least <i>size</i> buckets.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#reserve">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Ensures that the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table consists of at least <i>size</i> buckets.</p>
    /// <p>This function is useful for code that needs to build a huge hash and wants to avoid repeated reallocation. For example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>reserve(<span class="number">20000</span>);
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">20000</span>; <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    hash<span class="operator">.</span>insert(keys<span class="operator">[</span>i<span class="operator">]</span><span class="operator">,</span> values<span class="operator">[</span>i<span class="operator">]</span>);
    /// </pre>
    /// <p>Ideally, <i>size</i> should be slightly more than the maximum number of items expected in the hash. <i>size</i> doesn't have to be prime, because <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> will use a prime number internally anyway. If <i>size</i> is an underestimate, the worst that will happen is that the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> will be a bit slower.</p>
    /// <p>In general, you will rarely ever need to call this function. <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table automatically shrinks or grows to provide good performance without wasting too much memory.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#squeeze">squeeze</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_reserve(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        size: ::std::os::raw::c_int,
    );

    /// <p>Reduces the size of the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table to save memory.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#squeeze">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reduces the size of the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal hash table to save memory.</p>
    /// <p>The sole purpose of this function is to provide a means of fine tuning <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s memory usage. In general, you will rarely ever need to call this function.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#reserve">reserve</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#capacity">capacity</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_squeeze(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    );

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_detach(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    );

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_isDetached(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_setSharable(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        sharable: bool,
    );

    /// <p>Removes all items from the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#clear">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all items from the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_clear(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    );

    /// <p>Removes all the items that have the <i>key</i> from the hash. Returns the number of items removed which is 1 if the key exists in the hash, and 0 otherwise.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#remove">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes all the items that have the <i>key</i> from the hash. Returns the number of items removed which is 1 if the key exists in the hash, and 0 otherwise.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#clear">clear</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#take">take</a>(), and <a href="http://doc.qt.io/qt-5/qmultihash.html#remove">QMultiHash::remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_remove(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> ::std::os::raw::c_int;

    /// <p>Removes the item with the <i>key</i> from the hash and returns the value associated with it.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#take">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the item with the <i>key</i> from the hash and returns the value associated with it.</p>
    /// <p>If the item does not exist in the hash, the function simply returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If there are multiple items for <i>key</i> in the hash, only the most recently inserted one is removed.</p>
    /// <p>If you don't use the return value, <a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>() is more efficient.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_take(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns <code>true</code> if the hash contains an item with the <i>key</i>; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#contains">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if the hash contains an item with the <i>key</i>; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#count-1">count</a>() and <a href="http://doc.qt.io/qt-5/qmultihash.html#contains">QMultiHash::contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_contains(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> bool;

    /// <p>Returns the first key mapped to <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the first key mapped to <i>value</i>.</p>
    /// <p>If the hash contains no item with the <i>value</i>, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed key</a>.</p>
    /// <p>This function can be slow (<a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>), because <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal data structure is optimized for fast lookup by key, not by value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#keys">keys</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        value: *const ::qt_core::QVariant,
    ) -> crate::q_network_request::Attribute;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#key-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Returns the first key mapped to <i>value</i>, or <i>defaultKey</i> if the hash contains no item mapped to <i>value</i>.</p>
    /// <p>This function can be slow (<a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>), because <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s internal data structure is optimized for fast lookup by key, not by value.</p>
    /// <p>This function was introduced in Qt 4.3.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        value: *const ::qt_core::QVariant,
        defaultKey: *const crate::q_network_request::Attribute,
    ) -> crate::q_network_request::Attribute;

    /// <p>Returns the value associated with the <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value associated with the <i>key</i>.</p>
    /// <p>If the hash contains no item with the <i>key</i>, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If there are multiple items for the <i>key</i> in the hash, the value of the most recently inserted one is returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#values">values</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>(), and <a href="http://doc.qt.io/qt-5/qhash.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_value(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#value-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>If the hash contains no item with the given <i>key</i>, the function returns <i>defaultValue</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_value1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
        defaultValue: *const ::qt_core::QVariant,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the value associated with the <i>key</i> as a modifiable reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#operator-5b-5d">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value associated with the <i>key</i> as a modifiable reference.</p>
    /// <p>If the hash contains no item with the <i>key</i>, the function inserts a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a> into the hash with the <i>key</i>, and returns a reference to it. If the hash contains multiple items with the <i>key</i>, this function returns a reference to the most recently inserted value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator__(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#operator-5b-5d-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator__1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a list containing all the values in the hash, in an arbitrary order. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#values">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the values in the hash, in an arbitrary order. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    /// <p>The order is guaranteed to be the same as that used by <a href="http://doc.qt.io/qt-5/qhash.html#keys">keys</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#keys">keys</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_values(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut ::qt_core::QListOfQVariant;

    /// <p>Returns a list containing all the values in the hash, in an arbitrary order. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash.html#values">C++ documentation</a> for <span style='color: green;'>```QList<T> QHash::values() const```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a list containing all the values in the hash, in an arbitrary order. If a key is associated with multiple values, all of its values will be in the list, and not just the most recently inserted one.</p>
    /// <p>The order is guaranteed to be the same as that used by <a href="http://doc.qt.io/qt-5/qhash.html#keys">keys</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#keys">keys</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_values1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QListOfQVariant;

    /// <p>Returns the number of items associated with the <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#count">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the number of items associated with the <i>key</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qhash-obsolete.html#insertMulti">insertMulti</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_count(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> ::std::os::raw::c_int;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator(
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qhash-iterator.html#iterator">C++ documentation</a> for <span style='color: green;'>```iterator::iterator()```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator1(
        node: *mut ::std::ffi::c_void,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>Returns the current item's key as a const reference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current item's key as a const reference.</p>
    /// <p>There is no direct way of changing an item's key through an iterator, although it can be done by calling <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>() followed by <a href="http://doc.qt.io/qt-5/qhash.html#insert">QHash::insert</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_key(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *const crate::q_network_request::Attribute;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>You can change the value of an item by using value() on the left side of an assignment, for example:</p>
    /// <pre class="cpp"> <span class="keyword">if</span> (i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"Hello"</span>)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">=</span> <span class="string">"Bonjour"</span>;
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">operator*</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_value(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a modifiable reference to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a modifiable reference to the current item's value.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">key</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns a pointer to the current item's value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's value.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#value">value</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut ::qt_core::QVariant;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__1(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
        o: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__3(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__4(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__5(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__6(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Returns an iterator to the item at <i>j</i> positions forward from this iterator. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p>This operation can be slow for large <i>j</i> values.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_1(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Returns an iterator to the item at <i>j</i> positions backward from this iterator. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p>This operation can be slow for large <i>j</i> values.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_2(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Advances the iterator by <i>j</i> items. (If <i>j</i> is negative, the iterator goes backward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__7(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator--eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>Makes the iterator go back by <i>j</i> items. (If <i>j</i> is negative, the iterator goes forward.)</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qhash-iterator-obsolete.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__8(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator__9(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::Iterator,
        o: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> bool;

    /// <p>Constructs an uninitialized iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html#const_iterator">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs an uninitialized iterator.</p>
    /// <p>Functions like <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html#value">value</a>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#constBegin">QHash::constBegin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">QHash::constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator(
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator1(
        node: *mut ::std::ffi::c_void,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Constructs a copy of <i>other</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html#const_iterator-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a copy of <i>other</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator2(
        o: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns the current key, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current key, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_key(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *const crate::q_network_request::Attribute;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_value(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current value, converted to a <a href="http://doc.qt.io/qt-5/qvariant.html">QVariant</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns a pointer to the current result.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qfuture-const-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current result.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *const ::qt_core::QVariant;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__1(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
        o: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++it</code>) advances the iterator to the next item in the container and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#end">QAssociativeIterable::end</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__3(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>it++</code>) advances the iterator to the next item in the container and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__4(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix -- operator (<code>--it</code>) makes the preceding item current and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qassociativeiterable.html#begin">QAssociativeIterable::begin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__5(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>it--</code>) makes the preceding item current and returns an iterator to the previously current item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__6(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns an iterator to the item at <i>j</i> positions forward from this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator to the item at <i>j</i> positions forward from this iterator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_1(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns an iterator to the item at <i>j</i> positions backward from this iterator.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator to the item at <i>j</i> positions backward from this iterator.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_2(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Advances the iterator by <i>j</i> items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Advances the iterator by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">operator-=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b">operator+</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__7(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Makes the iterator go back by <i>j</i> items.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator--eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Makes the iterator go back by <i>j</i> items.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-2b-eq">operator+=</a>() and <a href="http://doc.qt.io/qt-5/qassociativeiterable-const-iterator.html#operator-">operator-</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator__8(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
        j: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator(
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator1(
        o: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>Returns the current item's key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2a">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the current item's key.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator_(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *const crate::q_network_request::Attribute;

    /// <p>Returns a pointer to the current item's key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator--gt">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a pointer to the current item's key.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *const crate::q_network_request::Attribute;

    /// <p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-eq-eq">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if <i>other</i> points to the same item as this iterator; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-not-eq">operator!=</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__1(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
        o: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> bool;

    /// <p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>The prefix ++ operator (<code>++i</code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">QHash::keyEnd</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator--">operator--</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__3(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>The postfix ++ operator (<code>i++</code>) advances the iterator to the next item in the hash and returns an iterator to the previous item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__4(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator--">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>The prefix -- operator (<code>--i</code>) makes the preceding item current and returns an iterator pointing to the new current item.</p>
    /// <p>Calling this function on <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">QHash::keyBegin</a>() leads to undefined results.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#operator-2b-2b">operator++</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__5(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator-obsolete.html#operator---1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>This operator is deprecated in order to align with std::unordered_map functionality.</p>
    /// <p>This is an overloaded function.</p>
    /// <p>The postfix -- operator (<code>i--</code>) makes the preceding item current and returns an iterator pointing to the previous item.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator__6(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
        arg1: ::std::os::raw::c_int,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>Returns the underlying <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">const_iterator</a> this <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">key_iterator</a> is based on.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html#base">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the underlying <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">const_iterator</a> this <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">key_iterator</a> is based on.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_base(
        this_ptr: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#begin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_begin(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#begin-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_begin1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#cbegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#cend">cend</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_cbegin(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#constBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first item in the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constBegin(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#end">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#begin">begin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">constEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_end(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#end-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_end1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#cend">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    /// <p>This function was introduced in Qt 5.0.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#cbegin">cbegin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_cend(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last item in the hash.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#constBegin">constBegin</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#end">end</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constEnd(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first key in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the first key in the hash.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">keyEnd</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_keyBegin(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last key in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a const <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterator</a> pointing to the imaginary item after the last key in the hash.</p>
    /// <p>This function was introduced in Qt 5.6.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">keyBegin</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_keyEnd(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#erase-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_erase(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        it: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>Removes the (key, value) pair associated with the iterator <i>pos</i> from the hash, and returns an iterator to the next item in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#erase">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Removes the (key, value) pair associated with the iterator <i>pos</i> from the hash, and returns an iterator to the next item in the hash.</p>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#take">take</a>(), this function never causes <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. This means that it can safely be called while iterating, and won't affect the order of items in the hash. For example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qobject.html">QObject</a></span> <span class="operator">*</span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> objectHash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qobject.html">QObject</a></span> <span class="operator">*</span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> objectHash<span class="operator">.</span>find(obj);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> objectHash<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> obj) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>value() <span class="operator">=</span><span class="operator">=</span> <span class="number">0</span>) {
    /// &#32;   &#32;    i <span class="operator">=</span> objectHash<span class="operator">.</span>erase(i);
    /// &#32;    } <span class="keyword">else</span> {
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    }
    ///  }
    /// </pre>
    /// <p>This function was introduced in Qt 5.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#take">take</a>(), and <a href="http://doc.qt.io/qt-5/qhash.html#find">find</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_erase1(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        it: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#count-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Same as <a href="http://doc.qt.io/qt-5/qhash.html#size">size</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_count1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns an iterator pointing to the item with the <i>key</i> in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#find">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator pointing to the item with the <i>key</i> in the hash.</p>
    /// <p>If the hash contains no item with the <i>key</i>, the function returns <a href="http://doc.qt.io/qt-5/qhash.html#end">end</a>().</p>
    /// <p>If the hash contains multiple items with the <i>key</i>, this function returns an iterator that points to the most recently inserted value. The other values are accessible by incrementing the iterator. For example, here's some code that iterates over all the items with the same key:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i <span class="operator">=</span> hash<span class="operator">.</span>find(<span class="string">"HDR"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"HDR"</span>) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#values">values</a>(), and <a href="http://doc.qt.io/qt-5/qmultihash.html#find">QMultiHash::find</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_find(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#find-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_find1(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Returns an iterator pointing to the item with the <i>key</i> in the hash.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#constFind">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an iterator pointing to the item with the <i>key</i> in the hash.</p>
    /// <p>If the hash contains no item with the <i>key</i>, the function returns <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">constEnd</a>().</p>
    /// <p>This function was introduced in Qt 4.1.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#find">find</a>() and <a href="http://doc.qt.io/qt-5/qmultihash.html#constFind">QMultiHash::constFind</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_constFind(
        this_ptr: *const crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p>Inserts a new item with the <i>key</i> and a value of <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#insert">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Inserts a new item with the <i>key</i> and a value of <i>value</i>.</p>
    /// <p>If there is already an item with the <i>key</i>, that item's value is replaced with <i>value</i>.</p>
    /// <p>If there are multiple items with the <i>key</i>, the most recently inserted item's value is replaced with <i>value</i>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_insert(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
        value: *const ::qt_core::QVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-obsolete.html#insertMulti">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Inserts a new item with the <i>key</i> and a value of <i>value</i>.</p>
    /// <p>If there is already an item with the same key in the hash, this function will simply create a new one. (This behavior is different from <a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>(), which overwrites the value of an existing item.)</p>
    /// <p>This function is obsolete. Use <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a> or <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a> instead.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#values">values</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_insertMulti(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        key: *const crate::q_network_request::Attribute,
        value: *const ::qt_core::QVariant,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qhash.html#isEmpty">isEmpty</a>(), returning true if the hash is empty; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html#empty">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is provided for STL compatibility. It is equivalent to <a href="http://doc.qt.io/qt-5/qhash.html#isEmpty">isEmpty</a>(), returning true if the hash is empty; otherwise returns <code>false</code>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_empty(
        this_ptr: *const crate::QHashOfAttributeQVariant,
    ) -> bool;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__81(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__88(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQSslCertificate,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__89(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQSslError,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__90(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQSslCipher,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__91(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQHostAddress,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__93(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQNetworkCookie,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__95(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQNetworkInterface,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__96(
        debug: *const ::qt_core::QDebug,
        list: *const crate::QListOfQNetworkProxy,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__98(
        debug: *const ::qt_core::QDebug,
        vec: *const crate::QVectorOfQSslError,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__99(
        debug: *const ::qt_core::QDebug,
        vec: *const crate::QVectorOfQSslEllipticCurve,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__101(
        debug: *const ::qt_core::QDebug,
        map: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__102(
        debug: *const ::qt_core::QDebug,
        hash: *const crate::QHashOfAttributeQVariant,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__103(
        debug: *const ::qt_core::QDebug,
        pair: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__104(
        debug: *const ::qt_core::QDebug,
        pair: *const crate::QPairOfQHostAddressInt,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__105(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__106(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__107(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__108(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__109(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__110(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__111(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__112(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__113(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__114(
        debug: *const ::qt_core::QDebug,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDebug;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__115(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__116(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__117(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__118(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__119(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__120(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__121(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__122(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__123(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__124(
        s: *mut ::qt_core::QDataStream,
        e: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__135(
        s: *mut ::qt_core::QDataStream,
        l: *mut crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__145(
        s: *mut ::qt_core::QDataStream,
        l: *mut crate::QListOfQHostAddress,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__151(
        s: *mut ::qt_core::QDataStream,
        l: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__161(
        s: *mut ::qt_core::QDataStream,
        l: *const crate::QListOfQHostAddress,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__175(
        s: *mut ::qt_core::QDataStream,
        hash: *mut crate::QHashOfAttributeQVariant,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__176(
        s: *mut ::qt_core::QDataStream,
        hash: *const crate::QHashOfAttributeQVariant,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__177(
        s: *mut ::qt_core::QDataStream,
        map: *mut crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__178(
        s: *mut ::qt_core::QDataStream,
        map: *const crate::QMapOfQByteArrayQVariant,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__179(
        s: *mut ::qt_core::QDataStream,
        p: *mut crate::QPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-gt-gt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator>>(QDataStream &in, QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reads a bit array into <i>ba</i> from stream <i>in</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__180(
        s: *mut ::qt_core::QDataStream,
        p: *mut crate::QPairOfQHostAddressInt,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__181(
        s: *mut ::qt_core::QDataStream,
        p: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbitarray.html#operator-lt-lt">C++ documentation</a> for <span style='color: green;'>```QDataStream &operator<<(QDataStream &out, const QBitArray &ba)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Writes bit array <i>ba</i> to stream <i>out</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/datastreamformat.html">Format of the QDataStream operators</a>.</p></div>
    pub fn ctr_qt_network_ffi_operator__182(
        s: *mut ::qt_core::QDataStream,
        p: *const crate::QPairOfQHostAddressInt,
    ) -> *mut ::qt_core::QDataStream;

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_dQPair(
        this_ptr: *mut crate::QPairOfQByteArrayQByteArray,
    );

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_dQPair(
        this_ptr: *mut crate::QPairOfQHostAddressInt,
    );

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_QPair2(
        other: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_QPair2(
        other: *const crate::QPairOfQHostAddressInt,
    ) -> *mut crate::QPairOfQHostAddressInt;

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QByteArray_QByteArray_operator_(
        this_ptr: *mut crate::QPairOfQByteArrayQByteArray,
        other: *const crate::QPairOfQByteArrayQByteArray,
    ) -> *mut crate::QPairOfQByteArrayQByteArray;

    /// <p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qpair.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QPair&lt;T1, T2&gt; can be used in your application if the STL <code>pair</code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <a href="http://doc.qt.io/qt-5/containers.html">generic container</a>.</p>
    /// <p>Here's an example of a QPair that stores one <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> and one <code>double</code> value:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qpair.html#QPair">QPair</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">double</span><span class="operator">&gt;</span> pair;
    /// </pre>
    /// <p>The components are accessible as public data members called <a href="http://doc.qt.io/qt-5/qpair.html#first-var">first</a> and <a href="http://doc.qt.io/qt-5/qpair.html#second-var">second</a>. For example:</p>
    /// <pre class="cpp"> pair<span class="operator">.</span>first <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  pair<span class="operator">.</span>second <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <code>first</code> and <code>second</code>:</p>
    /// <pre class="cpp"> <span class="keyword">struct</span> Variable {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> name;
    /// &#32;    <span class="type">double</span> value;
    ///  };
    ///  Variable v;
    ///  v<span class="operator">.</span>name <span class="operator">=</span> <span class="string">"pi"</span>;
    ///  v<span class="operator">.</span>value <span class="operator">=</span> M_PI;
    /// </pre>
    /// <p>The advent of C++11 automatic variable type deduction (<code>auto</code>) shifts the emphasis from the type name to the name of functions and members. Thus, QPair, like <code>std::pair</code> and <code>std::tuple</code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</p>
    /// <p>QPair's template data types (T1 and T2) must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</p></div>
    pub fn ctr_qt_network_ffi_QPair_QHostAddress_int_operator_(
        this_ptr: *mut crate::QPairOfQHostAddressInt,
        other: *const crate::QPairOfQHostAddressInt,
    ) -> *mut crate::QPairOfQHostAddressInt;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QSslError_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_ssl_error::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_host_address::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_network_configuration::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_network_cookie::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_network_interface::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_dMemoryLayout(
        this_ptr: *mut crate::q_list_of_q_network_proxy::MemoryLayout,
    );

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_dns_host_address_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_dns_service_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_dns_text_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_ssl_certificate::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslError_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_ssl_error::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_ssl_cipher::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_host_address::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_network_configuration::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_network_cookie::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_network_address_entry::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_network_interface::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_MemoryLayout(
    ) -> *mut crate::q_list_of_q_network_proxy::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_dns_domain_name_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_dns_host_address_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_dns_service_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_service_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_dns_text_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_text_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_ssl_certificate_extension::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_ssl_certificate::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_certificate::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslError_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_ssl_error::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_error::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_ssl_cipher::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_cipher::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_host_address::MemoryLayout,
    ) -> *mut crate::q_list_of_q_host_address::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_network_configuration::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_configuration::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_network_cookie::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_cookie::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_network_address_entry::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_address_entry::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_network_interface::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_interface::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_MemoryLayout1(
        other: *const crate::q_list_of_q_network_proxy::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_proxy::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout,
        other: *const crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout,
    ) -> *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::MemoryLayout,
        other: *const crate::q_list_of_q_dns_domain_name_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_domain_name_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::MemoryLayout,
        other: *const crate::q_list_of_q_dns_host_address_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_host_address_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout,
        other: *const crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_mail_exchange_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::MemoryLayout,
        other: *const crate::q_list_of_q_dns_service_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_service_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::MemoryLayout,
        other: *const crate::q_list_of_q_dns_text_record::MemoryLayout,
    ) -> *mut crate::q_list_of_q_dns_text_record::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::MemoryLayout,
        other: *const crate::q_list_of_q_ssl_certificate_extension::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_certificate_extension::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCertificate_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::MemoryLayout,
        other: *const crate::q_list_of_q_ssl_certificate::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_certificate::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslError_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_error::MemoryLayout,
        other: *const crate::q_list_of_q_ssl_error::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_error::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QSslCipher_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::MemoryLayout,
        other: *const crate::q_list_of_q_ssl_cipher::MemoryLayout,
    ) -> *mut crate::q_list_of_q_ssl_cipher::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QHostAddress_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_host_address::MemoryLayout,
        other: *const crate::q_list_of_q_host_address::MemoryLayout,
    ) -> *mut crate::q_list_of_q_host_address::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_network_configuration::MemoryLayout,
        other: *const crate::q_list_of_q_network_configuration::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_configuration::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_network_cookie::MemoryLayout,
        other: *const crate::q_list_of_q_network_cookie::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_cookie::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::MemoryLayout,
        other: *const crate::q_list_of_q_network_address_entry::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_address_entry::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_network_interface::MemoryLayout,
        other: *const crate::q_list_of_q_network_interface::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_interface::MemoryLayout;

    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_MemoryLayout_operator_(
        this_ptr: *mut crate::q_list_of_q_network_proxy::MemoryLayout,
        other: *const crate::q_list_of_q_network_proxy::MemoryLayout,
    ) -> *mut crate::q_list_of_q_network_proxy::MemoryLayout;

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_ssl_error::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_host_address::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_network_configuration::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_network_cookie::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_network_interface::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>, use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#begin">QList::begin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#end">QList::end</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a>. Here's an example that increments every value stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;int&gt; by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    <span class="operator">*</span>i <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>begin()<span class="operator">,</span> list<span class="operator">.</span>end());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_iterator_diterator(
        this_ptr: *mut crate::q_list_of_q_network_proxy::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_pair_of_q_byte_array_q_byte_array::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_dns_domain_name_record::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_dns_host_address_record::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_dns_mail_exchange_record::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_dns_service_record::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_dns_text_record::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate_extension::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_ssl_certificate::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_ssl_error::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_ssl_cipher::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_host_address::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_network_configuration::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_network_cookie::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_network_address_entry::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_network_interface::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a> provides both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt; (or a <a href="http://doc.qt.io/qt-5/qqueue.html">QQueue</a>&lt;T&gt;). If you want to modify the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as you iterate over it, use <a href="http://doc.qt.io/qt-5/qlist-iterator.html">QList::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qlist-const-iterator.html">QList::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> function like <a href="http://doc.qt.io/qt-5/qlist.html#constBegin">QList::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qlist.html#constEnd">QList::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qlist.html#insert">QList::insert</a>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list<span class="operator">.</span>append(<span class="string">"January"</span>);
    ///  list<span class="operator">.</span>append(<span class="string">"February"</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  list<span class="operator">.</span>append(<span class="string">"December"</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> list<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> list<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="operator">*</span>i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Most <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>. One place where STL-style iterators do make sense is as arguments to <a href="http://doc.qt.io/qt-5/qtalgorithms.html">generic algorithms</a>.</p>
    /// <p>For example, here's how to delete all the widgets stored in a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;<a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> list;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(list<span class="operator">.</span>constBegin()<span class="operator">,</span> list<span class="operator">.</span>constEnd());
    /// </pre>
    /// <p>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_list_of_q_network_proxy::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, you should use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#begin">QMap::begin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#end">QMap::end</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">QMap::erase</a>() removes the item pointed to by the iterator from the map, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_diterator(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, you should use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#begin">QMap::begin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#end">QMap::end</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">QMap::erase</a>() removes the item pointed to by the iterator from the map, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_iterator1(
        other: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, you should use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#begin">QMap::begin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#end">QMap::end</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">QMap::erase</a>() removes the item pointed to by the iterator from the map, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    map<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qmap.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_iterator_operator_3(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::Iterator,
        other: *const crate::q_map_of_q_byte_array_q_variant::Iterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::Iterator;

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">QMap::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">QMap::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">QMap::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">QMap::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_const_iterator2(
        other: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> (or a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#constBegin">QMap::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#constEnd">QMap::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qmap.html#find">QMap::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map;
    ///  map<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  map<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  map<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> map<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, which stores its items in an arbitrary order, <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> stores its items ordered by key. Items that share the same key (because the map is a <a href="http://doc.qt.io/qt-5/qmultimap.html">QMultiMap</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_const_iterator_operator_3(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator,
        other: *const crate::q_map_of_q_byte_array_q_variant::ConstIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::ConstIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> and <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qmap-iterator.html#key">QMap::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> map<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> map<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qmap.html#keys">QMap::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> map<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>cbegin()<span class="operator">,</span> map<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>keyBegin()<span class="operator">,</span> map<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keyBegin()<span class="operator">,</span> map2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">QMap::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">QMap::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_dkey_iterator(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> and <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qmap-iterator.html#key">QMap::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> map<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> map<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qmap.html#keys">QMap::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> map<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>cbegin()<span class="operator">,</span> map<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>keyBegin()<span class="operator">,</span> map<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keyBegin()<span class="operator">,</span> map2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">QMap::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">QMap::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_key_iterator2(
        other: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qmap-iterator.html">QMap::iterator</a> and <a href="http://doc.qt.io/qt-5/qmap-const-iterator.html">QMap::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qmap-iterator.html#key">QMap::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qmap.html#QMap">QMap</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> map<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> map<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qmap.html#keys">QMap::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> map<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>cbegin()<span class="operator">,</span> map<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(map<span class="operator">.</span>keyBegin()<span class="operator">,</span> map<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(map2<span class="operator">.</span>keyBegin()<span class="operator">,</span> map2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qmap-key-iterator.html">QMap::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> function like <a href="http://doc.qt.io/qt-5/qmap.html#keyBegin">QMap::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qmap.html#keyEnd">QMap::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key_iterator_operator_1(
        this_ptr: *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator,
        other: *const crate::q_map_of_q_byte_array_q_variant::KeyIterator,
    ) -> *mut crate::q_map_of_q_byte_array_q_variant::KeyIterator;

    /// <p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    /// <p>Because QMultiMap inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, all of <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s functionality also applies to QMultiMap. For example, you can use <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>() to test whether the map is empty, and you can traverse a QMultiMap using <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s iterator classes (for example, <a href="http://doc.qt.io/qt-5/qmapiterator.html">QMapIterator</a>). But in addition, it provides an <a href="http://doc.qt.io/qt-5/qmultimap.html#insert">insert</a>() function that inserts but does not overwrite any previous value if the key already exists, and a <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() function that corresponds which does overwite an existing value if they key is already in the map. It also provides convenient operator+() and operator+=().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map1<span class="operator">,</span> map2<span class="operator">,</span> map3;
    ///
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">100</span>);
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">2000</span>);
    ///  <span class="comment">// map1.size() == 2</span>
    ///
    ///  map2<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">5000</span>);
    ///  <span class="comment">// map2.size() == 1</span>
    ///
    ///  map3 <span class="operator">=</span> map1 <span class="operator">+</span> map2;
    ///  <span class="comment">// map3.size() == 3</span>
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, QMultiMap provides no operator[]. Use <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>() or <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() if you want to access the most recently inserted item with a certain key.</p>
    /// <p>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> values <span class="operator">=</span> map<span class="operator">.</span>values(<span class="string">"plenty"</span>);
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> values<span class="operator">.</span>size(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> values<span class="operator">.</span>at(i) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>The items that share the same key are available from most recently to least recently inserted.</p>
    /// <p>If you prefer the STL-style iterators, you can call <a href="http://doc.qt.io/qt-5/qmultimap.html#find">find</a>() to get the iterator for the first item with a key and iterate from there:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>find(<span class="string">"plenty"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"plenty"</span>) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>QMultiMap's key and value data types must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. In addition, QMultiMap's key type must provide operator&lt;(). See the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> documentation for details.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_dQMultiMap(
        this_ptr: *mut crate::QMultiMapOfAlternativeNameEntryTypeQString,
    );

    /// <p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    /// <p>Because QMultiMap inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, all of <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s functionality also applies to QMultiMap. For example, you can use <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>() to test whether the map is empty, and you can traverse a QMultiMap using <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s iterator classes (for example, <a href="http://doc.qt.io/qt-5/qmapiterator.html">QMapIterator</a>). But in addition, it provides an <a href="http://doc.qt.io/qt-5/qmultimap.html#insert">insert</a>() function that inserts but does not overwrite any previous value if the key already exists, and a <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() function that corresponds which does overwite an existing value if they key is already in the map. It also provides convenient operator+() and operator+=().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map1<span class="operator">,</span> map2<span class="operator">,</span> map3;
    ///
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">100</span>);
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">2000</span>);
    ///  <span class="comment">// map1.size() == 2</span>
    ///
    ///  map2<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">5000</span>);
    ///  <span class="comment">// map2.size() == 1</span>
    ///
    ///  map3 <span class="operator">=</span> map1 <span class="operator">+</span> map2;
    ///  <span class="comment">// map3.size() == 3</span>
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, QMultiMap provides no operator[]. Use <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>() or <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() if you want to access the most recently inserted item with a certain key.</p>
    /// <p>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> values <span class="operator">=</span> map<span class="operator">.</span>values(<span class="string">"plenty"</span>);
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> values<span class="operator">.</span>size(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> values<span class="operator">.</span>at(i) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>The items that share the same key are available from most recently to least recently inserted.</p>
    /// <p>If you prefer the STL-style iterators, you can call <a href="http://doc.qt.io/qt-5/qmultimap.html#find">find</a>() to get the iterator for the first item with a key and iterate from there:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>find(<span class="string">"plenty"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"plenty"</span>) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>QMultiMap's key and value data types must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. In addition, QMultiMap's key type must provide operator&lt;(). See the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> documentation for details.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_QMultiMap1(
        other: *const crate::QMultiMapOfAlternativeNameEntryTypeQString,
    ) -> *mut crate::QMultiMapOfAlternativeNameEntryTypeQString;

    /// <p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmultimap.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QMultiMap&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> and extends it with a few functions that make it able to store multi-valued maps. A multi-valued map is a map that allows multiple values with the same key; <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> doesn't allow that.</p>
    /// <p>Because QMultiMap inherits <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, all of <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s functionality also applies to QMultiMap. For example, you can use <a href="http://doc.qt.io/qt-5/qmap.html#isEmpty">isEmpty</a>() to test whether the map is empty, and you can traverse a QMultiMap using <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s iterator classes (for example, <a href="http://doc.qt.io/qt-5/qmapiterator.html">QMapIterator</a>). But in addition, it provides an <a href="http://doc.qt.io/qt-5/qmultimap.html#insert">insert</a>() function that inserts but does not overwrite any previous value if the key already exists, and a <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() function that corresponds which does overwite an existing value if they key is already in the map. It also provides convenient operator+() and operator+=().</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> map1<span class="operator">,</span> map2<span class="operator">,</span> map3;
    ///
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">100</span>);
    ///  map1<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">2000</span>);
    ///  <span class="comment">// map1.size() == 2</span>
    ///
    ///  map2<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">5000</span>);
    ///  <span class="comment">// map2.size() == 1</span>
    ///
    ///  map3 <span class="operator">=</span> map1 <span class="operator">+</span> map2;
    ///  <span class="comment">// map3.size() == 3</span>
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, QMultiMap provides no operator[]. Use <a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>() or <a href="http://doc.qt.io/qt-5/qmultimap.html#replace">replace</a>() if you want to access the most recently inserted item with a certain key.</p>
    /// <p>If you want to retrieve all the values for a single key, you can use values(const Key &amp;key), which returns a <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>&lt;T&gt;:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> values <span class="operator">=</span> map<span class="operator">.</span>values(<span class="string">"plenty"</span>);
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> values<span class="operator">.</span>size(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> values<span class="operator">.</span>at(i) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>The items that share the same key are available from most recently to least recently inserted.</p>
    /// <p>If you prefer the STL-style iterators, you can call <a href="http://doc.qt.io/qt-5/qmultimap.html#find">find</a>() to get the iterator for the first item with a key and iterate from there:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qmultimap.html#QMultiMap">QMultiMap</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> map<span class="operator">.</span>find(<span class="string">"plenty"</span>);
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> map<span class="operator">.</span>end() <span class="operator">&amp;</span><span class="operator">&amp;</span> i<span class="operator">.</span>key() <span class="operator">=</span><span class="operator">=</span> <span class="string">"plenty"</span>) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>QMultiMap's key and value data types must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. This covers most data types you are likely to encounter, but the compiler won't let you, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *. In addition, QMultiMap's key type must provide operator&lt;(). See the <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> documentation for details.</p></div>
    pub fn ctr_qt_network_ffi_QMultiMap_QSsl_AlternativeNameEntryType_QString_operator_(
        this_ptr: *mut crate::QMultiMapOfAlternativeNameEntryTypeQString,
        other: *const crate::QMultiMapOfAlternativeNameEntryTypeQString,
    ) -> *mut crate::QMultiMapOfAlternativeNameEntryTypeQString;

    /// <p>QHash&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It stores (key, value) pairs and provides very fast lookup of the value associated with a key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QHash&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It stores (key, value) pairs and provides very fast lookup of the value associated with a key.</p>
    /// <p>QHash provides very similar functionality to <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>. The differences are:</p>
    /// <ul>
    /// <li>QHash provides faster lookups than <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>. (See <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">Algorithmic Complexity</a> for details.)</li>
    /// <li>When iterating over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, the items are always sorted by key. With QHash, the items are arbitrarily ordered.</li>
    /// <li>The key type of a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> must provide operator&lt;(). The key type of a QHash must provide operator==() and a global hash function called <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() (see <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a>).</li>
    /// </ul>
    /// <p>Here's an example QHash with <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> keys and <code>int</code> values:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    /// </pre>
    /// <p>To insert a (key, value) pair into the hash, you can use operator[]():</p>
    /// <pre class="cpp"> hash<span class="operator">[</span><span class="string">"one"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">1</span>;
    ///  hash<span class="operator">[</span><span class="string">"three"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">3</span>;
    ///  hash<span class="operator">[</span><span class="string">"seven"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">7</span>;
    /// </pre>
    /// <p>This inserts the following three (key, value) pairs into the QHash: ("one", 1), ("three", 3), and ("seven", 7). Another way to insert items into the hash is to use <a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>():</p>
    /// <pre class="cpp"> hash<span class="operator">.</span>insert(<span class="string">"twelve"</span><span class="operator">,</span> <span class="number">12</span>);
    /// </pre>
    /// <p>To look up a value, use operator[]() or <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>():</p>
    /// <pre class="cpp"> <span class="type">int</span> num1 <span class="operator">=</span> hash<span class="operator">[</span><span class="string">"thirteen"</span><span class="operator">]</span>;
    ///  <span class="type">int</span> num2 <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"thirteen"</span>);
    /// </pre>
    /// <p>If there is no item with the specified key in the hash, these functions return a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p>If you want to check whether the hash contains a particular key, use <a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>():</p>
    /// <pre class="cpp"> <span class="type">int</span> timeout <span class="operator">=</span> <span class="number">30</span>;
    ///  <span class="keyword">if</span> (hash<span class="operator">.</span>contains(<span class="string">"TIMEOUT"</span>))
    /// &#32;    timeout <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"TIMEOUT"</span>);
    /// </pre>
    /// <p>There is also a <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>() overload that uses its second argument as a default value if there is no item with the specified key:</p>
    /// <pre class="cpp"> <span class="type">int</span> timeout <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"TIMEOUT"</span><span class="operator">,</span> <span class="number">30</span>);
    /// </pre>
    /// <p>In general, we recommend that you use <a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>() rather than operator[]() for looking up a key in a hash. The reason is that operator[]() silently inserts an item into the hash if no item exists with the same key (unless the hash is const). For example, the following code snippet will create 1000 items in memory:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> hash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">1000</span>; <span class="operator">+</span><span class="operator">+</span>i) {
    /// &#32;    <span class="keyword">if</span> (hash<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span><span class="operator">=</span> okButton)
    /// &#32;   &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Found button at index "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>To avoid this problem, replace <code>hash[i]</code> with <code>hash.value(i)</code> in the code above.</p>
    /// <p>Internally, QHash uses a hash table to perform lookups. This hash table automatically grows and shrinks to provide fast lookups without wasting too much memory. You can still control the size of the hash table by calling <a href="http://doc.qt.io/qt-5/qhash.html#reserve">reserve</a>() if you already know approximately how many items the QHash will contain, but this isn't necessary to obtain good performance. You can also call <a href="http://doc.qt.io/qt-5/qhash.html#capacity">capacity</a>() to retrieve the hash table's size.</p>
    /// <p>If you want to navigate through all the (key, value) pairs stored in a QHash, you can use an iterator. QHash provides both <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a> (<a href="http://doc.qt.io/qt-5/qhashiterator.html">QHashIterator</a> and <a href="http://doc.qt.io/qt-5/qmutablehashiterator.html">QMutableHashIterator</a>) and <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> (<a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> and <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a>). Here's how to iterate over a QHash&lt;<a href="http://doc.qt.io/qt-5/qstring.html">QString</a>, int&gt; using a Java-style iterator:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhashiterator.html">QHashIterator</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> i(hash);
    ///  <span class="keyword">while</span> (i<span class="operator">.</span>hasNext()) {
    /// &#32;    i<span class="operator">.</span>next();
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>Here's the same code, but using an STL-style iterator:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i <span class="operator">=</span> hash<span class="operator">.</span>constBegin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>constEnd()) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>QHash is unordered, so an iterator's sequence cannot be assumed to be predictable. If ordering by key is required, use a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>.</p>
    /// <p>Normally, a QHash allows only one value per key. If you call <a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>() with a key that already exists in the QHash, the previous value is erased. For example:</p>
    /// <pre class="cpp"> hash<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">100</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">2000</span>);
    ///  <span class="comment">// hash.value("plenty") == 2000</span>
    /// </pre>
    /// <p>If you only need to extract the values from a hash (not the keys), you can also use <a href="http://doc.qt.io/qt-5/containers.html#foreach">foreach</a>:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  foreach (<span class="type">int</span> value<span class="operator">,</span> hash)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> value <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Items can be removed from the hash in several ways. One way is to call <a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>(); this will remove any item with the given key. Another way is to use <a href="http://doc.qt.io/qt-5/qmutablehashiterator.html#remove">QMutableHashIterator::remove</a>(). In addition, you can clear the entire hash using <a href="http://doc.qt.io/qt-5/qhash.html#clear">clear</a>().</p>
    /// <p>QHash's key and value data types must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *.</p>
    /// <a name="qhash"></a><a name="the-qhash-hashing-function"></a>
    /// <h4 id="the-qhash-hashing-function">The qHash() hashing function</h4>
    /// <p>A QHash's key type has additional requirements other than being an assignable data type: it must provide operator==(), and there must also be a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function in the type's namespace that returns a hash value for an argument of the key's type.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function computes a numeric value based on a key. It can use any algorithm imaginable, as long as it always returns the same value if given the same argument. In other words, if <code>e1 == e2</code>, then <code>qHash(e1) == qHash(e2)</code> must hold as well. However, to obtain good performance, the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function should attempt to return different hash values for different keys to the largest extent possible.</p>
    /// <p>For a key type <code>K</code>, the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a> function must have one of these signatures:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(K key);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> K <span class="operator">&amp;</span>key);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(K key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> K <span class="operator">&amp;</span>key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed);
    /// </pre>
    /// <p>The two-arguments overloads take an unsigned integer that should be used to seed the calculation of the hash function. This seed is provided by QHash in order to prevent a family of <a href="http://doc.qt.io/qt-5/qhash.html#algorithmic-complexity-attacks">algorithmic complexity attacks</a>. If both a one-argument and a two-arguments overload are defined for a key type, the latter is used by QHash (note that you can simply define a two-arguments version, and use a default value for the seed parameter).</p>
    /// <p>Here's a partial list of the C++ and Qt types that can serve as keys in a QHash: any integer type (char, unsigned long, etc.), any pointer type, <a href="http://doc.qt.io/qt-5/qchar.html">QChar</a>, <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>, and <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a>. For all of these, the <code>&lt;QHash&gt;</code> header defines a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function that computes an adequate hash value. Many other Qt classes also declare a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a> overload for their type; please refer to the documentation of each class.</p>
    /// <p>If you want to use other types as the key, make sure that you provide operator==() and a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() implementation.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="preprocessor">#ifndef EMPLOYEE_H</span>
    ///  <span class="preprocessor">#define EMPLOYEE_H</span>
    ///
    ///  <span class="keyword">class</span> Employee
    ///  {
    ///  <span class="keyword">public</span>:
    /// &#32;    Employee() {}
    /// &#32;    Employee(<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> <span class="operator">&amp;</span>name<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdate.html">QDate</a></span> dateOfBirth);
    /// &#32;    <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///
    ///  <span class="keyword">private</span>:
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> myName;
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qdate.html">QDate</a></span> myDateOfBirth;
    ///  };
    ///
    ///  <span class="keyword">inline</span> bool <span class="keyword">operator</span><span class="operator">=</span><span class="operator">=</span>(<span class="keyword">const</span> Employee <span class="operator">&amp;</span>e1<span class="operator">,</span> <span class="keyword">const</span> Employee <span class="operator">&amp;</span>e2)
    ///  {
    /// &#32;    <span class="keyword">return</span> e1<span class="operator">.</span>name() <span class="operator">=</span><span class="operator">=</span> e2<span class="operator">.</span>name()
    /// &#32;   &#32;   &#32;   <span class="operator">&amp;</span><span class="operator">&amp;</span> e1<span class="operator">.</span>dateOfBirth() <span class="operator">=</span><span class="operator">=</span> e2<span class="operator">.</span>dateOfBirth();
    ///  }
    ///
    ///  <span class="keyword">inline</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> Employee <span class="operator">&amp;</span>key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed)
    ///  {
    /// &#32;    <span class="keyword">return</span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(key<span class="operator">.</span>name()<span class="operator">,</span> seed) <span class="operator">^</span> key<span class="operator">.</span>dateOfBirth()<span class="operator">.</span>day();
    ///  }
    ///
    ///  <span class="preprocessor">#endif // EMPLOYEE_H</span>
    /// </pre>
    /// <p>In the example above, we've relied on Qt's global <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a>(const <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> &amp;, uint) to give us a hash value for the employee's name, and XOR'ed this with the day they were born to help produce unique hashes for people with the same name.</p>
    /// <p>Note that the implementation of the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() overloads offered by Qt may change at any time. You <b>must not</b> rely on the fact that <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() will give the same results (for the same inputs) across different Qt versions.</p>
    /// <a name="algorithmic-complexity-attacks"></a>
    /// <h4 id="algorithmic-complexity-attacks">Algorithmic complexity attacks</h4>
    /// <p>All hash tables are vulnerable to a particular class of denial of service attacks, in which the attacker carefully pre-computes a set of different keys that are going to be hashed in the same bucket of a hash table (or even have the very same hash value). The attack aims at getting the worst-case algorithmic behavior (O(n) instead of amortized O(1), see <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">Algorithmic Complexity</a> for the details) when the data is fed into the table.</p>
    /// <p>In order to avoid this worst-case behavior, the calculation of the hash value done by <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() can be salted by a random seed, that nullifies the attack's extent. This seed is automatically generated by QHash once per process, and then passed by QHash as the second argument of the two-arguments overload of the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function.</p>
    /// <p>This randomization of QHash is enabled by default. Even though programs should never depend on a particular QHash ordering, there may be situations where you temporarily need deterministic behavior, for example for debugging or regression testing. To disable the randomization, define the environment variable <code>QT_HASH_SEED</code> to have the value 0. Alternatively, you can call the <a href="http://doc.qt.io/qt-5/qhash.html#qSetGlobalQHashSeed">qSetGlobalQHashSeed</a>() function with the value 0.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_QHash1(
        other: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::QHashOfAttributeQVariant;

    /// <p>QHash&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It stores (key, value) pairs and provides very fast lookup of the value associated with a key.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>QHash&lt;Key, T&gt; is one of Qt's generic <a href="http://doc.qt.io/qt-5/containers.html">container classes</a>. It stores (key, value) pairs and provides very fast lookup of the value associated with a key.</p>
    /// <p>QHash provides very similar functionality to <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>. The differences are:</p>
    /// <ul>
    /// <li>QHash provides faster lookups than <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>. (See <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">Algorithmic Complexity</a> for details.)</li>
    /// <li>When iterating over a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, the items are always sorted by key. With QHash, the items are arbitrarily ordered.</li>
    /// <li>The key type of a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> must provide operator&lt;(). The key type of a QHash must provide operator==() and a global hash function called <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() (see <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a>).</li>
    /// </ul>
    /// <p>Here's an example QHash with <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> keys and <code>int</code> values:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    /// </pre>
    /// <p>To insert a (key, value) pair into the hash, you can use operator[]():</p>
    /// <pre class="cpp"> hash<span class="operator">[</span><span class="string">"one"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">1</span>;
    ///  hash<span class="operator">[</span><span class="string">"three"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">3</span>;
    ///  hash<span class="operator">[</span><span class="string">"seven"</span><span class="operator">]</span> <span class="operator">=</span> <span class="number">7</span>;
    /// </pre>
    /// <p>This inserts the following three (key, value) pairs into the QHash: ("one", 1), ("three", 3), and ("seven", 7). Another way to insert items into the hash is to use <a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>():</p>
    /// <pre class="cpp"> hash<span class="operator">.</span>insert(<span class="string">"twelve"</span><span class="operator">,</span> <span class="number">12</span>);
    /// </pre>
    /// <p>To look up a value, use operator[]() or <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>():</p>
    /// <pre class="cpp"> <span class="type">int</span> num1 <span class="operator">=</span> hash<span class="operator">[</span><span class="string">"thirteen"</span><span class="operator">]</span>;
    ///  <span class="type">int</span> num2 <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"thirteen"</span>);
    /// </pre>
    /// <p>If there is no item with the specified key in the hash, these functions return a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>.</p>
    /// <p>If you want to check whether the hash contains a particular key, use <a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>():</p>
    /// <pre class="cpp"> <span class="type">int</span> timeout <span class="operator">=</span> <span class="number">30</span>;
    ///  <span class="keyword">if</span> (hash<span class="operator">.</span>contains(<span class="string">"TIMEOUT"</span>))
    /// &#32;    timeout <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"TIMEOUT"</span>);
    /// </pre>
    /// <p>There is also a <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>() overload that uses its second argument as a default value if there is no item with the specified key:</p>
    /// <pre class="cpp"> <span class="type">int</span> timeout <span class="operator">=</span> hash<span class="operator">.</span>value(<span class="string">"TIMEOUT"</span><span class="operator">,</span> <span class="number">30</span>);
    /// </pre>
    /// <p>In general, we recommend that you use <a href="http://doc.qt.io/qt-5/qhash.html#contains">contains</a>() and <a href="http://doc.qt.io/qt-5/qhash.html#value">value</a>() rather than operator[]() for looking up a key in a hash. The reason is that operator[]() silently inserts an item into the hash if no item exists with the same key (unless the hash is const). For example, the following code snippet will create 1000 items in memory:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a></span> <span class="operator">*</span><span class="operator">&gt;</span> hash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  <span class="keyword">for</span> (<span class="type">int</span> i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> <span class="number">1000</span>; <span class="operator">+</span><span class="operator">+</span>i) {
    /// &#32;    <span class="keyword">if</span> (hash<span class="operator">[</span>i<span class="operator">]</span> <span class="operator">=</span><span class="operator">=</span> okButton)
    /// &#32;   &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Found button at index "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>To avoid this problem, replace <code>hash[i]</code> with <code>hash.value(i)</code> in the code above.</p>
    /// <p>Internally, QHash uses a hash table to perform lookups. This hash table automatically grows and shrinks to provide fast lookups without wasting too much memory. You can still control the size of the hash table by calling <a href="http://doc.qt.io/qt-5/qhash.html#reserve">reserve</a>() if you already know approximately how many items the QHash will contain, but this isn't necessary to obtain good performance. You can also call <a href="http://doc.qt.io/qt-5/qhash.html#capacity">capacity</a>() to retrieve the hash table's size.</p>
    /// <p>If you want to navigate through all the (key, value) pairs stored in a QHash, you can use an iterator. QHash provides both <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a> (<a href="http://doc.qt.io/qt-5/qhashiterator.html">QHashIterator</a> and <a href="http://doc.qt.io/qt-5/qmutablehashiterator.html">QMutableHashIterator</a>) and <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> (<a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> and <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a>). Here's how to iterate over a QHash&lt;<a href="http://doc.qt.io/qt-5/qstring.html">QString</a>, int&gt; using a Java-style iterator:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhashiterator.html">QHashIterator</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> i(hash);
    ///  <span class="keyword">while</span> (i<span class="operator">.</span>hasNext()) {
    /// &#32;    i<span class="operator">.</span>next();
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>Here's the same code, but using an STL-style iterator:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i <span class="operator">=</span> hash<span class="operator">.</span>constBegin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>constEnd()) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>QHash is unordered, so an iterator's sequence cannot be assumed to be predictable. If ordering by key is required, use a <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>.</p>
    /// <p>Normally, a QHash allows only one value per key. If you call <a href="http://doc.qt.io/qt-5/qhash.html#insert">insert</a>() with a key that already exists in the QHash, the previous value is erased. For example:</p>
    /// <pre class="cpp"> hash<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">100</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"plenty"</span><span class="operator">,</span> <span class="number">2000</span>);
    ///  <span class="comment">// hash.value("plenty") == 2000</span>
    /// </pre>
    /// <p>If you only need to extract the values from a hash (not the keys), you can also use <a href="http://doc.qt.io/qt-5/containers.html#foreach">foreach</a>:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  foreach (<span class="type">int</span> value<span class="operator">,</span> hash)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> value <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Items can be removed from the hash in several ways. One way is to call <a href="http://doc.qt.io/qt-5/qhash.html#remove">remove</a>(); this will remove any item with the given key. Another way is to use <a href="http://doc.qt.io/qt-5/qmutablehashiterator.html#remove">QMutableHashIterator::remove</a>(). In addition, you can clear the entire hash using <a href="http://doc.qt.io/qt-5/qhash.html#clear">clear</a>().</p>
    /// <p>QHash's key and value data types must be <a href="http://doc.qt.io/qt-5/containers.html#assignable-data-types">assignable data types</a>. You cannot, for example, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> as a value; instead, store a <a href="http://doc.qt.io/qt-5/qwidget.html">QWidget</a> *.</p>
    /// <a name="qhash"></a><a name="the-qhash-hashing-function"></a>
    /// <h4 id="the-qhash-hashing-function">The qHash() hashing function</h4>
    /// <p>A QHash's key type has additional requirements other than being an assignable data type: it must provide operator==(), and there must also be a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function in the type's namespace that returns a hash value for an argument of the key's type.</p>
    /// <p>The <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function computes a numeric value based on a key. It can use any algorithm imaginable, as long as it always returns the same value if given the same argument. In other words, if <code>e1 == e2</code>, then <code>qHash(e1) == qHash(e2)</code> must hold as well. However, to obtain good performance, the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function should attempt to return different hash values for different keys to the largest extent possible.</p>
    /// <p>For a key type <code>K</code>, the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a> function must have one of these signatures:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(K key);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> K <span class="operator">&amp;</span>key);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(K key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed);
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> K <span class="operator">&amp;</span>key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed);
    /// </pre>
    /// <p>The two-arguments overloads take an unsigned integer that should be used to seed the calculation of the hash function. This seed is provided by QHash in order to prevent a family of <a href="http://doc.qt.io/qt-5/qhash.html#algorithmic-complexity-attacks">algorithmic complexity attacks</a>. If both a one-argument and a two-arguments overload are defined for a key type, the latter is used by QHash (note that you can simply define a two-arguments version, and use a default value for the seed parameter).</p>
    /// <p>Here's a partial list of the C++ and Qt types that can serve as keys in a QHash: any integer type (char, unsigned long, etc.), any pointer type, <a href="http://doc.qt.io/qt-5/qchar.html">QChar</a>, <a href="http://doc.qt.io/qt-5/qstring.html">QString</a>, and <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a>. For all of these, the <code>&lt;QHash&gt;</code> header defines a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function that computes an adequate hash value. Many other Qt classes also declare a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a> overload for their type; please refer to the documentation of each class.</p>
    /// <p>If you want to use other types as the key, make sure that you provide operator==() and a <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() implementation.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="preprocessor">#ifndef EMPLOYEE_H</span>
    ///  <span class="preprocessor">#define EMPLOYEE_H</span>
    ///
    ///  <span class="keyword">class</span> Employee
    ///  {
    ///  <span class="keyword">public</span>:
    /// &#32;    Employee() {}
    /// &#32;    Employee(<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> <span class="operator">&amp;</span>name<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdate.html">QDate</a></span> dateOfBirth);
    /// &#32;    <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///
    ///  <span class="keyword">private</span>:
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span> myName;
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qdate.html">QDate</a></span> myDateOfBirth;
    ///  };
    ///
    ///  <span class="keyword">inline</span> bool <span class="keyword">operator</span><span class="operator">=</span><span class="operator">=</span>(<span class="keyword">const</span> Employee <span class="operator">&amp;</span>e1<span class="operator">,</span> <span class="keyword">const</span> Employee <span class="operator">&amp;</span>e2)
    ///  {
    /// &#32;    <span class="keyword">return</span> e1<span class="operator">.</span>name() <span class="operator">=</span><span class="operator">=</span> e2<span class="operator">.</span>name()
    /// &#32;   &#32;   &#32;   <span class="operator">&amp;</span><span class="operator">&amp;</span> e1<span class="operator">.</span>dateOfBirth() <span class="operator">=</span><span class="operator">=</span> e2<span class="operator">.</span>dateOfBirth();
    ///  }
    ///
    ///  <span class="keyword">inline</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(<span class="keyword">const</span> Employee <span class="operator">&amp;</span>key<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qtglobal.html#uint-typedef">uint</a></span> seed)
    ///  {
    /// &#32;    <span class="keyword">return</span> <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>(key<span class="operator">.</span>name()<span class="operator">,</span> seed) <span class="operator">^</span> key<span class="operator">.</span>dateOfBirth()<span class="operator">.</span>day();
    ///  }
    ///
    ///  <span class="preprocessor">#endif // EMPLOYEE_H</span>
    /// </pre>
    /// <p>In the example above, we've relied on Qt's global <a href="http://doc.qt.io/qt-5/qhash.html#qhash">qHash</a>(const <a href="http://doc.qt.io/qt-5/qstring.html">QString</a> &amp;, uint) to give us a hash value for the employee's name, and XOR'ed this with the day they were born to help produce unique hashes for people with the same name.</p>
    /// <p>Note that the implementation of the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() overloads offered by Qt may change at any time. You <b>must not</b> rely on the fact that <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() will give the same results (for the same inputs) across different Qt versions.</p>
    /// <a name="algorithmic-complexity-attacks"></a>
    /// <h4 id="algorithmic-complexity-attacks">Algorithmic complexity attacks</h4>
    /// <p>All hash tables are vulnerable to a particular class of denial of service attacks, in which the attacker carefully pre-computes a set of different keys that are going to be hashed in the same bucket of a hash table (or even have the very same hash value). The attack aims at getting the worst-case algorithmic behavior (O(n) instead of amortized O(1), see <a href="http://doc.qt.io/qt-5/containers.html#algorithmic-complexity">Algorithmic Complexity</a> for the details) when the data is fed into the table.</p>
    /// <p>In order to avoid this worst-case behavior, the calculation of the hash value done by <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() can be salted by a random seed, that nullifies the attack's extent. This seed is automatically generated by QHash once per process, and then passed by QHash as the second argument of the two-arguments overload of the <a href="http://doc.qt.io/qt-5/qhash.html#qHashx">qHash</a>() function.</p>
    /// <p>This randomization of QHash is enabled by default. Even though programs should never depend on a particular QHash ordering, there may be situations where you temporarily need deterministic behavior, for example for debugging or regression testing. To disable the randomization, define the environment variable <code>QT_HASH_SEED</code> to have the value 0. Alternatively, you can call the <a href="http://doc.qt.io/qt-5/qhash.html#qSetGlobalQHashSeed">qSetGlobalQHashSeed</a>() function with the value 0.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_operator_(
        this_ptr: *mut crate::QHashOfAttributeQVariant,
        other: *const crate::QHashOfAttributeQVariant,
    ) -> *mut crate::QHashOfAttributeQVariant;

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) and to modify the value (but not the key) associated with a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, you should use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>() removes the item pointed to by the iterator from the hash, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. There is one notable exception: <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>(). This function can safely be called while iterating, and won't affect the order of items in the hash. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_diterator(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) and to modify the value (but not the key) associated with a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, you should use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>() removes the item pointed to by the iterator from the hash, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. There is one notable exception: <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>(). This function can safely be called while iterating, and won't affect the order of items in the hash. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_iterator2(
        other: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) and to modify the value (but not the key) associated with a particular key. If you want to iterate over a const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>, you should use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#begin">QHash::begin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#end">QHash::end</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order.</p>
    /// <p>Let's see a few examples of things we can do with a <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> that we cannot do with a <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a>. Here's an example that increments every value stored in the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> by 2:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>begin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    i<span class="operator">.</span>value() <span class="operator">+</span><span class="operator">=</span> <span class="number">2</span>;
    /// </pre>
    /// <p>Here's an example that removes all the items whose key is a string that starts with an underscore character:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    i <span class="operator">=</span> hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="keyword">else</span>
    /// &#32;   &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>The call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>() removes the item pointed to by the iterator from the hash, and returns an iterator to the next item. Here's another way of removing an item while iterating:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator i <span class="operator">=</span> hash<span class="operator">.</span>begin();
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>iterator prev <span class="operator">=</span> i;
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    /// &#32;    <span class="keyword">if</span> (prev<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(prev);
    ///  }
    /// </pre>
    /// <p>It might be tempting to write code like this:</p>
    /// <pre class="cpp"> <span class="comment">// WRONG</span>
    ///  <span class="keyword">while</span> (i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>end()) {
    /// &#32;    <span class="keyword">if</span> (i<span class="operator">.</span>key()<span class="operator">.</span>startsWith(<span class="char">'_'</span>))
    /// &#32;   &#32;    hash<span class="operator">.</span>erase(i);
    /// &#32;    <span class="operator">+</span><span class="operator">+</span>i;
    ///  }
    /// </pre>
    /// <p>However, this will potentially crash in <code>++i</code>, because <code>i</code> is a dangling iterator after the call to <a href="http://doc.qt.io/qt-5/qhash.html#erase">erase</a>().</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. There is one notable exception: <a href="http://doc.qt.io/qt-5/qhash.html#erase">QHash::erase</a>(). This function can safely be called while iterating, and won't affect the order of items in the hash. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_iterator_operator_3(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::Iterator,
        other: *const crate::q_hash_of_attribute_q_variant::Iterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::Iterator;

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#constBegin">QHash::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">QHash::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order. The only guarantee is that items that share the same key (because they were inserted using a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_dconst_iterator(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#constBegin">QHash::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">QHash::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order. The only guarantee is that items that share the same key (because they were inserted using a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_const_iterator3(
        other: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> features both <a href="http://doc.qt.io/qt-5/containers.html#stl-style-iterators">STL-style iterators</a> and <a href="http://doc.qt.io/qt-5/containers.html#java-style-iterators">Java-style iterators</a>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</p>
    /// <p><a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>&lt;Key, T&gt;::const_iterator allows you to iterate over a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> (or a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>). If you want to modify the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as you iterate over it, you must use <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> instead. It is generally good practice to use <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> on a non-const <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> as well, unless you need to change the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> through the iterator. Const iterators are slightly faster, and can improve code readability.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#constBegin">QHash::constBegin</a>(), <a href="http://doc.qt.io/qt-5/qhash.html#constEnd">QHash::constEnd</a>(), or <a href="http://doc.qt.io/qt-5/qhash.html#find">QHash::find</a>() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a hash:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span> hash;
    ///  hash<span class="operator">.</span>insert(<span class="string">"January"</span><span class="operator">,</span> <span class="number">1</span>);
    ///  hash<span class="operator">.</span>insert(<span class="string">"February"</span><span class="operator">,</span> <span class="number">2</span>);
    ///  <span class="operator">.</span><span class="operator">.</span><span class="operator">.</span>
    ///  hash<span class="operator">.</span>insert(<span class="string">"December"</span><span class="operator">,</span> <span class="number">12</span>);
    ///
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">,</span> <span class="type">int</span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator i;
    ///  <span class="keyword">for</span> (i <span class="operator">=</span> hash<span class="operator">.</span>constBegin(); i <span class="operator">!</span><span class="operator">=</span> hash<span class="operator">.</span>constEnd(); <span class="operator">+</span><span class="operator">+</span>i)
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">": "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> i<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// </pre>
    /// <p>Unlike <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>, which orders its items by key, <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> stores its items in an arbitrary order. The only guarantee is that items that share the same key (because they were inserted using a <a href="http://doc.qt.io/qt-5/qmultihash.html">QMultiHash</a>) will appear consecutively, from the most recently to the least recently inserted value.</p>
    /// <p>Multiple iterators can be used on the same hash. However, be aware that any modification performed directly on the <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> has the potential of dramatically changing the order in which the items are stored in the hash, as they might cause <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> to rehash its internal data structure. If you need to keep iterators over a long period of time, we recommend that you use <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a> rather than <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>.</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_const_iterator_operator_3(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::ConstIterator,
        other: *const crate::q_hash_of_attribute_q_variant::ConstIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::ConstIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> and <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">QHash::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> hash<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> hash<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qhash.html#keys">QHash::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> hash<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(keys<span class="operator">.</span>cbegin()<span class="operator">,</span> keys<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(hash<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">QHash::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">QHash::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_dkey_iterator(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
    );

    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> and <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">QHash::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> hash<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> hash<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qhash.html#keys">QHash::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> hash<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(keys<span class="operator">.</span>cbegin()<span class="operator">,</span> keys<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(hash<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">QHash::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">QHash::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_key_iterator2(
        other: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is essentially the same as <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> with the difference that operator*() and operator-&gt;() return a key instead of a value.</p>
    /// <p>For most uses <a href="http://doc.qt.io/qt-5/qhash-iterator.html">QHash::iterator</a> and <a href="http://doc.qt.io/qt-5/qhash-const-iterator.html">QHash::const_iterator</a> should be used, you can easily access the key by calling <a href="http://doc.qt.io/qt-5/qhash-iterator.html#key">QHash::iterator::key</a>():</p>
    /// <pre class="cpp"> <span class="keyword">for</span> (<span class="type"><a href="http://doc.qt.io/qt-5/qhash.html#QHash">QHash</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span><span class="operator">::</span>const_iterator it <span class="operator">=</span> hash<span class="operator">.</span>cbegin()<span class="operator">,</span> end <span class="operator">=</span> hash<span class="operator">.</span>cend(); it <span class="operator">!</span><span class="operator">=</span> end; <span class="operator">+</span><span class="operator">+</span>it) {
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The key: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>key() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"The value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> it<span class="operator">.</span>value() <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    /// &#32;    cout <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"Also the value: "</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> (<span class="operator">*</span>it) <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="type">Qt</span><span class="operator">::</span>endl;
    ///  }
    /// </pre>
    /// <p>However, to have interoperability between <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a>'s keys and STL-style algorithms we need an iterator that dereferences to a key instead of a value. With <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> we can apply an algorithm to a range of keys without having to call <a href="http://doc.qt.io/qt-5/qhash.html#keys">QHash::keys</a>(), which is inefficient as it costs one <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> iteration and memory allocation to create a temporary <a href="http://doc.qt.io/qt-5/qlist.html">QList</a>.</p>
    /// <pre class="cpp"> <span class="comment">// Inefficient, keys() is expensive</span>
    ///  <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> keys <span class="operator">=</span> hash<span class="operator">.</span>keys();
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(keys<span class="operator">.</span>cbegin()<span class="operator">,</span> keys<span class="operator">.</span>cend()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keys());
    ///
    ///  <span class="comment">// Efficient, no memory allocation needed</span>
    ///  <span class="type">int</span> numPrimes <span class="operator">=</span> std<span class="operator">::</span>count_if(hash<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash<span class="operator">.</span>keyEnd()<span class="operator">,</span> isPrimeNumber);
    ///  <a href="http://doc.qt.io/qt-5/qtalgorithms.html#qDeleteAll">qDeleteAll</a>(hash2<span class="operator">.</span>keyBegin()<span class="operator">,</span> hash2<span class="operator">.</span>keyEnd());
    /// </pre>
    /// <p><a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> is const, it's not possible to modify the key.</p>
    /// <p>The default <a href="http://doc.qt.io/qt-5/qhash-key-iterator.html">QHash::key_iterator</a> constructor creates an uninitialized iterator. You must initialize it using a <a href="http://doc.qt.io/qt-5/qhash.html#qhash">QHash</a> function like <a href="http://doc.qt.io/qt-5/qhash.html#keyBegin">QHash::keyBegin</a>() or <a href="http://doc.qt.io/qt-5/qhash.html#keyEnd">QHash::keyEnd</a>().</p>
    /// <p><b>Warning:</b> Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <a href="http://doc.qt.io/qt-5/containers.html#implicit-sharing-iterator-problem">Implicit sharing iterator problem</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHash_QNetworkRequest_Attribute_QVariant_key_iterator_operator_1(
        this_ptr: *mut crate::q_hash_of_attribute_q_variant::KeyIterator,
        other: *const crate::q_hash_of_attribute_q_variant::KeyIterator,
    ) -> *mut crate::q_hash_of_attribute_q_variant::KeyIterator;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash29(
        key: *const crate::QPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash30(
        key: *const crate::QPairOfQHostAddressInt,
    ) -> ::std::os::raw::c_uint;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_fill1(
        this_ptr: *mut crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_fill1(
        this_ptr: *mut crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_fill1(
        this_ptr: *mut crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#fill">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Assigns <i>value</i> to all items in the vector. If <i>size</i> is different from -1 (the default), the vector is resized to size <i>size</i> beforehand.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector(<span class="number">3</span>);
    ///  vector<span class="operator">.</span>fill(<span class="string">"Yes"</span>);
    ///  <span class="comment">// vector: ["Yes", "Yes", "Yes"]</span>
    ///
    ///  vector<span class="operator">.</span>fill(<span class="string">"oh"</span><span class="operator">,</span> <span class="number">5</span>);
    ///  <span class="comment">// vector: ["oh", "oh", "oh", "oh", "oh"]</span>
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#resize">resize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_fill1(
        this_ptr: *mut crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_indexOf1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_indexOf1(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_indexOf1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the vector, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qvector.html#QVector">QVector</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span>);            <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);         <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);         <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>indexOf(<span class="string">"X"</span>);            <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qvector.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_indexOf1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_lastIndexOf1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        t: *const crate::QOcspResponse,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_lastIndexOf1(
        this_ptr: *const crate::QVectorOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_lastIndexOf1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        t: *const crate::QSslEllipticCurve,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of the value <i>value</i> in the vector, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> vector;
    ///  vector <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);        <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);     <span class="comment">// returns 3</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);     <span class="comment">// returns 1</span>
    ///  vector<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);        <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qvector.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_lastIndexOf1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        t: *const crate::QHstsPolicy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QOcspResponse_mid1(
        this_ptr: *const crate::QVectorOfQOcspResponse,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQOcspResponse;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslError_mid1(
        this_ptr: *const crate::QVectorOfQSslError,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslError;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QSslEllipticCurve_mid1(
        this_ptr: *const crate::QVectorOfQSslEllipticCurve,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQSslEllipticCurve;

    /// <p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qvector.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-vector which contains elements from this vector, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements after <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QVector_QHstsPolicy_mid1(
        this_ptr: *const crate::QVectorOfQHstsPolicy,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QVectorOfQHstsPolicy;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash31(
        key: *const crate::QVectorOfQOcspResponse,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash32(
        key: *const crate::QVectorOfQSslError,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash33(
        key: *const crate::QVectorOfQSslEllipticCurve,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_indexOf1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_indexOf1(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_indexOf1(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_indexOf1(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_indexOf1(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_indexOf1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_indexOf1(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_indexOf1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#indexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the first occurrence of <i>value</i> in the list, searching forward from index position <i>from</i>. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span>);          <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">1</span>);       <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);       <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>indexOf(<span class="string">"X"</span>);          <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">lastIndexOf</a>() and <a href="http://doc.qt.io/qt-5/qlist.html#contains">contains</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_indexOf1(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_lastIndexOf1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        t: *const crate::QPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_lastIndexOf1(
        this_ptr: *const crate::QListOfQSslCertificate,
        t: *const crate::QSslCertificate,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_lastIndexOf1(
        this_ptr: *const crate::QListOfQSslError,
        t: *const crate::QSslError,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_lastIndexOf1(
        this_ptr: *const crate::QListOfQSslCipher,
        t: *const crate::QSslCipher,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_lastIndexOf1(
        this_ptr: *const crate::QListOfQHostAddress,
        t: *const crate::QHostAddress,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_lastIndexOf1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        t: *const crate::QNetworkConfiguration,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_lastIndexOf1(
        this_ptr: *const crate::QListOfQNetworkCookie,
        t: *const crate::QNetworkCookie,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_lastIndexOf1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        t: *const crate::QNetworkAddressEntry,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#lastIndexOf">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the index position of the last occurrence of <i>value</i> in the list, searching backward from index position <i>from</i>. If <i>from</i> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="type"><a href="http://doc.qt.io/qt-5/qlist.html#QList">QList</a></span><span class="operator">&lt;</span><span class="type"><a href="http://doc.qt.io/qt-5/qstring.html">QString</a></span><span class="operator">&gt;</span> list;
    ///  list <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"C"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"B"</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> <span class="string">"A"</span>;
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span>);      <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">3</span>);   <span class="comment">// returns 3</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"B"</span><span class="operator">,</span> <span class="number">2</span>);   <span class="comment">// returns 1</span>
    ///  list<span class="operator">.</span>lastIndexOf(<span class="string">"X"</span>);      <span class="comment">// returns -1</span>
    /// </pre>
    /// <p>This function requires the value type to have an implementation of <code>operator==()</code>.</p>
    /// <p>Note that <a href="http://doc.qt.io/qt-5/qlist.html">QList</a> uses 0-based indexes, just like C++ arrays. Negative indexes are not supported with the exception of the value mentioned above.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlist.html#indexOf">indexOf</a>().</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_lastIndexOf1(
        this_ptr: *const crate::QListOfQNetworkProxy,
        t: *const crate::QNetworkProxy,
    ) -> ::std::os::raw::c_int;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QPair_QByteArray_QByteArray_mid1(
        this_ptr: *const crate::QListOfQPairOfQByteArrayQByteArray,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQPairOfQByteArrayQByteArray;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsDomainNameRecord_mid1(
        this_ptr: *const crate::QListOfQDnsDomainNameRecord,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsDomainNameRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsHostAddressRecord_mid1(
        this_ptr: *const crate::QListOfQDnsHostAddressRecord,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsHostAddressRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsMailExchangeRecord_mid1(
        this_ptr: *const crate::QListOfQDnsMailExchangeRecord,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsMailExchangeRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsServiceRecord_mid1(
        this_ptr: *const crate::QListOfQDnsServiceRecord,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsServiceRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QDnsTextRecord_mid1(
        this_ptr: *const crate::QListOfQDnsTextRecord,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQDnsTextRecord;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificateExtension_mid1(
        this_ptr: *const crate::QListOfQSslCertificateExtension,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCertificateExtension;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCertificate_mid1(
        this_ptr: *const crate::QListOfQSslCertificate,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslError_mid1(
        this_ptr: *const crate::QListOfQSslError,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QSslCipher_mid1(
        this_ptr: *const crate::QListOfQSslCipher,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQSslCipher;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QHostAddress_mid1(
        this_ptr: *const crate::QListOfQHostAddress,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQHostAddress;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkConfiguration_mid1(
        this_ptr: *const crate::QListOfQNetworkConfiguration,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkCookie_mid1(
        this_ptr: *const crate::QListOfQNetworkCookie,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkCookie;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkAddressEntry_mid1(
        this_ptr: *const crate::QListOfQNetworkAddressEntry,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkAddressEntry;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkInterface_mid1(
        this_ptr: *const crate::QListOfQNetworkInterface,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkInterface;

    /// <p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlist.html#mid">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a sub-list which includes elements from this list, starting at position <i>pos</i>. If <i>length</i> is -1 (the default), all elements from <i>pos</i> are included; otherwise <i>length</i> elements (or all remaining elements if there are less than <i>length</i> elements) are included.</p></div>
    pub fn ctr_qt_network_ffi_QList_QNetworkProxy_mid1(
        this_ptr: *const crate::QListOfQNetworkProxy,
        pos: ::std::os::raw::c_int,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash35(
        key: *const crate::QListOfQPairOfQByteArrayQByteArray,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash42(
        key: *const crate::QListOfQSslCertificate,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash43(
        key: *const crate::QListOfQSslError,
    ) -> ::std::os::raw::c_uint;

    /// <p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qbytearray-frombase64result.html#qHash">C++ documentation</a> for <span style='color: green;'>```uint qHash(const QByteArray::FromBase64Result &key, uint seed = 0)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for <i>key</i>, using <i>seed</i> to seed the calculation.</p></div>
    pub fn ctr_qt_network_ffi_qHash45(
        key: *const crate::QListOfQHostAddress,
    ) -> ::std::os::raw::c_uint;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#key">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Returns the first key with value <i>value</i>, or <i>defaultKey</i> if the map contains no item with value <i>value</i>. If no <i>defaultKey</i> is provided the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed key</a>.</p>
    /// <p>This function can be slow (<a href="http://doc.qt.io/qt-5/containers.html#linear-time">linear time</a>), because <a href="http://doc.qt.io/qt-5/qmap.html">QMap</a>'s internal data structure is optimized for fast lookup by key, not by value.</p>
    /// <p>This function was introduced in Qt 4.3.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#value">value</a>() and <a href="http://doc.qt.io/qt-5/qmap.html#keys">keys</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_key1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        value: *const ::qt_core::QVariant,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the value associated with the key <i>key</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qmap.html#value">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the value associated with the key <i>key</i>.</p>
    /// <p>If the map contains no item with key <i>key</i>, the function returns <i>defaultValue</i>. If no <i>defaultValue</i> is specified, the function returns a <a href="http://doc.qt.io/qt-5/containers.html#default-constructed-value">default-constructed value</a>. If there are multiple items for <i>key</i> in the map, the value of the most recently inserted one is returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qmap.html#key">key</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#values">values</a>(), <a href="http://doc.qt.io/qt-5/qmap.html#contains">contains</a>(), and <a href="http://doc.qt.io/qt-5/qmap.html#operator-5b-5d">operator[]</a>().</p></div>
    pub fn ctr_qt_network_ffi_QMap_QByteArray_QVariant_value1(
        this_ptr: *const crate::QMapOfQByteArrayQVariant,
        key: *const ::qt_core::QByteArray,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns <i>defaultValue</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#attribute">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the attribute associated with the code <i>code</i>. If the attribute has not been set, it returns <i>defaultValue</i>.</p>
    /// <p><b>Note: </b>This function does not apply the defaults listed in <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setAttribute">setAttribute</a>() and <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#Attribute-enum">QNetworkRequest::Attribute</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_attribute1(
        this_ptr: *const crate::QNetworkRequest,
        code: crate::q_network_request::Attribute,
    ) -> *mut ::qt_core::QVariant;

    /// <p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#setTransferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    /// <p>Transfers are aborted if no bytes are transferred before the timeout expires. Zero means no timer is set. If no argument is provided, the timeout is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#TransferTimeoutConstant-enum">QNetworkRequest::DefaultTransferTimeoutConstant</a>. If this function is not called, the timeout is disabled and has the value zero.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkrequest.html#transferTimeout">transferTimeout</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkRequest_setTransferTimeout1(
        this_ptr: *mut crate::QNetworkRequest,
    );

    /// <p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>For UDP sockets, after binding, the signal <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">QUdpSocket::readyRead</a>() is emitted whenever a UDP datagram arrives on the specified address and port. Thus, this function is useful to write UDP servers.</p>
    /// <p>For TCP sockets, this function may be used to specify which interface to use for an outgoing connection, which is useful in case of multiple network interfaces.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>On success, the function returns <code>true</code> and the socket enters <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>; otherwise it returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind2(
        this_ptr: *mut crate::QAbstractSocket,
        address: *const crate::QHostAddress,
        port: u16,
    ) -> bool;

    /// <p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Binds to <i>address</i> on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>For UDP sockets, after binding, the signal <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">QUdpSocket::readyRead</a>() is emitted whenever a UDP datagram arrives on the specified address and port. Thus, this function is useful to write UDP servers.</p>
    /// <p>For TCP sockets, this function may be used to specify which interface to use for an outgoing connection, which is useful in case of multiple network interfaces.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>On success, the function returns <code>true</code> and the socket enters <a href="http://doc.qt.io/qt-5/qabstractsocket.html#SocketState-enum">BoundState</a>; otherwise it returns <code>false</code>.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind3(
        this_ptr: *mut crate::QAbstractSocket,
        address: *const crate::QHostAddress,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Binds to <a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a>:Any on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind4(
        this_ptr: *mut crate::QAbstractSocket,
        port: u16,
    ) -> bool;

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#bind-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Binds to <a href="http://doc.qt.io/qt-5/qhostaddress.html">QHostAddress</a>:Any on port <i>port</i>, using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a> <i>mode</i>.</p>
    /// <p>By default, the socket is bound using the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">DefaultForPlatform</a> <a href="http://doc.qt.io/qt-5/qabstractsocket.html#BindFlag-enum">BindMode</a>. If a port is not specified, a random port is chosen.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_bind5(this_ptr: *mut crate::QAbstractSocket) -> bool;

    pub fn ctr_qt_network_ffi_QAbstractSocket_connectToHost2(
        this_ptr: *mut crate::QAbstractSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        mode: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_QAbstractSocket_connectToHost3(
        this_ptr: *mut crate::QAbstractSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
    );

    pub fn ctr_qt_network_ffi_QAbstractSocket_connectToHost4(
        this_ptr: *mut crate::QAbstractSocket,
        address: *const crate::QHostAddress,
        port: u16,
    );

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```virtual bool QAbstractSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    /// <p><b>Note:</b> It is not possible to initialize two abstract sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor1(
        this_ptr: *mut crate::QAbstractSocket,
        socketDescriptor: isize,
        state: crate::q_abstract_socket::SocketState,
    ) -> bool;

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```virtual bool QAbstractSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>. Read and write buffers are cleared, discarding any pending data.</p>
    /// <p><b>Note:</b> It is not possible to initialize two abstract sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_setSocketDescriptor2(
        this_ptr: *mut crate::QAbstractSocket,
        socketDescriptor: isize,
    ) -> bool;

    /// <p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be established:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToHost(<span class="string">"imap"</span><span class="operator">,</span> <span class="number">143</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForConnected(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Connected!"</span>);
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>Note: </b>This function may wait slightly longer than <i>msecs</i>, depending on the time it takes to complete the host lookup.</p>
    /// <p><b>Note: </b>Multiple calls to this functions do not accumulate the time. If the function times out, the connecting process will be aborted.</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connected">connected</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#connectToHost">connectToHost</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#connected">connected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForConnected1(
        this_ptr: *mut crate::QAbstractSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    /// <p>This function blocks until new data is available for reading and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal is emitted and there is new data available for reading; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForReadyRead1(
        this_ptr: *mut crate::QAbstractSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    /// <p>This function blocks until at least one byte has been written on the socket and the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal is emitted; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qiodevice.html#bytesWritten">bytesWritten</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">waitForReadyRead</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForBytesWritten1(
        this_ptr: *mut crate::QAbstractSocket,
    ) -> bool;

    /// <p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qabstractsocket.html">QAbstractSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qabstractsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be closed:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>disconnectFromHost();
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>state() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qabstractsocket.html#QAbstractSocket">QAbstractSocket</a></span><span class="operator">::</span>UnconnectedState
    /// &#32;    <span class="operator">|</span><span class="operator">|</span> socket<span class="operator">-</span><span class="operator">&gt;</span>waitForDisconnected(<span class="number">1000</span>)) {
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Disconnected!"</span>);
    ///  }
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>Note: </b>This function may fail randomly on Windows. Consider using the event loop and the <a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnected">disconnected</a>() signal if your software will run on Windows.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#disconnectFromHost">disconnectFromHost</a>() and <a href="http://doc.qt.io/qt-5/qabstractsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QAbstractSocket_waitForDisconnected1(
        this_ptr: *mut crate::QAbstractSocket,
    ) -> bool;

    /// <p>Constructs a QDnsLookup object for the given <i>type</i> and <i>name</i> and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDnsLookup object for the given <i>type</i> and <i>name</i> and sets <i>parent</i> as the parent object.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup5(
        type_: crate::q_dns_lookup::Type,
        name: *const ::qt_core::QString,
    ) -> *mut crate::QDnsLookup;

    /// <p>Constructs a QDnsLookup object for the given <i>type</i>, <i>name</i> and <i>nameserver</i> and sets <i>parent</i> as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdnslookup.html#QDnsLookup-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QDnsLookup object for the given <i>type</i>, <i>name</i> and <i>nameserver</i> and sets <i>parent</i> as the parent object.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QDnsLookup_QDnsLookup6(
        type_: crate::q_dns_lookup::Type,
        name: *const ::qt_core::QString,
        nameserver: *const crate::QHostAddress,
    ) -> *mut crate::QDnsLookup;

    /// <p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_qHash52(key: *const crate::QSslCertificate)
        -> ::std::os::raw::c_uint;

    /// <p>Constructs a QSslCertificate by reading <i>format</i> encoded data from <i>device</i> and using the first certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>device</i> contained a certificate, and if this certificate was loaded successfully.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCertificate by reading <i>format</i> encoded data from <i>device</i> and using the first certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>device</i> contained a certificate, and if this certificate was loaded successfully.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate4(
        device: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QSslCertificate;

    /// <p>Constructs a QSslCertificate by parsing the <i>format</i> encoded <i>data</i> and using the first available certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>data</i> contained a certificate, and if this certificate was loaded successfully.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslCertificate by parsing the <i>format</i> encoded <i>data</i> and using the first available certificate found. You can later call <a href="http://doc.qt.io/qt-5/qsslcertificate.html#isNull">isNull</a>() to see if <i>data</i> contained a certificate, and if this certificate was loaded successfully.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_QSslCertificate5(
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QSslCertificate;

    /// <p>Returns a cryptographic digest of this certificate. By default, an MD5 digest will be generated, but you can also specify a custom <i>algorithm</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#digest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a cryptographic digest of this certificate. By default, an MD5 digest will be generated, but you can also specify a custom <i>algorithm</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_digest1(
        this_ptr: *const crate::QSslCertificate,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">C++ documentation</a> for <span style='color: green;'>```static QList<QSslCertificate> QSslCertificate::fromPath(const QString &path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and returns them in a list. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="keyword">const</span> <span class="keyword">auto</span> certs <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>fromPath(<span class="string">"C:/ssl/certificate.*.pem"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;     <span class="type">QSsl</span><span class="operator">::</span>Pem<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qregexp.html">QRegExp</a></span><span class="operator">::</span>Wildcard);
    ///  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span> <span class="operator">&amp;</span>cert : certs) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> cert<span class="operator">.</span>issuerInfo(<span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>Organization);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromPath2(
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">C++ documentation</a> for <span style='color: green;'>```static QList<QSslCertificate> QSslCertificate::fromPath(const QString &path, QSsl::EncodingFormat format, QRegExp::PatternSyntax syntax)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and returns them in a list. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>.</p>
    /// <p>Example:</p>
    /// <pre class="cpp"> <span class="keyword">const</span> <span class="keyword">auto</span> certs <span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>fromPath(<span class="string">"C:/ssl/certificate.*.pem"</span><span class="operator">,</span>
    /// &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;   &#32;     <span class="type">QSsl</span><span class="operator">::</span>Pem<span class="operator">,</span> <span class="type"><a href="http://doc.qt.io/qt-5/qregexp.html">QRegExp</a></span><span class="operator">::</span>Wildcard);
    ///  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span> <span class="operator">&amp;</span>cert : certs) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>() <span class="operator">&lt;</span><span class="operator">&lt;</span> cert<span class="operator">.</span>issuerInfo(<span class="type"><a href="http://doc.qt.io/qt-5/qsslcertificate.html#QSslCertificate">QSslCertificate</a></span><span class="operator">::</span>Organization);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromPath3(
        path: *const ::qt_core::QString,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Searches for and parses all certificates in <i>device</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromDevice">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches for and parses all certificates in <i>device</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">fromData</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromDevice1(
        device: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Searches for and parses all certificates in <i>data</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromData">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches for and parses all certificates in <i>data</i> that are encoded in the specified <i>format</i> and returns them in a list of certificates.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslcertificate.html#fromDevice">fromDevice</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_fromData1(
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QListOfQSslCertificate;

    /// <p>Verifies a certificate chain. The chain to be verified is passed in the <i>certificateChain</i> parameter. The first certificate in the list should be the leaf certificate of the chain to be verified. If <i>hostName</i> is specified then the certificate is also checked to see if it is valid for the specified host name.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#verify">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Verifies a certificate chain. The chain to be verified is passed in the <i>certificateChain</i> parameter. The first certificate in the list should be the leaf certificate of the chain to be verified. If <i>hostName</i> is specified then the certificate is also checked to see if it is valid for the specified host name.</p>
    /// <p>Note that the root (CA) certificate should not be included in the list to be verified, this will be looked up automatically either using the CA list specified by QSslSocket::defaultCaCertificates() or, if possible, it will be loaded on demand on Unix.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_verify1(
        certificateChain: *const crate::QListOfQSslCertificate,
    ) -> *mut crate::QListOfQSslError;

    /// <p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#importPkcs12">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    /// <p><b>Note: </b>The <i>device</i> must be open and ready to be read from.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_importPkcs121(
        device: *mut ::qt_core::QIODevice,
        key: *mut crate::QSslKey,
        cert: *mut crate::QSslCertificate,
        caCertificates: *mut crate::QListOfQSslCertificate,
    ) -> bool;

    /// <p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslcertificate.html#importPkcs12">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Imports a PKCS#12 (pfx) file from the specified <i>device</i>. A PKCS#12 file is a bundle that can contain a number of certificates and keys. This method reads a single <i>key</i>, its <i>certificate</i> and any associated <i>caCertificates</i> from the bundle. If a <i>passPhrase</i> is specified then this will be used to decrypt the bundle. Returns <code>true</code> if the PKCS#12 file was successfully loaded.</p>
    /// <p><b>Note: </b>The <i>device</i> must be open and ready to be read from.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_QSslCertificate_importPkcs122(
        device: *mut ::qt_core::QIODevice,
        key: *mut crate::QSslKey,
        cert: *mut crate::QSslCertificate,
    ) -> bool;

    /// <p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>key</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.4.</p></div>
    pub fn ctr_qt_network_ffi_qHash53(key: *const crate::QSslError) -> ::std::os::raw::c_uint;

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted2(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        mode: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted3(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted4(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        sslPeerName: *const ::qt_core::QString,
        mode: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHostEncrypted5(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        sslPeerName: *const ::qt_core::QString,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```[override virtual] bool QSslSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState state = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>state</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setSocketDescriptor1(
        this_ptr: *mut crate::QSslSocket,
        socketDescriptor: isize,
        state: crate::q_abstract_socket::SocketState,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qsslsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```[override virtual] bool QSslSocket::setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState state = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#setSocketDescriptor">QAbstractSocket::setSocketDescriptor</a>(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODevice::OpenMode openMode).</p>
    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qsslsocket.html">QSslSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <i>socketDescriptor</i> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>state</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#socketDescriptor">socketDescriptor</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setSocketDescriptor2(
        this_ptr: *mut crate::QSslSocket,
        socketDescriptor: isize,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHost1(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
        openMode: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_connectToHost2(
        this_ptr: *mut crate::QSslSocket,
        hostName: *const ::qt_core::QString,
        port: u16,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Sets the socket's local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> to the first one found in file <i>path</i>, which is parsed according to the specified <i>format</i>.</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setLocalCertificate2(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Reads the string in file <i>fileName</i> and decodes it using a specified <i>algorithm</i> and encoding <i>format</i> to construct an <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a>. If the encoded key is encrypted, <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>The socket's private key is set to the constructed key. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPrivateKey2(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Reads the string in file <i>fileName</i> and decodes it using a specified <i>algorithm</i> and encoding <i>format</i> to construct an <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a>. If the encoded key is encrypted, <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>The socket's private key is set to the constructed key. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPrivateKey3(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
        algorithm: crate::q_ssl::KeyAlgorithm,
    );

    /// <p>This is an overloaded function.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#setPrivateKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This is an overloaded function.</p>
    /// <p>Reads the string in file <i>fileName</i> and decodes it using a specified <i>algorithm</i> and encoding <i>format</i> to construct an <a href="http://doc.qt.io/qt-5/qsslkey.html">SSL key</a>. If the encoded key is encrypted, <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>The socket's private key is set to the constructed key. The private key and the local <a href="http://doc.qt.io/qt-5/qsslcertificate.html">certificate</a> are used by clients and servers that must prove their identity to SSL peers.</p>
    /// <p>Both the key and the local certificate are required if you are creating an SSL server socket. If you are creating an SSL client socket, the key and local certificate are required if your client must identify itself to an SSL server.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#privateKey">privateKey</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#setLocalCertificate">setLocalCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_setPrivateKey4(
        this_ptr: *mut crate::QSslSocket,
        fileName: *const ::qt_core::QString,
    );

    pub fn ctr_qt_network_ffi_QSslSocket_addCaCertificates2(
        this_ptr: *mut crate::QSslSocket,
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QSslSocket_addCaCertificates3(
        this_ptr: *mut crate::QSslSocket,
        path: *const ::qt_core::QString,
    ) -> bool;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Searches all files in the <i>path</i> for certificates with the specified <i>encoding</i> and adds them to the default CA certificate database. <i>path</i> can be an explicit file, or it can contain wildcards in the format specified by <i>syntax</i>. Returns <code>true</code> if any CA certificates are added to the default database.</p>
    /// <p>Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates2(
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
    ) -> bool;

    /// <p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket-obsolete.html#addDefaultCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</p>
    /// <p>Use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>() on the default <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a> instead.</p>
    /// <p>Searches all files in the <i>path</i> for certificates with the specified <i>encoding</i> and adds them to the default CA certificate database. <i>path</i> can be an explicit file, or it can contain wildcards in the format specified by <i>syntax</i>. Returns <code>true</code> if any CA certificates are added to the default database.</p>
    /// <p>Each SSL socket's CA certificate database is initialized to the default CA certificate database.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#caCertificates">QSslConfiguration::caCertificates</a>(), <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">QSslConfiguration::addCaCertificates</a>(), and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">QSslConfiguration::addCaCertificate</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_addDefaultCaCertificates3(
        path: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>(int msecs).</p>
    /// <p>Waits until the socket is connected, or <i>msecs</i> milliseconds, whichever happens first. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForConnected">QAbstractSocket::waitForConnected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForConnected1(
        this_ptr: *mut crate::QSslSocket,
    ) -> bool;

    /// <p>Waits until the socket has completed the SSL handshake and has emitted <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), or <i>msecs</i> milliseconds, whichever comes first. If <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() has been emitted, this function returns true; otherwise (e.g., the socket is disconnected, or the SSL handshake fails), false is returned.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has completed the SSL handshake and has emitted <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), or <i>msecs</i> milliseconds, whichever comes first. If <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>() has been emitted, this function returns true; otherwise (e.g., the socket is disconnected, or the SSL handshake fails), false is returned.</p>
    /// <p>The following example waits up to one second for the socket to be encrypted:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToHostEncrypted(<span class="string">"imap"</span><span class="operator">,</span> <span class="number">993</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForEncrypted(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Encrypted!"</span>);
    /// </pre>
    /// <p>If msecs is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslsocket.html#startClientEncryption">startClientEncryption</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#startServerEncryption">startServerEncryption</a>(), <a href="http://doc.qt.io/qt-5/qsslsocket.html#encrypted">encrypted</a>(), and <a href="http://doc.qt.io/qt-5/qsslsocket.html#isEncrypted">isEncrypted</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForEncrypted1(
        this_ptr: *mut crate::QSslSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">QAbstractSocket::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForReadyRead">QAbstractSocket::waitForReadyRead</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForReadyRead1(
        this_ptr: *mut crate::QSslSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">QAbstractSocket::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForBytesWritten">QAbstractSocket::waitForBytesWritten</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForBytesWritten1(
        this_ptr: *mut crate::QSslSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>(int msecs).</p>
    /// <p>Waits until the socket has disconnected or <i>msecs</i> milliseconds, whichever comes first. If the connection has been disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qabstractsocket.html#waitForDisconnected">QAbstractSocket::waitForDisconnected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslSocket_waitForDisconnected1(
        this_ptr: *mut crate::QSslSocket,
    ) -> bool;

    /// <p>Creates a QDtls object, <i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor. <i>mode</i> is <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side DTLS connection or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qdtls.html#QDtls">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QDtls object, <i>parent</i> is passed to the <a href="http://doc.qt.io/qt-5/qobject.html">QObject</a> constructor. <i>mode</i> is <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslServerMode</a> for a server-side DTLS connection or <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslClientMode</a> for a client.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#sslMode">sslMode</a>() and <a href="http://doc.qt.io/qt-5/qsslsocket.html#SslMode-enum">QSslSocket::SslMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QDtls_QDtls2(mode: crate::q_ssl_socket::SslMode)
        -> *mut crate::QDtls;

    /// <p>Sets the peer's address, <i>port</i>, and host name and returns <code>true</code> if successful. <i>address</i> must not be null, multicast, or broadcast. <i>verificationName</i> is the host name used for the certificate validation.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qdtls.html#setPeer">C++ documentation</a> for <span style='color: green;'>```bool QDtls::setPeer(const QHostAddress &address, quint16 port, const QString &verificationName = {})```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the peer's address, <i>port</i>, and host name and returns <code>true</code> if successful. <i>address</i> must not be null, multicast, or broadcast. <i>verificationName</i> is the host name used for the certificate validation.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#peerAddress">peerAddress</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#peerPort">peerPort</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#peerVerificationName">peerVerificationName</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_setPeer1(
        this_ptr: *mut crate::QDtls,
        address: *const crate::QHostAddress,
        port: u16,
    ) -> bool;

    /// <p>Starts or continues a DTLS handshake. <i>socket</i> must be a valid pointer. When starting a server-side DTLS handshake, <i>dgram</i> must contain the initial ClientHello message read from <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>. This function returns <code>true</code> if no error was found. Handshake state can be tested using <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(). <code>false</code> return means some error occurred, use <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>() for more detailed information.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qdtls.html#doHandshake">C++ documentation</a> for <span style='color: green;'>```bool QDtls::doHandshake(QUdpSocket *socket, const QByteArray &dgram = {})```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Starts or continues a DTLS handshake. <i>socket</i> must be a valid pointer. When starting a server-side DTLS handshake, <i>dgram</i> must contain the initial ClientHello message read from <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a>. This function returns <code>true</code> if no error was found. Handshake state can be tested using <a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(). <code>false</code> return means some error occurred, use <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>() for more detailed information.</p>
    /// <p><b>Note: </b>If the identity of the peer can't be established, the error is set to QDtlsError::PeerVerificationError. If you want to ignore verification errors and continue connecting, you must call <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>() and then <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>(). If the errors cannot be ignored, you must call <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">abortHandshake</a>().</p>
    /// <pre class="cpp"> <span class="keyword">if</span> (<span class="operator">!</span>dtls<span class="operator">.</span>doHandshake(<span class="operator">&amp;</span>socket<span class="operator">,</span> dgram)) {
    /// &#32;    <span class="keyword">if</span> (dtls<span class="operator">.</span>dtlsError() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qdtls.html#QDtlsError-enum">QDtlsError</a></span><span class="operator">::</span>PeerVerificationError)
    /// &#32;   &#32;    dtls<span class="operator">.</span>abortAfterError(<span class="operator">&amp;</span>socket);
    ///  }
    /// </pre>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qdtls.html#handshakeState">handshakeState</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#dtlsError">dtlsError</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#ignoreVerificationErrors">ignoreVerificationErrors</a>(), <a href="http://doc.qt.io/qt-5/qdtls.html#resumeHandshake">resumeHandshake</a>(), and <a href="http://doc.qt.io/qt-5/qdtls.html#abortHandshake">abortHandshake</a>().</p></div>
    pub fn ctr_qt_network_ffi_QDtls_doHandshake1(
        this_ptr: *mut crate::QDtls,
        socket: *mut crate::QUdpSocket,
    ) -> bool;

    pub fn ctr_qt_network_ffi_qHash54(key: *const crate::QHostAddress) -> ::std::os::raw::c_uint;

    /// <p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhostaddress.html#isEqual">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns <code>true</code> if this host address is the same as the <i>other</i> address given; otherwise returns <code>false</code>.</p>
    /// <p>The parameter <i>mode</i> controls which conversions are preformed between addresses of differing protocols. If no <i>mode</i> is given, <code>TolerantConversion</code> is performed by default.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhostaddress.html#ConversionModeFlag-enum">ConversionMode</a> and <a href="http://doc.qt.io/qt-5/qhostaddress.html#operator-eq-eq">operator==</a>().</p></div>
    pub fn ctr_qt_network_ffi_QHostAddress_isEqual1(
        this_ptr: *const crate::QHostAddress,
        address: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Constructs QHstsPolicy with <i>expiry</i> (in UTC); <i>flags</i> is a value indicating whether this policy must also include subdomains, <i>host</i> data is interpreted according to <i>mode</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#QHstsPolicy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs QHstsPolicy with <i>expiry</i> (in UTC); <i>flags</i> is a value indicating whether this policy must also include subdomains, <i>host</i> data is interpreted according to <i>mode</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qurl.html#setHost">QUrl::setHost</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#ParsingMode-enum">QUrl::ParsingMode</a>, and <a href="http://doc.qt.io/qt-5/qhstspolicy.html#PolicyFlag-enum">QHstsPolicy::PolicyFlag</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_QHstsPolicy3(
        expiry: *const ::qt_core::QDateTime,
        flags: ::std::os::raw::c_int,
        host: *const ::qt_core::QString,
    ) -> *mut crate::QHstsPolicy;

    /// <p>Sets a host, <i>host</i> data is interpreted according to <i>mode</i> parameter.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#setHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets a host, <i>host</i> data is interpreted according to <i>mode</i> parameter.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#host">host</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#setHost">QUrl::setHost</a>(), and <a href="http://doc.qt.io/qt-5/qurl.html#ParsingMode-enum">QUrl::ParsingMode</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_setHost1(
        this_ptr: *mut crate::QHstsPolicy,
        host: *const ::qt_core::QString,
    );

    /// <p>Returns a host for a given policy, formatted according to <i>options</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhstspolicy.html#host">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns a host for a given policy, formatted according to <i>options</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhstspolicy.html#setHost">setHost</a>(), <a href="http://doc.qt.io/qt-5/qurl.html#host">QUrl::host</a>(), and <a href="http://doc.qt.io/qt-5/qurl.html#ComponentFormattingOption-enum">QUrl::ComponentFormattingOptions</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHstsPolicy_host1(
        this_ptr: *const crate::QHstsPolicy,
    ) -> *mut ::qt_core::QString;

    /// <p>Constructs a QHttpMultiPart with content type <i>contentType</i> and sets parent as the parent object.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhttpmultipart.html#QHttpMultiPart-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QHttpMultiPart with content type <i>contentType</i> and sets parent as the parent object.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qhttpmultipart.html#ContentType-enum">QHttpMultiPart::ContentType</a>.</p></div>
    pub fn ctr_qt_network_ffi_QHttpMultiPart_QHttpMultiPart3(
        contentType: crate::q_http_multi_part::ContentType,
    ) -> *mut crate::QHttpMultiPart;

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    /// <p>This is a blocking function call. Its use is ill-advised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qlocalserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_waitForNewConnection1(
        this_ptr: *mut crate::QLocalServer,
        msec: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *timedOut will be set to true.</p>
    /// <p>This is a blocking function call. Its use is ill-advised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qlocalserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qlocalserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalServer_waitForNewConnection2(
        this_ptr: *mut crate::QLocalServer,
    ) -> bool;

    pub fn ctr_qt_network_ffi_QLocalSocket_connectToServer2(this_ptr: *mut crate::QLocalSocket);

    pub fn ctr_qt_network_ffi_QLocalSocket_connectToServer3(
        this_ptr: *mut crate::QLocalSocket,
        name: *const ::qt_core::QString,
    );

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#open">QIODevice::open</a>(QIODevice::OpenMode mode).</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlocalsocket.html#open">C++ documentation</a> for <span style='color: green;'>```[override virtual] bool QLocalSocket::open(QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#open">QIODevice::open</a>(QIODevice::OpenMode mode).</p>
    /// <p>Equivalent to <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>(<a href="http://doc.qt.io/qt-5/qiodevice.html#OpenModeFlag-enum">OpenMode</a> mode). The socket is opened in the given <i>openMode</i> to the server defined by <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setServerName">setServerName</a>().</p>
    /// <p>Note that unlike in most other <a href="http://doc.qt.io/qt-5/qiodevice.html">QIODevice</a> subclasses, open() may not open the device directly. The function return false if the socket was already connected or if the server to connect to was not defined and true in any other case. The <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connected">connected</a>() or <a href="http://doc.qt.io/qt-5/qlocalsocket.html#errorOccurred">errorOccurred</a>() signals will be emitted once the device is actualy open (or the connection failed).</p>
    /// <p>See <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() for more details.</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_open1(this_ptr: *mut crate::QLocalSocket) -> bool;

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```bool QLocalSocket::setSocketDescriptor(qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two local sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">state</a>(), and <a href="http://doc.qt.io/qt-5/qiodevice.html#openMode">openMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor1(
        this_ptr: *mut crate::QLocalSocket,
        socketDescriptor: isize,
        socketState: crate::q_local_socket::LocalSocketState,
    ) -> bool;

    /// <p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    ///
    /// Warning: no exact match found in C++ documentation. Below is the <a href="http://doc.qt.io/qt-5/qlocalsocket.html#setSocketDescriptor">C++ documentation</a> for <span style='color: green;'>```bool QLocalSocket::setSocketDescriptor(qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)```</span>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initializes <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> with the native socket descriptor <i>socketDescriptor</i>. Returns <code>true</code> if <a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a> is accepted as a valid socket descriptor; otherwise returns <code>false</code>. The socket is opened in the mode specified by <i>openMode</i>, and enters the socket state specified by <i>socketState</i>.</p>
    /// <p><b>Note: </b>It is not possible to initialize two local sockets with the same native socket descriptor.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#socketDescriptor">socketDescriptor</a>(), <a href="http://doc.qt.io/qt-5/qlocalsocket.html#state">state</a>(), and <a href="http://doc.qt.io/qt-5/qiodevice.html#openMode">openMode</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_setSocketDescriptor2(
        this_ptr: *mut crate::QLocalSocket,
        socketDescriptor: isize,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForBytesWritten">QIODevice::waitForBytesWritten</a>(int msecs).</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForBytesWritten1(
        this_ptr: *mut crate::QLocalSocket,
    ) -> bool;

    /// <p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForConnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket is connected, up to <i>msecs</i> milliseconds. If the connection has been established, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be established:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>connectToServer(<span class="string">"market"</span>);
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>waitForConnected(<span class="number">1000</span>))
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Connected!"</span>);
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#connectToServer">connectToServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#connected">connected</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForConnected1(
        this_ptr: *mut crate::QLocalSocket,
    ) -> bool;

    /// <p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForDisconnected">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the socket has disconnected, up to <i>msecs</i> milliseconds. If the connection was successfully disconnected, this function returns <code>true</code>; otherwise it returns <code>false</code> (if the operation timed out, if an error occurred, or if this <a href="http://doc.qt.io/qt-5/qlocalsocket.html">QLocalSocket</a> is already disconnected). In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qlocalsocket.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for a connection to be closed:</p>
    /// <pre class="cpp"> socket<span class="operator">-</span><span class="operator">&gt;</span>disconnectFromServer();
    ///  <span class="keyword">if</span> (socket<span class="operator">-</span><span class="operator">&gt;</span>state() <span class="operator">=</span><span class="operator">=</span> <span class="type"><a href="http://doc.qt.io/qt-5/qlocalsocket.html#QLocalSocket">QLocalSocket</a></span><span class="operator">::</span>UnconnectedState
    /// &#32;    <span class="operator">|</span><span class="operator">|</span> socket<span class="operator">-</span><span class="operator">&gt;</span>waitForDisconnected(<span class="number">1000</span>)) {
    /// &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Disconnected!"</span>);
    ///  }
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#disconnectFromServer">disconnectFromServer</a>() and <a href="http://doc.qt.io/qt-5/qlocalsocket.html#close">close</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForDisconnected1(
        this_ptr: *mut crate::QLocalSocket,
    ) -> bool;

    /// <p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForReadyRead">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Reimplements: <a href="http://doc.qt.io/qt-5/qiodevice.html#waitForReadyRead">QIODevice::waitForReadyRead</a>(int msecs).</p>
    /// <p>This function blocks until data is available for reading and the <a href="http://doc.qt.io/qt-5/qiodevice.html#readyRead">readyRead()</a> signal has been emitted. The function will timeout after <i>msecs</i> milliseconds; the default timeout is 30000 milliseconds.</p>
    /// <p>The function returns <code>true</code> if data is available for reading; otherwise it returns <code>false</code> (if an error occurred or the operation timed out).</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qlocalsocket.html#waitForBytesWritten">waitForBytesWritten</a>().</p></div>
    pub fn ctr_qt_network_ffi_QLocalSocket_waitForReadyRead1(
        this_ptr: *mut crate::QLocalSocket,
    ) -> bool;

    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    /// <p>The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p>For more precise control, use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>().</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">QSslCertificate::fromPath</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_addCaCertificates2(
        this_ptr: *mut crate::QSslConfiguration,
        path: *const ::qt_core::QString,
        format: crate::q_ssl::EncodingFormat,
    ) -> bool;

    /// <p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificates">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Searches all files in the <i>path</i> for certificates encoded in the specified <i>format</i> and adds them to this socket's CA certificate database. <i>path</i> must be a file or a pattern matching one or more files, as specified by <i>syntax</i>. Returns <code>true</code> if one or more certificates are added to the socket's CA certificate database; otherwise returns <code>false</code>.</p>
    /// <p>The CA certificate database is used by the socket during the handshake phase to validate the peer's certificate.</p>
    /// <p>For more precise control, use <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>().</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#addCaCertificate">addCaCertificate</a>() and <a href="http://doc.qt.io/qt-5/qsslcertificate-obsolete.html#fromPath">QSslCertificate::fromPath</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_addCaCertificates3(
        this_ptr: *mut crate::QSslConfiguration,
        path: *const ::qt_core::QString,
    ) -> bool;

    /// <p>Sets or clears the backend-specific configuration.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfiguration">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets or clears the backend-specific configuration.</p>
    /// <p>Without a <i>backendConfiguration</i> parameter this function will clear the backend-specific configuration. More information about the supported options is available in the documentation of <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>().</p>
    /// <p>This function was introduced in Qt 5.11.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qsslconfiguration.html#backendConfiguration">backendConfiguration</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#setBackendConfigurationOption">setBackendConfigurationOption</a>().</p></div>
    pub fn ctr_qt_network_ffi_QSslConfiguration_setBackendConfiguration1(
        this_ptr: *mut crate::QSslConfiguration,
    );

    /// <p>If <i>enabled</i> is <code>true</code>, the internal HSTS cache will use a persistent store to read and write HSTS policies. <i>storeDir</i> defines where this store will be located. The default location is defined by <a href="http://doc.qt.io/qt-5/qstandardpaths.html#StandardLocation-enum">QStandardPaths::CacheLocation</a>. If there is no writable QStandartPaths::CacheLocation and <i>storeDir</i> is an empty string, the store will be located in the program's working directory.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#enableStrictTransportSecurityStore">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>If <i>enabled</i> is <code>true</code>, the internal HSTS cache will use a persistent store to read and write HSTS policies. <i>storeDir</i> defines where this store will be located. The default location is defined by <a href="http://doc.qt.io/qt-5/qstandardpaths.html#StandardLocation-enum">QStandardPaths::CacheLocation</a>. If there is no writable QStandartPaths::CacheLocation and <i>storeDir</i> is an empty string, the store will be located in the program's working directory.</p>
    /// <p><b>Note: </b>If HSTS cache already contains HSTS policies by the time persistent store is enabled, these policies will be preserved in the store. In case both cache and store contain the same known hosts, policies from cache are considered to be more up-to-date (and thus will overwrite the previous values in the store). If this behavior is undesired, enable HSTS store before enabling Strict Tranport Security. By default, the persistent store of HSTS policies is disabled.</p>
    /// <p>This function was introduced in Qt 5.10.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#isStrictTransportSecurityStoreEnabled">isStrictTransportSecurityStoreEnabled</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setStrictTransportSecurityEnabled">setStrictTransportSecurityEnabled</a>(), and <a href="http://doc.qt.io/qt-5/qstandardpaths.html#standardLocations">QStandardPaths::standardLocations</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_enableStrictTransportSecurityStore1(
        this_ptr: *mut crate::QNetworkAccessManager,
        enabled: bool,
    );

    /// <p>Sends a custom request to the server identified by the URL of <i>request</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#sendCustomRequest">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sends a custom request to the server identified by the URL of <i>request</i>.</p>
    /// <p>It is the user's responsibility to send a <i>verb</i> to the server that is valid according to the HTTP specification.</p>
    /// <p>This method provides means to send verbs other than the common ones provided via <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>() or <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>() etc., for instance sending an HTTP OPTIONS command.</p>
    /// <p>If <i>data</i> is not empty, the contents of the <i>data</i> device will be uploaded to the server; in that case, data must be open for reading and must remain valid until the <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#finished">finished</a>() signal is emitted for this reply.</p>
    /// <p><b>Note: </b>This feature is currently available for HTTP(S) only.</p>
    /// <p>This function was introduced in Qt 4.7.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_sendCustomRequest3(
        this_ptr: *mut crate::QNetworkAccessManager,
        request: *const crate::QNetworkRequest,
        verb: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkReply;

    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>Preconnecting a SPDY connection can be done by calling setAllowedNextProtocols() on <i>sslConfiguration</i> with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a> contained in the list of allowed protocols. When using SPDY, one single connection per host is enough, i.e. calling this method multiple times per host will not result in faster network transactions.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">connectToHost</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted2(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
        port: u16,
    );

    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>, using <i>sslConfiguration</i>. This function is useful to complete the TCP and SSL handshake to a host before the HTTPS request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>Preconnecting a SPDY connection can be done by calling setAllowedNextProtocols() on <i>sslConfiguration</i> with <a href="http://doc.qt.io/qt-5/qsslconfiguration.html#NextProtocolSpdy3_0-var">QSslConfiguration::NextProtocolSpdy3_0</a> contained in the list of allowed protocols. When using SPDY, one single connection per host is enough, i.e. calling this method multiple times per host will not result in faster network transactions.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">connectToHost</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHostEncrypted3(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
    );

    /// <p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>. This function is useful to complete the TCP handshake to a host before the HTTP request is made, resulting in a lower network latency.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHost">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Initiates a connection to the host given by <i>hostName</i> at port <i>port</i>. This function is useful to complete the TCP handshake to a host before the HTTP request is made, resulting in a lower network latency.</p>
    /// <p><b>Note: </b>This function has no possibility to report errors.</p>
    /// <p>This function was introduced in Qt 5.2.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#connectToHostEncrypted">connectToHostEncrypted</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#get">get</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#post">post</a>(), <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#put">put</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#deleteResource">deleteResource</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_connectToHost1(
        this_ptr: *mut crate::QNetworkAccessManager,
        hostName: *const ::qt_core::QString,
    );

    /// <p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#setTransferTimeout">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets <i>timeout</i> as the transfer timeout in milliseconds.</p>
    /// <p>Transfers are aborted if no bytes are transferred before the timeout expires. Zero means no timer is set. If no argument is provided, the timeout is <a href="http://doc.qt.io/qt-5/qnetworkrequest.html#TransferTimeoutConstant-enum">QNetworkRequest::DefaultTransferTimeoutConstant</a>. If this function is not called, the timeout is disabled and has the value zero. The request-specific non-zero timeouts set for the requests that are executed override this value. This means that if <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> has an enabled timeout, it needs to be disabled to execute a request without a timeout.</p>
    /// <p>This function was introduced in Qt 5.15.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html#transferTimeout">transferTimeout</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkAccessManager_setTransferTimeout1(
        this_ptr: *mut crate::QNetworkAccessManager,
    );

    /// <p>Returns the list of configurations which comply with the given <i>filter</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#allConfigurations">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the list of configurations which comply with the given <i>filter</i>.</p>
    /// <p>By default this function returns all (defined and undefined) configurations.</p>
    /// <p>A wireless network with a particular SSID may only be accessible in a certain area despite the fact that the system has a valid configuration for it. Therefore the filter flag may be used to limit the list to discovered and possibly connected configurations only.</p>
    /// <p>If <i>filter</i> is set to zero this function returns all possible configurations.</p>
    /// <p>Note that this function returns the states for all configurations as they are known at the time of this function call. If for instance a configuration of type WLAN is defined the system may have to perform a WLAN scan in order to determine whether it is actually available. To obtain the most accurate state <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">updateConfigurations</a>() should be used to update each configuration's state. Note that such an update may require some time. It's completion is signalled by <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateCompleted">updateCompleted</a>(). In the absence of a configuration update this function returns the best estimate at the time of the call. Therefore, if WLAN configurations are of interest, it is recommended that <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html#updateConfigurations">updateConfigurations</a>() is called once after <a href="http://doc.qt.io/qt-5/qnetworkconfigurationmanager.html" class="obsolete">QNetworkConfigurationManager</a> instantiation (WLAN scans are too time consuming to perform in constructor). After this the data is kept automatically up-to-date as the system reports any changes.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkConfigurationManager_allConfigurations1(
        this_ptr: *const crate::QNetworkConfigurationManager,
    ) -> *mut crate::QListOfQNetworkConfiguration;

    /// <p>Create a new QNetworkCookie object, initializing the cookie name to <i>name</i> and its value to <i>value</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#QNetworkCookie">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Create a new QNetworkCookie object, initializing the cookie name to <i>name</i> and its value to <i>value</i>.</p>
    /// <p>A cookie is only valid if it has a name. However, the value is opaque to the application and being empty may have significance to the remote server.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_QNetworkCookie3(
        name: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkCookie;

    /// <p>Returns the raw form of this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a>. The <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> returned by this function is suitable for an HTTP header, either in a server response (the Set-Cookie header) or the client request (the Cookie header). You can choose from one of two formats, using <i>form</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkcookie.html#toRawForm">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the raw form of this <a href="http://doc.qt.io/qt-5/qnetworkcookie.html">QNetworkCookie</a>. The <a href="http://doc.qt.io/qt-5/qbytearray.html">QByteArray</a> returned by this function is suitable for an HTTP header, either in a server response (the Set-Cookie header) or the client request (the Cookie header). You can choose from one of two formats, using <i>form</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkcookie.html#parseCookies">parseCookies</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkCookie_toRawForm1(
        this_ptr: *const crate::QNetworkCookie,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#QNetworkDatagram-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram4(
        data: *const ::qt_core::QByteArray,
        destinationAddress: *const crate::QHostAddress,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#QNetworkDatagram-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Creates a QNetworkDatagram object and sets <i>data</i> as the payload data, along with <i>destinationAddress</i> and <i>port</i> as the destination address of the datagram.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_QNetworkDatagram5(
        data: *const ::qt_core::QByteArray,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Sets the sender address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The sender address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setSender">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Sets the sender address associated with this datagram to be the address <i>address</i> and port number <i>port</i>. The sender address and port numbers are usually set by <a href="http://doc.qt.io/qt-5/qudpsocket.html">QUdpSocket</a> upon reception, so there's no need to call this function on a received datagram.</p>
    /// <p>For outgoing datagrams, this function can be used to set the address the datagram should carry. The address <i>address</i> must usually be one of the local addresses assigned to this machine, which can be obtained using <a href="http://doc.qt.io/qt-5/qnetworkinterface.html">QNetworkInterface</a>. If left unset, the operating system will choose the most appropriate address to use given the destination in question.</p>
    /// <p>The port number <i>port</i> must be the port number associated with the socket, if there is one. The value of 0 can be used to indicate that the operating system should choose the port number.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">QUdpSocket::writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderAddress">senderAddress</a>(), <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#senderPort">senderPort</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#setDestination">setDestination</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkDatagram_setSender1(
        this_ptr: *mut crate::QNetworkDatagram,
        address: *const crate::QHostAddress,
    );

    /// <p>Constructs a QNetworkProxyQuery with the URL <i>requestUrl</i> and sets the query type to <i>queryType</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery with the URL <i>requestUrl</i> and sets the query type to <i>queryType</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#protocolTag">protocolTag</a>(), <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerHostName">peerHostName</a>(), and <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#peerPort">peerPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery8(
        requestUrl: *const ::qt_core::QUrl,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery9(
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
        protocolTag: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries, because it sets the peer hostname to <i>hostname</i> and the peer's port number to <i>port</i>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery10(
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    /// <p>Note that <i>bindPort</i> is of type quint16 to indicate the exact port number that is requested. The value of -1 (unknown) is not allowed in this context.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery11(
        bindPort: u16,
        protocolTag: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QNetworkProxyQuery-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxyQuery of type <i>queryType</i> and sets the protocol tag to be <i>protocolTag</i>. This constructor is suitable for <a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#QueryType-enum">QNetworkProxyQuery::TcpSocket</a> queries because it sets the local port number to <i>bindPort</i>.</p>
    /// <p>Note that <i>bindPort</i> is of type quint16 to indicate the exact port number that is requested. The value of -1 (unknown) is not allowed in this context.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxyquery.html#localPort">localPort</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery12(
        bindPort: u16,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery13(
        networkConfiguration: *const crate::QNetworkConfiguration,
        requestUrl: *const ::qt_core::QUrl,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery14(
        networkConfiguration: *const crate::QNetworkConfiguration,
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
        protocolTag: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery15(
        networkConfiguration: *const crate::QNetworkConfiguration,
        hostname: *const ::qt_core::QString,
        port: ::std::os::raw::c_int,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery16(
        networkConfiguration: *const crate::QNetworkConfiguration,
        bindPort: u16,
        protocolTag: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxyQuery;

    pub fn ctr_qt_network_ffi_QNetworkProxyQuery_QNetworkProxyQuery17(
        networkConfiguration: *const crate::QNetworkConfiguration,
        bindPort: u16,
    ) -> *mut crate::QNetworkProxyQuery;

    /// <p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    /// <p>The default capabilities for proxy type <i>type</i> are set automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy3(
        type_: crate::q_network_proxy::ProxyType,
        hostName: *const ::qt_core::QString,
        port: u16,
        user: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    /// <p>The default capabilities for proxy type <i>type</i> are set automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy4(
        type_: crate::q_network_proxy::ProxyType,
        hostName: *const ::qt_core::QString,
        port: u16,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    /// <p>The default capabilities for proxy type <i>type</i> are set automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy5(
        type_: crate::q_network_proxy::ProxyType,
        hostName: *const ::qt_core::QString,
    ) -> *mut crate::QNetworkProxy;

    /// <p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#QNetworkProxy-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QNetworkProxy with <i>type</i>, <i>hostName</i>, <i>port</i>, <i>user</i> and <i>password</i>.</p>
    /// <p>The default capabilities for proxy type <i>type</i> are set automatically.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkproxy.html#capabilities">capabilities</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxy_QNetworkProxy6(
        type_: crate::q_network_proxy::ProxyType,
    ) -> *mut crate::QNetworkProxy;

    /// <p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#queryProxy">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    /// <p>When reimplementing this class, take care to return at least one element.</p>
    /// <p>If you cannot determine a better proxy alternative, use <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::DefaultProxy</a>, which tells the code querying for a proxy to use a higher alternative. For example, if this factory is set to a <a href="http://doc.qt.io/qt-5/qnetworkaccessmanager.html">QNetworkAccessManager</a> object, DefaultProxy will tell it to query the application-level proxy settings.</p>
    /// <p>If this factory is set as the application proxy factory, DefaultProxy and NoProxy will have the same meaning.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_queryProxy1(
        this_ptr: *mut crate::QNetworkProxyFactory,
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworkproxyfactory.html#systemProxyForQuery">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>This function takes the query request, <i>query</i>, examines the details of the type of socket or request and returns a list of <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> objects that indicate the proxy servers to be used, in order of preference.</p>
    /// <p>This function can be used to determine the platform-specific proxy settings. This function will use the libraries provided by the operating system to determine the proxy for a given connection, if such libraries exist. If they don't, this function will just return a <a href="http://doc.qt.io/qt-5/qnetworkproxy.html">QNetworkProxy</a> of type <a href="http://doc.qt.io/qt-5/qnetworkproxy.html#ProxyType-enum">QNetworkProxy::NoProxy</a>.</p>
    /// <p>On Windows, this function will use the WinHTTP DLL functions. Despite its name, Microsoft suggests using it for all applications that require network connections, not just HTTP. This will respect the proxy settings set on the registry with the proxycfg.exe tool. If those settings are not found, this function will attempt to obtain Internet Explorer's settings and use them.</p>
    /// <p>On macOS, this function will obtain the proxy settings using the SystemConfiguration framework from Apple. It will apply the FTP, HTTP and HTTPS proxy configurations for queries that contain the protocol tag "ftp", "http" and "https", respectively. If the SOCKS proxy is enabled in that configuration, this function will use the SOCKS server for all queries. If SOCKS isn't enabled, it will use the HTTPS proxy for all TcpSocket and UrlRequest queries.</p>
    /// <p>On other systems, this function will pick up proxy settings from the "http_proxy" environment variable. This variable must be a URL using one of the following schemes: "http", "socks5" or "socks5h".</p>
    /// <a name="limitations"></a>
    /// <h4 id="limitations">Limitations</h4>
    /// <p>These are the limitations for the current version of this function. Future versions of Qt may lift some of the limitations listed here.</p>
    /// <ul>
    /// <li>On macOS, this function will ignore the Proxy Auto Configuration settings, since it cannot execute the associated ECMAScript code.</li>
    /// <li>On Windows platforms, this function may take several seconds to execute depending on the configuration of the user's system.</li>
    /// </ul></div>
    pub fn ctr_qt_network_ffi_QNetworkProxyFactory_systemProxyForQuery1(
    ) -> *mut crate::QListOfQNetworkProxy;

    /// <p>Constructs a session based on <i>connectionConfig</i> with the given <i>parent</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#QNetworkSession">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a session based on <i>connectionConfig</i> with the given <i>parent</i>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworkconfiguration.html">QNetworkConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_QNetworkSession2(
        connConfig: *const crate::QNetworkConfiguration,
    ) -> *mut crate::QNetworkSession;

    /// <p>Waits until the session has been opened, up to <i>msecs</i> milliseconds. If the session has been opened, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() to determine the cause of the error.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qnetworksession.html#waitForOpened">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits until the session has been opened, up to <i>msecs</i> milliseconds. If the session has been opened, this function returns <code>true</code>; otherwise it returns <code>false</code>. In the case where it returns <code>false</code>, you can call <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>() to determine the cause of the error.</p>
    /// <p>The following example waits up to one second for the session to be opened:</p>
    /// <pre class="cpp">     session<span class="operator">-</span><span class="operator">&gt;</span>open();
    /// &#32;    <span class="keyword">if</span> (session<span class="operator">-</span><span class="operator">&gt;</span>waitForOpened(<span class="number">1000</span>))
    /// &#32;   &#32;    <a href="http://doc.qt.io/qt-5/qtglobal.html#qDebug">qDebug</a>(<span class="string">"Open!"</span>);
    /// </pre>
    /// <p>If <i>msecs</i> is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qnetworksession.html#open">open</a>() and <a href="http://doc.qt.io/qt-5/qnetworksession.html#error">error</a>().</p></div>
    pub fn ctr_qt_network_ffi_QNetworkSession_waitForOpened1(
        this_ptr: *mut crate::QNetworkSession,
    ) -> bool;

    /// <p>Returns the hash value for the <i>response</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the hash value for the <i>response</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.13.</p></div>
    pub fn ctr_qt_network_ffi_qHash55(
        response: *const crate::QOcspResponse,
    ) -> ::std::os::raw::c_uint;

    /// <p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    /// <p>Returns <code>true</code> on success; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">isListening</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_listen1(
        this_ptr: *mut crate::QTcpServer,
        address: *const crate::QHostAddress,
    ) -> bool;

    /// <p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#listen">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Tells the server to listen for incoming connections on address <i>address</i> and port <i>port</i>. If <i>port</i> is 0, a port is chosen automatically. If <i>address</i> is <a href="http://doc.qt.io/qt-5/qhostaddress.html#SpecialAddress-enum">QHostAddress::Any</a>, the server will listen on all network interfaces.</p>
    /// <p>Returns <code>true</code> on success; otherwise returns <code>false</code>.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#isListening">isListening</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_listen2(this_ptr: *mut crate::QTcpServer) -> bool;

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    /// <p>This is a blocking function call. Its use is disadvised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qtcpserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_waitForNewConnection1(
        this_ptr: *mut crate::QTcpServer,
        msec: ::std::os::raw::c_int,
    ) -> bool;

    /// <p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qtcpserver.html#waitForNewConnection">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Waits for at most <i>msec</i> milliseconds or until an incoming connection is available. Returns <code>true</code> if a connection is available; otherwise returns <code>false</code>. If the operation timed out and <i>timedOut</i> is not <code>nullptr</code>, *<i>timedOut</i> will be set to true.</p>
    /// <p>This is a blocking function call. Its use is disadvised in a single-threaded GUI application, since the whole application will stop responding until the function returns. waitForNewConnection() is mostly useful when there is no event loop available.</p>
    /// <p>The non-blocking alternative is to connect to the <a href="http://doc.qt.io/qt-5/qtcpserver.html#newConnection">newConnection</a>() signal.</p>
    /// <p>If msec is -1, this function will not time out.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qtcpserver.html#hasPendingConnections">hasPendingConnections</a>() and <a href="http://doc.qt.io/qt-5/qtcpserver.html#nextPendingConnection">nextPendingConnection</a>().</p></div>
    pub fn ctr_qt_network_ffi_QTcpServer_waitForNewConnection2(
        this_ptr: *mut crate::QTcpServer,
    ) -> bool;

    pub fn ctr_qt_network_ffi_qHash56(
        dhparam: *const crate::QSslDiffieHellmanParameters,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object using the byte array <i>encoded</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#fromEncoded">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object using the byte array <i>encoded</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    /// <p>Use the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() method on the returned object to check whether the Diffie-Hellman parameters were valid and loaded correctly.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded2(
        encoded: *const ::qt_core::QByteArray,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object by reading from <i>device</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#fromEncoded-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html">QSslDiffieHellmanParameters</a> object by reading from <i>device</i> in either PEM or DER form as specified by <i>encoding</i>.</p>
    /// <p>Use the <a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() method on the returned object to check whether the Diffie-Hellman parameters were valid and loaded correctly.</p>
    /// <p>In particular, if <i>device</i> is <code>nullptr</code> or not open for reading, an invalid object will be returned.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qssldiffiehellmanparameters.html#isValid">isValid</a>() and <a href="http://doc.qt.io/qt-5/qsslconfiguration.html">QSslConfiguration</a>.</p></div>
    pub fn ctr_qt_network_ffi_QSslDiffieHellmanParameters_fromEncoded3(
        device: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QSslDiffieHellmanParameters;

    /// <p>Returns an hash value for the curve <i>curve</i>, using <i>seed</i> to seed the calculation.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qhash-proxy.html#qHash-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns an hash value for the curve <i>curve</i>, using <i>seed</i> to seed the calculation.</p>
    /// <p>This function was introduced in Qt 5.5.</p></div>
    pub fn ctr_qt_network_ffi_qHash57(
        curve: *const crate::QSslEllipticCurve,
    ) -> ::std::os::raw::c_uint;

    /// <p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>encoded</i> contained a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey6(
        encoded: *const ::qt_core::QByteArray,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
        type_: crate::q_ssl::KeyType,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>encoded</i> contained a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey7(
        encoded: *const ::qt_core::QByteArray,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-1">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by decoding the string in the byte array <i>encoded</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>encoded</i> contained a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey8(
        encoded: *const ::qt_core::QByteArray,
        algorithm: crate::q_ssl::KeyAlgorithm,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>device</i> provided a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey9(
        device: *mut ::qt_core::QIODevice,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
        type_: crate::q_ssl::KeyType,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>device</i> provided a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey10(
        device: *mut ::qt_core::QIODevice,
        algorithm: crate::q_ssl::KeyAlgorithm,
        format: crate::q_ssl::EncodingFormat,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-2">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey by reading and decoding data from a <i>device</i> using a specified <i>algorithm</i> and <i>encoding</i> format. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>If the key is encrypted then <i>passPhrase</i> is used to decrypt it.</p>
    /// <p>After construction, use <a href="http://doc.qt.io/qt-5/qsslkey.html#isNull">isNull</a>() to check if <i>device</i> provided a valid key.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey11(
        device: *mut ::qt_core::QIODevice,
        algorithm: crate::q_ssl::KeyAlgorithm,
    ) -> *mut crate::QSslKey;

    /// <p>Constructs a QSslKey from a valid native key <i>handle</i>. <i>type</i> specifies whether the key is public or private.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#QSslKey-3">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Constructs a QSslKey from a valid native key <i>handle</i>. <i>type</i> specifies whether the key is public or private.</p>
    /// <p>QSslKey will take ownership for this key and you must not free the key using the native library.</p>
    /// <p>This function was introduced in Qt 5.0.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_QSslKey12(
        handle: *mut ::std::ffi::c_void,
    ) -> *mut crate::QSslKey;

    /// <p>Returns the key in PEM encoding. The result is encrypted with <i>passPhrase</i> if the key is a private key and <i>passPhrase</i> is non-empty.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#toPem">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the key in PEM encoding. The result is encrypted with <i>passPhrase</i> if the key is a private key and <i>passPhrase</i> is non-empty.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_toPem1(
        this_ptr: *const crate::QSslKey,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Returns the key in DER encoding.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qsslkey.html#toDer">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Returns the key in DER encoding.</p>
    /// <p>The <i>passPhrase</i> argument should be omitted as DER cannot be encrypted. It will be removed in a future version of Qt.</p></div>
    pub fn ctr_qt_network_ffi_QSslKey_toDer1(
        this_ptr: *const crate::QSslKey,
    ) -> *mut ::qt_core::QByteArray;

    /// <p>Receives a datagram no larger than <i>maxSize</i> bytes and returns it in the <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#receiveDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Receives a datagram no larger than <i>maxSize</i> bytes and returns it in the <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</p>
    /// <p>On failure, returns a <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html">QNetworkDatagram</a> that reports <a href="http://doc.qt.io/qt-5/qnetworkdatagram.html#isValid">not valid</a>.</p>
    /// <p>If <i>maxSize</i> is too small, the rest of the datagram will be lost. If <i>maxSize</i> is 0, the datagram will be discarded. If <i>maxSize</i> is -1 (the default), this function will attempt to read the entire datagram.</p>
    /// <p>This function was introduced in Qt 5.8.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_receiveDatagram1(
        this_ptr: *mut crate::QUdpSocket,
    ) -> *mut crate::QNetworkDatagram;

    /// <p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    /// <p>Returns the size of the datagram on success; otherwise returns -1.</p>
    /// <p>If <i>maxSize</i> is too small, the rest of the datagram will be lost. To avoid loss of data, call <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>() to determine the size of the pending datagram before attempting to read it. If <i>maxSize</i> is 0, the datagram will be discarded.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_readDatagram1(
        this_ptr: *mut crate::QUdpSocket,
        data: *mut ::std::os::raw::c_char,
        maxlen: i64,
        host: *mut crate::QHostAddress,
    ) -> i64;

    /// <p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    ///
    /// <a href="http://doc.qt.io/qt-5/qudpsocket.html#readDatagram">C++ documentation</a>:<div style='border: 1px solid #5CFF95; background: #D6FFE4; padding: 16px;'><p>Receives a datagram no larger than <i>maxSize</i> bytes and stores it in <i>data</i>. The sender's host address and port is stored in *<i>address</i> and *<i>port</i> (unless the pointers are <code>nullptr</code>).</p>
    /// <p>Returns the size of the datagram on success; otherwise returns -1.</p>
    /// <p>If <i>maxSize</i> is too small, the rest of the datagram will be lost. To avoid loss of data, call <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>() to determine the size of the pending datagram before attempting to read it. If <i>maxSize</i> is 0, the datagram will be discarded.</p>
    /// <p><b>See also </b><a href="http://doc.qt.io/qt-5/qudpsocket.html#writeDatagram">writeDatagram</a>(), <a href="http://doc.qt.io/qt-5/qudpsocket.html#hasPendingDatagrams">hasPendingDatagrams</a>(), and <a href="http://doc.qt.io/qt-5/qudpsocket.html#pendingDatagramSize">pendingDatagramSize</a>().</p></div>
    pub fn ctr_qt_network_ffi_QUdpSocket_readDatagram2(
        this_ptr: *mut crate::QUdpSocket,
        data: *mut ::std::os::raw::c_char,
        maxlen: i64,
    ) -> i64;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractNetworkCache_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QAbstractNetworkCache;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr(
        ptr: *mut crate::QAbstractNetworkCache,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QAbstractNetworkCache_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QAbstractNetworkCache;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QAbstractSocket_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr1(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QAbstractSocket_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_static_cast_QDnsLookup_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDnsLookup;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr2(
        ptr: *mut crate::QDnsLookup,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QDnsLookup_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDnsLookup;

    pub fn ctr_qt_network_ffi_static_cast_QTcpSocket_ptr(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr2(
        ptr: *mut crate::QTcpSocket,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QTcpSocket_ptr1(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr1(
        ptr: *mut crate::QTcpSocket,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr1(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QTcpSocket_ptr2(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr3(
        ptr: *mut crate::QTcpSocket,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QTcpSocket_ptr2(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QSslSocket_ptr(
        ptr: *mut crate::QTcpSocket,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QTcpSocket_ptr3(
        ptr: *mut crate::QSslSocket,
    ) -> *mut crate::QTcpSocket;

    pub fn ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr(
        ptr: *mut crate::QTcpSocket,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QSslSocket_ptr1(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr3(
        ptr: *mut crate::QSslSocket,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr1(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QSslSocket_ptr2(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr2(
        ptr: *mut crate::QSslSocket,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr2(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QSslSocket_ptr3(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr4(
        ptr: *mut crate::QSslSocket,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QSslSocket_ptr3(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QSslSocket;

    pub fn ctr_qt_network_ffi_static_cast_QDtlsClientVerifier_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtlsClientVerifier;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr5(
        ptr: *mut crate::QDtlsClientVerifier,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QDtlsClientVerifier_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtlsClientVerifier;

    pub fn ctr_qt_network_ffi_static_cast_QDtls_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtls;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr6(
        ptr: *mut crate::QDtls,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QDtls_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QDtls;

    pub fn ctr_qt_network_ffi_static_cast_QHttpMultiPart_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QHttpMultiPart;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr7(
        ptr: *mut crate::QHttpMultiPart,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QHttpMultiPart_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QHttpMultiPart;

    pub fn ctr_qt_network_ffi_static_cast_QLocalServer_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalServer;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr8(
        ptr: *mut crate::QLocalServer,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QLocalServer_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalServer;

    pub fn ctr_qt_network_ffi_static_cast_QLocalSocket_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QLocalSocket;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr3(
        ptr: *mut crate::QLocalSocket,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QLocalSocket_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QLocalSocket;

    pub fn ctr_qt_network_ffi_static_cast_QLocalSocket_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalSocket;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr9(
        ptr: *mut crate::QLocalSocket,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QLocalSocket_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QLocalSocket;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkAccessManager_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkAccessManager;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr10(
        ptr: *mut crate::QNetworkAccessManager,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkAccessManager_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkAccessManager;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkConfigurationManager_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkConfigurationManager;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr11(
        ptr: *mut crate::QNetworkConfigurationManager,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkConfigurationManager_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkConfigurationManager;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkCookieJar_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkCookieJar;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr12(
        ptr: *mut crate::QNetworkCookieJar,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkCookieJar_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkCookieJar;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkDiskCache_ptr(
        ptr: *mut crate::QAbstractNetworkCache,
    ) -> *mut crate::QNetworkDiskCache;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractNetworkCache_ptr1(
        ptr: *mut crate::QNetworkDiskCache,
    ) -> *mut crate::QAbstractNetworkCache;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkDiskCache_ptr(
        ptr: *mut crate::QAbstractNetworkCache,
    ) -> *mut crate::QNetworkDiskCache;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkDiskCache_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkDiskCache;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr13(
        ptr: *mut crate::QNetworkDiskCache,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkDiskCache_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkDiskCache;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkReply_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr4(
        ptr: *mut crate::QNetworkReply,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkReply_ptr(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkReply_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr14(
        ptr: *mut crate::QNetworkReply,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkReply_ptr1(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QNetworkSession_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkSession;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr15(
        ptr: *mut crate::QNetworkSession,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QNetworkSession_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QNetworkSession;

    pub fn ctr_qt_network_ffi_static_cast_QTcpServer_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpServer;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr16(
        ptr: *mut crate::QTcpServer,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QTcpServer_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QTcpServer;

    pub fn ctr_qt_network_ffi_static_cast_QUdpSocket_ptr(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QAbstractSocket_ptr4(
        ptr: *mut crate::QUdpSocket,
    ) -> *mut crate::QAbstractSocket;

    pub fn ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr(
        ptr: *mut crate::QAbstractSocket,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QUdpSocket_ptr1(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QIODevice_ptr5(
        ptr: *mut crate::QUdpSocket,
    ) -> *mut ::qt_core::QIODevice;

    pub fn ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr1(
        ptr: *mut ::qt_core::QIODevice,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QUdpSocket_ptr2(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr17(
        ptr: *mut crate::QUdpSocket,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_QUdpSocket_ptr2(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::QUdpSocket;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQHostAddress,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQHostAddress,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQHostAddress,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QHostAddress),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQHostAddress;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_set(
        this_ptr: *mut crate::SlotOfQHostAddress,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QHostAddress),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQHostAddress,
        arg0: *const crate::QHostAddress,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQHostAddress,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQHostAddress,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQHostAddress,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref(
    ) -> *mut crate::SignalOfQHostAddress;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQHostAddress,
        arg0: *const crate::QHostAddress,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_metaObject(
        this_ptr: *const crate::SlotOfSocketError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_qt_metacast(
        this_ptr: *mut crate::SlotOfSocketError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_qt_metacall(
        this_ptr: *mut crate::SlotOfSocketError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_abstract_socket::SocketError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfSocketError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_set(
        this_ptr: *mut crate::SlotOfSocketError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_abstract_socket::SocketError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_slot_(
        this_ptr: *mut crate::SlotOfSocketError,
        arg0: crate::q_abstract_socket::SocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_metaObject(
        this_ptr: *const crate::SignalOfSocketError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_qt_metacast(
        this_ptr: *mut crate::SignalOfSocketError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_qt_metacall(
        this_ptr: *mut crate::SignalOfSocketError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError(
    ) -> *mut crate::SignalOfSocketError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_emit_(
        this_ptr: *mut crate::SignalOfSocketError,
        arg0: crate::q_abstract_socket::SocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQListOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQListOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQListOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QListOfQSslError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_set(
        this_ptr: *mut crate::SlotOfQListOfQSslError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QListOfQSslError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQListOfQSslError,
        arg0: *const crate::QListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQListOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQListOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQListOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref(
    ) -> *mut crate::SignalOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQListOfQSslError,
        arg0: *const crate::QListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_metaObject(
        this_ptr: *const crate::SlotOfState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_qt_metacast(
        this_ptr: *mut crate::SlotOfState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_qt_metacall(
        this_ptr: *mut crate::SlotOfState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_session::State),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_set(
        this_ptr: *mut crate::SlotOfState,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_session::State),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_slot_(
        this_ptr: *mut crate::SlotOfState,
        arg0: crate::q_network_session::State,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_metaObject(
        this_ptr: *const crate::SignalOfState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_qt_metacast(
        this_ptr: *mut crate::SignalOfState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_qt_metacall(
        this_ptr: *mut crate::SignalOfState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State(
    ) -> *mut crate::SignalOfState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_emit_(
        this_ptr: *mut crate::SignalOfState,
        arg0: crate::q_network_session::State,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_metaObject(
        this_ptr: *const crate::SlotOfType,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_qt_metacast(
        this_ptr: *mut crate::SlotOfType,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_qt_metacall(
        this_ptr: *mut crate::SlotOfType,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_dns_lookup::Type),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfType;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_set(
        this_ptr: *mut crate::SlotOfType,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_dns_lookup::Type),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_slot_(
        this_ptr: *mut crate::SlotOfType,
        arg0: crate::q_dns_lookup::Type,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_metaObject(
        this_ptr: *const crate::SignalOfType,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_qt_metacast(
        this_ptr: *mut crate::SignalOfType,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_qt_metacall(
        this_ptr: *mut crate::SignalOfType,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type(
    ) -> *mut crate::SignalOfType;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_emit_(
        this_ptr: *mut crate::SignalOfType,
        arg0: crate::q_dns_lookup::Type,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_metaObject(
        this_ptr: *const crate::SlotOfQNetworkConfigurationBool,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkConfigurationBool,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkConfigurationBool,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkConfiguration, bool),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_set(
        this_ptr: *mut crate::SlotOfQNetworkConfigurationBool,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkConfiguration, bool),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_slot_(
        this_ptr: *mut crate::SlotOfQNetworkConfigurationBool,
        arg0: *const crate::QNetworkConfiguration,
        arg1: bool,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_metaObject(
        this_ptr: *const crate::SignalOfQNetworkConfigurationBool,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkConfigurationBool,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkConfigurationBool,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool(
    ) -> *mut crate::SignalOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_emit_(
        this_ptr: *mut crate::SignalOfQNetworkConfigurationBool,
        arg0: *const crate::QNetworkConfiguration,
        arg1: bool,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQNetworkProxy,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkProxy,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkProxy,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkProxy),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_set(
        this_ptr: *mut crate::SlotOfQNetworkProxy,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkProxy),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQNetworkProxy,
        arg0: *const crate::QNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQNetworkProxy,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkProxy,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkProxy,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref(
    ) -> *mut crate::SignalOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQNetworkProxy,
        arg0: *const crate::QNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *mut crate::QSslPreSharedKeyAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_set(
        this_ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *mut crate::QSslPreSharedKeyAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_slot_(
        this_ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg0: *mut crate::QNetworkReply,
        arg1: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(
    ) -> *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_emit_(
        this_ptr: *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
        arg0: *mut crate::QNetworkReply,
        arg1: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQNetworkConfiguration,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkConfiguration,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkConfiguration,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkConfiguration),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_set(
        this_ptr: *mut crate::SlotOfQNetworkConfiguration,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QNetworkConfiguration),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQNetworkConfiguration,
        arg0: *const crate::QNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQNetworkConfiguration,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkConfiguration,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkConfiguration,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref(
    ) -> *mut crate::SignalOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQNetworkConfiguration,
        arg0: *const crate::QNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SlotOfQNetworkProxyQAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *const crate::QNetworkProxy,
                *mut crate::QAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_set(
        this_ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *const crate::QNetworkProxy,
                *mut crate::QAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_slot_(
        this_ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
        arg0: *const crate::QNetworkProxy,
        arg1: *mut crate::QAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SignalOfQNetworkProxyQAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkProxyQAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkProxyQAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(
    ) -> *mut crate::SignalOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_emit_(
        this_ptr: *mut crate::SignalOfQNetworkProxyQAuthenticator,
        arg0: *const crate::QNetworkProxy,
        arg1: *mut crate::QAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_metaObject(
        this_ptr: *const crate::SlotOfSessionError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_qt_metacast(
        this_ptr: *mut crate::SlotOfSessionError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_qt_metacall(
        this_ptr: *mut crate::SlotOfSessionError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_session::SessionError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfSessionError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_set(
        this_ptr: *mut crate::SlotOfSessionError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_session::SessionError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_slot_(
        this_ptr: *mut crate::SlotOfSessionError,
        arg0: crate::q_network_session::SessionError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_metaObject(
        this_ptr: *const crate::SignalOfSessionError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_qt_metacast(
        this_ptr: *mut crate::SignalOfSessionError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_qt_metacall(
        this_ptr: *mut crate::SignalOfSessionError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError(
    ) -> *mut crate::SignalOfSessionError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_emit_(
        this_ptr: *mut crate::SignalOfSessionError,
        arg0: crate::q_network_session::SessionError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_metaObject(
        this_ptr: *const crate::SlotOfI64I64,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_qt_metacast(
        this_ptr: *mut crate::SlotOfI64I64,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_qt_metacall(
        this_ptr: *mut crate::SlotOfI64I64,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ctr_qt_network_ffi_slot_wrapper_qint64_qint64(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void, i64, i64)>,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfI64I64;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_set(
        this_ptr: *mut crate::SlotOfI64I64,
        callback: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void, i64, i64)>,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_slot_(
        this_ptr: *mut crate::SlotOfI64I64,
        arg0: i64,
        arg1: i64,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_metaObject(
        this_ptr: *const crate::SignalOfI64I64,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_qt_metacast(
        this_ptr: *mut crate::SignalOfI64I64,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_qt_metacall(
        this_ptr: *mut crate::SignalOfI64I64,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ctr_qt_network_ffi_signal_wrapper_qint64_qint64(
    ) -> *mut crate::SignalOfI64I64;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_emit_(
        this_ptr: *mut crate::SignalOfI64I64,
        arg0: i64,
        arg1: i64,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_metaObject(
        this_ptr: *const crate::SlotOfSocketState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_qt_metacast(
        this_ptr: *mut crate::SlotOfSocketState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_qt_metacall(
        this_ptr: *mut crate::SlotOfSocketState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_abstract_socket::SocketState),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfSocketState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_set(
        this_ptr: *mut crate::SlotOfSocketState,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_abstract_socket::SocketState),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_slot_(
        this_ptr: *mut crate::SlotOfSocketState,
        arg0: crate::q_abstract_socket::SocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_metaObject(
        this_ptr: *const crate::SignalOfSocketState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_qt_metacast(
        this_ptr: *mut crate::SignalOfSocketState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_qt_metacall(
        this_ptr: *mut crate::SignalOfSocketState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState(
    ) -> *mut crate::SignalOfSocketState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_emit_(
        this_ptr: *mut crate::SignalOfSocketState,
        arg0: crate::q_abstract_socket::SocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_metaObject(
        this_ptr: *const crate::SlotOfLocalSocketState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_qt_metacast(
        this_ptr: *mut crate::SlotOfLocalSocketState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_qt_metacall(
        this_ptr: *mut crate::SlotOfLocalSocketState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_local_socket::LocalSocketState),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfLocalSocketState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_set(
        this_ptr: *mut crate::SlotOfLocalSocketState,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_local_socket::LocalSocketState),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_slot_(
        this_ptr: *mut crate::SlotOfLocalSocketState,
        arg0: crate::q_local_socket::LocalSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_metaObject(
        this_ptr: *const crate::SignalOfLocalSocketState,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_qt_metacast(
        this_ptr: *mut crate::SignalOfLocalSocketState,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_qt_metacall(
        this_ptr: *mut crate::SignalOfLocalSocketState,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState(
    ) -> *mut crate::SignalOfLocalSocketState;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_emit_(
        this_ptr: *mut crate::SignalOfLocalSocketState,
        arg0: crate::q_local_socket::LocalSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_metaObject(
        this_ptr: *const crate::SlotOfQFlagsUsagePolicy,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacast(
        this_ptr: *mut crate::SlotOfQFlagsUsagePolicy,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacall(
        this_ptr: *mut crate::SlotOfQFlagsUsagePolicy,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, ::std::os::raw::c_int),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_set(
        this_ptr: *mut crate::SlotOfQFlagsUsagePolicy,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, ::std::os::raw::c_int),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_slot_(
        this_ptr: *mut crate::SlotOfQFlagsUsagePolicy,
        arg0: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_metaObject(
        this_ptr: *const crate::SignalOfQFlagsUsagePolicy,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacast(
        this_ptr: *mut crate::SignalOfQFlagsUsagePolicy,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_qt_metacall(
        this_ptr: *mut crate::SignalOfQFlagsUsagePolicy,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy(
    ) -> *mut crate::SignalOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_emit_(
        this_ptr: *mut crate::SignalOfQFlagsUsagePolicy,
        arg0: ::std::os::raw::c_int,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQUrl,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQUrl,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQUrl,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const ::qt_core::QUrl),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQUrl;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_set(
        this_ptr: *mut crate::SlotOfQUrl,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const ::qt_core::QUrl),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQUrl,
        arg0: *const ::qt_core::QUrl,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQUrl,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQUrl,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQUrl,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref(
    ) -> *mut crate::SignalOfQUrl;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQUrl,
        arg0: *const ::qt_core::QUrl,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SlotOfQSslPreSharedKeyAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *mut crate::QSslPreSharedKeyAuthenticator),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_set(
        this_ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *mut crate::QSslPreSharedKeyAuthenticator),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_slot_(
        this_ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
        arg0: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SignalOfQSslPreSharedKeyAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SignalOfQSslPreSharedKeyAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SignalOfQSslPreSharedKeyAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr(
    ) -> *mut crate::SignalOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_emit_(
        this_ptr: *mut crate::SignalOfQSslPreSharedKeyAuthenticator,
        arg0: *mut crate::QSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_metaObject(
        this_ptr: *const crate::SlotOfNetworkAccessibility,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacast(
        this_ptr: *mut crate::SlotOfNetworkAccessibility,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacall(
        this_ptr: *mut crate::SlotOfNetworkAccessibility,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                crate::q_network_access_manager::NetworkAccessibility,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_set(
        this_ptr: *mut crate::SlotOfNetworkAccessibility,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                crate::q_network_access_manager::NetworkAccessibility,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_slot_(
        this_ptr: *mut crate::SlotOfNetworkAccessibility,
        arg0: crate::q_network_access_manager::NetworkAccessibility,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_metaObject(
        this_ptr: *const crate::SignalOfNetworkAccessibility,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacast(
        this_ptr: *mut crate::SignalOfNetworkAccessibility,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_qt_metacall(
        this_ptr: *mut crate::SignalOfNetworkAccessibility,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility(
    ) -> *mut crate::SignalOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_emit_(
        this_ptr: *mut crate::SignalOfNetworkAccessibility,
        arg0: crate::q_network_access_manager::NetworkAccessibility,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QSslError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_set(
        this_ptr: *mut crate::SlotOfQSslError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *const crate::QSslError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQSslError,
        arg0: *const crate::QSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref(
    ) -> *mut crate::SignalOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQSslError,
        arg0: *const crate::QSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SlotOfQNetworkReplyQListOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *const crate::QListOfQSslError,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_set(
        this_ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *const crate::QListOfQSslError,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_slot_(
        this_ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
        arg0: *mut crate::QNetworkReply,
        arg1: *const crate::QListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_metaObject(
        this_ptr: *const crate::SignalOfQNetworkReplyQListOfQSslError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkReplyQListOfQSslError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkReplyQListOfQSslError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(
    ) -> *mut crate::SignalOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_emit_(
        this_ptr: *mut crate::SignalOfQNetworkReplyQListOfQSslError,
        arg0: *mut crate::QNetworkReply,
        arg1: *const crate::QListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_metaObject(
        this_ptr: *const crate::SlotOfSslMode,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_qt_metacast(
        this_ptr: *mut crate::SlotOfSslMode,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_qt_metacall(
        this_ptr: *mut crate::SlotOfSslMode,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_ssl_socket::SslMode),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfSslMode;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_set(
        this_ptr: *mut crate::SlotOfSslMode,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_ssl_socket::SslMode),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_slot_(
        this_ptr: *mut crate::SlotOfSslMode,
        arg0: crate::q_ssl_socket::SslMode,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_metaObject(
        this_ptr: *const crate::SignalOfSslMode,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_qt_metacast(
        this_ptr: *mut crate::SignalOfSslMode,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_qt_metacall(
        this_ptr: *mut crate::SignalOfSslMode,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode(
    ) -> *mut crate::SignalOfSslMode;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_emit_(
        this_ptr: *mut crate::SignalOfSslMode,
        arg0: crate::q_ssl_socket::SslMode,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_metaObject(
        this_ptr: *const crate::SlotOfNetworkError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_qt_metacast(
        this_ptr: *mut crate::SlotOfNetworkError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_qt_metacall(
        this_ptr: *mut crate::SlotOfNetworkError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_reply::NetworkError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfNetworkError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_set(
        this_ptr: *mut crate::SlotOfNetworkError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_network_reply::NetworkError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_slot_(
        this_ptr: *mut crate::SlotOfNetworkError,
        arg0: crate::q_network_reply::NetworkError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_metaObject(
        this_ptr: *const crate::SignalOfNetworkError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_qt_metacast(
        this_ptr: *mut crate::SignalOfNetworkError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_qt_metacall(
        this_ptr: *mut crate::SignalOfNetworkError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError(
    ) -> *mut crate::SignalOfNetworkError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_emit_(
        this_ptr: *mut crate::SignalOfNetworkError,
        arg0: crate::q_network_reply::NetworkError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_metaObject(
        this_ptr: *const crate::SlotOfQNetworkReply,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkReply,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkReply,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *mut crate::QNetworkReply),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkReply;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_set(
        this_ptr: *mut crate::SlotOfQNetworkReply,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, *mut crate::QNetworkReply),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_slot_(
        this_ptr: *mut crate::SlotOfQNetworkReply,
        arg0: *mut crate::QNetworkReply,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_metaObject(
        this_ptr: *const crate::SignalOfQNetworkReply,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkReply,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkReply,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr(
    ) -> *mut crate::SignalOfQNetworkReply;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_emit_(
        this_ptr: *mut crate::SignalOfQNetworkReply,
        arg0: *mut crate::QNetworkReply,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SlotOfQNetworkReplyQAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *mut crate::QAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_set(
        this_ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
        callback: ::std::option::Option<
            extern "C" fn(
                *mut ::std::ffi::c_void,
                *mut crate::QNetworkReply,
                *mut crate::QAuthenticator,
            ),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_slot_(
        this_ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
        arg0: *mut crate::QNetworkReply,
        arg1: *mut crate::QAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_metaObject(
        this_ptr: *const crate::SignalOfQNetworkReplyQAuthenticator,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacast(
        this_ptr: *mut crate::SignalOfQNetworkReplyQAuthenticator,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_qt_metacall(
        this_ptr: *mut crate::SignalOfQNetworkReplyQAuthenticator,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(
    ) -> *mut crate::SignalOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_emit_(
        this_ptr: *mut crate::SignalOfQNetworkReplyQAuthenticator,
        arg0: *mut crate::QNetworkReply,
        arg1: *mut crate::QAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_metaObject(
        this_ptr: *const crate::SlotOfLocalSocketError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_qt_metacast(
        this_ptr: *mut crate::SlotOfLocalSocketError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_qt_metacall(
        this_ptr: *mut crate::SlotOfLocalSocketError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(
        parent: *mut ::qt_core::QObject,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_local_socket::LocalSocketError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    ) -> *mut crate::SlotOfLocalSocketError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_set(
        this_ptr: *mut crate::SlotOfLocalSocketError,
        callback: ::std::option::Option<
            extern "C" fn(*mut ::std::ffi::c_void, crate::q_local_socket::LocalSocketError),
        >,
        deleter: ::std::option::Option<extern "C" fn(*mut ::std::ffi::c_void)>,
        data: *mut ::std::ffi::c_void,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_slot_(
        this_ptr: *mut crate::SlotOfLocalSocketError,
        arg0: crate::q_local_socket::LocalSocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_staticMetaObject(
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_metaObject(
        this_ptr: *const crate::SignalOfLocalSocketError,
    ) -> *const ::qt_core::QMetaObject;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_qt_metacast(
        this_ptr: *mut crate::SignalOfLocalSocketError,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut ::std::ffi::c_void;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_qt_metacall(
        this_ptr: *mut crate::SignalOfLocalSocketError,
        arg1: ::qt_core::q_meta_object::Call,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::ffi::c_void,
    ) -> ::std::os::raw::c_int;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_tr(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_trUtf8(
        s: *const ::std::os::raw::c_char,
        c: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::qt_core::QString;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError(
    ) -> *mut crate::SignalOfLocalSocketError;

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_emit_(
        this_ptr: *mut crate::SignalOfLocalSocketError,
        arg0: crate::q_local_socket::LocalSocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_dctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref(
        this_ptr: *mut crate::SlotOfQHostAddress,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_dctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref(
        this_ptr: *mut crate::SignalOfQHostAddress,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_dctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError(
        this_ptr: *mut crate::SlotOfSocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_dctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError(
        this_ptr: *mut crate::SignalOfSocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref(
        this_ptr: *mut crate::SlotOfQListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref(
        this_ptr: *mut crate::SignalOfQListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_dctr_qt_network_ffi_slot_wrapper_QNetworkSession_State(
        this_ptr: *mut crate::SlotOfState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_dctr_qt_network_ffi_signal_wrapper_QNetworkSession_State(
        this_ptr: *mut crate::SignalOfState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_dctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type(
        this_ptr: *mut crate::SlotOfType,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_dctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type(
        this_ptr: *mut crate::SignalOfType,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_dctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool(
        this_ptr: *mut crate::SlotOfQNetworkConfigurationBool,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_dctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool(
        this_ptr: *mut crate::SignalOfQNetworkConfigurationBool,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref(
        this_ptr: *mut crate::SlotOfQNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref(
        this_ptr: *mut crate::SignalOfQNetworkProxy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(
        this_ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr(
        this_ptr: *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref(
        this_ptr: *mut crate::SlotOfQNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref(
        this_ptr: *mut crate::SignalOfQNetworkConfiguration,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(
        this_ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr(
        this_ptr: *mut crate::SignalOfQNetworkProxyQAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_dctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError(
        this_ptr: *mut crate::SlotOfSessionError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_dctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError(
        this_ptr: *mut crate::SignalOfSessionError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_dctr_qt_network_ffi_slot_wrapper_qint64_qint64(
        this_ptr: *mut crate::SlotOfI64I64,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_dctr_qt_network_ffi_signal_wrapper_qint64_qint64(
        this_ptr: *mut crate::SignalOfI64I64,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_dctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState(
        this_ptr: *mut crate::SlotOfSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_dctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState(
        this_ptr: *mut crate::SignalOfSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_dctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState(
        this_ptr: *mut crate::SlotOfLocalSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_dctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState(
        this_ptr: *mut crate::SignalOfLocalSocketState,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_dctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy(
        this_ptr: *mut crate::SlotOfQFlagsUsagePolicy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_dctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy(
        this_ptr: *mut crate::SignalOfQFlagsUsagePolicy,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_dctr_qt_network_ffi_slot_wrapper_QUrl_const_ref(
        this_ptr: *mut crate::SlotOfQUrl,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_dctr_qt_network_ffi_signal_wrapper_QUrl_const_ref(
        this_ptr: *mut crate::SignalOfQUrl,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr(
        this_ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr(
        this_ptr: *mut crate::SignalOfQSslPreSharedKeyAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_dctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility(
        this_ptr: *mut crate::SlotOfNetworkAccessibility,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_dctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility(
        this_ptr: *mut crate::SignalOfNetworkAccessibility,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QSslError_const_ref(
        this_ptr: *mut crate::SlotOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QSslError_const_ref(
        this_ptr: *mut crate::SignalOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(
        this_ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref(
        this_ptr: *mut crate::SignalOfQNetworkReplyQListOfQSslError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_dctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode(
        this_ptr: *mut crate::SlotOfSslMode,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_dctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode(
        this_ptr: *mut crate::SignalOfSslMode,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError(
        this_ptr: *mut crate::SlotOfNetworkError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError(
        this_ptr: *mut crate::SignalOfNetworkError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr(
        this_ptr: *mut crate::SlotOfQNetworkReply,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr(
        this_ptr: *mut crate::SignalOfQNetworkReply,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_dctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(
        this_ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_dctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr(
        this_ptr: *mut crate::SignalOfQNetworkReplyQAuthenticator,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_dctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError(
        this_ptr: *mut crate::SlotOfLocalSocketError,
    );

    pub fn ctr_qt_network_ffi_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_dctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError(
        this_ptr: *mut crate::SignalOfLocalSocketError,
    );

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQHostAddress;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr36(
        ptr: *mut crate::SlotOfQHostAddress,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QHostAddress_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQHostAddress;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQHostAddress;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr37(
        ptr: *mut crate::SignalOfQHostAddress,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QHostAddress_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQHostAddress;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSocketError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr38(
        ptr: *mut crate::SlotOfSocketError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSocketError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSocketError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr39(
        ptr: *mut crate::SignalOfSocketError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSocketError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr40(
        ptr: *mut crate::SlotOfQListOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr41(
        ptr: *mut crate::SignalOfQListOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr42(
        ptr: *mut crate::SlotOfState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_State_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr43(
        ptr: *mut crate::SignalOfState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_State_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfType;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr44(
        ptr: *mut crate::SlotOfType,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QDnsLookup_Type_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfType;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfType;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr45(
        ptr: *mut crate::SignalOfType,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QDnsLookup_Type_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfType;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr46(
        ptr: *mut crate::SlotOfQNetworkConfigurationBool,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_bool_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr47(
        ptr: *mut crate::SignalOfQNetworkConfigurationBool,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_bool_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkConfigurationBool;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr48(
        ptr: *mut crate::SlotOfQNetworkProxy,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr49(
        ptr: *mut crate::SignalOfQNetworkProxy,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkProxy;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr50(
        ptr: *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr51(
        ptr: *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr52(
        ptr: *mut crate::SlotOfQNetworkConfiguration,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkConfiguration_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr53(
        ptr: *mut crate::SignalOfQNetworkConfiguration,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkConfiguration_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkConfiguration;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr54(
        ptr: *mut crate::SlotOfQNetworkProxyQAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr55(
        ptr: *mut crate::SignalOfQNetworkProxyQAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkProxy_const_ref_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkProxyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSessionError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr56(
        ptr: *mut crate::SlotOfSessionError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkSession_SessionError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSessionError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSessionError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr57(
        ptr: *mut crate::SignalOfSessionError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkSession_SessionError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSessionError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfI64I64;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr58(
        ptr: *mut crate::SlotOfI64I64,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_qint64_qint64_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfI64I64;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfI64I64;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr59(
        ptr: *mut crate::SignalOfI64I64,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_qint64_qint64_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfI64I64;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSocketState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr60(
        ptr: *mut crate::SlotOfSocketState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QAbstractSocket_SocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSocketState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSocketState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr61(
        ptr: *mut crate::SignalOfSocketState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QAbstractSocket_SocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSocketState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfLocalSocketState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr62(
        ptr: *mut crate::SlotOfLocalSocketState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfLocalSocketState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfLocalSocketState;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr63(
        ptr: *mut crate::SignalOfLocalSocketState,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketState_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfLocalSocketState;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr64(
        ptr: *mut crate::SlotOfQFlagsUsagePolicy,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr65(
        ptr: *mut crate::SignalOfQFlagsUsagePolicy,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QFlags_QNetworkSession_UsagePolicy_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQFlagsUsagePolicy;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQUrl;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr66(
        ptr: *mut crate::SlotOfQUrl,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QUrl_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQUrl;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQUrl;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr67(
        ptr: *mut crate::SignalOfQUrl,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QUrl_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQUrl;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr68(
        ptr: *mut crate::SlotOfQSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr69(
        ptr: *mut crate::SignalOfQSslPreSharedKeyAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslPreSharedKeyAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQSslPreSharedKeyAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr70(
        ptr: *mut crate::SlotOfNetworkAccessibility,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr71(
        ptr: *mut crate::SignalOfNetworkAccessibility,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkAccessManager_NetworkAccessibility_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfNetworkAccessibility;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr72(
        ptr: *mut crate::SlotOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr73(
        ptr: *mut crate::SignalOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr74(
        ptr: *mut crate::SlotOfQNetworkReplyQListOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr75(
        ptr: *mut crate::SignalOfQNetworkReplyQListOfQSslError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QList_QSslError_const_ref_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQListOfQSslError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSslMode;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr76(
        ptr: *mut crate::SlotOfSslMode,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QSslSocket_SslMode_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfSslMode;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSslMode;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr77(
        ptr: *mut crate::SignalOfSslMode,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QSslSocket_SslMode_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfSslMode;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfNetworkError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr78(
        ptr: *mut crate::SlotOfNetworkError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_NetworkError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfNetworkError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfNetworkError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr79(
        ptr: *mut crate::SignalOfNetworkError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_NetworkError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfNetworkError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr80(
        ptr: *mut crate::SlotOfQNetworkReply,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr81(
        ptr: *mut crate::SignalOfQNetworkReply,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReply;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr82(
        ptr: *mut crate::SlotOfQNetworkReplyQAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr83(
        ptr: *mut crate::SignalOfQNetworkReplyQAuthenticator,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QNetworkReply_ptr_QAuthenticator_ptr_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfQNetworkReplyQAuthenticator;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfLocalSocketError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr84(
        ptr: *mut crate::SlotOfLocalSocketError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_slot_wrapper_QLocalSocket_LocalSocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SlotOfLocalSocketError;

    pub fn ctr_qt_network_ffi_static_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfLocalSocketError;

    pub fn ctr_qt_network_ffi_static_cast_QObject_ptr85(
        ptr: *mut crate::SignalOfLocalSocketError,
    ) -> *mut ::qt_core::QObject;

    pub fn ctr_qt_network_ffi_dynamic_cast_ctr_qt_network_ffi_signal_wrapper_QLocalSocket_LocalSocketError_ptr(
        ptr: *mut ::qt_core::QObject,
    ) -> *mut crate::SignalOfLocalSocketError;

}
