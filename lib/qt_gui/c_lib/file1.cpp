#include "qt_gui_c_global.h"
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_int_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_int_int_int() { }

Q_SIGNALS:
    void emit_(int arg0, int arg1, int arg2);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode() { }

Q_SIGNALS:
    void emit_(QClipboard::Mode arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref() { }

Q_SIGNALS:
    void emit_(QPalette const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState() { }

Q_SIGNALS:
    void emit_(QMovie::MovieState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref() { }

Q_SIGNALS:
    void emit_(QTextCursor const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility() { }

Q_SIGNALS:
    void emit_(QWindow::Visibility arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr() { }

Q_SIGNALS:
    void emit_(QStandardItem * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState() { }

Q_SIGNALS:
    void emit_(Qt::WindowState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection() { }

Q_SIGNALS:
    void emit_(Qt::LayoutDirection arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref() { }

Q_SIGNALS:
    void emit_(QOpenGLDebugMessage const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref() { }

Q_SIGNALS:
    void emit_(QUrl const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref() { }

Q_SIGNALS:
    void emit_(QTextBlock const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior() { }

Q_SIGNALS:
    void emit_(Qt::TabFocusBehavior arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref() { }

Q_SIGNALS:
    void emit_(QRegExp const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError() { }

Q_SIGNALS:
    void emit_(QImageReader::ImageReaderError arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref() { }

Q_SIGNALS:
    void emit_(QRect const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction() { }

Q_SIGNALS:
    void emit_(Qt::DropAction arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref() { }

Q_SIGNALS:
    void emit_(QSessionManager & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality() { }

Q_SIGNALS:
    void emit_(Qt::WindowModality arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref() { }

Q_SIGNALS:
    void emit_(QRectF const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref() { }

Q_SIGNALS:
    void emit_(QSize const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref() { }

Q_SIGNALS:
    void emit_(QSizeF const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation() { }

Q_SIGNALS:
    void emit_(QDoubleValidator::Notation arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr() { }

Q_SIGNALS:
    void emit_(QScreen * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref() { }

Q_SIGNALS:
    void emit_(QRegularExpression const & arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation() { }

Q_SIGNALS:
    void emit_(Qt::ScreenOrientation arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr() { }

Q_SIGNALS:
    void emit_(QWindow * arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_signal_wrapper.h".
class ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState() { }

Q_SIGNALS:
    void emit_(Qt::ApplicationState arg0);
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref(QObject* parent, void (*callback)(void *, QPalette const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QPalette const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QPalette const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QPalette const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref(QObject* parent, void (*callback)(void *, QTextCursor const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QTextCursor const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QTextCursor const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QTextCursor const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation(QObject* parent, void (*callback)(void *, QDoubleValidator::Notation), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QDoubleValidator::Notation), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QDoubleValidator::Notation arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QDoubleValidator::Notation)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode(QObject* parent, void (*callback)(void *, QClipboard::Mode), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QClipboard::Mode), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QClipboard::Mode arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QClipboard::Mode)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref(QObject* parent, void (*callback)(void *, QSessionManager *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSessionManager *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSessionManager & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSessionManager *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr(QObject* parent, void (*callback)(void *, QStandardItem *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QStandardItem *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QStandardItem * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QStandardItem *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState(QObject* parent, void (*callback)(void *, Qt::WindowState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::WindowState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::WindowState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::WindowState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref(QObject* parent, void (*callback)(void *, QSize const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSize const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSize const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSize const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior(QObject* parent, void (*callback)(void *, Qt::TabFocusBehavior), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::TabFocusBehavior), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::TabFocusBehavior arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::TabFocusBehavior)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality(QObject* parent, void (*callback)(void *, Qt::WindowModality), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::WindowModality), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::WindowModality arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::WindowModality)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref(QObject* parent, void (*callback)(void *, QSizeF const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QSizeF const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QSizeF const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QSizeF const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError(QObject* parent, void (*callback)(void *, QImageReader::ImageReaderError), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QImageReader::ImageReaderError), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QImageReader::ImageReaderError arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QImageReader::ImageReaderError)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref(QObject* parent, void (*callback)(void *, QRegularExpression const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QRegularExpression const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QRegularExpression const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QRegularExpression const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref(QObject* parent, void (*callback)(void *, QUrl const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QUrl const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QUrl const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QUrl const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction(QObject* parent, void (*callback)(void *, Qt::DropAction), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::DropAction), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::DropAction arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::DropAction)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState(QObject* parent, void (*callback)(void *, Qt::ApplicationState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::ApplicationState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::ApplicationState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::ApplicationState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr(QObject* parent, void (*callback)(void *, QScreen *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QScreen *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QScreen * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QScreen *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref(QObject* parent, void (*callback)(void *, QTextBlock const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QTextBlock const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QTextBlock const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QTextBlock const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState(QObject* parent, void (*callback)(void *, QMovie::MovieState), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QMovie::MovieState), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QMovie::MovieState arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QMovie::MovieState)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref(QObject* parent, void (*callback)(void *, QRegExp const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QRegExp const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QRegExp const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QRegExp const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_int_int_int : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_int_int_int(QObject* parent, void (*callback)(void *, int, int, int), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, int, int, int), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(int arg0, int arg1, int arg2) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0, arg1, arg2);
        }
    }

private:
    ritual::Callback<void (*)(void *, int, int, int)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref(QObject* parent, void (*callback)(void *, QRect const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QRect const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QRect const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QRect const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr(QObject* parent, void (*callback)(void *, QWindow *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QWindow *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QWindow * arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QWindow *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection(QObject* parent, void (*callback)(void *, Qt::LayoutDirection), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::LayoutDirection), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::LayoutDirection arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::LayoutDirection)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref(QObject* parent, void (*callback)(void *, QRectF const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QRectF const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QRectF const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QRectF const *)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility(QObject* parent, void (*callback)(void *, QWindow::Visibility), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QWindow::Visibility), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QWindow::Visibility arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QWindow::Visibility)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation(QObject* parent, void (*callback)(void *, Qt::ScreenOrientation), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, Qt::ScreenOrientation), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(Qt::ScreenOrientation arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, Qt::ScreenOrientation)> m_callback;
};
// Class generated by ritual.
// See the template at "ritual/templates/c_lib/qt_slot_wrapper.h".
class ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref : public QObject {
    Q_OBJECT
public:
    ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref(QObject* parent, void (*callback)(void *, QOpenGLDebugMessage const *), void (*deleter)(void*), void* data)
    : QObject(parent)
    {
        set(callback, deleter, data);
    }

    void set(void (*callback)(void *, QOpenGLDebugMessage const *), void (*deleter)(void*), void* data) {
        m_callback.set(callback, deleter, data);
    }

public Q_SLOTS:
    void slot_(QOpenGLDebugMessage const & arg0) {
        auto callback = m_callback.get();
        if (callback) {
            callback(m_callback.data(), &arg0);
        }
    }

private:
    ritual::Callback<void (*)(void *, QOpenGLDebugMessage const *)> m_callback;
};
extern "C" {
RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QKeySequence_staticMetaObject() {
  return &QKeySequence::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTouchDevice_staticMetaObject() {
  return &QTouchDevice::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTabletEvent_staticMetaObject() {
  return &QTabletEvent::staticMetaObject;
}


RITUAL_EXPORT QInputMethodEvent::AttributeType ctr_qt_gui_ffi_QInputMethodEvent_Attribute_type(QInputMethodEvent::Attribute const * this_ptr) {
  return this_ptr->type;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QInputMethodEvent_Attribute_type(QInputMethodEvent::Attribute * this_ptr, QInputMethodEvent::AttributeType value) {
  this_ptr->type = value;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethodEvent_Attribute_start(QInputMethodEvent::Attribute const * this_ptr) {
  return this_ptr->start;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QInputMethodEvent_Attribute_start(QInputMethodEvent::Attribute * this_ptr, int value) {
  this_ptr->start = value;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethodEvent_Attribute_length(QInputMethodEvent::Attribute const * this_ptr) {
  return this_ptr->length;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QInputMethodEvent_Attribute_length(QInputMethodEvent::Attribute * this_ptr, int value) {
  this_ptr->length = value;
}


RITUAL_EXPORT QVariant const * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_value(QInputMethodEvent::Attribute const * this_ptr) {
  return &this_ptr->value;
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_value_mut(QInputMethodEvent::Attribute * this_ptr) {
  return &this_ptr->value;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QInputMethodEvent_Attribute_value(QInputMethodEvent::Attribute * this_ptr, QVariant const * value) {
  this_ptr->value = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPointingDeviceUniqueId_staticMetaObject() {
  return &QPointingDeviceUniqueId::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QFont_staticMetaObject() {
  return &QFont::staticMetaObject;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_Element_x(QPainterPath::Element const * this_ptr) {
  return this_ptr->x;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainterPath_Element_x(QPainterPath::Element * this_ptr, double value) {
  this_ptr->x = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_Element_y(QPainterPath::Element const * this_ptr) {
  return this_ptr->y;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainterPath_Element_y(QPainterPath::Element * this_ptr, double value) {
  this_ptr->y = value;
}


RITUAL_EXPORT QPainterPath::ElementType ctr_qt_gui_ffi_QPainterPath_Element_type(QPainterPath::Element const * this_ptr) {
  return this_ptr->type;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainterPath_Element_type(QPainterPath::Element * this_ptr, QPainterPath::ElementType value) {
  this_ptr->type = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QGradient_staticMetaObject() {
  return &QGradient::staticMetaObject;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextOption_Tab_position(QTextOption::Tab const * this_ptr) {
  return this_ptr->position;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextOption_Tab_position(QTextOption::Tab * this_ptr, double value) {
  this_ptr->position = value;
}


RITUAL_EXPORT QTextOption::TabType ctr_qt_gui_ffi_QTextOption_Tab_type(QTextOption::Tab const * this_ptr) {
  return this_ptr->type;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextOption_Tab_type(QTextOption::Tab * this_ptr, QTextOption::TabType value) {
  this_ptr->type = value;
}


RITUAL_EXPORT QChar const * ctr_qt_gui_ffi_QTextOption_Tab_delimiter(QTextOption::Tab const * this_ptr) {
  return &this_ptr->delimiter;
}


RITUAL_EXPORT QChar * ctr_qt_gui_ffi_QTextOption_Tab_delimiter_mut(QTextOption::Tab * this_ptr) {
  return &this_ptr->delimiter;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextOption_Tab_delimiter(QTextOption::Tab * this_ptr, QChar const * value) {
  this_ptr->delimiter = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextFormat_staticMetaObject() {
  return &QTextFormat::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QFontDatabase_staticMetaObject() {
  return &QFontDatabase::staticMetaObject;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_FormatRange_start(QTextLayout::FormatRange const * this_ptr) {
  return this_ptr->start;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextLayout_FormatRange_start(QTextLayout::FormatRange * this_ptr, int value) {
  this_ptr->start = value;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_FormatRange_length(QTextLayout::FormatRange const * this_ptr) {
  return this_ptr->length;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextLayout_FormatRange_length(QTextLayout::FormatRange * this_ptr, int value) {
  this_ptr->length = value;
}


RITUAL_EXPORT QTextCharFormat const * ctr_qt_gui_ffi_QTextLayout_FormatRange_format(QTextLayout::FormatRange const * this_ptr) {
  return &this_ptr->format;
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextLayout_FormatRange_format_mut(QTextLayout::FormatRange * this_ptr) {
  return &this_ptr->format;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QTextLayout_FormatRange_format(QTextLayout::FormatRange * this_ptr, QTextCharFormat const * value) {
  this_ptr->format = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextDocument_staticMetaObject() {
  return &QTextDocument::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPalette_staticMetaObject() {
  return &QPalette::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_staticMetaObject() {
  return &QAbstractTextDocumentLayout::staticMetaObject;
}


RITUAL_EXPORT QTextCursor const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_cursor(QAbstractTextDocumentLayout::Selection const * this_ptr) {
  return &this_ptr->cursor;
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_cursor_mut(QAbstractTextDocumentLayout::Selection * this_ptr) {
  return &this_ptr->cursor;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_Selection_cursor(QAbstractTextDocumentLayout::Selection * this_ptr, QTextCursor const * value) {
  this_ptr->cursor = *value;
}


RITUAL_EXPORT QTextCharFormat const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_format(QAbstractTextDocumentLayout::Selection const * this_ptr) {
  return &this_ptr->format;
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_format_mut(QAbstractTextDocumentLayout::Selection * this_ptr) {
  return &this_ptr->format;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_Selection_format(QAbstractTextDocumentLayout::Selection * this_ptr, QTextCharFormat const * value) {
  this_ptr->format = *value;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_cursorPosition(QAbstractTextDocumentLayout::PaintContext const * this_ptr) {
  return this_ptr->cursorPosition;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_PaintContext_cursorPosition(QAbstractTextDocumentLayout::PaintContext * this_ptr, int value) {
  this_ptr->cursorPosition = value;
}


RITUAL_EXPORT QPalette const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_palette(QAbstractTextDocumentLayout::PaintContext const * this_ptr) {
  return &this_ptr->palette;
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_palette_mut(QAbstractTextDocumentLayout::PaintContext * this_ptr) {
  return &this_ptr->palette;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_PaintContext_palette(QAbstractTextDocumentLayout::PaintContext * this_ptr, QPalette const * value) {
  this_ptr->palette = *value;
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_clip(QAbstractTextDocumentLayout::PaintContext const * this_ptr) {
  return &this_ptr->clip;
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_clip_mut(QAbstractTextDocumentLayout::PaintContext * this_ptr) {
  return &this_ptr->clip;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_PaintContext_clip(QAbstractTextDocumentLayout::PaintContext * this_ptr, QRectF const * value) {
  this_ptr->clip = *value;
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_selections(QAbstractTextDocumentLayout::PaintContext const * this_ptr) {
  return &this_ptr->selections;
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_selections_mut(QAbstractTextDocumentLayout::PaintContext * this_ptr) {
  return &this_ptr->selections;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAbstractTextDocumentLayout_PaintContext_selections(QAbstractTextDocumentLayout::PaintContext * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * value) {
  this_ptr->selections = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QAccessible_staticMetaObject() {
  return &QAccessible::staticMetaObject;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_disabled(QAccessible::State const * this_ptr) {
  return this_ptr->disabled;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_disabled(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->disabled = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_selected(QAccessible::State const * this_ptr) {
  return this_ptr->selected;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_selected(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->selected = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_focusable(QAccessible::State const * this_ptr) {
  return this_ptr->focusable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_focusable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->focusable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_focused(QAccessible::State const * this_ptr) {
  return this_ptr->focused;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_focused(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->focused = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_pressed(QAccessible::State const * this_ptr) {
  return this_ptr->pressed;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_pressed(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->pressed = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_checkable(QAccessible::State const * this_ptr) {
  return this_ptr->checkable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_checkable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->checkable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_checked(QAccessible::State const * this_ptr) {
  return this_ptr->checked;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_checked(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->checked = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_checkStateMixed(QAccessible::State const * this_ptr) {
  return this_ptr->checkStateMixed;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_checkStateMixed(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->checkStateMixed = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_readOnly(QAccessible::State const * this_ptr) {
  return this_ptr->readOnly;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_readOnly(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->readOnly = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_hotTracked(QAccessible::State const * this_ptr) {
  return this_ptr->hotTracked;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_hotTracked(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->hotTracked = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_defaultButton(QAccessible::State const * this_ptr) {
  return this_ptr->defaultButton;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_defaultButton(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->defaultButton = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_expanded(QAccessible::State const * this_ptr) {
  return this_ptr->expanded;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_expanded(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->expanded = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_collapsed(QAccessible::State const * this_ptr) {
  return this_ptr->collapsed;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_collapsed(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->collapsed = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_busy(QAccessible::State const * this_ptr) {
  return this_ptr->busy;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_busy(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->busy = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_expandable(QAccessible::State const * this_ptr) {
  return this_ptr->expandable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_expandable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->expandable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_marqueed(QAccessible::State const * this_ptr) {
  return this_ptr->marqueed;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_marqueed(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->marqueed = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_animated(QAccessible::State const * this_ptr) {
  return this_ptr->animated;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_animated(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->animated = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_invisible(QAccessible::State const * this_ptr) {
  return this_ptr->invisible;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_invisible(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->invisible = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_offscreen(QAccessible::State const * this_ptr) {
  return this_ptr->offscreen;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_offscreen(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->offscreen = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_sizeable(QAccessible::State const * this_ptr) {
  return this_ptr->sizeable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_sizeable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->sizeable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_movable(QAccessible::State const * this_ptr) {
  return this_ptr->movable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_movable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->movable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_selfVoicing(QAccessible::State const * this_ptr) {
  return this_ptr->selfVoicing;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_selfVoicing(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->selfVoicing = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_selectable(QAccessible::State const * this_ptr) {
  return this_ptr->selectable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_selectable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->selectable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_linked(QAccessible::State const * this_ptr) {
  return this_ptr->linked;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_linked(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->linked = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_traversed(QAccessible::State const * this_ptr) {
  return this_ptr->traversed;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_traversed(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->traversed = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_multiSelectable(QAccessible::State const * this_ptr) {
  return this_ptr->multiSelectable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_multiSelectable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->multiSelectable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_extSelectable(QAccessible::State const * this_ptr) {
  return this_ptr->extSelectable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_extSelectable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->extSelectable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_passwordEdit(QAccessible::State const * this_ptr) {
  return this_ptr->passwordEdit;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_passwordEdit(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->passwordEdit = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_hasPopup(QAccessible::State const * this_ptr) {
  return this_ptr->hasPopup;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_hasPopup(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->hasPopup = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_modal(QAccessible::State const * this_ptr) {
  return this_ptr->modal;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_modal(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->modal = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_active(QAccessible::State const * this_ptr) {
  return this_ptr->active;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_active(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->active = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_invalid(QAccessible::State const * this_ptr) {
  return this_ptr->invalid;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_invalid(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->invalid = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_editable(QAccessible::State const * this_ptr) {
  return this_ptr->editable;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_editable(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->editable = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_multiLine(QAccessible::State const * this_ptr) {
  return this_ptr->multiLine;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_multiLine(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->multiLine = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_selectableText(QAccessible::State const * this_ptr) {
  return this_ptr->selectableText;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_selectableText(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->selectableText = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_supportsAutoCompletion(QAccessible::State const * this_ptr) {
  return this_ptr->supportsAutoCompletion;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_supportsAutoCompletion(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->supportsAutoCompletion = value;
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QAccessible_State_searchEdit(QAccessible::State const * this_ptr) {
  return this_ptr->searchEdit;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QAccessible_State_searchEdit(QAccessible::State * this_ptr, quint64 value) {
  this_ptr->searchEdit = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QAccessiblePlugin_staticMetaObject() {
  return &QAccessiblePlugin::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSurfaceFormat_staticMetaObject() {
  return &QSurfaceFormat::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QWindow_staticMetaObject() {
  return &QWindow::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QClipboard_staticMetaObject() {
  return &QClipboard::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QDrag_staticMetaObject() {
  return &QDrag::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QGenericPlugin_staticMetaObject() {
  return &QGenericPlugin::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QInputMethod_staticMetaObject() {
  return &QInputMethod::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QGuiApplication_staticMetaObject() {
  return &QGuiApplication::staticMetaObject;
}


RITUAL_EXPORT QIcon::Mode ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_mode(QIconEngine::AvailableSizesArgument const * this_ptr) {
  return this_ptr->mode;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_AvailableSizesArgument_mode(QIconEngine::AvailableSizesArgument * this_ptr, QIcon::Mode value) {
  this_ptr->mode = value;
}


RITUAL_EXPORT QIcon::State ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_state(QIconEngine::AvailableSizesArgument const * this_ptr) {
  return this_ptr->state;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_AvailableSizesArgument_state(QIconEngine::AvailableSizesArgument * this_ptr, QIcon::State value) {
  this_ptr->state = value;
}


RITUAL_EXPORT QList< QSize > const * ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_sizes(QIconEngine::AvailableSizesArgument const * this_ptr) {
  return &this_ptr->sizes;
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_sizes_mut(QIconEngine::AvailableSizesArgument * this_ptr) {
  return &this_ptr->sizes;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_AvailableSizesArgument_sizes(QIconEngine::AvailableSizesArgument * this_ptr, QList< QSize > const * value) {
  this_ptr->sizes = *value;
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_size(QIconEngine::ScaledPixmapArgument const * this_ptr) {
  return &this_ptr->size;
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_size_mut(QIconEngine::ScaledPixmapArgument * this_ptr) {
  return &this_ptr->size;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_ScaledPixmapArgument_size(QIconEngine::ScaledPixmapArgument * this_ptr, QSize const * value) {
  this_ptr->size = *value;
}


RITUAL_EXPORT QIcon::Mode ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_mode(QIconEngine::ScaledPixmapArgument const * this_ptr) {
  return this_ptr->mode;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_ScaledPixmapArgument_mode(QIconEngine::ScaledPixmapArgument * this_ptr, QIcon::Mode value) {
  this_ptr->mode = value;
}


RITUAL_EXPORT QIcon::State ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_state(QIconEngine::ScaledPixmapArgument const * this_ptr) {
  return this_ptr->state;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_ScaledPixmapArgument_state(QIconEngine::ScaledPixmapArgument * this_ptr, QIcon::State value) {
  this_ptr->state = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_scale(QIconEngine::ScaledPixmapArgument const * this_ptr) {
  return this_ptr->scale;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_ScaledPixmapArgument_scale(QIconEngine::ScaledPixmapArgument * this_ptr, double value) {
  this_ptr->scale = value;
}


RITUAL_EXPORT QPixmap const * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_pixmap(QIconEngine::ScaledPixmapArgument const * this_ptr) {
  return &this_ptr->pixmap;
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_pixmap_mut(QIconEngine::ScaledPixmapArgument * this_ptr) {
  return &this_ptr->pixmap;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QIconEngine_ScaledPixmapArgument_pixmap(QIconEngine::ScaledPixmapArgument * this_ptr, QPixmap const * value) {
  this_ptr->pixmap = *value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QIconEnginePlugin_staticMetaObject() {
  return &QIconEnginePlugin::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QImageIOPlugin_staticMetaObject() {
  return &QImageIOPlugin::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QMovie_staticMetaObject() {
  return &QMovie::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOffscreenSurface_staticMetaObject() {
  return &QOffscreenSurface::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLContextGroup_staticMetaObject() {
  return &QOpenGLContextGroup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLContext_staticMetaObject() {
  return &QOpenGLContext::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLDebugLogger_staticMetaObject() {
  return &QOpenGLDebugLogger::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLShader_staticMetaObject() {
  return &QOpenGLShader::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLShaderProgram_staticMetaObject() {
  return &QOpenGLShaderProgram::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLTexture_staticMetaObject() {
  return &QOpenGLTexture::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLTimerQuery_staticMetaObject() {
  return &QOpenGLTimerQuery::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLTimeMonitor_staticMetaObject() {
  return &QOpenGLTimeMonitor::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_staticMetaObject() {
  return &QOpenGLVertexArrayObject::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPaintDeviceWindow_staticMetaObject() {
  return &QPaintDeviceWindow::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLWindow_staticMetaObject() {
  return &QOpenGLWindow::staticMetaObject;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPagedPaintDevice_Margins_left(QPagedPaintDevice::Margins const * this_ptr) {
  return this_ptr->left;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPagedPaintDevice_Margins_left(QPagedPaintDevice::Margins * this_ptr, double value) {
  this_ptr->left = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPagedPaintDevice_Margins_right(QPagedPaintDevice::Margins const * this_ptr) {
  return this_ptr->right;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPagedPaintDevice_Margins_right(QPagedPaintDevice::Margins * this_ptr, double value) {
  this_ptr->right = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPagedPaintDevice_Margins_top(QPagedPaintDevice::Margins const * this_ptr) {
  return this_ptr->top;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPagedPaintDevice_Margins_top(QPagedPaintDevice::Margins * this_ptr, double value) {
  this_ptr->top = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPagedPaintDevice_Margins_bottom(QPagedPaintDevice::Margins const * this_ptr) {
  return this_ptr->bottom;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPagedPaintDevice_Margins_bottom(QPagedPaintDevice::Margins * this_ptr, double value) {
  this_ptr->bottom = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPainter_staticMetaObject() {
  return &QPainter::staticMetaObject;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_x(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->x;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_x(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->x = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_y(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->y;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_y(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->y = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_sourceLeft(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->sourceLeft;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_sourceLeft(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->sourceLeft = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_sourceTop(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->sourceTop;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_sourceTop(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->sourceTop = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_width(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->width;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_width(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->width = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_height(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->height;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_height(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->height = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_scaleX(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->scaleX;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_scaleX(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->scaleX = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_scaleY(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->scaleY;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_scaleY(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->scaleY = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_rotation(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->rotation;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_rotation(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->rotation = value;
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_PixmapFragment_opacity(QPainter::PixmapFragment const * this_ptr) {
  return this_ptr->opacity;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_set_QPainter_PixmapFragment_opacity(QPainter::PixmapFragment * this_ptr, double value) {
  this_ptr->opacity = value;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPdfWriter_staticMetaObject() {
  return &QPdfWriter::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPictureFormatPlugin_staticMetaObject() {
  return &QPictureFormatPlugin::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRasterWindow_staticMetaObject() {
  return &QRasterWindow::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QScreen_staticMetaObject() {
  return &QScreen::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSessionManager_staticMetaObject() {
  return &QSessionManager::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QStandardItemModel_staticMetaObject() {
  return &QStandardItemModel::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QStyleHints_staticMetaObject() {
  return &QStyleHints::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextObject_staticMetaObject() {
  return &QTextObject::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextBlockGroup_staticMetaObject() {
  return &QTextBlockGroup::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextFrame_staticMetaObject() {
  return &QTextFrame::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSyntaxHighlighter_staticMetaObject() {
  return &QSyntaxHighlighter::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextList_staticMetaObject() {
  return &QTextList::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextTable_staticMetaObject() {
  return &QTextTable::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QValidator_staticMetaObject() {
  return &QValidator::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QIntValidator_staticMetaObject() {
  return &QIntValidator::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QDoubleValidator_staticMetaObject() {
  return &QDoubleValidator::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRegExpValidator_staticMetaObject() {
  return &QRegExpValidator::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRegularExpressionValidator_staticMetaObject() {
  return &QRegularExpressionValidator::staticMetaObject;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qRed(unsigned int rgb) {
  return qRed(rgb);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qGreen(unsigned int rgb) {
  return qGreen(rgb);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qBlue(unsigned int rgb) {
  return qBlue(rgb);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qAlpha(unsigned int rgb) {
  return qAlpha(rgb);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qRgb(int r, int g, int b) {
  return qRgb(r, g, b);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qRgba(int r, int g, int b, int a) {
  return qRgba(r, g, b, a);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qGray(int r, int g, int b) {
  return qGray(r, g, b);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_qGray1(unsigned int rgb) {
  return qGray(rgb);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qIsGray(unsigned int rgb) {
  return qIsGray(rgb);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qPremultiply(unsigned int x) {
  return qPremultiply(x);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qUnpremultiply(unsigned int p) {
  return qUnpremultiply(p);
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_QRgba64() {
  return new QRgba64();
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_fromRgba64(quint64 c) {
  return new QRgba64(QRgba64::fromRgba64(c));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_fromRgba641(quint16 red, quint16 green, quint16 blue, quint16 alpha) {
  return new QRgba64(QRgba64::fromRgba64(red, green, blue, alpha));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_fromRgba(quint8 red, quint8 green, quint8 blue, quint8 alpha) {
  return new QRgba64(QRgba64::fromRgba(red, green, blue, alpha));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_fromArgb32(unsigned int rgb) {
  return new QRgba64(QRgba64::fromArgb32(rgb));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRgba64_isOpaque(QRgba64 const * this_ptr) {
  return this_ptr->isOpaque();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRgba64_isTransparent(QRgba64 const * this_ptr) {
  return this_ptr->isTransparent();
}


RITUAL_EXPORT quint16 ctr_qt_gui_ffi_QRgba64_red(QRgba64 const * this_ptr) {
  return this_ptr->red();
}


RITUAL_EXPORT quint16 ctr_qt_gui_ffi_QRgba64_green(QRgba64 const * this_ptr) {
  return this_ptr->green();
}


RITUAL_EXPORT quint16 ctr_qt_gui_ffi_QRgba64_blue(QRgba64 const * this_ptr) {
  return this_ptr->blue();
}


RITUAL_EXPORT quint16 ctr_qt_gui_ffi_QRgba64_alpha(QRgba64 const * this_ptr) {
  return this_ptr->alpha();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRgba64_setRed(QRgba64 * this_ptr, quint16 _red) {
  this_ptr->setRed(_red);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRgba64_setGreen(QRgba64 * this_ptr, quint16 _green) {
  this_ptr->setGreen(_green);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRgba64_setBlue(QRgba64 * this_ptr, quint16 _blue) {
  this_ptr->setBlue(_blue);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRgba64_setAlpha(QRgba64 * this_ptr, quint16 _alpha) {
  this_ptr->setAlpha(_alpha);
}


RITUAL_EXPORT quint8 ctr_qt_gui_ffi_QRgba64_red8(QRgba64 const * this_ptr) {
  return this_ptr->red8();
}


RITUAL_EXPORT quint8 ctr_qt_gui_ffi_QRgba64_green8(QRgba64 const * this_ptr) {
  return this_ptr->green8();
}


RITUAL_EXPORT quint8 ctr_qt_gui_ffi_QRgba64_blue8(QRgba64 const * this_ptr) {
  return this_ptr->blue8();
}


RITUAL_EXPORT quint8 ctr_qt_gui_ffi_QRgba64_alpha8(QRgba64 const * this_ptr) {
  return this_ptr->alpha8();
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QRgba64_toArgb32(QRgba64 const * this_ptr) {
  return this_ptr->toArgb32();
}


RITUAL_EXPORT unsigned short ctr_qt_gui_ffi_QRgba64_toRgb16(QRgba64 const * this_ptr) {
  return this_ptr->toRgb16();
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_premultiplied(QRgba64 const * this_ptr) {
  return new QRgba64(this_ptr->premultiplied());
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_unpremultiplied(QRgba64 const * this_ptr) {
  return new QRgba64(this_ptr->unpremultiplied());
}


RITUAL_EXPORT quint64 ctr_qt_gui_ffi_QRgba64_operator_quint64(QRgba64 const * this_ptr) {
  return this_ptr->operator quint64();
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_operator_(QRgba64 * this_ptr, quint64 _rgba) {
  return new QRgba64(this_ptr->operator=(_rgba));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_qRgba64(quint16 r, quint16 g, quint16 b, quint16 a) {
  return new QRgba64(qRgba64(r, g, b, a));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_qRgba641(quint64 c) {
  return new QRgba64(qRgba64(c));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_qPremultiply1(QRgba64 const * c) {
  return new QRgba64(qPremultiply(*c));
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_qUnpremultiply1(QRgba64 const * c) {
  return new QRgba64(qUnpremultiply(*c));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qRed1(QRgba64 const * rgb) {
  return qRed(*rgb);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qGreen1(QRgba64 const * rgb) {
  return qGreen(*rgb);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qBlue1(QRgba64 const * rgb) {
  return qBlue(*rgb);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qAlpha1(QRgba64 const * rgb) {
  return qAlpha(*rgb);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__(QDebug const * arg1, QColor const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__1(QDataStream * arg1, QColor const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__2(QDataStream * arg1, QColor * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor() {
  return new QColor();
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor1(Qt::GlobalColor color) {
  return new QColor(color);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor2(int r, int g, int b, int a) {
  return new QColor(r, g, b, a);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor3(unsigned int rgb) {
  return new QColor(rgb);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor4(QRgba64 const * rgba64) {
  return new QColor(*rgba64);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor5(QString const * name) {
  return new QColor(*name);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor6(char const * aname) {
  return new QColor(aname);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor7(QLatin1String const * name) {
  return new QColor(*name);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor8(QColor::Spec spec) {
  return new QColor(spec);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor9(QColor const * color) {
  return new QColor(*color);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_operator_1(QColor * this_ptr, QColor const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_operator_2(QColor * this_ptr, Qt::GlobalColor color) {
  return &this_ptr->operator=(color);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QColor_isValid(QColor const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QColor_name(QColor const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QColor_name1(QColor const * this_ptr, QColor::NameFormat format) {
  return new QString(this_ptr->name(format));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setNamedColor(QColor * this_ptr, QString const * name) {
  this_ptr->setNamedColor(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setNamedColor1(QColor * this_ptr, QLatin1String const * name) {
  this_ptr->setNamedColor(*name);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QColor_colorNames() {
  return new QStringList(QColor::colorNames());
}


RITUAL_EXPORT QColor::Spec ctr_qt_gui_ffi_QColor_spec(QColor const * this_ptr) {
  return this_ptr->spec();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_alpha(QColor const * this_ptr) {
  return this_ptr->alpha();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setAlpha(QColor * this_ptr, int alpha) {
  this_ptr->setAlpha(alpha);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_alphaF(QColor const * this_ptr) {
  return this_ptr->alphaF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setAlphaF(QColor * this_ptr, double alpha) {
  this_ptr->setAlphaF(alpha);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_red(QColor const * this_ptr) {
  return this_ptr->red();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_green(QColor const * this_ptr) {
  return this_ptr->green();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_blue(QColor const * this_ptr) {
  return this_ptr->blue();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRed(QColor * this_ptr, int red) {
  this_ptr->setRed(red);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setGreen(QColor * this_ptr, int green) {
  this_ptr->setGreen(green);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setBlue(QColor * this_ptr, int blue) {
  this_ptr->setBlue(blue);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_redF(QColor const * this_ptr) {
  return this_ptr->redF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_greenF(QColor const * this_ptr) {
  return this_ptr->greenF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_blueF(QColor const * this_ptr) {
  return this_ptr->blueF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRedF(QColor * this_ptr, double red) {
  this_ptr->setRedF(red);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setGreenF(QColor * this_ptr, double green) {
  this_ptr->setGreenF(green);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setBlueF(QColor * this_ptr, double blue) {
  this_ptr->setBlueF(blue);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getRgb(QColor const * this_ptr, int * r, int * g, int * b, int * a) {
  this_ptr->getRgb(r, g, b, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgb(QColor * this_ptr, int r, int g, int b, int a) {
  this_ptr->setRgb(r, g, b, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getRgbF(QColor const * this_ptr, double * r, double * g, double * b, double * a) {
  this_ptr->getRgbF(r, g, b, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgbF(QColor * this_ptr, double r, double g, double b, double a) {
  this_ptr->setRgbF(r, g, b, a);
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QColor_rgba64(QColor const * this_ptr) {
  return new QRgba64(this_ptr->rgba64());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgba64(QColor * this_ptr, QRgba64 const * rgba) {
  this_ptr->setRgba64(*rgba);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QColor_rgba(QColor const * this_ptr) {
  return this_ptr->rgba();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgba(QColor * this_ptr, unsigned int rgba) {
  this_ptr->setRgba(rgba);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QColor_rgb(QColor const * this_ptr) {
  return this_ptr->rgb();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgb1(QColor * this_ptr, unsigned int rgb) {
  this_ptr->setRgb(rgb);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_hue(QColor const * this_ptr) {
  return this_ptr->hue();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_saturation(QColor const * this_ptr) {
  return this_ptr->saturation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_hsvHue(QColor const * this_ptr) {
  return this_ptr->hsvHue();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_hsvSaturation(QColor const * this_ptr) {
  return this_ptr->hsvSaturation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_value(QColor const * this_ptr) {
  return this_ptr->value();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_hueF(QColor const * this_ptr) {
  return this_ptr->hueF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_saturationF(QColor const * this_ptr) {
  return this_ptr->saturationF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_hsvHueF(QColor const * this_ptr) {
  return this_ptr->hsvHueF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_hsvSaturationF(QColor const * this_ptr) {
  return this_ptr->hsvSaturationF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_valueF(QColor const * this_ptr) {
  return this_ptr->valueF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsv(QColor const * this_ptr, int * h, int * s, int * v, int * a) {
  this_ptr->getHsv(h, s, v, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsv(QColor * this_ptr, int h, int s, int v, int a) {
  this_ptr->setHsv(h, s, v, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsvF(QColor const * this_ptr, double * h, double * s, double * v, double * a) {
  this_ptr->getHsvF(h, s, v, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsvF(QColor * this_ptr, double h, double s, double v, double a) {
  this_ptr->setHsvF(h, s, v, a);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_cyan(QColor const * this_ptr) {
  return this_ptr->cyan();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_magenta(QColor const * this_ptr) {
  return this_ptr->magenta();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_yellow(QColor const * this_ptr) {
  return this_ptr->yellow();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_black(QColor const * this_ptr) {
  return this_ptr->black();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_cyanF(QColor const * this_ptr) {
  return this_ptr->cyanF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_magentaF(QColor const * this_ptr) {
  return this_ptr->magentaF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_yellowF(QColor const * this_ptr) {
  return this_ptr->yellowF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_blackF(QColor const * this_ptr) {
  return this_ptr->blackF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmyk(QColor * this_ptr, int * c, int * m, int * y, int * k, int * a) {
  this_ptr->getCmyk(c, m, y, k, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setCmyk(QColor * this_ptr, int c, int m, int y, int k, int a) {
  this_ptr->setCmyk(c, m, y, k, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmykF(QColor * this_ptr, double * c, double * m, double * y, double * k, double * a) {
  this_ptr->getCmykF(c, m, y, k, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setCmykF(QColor * this_ptr, double c, double m, double y, double k, double a) {
  this_ptr->setCmykF(c, m, y, k, a);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_hslHue(QColor const * this_ptr) {
  return this_ptr->hslHue();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_hslSaturation(QColor const * this_ptr) {
  return this_ptr->hslSaturation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QColor_lightness(QColor const * this_ptr) {
  return this_ptr->lightness();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_hslHueF(QColor const * this_ptr) {
  return this_ptr->hslHueF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_hslSaturationF(QColor const * this_ptr) {
  return this_ptr->hslSaturationF();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QColor_lightnessF(QColor const * this_ptr) {
  return this_ptr->lightnessF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsl(QColor const * this_ptr, int * h, int * s, int * l, int * a) {
  this_ptr->getHsl(h, s, l, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsl(QColor * this_ptr, int h, int s, int l, int a) {
  this_ptr->setHsl(h, s, l, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHslF(QColor const * this_ptr, double * h, double * s, double * l, double * a) {
  this_ptr->getHslF(h, s, l, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHslF(QColor * this_ptr, double h, double s, double l, double a) {
  this_ptr->setHslF(h, s, l, a);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_toRgb(QColor const * this_ptr) {
  return new QColor(this_ptr->toRgb());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_toHsv(QColor const * this_ptr) {
  return new QColor(this_ptr->toHsv());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_toCmyk(QColor const * this_ptr) {
  return new QColor(this_ptr->toCmyk());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_toHsl(QColor const * this_ptr) {
  return new QColor(this_ptr->toHsl());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_convertTo(QColor const * this_ptr, QColor::Spec colorSpec) {
  return new QColor(this_ptr->convertTo(colorSpec));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgb(unsigned int rgb) {
  return new QColor(QColor::fromRgb(rgb));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgba(unsigned int rgba) {
  return new QColor(QColor::fromRgba(rgba));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgb1(int r, int g, int b, int a) {
  return new QColor(QColor::fromRgb(r, g, b, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgbF(double r, double g, double b, double a) {
  return new QColor(QColor::fromRgbF(r, g, b, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgba64(unsigned short r, unsigned short g, unsigned short b, unsigned short a) {
  return new QColor(QColor::fromRgba64(r, g, b, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgba641(QRgba64 const * rgba) {
  return new QColor(QColor::fromRgba64(*rgba));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsv(int h, int s, int v, int a) {
  return new QColor(QColor::fromHsv(h, s, v, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsvF(double h, double s, double v, double a) {
  return new QColor(QColor::fromHsvF(h, s, v, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromCmyk(int c, int m, int y, int k, int a) {
  return new QColor(QColor::fromCmyk(c, m, y, k, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromCmykF(double c, double m, double y, double k, double a) {
  return new QColor(QColor::fromCmykF(c, m, y, k, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsl(int h, int s, int l, int a) {
  return new QColor(QColor::fromHsl(h, s, l, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHslF(double h, double s, double l, double a) {
  return new QColor(QColor::fromHslF(h, s, l, a));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_light(QColor const * this_ptr, int f) {
  return new QColor(this_ptr->light(f));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_lighter(QColor const * this_ptr, int f) {
  return new QColor(this_ptr->lighter(f));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_dark(QColor const * this_ptr, int f) {
  return new QColor(this_ptr->dark(f));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_darker(QColor const * this_ptr, int f) {
  return new QColor(this_ptr->darker(f));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QColor_operator__(QColor const * this_ptr, QColor const * c) {
  return this_ptr->operator==(*c);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QColor_operator_QVariant(QColor const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QColor_isValidColor(QString const * name) {
  return QColor::isValidColor(*name);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QColor_isValidColor1(QLatin1String const * arg1) {
  return QColor::isValidColor(*arg1);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion() {
  return new QRegion();
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion1(int x, int y, int w, int h, QRegion::RegionType t) {
  return new QRegion(x, y, w, h, t);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion2(QRect const * r, QRegion::RegionType t) {
  return new QRegion(*r, t);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion3(QPolygon const * pa, Qt::FillRule fillRule) {
  return new QRegion(*pa, fillRule);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion4(QRegion const * region) {
  return new QRegion(*region);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion6(QBitmap const * bitmap) {
  return new QRegion(*bitmap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegion_dQRegion(QRegion * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_(QRegion * this_ptr, QRegion const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegion_swap(QRegion * this_ptr, QRegion * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_isEmpty(QRegion const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_isNull(QRegion const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QRegion_begin(QRegion const * this_ptr) {
  return this_ptr->begin();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QRegion_cbegin(QRegion const * this_ptr) {
  return this_ptr->cbegin();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QRegion_end(QRegion const * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QRegion_cend(QRegion const * this_ptr) {
  return this_ptr->cend();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_contains(QRegion const * this_ptr, QPoint const * p) {
  return this_ptr->contains(*p);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_contains1(QRegion const * this_ptr, QRect const * r) {
  return this_ptr->contains(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegion_translate(QRegion * this_ptr, int dx, int dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegion_translate1(QRegion * this_ptr, QPoint const * p) {
  this_ptr->translate(*p);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_translated(QRegion const * this_ptr, int dx, int dy) {
  return new QRegion(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_translated1(QRegion const * this_ptr, QPoint const * p) {
  return new QRegion(this_ptr->translated(*p));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_united(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->united(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_united1(QRegion const * this_ptr, QRect const * r) {
  return new QRegion(this_ptr->united(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_intersected(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->intersected(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_intersected1(QRegion const * this_ptr, QRect const * r) {
  return new QRegion(this_ptr->intersected(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_subtracted(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->subtracted(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_xored(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->xored(*r));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_intersects(QRegion const * this_ptr, QRegion const * r) {
  return this_ptr->intersects(*r);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_intersects1(QRegion const * this_ptr, QRect const * r) {
  return this_ptr->intersects(*r);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QRegion_boundingRect(QRegion const * this_ptr) {
  return new QRect(this_ptr->boundingRect());
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QRegion_rects(QRegion const * this_ptr) {
  return new QVector< QRect >(this_ptr->rects());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegion_setRects(QRegion * this_ptr, QRect const * rect, int num) {
  this_ptr->setRects(rect, num);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QRegion_rectCount(QRegion const * this_ptr) {
  return this_ptr->rectCount();
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_2(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->operator|(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_3(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->operator+(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_4(QRegion const * this_ptr, QRect const * r) {
  return new QRegion(this_ptr->operator+(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_5(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->operator&(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_6(QRegion const * this_ptr, QRect const * r) {
  return new QRegion(this_ptr->operator&(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_7(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->operator-(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator_8(QRegion const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->operator^(*r));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__(QRegion * this_ptr, QRegion const * r) {
  return &this_ptr->operator|=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__1(QRegion * this_ptr, QRegion const * r) {
  return &this_ptr->operator+=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__2(QRegion * this_ptr, QRect const * r) {
  return &this_ptr->operator+=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__3(QRegion * this_ptr, QRegion const * r) {
  return &this_ptr->operator&=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__4(QRegion * this_ptr, QRect const * r) {
  return &this_ptr->operator&=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__5(QRegion * this_ptr, QRegion const * r) {
  return &this_ptr->operator-=(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_operator__6(QRegion * this_ptr, QRegion const * r) {
  return &this_ptr->operator^=(*r);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRegion_operator__7(QRegion const * this_ptr, QRegion const * r) {
  return this_ptr->operator==(*r);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QRegion_operator_QVariant(QRegion const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap(QRegion * value1, QRegion * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__3(QDataStream * arg1, QRegion const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__4(QDataStream * arg1, QRegion * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__5(QDebug const * arg1, QRegion const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__6(QDataStream * in, QKeySequence const * ks) {
  return &operator<<(*in, *ks);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__7(QDataStream * out, QKeySequence * ks) {
  return &operator>>(*out, *ks);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash(QKeySequence const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence() {
  return new QKeySequence();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence1(QString const * key, QKeySequence::SequenceFormat format) {
  return new QKeySequence(*key, format);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence2(int k1, int k2, int k3, int k4) {
  return new QKeySequence(k1, k2, k3, k4);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence3(QKeySequence const * ks) {
  return new QKeySequence(*ks);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence4(QKeySequence::StandardKey key) {
  return new QKeySequence(key);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QKeySequence_dQKeySequence(QKeySequence * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QKeySequence_count(QKeySequence const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_isEmpty(QKeySequence const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QKeySequence_toString(QKeySequence const * this_ptr, QKeySequence::SequenceFormat format) {
  return new QString(this_ptr->toString(format));
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_fromString(QString const * str, QKeySequence::SequenceFormat format) {
  return new QKeySequence(QKeySequence::fromString(*str, format));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QKeySequence_listFromString(QString const * str, QKeySequence::SequenceFormat format) {
  return new QList< QKeySequence >(QKeySequence::listFromString(*str, format));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QKeySequence_listToString(QList< QKeySequence > const * list, QKeySequence::SequenceFormat format) {
  return new QString(QKeySequence::listToString(*list, format));
}


RITUAL_EXPORT QKeySequence::SequenceMatch ctr_qt_gui_ffi_QKeySequence_matches(QKeySequence const * this_ptr, QKeySequence const * seq) {
  return this_ptr->matches(*seq);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_mnemonic(QString const * text) {
  return new QKeySequence(QKeySequence::mnemonic(*text));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QKeySequence_keyBindings(QKeySequence::StandardKey key) {
  return new QList< QKeySequence >(QKeySequence::keyBindings(key));
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QKeySequence_operator_QVariant(QKeySequence const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QKeySequence_operator__(QKeySequence const * this_ptr, unsigned int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_operator_(QKeySequence * this_ptr, QKeySequence const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QKeySequence_swap(QKeySequence * this_ptr, QKeySequence * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_operator__1(QKeySequence const * this_ptr, QKeySequence const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_operator_2(QKeySequence const * this_ptr, QKeySequence const * ks) {
  return this_ptr->operator<(*ks);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_operator_3(QKeySequence const * this_ptr, QKeySequence const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_operator__3(QKeySequence const * this_ptr, QKeySequence const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_operator__4(QKeySequence const * this_ptr, QKeySequence const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeySequence_isDetached(QKeySequence const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap1(QKeySequence * value1, QKeySequence * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__8(QDebug const * arg1, QKeySequence const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D() {
  return new QVector2D();
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D2(float xpos, float ypos) {
  return new QVector2D(xpos, ypos);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D3(QPoint const * point) {
  return new QVector2D(*point);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D4(QPointF const * point) {
  return new QVector2D(*point);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D5(QVector3D const * vector) {
  return new QVector2D(*vector);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D6(QVector4D const * vector) {
  return new QVector2D(*vector);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector2D_isNull(QVector2D const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_x(QVector2D const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_y(QVector2D const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector2D_setX(QVector2D * this_ptr, float x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector2D_setY(QVector2D * this_ptr, float y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector2D_operator__(QVector2D * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_operator__1(QVector2D const * this_ptr, int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_length(QVector2D const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_lengthSquared(QVector2D const * this_ptr) {
  return this_ptr->lengthSquared();
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_normalized(QVector2D const * this_ptr) {
  return new QVector2D(this_ptr->normalized());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector2D_normalize(QVector2D * this_ptr) {
  this_ptr->normalize();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_distanceToPoint(QVector2D const * this_ptr, QVector2D const * point) {
  return this_ptr->distanceToPoint(*point);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_distanceToLine(QVector2D const * this_ptr, QVector2D const * point, QVector2D const * direction) {
  return this_ptr->distanceToLine(*point, *direction);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__2(QVector2D * this_ptr, QVector2D const * vector) {
  return &this_ptr->operator+=(*vector);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__3(QVector2D * this_ptr, QVector2D const * vector) {
  return &this_ptr->operator-=(*vector);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__4(QVector2D * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__5(QVector2D * this_ptr, QVector2D const * vector) {
  return &this_ptr->operator*=(*vector);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__6(QVector2D * this_ptr, float divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator__7(QVector2D * this_ptr, QVector2D const * vector) {
  return &this_ptr->operator/=(*vector);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector2D_dotProduct(QVector2D const * v1, QVector2D const * v2) {
  return QVector2D::dotProduct(*v1, *v2);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector2D_toVector3D(QVector2D const * this_ptr) {
  return new QVector3D(this_ptr->toVector3D());
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector2D_toVector4D(QVector2D const * this_ptr) {
  return new QVector4D(this_ptr->toVector4D());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector2D_toPoint(QVector2D const * this_ptr) {
  return new QPoint(this_ptr->toPoint());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QVector2D_toPointF(QVector2D const * this_ptr) {
  return new QPointF(this_ptr->toPointF());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QVector2D_operator_QVariant(QVector2D const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__9(QVector2D const * v1, QVector2D const * v2) {
  return operator==(*v1, *v2);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_(QVector2D const * v1, QVector2D const * v2) {
  return new QVector2D(operator+(*v1, *v2));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_1(QVector2D const * v1, QVector2D const * v2) {
  return new QVector2D(operator-(*v1, *v2));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_2(float factor, QVector2D const * vector) {
  return new QVector2D(operator*(factor, *vector));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_3(QVector2D const * vector, float factor) {
  return new QVector2D(operator*(*vector, factor));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_4(QVector2D const * v1, QVector2D const * v2) {
  return new QVector2D(operator*(*v1, *v2));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_5(QVector2D const * vector) {
  return new QVector2D(operator-(*vector));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_6(QVector2D const * vector, float divisor) {
  return new QVector2D(operator/(*vector, divisor));
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_operator_7(QVector2D const * vector, QVector2D const * divisor) {
  return new QVector2D(operator/(*vector, *divisor));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare(QVector2D const * v1, QVector2D const * v2) {
  return qFuzzyCompare(*v1, *v2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__11(QDebug const * dbg, QVector2D const * vector) {
  return new QDebug(operator<<(*dbg, *vector));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__12(QDataStream * arg1, QVector2D const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__13(QDataStream * arg1, QVector2D * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QTouchDevice * ctr_qt_gui_ffi_QTouchDevice_QTouchDevice() {
  return new QTouchDevice();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchDevice_dQTouchDevice(QTouchDevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QTouchDevice_devices() {
  return new QList< QTouchDevice const * >(QTouchDevice::devices());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTouchDevice_name(QTouchDevice const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QTouchDevice::DeviceType ctr_qt_gui_ffi_QTouchDevice_type(QTouchDevice const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTouchDevice_capabilities(QTouchDevice const * this_ptr) {
  return int(this_ptr->capabilities());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTouchDevice_maximumTouchPoints(QTouchDevice const * this_ptr) {
  return this_ptr->maximumTouchPoints();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchDevice_setName(QTouchDevice * this_ptr, QString const * name) {
  this_ptr->setName(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchDevice_setType(QTouchDevice * this_ptr, QTouchDevice::DeviceType devType) {
  this_ptr->setType(devType);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchDevice_setCapabilities(QTouchDevice * this_ptr, int caps) {
  this_ptr->setCapabilities(QFlags< QTouchDevice::CapabilityFlag >(caps));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchDevice_setMaximumTouchPoints(QTouchDevice * this_ptr, int max) {
  this_ptr->setMaximumTouchPoints(max);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__14(QDebug const * arg1, QTouchDevice const * arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_QInputEvent_QInputEvent(QEvent::Type type, int modifiers) {
  return new QInputEvent(type, QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputEvent_dQInputEvent(QInputEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputEvent_modifiers(QInputEvent const * this_ptr) {
  return int(this_ptr->modifiers());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputEvent_setModifiers(QInputEvent * this_ptr, int amodifiers) {
  this_ptr->setModifiers(QFlags< Qt::KeyboardModifier >(amodifiers));
}


RITUAL_EXPORT unsigned long ctr_qt_gui_ffi_QInputEvent_timestamp(QInputEvent const * this_ptr) {
  return this_ptr->timestamp();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputEvent_setTimestamp(QInputEvent * this_ptr, unsigned long atimestamp) {
  this_ptr->setTimestamp(atimestamp);
}


RITUAL_EXPORT QEnterEvent * ctr_qt_gui_ffi_QEnterEvent_QEnterEvent(QPointF const * localPos, QPointF const * windowPos, QPointF const * screenPos) {
  return new QEnterEvent(*localPos, *windowPos, *screenPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QEnterEvent_dQEnterEvent(QEnterEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QEnterEvent_pos(QEnterEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QEnterEvent_globalPos(QEnterEvent const * this_ptr) {
  return new QPoint(this_ptr->globalPos());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QEnterEvent_x(QEnterEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QEnterEvent_y(QEnterEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QEnterEvent_globalX(QEnterEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QEnterEvent_globalY(QEnterEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QEnterEvent_localPos(QEnterEvent const * this_ptr) {
  return &this_ptr->localPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QEnterEvent_windowPos(QEnterEvent const * this_ptr) {
  return &this_ptr->windowPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QEnterEvent_screenPos(QEnterEvent const * this_ptr) {
  return &this_ptr->screenPos();
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_QMouseEvent(QEvent::Type type, QPointF const * localPos, Qt::MouseButton button, int buttons, int modifiers) {
  return new QMouseEvent(type, *localPos, button, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_QMouseEvent1(QEvent::Type type, QPointF const * localPos, QPointF const * screenPos, Qt::MouseButton button, int buttons, int modifiers) {
  return new QMouseEvent(type, *localPos, *screenPos, button, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_QMouseEvent2(QEvent::Type type, QPointF const * localPos, QPointF const * windowPos, QPointF const * screenPos, Qt::MouseButton button, int buttons, int modifiers) {
  return new QMouseEvent(type, *localPos, *windowPos, *screenPos, button, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_QMouseEvent3(QEvent::Type type, QPointF const * localPos, QPointF const * windowPos, QPointF const * screenPos, Qt::MouseButton button, int buttons, int modifiers, Qt::MouseEventSource source) {
  return new QMouseEvent(type, *localPos, *windowPos, *screenPos, button, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), source);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMouseEvent_dQMouseEvent(QMouseEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QMouseEvent_pos(QMouseEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QMouseEvent_globalPos(QMouseEvent const * this_ptr) {
  return new QPoint(this_ptr->globalPos());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_x(QMouseEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_y(QMouseEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_globalX(QMouseEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_globalY(QMouseEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QMouseEvent_localPos(QMouseEvent const * this_ptr) {
  return &this_ptr->localPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QMouseEvent_windowPos(QMouseEvent const * this_ptr) {
  return &this_ptr->windowPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QMouseEvent_screenPos(QMouseEvent const * this_ptr) {
  return &this_ptr->screenPos();
}


RITUAL_EXPORT Qt::MouseButton ctr_qt_gui_ffi_QMouseEvent_button(QMouseEvent const * this_ptr) {
  return this_ptr->button();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_buttons(QMouseEvent const * this_ptr) {
  return int(this_ptr->buttons());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMouseEvent_setLocalPos(QMouseEvent * this_ptr, QPointF const * localPosition) {
  this_ptr->setLocalPos(*localPosition);
}


RITUAL_EXPORT Qt::MouseEventSource ctr_qt_gui_ffi_QMouseEvent_source(QMouseEvent const * this_ptr) {
  return this_ptr->source();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMouseEvent_flags(QMouseEvent const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_QHoverEvent_QHoverEvent(QEvent::Type type, QPointF const * pos, QPointF const * oldPos, int modifiers) {
  return new QHoverEvent(type, *pos, *oldPos, QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QHoverEvent_dQHoverEvent(QHoverEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QHoverEvent_pos(QHoverEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QHoverEvent_oldPos(QHoverEvent const * this_ptr) {
  return new QPoint(this_ptr->oldPos());
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QHoverEvent_posF(QHoverEvent const * this_ptr) {
  return &this_ptr->posF();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QHoverEvent_oldPosF(QHoverEvent const * this_ptr) {
  return &this_ptr->oldPosF();
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent(QPointF const * pos, int delta, int buttons, int modifiers, Qt::Orientation orient) {
  return new QWheelEvent(*pos, delta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), orient);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent1(QPointF const * pos, QPointF const * globalPos, int delta, int buttons, int modifiers, Qt::Orientation orient) {
  return new QWheelEvent(*pos, *globalPos, delta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), orient);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent2(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, int buttons, int modifiers) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, qt4Delta, qt4Orientation, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent3(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, int buttons, int modifiers, Qt::ScrollPhase phase) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, qt4Delta, qt4Orientation, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), phase);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent4(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, int buttons, int modifiers, Qt::ScrollPhase phase, Qt::MouseEventSource source) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, qt4Delta, qt4Orientation, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), phase, source);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent5(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, int buttons, int modifiers, Qt::ScrollPhase phase, Qt::MouseEventSource source, bool inverted) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, qt4Delta, qt4Orientation, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), phase, source, inverted);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWheelEvent_dQWheelEvent(QWheelEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWheelEvent_pixelDelta(QWheelEvent const * this_ptr) {
  return new QPoint(this_ptr->pixelDelta());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWheelEvent_angleDelta(QWheelEvent const * this_ptr) {
  return new QPoint(this_ptr->angleDelta());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_delta(QWheelEvent const * this_ptr) {
  return this_ptr->delta();
}


RITUAL_EXPORT Qt::Orientation ctr_qt_gui_ffi_QWheelEvent_orientation(QWheelEvent const * this_ptr) {
  return this_ptr->orientation();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWheelEvent_pos(QWheelEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWheelEvent_globalPos(QWheelEvent const * this_ptr) {
  return new QPoint(this_ptr->globalPos());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_x(QWheelEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_y(QWheelEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_globalX(QWheelEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_globalY(QWheelEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QWheelEvent_posF(QWheelEvent const * this_ptr) {
  return &this_ptr->posF();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QWheelEvent_globalPosF(QWheelEvent const * this_ptr) {
  return &this_ptr->globalPosF();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWheelEvent_buttons(QWheelEvent const * this_ptr) {
  return int(this_ptr->buttons());
}


RITUAL_EXPORT Qt::ScrollPhase ctr_qt_gui_ffi_QWheelEvent_phase(QWheelEvent const * this_ptr) {
  return this_ptr->phase();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWheelEvent_inverted(QWheelEvent const * this_ptr) {
  return this_ptr->inverted();
}


RITUAL_EXPORT Qt::MouseEventSource ctr_qt_gui_ffi_QWheelEvent_source(QWheelEvent const * this_ptr) {
  return this_ptr->source();
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_QTabletEvent_QTabletEvent(QEvent::Type t, QPointF const * pos, QPointF const * globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, int keyState, qint64 uniqueID) {
  return new QTabletEvent(t, *pos, *globalPos, device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, QFlags< Qt::KeyboardModifier >(keyState), uniqueID);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_QTabletEvent_QTabletEvent1(QEvent::Type t, QPointF const * pos, QPointF const * globalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, int keyState, qint64 uniqueID, Qt::MouseButton button, int buttons) {
  return new QTabletEvent(t, *pos, *globalPos, device, pointerType, pressure, xTilt, yTilt, tangentialPressure, rotation, z, QFlags< Qt::KeyboardModifier >(keyState), uniqueID, button, QFlags< Qt::MouseButton >(buttons));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTabletEvent_dQTabletEvent(QTabletEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QTabletEvent_pos(QTabletEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QTabletEvent_globalPos(QTabletEvent const * this_ptr) {
  return new QPoint(this_ptr->globalPos());
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QTabletEvent_posF(QTabletEvent const * this_ptr) {
  return &this_ptr->posF();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QTabletEvent_globalPosF(QTabletEvent const * this_ptr) {
  return &this_ptr->globalPosF();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_x(QTabletEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_y(QTabletEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_globalX(QTabletEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_globalY(QTabletEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTabletEvent_hiResGlobalX(QTabletEvent const * this_ptr) {
  return this_ptr->hiResGlobalX();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTabletEvent_hiResGlobalY(QTabletEvent const * this_ptr) {
  return this_ptr->hiResGlobalY();
}


RITUAL_EXPORT QTabletEvent::TabletDevice ctr_qt_gui_ffi_QTabletEvent_device(QTabletEvent const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT QTabletEvent::PointerType ctr_qt_gui_ffi_QTabletEvent_pointerType(QTabletEvent const * this_ptr) {
  return this_ptr->pointerType();
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QTabletEvent_uniqueId(QTabletEvent const * this_ptr) {
  return this_ptr->uniqueId();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTabletEvent_pressure(QTabletEvent const * this_ptr) {
  return this_ptr->pressure();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_z(QTabletEvent const * this_ptr) {
  return this_ptr->z();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTabletEvent_tangentialPressure(QTabletEvent const * this_ptr) {
  return this_ptr->tangentialPressure();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTabletEvent_rotation(QTabletEvent const * this_ptr) {
  return this_ptr->rotation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_xTilt(QTabletEvent const * this_ptr) {
  return this_ptr->xTilt();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_yTilt(QTabletEvent const * this_ptr) {
  return this_ptr->yTilt();
}


RITUAL_EXPORT Qt::MouseButton ctr_qt_gui_ffi_QTabletEvent_button(QTabletEvent const * this_ptr) {
  return this_ptr->button();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTabletEvent_buttons(QTabletEvent const * this_ptr) {
  return int(this_ptr->buttons());
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_QNativeGestureEvent_QNativeGestureEvent(Qt::NativeGestureType type, QPointF const * localPos, QPointF const * windowPos, QPointF const * screenPos, double value, unsigned long sequenceId, quint64 intArgument) {
  return new QNativeGestureEvent(type, *localPos, *windowPos, *screenPos, value, sequenceId, intArgument);
}


RITUAL_EXPORT Qt::NativeGestureType ctr_qt_gui_ffi_QNativeGestureEvent_gestureType(QNativeGestureEvent const * this_ptr) {
  return this_ptr->gestureType();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QNativeGestureEvent_value(QNativeGestureEvent const * this_ptr) {
  return this_ptr->value();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QNativeGestureEvent_pos(QNativeGestureEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QNativeGestureEvent_globalPos(QNativeGestureEvent const * this_ptr) {
  return new QPoint(this_ptr->globalPos());
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QNativeGestureEvent_localPos(QNativeGestureEvent const * this_ptr) {
  return &this_ptr->localPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QNativeGestureEvent_windowPos(QNativeGestureEvent const * this_ptr) {
  return &this_ptr->windowPos();
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QNativeGestureEvent_screenPos(QNativeGestureEvent const * this_ptr) {
  return &this_ptr->screenPos();
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent(QEvent::Type type, int key, int modifiers, QString const * text, bool autorep, unsigned short count) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), *text, autorep, count);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent1(QEvent::Type type, int key, int modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, QString const * text, bool autorep, unsigned short count) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), nativeScanCode, nativeVirtualKey, nativeModifiers, *text, autorep, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QKeyEvent_dQKeyEvent(QKeyEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QKeyEvent_key(QKeyEvent const * this_ptr) {
  return this_ptr->key();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeyEvent_matches(QKeyEvent const * this_ptr, QKeySequence::StandardKey key) {
  return this_ptr->matches(key);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QKeyEvent_modifiers(QKeyEvent const * this_ptr) {
  return int(this_ptr->modifiers());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QKeyEvent_text(QKeyEvent const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QKeyEvent_isAutoRepeat(QKeyEvent const * this_ptr) {
  return this_ptr->isAutoRepeat();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QKeyEvent_count(QKeyEvent const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QKeyEvent_nativeScanCode(QKeyEvent const * this_ptr) {
  return this_ptr->nativeScanCode();
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QKeyEvent_nativeVirtualKey(QKeyEvent const * this_ptr) {
  return this_ptr->nativeVirtualKey();
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QKeyEvent_nativeModifiers(QKeyEvent const * this_ptr) {
  return this_ptr->nativeModifiers();
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_QFocusEvent_QFocusEvent(QEvent::Type type, Qt::FocusReason reason) {
  return new QFocusEvent(type, reason);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFocusEvent_dQFocusEvent(QFocusEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFocusEvent_gotFocus(QFocusEvent const * this_ptr) {
  return this_ptr->gotFocus();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFocusEvent_lostFocus(QFocusEvent const * this_ptr) {
  return this_ptr->lostFocus();
}


RITUAL_EXPORT Qt::FocusReason ctr_qt_gui_ffi_QFocusEvent_reason(QFocusEvent const * this_ptr) {
  return this_ptr->reason();
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_QPaintEvent_QPaintEvent(QRegion const * paintRegion) {
  return new QPaintEvent(*paintRegion);
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_QPaintEvent_QPaintEvent1(QRect const * paintRect) {
  return new QPaintEvent(*paintRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEvent_dQPaintEvent(QPaintEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QPaintEvent_rect(QPaintEvent const * this_ptr) {
  return &this_ptr->rect();
}


RITUAL_EXPORT QRegion const * ctr_qt_gui_ffi_QPaintEvent_region(QPaintEvent const * this_ptr) {
  return &this_ptr->region();
}


RITUAL_EXPORT QMoveEvent * ctr_qt_gui_ffi_QMoveEvent_QMoveEvent(QPoint const * pos, QPoint const * oldPos) {
  return new QMoveEvent(*pos, *oldPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMoveEvent_dQMoveEvent(QMoveEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QMoveEvent_pos(QMoveEvent const * this_ptr) {
  return &this_ptr->pos();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QMoveEvent_oldPos(QMoveEvent const * this_ptr) {
  return &this_ptr->oldPos();
}


RITUAL_EXPORT QExposeEvent * ctr_qt_gui_ffi_QExposeEvent_QExposeEvent(QRegion const * rgn) {
  return new QExposeEvent(*rgn);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QExposeEvent_dQExposeEvent(QExposeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRegion const * ctr_qt_gui_ffi_QExposeEvent_region(QExposeEvent const * this_ptr) {
  return &this_ptr->region();
}


RITUAL_EXPORT QPlatformSurfaceEvent * ctr_qt_gui_ffi_QPlatformSurfaceEvent_QPlatformSurfaceEvent(QPlatformSurfaceEvent::SurfaceEventType surfaceEventType) {
  return new QPlatformSurfaceEvent(surfaceEventType);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPlatformSurfaceEvent_dQPlatformSurfaceEvent(QPlatformSurfaceEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPlatformSurfaceEvent::SurfaceEventType ctr_qt_gui_ffi_QPlatformSurfaceEvent_surfaceEventType(QPlatformSurfaceEvent const * this_ptr) {
  return this_ptr->surfaceEventType();
}


RITUAL_EXPORT QResizeEvent * ctr_qt_gui_ffi_QResizeEvent_QResizeEvent(QSize const * size, QSize const * oldSize) {
  return new QResizeEvent(*size, *oldSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QResizeEvent_dQResizeEvent(QResizeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QResizeEvent_size(QResizeEvent const * this_ptr) {
  return &this_ptr->size();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QResizeEvent_oldSize(QResizeEvent const * this_ptr) {
  return &this_ptr->oldSize();
}


RITUAL_EXPORT QCloseEvent * ctr_qt_gui_ffi_QCloseEvent_QCloseEvent() {
  return new QCloseEvent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCloseEvent_dQCloseEvent(QCloseEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIconDragEvent * ctr_qt_gui_ffi_QIconDragEvent_QIconDragEvent() {
  return new QIconDragEvent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconDragEvent_dQIconDragEvent(QIconDragEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QShowEvent * ctr_qt_gui_ffi_QShowEvent_QShowEvent() {
  return new QShowEvent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QShowEvent_dQShowEvent(QShowEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHideEvent * ctr_qt_gui_ffi_QHideEvent_QHideEvent() {
  return new QHideEvent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QHideEvent_dQHideEvent(QHideEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_QContextMenuEvent_QContextMenuEvent(QContextMenuEvent::Reason reason, QPoint const * pos, QPoint const * globalPos, int modifiers) {
  return new QContextMenuEvent(reason, *pos, *globalPos, QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_QContextMenuEvent_QContextMenuEvent1(QContextMenuEvent::Reason reason, QPoint const * pos, QPoint const * globalPos) {
  return new QContextMenuEvent(reason, *pos, *globalPos);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_QContextMenuEvent_QContextMenuEvent2(QContextMenuEvent::Reason reason, QPoint const * pos) {
  return new QContextMenuEvent(reason, *pos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QContextMenuEvent_dQContextMenuEvent(QContextMenuEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QContextMenuEvent_x(QContextMenuEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QContextMenuEvent_y(QContextMenuEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QContextMenuEvent_globalX(QContextMenuEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QContextMenuEvent_globalY(QContextMenuEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QContextMenuEvent_pos(QContextMenuEvent const * this_ptr) {
  return &this_ptr->pos();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QContextMenuEvent_globalPos(QContextMenuEvent const * this_ptr) {
  return &this_ptr->globalPos();
}


RITUAL_EXPORT QContextMenuEvent::Reason ctr_qt_gui_ffi_QContextMenuEvent_reason(QContextMenuEvent const * this_ptr) {
  return this_ptr->reason();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_Attribute(QInputMethodEvent::AttributeType typ, int s, int l, QVariant const * val) {
  return new QInputMethodEvent::Attribute(typ, s, l, *val);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_Attribute1(QInputMethodEvent::AttributeType typ, int s, int l) {
  return new QInputMethodEvent::Attribute(typ, s, l);
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_QInputMethodEvent_QInputMethodEvent() {
  return new QInputMethodEvent();
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_QInputMethodEvent_QInputMethodEvent1(QString const * preeditText, QList< QInputMethodEvent::Attribute > const * attributes) {
  return new QInputMethodEvent(*preeditText, *attributes);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodEvent_dQInputMethodEvent(QInputMethodEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodEvent_setCommitString(QInputMethodEvent * this_ptr, QString const * commitString, int replaceFrom, int replaceLength) {
  this_ptr->setCommitString(*commitString, replaceFrom, replaceLength);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > const * ctr_qt_gui_ffi_QInputMethodEvent_attributes(QInputMethodEvent const * this_ptr) {
  return &this_ptr->attributes();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QInputMethodEvent_preeditString(QInputMethodEvent const * this_ptr) {
  return &this_ptr->preeditString();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QInputMethodEvent_commitString(QInputMethodEvent const * this_ptr) {
  return &this_ptr->commitString();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethodEvent_replacementStart(QInputMethodEvent const * this_ptr) {
  return this_ptr->replacementStart();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethodEvent_replacementLength(QInputMethodEvent const * this_ptr) {
  return this_ptr->replacementLength();
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_QInputMethodEvent_QInputMethodEvent2(QInputMethodEvent const * other) {
  return new QInputMethodEvent(*other);
}


RITUAL_EXPORT QInputMethodQueryEvent * ctr_qt_gui_ffi_QInputMethodQueryEvent_QInputMethodQueryEvent(int queries) {
  return new QInputMethodQueryEvent(QFlags< Qt::InputMethodQuery >(queries));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodQueryEvent_dQInputMethodQueryEvent(QInputMethodQueryEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethodQueryEvent_queries(QInputMethodQueryEvent const * this_ptr) {
  return int(this_ptr->queries());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodQueryEvent_setValue(QInputMethodQueryEvent * this_ptr, Qt::InputMethodQuery query, QVariant const * value) {
  this_ptr->setValue(query, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QInputMethodQueryEvent_value(QInputMethodQueryEvent const * this_ptr, Qt::InputMethodQuery query) {
  return new QVariant(this_ptr->value(query));
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_QDropEvent_QDropEvent(QPointF const * pos, int actions, QMimeData const * data, int buttons, int modifiers, QEvent::Type type) {
  return new QDropEvent(*pos, QFlags< Qt::DropAction >(actions), data, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), type);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDropEvent_dQDropEvent(QDropEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QDropEvent_pos(QDropEvent const * this_ptr) {
  return new QPoint(this_ptr->pos());
}


RITUAL_EXPORT QPointF const * ctr_qt_gui_ffi_QDropEvent_posF(QDropEvent const * this_ptr) {
  return &this_ptr->posF();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDropEvent_mouseButtons(QDropEvent const * this_ptr) {
  return int(this_ptr->mouseButtons());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDropEvent_keyboardModifiers(QDropEvent const * this_ptr) {
  return int(this_ptr->keyboardModifiers());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDropEvent_possibleActions(QDropEvent const * this_ptr) {
  return int(this_ptr->possibleActions());
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDropEvent_proposedAction(QDropEvent const * this_ptr) {
  return this_ptr->proposedAction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDropEvent_acceptProposedAction(QDropEvent * this_ptr) {
  this_ptr->acceptProposedAction();
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDropEvent_dropAction(QDropEvent const * this_ptr) {
  return this_ptr->dropAction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDropEvent_setDropAction(QDropEvent * this_ptr, Qt::DropAction action) {
  this_ptr->setDropAction(action);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QDropEvent_source(QDropEvent const * this_ptr) {
  return this_ptr->source();
}


RITUAL_EXPORT QMimeData const * ctr_qt_gui_ffi_QDropEvent_mimeData(QDropEvent const * this_ptr) {
  return this_ptr->mimeData();
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_QDragMoveEvent_QDragMoveEvent(QPoint const * pos, int actions, QMimeData const * data, int buttons, int modifiers, QEvent::Type type) {
  return new QDragMoveEvent(*pos, QFlags< Qt::DropAction >(actions), data, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), type);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragMoveEvent_dQDragMoveEvent(QDragMoveEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QDragMoveEvent_answerRect(QDragMoveEvent const * this_ptr) {
  return new QRect(this_ptr->answerRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragMoveEvent_accept(QDragMoveEvent * this_ptr) {
  this_ptr->accept();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragMoveEvent_ignore(QDragMoveEvent * this_ptr) {
  this_ptr->ignore();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragMoveEvent_accept1(QDragMoveEvent * this_ptr, QRect const * r) {
  this_ptr->accept(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragMoveEvent_ignore1(QDragMoveEvent * this_ptr, QRect const * r) {
  this_ptr->ignore(*r);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_QDragEnterEvent_QDragEnterEvent(QPoint const * pos, int actions, QMimeData const * data, int buttons, int modifiers) {
  return new QDragEnterEvent(*pos, QFlags< Qt::DropAction >(actions), data, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragEnterEvent_dQDragEnterEvent(QDragEnterEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDragLeaveEvent * ctr_qt_gui_ffi_QDragLeaveEvent_QDragLeaveEvent() {
  return new QDragLeaveEvent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDragLeaveEvent_dQDragLeaveEvent(QDragLeaveEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QHelpEvent * ctr_qt_gui_ffi_QHelpEvent_QHelpEvent(QEvent::Type type, QPoint const * pos, QPoint const * globalPos) {
  return new QHelpEvent(type, *pos, *globalPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QHelpEvent_dQHelpEvent(QHelpEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QHelpEvent_x(QHelpEvent const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QHelpEvent_y(QHelpEvent const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QHelpEvent_globalX(QHelpEvent const * this_ptr) {
  return this_ptr->globalX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QHelpEvent_globalY(QHelpEvent const * this_ptr) {
  return this_ptr->globalY();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QHelpEvent_pos(QHelpEvent const * this_ptr) {
  return &this_ptr->pos();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QHelpEvent_globalPos(QHelpEvent const * this_ptr) {
  return &this_ptr->globalPos();
}


RITUAL_EXPORT QStatusTipEvent * ctr_qt_gui_ffi_QStatusTipEvent_QStatusTipEvent(QString const * tip) {
  return new QStatusTipEvent(*tip);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStatusTipEvent_dQStatusTipEvent(QStatusTipEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStatusTipEvent_tip(QStatusTipEvent const * this_ptr) {
  return new QString(this_ptr->tip());
}


RITUAL_EXPORT QWhatsThisClickedEvent * ctr_qt_gui_ffi_QWhatsThisClickedEvent_QWhatsThisClickedEvent(QString const * href) {
  return new QWhatsThisClickedEvent(*href);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWhatsThisClickedEvent_dQWhatsThisClickedEvent(QWhatsThisClickedEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QWhatsThisClickedEvent_href(QWhatsThisClickedEvent const * this_ptr) {
  return new QString(this_ptr->href());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QActionEvent_dQActionEvent(QActionEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_QFileOpenEvent_QFileOpenEvent(QString const * file) {
  return new QFileOpenEvent(*file);
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_QFileOpenEvent_QFileOpenEvent1(QUrl const * url) {
  return new QFileOpenEvent(*url);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFileOpenEvent_dQFileOpenEvent(QFileOpenEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFileOpenEvent_file(QFileOpenEvent const * this_ptr) {
  return new QString(this_ptr->file());
}


RITUAL_EXPORT QUrl * ctr_qt_gui_ffi_QFileOpenEvent_url(QFileOpenEvent const * this_ptr) {
  return new QUrl(this_ptr->url());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFileOpenEvent_openFile(QFileOpenEvent const * this_ptr, QFile * file, int flags) {
  return this_ptr->openFile(*file, QFlags< QIODevice::OpenModeFlag >(flags));
}


RITUAL_EXPORT QToolBarChangeEvent * ctr_qt_gui_ffi_QToolBarChangeEvent_QToolBarChangeEvent(bool t) {
  return new QToolBarChangeEvent(t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QToolBarChangeEvent_dQToolBarChangeEvent(QToolBarChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QToolBarChangeEvent_toggle(QToolBarChangeEvent const * this_ptr) {
  return this_ptr->toggle();
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_QShortcutEvent_QShortcutEvent(QKeySequence const * key, int id, bool ambiguous) {
  return new QShortcutEvent(*key, id, ambiguous);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QShortcutEvent_dQShortcutEvent(QShortcutEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QShortcutEvent_key(QShortcutEvent const * this_ptr) {
  return &this_ptr->key();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QShortcutEvent_shortcutId(QShortcutEvent const * this_ptr) {
  return this_ptr->shortcutId();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QShortcutEvent_isAmbiguous(QShortcutEvent const * this_ptr) {
  return this_ptr->isAmbiguous();
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_QWindowStateChangeEvent_QWindowStateChangeEvent(int aOldState, bool isOverride) {
  return new QWindowStateChangeEvent(QFlags< Qt::WindowState >(aOldState), isOverride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindowStateChangeEvent_dQWindowStateChangeEvent(QWindowStateChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindowStateChangeEvent_oldState(QWindowStateChangeEvent const * this_ptr) {
  return int(this_ptr->oldState());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindowStateChangeEvent_isOverride(QWindowStateChangeEvent const * this_ptr) {
  return this_ptr->isOverride();
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__15(QDebug const * arg1, QEvent const * arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__16(QKeyEvent * e, QKeySequence::StandardKey key) {
  return operator==(e, key);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__17(QKeySequence::StandardKey key, QKeyEvent * e) {
  return operator==(key, e);
}


RITUAL_EXPORT QPointingDeviceUniqueId * ctr_qt_gui_ffi_QPointingDeviceUniqueId_QPointingDeviceUniqueId() {
  return new QPointingDeviceUniqueId();
}


RITUAL_EXPORT QPointingDeviceUniqueId * ctr_qt_gui_ffi_QPointingDeviceUniqueId_fromNumericId(qint64 id) {
  return new QPointingDeviceUniqueId(QPointingDeviceUniqueId::fromNumericId(id));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPointingDeviceUniqueId_isValid(QPointingDeviceUniqueId const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QPointingDeviceUniqueId_numericId(QPointingDeviceUniqueId const * this_ptr) {
  return this_ptr->numericId();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__18(QPointingDeviceUniqueId const * lhs, QPointingDeviceUniqueId const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash1(QPointingDeviceUniqueId const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_TouchPoint(int id) {
  return new QTouchEvent::TouchPoint(id);
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_TouchPoint1(QTouchEvent::TouchPoint const * other) {
  return new QTouchEvent::TouchPoint(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_dTouchPoint(QTouchEvent::TouchPoint * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_operator_1(QTouchEvent::TouchPoint * this_ptr, QTouchEvent::TouchPoint const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_swap(QTouchEvent::TouchPoint * this_ptr, QTouchEvent::TouchPoint * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTouchEvent_TouchPoint_id(QTouchEvent::TouchPoint const * this_ptr) {
  return this_ptr->id();
}


RITUAL_EXPORT QPointingDeviceUniqueId * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_uniqueId(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointingDeviceUniqueId(this_ptr->uniqueId());
}


RITUAL_EXPORT Qt::TouchPointState ctr_qt_gui_ffi_QTouchEvent_TouchPoint_state(QTouchEvent::TouchPoint const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_pos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->pos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_startPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->startPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_lastPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->lastPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_scenePos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->scenePos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_startScenePos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->startScenePos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_lastScenePos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->lastScenePos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_screenPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->screenPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_startScreenPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->startScreenPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_lastScreenPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->lastScreenPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_normalizedPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->normalizedPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_startNormalizedPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->startNormalizedPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_lastNormalizedPos(QTouchEvent::TouchPoint const * this_ptr) {
  return new QPointF(this_ptr->lastNormalizedPos());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_rect(QTouchEvent::TouchPoint const * this_ptr) {
  return new QRectF(this_ptr->rect());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_sceneRect(QTouchEvent::TouchPoint const * this_ptr) {
  return new QRectF(this_ptr->sceneRect());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_screenRect(QTouchEvent::TouchPoint const * this_ptr) {
  return new QRectF(this_ptr->screenRect());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTouchEvent_TouchPoint_pressure(QTouchEvent::TouchPoint const * this_ptr) {
  return this_ptr->pressure();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTouchEvent_TouchPoint_rotation(QTouchEvent::TouchPoint const * this_ptr) {
  return this_ptr->rotation();
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_ellipseDiameters(QTouchEvent::TouchPoint const * this_ptr) {
  return new QSizeF(this_ptr->ellipseDiameters());
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_velocity(QTouchEvent::TouchPoint const * this_ptr) {
  return new QVector2D(this_ptr->velocity());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTouchEvent_TouchPoint_flags(QTouchEvent::TouchPoint const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_rawScreenPositions(QTouchEvent::TouchPoint const * this_ptr) {
  return new QVector< QPointF >(this_ptr->rawScreenPositions());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setId(QTouchEvent::TouchPoint * this_ptr, int id) {
  this_ptr->setId(id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setUniqueId(QTouchEvent::TouchPoint * this_ptr, qint64 uid) {
  this_ptr->setUniqueId(uid);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setState(QTouchEvent::TouchPoint * this_ptr, int state) {
  this_ptr->setState(QFlags< Qt::TouchPointState >(state));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * pos) {
  this_ptr->setPos(*pos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setScenePos(QTouchEvent::TouchPoint * this_ptr, QPointF const * scenePos) {
  this_ptr->setScenePos(*scenePos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setScreenPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * screenPos) {
  this_ptr->setScreenPos(*screenPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setNormalizedPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * normalizedPos) {
  this_ptr->setNormalizedPos(*normalizedPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setStartPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * startPos) {
  this_ptr->setStartPos(*startPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setStartScenePos(QTouchEvent::TouchPoint * this_ptr, QPointF const * startScenePos) {
  this_ptr->setStartScenePos(*startScenePos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setStartScreenPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * startScreenPos) {
  this_ptr->setStartScreenPos(*startScreenPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setStartNormalizedPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * startNormalizedPos) {
  this_ptr->setStartNormalizedPos(*startNormalizedPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setLastPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * lastPos) {
  this_ptr->setLastPos(*lastPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setLastScenePos(QTouchEvent::TouchPoint * this_ptr, QPointF const * lastScenePos) {
  this_ptr->setLastScenePos(*lastScenePos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setLastScreenPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * lastScreenPos) {
  this_ptr->setLastScreenPos(*lastScreenPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setLastNormalizedPos(QTouchEvent::TouchPoint * this_ptr, QPointF const * lastNormalizedPos) {
  this_ptr->setLastNormalizedPos(*lastNormalizedPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setRect(QTouchEvent::TouchPoint * this_ptr, QRectF const * rect) {
  this_ptr->setRect(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setSceneRect(QTouchEvent::TouchPoint * this_ptr, QRectF const * sceneRect) {
  this_ptr->setSceneRect(*sceneRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setScreenRect(QTouchEvent::TouchPoint * this_ptr, QRectF const * screenRect) {
  this_ptr->setScreenRect(*screenRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setPressure(QTouchEvent::TouchPoint * this_ptr, double pressure) {
  this_ptr->setPressure(pressure);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setRotation(QTouchEvent::TouchPoint * this_ptr, double angle) {
  this_ptr->setRotation(angle);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setEllipseDiameters(QTouchEvent::TouchPoint * this_ptr, QSizeF const * dia) {
  this_ptr->setEllipseDiameters(*dia);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setVelocity(QTouchEvent::TouchPoint * this_ptr, QVector2D const * v) {
  this_ptr->setVelocity(*v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setFlags(QTouchEvent::TouchPoint * this_ptr, int flags) {
  this_ptr->setFlags(QFlags< QTouchEvent::TouchPoint::InfoFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_TouchPoint_setRawScreenPositions(QTouchEvent::TouchPoint * this_ptr, QVector< QPointF > const * positions) {
  this_ptr->setRawScreenPositions(*positions);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent(QEvent::Type eventType, QTouchDevice * device, int modifiers, int touchPointStates, QList< QTouchEvent::TouchPoint > const * touchPoints) {
  return new QTouchEvent(eventType, device, QFlags< Qt::KeyboardModifier >(modifiers), QFlags< Qt::TouchPointState >(touchPointStates), *touchPoints);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_dQTouchEvent(QTouchEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QTouchEvent_window(QTouchEvent const * this_ptr) {
  return this_ptr->window();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QTouchEvent_target(QTouchEvent const * this_ptr) {
  return this_ptr->target();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTouchEvent_touchPointStates(QTouchEvent const * this_ptr) {
  return int(this_ptr->touchPointStates());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > const * ctr_qt_gui_ffi_QTouchEvent_touchPoints(QTouchEvent const * this_ptr) {
  return &this_ptr->touchPoints();
}


RITUAL_EXPORT QTouchDevice * ctr_qt_gui_ffi_QTouchEvent_device(QTouchEvent const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_setWindow(QTouchEvent * this_ptr, QWindow * awindow) {
  this_ptr->setWindow(awindow);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_setTarget(QTouchEvent * this_ptr, QObject * atarget) {
  this_ptr->setTarget(atarget);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_setTouchPointStates(QTouchEvent * this_ptr, int aTouchPointStates) {
  this_ptr->setTouchPointStates(QFlags< Qt::TouchPointState >(aTouchPointStates));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_setTouchPoints(QTouchEvent * this_ptr, QList< QTouchEvent::TouchPoint > const * atouchPoints) {
  this_ptr->setTouchPoints(*atouchPoints);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTouchEvent_setDevice(QTouchEvent * this_ptr, QTouchDevice * adevice) {
  this_ptr->setDevice(adevice);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__20(QDebug const * arg1, QTouchEvent::TouchPoint const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QScrollPrepareEvent * ctr_qt_gui_ffi_QScrollPrepareEvent_QScrollPrepareEvent(QPointF const * startPos) {
  return new QScrollPrepareEvent(*startPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScrollPrepareEvent_dQScrollPrepareEvent(QScrollPrepareEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QScrollPrepareEvent_startPos(QScrollPrepareEvent const * this_ptr) {
  return new QPointF(this_ptr->startPos());
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QScrollPrepareEvent_viewportSize(QScrollPrepareEvent const * this_ptr) {
  return new QSizeF(this_ptr->viewportSize());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QScrollPrepareEvent_contentPosRange(QScrollPrepareEvent const * this_ptr) {
  return new QRectF(this_ptr->contentPosRange());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QScrollPrepareEvent_contentPos(QScrollPrepareEvent const * this_ptr) {
  return new QPointF(this_ptr->contentPos());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScrollPrepareEvent_setViewportSize(QScrollPrepareEvent * this_ptr, QSizeF const * size) {
  this_ptr->setViewportSize(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScrollPrepareEvent_setContentPosRange(QScrollPrepareEvent * this_ptr, QRectF const * rect) {
  this_ptr->setContentPosRange(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScrollPrepareEvent_setContentPos(QScrollPrepareEvent * this_ptr, QPointF const * pos) {
  this_ptr->setContentPos(*pos);
}


RITUAL_EXPORT QScrollEvent * ctr_qt_gui_ffi_QScrollEvent_QScrollEvent(QPointF const * contentPos, QPointF const * overshoot, QScrollEvent::ScrollState scrollState) {
  return new QScrollEvent(*contentPos, *overshoot, scrollState);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScrollEvent_dQScrollEvent(QScrollEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QScrollEvent_contentPos(QScrollEvent const * this_ptr) {
  return new QPointF(this_ptr->contentPos());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QScrollEvent_overshootDistance(QScrollEvent const * this_ptr) {
  return new QPointF(this_ptr->overshootDistance());
}


RITUAL_EXPORT QScrollEvent::ScrollState ctr_qt_gui_ffi_QScrollEvent_scrollState(QScrollEvent const * this_ptr) {
  return this_ptr->scrollState();
}


RITUAL_EXPORT QScreenOrientationChangeEvent * ctr_qt_gui_ffi_QScreenOrientationChangeEvent_QScreenOrientationChangeEvent(QScreen * screen, Qt::ScreenOrientation orientation) {
  return new QScreenOrientationChangeEvent(screen, orientation);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScreenOrientationChangeEvent_dQScreenOrientationChangeEvent(QScreenOrientationChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QScreenOrientationChangeEvent_screen(QScreenOrientationChangeEvent const * this_ptr) {
  return this_ptr->screen();
}


RITUAL_EXPORT Qt::ScreenOrientation ctr_qt_gui_ffi_QScreenOrientationChangeEvent_orientation(QScreenOrientationChangeEvent const * this_ptr) {
  return this_ptr->orientation();
}


RITUAL_EXPORT QApplicationStateChangeEvent * ctr_qt_gui_ffi_QApplicationStateChangeEvent_QApplicationStateChangeEvent(Qt::ApplicationState state) {
  return new QApplicationStateChangeEvent(state);
}


RITUAL_EXPORT Qt::ApplicationState ctr_qt_gui_ffi_QApplicationStateChangeEvent_applicationState(QApplicationStateChangeEvent const * this_ptr) {
  return this_ptr->applicationState();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont() {
  return new QFont();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont1(QString const * family, int pointSize, int weight, bool italic) {
  return new QFont(*family, pointSize, weight, italic);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont2(QFont const * arg1, QPaintDevice * pd) {
  return new QFont(*arg1, pd);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont3(QFont const * arg1) {
  return new QFont(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_dQFont(QFont * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_swap(QFont * this_ptr, QFont * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_family(QFont const * this_ptr) {
  return new QString(this_ptr->family());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setFamily(QFont * this_ptr, QString const * arg1) {
  this_ptr->setFamily(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_styleName(QFont const * this_ptr) {
  return new QString(this_ptr->styleName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStyleName(QFont * this_ptr, QString const * arg1) {
  this_ptr->setStyleName(*arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFont_pointSize(QFont const * this_ptr) {
  return this_ptr->pointSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setPointSize(QFont * this_ptr, int arg1) {
  this_ptr->setPointSize(arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFont_pointSizeF(QFont const * this_ptr) {
  return this_ptr->pointSizeF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setPointSizeF(QFont * this_ptr, double arg1) {
  this_ptr->setPointSizeF(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFont_pixelSize(QFont const * this_ptr) {
  return this_ptr->pixelSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setPixelSize(QFont * this_ptr, int arg1) {
  this_ptr->setPixelSize(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFont_weight(QFont const * this_ptr) {
  return this_ptr->weight();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setWeight(QFont * this_ptr, int arg1) {
  this_ptr->setWeight(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_bold(QFont const * this_ptr) {
  return this_ptr->bold();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setBold(QFont * this_ptr, bool arg1) {
  this_ptr->setBold(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStyle(QFont * this_ptr, QFont::Style style) {
  this_ptr->setStyle(style);
}


RITUAL_EXPORT QFont::Style ctr_qt_gui_ffi_QFont_style(QFont const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_italic(QFont const * this_ptr) {
  return this_ptr->italic();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setItalic(QFont * this_ptr, bool b) {
  this_ptr->setItalic(b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_underline(QFont const * this_ptr) {
  return this_ptr->underline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setUnderline(QFont * this_ptr, bool arg1) {
  this_ptr->setUnderline(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_overline(QFont const * this_ptr) {
  return this_ptr->overline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setOverline(QFont * this_ptr, bool arg1) {
  this_ptr->setOverline(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_strikeOut(QFont const * this_ptr) {
  return this_ptr->strikeOut();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStrikeOut(QFont * this_ptr, bool arg1) {
  this_ptr->setStrikeOut(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_fixedPitch(QFont const * this_ptr) {
  return this_ptr->fixedPitch();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setFixedPitch(QFont * this_ptr, bool arg1) {
  this_ptr->setFixedPitch(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_kerning(QFont const * this_ptr) {
  return this_ptr->kerning();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setKerning(QFont * this_ptr, bool arg1) {
  this_ptr->setKerning(arg1);
}


RITUAL_EXPORT QFont::StyleHint ctr_qt_gui_ffi_QFont_styleHint(QFont const * this_ptr) {
  return this_ptr->styleHint();
}


RITUAL_EXPORT QFont::StyleStrategy ctr_qt_gui_ffi_QFont_styleStrategy(QFont const * this_ptr) {
  return this_ptr->styleStrategy();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStyleHint(QFont * this_ptr, QFont::StyleHint arg1, QFont::StyleStrategy arg2) {
  this_ptr->setStyleHint(arg1, arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStyleStrategy(QFont * this_ptr, QFont::StyleStrategy s) {
  this_ptr->setStyleStrategy(s);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFont_stretch(QFont const * this_ptr) {
  return this_ptr->stretch();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStretch(QFont * this_ptr, int arg1) {
  this_ptr->setStretch(arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFont_letterSpacing(QFont const * this_ptr) {
  return this_ptr->letterSpacing();
}


RITUAL_EXPORT QFont::SpacingType ctr_qt_gui_ffi_QFont_letterSpacingType(QFont const * this_ptr) {
  return this_ptr->letterSpacingType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setLetterSpacing(QFont * this_ptr, QFont::SpacingType type, double spacing) {
  this_ptr->setLetterSpacing(type, spacing);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFont_wordSpacing(QFont const * this_ptr) {
  return this_ptr->wordSpacing();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setWordSpacing(QFont * this_ptr, double spacing) {
  this_ptr->setWordSpacing(spacing);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setCapitalization(QFont * this_ptr, QFont::Capitalization arg1) {
  this_ptr->setCapitalization(arg1);
}


RITUAL_EXPORT QFont::Capitalization ctr_qt_gui_ffi_QFont_capitalization(QFont const * this_ptr) {
  return this_ptr->capitalization();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setHintingPreference(QFont * this_ptr, QFont::HintingPreference hintingPreference) {
  this_ptr->setHintingPreference(hintingPreference);
}


RITUAL_EXPORT QFont::HintingPreference ctr_qt_gui_ffi_QFont_hintingPreference(QFont const * this_ptr) {
  return this_ptr->hintingPreference();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_rawMode(QFont const * this_ptr) {
  return this_ptr->rawMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setRawMode(QFont * this_ptr, bool arg1) {
  this_ptr->setRawMode(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_exactMatch(QFont const * this_ptr) {
  return this_ptr->exactMatch();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_operator_(QFont * this_ptr, QFont const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_operator__(QFont const * this_ptr, QFont const * arg1) {
  return this_ptr->operator==(*arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_operator_1(QFont const * this_ptr, QFont const * arg1) {
  return this_ptr->operator<(*arg1);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QFont_operator_QVariant(QFont const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_isCopyOf(QFont const * this_ptr, QFont const * arg1) {
  return this_ptr->isCopyOf(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setRawName(QFont * this_ptr, QString const * arg1) {
  this_ptr->setRawName(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_rawName(QFont const * this_ptr) {
  return new QString(this_ptr->rawName());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_key(QFont const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_toString(QFont const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFont_fromString(QFont * this_ptr, QString const * arg1) {
  return this_ptr->fromString(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_substitute(QString const * arg1) {
  return new QString(QFont::substitute(*arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFont_substitutes(QString const * arg1) {
  return new QStringList(QFont::substitutes(*arg1));
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFont_substitutions() {
  return new QStringList(QFont::substitutions());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_insertSubstitution(QString const * arg1, QString const * arg2) {
  QFont::insertSubstitution(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_insertSubstitutions(QString const * arg1, QStringList const * arg2) {
  QFont::insertSubstitutions(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_removeSubstitutions(QString const * arg1) {
  QFont::removeSubstitutions(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_initialize() {
  QFont::initialize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_cleanup() {
  QFont::cleanup();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_cacheStatistics() {
  QFont::cacheStatistics();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_defaultFamily(QFont const * this_ptr) {
  return new QString(this_ptr->defaultFamily());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_lastResortFamily(QFont const * this_ptr) {
  return new QString(this_ptr->lastResortFamily());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFont_lastResortFont(QFont const * this_ptr) {
  return new QString(this_ptr->lastResortFont());
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_resolve(QFont const * this_ptr, QFont const * arg1) {
  return new QFont(this_ptr->resolve(*arg1));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QFont_resolve1(QFont const * this_ptr) {
  return this_ptr->resolve();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_resolve2(QFont * this_ptr, unsigned int mask) {
  this_ptr->resolve(mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap2(QFont * value1, QFont * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash2(QFont const * font, unsigned int seed) {
  return qHash(*font, seed);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__21(QDataStream * arg1, QFont const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__22(QDataStream * arg1, QFont * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__23(QDebug const * arg1, QFont const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon() {
  return new QPolygon();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_dQPolygon(QPolygon * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon1(int size) {
  return new QPolygon(size);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon2(QVector< QPoint > const * v) {
  return new QPolygon(*v);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon4(QRect const * r, bool closed) {
  return new QPolygon(*r, closed);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon5(int nPoints, int const * points) {
  return new QPolygon(nPoints, points);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon6(QPolygon const * other) {
  return new QPolygon(*other);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_operator_1(QPolygon * this_ptr, QPolygon const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_swap(QPolygon * this_ptr, QPolygon * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QPolygon_operator_QVariant(QPolygon const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_translate(QPolygon * this_ptr, int dx, int dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_translate1(QPolygon * this_ptr, QPoint const * offset) {
  this_ptr->translate(*offset);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_translated(QPolygon const * this_ptr, int dx, int dy) {
  return new QPolygon(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_translated1(QPolygon const * this_ptr, QPoint const * offset) {
  return new QPolygon(this_ptr->translated(*offset));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPolygon_boundingRect(QPolygon const * this_ptr) {
  return new QRect(this_ptr->boundingRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_point(QPolygon const * this_ptr, int i, int * x, int * y) {
  this_ptr->point(i, x, y);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QPolygon_point1(QPolygon const * this_ptr, int i) {
  return new QPoint(this_ptr->point(i));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_setPoint(QPolygon * this_ptr, int index, int x, int y) {
  this_ptr->setPoint(index, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_setPoint1(QPolygon * this_ptr, int index, QPoint const * p) {
  this_ptr->setPoint(index, *p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_setPoints(QPolygon * this_ptr, int nPoints, int const * points) {
  this_ptr->setPoints(nPoints, points);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_putPoints(QPolygon * this_ptr, int index, int nPoints, int const * points) {
  this_ptr->putPoints(index, nPoints, points);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_putPoints2(QPolygon * this_ptr, int index, int nPoints, QPolygon const * from, int fromIndex) {
  this_ptr->putPoints(index, nPoints, *from, fromIndex);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPolygon_containsPoint(QPolygon const * this_ptr, QPoint const * pt, Qt::FillRule fillRule) {
  return this_ptr->containsPoint(*pt, fillRule);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_united(QPolygon const * this_ptr, QPolygon const * r) {
  return new QPolygon(this_ptr->united(*r));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_intersected(QPolygon const * this_ptr, QPolygon const * r) {
  return new QPolygon(this_ptr->intersected(*r));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_subtracted(QPolygon const * this_ptr, QPolygon const * r) {
  return new QPolygon(this_ptr->subtracted(*r));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap3(QPolygon * value1, QPolygon * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__24(QDebug const * arg1, QPolygon const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__25(QDataStream * stream, QPolygon const * polygon) {
  return &operator<<(*stream, *polygon);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__26(QDataStream * stream, QPolygon * polygon) {
  return &operator>>(*stream, *polygon);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF() {
  return new QPolygonF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygonF_dQPolygonF(QPolygonF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF1(int size) {
  return new QPolygonF(size);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF2(QVector< QPointF > const * v) {
  return new QPolygonF(*v);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF4(QRectF const * r) {
  return new QPolygonF(*r);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF5(QPolygon const * a) {
  return new QPolygonF(*a);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_QPolygonF6(QPolygonF const * a) {
  return new QPolygonF(*a);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_operator_1(QPolygonF * this_ptr, QPolygonF const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygonF_swap(QPolygonF * this_ptr, QPolygonF * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QPolygonF_operator_QVariant(QPolygonF const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygonF_translate(QPolygonF * this_ptr, double dx, double dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygonF_translate1(QPolygonF * this_ptr, QPointF const * offset) {
  this_ptr->translate(*offset);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_translated(QPolygonF const * this_ptr, double dx, double dy) {
  return new QPolygonF(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_translated1(QPolygonF const * this_ptr, QPointF const * offset) {
  return new QPolygonF(this_ptr->translated(*offset));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygonF_toPolygon(QPolygonF const * this_ptr) {
  return new QPolygon(this_ptr->toPolygon());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPolygonF_isClosed(QPolygonF const * this_ptr) {
  return this_ptr->isClosed();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPolygonF_boundingRect(QPolygonF const * this_ptr) {
  return new QRectF(this_ptr->boundingRect());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPolygonF_containsPoint(QPolygonF const * this_ptr, QPointF const * pt, Qt::FillRule fillRule) {
  return this_ptr->containsPoint(*pt, fillRule);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_united(QPolygonF const * this_ptr, QPolygonF const * r) {
  return new QPolygonF(this_ptr->united(*r));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_intersected(QPolygonF const * this_ptr, QPolygonF const * r) {
  return new QPolygonF(this_ptr->intersected(*r));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPolygonF_subtracted(QPolygonF const * this_ptr, QPolygonF const * r) {
  return new QPolygonF(this_ptr->subtracted(*r));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap4(QPolygonF * value1, QPolygonF * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__27(QDebug const * arg1, QPolygonF const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__28(QDataStream * stream, QPolygonF const * array) {
  return &operator<<(*stream, *array);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__29(QDataStream * stream, QPolygonF * array) {
  return &operator>>(*stream, *array);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_QMatrix1() {
  return new QMatrix();
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_QMatrix2(double m11, double m12, double m21, double m22, double dx, double dy) {
  return new QMatrix(m11, m12, m21, m22, dx, dy);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_operator_1(QMatrix * this_ptr, QMatrix const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_QMatrix4(QMatrix const * other) {
  return new QMatrix(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix_setMatrix(QMatrix * this_ptr, double m11, double m12, double m21, double m22, double dx, double dy) {
  this_ptr->setMatrix(m11, m12, m21, m22, dx, dy);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_m11(QMatrix const * this_ptr) {
  return this_ptr->m11();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_m12(QMatrix const * this_ptr) {
  return this_ptr->m12();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_m21(QMatrix const * this_ptr) {
  return this_ptr->m21();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_m22(QMatrix const * this_ptr) {
  return this_ptr->m22();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_dx(QMatrix const * this_ptr) {
  return this_ptr->dx();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_dy(QMatrix const * this_ptr) {
  return this_ptr->dy();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix_map(QMatrix const * this_ptr, int x, int y, int * tx, int * ty) {
  this_ptr->map(x, y, tx, ty);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix_map1(QMatrix const * this_ptr, double x, double y, double * tx, double * ty) {
  this_ptr->map(x, y, tx, ty);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QMatrix_mapRect(QMatrix const * this_ptr, QRect const * arg1) {
  return new QRect(this_ptr->mapRect(*arg1));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QMatrix_mapRect1(QMatrix const * this_ptr, QRectF const * arg1) {
  return new QRectF(this_ptr->mapRect(*arg1));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QMatrix_map2(QMatrix const * this_ptr, QPoint const * p) {
  return new QPoint(this_ptr->map(*p));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QMatrix_map3(QMatrix const * this_ptr, QPointF const * p) {
  return new QPointF(this_ptr->map(*p));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QMatrix_map4(QMatrix const * this_ptr, QLine const * l) {
  return new QLine(this_ptr->map(*l));
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QMatrix_map5(QMatrix const * this_ptr, QLineF const * l) {
  return new QLineF(this_ptr->map(*l));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QMatrix_map6(QMatrix const * this_ptr, QPolygonF const * a) {
  return new QPolygonF(this_ptr->map(*a));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QMatrix_map7(QMatrix const * this_ptr, QPolygon const * a) {
  return new QPolygon(this_ptr->map(*a));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QMatrix_map8(QMatrix const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->map(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QMatrix_map9(QMatrix const * this_ptr, QPainterPath const * p) {
  return new QPainterPath(this_ptr->map(*p));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QMatrix_mapToPolygon(QMatrix const * this_ptr, QRect const * r) {
  return new QPolygon(this_ptr->mapToPolygon(*r));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix_reset(QMatrix * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix_isIdentity(QMatrix const * this_ptr) {
  return this_ptr->isIdentity();
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_translate(QMatrix * this_ptr, double dx, double dy) {
  return &this_ptr->translate(dx, dy);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_scale(QMatrix * this_ptr, double sx, double sy) {
  return &this_ptr->scale(sx, sy);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_shear(QMatrix * this_ptr, double sh, double sv) {
  return &this_ptr->shear(sh, sv);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_rotate(QMatrix * this_ptr, double a) {
  return &this_ptr->rotate(a);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix_isInvertible(QMatrix const * this_ptr) {
  return this_ptr->isInvertible();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix_determinant(QMatrix const * this_ptr) {
  return this_ptr->determinant();
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_inverted(QMatrix const * this_ptr, bool * invertible) {
  return new QMatrix(this_ptr->inverted(invertible));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix_operator__(QMatrix const * this_ptr, QMatrix const * arg1) {
  return this_ptr->operator==(*arg1);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_operator__2(QMatrix * this_ptr, QMatrix const * arg1) {
  return &this_ptr->operator*=(*arg1);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_operator_2(QMatrix const * this_ptr, QMatrix const * o) {
  return new QMatrix(this_ptr->operator*(*o));
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QMatrix_operator_QVariant(QMatrix const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash3(QMatrix const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_operator_14(QPoint const * p, QMatrix const * m) {
  return new QPoint(operator*(*p, *m));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_operator_15(QPointF const * p, QMatrix const * m) {
  return new QPointF(operator*(*p, *m));
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_operator_16(QLineF const * l, QMatrix const * m) {
  return new QLineF(operator*(*l, *m));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_operator_17(QLine const * l, QMatrix const * m) {
  return new QLine(operator*(*l, *m));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_operator_18(QPolygon const * a, QMatrix const * m) {
  return new QPolygon(operator*(*a, *m));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_operator_19(QPolygonF const * a, QMatrix const * m) {
  return new QPolygonF(operator*(*a, *m));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_operator_20(QRegion const * r, QMatrix const * m) {
  return new QRegion(operator*(*r, *m));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_operator_21(QPainterPath const * p, QMatrix const * m) {
  return new QPainterPath(operator*(*p, *m));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare1(QMatrix const * m1, QMatrix const * m2) {
  return qFuzzyCompare(*m1, *m2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__30(QDataStream * arg1, QMatrix const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__31(QDataStream * arg1, QMatrix * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__32(QDebug const * arg1, QMatrix const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_Element_isMoveTo(QPainterPath::Element const * this_ptr) {
  return this_ptr->isMoveTo();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_Element_isLineTo(QPainterPath::Element const * this_ptr) {
  return this_ptr->isLineTo();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_Element_isCurveTo(QPainterPath::Element const * this_ptr) {
  return this_ptr->isCurveTo();
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QPainterPath_Element_operator_QPointF(QPainterPath::Element const * this_ptr) {
  return new QPointF(this_ptr->operator QPointF());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_Element_operator__(QPainterPath::Element const * this_ptr, QPainterPath::Element const * e) {
  return this_ptr->operator==(*e);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_QPainterPath() {
  return new QPainterPath();
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_QPainterPath1(QPointF const * startPoint) {
  return new QPainterPath(*startPoint);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_QPainterPath2(QPainterPath const * other) {
  return new QPainterPath(*other);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator_(QPainterPath * this_ptr, QPainterPath const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_dQPainterPath(QPainterPath * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_swap(QPainterPath * this_ptr, QPainterPath * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_closeSubpath(QPainterPath * this_ptr) {
  this_ptr->closeSubpath();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_moveTo(QPainterPath * this_ptr, QPointF const * p) {
  this_ptr->moveTo(*p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_moveTo1(QPainterPath * this_ptr, double x, double y) {
  this_ptr->moveTo(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_lineTo(QPainterPath * this_ptr, QPointF const * p) {
  this_ptr->lineTo(*p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_lineTo1(QPainterPath * this_ptr, double x, double y) {
  this_ptr->lineTo(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_arcMoveTo(QPainterPath * this_ptr, QRectF const * rect, double angle) {
  this_ptr->arcMoveTo(*rect, angle);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_arcMoveTo1(QPainterPath * this_ptr, double x, double y, double w, double h, double angle) {
  this_ptr->arcMoveTo(x, y, w, h, angle);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_arcTo(QPainterPath * this_ptr, QRectF const * rect, double startAngle, double arcLength) {
  this_ptr->arcTo(*rect, startAngle, arcLength);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_arcTo1(QPainterPath * this_ptr, double x, double y, double w, double h, double startAngle, double arcLength) {
  this_ptr->arcTo(x, y, w, h, startAngle, arcLength);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_cubicTo(QPainterPath * this_ptr, QPointF const * ctrlPt1, QPointF const * ctrlPt2, QPointF const * endPt) {
  this_ptr->cubicTo(*ctrlPt1, *ctrlPt2, *endPt);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_cubicTo1(QPainterPath * this_ptr, double ctrlPt1x, double ctrlPt1y, double ctrlPt2x, double ctrlPt2y, double endPtx, double endPty) {
  this_ptr->cubicTo(ctrlPt1x, ctrlPt1y, ctrlPt2x, ctrlPt2y, endPtx, endPty);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_quadTo(QPainterPath * this_ptr, QPointF const * ctrlPt, QPointF const * endPt) {
  this_ptr->quadTo(*ctrlPt, *endPt);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_quadTo1(QPainterPath * this_ptr, double ctrlPtx, double ctrlPty, double endPtx, double endPty) {
  this_ptr->quadTo(ctrlPtx, ctrlPty, endPtx, endPty);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QPainterPath_currentPosition(QPainterPath const * this_ptr) {
  return new QPointF(this_ptr->currentPosition());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRect(QPainterPath * this_ptr, QRectF const * rect) {
  this_ptr->addRect(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRect1(QPainterPath * this_ptr, double x, double y, double w, double h) {
  this_ptr->addRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addEllipse(QPainterPath * this_ptr, QRectF const * rect) {
  this_ptr->addEllipse(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addEllipse1(QPainterPath * this_ptr, double x, double y, double w, double h) {
  this_ptr->addEllipse(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addEllipse2(QPainterPath * this_ptr, QPointF const * center, double rx, double ry) {
  this_ptr->addEllipse(*center, rx, ry);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addPolygon(QPainterPath * this_ptr, QPolygonF const * polygon) {
  this_ptr->addPolygon(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addText(QPainterPath * this_ptr, QPointF const * point, QFont const * f, QString const * text) {
  this_ptr->addText(*point, *f, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addText1(QPainterPath * this_ptr, double x, double y, QFont const * f, QString const * text) {
  this_ptr->addText(x, y, *f, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addPath(QPainterPath * this_ptr, QPainterPath const * path) {
  this_ptr->addPath(*path);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRegion(QPainterPath * this_ptr, QRegion const * region) {
  this_ptr->addRegion(*region);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundedRect(QPainterPath * this_ptr, QRectF const * rect, double xRadius, double yRadius, Qt::SizeMode mode) {
  this_ptr->addRoundedRect(*rect, xRadius, yRadius, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundedRect1(QPainterPath * this_ptr, double x, double y, double w, double h, double xRadius, double yRadius, Qt::SizeMode mode) {
  this_ptr->addRoundedRect(x, y, w, h, xRadius, yRadius, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundRect(QPainterPath * this_ptr, QRectF const * rect, int xRnd, int yRnd) {
  this_ptr->addRoundRect(*rect, xRnd, yRnd);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundRect1(QPainterPath * this_ptr, double x, double y, double w, double h, int xRnd, int yRnd) {
  this_ptr->addRoundRect(x, y, w, h, xRnd, yRnd);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundRect2(QPainterPath * this_ptr, QRectF const * rect, int roundness) {
  this_ptr->addRoundRect(*rect, roundness);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundRect3(QPainterPath * this_ptr, double x, double y, double w, double h, int roundness) {
  this_ptr->addRoundRect(x, y, w, h, roundness);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_connectPath(QPainterPath * this_ptr, QPainterPath const * path) {
  this_ptr->connectPath(*path);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_contains(QPainterPath const * this_ptr, QPointF const * pt) {
  return this_ptr->contains(*pt);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_contains1(QPainterPath const * this_ptr, QRectF const * rect) {
  return this_ptr->contains(*rect);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_intersects(QPainterPath const * this_ptr, QRectF const * rect) {
  return this_ptr->intersects(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_translate(QPainterPath * this_ptr, double dx, double dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_translate1(QPainterPath * this_ptr, QPointF const * offset) {
  this_ptr->translate(*offset);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_translated(QPainterPath const * this_ptr, double dx, double dy) {
  return new QPainterPath(this_ptr->translated(dx, dy));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_translated1(QPainterPath const * this_ptr, QPointF const * offset) {
  return new QPainterPath(this_ptr->translated(*offset));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainterPath_boundingRect(QPainterPath const * this_ptr) {
  return new QRectF(this_ptr->boundingRect());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainterPath_controlPointRect(QPainterPath const * this_ptr) {
  return new QRectF(this_ptr->controlPointRect());
}


RITUAL_EXPORT Qt::FillRule ctr_qt_gui_ffi_QPainterPath_fillRule(QPainterPath const * this_ptr) {
  return this_ptr->fillRule();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_setFillRule(QPainterPath * this_ptr, Qt::FillRule fillRule) {
  this_ptr->setFillRule(fillRule);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_isEmpty(QPainterPath const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_toReversed(QPainterPath const * this_ptr) {
  return new QPainterPath(this_ptr->toReversed());
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toSubpathPolygons(QPainterPath const * this_ptr, QMatrix const * matrix) {
  return new QList< QPolygonF >(this_ptr->toSubpathPolygons(*matrix));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toFillPolygons(QPainterPath const * this_ptr, QMatrix const * matrix) {
  return new QList< QPolygonF >(this_ptr->toFillPolygons(*matrix));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPainterPath_toFillPolygon(QPainterPath const * this_ptr, QMatrix const * matrix) {
  return new QPolygonF(this_ptr->toFillPolygon(*matrix));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toSubpathPolygons1(QPainterPath const * this_ptr, QTransform const * matrix) {
  return new QList< QPolygonF >(this_ptr->toSubpathPolygons(*matrix));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toFillPolygons1(QPainterPath const * this_ptr, QTransform const * matrix) {
  return new QList< QPolygonF >(this_ptr->toFillPolygons(*matrix));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPainterPath_toFillPolygon1(QPainterPath const * this_ptr, QTransform const * matrix) {
  return new QPolygonF(this_ptr->toFillPolygon(*matrix));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPainterPath_elementCount(QPainterPath const * this_ptr) {
  return this_ptr->elementCount();
}


RITUAL_EXPORT QPainterPath::Element * ctr_qt_gui_ffi_QPainterPath_elementAt(QPainterPath const * this_ptr, int i) {
  return new QPainterPath::Element(this_ptr->elementAt(i));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_setElementPositionAt(QPainterPath * this_ptr, int i, double x, double y) {
  this_ptr->setElementPositionAt(i, x, y);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_length(QPainterPath const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_percentAtLength(QPainterPath const * this_ptr, double t) {
  return this_ptr->percentAtLength(t);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QPainterPath_pointAtPercent(QPainterPath const * this_ptr, double t) {
  return new QPointF(this_ptr->pointAtPercent(t));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_angleAtPercent(QPainterPath const * this_ptr, double t) {
  return this_ptr->angleAtPercent(t);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPath_slopeAtPercent(QPainterPath const * this_ptr, double t) {
  return this_ptr->slopeAtPercent(t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_intersects1(QPainterPath const * this_ptr, QPainterPath const * p) {
  return this_ptr->intersects(*p);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_contains2(QPainterPath const * this_ptr, QPainterPath const * p) {
  return this_ptr->contains(*p);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_united(QPainterPath const * this_ptr, QPainterPath const * r) {
  return new QPainterPath(this_ptr->united(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_intersected(QPainterPath const * this_ptr, QPainterPath const * r) {
  return new QPainterPath(this_ptr->intersected(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_subtracted(QPainterPath const * this_ptr, QPainterPath const * r) {
  return new QPainterPath(this_ptr->subtracted(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_subtractedInverted(QPainterPath const * this_ptr, QPainterPath const * r) {
  return new QPainterPath(this_ptr->subtractedInverted(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_simplified(QPainterPath const * this_ptr) {
  return new QPainterPath(this_ptr->simplified());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainterPath_operator__(QPainterPath const * this_ptr, QPainterPath const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator_2(QPainterPath const * this_ptr, QPainterPath const * other) {
  return new QPainterPath(this_ptr->operator&(*other));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator_3(QPainterPath const * this_ptr, QPainterPath const * other) {
  return new QPainterPath(this_ptr->operator|(*other));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator_4(QPainterPath const * this_ptr, QPainterPath const * other) {
  return new QPainterPath(this_ptr->operator+(*other));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator_5(QPainterPath const * this_ptr, QPainterPath const * other) {
  return new QPainterPath(this_ptr->operator-(*other));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator__2(QPainterPath * this_ptr, QPainterPath const * other) {
  return &this_ptr->operator&=(*other);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator__3(QPainterPath * this_ptr, QPainterPath const * other) {
  return &this_ptr->operator|=(*other);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator__4(QPainterPath * this_ptr, QPainterPath const * other) {
  return &this_ptr->operator+=(*other);
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPath_operator__5(QPainterPath * this_ptr, QPainterPath const * other) {
  return &this_ptr->operator-=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap5(QPainterPath * value1, QPainterPath * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__33(QDataStream * arg1, QPainterPath const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__34(QDataStream * arg1, QPainterPath * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QPainterPathStroker * ctr_qt_gui_ffi_QPainterPathStroker_QPainterPathStroker() {
  return new QPainterPathStroker();
}


RITUAL_EXPORT QPainterPathStroker * ctr_qt_gui_ffi_QPainterPathStroker_QPainterPathStroker1(QPen const * pen) {
  return new QPainterPathStroker(*pen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_dQPainterPathStroker(QPainterPathStroker * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setWidth(QPainterPathStroker * this_ptr, double width) {
  this_ptr->setWidth(width);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPathStroker_width(QPainterPathStroker const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setCapStyle(QPainterPathStroker * this_ptr, Qt::PenCapStyle style) {
  this_ptr->setCapStyle(style);
}


RITUAL_EXPORT Qt::PenCapStyle ctr_qt_gui_ffi_QPainterPathStroker_capStyle(QPainterPathStroker const * this_ptr) {
  return this_ptr->capStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setJoinStyle(QPainterPathStroker * this_ptr, Qt::PenJoinStyle style) {
  this_ptr->setJoinStyle(style);
}


RITUAL_EXPORT Qt::PenJoinStyle ctr_qt_gui_ffi_QPainterPathStroker_joinStyle(QPainterPathStroker const * this_ptr) {
  return this_ptr->joinStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setMiterLimit(QPainterPathStroker * this_ptr, double length) {
  this_ptr->setMiterLimit(length);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPathStroker_miterLimit(QPainterPathStroker const * this_ptr) {
  return this_ptr->miterLimit();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setCurveThreshold(QPainterPathStroker * this_ptr, double threshold) {
  this_ptr->setCurveThreshold(threshold);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPathStroker_curveThreshold(QPainterPathStroker const * this_ptr) {
  return this_ptr->curveThreshold();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setDashPattern(QPainterPathStroker * this_ptr, Qt::PenStyle arg1) {
  this_ptr->setDashPattern(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setDashPattern1(QPainterPathStroker * this_ptr, QVector< double > const * dashPattern) {
  this_ptr->setDashPattern(*dashPattern);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QPainterPathStroker_dashPattern(QPainterPathStroker const * this_ptr) {
  return new QVector< double >(this_ptr->dashPattern());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPathStroker_setDashOffset(QPainterPathStroker * this_ptr, double offset) {
  this_ptr->setDashOffset(offset);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainterPathStroker_dashOffset(QPainterPathStroker const * this_ptr) {
  return this_ptr->dashOffset();
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainterPathStroker_createStroke(QPainterPathStroker const * this_ptr, QPainterPath const * path) {
  return new QPainterPath(this_ptr->createStroke(*path));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__35(QDebug const * arg1, QPainterPath const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform1() {
  return new QTransform();
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform2(double h11, double h12, double h13, double h21, double h22, double h23, double h31, double h32, double h33) {
  return new QTransform(h11, h12, h13, h21, h22, h23, h31, h32, h33);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform3(double h11, double h12, double h21, double h22, double dx, double dy) {
  return new QTransform(h11, h12, h21, h22, dx, dy);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform4(QMatrix const * mtx) {
  return new QTransform(*mtx);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator_1(QTransform * this_ptr, QTransform const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform6(QTransform const * other) {
  return new QTransform(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isAffine(QTransform const * this_ptr) {
  return this_ptr->isAffine();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isIdentity(QTransform const * this_ptr) {
  return this_ptr->isIdentity();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isInvertible(QTransform const * this_ptr) {
  return this_ptr->isInvertible();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isScaling(QTransform const * this_ptr) {
  return this_ptr->isScaling();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isRotating(QTransform const * this_ptr) {
  return this_ptr->isRotating();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_isTranslating(QTransform const * this_ptr) {
  return this_ptr->isTranslating();
}


RITUAL_EXPORT QTransform::TransformationType ctr_qt_gui_ffi_QTransform_type(QTransform const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_determinant(QTransform const * this_ptr) {
  return this_ptr->determinant();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_det(QTransform const * this_ptr) {
  return this_ptr->det();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m11(QTransform const * this_ptr) {
  return this_ptr->m11();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m12(QTransform const * this_ptr) {
  return this_ptr->m12();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m13(QTransform const * this_ptr) {
  return this_ptr->m13();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m21(QTransform const * this_ptr) {
  return this_ptr->m21();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m22(QTransform const * this_ptr) {
  return this_ptr->m22();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m23(QTransform const * this_ptr) {
  return this_ptr->m23();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m31(QTransform const * this_ptr) {
  return this_ptr->m31();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m32(QTransform const * this_ptr) {
  return this_ptr->m32();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_m33(QTransform const * this_ptr) {
  return this_ptr->m33();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_dx(QTransform const * this_ptr) {
  return this_ptr->dx();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTransform_dy(QTransform const * this_ptr) {
  return this_ptr->dy();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTransform_setMatrix(QTransform * this_ptr, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33) {
  this_ptr->setMatrix(m11, m12, m13, m21, m22, m23, m31, m32, m33);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_inverted(QTransform const * this_ptr, bool * invertible) {
  return new QTransform(this_ptr->inverted(invertible));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_adjoint(QTransform const * this_ptr) {
  return new QTransform(this_ptr->adjoint());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_transposed(QTransform const * this_ptr) {
  return new QTransform(this_ptr->transposed());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_translate(QTransform * this_ptr, double dx, double dy) {
  return &this_ptr->translate(dx, dy);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_scale(QTransform * this_ptr, double sx, double sy) {
  return &this_ptr->scale(sx, sy);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_shear(QTransform * this_ptr, double sh, double sv) {
  return &this_ptr->shear(sh, sv);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_rotate(QTransform * this_ptr, double a, Qt::Axis axis) {
  return &this_ptr->rotate(a, axis);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_rotateRadians(QTransform * this_ptr, double a, Qt::Axis axis) {
  return &this_ptr->rotateRadians(a, axis);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_squareToQuad(QPolygonF const * square, QTransform * result) {
  return QTransform::squareToQuad(*square, *result);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_quadToSquare(QPolygonF const * quad, QTransform * result) {
  return QTransform::quadToSquare(*quad, *result);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_quadToQuad(QPolygonF const * one, QPolygonF const * two, QTransform * result) {
  return QTransform::quadToQuad(*one, *two, *result);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTransform_operator__(QTransform const * this_ptr, QTransform const * arg1) {
  return this_ptr->operator==(*arg1);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator__2(QTransform * this_ptr, QTransform const * arg1) {
  return &this_ptr->operator*=(*arg1);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator_2(QTransform const * this_ptr, QTransform const * o) {
  return new QTransform(this_ptr->operator*(*o));
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTransform_operator_QVariant(QTransform const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTransform_reset(QTransform * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QTransform_map(QTransform const * this_ptr, QPoint const * p) {
  return new QPoint(this_ptr->map(*p));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTransform_map1(QTransform const * this_ptr, QPointF const * p) {
  return new QPointF(this_ptr->map(*p));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QTransform_map2(QTransform const * this_ptr, QLine const * l) {
  return new QLine(this_ptr->map(*l));
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QTransform_map3(QTransform const * this_ptr, QLineF const * l) {
  return new QLineF(this_ptr->map(*l));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QTransform_map4(QTransform const * this_ptr, QPolygonF const * a) {
  return new QPolygonF(this_ptr->map(*a));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QTransform_map5(QTransform const * this_ptr, QPolygon const * a) {
  return new QPolygon(this_ptr->map(*a));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QTransform_map6(QTransform const * this_ptr, QRegion const * r) {
  return new QRegion(this_ptr->map(*r));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QTransform_map7(QTransform const * this_ptr, QPainterPath const * p) {
  return new QPainterPath(this_ptr->map(*p));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QTransform_mapToPolygon(QTransform const * this_ptr, QRect const * r) {
  return new QPolygon(this_ptr->mapToPolygon(*r));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QTransform_mapRect(QTransform const * this_ptr, QRect const * arg1) {
  return new QRect(this_ptr->mapRect(*arg1));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTransform_mapRect1(QTransform const * this_ptr, QRectF const * arg1) {
  return new QRectF(this_ptr->mapRect(*arg1));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTransform_map8(QTransform const * this_ptr, int x, int y, int * tx, int * ty) {
  this_ptr->map(x, y, tx, ty);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTransform_map9(QTransform const * this_ptr, double x, double y, double * tx, double * ty) {
  this_ptr->map(x, y, tx, ty);
}


RITUAL_EXPORT QMatrix const * ctr_qt_gui_ffi_QTransform_toAffine(QTransform const * this_ptr) {
  return &this_ptr->toAffine();
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator__3(QTransform * this_ptr, double div) {
  return &this_ptr->operator*=(div);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator__4(QTransform * this_ptr, double div) {
  return &this_ptr->operator/=(div);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator__5(QTransform * this_ptr, double div) {
  return &this_ptr->operator+=(div);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_operator__6(QTransform * this_ptr, double div) {
  return &this_ptr->operator-=(div);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_fromTranslate(double dx, double dy) {
  return new QTransform(QTransform::fromTranslate(dx, dy));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_fromScale(double dx, double dy) {
  return new QTransform(QTransform::fromScale(dx, dy));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash4(QTransform const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare2(QTransform const * t1, QTransform const * t2) {
  return qFuzzyCompare(*t1, *t2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__36(QDataStream * arg1, QTransform const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__37(QDataStream * arg1, QTransform * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__38(QDebug const * arg1, QTransform const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_operator_22(QPoint const * p, QTransform const * m) {
  return new QPoint(operator*(*p, *m));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_operator_23(QPointF const * p, QTransform const * m) {
  return new QPointF(operator*(*p, *m));
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_operator_24(QLineF const * l, QTransform const * m) {
  return new QLineF(operator*(*l, *m));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_operator_25(QLine const * l, QTransform const * m) {
  return new QLine(operator*(*l, *m));
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_operator_26(QPolygon const * a, QTransform const * m) {
  return new QPolygon(operator*(*a, *m));
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_operator_27(QPolygonF const * a, QTransform const * m) {
  return new QPolygonF(operator*(*a, *m));
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_operator_28(QRegion const * r, QTransform const * m) {
  return new QRegion(operator*(*r, *m));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_operator_29(QPainterPath const * p, QTransform const * m) {
  return new QPainterPath(operator*(*p, *m));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_operator_30(QTransform const * a, double n) {
  return new QTransform(operator*(*a, n));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_operator_31(QTransform const * a, double n) {
  return new QTransform(operator/(*a, n));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_operator_32(QTransform const * a, double n) {
  return new QTransform(operator+(*a, n));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_operator_33(QTransform const * a, double n) {
  return new QTransform(operator-(*a, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintDevice_dQPaintDevice(QPaintDevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_devType(QPaintDevice const * this_ptr) {
  return this_ptr->devType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintDevice_paintingActive(QPaintDevice const * this_ptr) {
  return this_ptr->paintingActive();
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QPaintDevice_paintEngine(QPaintDevice const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_width(QPaintDevice const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_height(QPaintDevice const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_widthMM(QPaintDevice const * this_ptr) {
  return this_ptr->widthMM();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_heightMM(QPaintDevice const * this_ptr) {
  return this_ptr->heightMM();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_logicalDpiX(QPaintDevice const * this_ptr) {
  return this_ptr->logicalDpiX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_logicalDpiY(QPaintDevice const * this_ptr) {
  return this_ptr->logicalDpiY();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_physicalDpiX(QPaintDevice const * this_ptr) {
  return this_ptr->physicalDpiX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_physicalDpiY(QPaintDevice const * this_ptr) {
  return this_ptr->physicalDpiY();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_devicePixelRatio(QPaintDevice const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPaintDevice_devicePixelRatioF(QPaintDevice const * this_ptr) {
  return this_ptr->devicePixelRatioF();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_colorCount(QPaintDevice const * this_ptr) {
  return this_ptr->colorCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDevice_depth(QPaintDevice const * this_ptr) {
  return this_ptr->depth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPaintDevice_devicePixelRatioFScale() {
  return QPaintDevice::devicePixelRatioFScale();
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_QPixelFormat() {
  return new QPixelFormat();
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_QPixelFormat1(QPixelFormat::ColorModel colorModel, unsigned char firstSize, unsigned char secondSize, unsigned char thirdSize, unsigned char fourthSize, unsigned char fifthSize, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder, unsigned char subEnum) {
  return new QPixelFormat(colorModel, firstSize, secondSize, thirdSize, fourthSize, fifthSize, alphaSize, alphaUsage, alphaPosition, premultiplied, typeInterpretation, byteOrder, subEnum);
}


RITUAL_EXPORT QPixelFormat::ColorModel ctr_qt_gui_ffi_QPixelFormat_colorModel(QPixelFormat const * this_ptr) {
  return this_ptr->colorModel();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_channelCount(QPixelFormat const * this_ptr) {
  return this_ptr->channelCount();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_redSize(QPixelFormat const * this_ptr) {
  return this_ptr->redSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_greenSize(QPixelFormat const * this_ptr) {
  return this_ptr->greenSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_blueSize(QPixelFormat const * this_ptr) {
  return this_ptr->blueSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_cyanSize(QPixelFormat const * this_ptr) {
  return this_ptr->cyanSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_magentaSize(QPixelFormat const * this_ptr) {
  return this_ptr->magentaSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_yellowSize(QPixelFormat const * this_ptr) {
  return this_ptr->yellowSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_blackSize(QPixelFormat const * this_ptr) {
  return this_ptr->blackSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_hueSize(QPixelFormat const * this_ptr) {
  return this_ptr->hueSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_saturationSize(QPixelFormat const * this_ptr) {
  return this_ptr->saturationSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_lightnessSize(QPixelFormat const * this_ptr) {
  return this_ptr->lightnessSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_brightnessSize(QPixelFormat const * this_ptr) {
  return this_ptr->brightnessSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_alphaSize(QPixelFormat const * this_ptr) {
  return this_ptr->alphaSize();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_bitsPerPixel(QPixelFormat const * this_ptr) {
  return this_ptr->bitsPerPixel();
}


RITUAL_EXPORT QPixelFormat::AlphaUsage ctr_qt_gui_ffi_QPixelFormat_alphaUsage(QPixelFormat const * this_ptr) {
  return this_ptr->alphaUsage();
}


RITUAL_EXPORT QPixelFormat::AlphaPosition ctr_qt_gui_ffi_QPixelFormat_alphaPosition(QPixelFormat const * this_ptr) {
  return this_ptr->alphaPosition();
}


RITUAL_EXPORT QPixelFormat::AlphaPremultiplied ctr_qt_gui_ffi_QPixelFormat_premultiplied(QPixelFormat const * this_ptr) {
  return this_ptr->premultiplied();
}


RITUAL_EXPORT QPixelFormat::TypeInterpretation ctr_qt_gui_ffi_QPixelFormat_typeInterpretation(QPixelFormat const * this_ptr) {
  return this_ptr->typeInterpretation();
}


RITUAL_EXPORT QPixelFormat::ByteOrder ctr_qt_gui_ffi_QPixelFormat_byteOrder(QPixelFormat const * this_ptr) {
  return this_ptr->byteOrder();
}


RITUAL_EXPORT QPixelFormat::YUVLayout ctr_qt_gui_ffi_QPixelFormat_yuvLayout(QPixelFormat const * this_ptr) {
  return this_ptr->yuvLayout();
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QPixelFormat_subEnum(QPixelFormat const * this_ptr) {
  return this_ptr->subEnum();
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QtPrivate_QPixelFormat_createYUV(QPixelFormat::YUVLayout yuvLayout, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder) {
  return new QPixelFormat(QtPrivate::QPixelFormat_createYUV(yuvLayout, alphaSize, alphaUsage, alphaPosition, premultiplied, typeInterpretation, byteOrder));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatRgba(unsigned char red, unsigned char green, unsigned char blue, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::AlphaPremultiplied pmul, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatRgba(red, green, blue, alfa, usage, position, pmul, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatGrayscale(unsigned char channelSize, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatGrayscale(channelSize, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatAlpha(unsigned char channelSize, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatAlpha(channelSize, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatCmyk(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatCmyk(channelSize, alfa, usage, position, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsl(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatHsl(channelSize, alfa, usage, position, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsv(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatHsv(channelSize, alfa, usage, position, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv(QPixelFormat::YUVLayout layout, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::AlphaPremultiplied p_mul, QPixelFormat::TypeInterpretation typeInt, QPixelFormat::ByteOrder b_order) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa, usage, position, p_mul, typeInt, b_order));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage() {
  return new QImage();
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage1(QSize const * size, QImage::Format format) {
  return new QImage(*size, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage2(int width, int height, QImage::Format format) {
  return new QImage(width, height, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage3(unsigned char * data, int width, int height, QImage::Format format, void (*cleanupFunction)(void *), void * cleanupInfo) {
  return new QImage(data, width, height, format, cleanupFunction, cleanupInfo);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage4(unsigned char const * data, int width, int height, QImage::Format format, void (*cleanupFunction)(void *), void * cleanupInfo) {
  return new QImage(data, width, height, format, cleanupFunction, cleanupInfo);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage5(unsigned char * data, int width, int height, int bytesPerLine, QImage::Format format, void (*cleanupFunction)(void *), void * cleanupInfo) {
  return new QImage(data, width, height, bytesPerLine, format, cleanupFunction, cleanupInfo);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage6(unsigned char const * data, int width, int height, int bytesPerLine, QImage::Format format, void (*cleanupFunction)(void *), void * cleanupInfo) {
  return new QImage(data, width, height, bytesPerLine, format, cleanupFunction, cleanupInfo);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage7(QString const * fileName, char const * format) {
  return new QImage(*fileName, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage8(QImage const * arg1) {
  return new QImage(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_dQImage(QImage * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_operator_(QImage * this_ptr, QImage const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_swap(QImage * this_ptr, QImage * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_isNull(QImage const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_devType(QImage const * this_ptr) {
  return this_ptr->devType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_operator__(QImage const * this_ptr, QImage const * arg1) {
  return this_ptr->operator==(*arg1);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QImage_operator_QVariant(QImage const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_detach(QImage * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_isDetached(QImage const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_copy(QImage const * this_ptr, QRect const * rect) {
  return new QImage(this_ptr->copy(*rect));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_copy1(QImage const * this_ptr, int x, int y, int w, int h) {
  return new QImage(this_ptr->copy(x, y, w, h));
}


RITUAL_EXPORT QImage::Format ctr_qt_gui_ffi_QImage_format(QImage const * this_ptr) {
  return this_ptr->format();
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat(QImage const * this_ptr, QImage::Format f, int flags) {
  return new QImage(this_ptr->convertToFormat(f, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat1(QImage * this_ptr, QImage::Format f, int flags) {
  return new QImage(this_ptr->convertToFormat(f, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat2(QImage const * this_ptr, QImage::Format f, QVector< unsigned int > const * colorTable, int flags) {
  return new QImage(this_ptr->convertToFormat(f, *colorTable, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_reinterpretAsFormat(QImage * this_ptr, QImage::Format f) {
  return this_ptr->reinterpretAsFormat(f);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_width(QImage const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_height(QImage const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QImage_size(QImage const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QImage_rect(QImage const * this_ptr) {
  return new QRect(this_ptr->rect());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_depth(QImage const * this_ptr) {
  return this_ptr->depth();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_colorCount(QImage const * this_ptr) {
  return this_ptr->colorCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_bitPlaneCount(QImage const * this_ptr) {
  return this_ptr->bitPlaneCount();
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QImage_color(QImage const * this_ptr, int i) {
  return this_ptr->color(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setColor(QImage * this_ptr, int i, unsigned int c) {
  this_ptr->setColor(i, c);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setColorCount(QImage * this_ptr, int arg1) {
  this_ptr->setColorCount(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_allGray(QImage const * this_ptr) {
  return this_ptr->allGray();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_isGrayscale(QImage const * this_ptr) {
  return this_ptr->isGrayscale();
}


RITUAL_EXPORT unsigned char * ctr_qt_gui_ffi_QImage_bits(QImage * this_ptr) {
  return this_ptr->bits();
}


RITUAL_EXPORT unsigned char const * ctr_qt_gui_ffi_QImage_bits1(QImage const * this_ptr) {
  return this_ptr->bits();
}


RITUAL_EXPORT unsigned char const * ctr_qt_gui_ffi_QImage_constBits(QImage const * this_ptr) {
  return this_ptr->constBits();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_byteCount(QImage const * this_ptr) {
  return this_ptr->byteCount();
}


RITUAL_EXPORT unsigned char * ctr_qt_gui_ffi_QImage_scanLine(QImage * this_ptr, int arg1) {
  return this_ptr->scanLine(arg1);
}


RITUAL_EXPORT unsigned char const * ctr_qt_gui_ffi_QImage_scanLine1(QImage const * this_ptr, int arg1) {
  return this_ptr->scanLine(arg1);
}


RITUAL_EXPORT unsigned char const * ctr_qt_gui_ffi_QImage_constScanLine(QImage const * this_ptr, int arg1) {
  return this_ptr->constScanLine(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_bytesPerLine(QImage const * this_ptr) {
  return this_ptr->bytesPerLine();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_valid(QImage const * this_ptr, int x, int y) {
  return this_ptr->valid(x, y);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_valid1(QImage const * this_ptr, QPoint const * pt) {
  return this_ptr->valid(*pt);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_pixelIndex(QImage const * this_ptr, int x, int y) {
  return this_ptr->pixelIndex(x, y);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_pixelIndex1(QImage const * this_ptr, QPoint const * pt) {
  return this_ptr->pixelIndex(*pt);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QImage_pixel(QImage const * this_ptr, int x, int y) {
  return this_ptr->pixel(x, y);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QImage_pixel1(QImage const * this_ptr, QPoint const * pt) {
  return this_ptr->pixel(*pt);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setPixel(QImage * this_ptr, int x, int y, unsigned int index_or_rgb) {
  this_ptr->setPixel(x, y, index_or_rgb);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setPixel1(QImage * this_ptr, QPoint const * pt, unsigned int index_or_rgb) {
  this_ptr->setPixel(*pt, index_or_rgb);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QImage_pixelColor(QImage const * this_ptr, int x, int y) {
  return new QColor(this_ptr->pixelColor(x, y));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QImage_pixelColor1(QImage const * this_ptr, QPoint const * pt) {
  return new QColor(this_ptr->pixelColor(*pt));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setPixelColor(QImage * this_ptr, int x, int y, QColor const * c) {
  this_ptr->setPixelColor(x, y, *c);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setPixelColor1(QImage * this_ptr, QPoint const * pt, QColor const * c) {
  this_ptr->setPixelColor(*pt, *c);
}


RITUAL_EXPORT QVector< unsigned int > * ctr_qt_gui_ffi_QImage_colorTable(QImage const * this_ptr) {
  return new QVector< unsigned int >(this_ptr->colorTable());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setColorTable(QImage * this_ptr, QVector< unsigned int > const * colors) {
  this_ptr->setColorTable(*colors);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QImage_devicePixelRatio(QImage const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setDevicePixelRatio(QImage * this_ptr, double scaleFactor) {
  this_ptr->setDevicePixelRatio(scaleFactor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_fill(QImage * this_ptr, unsigned int pixel) {
  this_ptr->fill(pixel);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_fill1(QImage * this_ptr, QColor const * color) {
  this_ptr->fill(*color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_fill2(QImage * this_ptr, Qt::GlobalColor color) {
  this_ptr->fill(color);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_hasAlphaChannel(QImage const * this_ptr) {
  return this_ptr->hasAlphaChannel();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setAlphaChannel(QImage * this_ptr, QImage const * alphaChannel) {
  this_ptr->setAlphaChannel(*alphaChannel);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_alphaChannel(QImage const * this_ptr) {
  return new QImage(this_ptr->alphaChannel());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createAlphaMask(QImage const * this_ptr, int flags) {
  return new QImage(this_ptr->createAlphaMask(QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createHeuristicMask(QImage const * this_ptr, bool clipTight) {
  return new QImage(this_ptr->createHeuristicMask(clipTight));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createMaskFromColor(QImage const * this_ptr, unsigned int color, Qt::MaskMode mode) {
  return new QImage(this_ptr->createMaskFromColor(color, mode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled(QImage const * this_ptr, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new QImage(this_ptr->scaled(w, h, aspectMode, mode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled1(QImage const * this_ptr, QSize const * s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new QImage(this_ptr->scaled(*s, aspectMode, mode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaledToWidth(QImage const * this_ptr, int w, Qt::TransformationMode mode) {
  return new QImage(this_ptr->scaledToWidth(w, mode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaledToHeight(QImage const * this_ptr, int h, Qt::TransformationMode mode) {
  return new QImage(this_ptr->scaledToHeight(h, mode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_transformed(QImage const * this_ptr, QMatrix const * matrix, Qt::TransformationMode mode) {
  return new QImage(this_ptr->transformed(*matrix, mode));
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QImage_trueMatrix(QMatrix const * arg1, int w, int h) {
  return new QMatrix(QImage::trueMatrix(*arg1, w, h));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_transformed1(QImage const * this_ptr, QTransform const * matrix, Qt::TransformationMode mode) {
  return new QImage(this_ptr->transformed(*matrix, mode));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QImage_trueMatrix1(QTransform const * arg1, int w, int h) {
  return new QTransform(QImage::trueMatrix(*arg1, w, h));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_mirrored(QImage const * this_ptr, bool horizontally, bool vertically) {
  return new QImage(this_ptr->mirrored(horizontally, vertically));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_rgbSwapped(QImage const * this_ptr) {
  return new QImage(this_ptr->rgbSwapped());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_invertPixels(QImage * this_ptr, QImage::InvertMode arg1) {
  this_ptr->invertPixels(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_load(QImage * this_ptr, QIODevice * device, char const * format) {
  return this_ptr->load(device, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_load1(QImage * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->load(*fileName, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_loadFromData(QImage * this_ptr, unsigned char const * buf, int len, char const * format) {
  return this_ptr->loadFromData(buf, len, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_loadFromData1(QImage * this_ptr, QByteArray const * data, char const * aformat) {
  return this_ptr->loadFromData(*data, aformat);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save(QImage const * this_ptr, QString const * fileName, char const * format, int quality) {
  return this_ptr->save(*fileName, format, quality);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save1(QImage const * this_ptr, QIODevice * device, char const * format, int quality) {
  return this_ptr->save(device, format, quality);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_fromData(unsigned char const * data, int size, char const * format) {
  return new QImage(QImage::fromData(data, size, format));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_fromData1(QByteArray const * data, char const * format) {
  return new QImage(QImage::fromData(*data, format));
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QImage_cacheKey(QImage const * this_ptr) {
  return this_ptr->cacheKey();
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QImage_paintEngine(QImage const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_dotsPerMeterX(QImage const * this_ptr) {
  return this_ptr->dotsPerMeterX();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImage_dotsPerMeterY(QImage const * this_ptr) {
  return this_ptr->dotsPerMeterY();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setDotsPerMeterX(QImage * this_ptr, int arg1) {
  this_ptr->setDotsPerMeterX(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setDotsPerMeterY(QImage * this_ptr, int arg1) {
  this_ptr->setDotsPerMeterY(arg1);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QImage_offset(QImage const * this_ptr) {
  return new QPoint(this_ptr->offset());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setOffset(QImage * this_ptr, QPoint const * arg1) {
  this_ptr->setOffset(*arg1);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QImage_textKeys(QImage const * this_ptr) {
  return new QStringList(this_ptr->textKeys());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImage_text(QImage const * this_ptr, QString const * key) {
  return new QString(this_ptr->text(*key));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setText(QImage * this_ptr, QString const * key, QString const * value) {
  this_ptr->setText(*key, *value);
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QImage_pixelFormat(QImage const * this_ptr) {
  return new QPixelFormat(this_ptr->pixelFormat());
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QImage_toPixelFormat(QImage::Format format) {
  return new QPixelFormat(QImage::toPixelFormat(format));
}


RITUAL_EXPORT QImage::Format ctr_qt_gui_ffi_QImage_toImageFormat(QPixelFormat const * format) {
  return QImage::toImageFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap6(QImage * value1, QImage * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__39(QDataStream * arg1, QImage const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__40(QDataStream * arg1, QImage * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__41(QDebug const * arg1, QImage const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap() {
  return new QPixmap();
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap2(int w, int h) {
  return new QPixmap(w, h);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap3(QSize const * arg1) {
  return new QPixmap(*arg1);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap4(QString const * fileName, char const * format, int flags) {
  return new QPixmap(*fileName, format, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap5(QPixmap const * arg1) {
  return new QPixmap(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_dQPixmap(QPixmap * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_operator_(QPixmap * this_ptr, QPixmap const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_swap(QPixmap * this_ptr, QPixmap * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QPixmap_operator_QVariant(QPixmap const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_isNull(QPixmap const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmap_devType(QPixmap const * this_ptr) {
  return this_ptr->devType();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmap_width(QPixmap const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmap_height(QPixmap const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QPixmap_size(QPixmap const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPixmap_rect(QPixmap const * this_ptr) {
  return new QRect(this_ptr->rect());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmap_depth(QPixmap const * this_ptr) {
  return this_ptr->depth();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmap_defaultDepth() {
  return QPixmap::defaultDepth();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_fill(QPixmap * this_ptr, QColor const * fillColor) {
  this_ptr->fill(*fillColor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_fill1(QPixmap * this_ptr, QPaintDevice const * device, QPoint const * ofs) {
  this_ptr->fill(device, *ofs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_fill2(QPixmap * this_ptr, QPaintDevice const * device, int xofs, int yofs) {
  this_ptr->fill(device, xofs, yofs);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QPixmap_mask(QPixmap const * this_ptr) {
  return new QBitmap(this_ptr->mask());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_setMask(QPixmap * this_ptr, QBitmap const * arg1) {
  this_ptr->setMask(*arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPixmap_devicePixelRatio(QPixmap const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_setDevicePixelRatio(QPixmap * this_ptr, double scaleFactor) {
  this_ptr->setDevicePixelRatio(scaleFactor);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_hasAlpha(QPixmap const * this_ptr) {
  return this_ptr->hasAlpha();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_hasAlphaChannel(QPixmap const * this_ptr) {
  return this_ptr->hasAlphaChannel();
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QPixmap_createHeuristicMask(QPixmap const * this_ptr, bool clipTight) {
  return new QBitmap(this_ptr->createHeuristicMask(clipTight));
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QPixmap_createMaskFromColor(QPixmap const * this_ptr, QColor const * maskColor, Qt::MaskMode mode) {
  return new QBitmap(this_ptr->createMaskFromColor(*maskColor, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWindow(unsigned long long arg1, int x, int y, int w, int h) {
  return new QPixmap(QPixmap::grabWindow(arg1, x, y, w, h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget(QObject * widget, QRect const * rect) {
  return new QPixmap(QPixmap::grabWidget(widget, *rect));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget1(QObject * widget, int x, int y, int w, int h) {
  return new QPixmap(QPixmap::grabWidget(widget, x, y, w, h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled(QPixmap const * this_ptr, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->scaled(w, h, aspectMode, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled1(QPixmap const * this_ptr, QSize const * s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->scaled(*s, aspectMode, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaledToWidth(QPixmap const * this_ptr, int w, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->scaledToWidth(w, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaledToHeight(QPixmap const * this_ptr, int h, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->scaledToHeight(h, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_transformed(QPixmap const * this_ptr, QMatrix const * arg1, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->transformed(*arg1, mode));
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QPixmap_trueMatrix(QMatrix const * m, int w, int h) {
  return new QMatrix(QPixmap::trueMatrix(*m, w, h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_transformed1(QPixmap const * this_ptr, QTransform const * arg1, Qt::TransformationMode mode) {
  return new QPixmap(this_ptr->transformed(*arg1, mode));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QPixmap_trueMatrix1(QTransform const * m, int w, int h) {
  return new QTransform(QPixmap::trueMatrix(*m, w, h));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QPixmap_toImage(QPixmap const * this_ptr) {
  return new QImage(this_ptr->toImage());
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_fromImage(QImage const * image, int flags) {
  return new QPixmap(QPixmap::fromImage(*image, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_fromImageReader(QImageReader * imageReader, int flags) {
  return new QPixmap(QPixmap::fromImageReader(imageReader, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_load(QPixmap * this_ptr, QString const * fileName, char const * format, int flags) {
  return this_ptr->load(*fileName, format, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData(QPixmap * this_ptr, unsigned char const * buf, unsigned int len, char const * format, int flags) {
  return this_ptr->loadFromData(buf, len, format, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData1(QPixmap * this_ptr, QByteArray const * data, char const * format, int flags) {
  return this_ptr->loadFromData(*data, format, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save(QPixmap const * this_ptr, QString const * fileName, char const * format, int quality) {
  return this_ptr->save(*fileName, format, quality);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save1(QPixmap const * this_ptr, QIODevice * device, char const * format, int quality) {
  return this_ptr->save(device, format, quality);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_convertFromImage(QPixmap * this_ptr, QImage const * img, int flags) {
  return this_ptr->convertFromImage(*img, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_copy(QPixmap const * this_ptr, int x, int y, int width, int height) {
  return new QPixmap(this_ptr->copy(x, y, width, height));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_copy1(QPixmap const * this_ptr, QRect const * rect) {
  return new QPixmap(this_ptr->copy(*rect));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_scroll(QPixmap * this_ptr, int dx, int dy, int x, int y, int width, int height, QRegion * exposed) {
  this_ptr->scroll(dx, dy, x, y, width, height, exposed);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_scroll1(QPixmap * this_ptr, int dx, int dy, QRect const * rect, QRegion * exposed) {
  this_ptr->scroll(dx, dy, *rect, exposed);
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QPixmap_cacheKey(QPixmap const * this_ptr) {
  return this_ptr->cacheKey();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_isDetached(QPixmap const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_detach(QPixmap * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_isQBitmap(QPixmap const * this_ptr) {
  return this_ptr->isQBitmap();
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QPixmap_paintEngine(QPixmap const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_operator_2(QPixmap const * this_ptr) {
  return this_ptr->operator!();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap7(QPixmap * value1, QPixmap * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__42(QDataStream * arg1, QPixmap const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__43(QDataStream * arg1, QPixmap * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__44(QDebug const * arg1, QPixmap const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush() {
  return new QBrush();
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush1(Qt::BrushStyle bs) {
  return new QBrush(bs);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush2(QColor const * color, Qt::BrushStyle bs) {
  return new QBrush(*color, bs);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush3(Qt::GlobalColor color, Qt::BrushStyle bs) {
  return new QBrush(color, bs);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush4(QColor const * color, QPixmap const * pixmap) {
  return new QBrush(*color, *pixmap);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush5(Qt::GlobalColor color, QPixmap const * pixmap) {
  return new QBrush(color, *pixmap);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush6(QPixmap const * pixmap) {
  return new QBrush(*pixmap);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush7(QImage const * image) {
  return new QBrush(*image);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush8(QBrush const * brush) {
  return new QBrush(*brush);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush9(QGradient const * gradient) {
  return new QBrush(*gradient);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_dQBrush(QBrush * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_operator_(QBrush * this_ptr, QBrush const * brush) {
  return &this_ptr->operator=(*brush);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_swap(QBrush * this_ptr, QBrush * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QBrush_operator_QVariant(QBrush const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT Qt::BrushStyle ctr_qt_gui_ffi_QBrush_style(QBrush const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setStyle(QBrush * this_ptr, Qt::BrushStyle arg1) {
  this_ptr->setStyle(arg1);
}


RITUAL_EXPORT QMatrix const * ctr_qt_gui_ffi_QBrush_matrix(QBrush const * this_ptr) {
  return &this_ptr->matrix();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setMatrix(QBrush * this_ptr, QMatrix const * mat) {
  this_ptr->setMatrix(*mat);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QBrush_transform(QBrush const * this_ptr) {
  return new QTransform(this_ptr->transform());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setTransform(QBrush * this_ptr, QTransform const * arg1) {
  this_ptr->setTransform(*arg1);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QBrush_texture(QBrush const * this_ptr) {
  return new QPixmap(this_ptr->texture());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setTexture(QBrush * this_ptr, QPixmap const * pixmap) {
  this_ptr->setTexture(*pixmap);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QBrush_textureImage(QBrush const * this_ptr) {
  return new QImage(this_ptr->textureImage());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setTextureImage(QBrush * this_ptr, QImage const * image) {
  this_ptr->setTextureImage(*image);
}


RITUAL_EXPORT QColor const * ctr_qt_gui_ffi_QBrush_color(QBrush const * this_ptr) {
  return &this_ptr->color();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setColor(QBrush * this_ptr, QColor const * color) {
  this_ptr->setColor(*color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBrush_setColor1(QBrush * this_ptr, Qt::GlobalColor color) {
  this_ptr->setColor(color);
}


RITUAL_EXPORT QGradient const * ctr_qt_gui_ffi_QBrush_gradient(QBrush const * this_ptr) {
  return this_ptr->gradient();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QBrush_isOpaque(QBrush const * this_ptr) {
  return this_ptr->isOpaque();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QBrush_operator__(QBrush const * this_ptr, QBrush const * b) {
  return this_ptr->operator==(*b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QBrush_isDetached(QBrush const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap8(QBrush * value1, QBrush * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__45(QDataStream * arg1, QBrush const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__46(QDataStream * arg1, QBrush * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__47(QDebug const * arg1, QBrush const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_QGradient_QGradient() {
  return new QGradient();
}


RITUAL_EXPORT QGradient::Type ctr_qt_gui_ffi_QGradient_type(QGradient const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_setSpread(QGradient * this_ptr, QGradient::Spread spread) {
  this_ptr->setSpread(spread);
}


RITUAL_EXPORT QGradient::Spread ctr_qt_gui_ffi_QGradient_spread(QGradient const * this_ptr) {
  return this_ptr->spread();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_setColorAt(QGradient * this_ptr, double pos, QColor const * color) {
  this_ptr->setColorAt(pos, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_setStops(QGradient * this_ptr, QVector< QPair< double, QColor > > const * stops) {
  this_ptr->setStops(*stops);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QGradient_stops(QGradient const * this_ptr) {
  return new QVector< QPair< double, QColor > >(this_ptr->stops());
}


RITUAL_EXPORT QGradient::CoordinateMode ctr_qt_gui_ffi_QGradient_coordinateMode(QGradient const * this_ptr) {
  return this_ptr->coordinateMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_setCoordinateMode(QGradient * this_ptr, QGradient::CoordinateMode mode) {
  this_ptr->setCoordinateMode(mode);
}


RITUAL_EXPORT QGradient::InterpolationMode ctr_qt_gui_ffi_QGradient_interpolationMode(QGradient const * this_ptr) {
  return this_ptr->interpolationMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_setInterpolationMode(QGradient * this_ptr, QGradient::InterpolationMode mode) {
  this_ptr->setInterpolationMode(mode);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGradient_operator__(QGradient const * this_ptr, QGradient const * gradient) {
  return this_ptr->operator==(*gradient);
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_QLinearGradient_QLinearGradient() {
  return new QLinearGradient();
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_QLinearGradient_QLinearGradient1(QPointF const * start, QPointF const * finalStop) {
  return new QLinearGradient(*start, *finalStop);
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_QLinearGradient_QLinearGradient2(double xStart, double yStart, double xFinalStop, double yFinalStop) {
  return new QLinearGradient(xStart, yStart, xFinalStop, yFinalStop);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QLinearGradient_start(QLinearGradient const * this_ptr) {
  return new QPointF(this_ptr->start());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QLinearGradient_setStart(QLinearGradient * this_ptr, QPointF const * start) {
  this_ptr->setStart(*start);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QLinearGradient_setStart1(QLinearGradient * this_ptr, double x, double y) {
  this_ptr->setStart(x, y);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QLinearGradient_finalStop(QLinearGradient const * this_ptr) {
  return new QPointF(this_ptr->finalStop());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QLinearGradient_setFinalStop(QLinearGradient * this_ptr, QPointF const * stop) {
  this_ptr->setFinalStop(*stop);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QLinearGradient_setFinalStop1(QLinearGradient * this_ptr, double x, double y) {
  this_ptr->setFinalStop(x, y);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient() {
  return new QRadialGradient();
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient1(QPointF const * center, double radius, QPointF const * focalPoint) {
  return new QRadialGradient(*center, radius, *focalPoint);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient2(double cx, double cy, double radius, double fx, double fy) {
  return new QRadialGradient(cx, cy, radius, fx, fy);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient3(QPointF const * center, double radius) {
  return new QRadialGradient(*center, radius);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient4(double cx, double cy, double radius) {
  return new QRadialGradient(cx, cy, radius);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient5(QPointF const * center, double centerRadius, QPointF const * focalPoint, double focalRadius) {
  return new QRadialGradient(*center, centerRadius, *focalPoint, focalRadius);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient6(double cx, double cy, double centerRadius, double fx, double fy, double focalRadius) {
  return new QRadialGradient(cx, cy, centerRadius, fx, fy, focalRadius);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QRadialGradient_center(QRadialGradient const * this_ptr) {
  return new QPointF(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setCenter(QRadialGradient * this_ptr, QPointF const * center) {
  this_ptr->setCenter(*center);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setCenter1(QRadialGradient * this_ptr, double x, double y) {
  this_ptr->setCenter(x, y);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QRadialGradient_focalPoint(QRadialGradient const * this_ptr) {
  return new QPointF(this_ptr->focalPoint());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setFocalPoint(QRadialGradient * this_ptr, QPointF const * focalPoint) {
  this_ptr->setFocalPoint(*focalPoint);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setFocalPoint1(QRadialGradient * this_ptr, double x, double y) {
  this_ptr->setFocalPoint(x, y);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRadialGradient_radius(QRadialGradient const * this_ptr) {
  return this_ptr->radius();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setRadius(QRadialGradient * this_ptr, double radius) {
  this_ptr->setRadius(radius);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRadialGradient_centerRadius(QRadialGradient const * this_ptr) {
  return this_ptr->centerRadius();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setCenterRadius(QRadialGradient * this_ptr, double radius) {
  this_ptr->setCenterRadius(radius);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRadialGradient_focalRadius(QRadialGradient const * this_ptr) {
  return this_ptr->focalRadius();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_setFocalRadius(QRadialGradient * this_ptr, double radius) {
  this_ptr->setFocalRadius(radius);
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_QConicalGradient_QConicalGradient() {
  return new QConicalGradient();
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_QConicalGradient_QConicalGradient1(QPointF const * center, double startAngle) {
  return new QConicalGradient(*center, startAngle);
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_QConicalGradient_QConicalGradient2(double cx, double cy, double startAngle) {
  return new QConicalGradient(cx, cy, startAngle);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QConicalGradient_center(QConicalGradient const * this_ptr) {
  return new QPointF(this_ptr->center());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QConicalGradient_setCenter(QConicalGradient * this_ptr, QPointF const * center) {
  this_ptr->setCenter(*center);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QConicalGradient_setCenter1(QConicalGradient * this_ptr, double x, double y) {
  this_ptr->setCenter(x, y);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QConicalGradient_angle(QConicalGradient const * this_ptr) {
  return this_ptr->angle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QConicalGradient_setAngle(QConicalGradient * this_ptr, double angle) {
  this_ptr->setAngle(angle);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__48(QDataStream * arg1, QPen const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__49(QDataStream * arg1, QPen * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen() {
  return new QPen();
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen1(Qt::PenStyle arg1) {
  return new QPen(arg1);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen2(QColor const * color) {
  return new QPen(*color);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen3(QBrush const * brush, double width, Qt::PenStyle s, Qt::PenCapStyle c, Qt::PenJoinStyle j) {
  return new QPen(*brush, width, s, c, j);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen4(QPen const * pen) {
  return new QPen(*pen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_dQPen(QPen * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_operator_(QPen * this_ptr, QPen const * pen) {
  return &this_ptr->operator=(*pen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_swap(QPen * this_ptr, QPen * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT Qt::PenStyle ctr_qt_gui_ffi_QPen_style(QPen const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setStyle(QPen * this_ptr, Qt::PenStyle arg1) {
  this_ptr->setStyle(arg1);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QPen_dashPattern(QPen const * this_ptr) {
  return new QVector< double >(this_ptr->dashPattern());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setDashPattern(QPen * this_ptr, QVector< double > const * pattern) {
  this_ptr->setDashPattern(*pattern);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPen_dashOffset(QPen const * this_ptr) {
  return this_ptr->dashOffset();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setDashOffset(QPen * this_ptr, double doffset) {
  this_ptr->setDashOffset(doffset);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPen_miterLimit(QPen const * this_ptr) {
  return this_ptr->miterLimit();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setMiterLimit(QPen * this_ptr, double limit) {
  this_ptr->setMiterLimit(limit);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPen_widthF(QPen const * this_ptr) {
  return this_ptr->widthF();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setWidthF(QPen * this_ptr, double width) {
  this_ptr->setWidthF(width);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPen_width(QPen const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setWidth(QPen * this_ptr, int width) {
  this_ptr->setWidth(width);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QPen_color(QPen const * this_ptr) {
  return new QColor(this_ptr->color());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setColor(QPen * this_ptr, QColor const * color) {
  this_ptr->setColor(*color);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QPen_brush(QPen const * this_ptr) {
  return new QBrush(this_ptr->brush());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setBrush(QPen * this_ptr, QBrush const * brush) {
  this_ptr->setBrush(*brush);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPen_isSolid(QPen const * this_ptr) {
  return this_ptr->isSolid();
}


RITUAL_EXPORT Qt::PenCapStyle ctr_qt_gui_ffi_QPen_capStyle(QPen const * this_ptr) {
  return this_ptr->capStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setCapStyle(QPen * this_ptr, Qt::PenCapStyle pcs) {
  this_ptr->setCapStyle(pcs);
}


RITUAL_EXPORT Qt::PenJoinStyle ctr_qt_gui_ffi_QPen_joinStyle(QPen const * this_ptr) {
  return this_ptr->joinStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setJoinStyle(QPen * this_ptr, Qt::PenJoinStyle pcs) {
  this_ptr->setJoinStyle(pcs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPen_isCosmetic(QPen const * this_ptr) {
  return this_ptr->isCosmetic();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPen_setCosmetic(QPen * this_ptr, bool cosmetic) {
  this_ptr->setCosmetic(cosmetic);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPen_operator__(QPen const * this_ptr, QPen const * p) {
  return this_ptr->operator==(*p);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QPen_operator_QVariant(QPen const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPen_isDetached(QPen * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap9(QPen * value1, QPen * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__50(QDebug const * arg1, QPen const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QTextOption_Tab_Tab() {
  return new QTextOption::Tab();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QTextOption_Tab_Tab1(double pos, QTextOption::TabType tabType, QChar const * delim) {
  return new QTextOption::Tab(pos, tabType, *delim);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextOption_Tab_operator__(QTextOption::Tab const * this_ptr, QTextOption::Tab const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QTextOption_QTextOption() {
  return new QTextOption();
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QTextOption_QTextOption1(int alignment) {
  return new QTextOption(QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_dQTextOption(QTextOption * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QTextOption_QTextOption2(QTextOption const * o) {
  return new QTextOption(*o);
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QTextOption_operator_(QTextOption * this_ptr, QTextOption const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setAlignment(QTextOption * this_ptr, int alignment) {
  this_ptr->setAlignment(QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextOption_alignment(QTextOption const * this_ptr) {
  return int(this_ptr->alignment());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setTextDirection(QTextOption * this_ptr, Qt::LayoutDirection aDirection) {
  this_ptr->setTextDirection(aDirection);
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QTextOption_textDirection(QTextOption const * this_ptr) {
  return this_ptr->textDirection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setWrapMode(QTextOption * this_ptr, QTextOption::WrapMode wrap) {
  this_ptr->setWrapMode(wrap);
}


RITUAL_EXPORT QTextOption::WrapMode ctr_qt_gui_ffi_QTextOption_wrapMode(QTextOption const * this_ptr) {
  return this_ptr->wrapMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setFlags(QTextOption * this_ptr, int flags) {
  this_ptr->setFlags(QFlags< QTextOption::Flag >(flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextOption_flags(QTextOption const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setTabStop(QTextOption * this_ptr, double tabStop) {
  this_ptr->setTabStop(tabStop);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextOption_tabStop(QTextOption const * this_ptr) {
  return this_ptr->tabStop();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setTabArray(QTextOption * this_ptr, QList< double > const * tabStops) {
  this_ptr->setTabArray(*tabStops);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QTextOption_tabArray(QTextOption const * this_ptr) {
  return new QList< double >(this_ptr->tabArray());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setTabs(QTextOption * this_ptr, QList< QTextOption::Tab > const * tabStops) {
  this_ptr->setTabs(*tabStops);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QTextOption_tabs(QTextOption const * this_ptr) {
  return new QList< QTextOption::Tab >(this_ptr->tabs());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setUseDesignMetrics(QTextOption * this_ptr, bool b) {
  this_ptr->setUseDesignMetrics(b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextOption_useDesignMetrics(QTextOption const * this_ptr) {
  return this_ptr->useDesignMetrics();
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__51(QDataStream * arg1, QTextLength const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__52(QDataStream * arg1, QTextLength * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__53(QDebug const * arg1, QTextLength const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextLength_QTextLength() {
  return new QTextLength();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextLength_QTextLength1(QTextLength::Type type, double value) {
  return new QTextLength(type, value);
}


RITUAL_EXPORT QTextLength::Type ctr_qt_gui_ffi_QTextLength_type(QTextLength const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLength_value(QTextLength const * this_ptr, double maximumLength) {
  return this_ptr->value(maximumLength);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLength_rawValue(QTextLength const * this_ptr) {
  return this_ptr->rawValue();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextLength_operator__(QTextLength const * this_ptr, QTextLength const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextLength_operator_QVariant(QTextLength const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__54(QDataStream * arg1, QTextFormat const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__55(QDataStream * arg1, QTextFormat * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__56(QDebug const * arg1, QTextFormat const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextFormat_QTextFormat() {
  return new QTextFormat();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextFormat_QTextFormat1(int type) {
  return new QTextFormat(type);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextFormat_QTextFormat2(QTextFormat const * rhs) {
  return new QTextFormat(*rhs);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextFormat_operator_(QTextFormat * this_ptr, QTextFormat const * rhs) {
  return &this_ptr->operator=(*rhs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_dQTextFormat(QTextFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_swap(QTextFormat * this_ptr, QTextFormat * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_merge(QTextFormat * this_ptr, QTextFormat const * other) {
  this_ptr->merge(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isValid(QTextFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isEmpty(QTextFormat const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFormat_type(QTextFormat const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFormat_objectIndex(QTextFormat const * this_ptr) {
  return this_ptr->objectIndex();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setObjectIndex(QTextFormat * this_ptr, int object) {
  this_ptr->setObjectIndex(object);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextFormat_property(QTextFormat const * this_ptr, int propertyId) {
  return new QVariant(this_ptr->property(propertyId));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setProperty(QTextFormat * this_ptr, int propertyId, QVariant const * value) {
  this_ptr->setProperty(propertyId, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_clearProperty(QTextFormat * this_ptr, int propertyId) {
  this_ptr->clearProperty(propertyId);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_hasProperty(QTextFormat const * this_ptr, int propertyId) {
  return this_ptr->hasProperty(propertyId);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_boolProperty(QTextFormat const * this_ptr, int propertyId) {
  return this_ptr->boolProperty(propertyId);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFormat_intProperty(QTextFormat const * this_ptr, int propertyId) {
  return this_ptr->intProperty(propertyId);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFormat_doubleProperty(QTextFormat const * this_ptr, int propertyId) {
  return this_ptr->doubleProperty(propertyId);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextFormat_stringProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QString(this_ptr->stringProperty(propertyId));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QTextFormat_colorProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QColor(this_ptr->colorProperty(propertyId));
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QTextFormat_penProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QPen(this_ptr->penProperty(propertyId));
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextFormat_brushProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QBrush(this_ptr->brushProperty(propertyId));
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextFormat_lengthProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QTextLength(this_ptr->lengthProperty(propertyId));
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QTextFormat_lengthVectorProperty(QTextFormat const * this_ptr, int propertyId) {
  return new QVector< QTextLength >(this_ptr->lengthVectorProperty(propertyId));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setProperty1(QTextFormat * this_ptr, int propertyId, QVector< QTextLength > const * lengths) {
  this_ptr->setProperty(propertyId, *lengths);
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_gui_ffi_QTextFormat_properties(QTextFormat const * this_ptr) {
  return new QMap< int, QVariant >(this_ptr->properties());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFormat_propertyCount(QTextFormat const * this_ptr) {
  return this_ptr->propertyCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setObjectType(QTextFormat * this_ptr, int type) {
  this_ptr->setObjectType(type);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFormat_objectType(QTextFormat const * this_ptr) {
  return this_ptr->objectType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isCharFormat(QTextFormat const * this_ptr) {
  return this_ptr->isCharFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isBlockFormat(QTextFormat const * this_ptr) {
  return this_ptr->isBlockFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isListFormat(QTextFormat const * this_ptr) {
  return this_ptr->isListFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isFrameFormat(QTextFormat const * this_ptr) {
  return this_ptr->isFrameFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isImageFormat(QTextFormat const * this_ptr) {
  return this_ptr->isImageFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isTableFormat(QTextFormat const * this_ptr) {
  return this_ptr->isTableFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_isTableCellFormat(QTextFormat const * this_ptr) {
  return this_ptr->isTableCellFormat();
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextFormat_toBlockFormat(QTextFormat const * this_ptr) {
  return new QTextBlockFormat(this_ptr->toBlockFormat());
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextFormat_toCharFormat(QTextFormat const * this_ptr) {
  return new QTextCharFormat(this_ptr->toCharFormat());
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_QTextFormat_toListFormat(QTextFormat const * this_ptr) {
  return new QTextListFormat(this_ptr->toListFormat());
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_QTextFormat_toTableFormat(QTextFormat const * this_ptr) {
  return new QTextTableFormat(this_ptr->toTableFormat());
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_QTextFormat_toFrameFormat(QTextFormat const * this_ptr) {
  return new QTextFrameFormat(this_ptr->toFrameFormat());
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_QTextFormat_toImageFormat(QTextFormat const * this_ptr) {
  return new QTextImageFormat(this_ptr->toImageFormat());
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_QTextFormat_toTableCellFormat(QTextFormat const * this_ptr) {
  return new QTextTableCellFormat(this_ptr->toTableCellFormat());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFormat_operator__(QTextFormat const * this_ptr, QTextFormat const * rhs) {
  return this_ptr->operator==(*rhs);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextFormat_operator_QVariant(QTextFormat const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setLayoutDirection(QTextFormat * this_ptr, Qt::LayoutDirection direction) {
  this_ptr->setLayoutDirection(direction);
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QTextFormat_layoutDirection(QTextFormat const * this_ptr) {
  return this_ptr->layoutDirection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setBackground(QTextFormat * this_ptr, QBrush const * brush) {
  this_ptr->setBackground(*brush);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextFormat_background(QTextFormat const * this_ptr) {
  return new QBrush(this_ptr->background());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_clearBackground(QTextFormat * this_ptr) {
  this_ptr->clearBackground();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_setForeground(QTextFormat * this_ptr, QBrush const * brush) {
  this_ptr->setForeground(*brush);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextFormat_foreground(QTextFormat const * this_ptr) {
  return new QBrush(this_ptr->foreground());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFormat_clearForeground(QTextFormat * this_ptr) {
  this_ptr->clearForeground();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap10(QTextFormat * value1, QTextFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextCharFormat_QTextCharFormat() {
  return new QTextCharFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_isValid(QTextCharFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFont(QTextCharFormat * this_ptr, QFont const * font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior) {
  this_ptr->setFont(*font, behavior);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFont1(QTextCharFormat * this_ptr, QFont const * font) {
  this_ptr->setFont(*font);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QTextCharFormat_font(QTextCharFormat const * this_ptr) {
  return new QFont(this_ptr->font());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontFamily(QTextCharFormat * this_ptr, QString const * family) {
  this_ptr->setFontFamily(*family);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextCharFormat_fontFamily(QTextCharFormat const * this_ptr) {
  return new QString(this_ptr->fontFamily());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontPointSize(QTextCharFormat * this_ptr, double size) {
  this_ptr->setFontPointSize(size);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextCharFormat_fontPointSize(QTextCharFormat const * this_ptr) {
  return this_ptr->fontPointSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontWeight(QTextCharFormat * this_ptr, int weight) {
  this_ptr->setFontWeight(weight);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCharFormat_fontWeight(QTextCharFormat const * this_ptr) {
  return this_ptr->fontWeight();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontItalic(QTextCharFormat * this_ptr, bool italic) {
  this_ptr->setFontItalic(italic);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontItalic(QTextCharFormat const * this_ptr) {
  return this_ptr->fontItalic();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontCapitalization(QTextCharFormat * this_ptr, QFont::Capitalization capitalization) {
  this_ptr->setFontCapitalization(capitalization);
}


RITUAL_EXPORT QFont::Capitalization ctr_qt_gui_ffi_QTextCharFormat_fontCapitalization(QTextCharFormat const * this_ptr) {
  return this_ptr->fontCapitalization();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontLetterSpacingType(QTextCharFormat * this_ptr, QFont::SpacingType letterSpacingType) {
  this_ptr->setFontLetterSpacingType(letterSpacingType);
}


RITUAL_EXPORT QFont::SpacingType ctr_qt_gui_ffi_QTextCharFormat_fontLetterSpacingType(QTextCharFormat const * this_ptr) {
  return this_ptr->fontLetterSpacingType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontLetterSpacing(QTextCharFormat * this_ptr, double spacing) {
  this_ptr->setFontLetterSpacing(spacing);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextCharFormat_fontLetterSpacing(QTextCharFormat const * this_ptr) {
  return this_ptr->fontLetterSpacing();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontWordSpacing(QTextCharFormat * this_ptr, double spacing) {
  this_ptr->setFontWordSpacing(spacing);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextCharFormat_fontWordSpacing(QTextCharFormat const * this_ptr) {
  return this_ptr->fontWordSpacing();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontUnderline(QTextCharFormat * this_ptr, bool underline) {
  this_ptr->setFontUnderline(underline);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontUnderline(QTextCharFormat const * this_ptr) {
  return this_ptr->fontUnderline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontOverline(QTextCharFormat * this_ptr, bool overline) {
  this_ptr->setFontOverline(overline);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontOverline(QTextCharFormat const * this_ptr) {
  return this_ptr->fontOverline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStrikeOut(QTextCharFormat * this_ptr, bool strikeOut) {
  this_ptr->setFontStrikeOut(strikeOut);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontStrikeOut(QTextCharFormat const * this_ptr) {
  return this_ptr->fontStrikeOut();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setUnderlineColor(QTextCharFormat * this_ptr, QColor const * color) {
  this_ptr->setUnderlineColor(*color);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QTextCharFormat_underlineColor(QTextCharFormat const * this_ptr) {
  return new QColor(this_ptr->underlineColor());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontFixedPitch(QTextCharFormat * this_ptr, bool fixedPitch) {
  this_ptr->setFontFixedPitch(fixedPitch);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontFixedPitch(QTextCharFormat const * this_ptr) {
  return this_ptr->fontFixedPitch();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStretch(QTextCharFormat * this_ptr, int factor) {
  this_ptr->setFontStretch(factor);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCharFormat_fontStretch(QTextCharFormat const * this_ptr) {
  return this_ptr->fontStretch();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStyleHint(QTextCharFormat * this_ptr, QFont::StyleHint hint, QFont::StyleStrategy strategy) {
  this_ptr->setFontStyleHint(hint, strategy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStyleStrategy(QTextCharFormat * this_ptr, QFont::StyleStrategy strategy) {
  this_ptr->setFontStyleStrategy(strategy);
}


RITUAL_EXPORT QFont::StyleHint ctr_qt_gui_ffi_QTextCharFormat_fontStyleHint(QTextCharFormat const * this_ptr) {
  return this_ptr->fontStyleHint();
}


RITUAL_EXPORT QFont::StyleStrategy ctr_qt_gui_ffi_QTextCharFormat_fontStyleStrategy(QTextCharFormat const * this_ptr) {
  return this_ptr->fontStyleStrategy();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontHintingPreference(QTextCharFormat * this_ptr, QFont::HintingPreference hintingPreference) {
  this_ptr->setFontHintingPreference(hintingPreference);
}


RITUAL_EXPORT QFont::HintingPreference ctr_qt_gui_ffi_QTextCharFormat_fontHintingPreference(QTextCharFormat const * this_ptr) {
  return this_ptr->fontHintingPreference();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontKerning(QTextCharFormat * this_ptr, bool enable) {
  this_ptr->setFontKerning(enable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_fontKerning(QTextCharFormat const * this_ptr) {
  return this_ptr->fontKerning();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setUnderlineStyle(QTextCharFormat * this_ptr, QTextCharFormat::UnderlineStyle style) {
  this_ptr->setUnderlineStyle(style);
}


RITUAL_EXPORT QTextCharFormat::UnderlineStyle ctr_qt_gui_ffi_QTextCharFormat_underlineStyle(QTextCharFormat const * this_ptr) {
  return this_ptr->underlineStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setVerticalAlignment(QTextCharFormat * this_ptr, QTextCharFormat::VerticalAlignment alignment) {
  this_ptr->setVerticalAlignment(alignment);
}


RITUAL_EXPORT QTextCharFormat::VerticalAlignment ctr_qt_gui_ffi_QTextCharFormat_verticalAlignment(QTextCharFormat const * this_ptr) {
  return this_ptr->verticalAlignment();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setTextOutline(QTextCharFormat * this_ptr, QPen const * pen) {
  this_ptr->setTextOutline(*pen);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QTextCharFormat_textOutline(QTextCharFormat const * this_ptr) {
  return new QPen(this_ptr->textOutline());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setToolTip(QTextCharFormat * this_ptr, QString const * tip) {
  this_ptr->setToolTip(*tip);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextCharFormat_toolTip(QTextCharFormat const * this_ptr) {
  return new QString(this_ptr->toolTip());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setAnchor(QTextCharFormat * this_ptr, bool anchor) {
  this_ptr->setAnchor(anchor);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCharFormat_isAnchor(QTextCharFormat const * this_ptr) {
  return this_ptr->isAnchor();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setAnchorHref(QTextCharFormat * this_ptr, QString const * value) {
  this_ptr->setAnchorHref(*value);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextCharFormat_anchorHref(QTextCharFormat const * this_ptr) {
  return new QString(this_ptr->anchorHref());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setAnchorName(QTextCharFormat * this_ptr, QString const * name) {
  this_ptr->setAnchorName(*name);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextCharFormat_anchorName(QTextCharFormat const * this_ptr) {
  return new QString(this_ptr->anchorName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setAnchorNames(QTextCharFormat * this_ptr, QStringList const * names) {
  this_ptr->setAnchorNames(*names);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QTextCharFormat_anchorNames(QTextCharFormat const * this_ptr) {
  return new QStringList(this_ptr->anchorNames());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setTableCellRowSpan(QTextCharFormat * this_ptr, int tableCellRowSpan) {
  this_ptr->setTableCellRowSpan(tableCellRowSpan);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCharFormat_tableCellRowSpan(QTextCharFormat const * this_ptr) {
  return this_ptr->tableCellRowSpan();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setTableCellColumnSpan(QTextCharFormat * this_ptr, int tableCellColumnSpan) {
  this_ptr->setTableCellColumnSpan(tableCellColumnSpan);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCharFormat_tableCellColumnSpan(QTextCharFormat const * this_ptr) {
  return this_ptr->tableCellColumnSpan();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap11(QTextCharFormat * value1, QTextCharFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextBlockFormat_QTextBlockFormat() {
  return new QTextBlockFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlockFormat_isValid(QTextBlockFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setAlignment(QTextBlockFormat * this_ptr, int alignment) {
  this_ptr->setAlignment(QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockFormat_alignment(QTextBlockFormat const * this_ptr) {
  return int(this_ptr->alignment());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setTopMargin(QTextBlockFormat * this_ptr, double margin) {
  this_ptr->setTopMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_topMargin(QTextBlockFormat const * this_ptr) {
  return this_ptr->topMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setBottomMargin(QTextBlockFormat * this_ptr, double margin) {
  this_ptr->setBottomMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_bottomMargin(QTextBlockFormat const * this_ptr) {
  return this_ptr->bottomMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setLeftMargin(QTextBlockFormat * this_ptr, double margin) {
  this_ptr->setLeftMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_leftMargin(QTextBlockFormat const * this_ptr) {
  return this_ptr->leftMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setRightMargin(QTextBlockFormat * this_ptr, double margin) {
  this_ptr->setRightMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_rightMargin(QTextBlockFormat const * this_ptr) {
  return this_ptr->rightMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setTextIndent(QTextBlockFormat * this_ptr, double aindent) {
  this_ptr->setTextIndent(aindent);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_textIndent(QTextBlockFormat const * this_ptr) {
  return this_ptr->textIndent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setIndent(QTextBlockFormat * this_ptr, int indent) {
  this_ptr->setIndent(indent);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockFormat_indent(QTextBlockFormat const * this_ptr) {
  return this_ptr->indent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setLineHeight(QTextBlockFormat * this_ptr, double height, int heightType) {
  this_ptr->setLineHeight(height, heightType);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_lineHeight(QTextBlockFormat const * this_ptr, double scriptLineHeight, double scaling) {
  return this_ptr->lineHeight(scriptLineHeight, scaling);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextBlockFormat_lineHeight1(QTextBlockFormat const * this_ptr) {
  return this_ptr->lineHeight();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockFormat_lineHeightType(QTextBlockFormat const * this_ptr) {
  return this_ptr->lineHeightType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setNonBreakableLines(QTextBlockFormat * this_ptr, bool b) {
  this_ptr->setNonBreakableLines(b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlockFormat_nonBreakableLines(QTextBlockFormat const * this_ptr) {
  return this_ptr->nonBreakableLines();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setPageBreakPolicy(QTextBlockFormat * this_ptr, int flags) {
  this_ptr->setPageBreakPolicy(QFlags< QTextFormat::PageBreakFlag >(flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockFormat_pageBreakPolicy(QTextBlockFormat const * this_ptr) {
  return int(this_ptr->pageBreakPolicy());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setTabPositions(QTextBlockFormat * this_ptr, QList< QTextOption::Tab > const * tabs) {
  this_ptr->setTabPositions(*tabs);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QTextBlockFormat_tabPositions(QTextBlockFormat const * this_ptr) {
  return new QList< QTextOption::Tab >(this_ptr->tabPositions());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap12(QTextBlockFormat * value1, QTextBlockFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_QTextListFormat_QTextListFormat() {
  return new QTextListFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextListFormat_isValid(QTextListFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextListFormat_setStyle(QTextListFormat * this_ptr, QTextListFormat::Style style) {
  this_ptr->setStyle(style);
}


RITUAL_EXPORT QTextListFormat::Style ctr_qt_gui_ffi_QTextListFormat_style(QTextListFormat const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextListFormat_setIndent(QTextListFormat * this_ptr, int indent) {
  this_ptr->setIndent(indent);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextListFormat_indent(QTextListFormat const * this_ptr) {
  return this_ptr->indent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextListFormat_setNumberPrefix(QTextListFormat * this_ptr, QString const * numberPrefix) {
  this_ptr->setNumberPrefix(*numberPrefix);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextListFormat_numberPrefix(QTextListFormat const * this_ptr) {
  return new QString(this_ptr->numberPrefix());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextListFormat_setNumberSuffix(QTextListFormat * this_ptr, QString const * numberSuffix) {
  this_ptr->setNumberSuffix(*numberSuffix);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextListFormat_numberSuffix(QTextListFormat const * this_ptr) {
  return new QString(this_ptr->numberSuffix());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap13(QTextListFormat * value1, QTextListFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_QTextImageFormat_QTextImageFormat() {
  return new QTextImageFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextImageFormat_isValid(QTextImageFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_setName(QTextImageFormat * this_ptr, QString const * name) {
  this_ptr->setName(*name);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextImageFormat_name(QTextImageFormat const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_setWidth(QTextImageFormat * this_ptr, double width) {
  this_ptr->setWidth(width);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextImageFormat_width(QTextImageFormat const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_setHeight(QTextImageFormat * this_ptr, double height) {
  this_ptr->setHeight(height);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextImageFormat_height(QTextImageFormat const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap14(QTextImageFormat * value1, QTextImageFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_QTextFrameFormat_QTextFrameFormat() {
  return new QTextFrameFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFrameFormat_isValid(QTextFrameFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setPosition(QTextFrameFormat * this_ptr, QTextFrameFormat::Position f) {
  this_ptr->setPosition(f);
}


RITUAL_EXPORT QTextFrameFormat::Position ctr_qt_gui_ffi_QTextFrameFormat_position(QTextFrameFormat const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setBorder(QTextFrameFormat * this_ptr, double border) {
  this_ptr->setBorder(border);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_border(QTextFrameFormat const * this_ptr) {
  return this_ptr->border();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setBorderBrush(QTextFrameFormat * this_ptr, QBrush const * brush) {
  this_ptr->setBorderBrush(*brush);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextFrameFormat_borderBrush(QTextFrameFormat const * this_ptr) {
  return new QBrush(this_ptr->borderBrush());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setBorderStyle(QTextFrameFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setBorderStyle(style);
}


RITUAL_EXPORT QTextFrameFormat::BorderStyle ctr_qt_gui_ffi_QTextFrameFormat_borderStyle(QTextFrameFormat const * this_ptr) {
  return this_ptr->borderStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setMargin(QTextFrameFormat * this_ptr, double margin) {
  this_ptr->setMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_margin(QTextFrameFormat const * this_ptr) {
  return this_ptr->margin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setTopMargin(QTextFrameFormat * this_ptr, double margin) {
  this_ptr->setTopMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_topMargin(QTextFrameFormat const * this_ptr) {
  return this_ptr->topMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setBottomMargin(QTextFrameFormat * this_ptr, double margin) {
  this_ptr->setBottomMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_bottomMargin(QTextFrameFormat const * this_ptr) {
  return this_ptr->bottomMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setLeftMargin(QTextFrameFormat * this_ptr, double margin) {
  this_ptr->setLeftMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_leftMargin(QTextFrameFormat const * this_ptr) {
  return this_ptr->leftMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setRightMargin(QTextFrameFormat * this_ptr, double margin) {
  this_ptr->setRightMargin(margin);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_rightMargin(QTextFrameFormat const * this_ptr) {
  return this_ptr->rightMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setPadding(QTextFrameFormat * this_ptr, double padding) {
  this_ptr->setPadding(padding);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextFrameFormat_padding(QTextFrameFormat const * this_ptr) {
  return this_ptr->padding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setWidth(QTextFrameFormat * this_ptr, double width) {
  this_ptr->setWidth(width);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setWidth1(QTextFrameFormat * this_ptr, QTextLength const * length) {
  this_ptr->setWidth(*length);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextFrameFormat_width(QTextFrameFormat const * this_ptr) {
  return new QTextLength(this_ptr->width());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setHeight(QTextFrameFormat * this_ptr, double height) {
  this_ptr->setHeight(height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setHeight1(QTextFrameFormat * this_ptr, QTextLength const * height) {
  this_ptr->setHeight(*height);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextFrameFormat_height(QTextFrameFormat const * this_ptr) {
  return new QTextLength(this_ptr->height());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_setPageBreakPolicy(QTextFrameFormat * this_ptr, int flags) {
  this_ptr->setPageBreakPolicy(QFlags< QTextFormat::PageBreakFlag >(flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFrameFormat_pageBreakPolicy(QTextFrameFormat const * this_ptr) {
  return int(this_ptr->pageBreakPolicy());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap15(QTextFrameFormat * value1, QTextFrameFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_QTextTableFormat_QTextTableFormat() {
  return new QTextTableFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextTableFormat_isValid(QTextTableFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableFormat_columns(QTextTableFormat const * this_ptr) {
  return this_ptr->columns();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setColumns(QTextTableFormat * this_ptr, int columns) {
  this_ptr->setColumns(columns);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setColumnWidthConstraints(QTextTableFormat * this_ptr, QVector< QTextLength > const * constraints) {
  this_ptr->setColumnWidthConstraints(*constraints);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QTextTableFormat_columnWidthConstraints(QTextTableFormat const * this_ptr) {
  return new QVector< QTextLength >(this_ptr->columnWidthConstraints());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_clearColumnWidthConstraints(QTextTableFormat * this_ptr) {
  this_ptr->clearColumnWidthConstraints();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableFormat_cellSpacing(QTextTableFormat const * this_ptr) {
  return this_ptr->cellSpacing();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setCellSpacing(QTextTableFormat * this_ptr, double spacing) {
  this_ptr->setCellSpacing(spacing);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableFormat_cellPadding(QTextTableFormat const * this_ptr) {
  return this_ptr->cellPadding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setCellPadding(QTextTableFormat * this_ptr, double padding) {
  this_ptr->setCellPadding(padding);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setAlignment(QTextTableFormat * this_ptr, int alignment) {
  this_ptr->setAlignment(QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableFormat_alignment(QTextTableFormat const * this_ptr) {
  return int(this_ptr->alignment());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setHeaderRowCount(QTextTableFormat * this_ptr, int count) {
  this_ptr->setHeaderRowCount(count);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableFormat_headerRowCount(QTextTableFormat const * this_ptr) {
  return this_ptr->headerRowCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap16(QTextTableFormat * value1, QTextTableFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_QTextTableCellFormat_QTextTableCellFormat() {
  return new QTextTableCellFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextTableCellFormat_isValid(QTextTableCellFormat const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setTopPadding(QTextTableCellFormat * this_ptr, double padding) {
  this_ptr->setTopPadding(padding);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_topPadding(QTextTableCellFormat const * this_ptr) {
  return this_ptr->topPadding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBottomPadding(QTextTableCellFormat * this_ptr, double padding) {
  this_ptr->setBottomPadding(padding);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_bottomPadding(QTextTableCellFormat const * this_ptr) {
  return this_ptr->bottomPadding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setLeftPadding(QTextTableCellFormat * this_ptr, double padding) {
  this_ptr->setLeftPadding(padding);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_leftPadding(QTextTableCellFormat const * this_ptr) {
  return this_ptr->leftPadding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setRightPadding(QTextTableCellFormat * this_ptr, double padding) {
  this_ptr->setRightPadding(padding);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_rightPadding(QTextTableCellFormat const * this_ptr) {
  return this_ptr->rightPadding();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setPadding(QTextTableCellFormat * this_ptr, double padding) {
  this_ptr->setPadding(padding);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap17(QTextTableCellFormat * value1, QTextTableCellFormat * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QFontDatabase_standardSizes() {
  return new QList< int >(QFontDatabase::standardSizes());
}


RITUAL_EXPORT QFontDatabase * ctr_qt_gui_ffi_QFontDatabase_QFontDatabase() {
  return new QFontDatabase();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QFontDatabase_writingSystems(QFontDatabase const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->writingSystems());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QFontDatabase_writingSystems1(QFontDatabase const * this_ptr, QString const * family) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->writingSystems(*family));
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFontDatabase_families(QFontDatabase const * this_ptr, QFontDatabase::WritingSystem writingSystem) {
  return new QStringList(this_ptr->families(writingSystem));
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFontDatabase_styles(QFontDatabase const * this_ptr, QString const * family) {
  return new QStringList(this_ptr->styles(*family));
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QFontDatabase_pointSizes(QFontDatabase * this_ptr, QString const * family, QString const * style) {
  return new QList< int >(this_ptr->pointSizes(*family, *style));
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QFontDatabase_smoothSizes(QFontDatabase * this_ptr, QString const * family, QString const * style) {
  return new QList< int >(this_ptr->smoothSizes(*family, *style));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontDatabase_styleString(QFontDatabase * this_ptr, QFont const * font) {
  return new QString(this_ptr->styleString(*font));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontDatabase_styleString1(QFontDatabase * this_ptr, QFontInfo const * fontInfo) {
  return new QString(this_ptr->styleString(*fontInfo));
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFontDatabase_font(QFontDatabase const * this_ptr, QString const * family, QString const * style, int pointSize) {
  return new QFont(this_ptr->font(*family, *style, pointSize));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isBitmapScalable(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->isBitmapScalable(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isSmoothlyScalable(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->isSmoothlyScalable(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isScalable(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->isScalable(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isFixedPitch(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->isFixedPitch(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_italic(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->italic(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_bold(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->bold(*family, *style);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontDatabase_weight(QFontDatabase const * this_ptr, QString const * family, QString const * style) {
  return this_ptr->weight(*family, *style);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_hasFamily(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->hasFamily(*family);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isPrivateFamily(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->isPrivateFamily(*family);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontDatabase_writingSystemName(QFontDatabase::WritingSystem writingSystem) {
  return new QString(QFontDatabase::writingSystemName(writingSystem));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontDatabase_writingSystemSample(QFontDatabase::WritingSystem writingSystem) {
  return new QString(QFontDatabase::writingSystemSample(writingSystem));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontDatabase_addApplicationFont(QString const * fileName) {
  return QFontDatabase::addApplicationFont(*fileName);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontDatabase_addApplicationFontFromData(QByteArray const * fontData) {
  return QFontDatabase::addApplicationFontFromData(*fontData);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFontDatabase_applicationFontFamilies(int id) {
  return new QStringList(QFontDatabase::applicationFontFamilies(id));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_removeApplicationFont(int id) {
  return QFontDatabase::removeApplicationFont(id);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_removeAllApplicationFonts() {
  return QFontDatabase::removeAllApplicationFonts();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_supportsThreadedFontRendering() {
  return QFontDatabase::supportsThreadedFontRendering();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFontDatabase_systemFont(QFontDatabase::SystemFont type) {
  return new QFont(QFontDatabase::systemFont(type));
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont() {
  return new QRawFont();
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont1(QString const * fileName, double pixelSize, QFont::HintingPreference hintingPreference) {
  return new QRawFont(*fileName, pixelSize, hintingPreference);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont2(QByteArray const * fontData, double pixelSize, QFont::HintingPreference hintingPreference) {
  return new QRawFont(*fontData, pixelSize, hintingPreference);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont3(QRawFont const * other) {
  return new QRawFont(*other);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_operator_1(QRawFont * this_ptr, QRawFont const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRawFont_dQRawFont(QRawFont * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRawFont_swap(QRawFont * this_ptr, QRawFont * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_isValid(QRawFont const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_operator__(QRawFont const * this_ptr, QRawFont const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRawFont_familyName(QRawFont const * this_ptr) {
  return new QString(this_ptr->familyName());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRawFont_styleName(QRawFont const * this_ptr) {
  return new QString(this_ptr->styleName());
}


RITUAL_EXPORT QFont::Style ctr_qt_gui_ffi_QRawFont_style(QRawFont const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QRawFont_weight(QRawFont const * this_ptr) {
  return this_ptr->weight();
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QRawFont_glyphIndexesForString(QRawFont const * this_ptr, QString const * text) {
  return new QVector< quint32 >(this_ptr->glyphIndexesForString(*text));
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_gui_ffi_QRawFont_advancesForGlyphIndexes(QRawFont const * this_ptr, QVector< quint32 > const * glyphIndexes) {
  return new QVector< QPointF >(this_ptr->advancesForGlyphIndexes(*glyphIndexes));
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_gui_ffi_QRawFont_advancesForGlyphIndexes1(QRawFont const * this_ptr, QVector< quint32 > const * glyphIndexes, int layoutFlags) {
  return new QVector< QPointF >(this_ptr->advancesForGlyphIndexes(*glyphIndexes, QFlags< QRawFont::LayoutFlag >(layoutFlags)));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_glyphIndexesForChars(QRawFont const * this_ptr, QChar const * chars, int numChars, quint32 * glyphIndexes, int * numGlyphs) {
  return this_ptr->glyphIndexesForChars(chars, numChars, glyphIndexes, numGlyphs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_advancesForGlyphIndexes2(QRawFont const * this_ptr, quint32 const * glyphIndexes, QPointF * advances, int numGlyphs) {
  return this_ptr->advancesForGlyphIndexes(glyphIndexes, advances, numGlyphs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_advancesForGlyphIndexes3(QRawFont const * this_ptr, quint32 const * glyphIndexes, QPointF * advances, int numGlyphs, int layoutFlags) {
  return this_ptr->advancesForGlyphIndexes(glyphIndexes, advances, numGlyphs, QFlags< QRawFont::LayoutFlag >(layoutFlags));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QRawFont_alphaMapForGlyph(QRawFont const * this_ptr, quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType, QTransform const * transform) {
  return new QImage(this_ptr->alphaMapForGlyph(glyphIndex, antialiasingType, *transform));
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QRawFont_pathForGlyph(QRawFont const * this_ptr, quint32 glyphIndex) {
  return new QPainterPath(this_ptr->pathForGlyph(glyphIndex));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QRawFont_boundingRect(QRawFont const * this_ptr, quint32 glyphIndex) {
  return new QRectF(this_ptr->boundingRect(glyphIndex));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRawFont_setPixelSize(QRawFont * this_ptr, double pixelSize) {
  this_ptr->setPixelSize(pixelSize);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_pixelSize(QRawFont const * this_ptr) {
  return this_ptr->pixelSize();
}


RITUAL_EXPORT QFont::HintingPreference ctr_qt_gui_ffi_QRawFont_hintingPreference(QRawFont const * this_ptr) {
  return this_ptr->hintingPreference();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_ascent(QRawFont const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_capHeight(QRawFont const * this_ptr) {
  return this_ptr->capHeight();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_descent(QRawFont const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_leading(QRawFont const * this_ptr) {
  return this_ptr->leading();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_xHeight(QRawFont const * this_ptr) {
  return this_ptr->xHeight();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_averageCharWidth(QRawFont const * this_ptr) {
  return this_ptr->averageCharWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_maxCharWidth(QRawFont const * this_ptr) {
  return this_ptr->maxCharWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_lineThickness(QRawFont const * this_ptr) {
  return this_ptr->lineThickness();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_underlinePosition(QRawFont const * this_ptr) {
  return this_ptr->underlinePosition();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QRawFont_unitsPerEm(QRawFont const * this_ptr) {
  return this_ptr->unitsPerEm();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRawFont_loadFromFile(QRawFont * this_ptr, QString const * fileName, double pixelSize, QFont::HintingPreference hintingPreference) {
  this_ptr->loadFromFile(*fileName, pixelSize, hintingPreference);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRawFont_loadFromData(QRawFont * this_ptr, QByteArray const * fontData, double pixelSize, QFont::HintingPreference hintingPreference) {
  this_ptr->loadFromData(*fontData, pixelSize, hintingPreference);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_supportsCharacter(QRawFont const * this_ptr, unsigned int ucs4) {
  return this_ptr->supportsCharacter(ucs4);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QRawFont_supportsCharacter1(QRawFont const * this_ptr, QChar const * character) {
  return this_ptr->supportsCharacter(*character);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QRawFont_supportedWritingSystems(QRawFont const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->supportedWritingSystems());
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QRawFont_fontTable(QRawFont const * this_ptr, char const * tagName) {
  return new QByteArray(this_ptr->fontTable(tagName));
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_fromFont(QFont const * font, QFontDatabase::WritingSystem writingSystem) {
  return new QRawFont(QRawFont::fromFont(*font, writingSystem));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap18(QRawFont * value1, QRawFont * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash5(QRawFont const * font, unsigned int seed) {
  return qHash(*font, seed);
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QGlyphRun_QGlyphRun() {
  return new QGlyphRun();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QGlyphRun_QGlyphRun1(QGlyphRun const * other) {
  return new QGlyphRun(*other);
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QGlyphRun_operator_1(QGlyphRun * this_ptr, QGlyphRun const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_dQGlyphRun(QGlyphRun * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_swap(QGlyphRun * this_ptr, QGlyphRun * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QGlyphRun_rawFont(QGlyphRun const * this_ptr) {
  return new QRawFont(this_ptr->rawFont());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setRawFont(QGlyphRun * this_ptr, QRawFont const * rawFont) {
  this_ptr->setRawFont(*rawFont);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setRawData(QGlyphRun * this_ptr, quint32 const * glyphIndexArray, QPointF const * glyphPositionArray, int size) {
  this_ptr->setRawData(glyphIndexArray, glyphPositionArray, size);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QGlyphRun_glyphIndexes(QGlyphRun const * this_ptr) {
  return new QVector< quint32 >(this_ptr->glyphIndexes());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setGlyphIndexes(QGlyphRun * this_ptr, QVector< quint32 > const * glyphIndexes) {
  this_ptr->setGlyphIndexes(*glyphIndexes);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_gui_ffi_QGlyphRun_positions(QGlyphRun const * this_ptr) {
  return new QVector< QPointF >(this_ptr->positions());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setPositions(QGlyphRun * this_ptr, QVector< QPointF > const * positions) {
  this_ptr->setPositions(*positions);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_clear(QGlyphRun * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_operator__(QGlyphRun const * this_ptr, QGlyphRun const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setOverline(QGlyphRun * this_ptr, bool overline) {
  this_ptr->setOverline(overline);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_overline(QGlyphRun const * this_ptr) {
  return this_ptr->overline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setUnderline(QGlyphRun * this_ptr, bool underline) {
  this_ptr->setUnderline(underline);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_underline(QGlyphRun const * this_ptr) {
  return this_ptr->underline();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setStrikeOut(QGlyphRun * this_ptr, bool strikeOut) {
  this_ptr->setStrikeOut(strikeOut);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_strikeOut(QGlyphRun const * this_ptr) {
  return this_ptr->strikeOut();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setRightToLeft(QGlyphRun * this_ptr, bool on) {
  this_ptr->setRightToLeft(on);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_isRightToLeft(QGlyphRun const * this_ptr) {
  return this_ptr->isRightToLeft();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setFlag(QGlyphRun * this_ptr, QGlyphRun::GlyphRunFlag flag, bool enabled) {
  this_ptr->setFlag(flag, enabled);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setFlags(QGlyphRun * this_ptr, int flags) {
  this_ptr->setFlags(QFlags< QGlyphRun::GlyphRunFlag >(flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGlyphRun_flags(QGlyphRun const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setBoundingRect(QGlyphRun * this_ptr, QRectF const * boundingRect) {
  this_ptr->setBoundingRect(*boundingRect);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QGlyphRun_boundingRect(QGlyphRun const * this_ptr) {
  return new QRectF(this_ptr->boundingRect());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGlyphRun_isEmpty(QGlyphRun const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap19(QGlyphRun * value1, QGlyphRun * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_QTextCursor() {
  return new QTextCursor();
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_QTextCursor1(QTextDocument * document) {
  return new QTextCursor(document);
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_QTextCursor4(QTextFrame * frame) {
  return new QTextCursor(frame);
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_QTextCursor5(QTextBlock const * block) {
  return new QTextCursor(*block);
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_QTextCursor6(QTextCursor const * cursor) {
  return new QTextCursor(*cursor);
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextCursor_operator_1(QTextCursor * this_ptr, QTextCursor const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_dQTextCursor(QTextCursor * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_swap(QTextCursor * this_ptr, QTextCursor * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_isNull(QTextCursor const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setPosition(QTextCursor * this_ptr, int pos, QTextCursor::MoveMode mode) {
  this_ptr->setPosition(pos, mode);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_position(QTextCursor const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_positionInBlock(QTextCursor const * this_ptr) {
  return this_ptr->positionInBlock();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_anchor(QTextCursor const * this_ptr) {
  return this_ptr->anchor();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertText(QTextCursor * this_ptr, QString const * text) {
  this_ptr->insertText(*text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertText1(QTextCursor * this_ptr, QString const * text, QTextCharFormat const * format) {
  this_ptr->insertText(*text, *format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_movePosition(QTextCursor * this_ptr, QTextCursor::MoveOperation op, QTextCursor::MoveMode arg2, int n) {
  return this_ptr->movePosition(op, arg2, n);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_visualNavigation(QTextCursor const * this_ptr) {
  return this_ptr->visualNavigation();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setVisualNavigation(QTextCursor * this_ptr, bool b) {
  this_ptr->setVisualNavigation(b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setVerticalMovementX(QTextCursor * this_ptr, int x) {
  this_ptr->setVerticalMovementX(x);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_verticalMovementX(QTextCursor const * this_ptr) {
  return this_ptr->verticalMovementX();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setKeepPositionOnInsert(QTextCursor * this_ptr, bool b) {
  this_ptr->setKeepPositionOnInsert(b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_keepPositionOnInsert(QTextCursor const * this_ptr) {
  return this_ptr->keepPositionOnInsert();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_deleteChar(QTextCursor * this_ptr) {
  this_ptr->deleteChar();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_deletePreviousChar(QTextCursor * this_ptr) {
  this_ptr->deletePreviousChar();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_select(QTextCursor * this_ptr, QTextCursor::SelectionType selection) {
  this_ptr->select(selection);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_hasSelection(QTextCursor const * this_ptr) {
  return this_ptr->hasSelection();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_hasComplexSelection(QTextCursor const * this_ptr) {
  return this_ptr->hasComplexSelection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_removeSelectedText(QTextCursor * this_ptr) {
  this_ptr->removeSelectedText();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_clearSelection(QTextCursor * this_ptr) {
  this_ptr->clearSelection();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_selectionStart(QTextCursor const * this_ptr) {
  return this_ptr->selectionStart();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_selectionEnd(QTextCursor const * this_ptr) {
  return this_ptr->selectionEnd();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextCursor_selectedText(QTextCursor const * this_ptr) {
  return new QString(this_ptr->selectedText());
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextCursor_selection(QTextCursor const * this_ptr) {
  return new QTextDocumentFragment(this_ptr->selection());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_selectedTableCells(QTextCursor const * this_ptr, int * firstRow, int * numRows, int * firstColumn, int * numColumns) {
  this_ptr->selectedTableCells(firstRow, numRows, firstColumn, numColumns);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextCursor_block(QTextCursor const * this_ptr) {
  return new QTextBlock(this_ptr->block());
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextCursor_charFormat(QTextCursor const * this_ptr) {
  return new QTextCharFormat(this_ptr->charFormat());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setCharFormat(QTextCursor * this_ptr, QTextCharFormat const * format) {
  this_ptr->setCharFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_mergeCharFormat(QTextCursor * this_ptr, QTextCharFormat const * modifier) {
  this_ptr->mergeCharFormat(*modifier);
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextCursor_blockFormat(QTextCursor const * this_ptr) {
  return new QTextBlockFormat(this_ptr->blockFormat());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setBlockFormat(QTextCursor * this_ptr, QTextBlockFormat const * format) {
  this_ptr->setBlockFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_mergeBlockFormat(QTextCursor * this_ptr, QTextBlockFormat const * modifier) {
  this_ptr->mergeBlockFormat(*modifier);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextCursor_blockCharFormat(QTextCursor const * this_ptr) {
  return new QTextCharFormat(this_ptr->blockCharFormat());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setBlockCharFormat(QTextCursor * this_ptr, QTextCharFormat const * format) {
  this_ptr->setBlockCharFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_mergeBlockCharFormat(QTextCursor * this_ptr, QTextCharFormat const * modifier) {
  this_ptr->mergeBlockCharFormat(*modifier);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_atBlockStart(QTextCursor const * this_ptr) {
  return this_ptr->atBlockStart();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_atBlockEnd(QTextCursor const * this_ptr) {
  return this_ptr->atBlockEnd();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_atStart(QTextCursor const * this_ptr) {
  return this_ptr->atStart();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_atEnd(QTextCursor const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertBlock(QTextCursor * this_ptr) {
  this_ptr->insertBlock();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertBlock1(QTextCursor * this_ptr, QTextBlockFormat const * format) {
  this_ptr->insertBlock(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertBlock2(QTextCursor * this_ptr, QTextBlockFormat const * format, QTextCharFormat const * charFormat) {
  this_ptr->insertBlock(*format, *charFormat);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextCursor_insertList(QTextCursor * this_ptr, QTextListFormat const * format) {
  return this_ptr->insertList(*format);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextCursor_insertList1(QTextCursor * this_ptr, QTextListFormat::Style style) {
  return this_ptr->insertList(style);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextCursor_createList(QTextCursor * this_ptr, QTextListFormat const * format) {
  return this_ptr->createList(*format);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextCursor_createList1(QTextCursor * this_ptr, QTextListFormat::Style style) {
  return this_ptr->createList(style);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextCursor_currentList(QTextCursor const * this_ptr) {
  return this_ptr->currentList();
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_QTextCursor_insertTable(QTextCursor * this_ptr, int rows, int cols, QTextTableFormat const * format) {
  return this_ptr->insertTable(rows, cols, *format);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_QTextCursor_insertTable1(QTextCursor * this_ptr, int rows, int cols) {
  return this_ptr->insertTable(rows, cols);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_QTextCursor_currentTable(QTextCursor const * this_ptr) {
  return this_ptr->currentTable();
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextCursor_insertFrame(QTextCursor * this_ptr, QTextFrameFormat const * format) {
  return this_ptr->insertFrame(*format);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextCursor_currentFrame(QTextCursor const * this_ptr) {
  return this_ptr->currentFrame();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertFragment(QTextCursor * this_ptr, QTextDocumentFragment const * fragment) {
  this_ptr->insertFragment(*fragment);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertHtml(QTextCursor * this_ptr, QString const * html) {
  this_ptr->insertHtml(*html);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertImage(QTextCursor * this_ptr, QTextImageFormat const * format, QTextFrameFormat::Position alignment) {
  this_ptr->insertImage(*format, alignment);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertImage1(QTextCursor * this_ptr, QTextImageFormat const * format) {
  this_ptr->insertImage(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertImage2(QTextCursor * this_ptr, QString const * name) {
  this_ptr->insertImage(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertImage3(QTextCursor * this_ptr, QImage const * image, QString const * name) {
  this_ptr->insertImage(*image, *name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_beginEditBlock(QTextCursor * this_ptr) {
  this_ptr->beginEditBlock();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_joinPreviousEditBlock(QTextCursor * this_ptr) {
  this_ptr->joinPreviousEditBlock();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_endEditBlock(QTextCursor * this_ptr) {
  this_ptr->endEditBlock();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_operator_2(QTextCursor const * this_ptr, QTextCursor const * rhs) {
  return this_ptr->operator<(*rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_operator__1(QTextCursor const * this_ptr, QTextCursor const * rhs) {
  return this_ptr->operator<=(*rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_operator__2(QTextCursor const * this_ptr, QTextCursor const * rhs) {
  return this_ptr->operator==(*rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_operator__3(QTextCursor const * this_ptr, QTextCursor const * rhs) {
  return this_ptr->operator>=(*rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_operator_3(QTextCursor const * this_ptr, QTextCursor const * rhs) {
  return this_ptr->operator>(*rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_isCopyOf(QTextCursor const * this_ptr, QTextCursor const * other) {
  return this_ptr->isCopyOf(*other);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_blockNumber(QTextCursor const * this_ptr) {
  return this_ptr->blockNumber();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextCursor_columnNumber(QTextCursor const * this_ptr) {
  return this_ptr->columnNumber();
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextCursor_document(QTextCursor const * this_ptr) {
  return this_ptr->document();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap20(QTextCursor * value1, QTextCursor * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QTextInlineObject * ctr_qt_gui_ffi_QTextInlineObject_QTextInlineObject1() {
  return new QTextInlineObject();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextInlineObject_isValid(QTextInlineObject const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTextInlineObject_rect(QTextInlineObject const * this_ptr) {
  return new QRectF(this_ptr->rect());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextInlineObject_width(QTextInlineObject const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextInlineObject_ascent(QTextInlineObject const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextInlineObject_descent(QTextInlineObject const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextInlineObject_height(QTextInlineObject const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QTextInlineObject_textDirection(QTextInlineObject const * this_ptr) {
  return this_ptr->textDirection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextInlineObject_setWidth(QTextInlineObject * this_ptr, double w) {
  this_ptr->setWidth(w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextInlineObject_setAscent(QTextInlineObject * this_ptr, double a) {
  this_ptr->setAscent(a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextInlineObject_setDescent(QTextInlineObject * this_ptr, double d) {
  this_ptr->setDescent(d);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextInlineObject_textPosition(QTextInlineObject const * this_ptr) {
  return this_ptr->textPosition();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextInlineObject_formatIndex(QTextInlineObject const * this_ptr) {
  return this_ptr->formatIndex();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextInlineObject_format(QTextInlineObject const * this_ptr) {
  return new QTextFormat(this_ptr->format());
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextLayout_QTextLayout() {
  return new QTextLayout();
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextLayout_QTextLayout1(QString const * text) {
  return new QTextLayout(*text);
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextLayout_QTextLayout2(QString const * text, QFont const * font, QPaintDevice * paintdevice) {
  return new QTextLayout(*text, *font, paintdevice);
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextLayout_QTextLayout3(QTextBlock const * b) {
  return new QTextLayout(*b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_dQTextLayout(QTextLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setFont(QTextLayout * this_ptr, QFont const * f) {
  this_ptr->setFont(*f);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QTextLayout_font(QTextLayout const * this_ptr) {
  return new QFont(this_ptr->font());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setRawFont(QTextLayout * this_ptr, QRawFont const * rawFont) {
  this_ptr->setRawFont(*rawFont);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setText(QTextLayout * this_ptr, QString const * string) {
  this_ptr->setText(*string);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextLayout_text(QTextLayout const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setTextOption(QTextLayout * this_ptr, QTextOption const * option) {
  this_ptr->setTextOption(*option);
}


RITUAL_EXPORT QTextOption const * ctr_qt_gui_ffi_QTextLayout_textOption(QTextLayout const * this_ptr) {
  return &this_ptr->textOption();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setPreeditArea(QTextLayout * this_ptr, int position, QString const * text) {
  this_ptr->setPreeditArea(position, *text);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_preeditAreaPosition(QTextLayout const * this_ptr) {
  return this_ptr->preeditAreaPosition();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextLayout_preeditAreaText(QTextLayout const * this_ptr) {
  return new QString(this_ptr->preeditAreaText());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setAdditionalFormats(QTextLayout * this_ptr, QList< QTextLayout::FormatRange > const * overrides) {
  this_ptr->setAdditionalFormats(*overrides);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QTextLayout_additionalFormats(QTextLayout const * this_ptr) {
  return new QList< QTextLayout::FormatRange >(this_ptr->additionalFormats());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_clearAdditionalFormats(QTextLayout * this_ptr) {
  this_ptr->clearAdditionalFormats();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setFormats(QTextLayout * this_ptr, QVector< QTextLayout::FormatRange > const * overrides) {
  this_ptr->setFormats(*overrides);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QTextLayout_formats(QTextLayout const * this_ptr) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->formats());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_clearFormats(QTextLayout * this_ptr) {
  this_ptr->clearFormats();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setCacheEnabled(QTextLayout * this_ptr, bool enable) {
  this_ptr->setCacheEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextLayout_cacheEnabled(QTextLayout const * this_ptr) {
  return this_ptr->cacheEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setCursorMoveStyle(QTextLayout * this_ptr, Qt::CursorMoveStyle style) {
  this_ptr->setCursorMoveStyle(style);
}


RITUAL_EXPORT Qt::CursorMoveStyle ctr_qt_gui_ffi_QTextLayout_cursorMoveStyle(QTextLayout const * this_ptr) {
  return this_ptr->cursorMoveStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_beginLayout(QTextLayout * this_ptr) {
  this_ptr->beginLayout();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_endLayout(QTextLayout * this_ptr) {
  this_ptr->endLayout();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_clearLayout(QTextLayout * this_ptr) {
  this_ptr->clearLayout();
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLayout_createLine(QTextLayout * this_ptr) {
  return new QTextLine(this_ptr->createLine());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_lineCount(QTextLayout const * this_ptr) {
  return this_ptr->lineCount();
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLayout_lineAt(QTextLayout const * this_ptr, int i) {
  return new QTextLine(this_ptr->lineAt(i));
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLayout_lineForTextPosition(QTextLayout const * this_ptr, int pos) {
  return new QTextLine(this_ptr->lineForTextPosition(pos));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextLayout_isValidCursorPosition(QTextLayout const * this_ptr, int pos) {
  return this_ptr->isValidCursorPosition(pos);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_nextCursorPosition(QTextLayout const * this_ptr, int oldPos, QTextLayout::CursorMode mode) {
  return this_ptr->nextCursorPosition(oldPos, mode);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_previousCursorPosition(QTextLayout const * this_ptr, int oldPos, QTextLayout::CursorMode mode) {
  return this_ptr->previousCursorPosition(oldPos, mode);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_leftCursorPosition(QTextLayout const * this_ptr, int oldPos) {
  return this_ptr->leftCursorPosition(oldPos);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_rightCursorPosition(QTextLayout const * this_ptr, int oldPos) {
  return this_ptr->rightCursorPosition(oldPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_draw(QTextLayout const * this_ptr, QPainter * p, QPointF const * pos, QVector< QTextLayout::FormatRange > const * selections, QRectF const * clip) {
  this_ptr->draw(p, *pos, *selections, *clip);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_drawCursor(QTextLayout const * this_ptr, QPainter * p, QPointF const * pos, int cursorPosition) {
  this_ptr->drawCursor(p, *pos, cursorPosition);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_drawCursor1(QTextLayout const * this_ptr, QPainter * p, QPointF const * pos, int cursorPosition, int width) {
  this_ptr->drawCursor(p, *pos, cursorPosition, width);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTextLayout_position(QTextLayout const * this_ptr) {
  return new QPointF(this_ptr->position());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setPosition(QTextLayout * this_ptr, QPointF const * p) {
  this_ptr->setPosition(*p);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTextLayout_boundingRect(QTextLayout const * this_ptr) {
  return new QRectF(this_ptr->boundingRect());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLayout_minimumWidth(QTextLayout const * this_ptr) {
  return this_ptr->minimumWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLayout_maximumWidth(QTextLayout const * this_ptr) {
  return this_ptr->maximumWidth();
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLayout_glyphRuns(QTextLayout const * this_ptr, int from, int length) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from, length));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_setFlags(QTextLayout * this_ptr, int flags) {
  this_ptr->setFlags(flags);
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLine_QTextLine() {
  return new QTextLine();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextLine_isValid(QTextLine const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTextLine_rect(QTextLine const * this_ptr) {
  return new QRectF(this_ptr->rect());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_x(QTextLine const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_y(QTextLine const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_width(QTextLine const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_ascent(QTextLine const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_descent(QTextLine const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_height(QTextLine const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_leading(QTextLine const * this_ptr) {
  return this_ptr->leading();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_setLeadingIncluded(QTextLine * this_ptr, bool included) {
  this_ptr->setLeadingIncluded(included);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextLine_leadingIncluded(QTextLine const * this_ptr) {
  return this_ptr->leadingIncluded();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_naturalTextWidth(QTextLine const * this_ptr) {
  return this_ptr->naturalTextWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_horizontalAdvance(QTextLine const * this_ptr) {
  return this_ptr->horizontalAdvance();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QTextLine_naturalTextRect(QTextLine const * this_ptr) {
  return new QRectF(this_ptr->naturalTextRect());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_cursorToX(QTextLine const * this_ptr, int * cursorPos, QTextLine::Edge edge) {
  return this_ptr->cursorToX(cursorPos, edge);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_cursorToX1(QTextLine const * this_ptr, int cursorPos, QTextLine::Edge edge) {
  return this_ptr->cursorToX(cursorPos, edge);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLine_xToCursor(QTextLine const * this_ptr, double x, QTextLine::CursorPosition arg2) {
  return this_ptr->xToCursor(x, arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_setLineWidth(QTextLine * this_ptr, double width) {
  this_ptr->setLineWidth(width);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_setNumColumns(QTextLine * this_ptr, int columns) {
  this_ptr->setNumColumns(columns);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_setNumColumns1(QTextLine * this_ptr, int columns, double alignmentWidth) {
  this_ptr->setNumColumns(columns, alignmentWidth);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_setPosition(QTextLine * this_ptr, QPointF const * pos) {
  this_ptr->setPosition(*pos);
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QTextLine_position(QTextLine const * this_ptr) {
  return new QPointF(this_ptr->position());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLine_textStart(QTextLine const * this_ptr) {
  return this_ptr->textStart();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLine_textLength(QTextLine const * this_ptr) {
  return this_ptr->textLength();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLine_lineNumber(QTextLine const * this_ptr) {
  return this_ptr->lineNumber();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_draw(QTextLine const * this_ptr, QPainter * p, QPointF const * point, QTextLayout::FormatRange const * selection) {
  this_ptr->draw(p, *point, selection);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLine_glyphRuns(QTextLine const * this_ptr, int from, int length) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from, length));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_Qt_mightBeRichText(QString const * arg1) {
  return Qt::mightBeRichText(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_Qt_convertFromPlainText(QString const * plain, Qt::WhiteSpaceMode mode) {
  return new QString(Qt::convertFromPlainText(*plain, mode));
}


RITUAL_EXPORT QTextCodec * ctr_qt_gui_ffi_Qt_codecForHtml(QByteArray const * ba) {
  return Qt::codecForHtml(*ba);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractUndoItem_dQAbstractUndoItem(QAbstractUndoItem * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractUndoItem_undo(QAbstractUndoItem * this_ptr) {
  this_ptr->undo();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractUndoItem_redo(QAbstractUndoItem * this_ptr) {
  this_ptr->redo();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextDocument_metaObject(QTextDocument const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextDocument_qt_metacast(QTextDocument * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_qt_metacall(QTextDocument * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_tr(char const * s, char const * c, int n) {
  return new QString(QTextDocument::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextDocument::trUtf8(s, c, n));
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_QTextDocument(QObject * parent) {
  return new QTextDocument(parent);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_QTextDocument1(QString const * text, QObject * parent) {
  return new QTextDocument(*text, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_dQTextDocument(QTextDocument * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_clone(QTextDocument const * this_ptr, QObject * parent) {
  return this_ptr->clone(parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_isEmpty(QTextDocument const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_clear(QTextDocument * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setUndoRedoEnabled(QTextDocument * this_ptr, bool enable) {
  this_ptr->setUndoRedoEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_isUndoRedoEnabled(QTextDocument const * this_ptr) {
  return this_ptr->isUndoRedoEnabled();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_isUndoAvailable(QTextDocument const * this_ptr) {
  return this_ptr->isUndoAvailable();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_isRedoAvailable(QTextDocument const * this_ptr) {
  return this_ptr->isRedoAvailable();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_availableUndoSteps(QTextDocument const * this_ptr) {
  return this_ptr->availableUndoSteps();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_availableRedoSteps(QTextDocument const * this_ptr) {
  return this_ptr->availableRedoSteps();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_revision(QTextDocument const * this_ptr) {
  return this_ptr->revision();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDocumentLayout(QTextDocument * this_ptr, QAbstractTextDocumentLayout * layout) {
  this_ptr->setDocumentLayout(layout);
}


RITUAL_EXPORT QAbstractTextDocumentLayout * ctr_qt_gui_ffi_QTextDocument_documentLayout(QTextDocument const * this_ptr) {
  return this_ptr->documentLayout();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setMetaInformation(QTextDocument * this_ptr, QTextDocument::MetaInformation info, QString const * arg2) {
  this_ptr->setMetaInformation(info, *arg2);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_metaInformation(QTextDocument const * this_ptr, QTextDocument::MetaInformation info) {
  return new QString(this_ptr->metaInformation(info));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toHtml(QTextDocument const * this_ptr, QByteArray const * encoding) {
  return new QString(this_ptr->toHtml(*encoding));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setHtml(QTextDocument * this_ptr, QString const * html) {
  this_ptr->setHtml(*html);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toRawText(QTextDocument const * this_ptr) {
  return new QString(this_ptr->toRawText());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toPlainText(QTextDocument const * this_ptr) {
  return new QString(this_ptr->toPlainText());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setPlainText(QTextDocument * this_ptr, QString const * text) {
  this_ptr->setPlainText(*text);
}


RITUAL_EXPORT QChar * ctr_qt_gui_ffi_QTextDocument_characterAt(QTextDocument const * this_ptr, int pos) {
  return new QChar(this_ptr->characterAt(pos));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find(QTextDocument const * this_ptr, QString const * subString, int from, int options) {
  return new QTextCursor(this_ptr->find(*subString, from, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find1(QTextDocument const * this_ptr, QString const * subString, QTextCursor const * cursor, int options) {
  return new QTextCursor(this_ptr->find(*subString, *cursor, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find2(QTextDocument const * this_ptr, QRegExp const * expr, int from, int options) {
  return new QTextCursor(this_ptr->find(*expr, from, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find3(QTextDocument const * this_ptr, QRegExp const * expr, QTextCursor const * cursor, int options) {
  return new QTextCursor(this_ptr->find(*expr, *cursor, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find4(QTextDocument const * this_ptr, QRegularExpression const * expr, int from, int options) {
  return new QTextCursor(this_ptr->find(*expr, from, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find5(QTextDocument const * this_ptr, QRegularExpression const * expr, QTextCursor const * cursor, int options) {
  return new QTextCursor(this_ptr->find(*expr, *cursor, QFlags< QTextDocument::FindFlag >(options)));
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextDocument_frameAt(QTextDocument const * this_ptr, int pos) {
  return this_ptr->frameAt(pos);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextDocument_rootFrame(QTextDocument const * this_ptr) {
  return this_ptr->rootFrame();
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_QTextDocument_object(QTextDocument const * this_ptr, int objectIndex) {
  return this_ptr->object(objectIndex);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_QTextDocument_objectForFormat(QTextDocument const * this_ptr, QTextFormat const * arg1) {
  return this_ptr->objectForFormat(*arg1);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_findBlock(QTextDocument const * this_ptr, int pos) {
  return new QTextBlock(this_ptr->findBlock(pos));
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_findBlockByNumber(QTextDocument const * this_ptr, int blockNumber) {
  return new QTextBlock(this_ptr->findBlockByNumber(blockNumber));
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_findBlockByLineNumber(QTextDocument const * this_ptr, int blockNumber) {
  return new QTextBlock(this_ptr->findBlockByLineNumber(blockNumber));
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_begin(QTextDocument const * this_ptr) {
  return new QTextBlock(this_ptr->begin());
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_end(QTextDocument const * this_ptr) {
  return new QTextBlock(this_ptr->end());
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_firstBlock(QTextDocument const * this_ptr) {
  return new QTextBlock(this_ptr->firstBlock());
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextDocument_lastBlock(QTextDocument const * this_ptr) {
  return new QTextBlock(this_ptr->lastBlock());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setPageSize(QTextDocument * this_ptr, QSizeF const * size) {
  this_ptr->setPageSize(*size);
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QTextDocument_pageSize(QTextDocument const * this_ptr) {
  return new QSizeF(this_ptr->pageSize());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDefaultFont(QTextDocument * this_ptr, QFont const * font) {
  this_ptr->setDefaultFont(*font);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QTextDocument_defaultFont(QTextDocument const * this_ptr) {
  return new QFont(this_ptr->defaultFont());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_pageCount(QTextDocument const * this_ptr) {
  return this_ptr->pageCount();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_isModified(QTextDocument const * this_ptr) {
  return this_ptr->isModified();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_print(QTextDocument const * this_ptr, QPagedPaintDevice * printer) {
  this_ptr->print(printer);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextDocument_resource(QTextDocument const * this_ptr, int type, QUrl const * name) {
  return new QVariant(this_ptr->resource(type, *name));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_addResource(QTextDocument * this_ptr, int type, QUrl const * name, QVariant const * resource) {
  this_ptr->addResource(type, *name, *resource);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QTextDocument_allFormats(QTextDocument const * this_ptr) {
  return new QVector< QTextFormat >(this_ptr->allFormats());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_markContentsDirty(QTextDocument * this_ptr, int from, int length) {
  this_ptr->markContentsDirty(from, length);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setUseDesignMetrics(QTextDocument * this_ptr, bool b) {
  this_ptr->setUseDesignMetrics(b);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocument_useDesignMetrics(QTextDocument const * this_ptr) {
  return this_ptr->useDesignMetrics();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_drawContents(QTextDocument * this_ptr, QPainter * painter, QRectF const * rect) {
  this_ptr->drawContents(painter, *rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setTextWidth(QTextDocument * this_ptr, double width) {
  this_ptr->setTextWidth(width);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextDocument_textWidth(QTextDocument const * this_ptr) {
  return this_ptr->textWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextDocument_idealWidth(QTextDocument const * this_ptr) {
  return this_ptr->idealWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextDocument_indentWidth(QTextDocument const * this_ptr) {
  return this_ptr->indentWidth();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setIndentWidth(QTextDocument * this_ptr, double width) {
  this_ptr->setIndentWidth(width);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextDocument_documentMargin(QTextDocument const * this_ptr) {
  return this_ptr->documentMargin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDocumentMargin(QTextDocument * this_ptr, double margin) {
  this_ptr->setDocumentMargin(margin);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_adjustSize(QTextDocument * this_ptr) {
  this_ptr->adjustSize();
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QTextDocument_size(QTextDocument const * this_ptr) {
  return new QSizeF(this_ptr->size());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_blockCount(QTextDocument const * this_ptr) {
  return this_ptr->blockCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_lineCount(QTextDocument const * this_ptr) {
  return this_ptr->lineCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_characterCount(QTextDocument const * this_ptr) {
  return this_ptr->characterCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDefaultStyleSheet(QTextDocument * this_ptr, QString const * sheet) {
  this_ptr->setDefaultStyleSheet(*sheet);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_defaultStyleSheet(QTextDocument const * this_ptr) {
  return new QString(this_ptr->defaultStyleSheet());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_undo(QTextDocument * this_ptr, QTextCursor * cursor) {
  this_ptr->undo(cursor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_redo(QTextDocument * this_ptr, QTextCursor * cursor) {
  this_ptr->redo(cursor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_clearUndoRedoStacks(QTextDocument * this_ptr, QTextDocument::Stacks historyToClear) {
  this_ptr->clearUndoRedoStacks(historyToClear);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextDocument_maximumBlockCount(QTextDocument const * this_ptr) {
  return this_ptr->maximumBlockCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setMaximumBlockCount(QTextDocument * this_ptr, int maximum) {
  this_ptr->setMaximumBlockCount(maximum);
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QTextDocument_defaultTextOption(QTextDocument const * this_ptr) {
  return new QTextOption(this_ptr->defaultTextOption());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDefaultTextOption(QTextDocument * this_ptr, QTextOption const * option) {
  this_ptr->setDefaultTextOption(*option);
}


RITUAL_EXPORT QUrl * ctr_qt_gui_ffi_QTextDocument_baseUrl(QTextDocument const * this_ptr) {
  return new QUrl(this_ptr->baseUrl());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setBaseUrl(QTextDocument * this_ptr, QUrl const * url) {
  this_ptr->setBaseUrl(*url);
}


RITUAL_EXPORT Qt::CursorMoveStyle ctr_qt_gui_ffi_QTextDocument_defaultCursorMoveStyle(QTextDocument const * this_ptr) {
  return this_ptr->defaultCursorMoveStyle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setDefaultCursorMoveStyle(QTextDocument * this_ptr, Qt::CursorMoveStyle style) {
  this_ptr->setDefaultCursorMoveStyle(style);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_undo1(QTextDocument * this_ptr) {
  this_ptr->undo();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_redo1(QTextDocument * this_ptr) {
  this_ptr->redo();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_appendUndoItem(QTextDocument * this_ptr, QAbstractUndoItem * arg1) {
  this_ptr->appendUndoItem(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setModified(QTextDocument * this_ptr, bool m) {
  this_ptr->setModified(m);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette() {
  return new QPalette();
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette1(QColor const * button) {
  return new QPalette(*button);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette2(Qt::GlobalColor button) {
  return new QPalette(button);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette3(QColor const * button, QColor const * window) {
  return new QPalette(*button, *window);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette4(QBrush const * windowText, QBrush const * button, QBrush const * light, QBrush const * dark, QBrush const * mid, QBrush const * text, QBrush const * bright_text, QBrush const * base, QBrush const * window) {
  return new QPalette(*windowText, *button, *light, *dark, *mid, *text, *bright_text, *base, *window);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette5(QColor const * windowText, QColor const * window, QColor const * light, QColor const * dark, QColor const * mid, QColor const * text, QColor const * base) {
  return new QPalette(*windowText, *window, *light, *dark, *mid, *text, *base);
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_QPalette6(QPalette const * palette) {
  return new QPalette(*palette);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_dQPalette(QPalette * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_operator_(QPalette * this_ptr, QPalette const * palette) {
  return &this_ptr->operator=(*palette);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_swap(QPalette * this_ptr, QPalette * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QPalette_operator_QVariant(QPalette const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT QPalette::ColorGroup ctr_qt_gui_ffi_QPalette_currentColorGroup(QPalette const * this_ptr) {
  return this_ptr->currentColorGroup();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setCurrentColorGroup(QPalette * this_ptr, QPalette::ColorGroup cg) {
  this_ptr->setCurrentColorGroup(cg);
}


RITUAL_EXPORT QColor const * ctr_qt_gui_ffi_QPalette_color(QPalette const * this_ptr, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return &this_ptr->color(cg, cr);
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_brush(QPalette const * this_ptr, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return &this_ptr->brush(cg, cr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setColor(QPalette * this_ptr, QPalette::ColorGroup cg, QPalette::ColorRole cr, QColor const * color) {
  this_ptr->setColor(cg, cr, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setColor1(QPalette * this_ptr, QPalette::ColorRole cr, QColor const * color) {
  this_ptr->setColor(cr, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setBrush(QPalette * this_ptr, QPalette::ColorRole cr, QBrush const * brush) {
  this_ptr->setBrush(cr, *brush);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPalette_isBrushSet(QPalette const * this_ptr, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  return this_ptr->isBrushSet(cg, cr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setBrush1(QPalette * this_ptr, QPalette::ColorGroup cg, QPalette::ColorRole cr, QBrush const * brush) {
  this_ptr->setBrush(cg, cr, *brush);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_setColorGroup(QPalette * this_ptr, QPalette::ColorGroup cr, QBrush const * windowText, QBrush const * button, QBrush const * light, QBrush const * dark, QBrush const * mid, QBrush const * text, QBrush const * bright_text, QBrush const * base, QBrush const * window) {
  this_ptr->setColorGroup(cr, *windowText, *button, *light, *dark, *mid, *text, *bright_text, *base, *window);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPalette_isEqual(QPalette const * this_ptr, QPalette::ColorGroup cr1, QPalette::ColorGroup cr2) {
  return this_ptr->isEqual(cr1, cr2);
}


RITUAL_EXPORT QColor const * ctr_qt_gui_ffi_QPalette_color1(QPalette const * this_ptr, QPalette::ColorRole cr) {
  return &this_ptr->color(cr);
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_brush1(QPalette const * this_ptr, QPalette::ColorRole cr) {
  return &this_ptr->brush(cr);
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_foreground(QPalette const * this_ptr) {
  return &this_ptr->foreground();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_windowText(QPalette const * this_ptr) {
  return &this_ptr->windowText();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_button(QPalette const * this_ptr) {
  return &this_ptr->button();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_light(QPalette const * this_ptr) {
  return &this_ptr->light();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_dark(QPalette const * this_ptr) {
  return &this_ptr->dark();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_mid(QPalette const * this_ptr) {
  return &this_ptr->mid();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_text(QPalette const * this_ptr) {
  return &this_ptr->text();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_base(QPalette const * this_ptr) {
  return &this_ptr->base();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_alternateBase(QPalette const * this_ptr) {
  return &this_ptr->alternateBase();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_toolTipBase(QPalette const * this_ptr) {
  return &this_ptr->toolTipBase();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_toolTipText(QPalette const * this_ptr) {
  return &this_ptr->toolTipText();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_background(QPalette const * this_ptr) {
  return &this_ptr->background();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_window(QPalette const * this_ptr) {
  return &this_ptr->window();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_midlight(QPalette const * this_ptr) {
  return &this_ptr->midlight();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_brightText(QPalette const * this_ptr) {
  return &this_ptr->brightText();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_buttonText(QPalette const * this_ptr) {
  return &this_ptr->buttonText();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_shadow(QPalette const * this_ptr) {
  return &this_ptr->shadow();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_highlight(QPalette const * this_ptr) {
  return &this_ptr->highlight();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_highlightedText(QPalette const * this_ptr) {
  return &this_ptr->highlightedText();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_link(QPalette const * this_ptr) {
  return &this_ptr->link();
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_linkVisited(QPalette const * this_ptr) {
  return &this_ptr->linkVisited();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPalette_operator__(QPalette const * this_ptr, QPalette const * p) {
  return this_ptr->operator==(*p);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPalette_isCopyOf(QPalette const * this_ptr, QPalette const * p) {
  return this_ptr->isCopyOf(*p);
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QPalette_cacheKey(QPalette const * this_ptr) {
  return this_ptr->cacheKey();
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QPalette_resolve(QPalette const * this_ptr, QPalette const * arg1) {
  return new QPalette(this_ptr->resolve(*arg1));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QPalette_resolve1(QPalette const * this_ptr) {
  return this_ptr->resolve();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPalette_resolve2(QPalette * this_ptr, unsigned int mask) {
  this_ptr->resolve(mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap21(QPalette * value1, QPalette * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__57(QDataStream * ds, QPalette const * p) {
  return &operator<<(*ds, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__58(QDataStream * ds, QPalette * p) {
  return &operator>>(*ds, *p);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__59(QDebug const * arg1, QPalette const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_metaObject(QAbstractTextDocumentLayout const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_qt_metacast(QAbstractTextDocumentLayout * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAbstractTextDocumentLayout_qt_metacall(QAbstractTextDocumentLayout * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_tr(char const * s, char const * c, int n) {
  return new QString(QAbstractTextDocumentLayout::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAbstractTextDocumentLayout::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_dQAbstractTextDocumentLayout(QAbstractTextDocumentLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractTextDocumentLayout::PaintContext * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_PaintContext() {
  return new QAbstractTextDocumentLayout::PaintContext();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_draw(QAbstractTextDocumentLayout * this_ptr, QPainter * painter, QAbstractTextDocumentLayout::PaintContext const * context) {
  this_ptr->draw(painter, *context);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAbstractTextDocumentLayout_hitTest(QAbstractTextDocumentLayout const * this_ptr, QPointF const * point, Qt::HitTestAccuracy accuracy) {
  return this_ptr->hitTest(*point, accuracy);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_anchorAt(QAbstractTextDocumentLayout const * this_ptr, QPointF const * pos) {
  return new QString(this_ptr->anchorAt(*pos));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_imageAt(QAbstractTextDocumentLayout const * this_ptr, QPointF const * pos) {
  return new QString(this_ptr->imageAt(*pos));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_formatAt(QAbstractTextDocumentLayout const * this_ptr, QPointF const * pos) {
  return new QTextFormat(this_ptr->formatAt(*pos));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAbstractTextDocumentLayout_pageCount(QAbstractTextDocumentLayout const * this_ptr) {
  return this_ptr->pageCount();
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_documentSize(QAbstractTextDocumentLayout const * this_ptr) {
  return new QSizeF(this_ptr->documentSize());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_frameBoundingRect(QAbstractTextDocumentLayout const * this_ptr, QTextFrame * frame) {
  return new QRectF(this_ptr->frameBoundingRect(frame));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_blockBoundingRect(QAbstractTextDocumentLayout const * this_ptr, QTextBlock const * block) {
  return new QRectF(this_ptr->blockBoundingRect(*block));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_setPaintDevice(QAbstractTextDocumentLayout * this_ptr, QPaintDevice * device) {
  this_ptr->setPaintDevice(device);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_paintDevice(QAbstractTextDocumentLayout const * this_ptr) {
  return this_ptr->paintDevice();
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_document(QAbstractTextDocumentLayout const * this_ptr) {
  return this_ptr->document();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_registerHandler(QAbstractTextDocumentLayout * this_ptr, int objectType, QObject * component) {
  this_ptr->registerHandler(objectType, component);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_unregisterHandler(QAbstractTextDocumentLayout * this_ptr, int objectType, QObject * component) {
  this_ptr->unregisterHandler(objectType, component);
}


RITUAL_EXPORT QTextObjectInterface * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_handlerForObject(QAbstractTextDocumentLayout const * this_ptr, int objectType) {
  return this_ptr->handlerForObject(objectType);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextObjectInterface_dQTextObjectInterface(QTextObjectInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QTextObjectInterface_intrinsicSize(QTextObjectInterface * this_ptr, QTextDocument * doc, int posInDocument, QTextFormat const * format) {
  return new QSizeF(this_ptr->intrinsicSize(doc, posInDocument, *format));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextObjectInterface_drawObject(QTextObjectInterface * this_ptr, QPainter * painter, QRectF const * rect, QTextDocument * doc, int posInDocument, QTextFormat const * format) {
  this_ptr->drawObject(painter, *rect, doc, posInDocument, *format);
}


RITUAL_EXPORT QAccessible::State * ctr_qt_gui_ffi_QAccessible_State_State() {
  return new QAccessible::State();
}


RITUAL_EXPORT void (*ctr_qt_gui_ffi_QAccessible_installUpdateHandler(void (*arg1)(QAccessibleEvent *)))(QAccessibleEvent *) {
  return QAccessible::installUpdateHandler(arg1);
}


RITUAL_EXPORT void (*ctr_qt_gui_ffi_QAccessible_installRootObjectHandler(void (*arg1)(QObject *)))(QObject *) {
  return QAccessible::installRootObjectHandler(arg1);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessible_queryAccessibleInterface(QObject * arg1) {
  return QAccessible::queryAccessibleInterface(arg1);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QAccessible_uniqueId(QAccessibleInterface * iface) {
  return QAccessible::uniqueId(iface);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessible_accessibleInterface(unsigned int uniqueId) {
  return QAccessible::accessibleInterface(uniqueId);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QAccessible_registerAccessibleInterface(QAccessibleInterface * iface) {
  return QAccessible::registerAccessibleInterface(iface);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_deleteAccessibleInterface(unsigned int uniqueId) {
  QAccessible::deleteAccessibleInterface(uniqueId);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_updateAccessibility(QAccessibleEvent * event) {
  QAccessible::updateAccessibility(event);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessible_isActive() {
  return QAccessible::isActive();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_setActive(bool active) {
  QAccessible::setActive(active);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_setRootObject(QObject * object) {
  QAccessible::setRootObject(object);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_cleanup() {
  QAccessible::cleanup();
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QAccessible_qAccessibleTextBoundaryHelper(QTextCursor const * cursor, QAccessible::TextBoundaryType boundaryType) {
  return new QPair< int, int >(QAccessible::qAccessibleTextBoundaryHelper(*cursor, boundaryType));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__60(QAccessible::State const * first, QAccessible::State const * second) {
  return operator==(*first, *second);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleInterface_isValid(QAccessibleInterface const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QAccessibleInterface_object(QAccessibleInterface const * this_ptr) {
  return this_ptr->object();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QAccessibleInterface_window(QAccessibleInterface const * this_ptr) {
  return this_ptr->window();
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QAccessibleInterface_relations(QAccessibleInterface const * this_ptr, int match) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(this_ptr->relations(QFlags< QAccessible::RelationFlag >(match)));
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleInterface_focusChild(QAccessibleInterface const * this_ptr) {
  return this_ptr->focusChild();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleInterface_childAt(QAccessibleInterface const * this_ptr, int x, int y) {
  return this_ptr->childAt(x, y);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleInterface_parent(QAccessibleInterface const * this_ptr) {
  return this_ptr->parent();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleInterface_child(QAccessibleInterface const * this_ptr, int index) {
  return this_ptr->child(index);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleInterface_childCount(QAccessibleInterface const * this_ptr) {
  return this_ptr->childCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleInterface_indexOfChild(QAccessibleInterface const * this_ptr, QAccessibleInterface const * arg1) {
  return this_ptr->indexOfChild(arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleInterface_text(QAccessibleInterface const * this_ptr, QAccessible::Text t) {
  return new QString(this_ptr->text(t));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleInterface_setText(QAccessibleInterface * this_ptr, QAccessible::Text t, QString const * text) {
  this_ptr->setText(t, *text);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QAccessibleInterface_rect(QAccessibleInterface const * this_ptr) {
  return new QRect(this_ptr->rect());
}


RITUAL_EXPORT QAccessible::Role ctr_qt_gui_ffi_QAccessibleInterface_role(QAccessibleInterface const * this_ptr) {
  return this_ptr->role();
}


RITUAL_EXPORT QAccessible::State * ctr_qt_gui_ffi_QAccessibleInterface_state(QAccessibleInterface const * this_ptr) {
  return new QAccessible::State(this_ptr->state());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QAccessibleInterface_foregroundColor(QAccessibleInterface const * this_ptr) {
  return new QColor(this_ptr->foregroundColor());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QAccessibleInterface_backgroundColor(QAccessibleInterface const * this_ptr) {
  return new QColor(this_ptr->backgroundColor());
}


RITUAL_EXPORT QAccessibleTextInterface * ctr_qt_gui_ffi_QAccessibleInterface_textInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->textInterface();
}


RITUAL_EXPORT QAccessibleEditableTextInterface * ctr_qt_gui_ffi_QAccessibleInterface_editableTextInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->editableTextInterface();
}


RITUAL_EXPORT QAccessibleValueInterface * ctr_qt_gui_ffi_QAccessibleInterface_valueInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->valueInterface();
}


RITUAL_EXPORT QAccessibleActionInterface * ctr_qt_gui_ffi_QAccessibleInterface_actionInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->actionInterface();
}


RITUAL_EXPORT QAccessibleTableInterface * ctr_qt_gui_ffi_QAccessibleInterface_tableInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->tableInterface();
}


RITUAL_EXPORT QAccessibleTableCellInterface * ctr_qt_gui_ffi_QAccessibleInterface_tableCellInterface(QAccessibleInterface * this_ptr) {
  return this_ptr->tableCellInterface();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleInterface_virtual_hook(QAccessibleInterface * this_ptr, int id, void * data) {
  this_ptr->virtual_hook(id, data);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QAccessibleInterface_interface_cast(QAccessibleInterface * this_ptr, QAccessible::InterfaceType arg1) {
  return this_ptr->interface_cast(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_dQAccessibleTextInterface(QAccessibleTextInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_selection(QAccessibleTextInterface const * this_ptr, int selectionIndex, int * startOffset, int * endOffset) {
  this_ptr->selection(selectionIndex, startOffset, endOffset);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextInterface_selectionCount(QAccessibleTextInterface const * this_ptr) {
  return this_ptr->selectionCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_addSelection(QAccessibleTextInterface * this_ptr, int startOffset, int endOffset) {
  this_ptr->addSelection(startOffset, endOffset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_removeSelection(QAccessibleTextInterface * this_ptr, int selectionIndex) {
  this_ptr->removeSelection(selectionIndex);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_setSelection(QAccessibleTextInterface * this_ptr, int selectionIndex, int startOffset, int endOffset) {
  this_ptr->setSelection(selectionIndex, startOffset, endOffset);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextInterface_cursorPosition(QAccessibleTextInterface const * this_ptr) {
  return this_ptr->cursorPosition();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_setCursorPosition(QAccessibleTextInterface * this_ptr, int position) {
  this_ptr->setCursorPosition(position);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInterface_text(QAccessibleTextInterface const * this_ptr, int startOffset, int endOffset) {
  return new QString(this_ptr->text(startOffset, endOffset));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInterface_textBeforeOffset(QAccessibleTextInterface const * this_ptr, int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) {
  return new QString(this_ptr->textBeforeOffset(offset, boundaryType, startOffset, endOffset));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInterface_textAfterOffset(QAccessibleTextInterface const * this_ptr, int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) {
  return new QString(this_ptr->textAfterOffset(offset, boundaryType, startOffset, endOffset));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInterface_textAtOffset(QAccessibleTextInterface const * this_ptr, int offset, QAccessible::TextBoundaryType boundaryType, int * startOffset, int * endOffset) {
  return new QString(this_ptr->textAtOffset(offset, boundaryType, startOffset, endOffset));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextInterface_characterCount(QAccessibleTextInterface const * this_ptr) {
  return this_ptr->characterCount();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QAccessibleTextInterface_characterRect(QAccessibleTextInterface const * this_ptr, int offset) {
  return new QRect(this_ptr->characterRect(offset));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextInterface_offsetAtPoint(QAccessibleTextInterface const * this_ptr, QPoint const * point) {
  return this_ptr->offsetAtPoint(*point);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInterface_scrollToSubstring(QAccessibleTextInterface * this_ptr, int startIndex, int endIndex) {
  this_ptr->scrollToSubstring(startIndex, endIndex);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInterface_attributes(QAccessibleTextInterface const * this_ptr, int offset, int * startOffset, int * endOffset) {
  return new QString(this_ptr->attributes(offset, startOffset, endOffset));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEditableTextInterface_dQAccessibleEditableTextInterface(QAccessibleEditableTextInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEditableTextInterface_deleteText(QAccessibleEditableTextInterface * this_ptr, int startOffset, int endOffset) {
  this_ptr->deleteText(startOffset, endOffset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEditableTextInterface_insertText(QAccessibleEditableTextInterface * this_ptr, int offset, QString const * text) {
  this_ptr->insertText(offset, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEditableTextInterface_replaceText(QAccessibleEditableTextInterface * this_ptr, int startOffset, int endOffset, QString const * text) {
  this_ptr->replaceText(startOffset, endOffset, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleValueInterface_dQAccessibleValueInterface(QAccessibleValueInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QAccessibleValueInterface_currentValue(QAccessibleValueInterface const * this_ptr) {
  return new QVariant(this_ptr->currentValue());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleValueInterface_setCurrentValue(QAccessibleValueInterface * this_ptr, QVariant const * value) {
  this_ptr->setCurrentValue(*value);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QAccessibleValueInterface_maximumValue(QAccessibleValueInterface const * this_ptr) {
  return new QVariant(this_ptr->maximumValue());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QAccessibleValueInterface_minimumValue(QAccessibleValueInterface const * this_ptr) {
  return new QVariant(this_ptr->minimumValue());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QAccessibleValueInterface_minimumStepSize(QAccessibleValueInterface const * this_ptr) {
  return new QVariant(this_ptr->minimumStepSize());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableCellInterface_dQAccessibleTableCellInterface(QAccessibleTableCellInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableCellInterface_isSelected(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->isSelected();
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QAccessibleTableCellInterface_columnHeaderCells(QAccessibleTableCellInterface const * this_ptr) {
  return new QList< QAccessibleInterface * >(this_ptr->columnHeaderCells());
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QAccessibleTableCellInterface_rowHeaderCells(QAccessibleTableCellInterface const * this_ptr) {
  return new QList< QAccessibleInterface * >(this_ptr->rowHeaderCells());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableCellInterface_columnIndex(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->columnIndex();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableCellInterface_rowIndex(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->rowIndex();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableCellInterface_columnExtent(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->columnExtent();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableCellInterface_rowExtent(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->rowExtent();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleTableCellInterface_table(QAccessibleTableCellInterface const * this_ptr) {
  return this_ptr->table();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableInterface_dQAccessibleTableInterface(QAccessibleTableInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleTableInterface_caption(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->caption();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleTableInterface_summary(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->summary();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleTableInterface_cellAt(QAccessibleTableInterface const * this_ptr, int row, int column) {
  return this_ptr->cellAt(row, column);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableInterface_selectedCellCount(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->selectedCellCount();
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QAccessibleTableInterface_selectedCells(QAccessibleTableInterface const * this_ptr) {
  return new QList< QAccessibleInterface * >(this_ptr->selectedCells());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTableInterface_columnDescription(QAccessibleTableInterface const * this_ptr, int column) {
  return new QString(this_ptr->columnDescription(column));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTableInterface_rowDescription(QAccessibleTableInterface const * this_ptr, int row) {
  return new QString(this_ptr->rowDescription(row));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableInterface_selectedColumnCount(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->selectedColumnCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableInterface_selectedRowCount(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->selectedRowCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableInterface_columnCount(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableInterface_rowCount(QAccessibleTableInterface const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QAccessibleTableInterface_selectedColumns(QAccessibleTableInterface const * this_ptr) {
  return new QList< int >(this_ptr->selectedColumns());
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QAccessibleTableInterface_selectedRows(QAccessibleTableInterface const * this_ptr) {
  return new QList< int >(this_ptr->selectedRows());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_isColumnSelected(QAccessibleTableInterface const * this_ptr, int column) {
  return this_ptr->isColumnSelected(column);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_isRowSelected(QAccessibleTableInterface const * this_ptr, int row) {
  return this_ptr->isRowSelected(row);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_selectRow(QAccessibleTableInterface * this_ptr, int row) {
  return this_ptr->selectRow(row);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_selectColumn(QAccessibleTableInterface * this_ptr, int column) {
  return this_ptr->selectColumn(column);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_unselectRow(QAccessibleTableInterface * this_ptr, int row) {
  return this_ptr->unselectRow(row);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleTableInterface_unselectColumn(QAccessibleTableInterface * this_ptr, int column) {
  return this_ptr->unselectColumn(column);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableInterface_modelChange(QAccessibleTableInterface * this_ptr, QAccessibleTableModelChangeEvent * event) {
  this_ptr->modelChange(event);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_tr(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QAccessibleActionInterface::tr(sourceText, disambiguation, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_trUtf8(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QAccessibleActionInterface::trUtf8(sourceText, disambiguation, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleActionInterface_dQAccessibleActionInterface(QAccessibleActionInterface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QAccessibleActionInterface_actionNames(QAccessibleActionInterface const * this_ptr) {
  return new QStringList(this_ptr->actionNames());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_localizedActionName(QAccessibleActionInterface const * this_ptr, QString const * name) {
  return new QString(this_ptr->localizedActionName(*name));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_localizedActionDescription(QAccessibleActionInterface const * this_ptr, QString const * name) {
  return new QString(this_ptr->localizedActionDescription(*name));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleActionInterface_doAction(QAccessibleActionInterface * this_ptr, QString const * actionName) {
  this_ptr->doAction(*actionName);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QAccessibleActionInterface_keyBindingsForAction(QAccessibleActionInterface const * this_ptr, QString const * actionName) {
  return new QStringList(this_ptr->keyBindingsForAction(*actionName));
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_pressAction() {
  return &QAccessibleActionInterface::pressAction();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_increaseAction() {
  return &QAccessibleActionInterface::increaseAction();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_decreaseAction() {
  return &QAccessibleActionInterface::decreaseAction();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_showMenuAction() {
  return &QAccessibleActionInterface::showMenuAction();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_setFocusAction() {
  return &QAccessibleActionInterface::setFocusAction();
}


RITUAL_EXPORT QString const * ctr_qt_gui_ffi_QAccessibleActionInterface_toggleAction() {
  return &QAccessibleActionInterface::toggleAction();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_scrollLeftAction() {
  return new QString(QAccessibleActionInterface::scrollLeftAction());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_scrollRightAction() {
  return new QString(QAccessibleActionInterface::scrollRightAction());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_scrollUpAction() {
  return new QString(QAccessibleActionInterface::scrollUpAction());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_scrollDownAction() {
  return new QString(QAccessibleActionInterface::scrollDownAction());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_nextPageAction() {
  return new QString(QAccessibleActionInterface::nextPageAction());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleActionInterface_previousPageAction() {
  return new QString(QAccessibleActionInterface::previousPageAction());
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_QAccessibleEvent_QAccessibleEvent(QObject * obj, QAccessible::Event typ) {
  return new QAccessibleEvent(obj, typ);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_QAccessibleEvent_QAccessibleEvent1(QAccessibleInterface * iface, QAccessible::Event typ) {
  return new QAccessibleEvent(iface, typ);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEvent_dQAccessibleEvent(QAccessibleEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessible::Event ctr_qt_gui_ffi_QAccessibleEvent_type(QAccessibleEvent const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QAccessibleEvent_object(QAccessibleEvent const * this_ptr) {
  return this_ptr->object();
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QAccessibleEvent_uniqueId(QAccessibleEvent const * this_ptr) {
  return this_ptr->uniqueId();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleEvent_setChild(QAccessibleEvent * this_ptr, int chld) {
  this_ptr->setChild(chld);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleEvent_child(QAccessibleEvent const * this_ptr) {
  return this_ptr->child();
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleEvent_accessibleInterface(QAccessibleEvent const * this_ptr) {
  return this_ptr->accessibleInterface();
}


RITUAL_EXPORT QAccessibleStateChangeEvent * ctr_qt_gui_ffi_QAccessibleStateChangeEvent_QAccessibleStateChangeEvent(QObject * obj, QAccessible::State const * state) {
  return new QAccessibleStateChangeEvent(obj, *state);
}


RITUAL_EXPORT QAccessibleStateChangeEvent * ctr_qt_gui_ffi_QAccessibleStateChangeEvent_QAccessibleStateChangeEvent1(QAccessibleInterface * iface, QAccessible::State const * state) {
  return new QAccessibleStateChangeEvent(iface, *state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleStateChangeEvent_dQAccessibleStateChangeEvent(QAccessibleStateChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessible::State * ctr_qt_gui_ffi_QAccessibleStateChangeEvent_changedStates(QAccessibleStateChangeEvent const * this_ptr) {
  return new QAccessible::State(this_ptr->changedStates());
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_QAccessibleTextCursorEvent_QAccessibleTextCursorEvent(QObject * obj, int cursorPos) {
  return new QAccessibleTextCursorEvent(obj, cursorPos);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_QAccessibleTextCursorEvent_QAccessibleTextCursorEvent1(QAccessibleInterface * iface, int cursorPos) {
  return new QAccessibleTextCursorEvent(iface, cursorPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextCursorEvent_dQAccessibleTextCursorEvent(QAccessibleTextCursorEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextCursorEvent_setCursorPosition(QAccessibleTextCursorEvent * this_ptr, int position) {
  this_ptr->setCursorPosition(position);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextCursorEvent_cursorPosition(QAccessibleTextCursorEvent const * this_ptr) {
  return this_ptr->cursorPosition();
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent(QObject * obj, int start, int end) {
  return new QAccessibleTextSelectionEvent(obj, start, end);
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_QAccessibleTextSelectionEvent1(QAccessibleInterface * iface, int start, int end) {
  return new QAccessibleTextSelectionEvent(iface, start, end);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_dQAccessibleTextSelectionEvent(QAccessibleTextSelectionEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_setSelection(QAccessibleTextSelectionEvent * this_ptr, int start, int end) {
  this_ptr->setSelection(start, end);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_selectionStart(QAccessibleTextSelectionEvent const * this_ptr) {
  return this_ptr->selectionStart();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextSelectionEvent_selectionEnd(QAccessibleTextSelectionEvent const * this_ptr) {
  return this_ptr->selectionEnd();
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_QAccessibleTextInsertEvent_QAccessibleTextInsertEvent(QObject * obj, int position, QString const * text) {
  return new QAccessibleTextInsertEvent(obj, position, *text);
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_QAccessibleTextInsertEvent_QAccessibleTextInsertEvent1(QAccessibleInterface * iface, int position, QString const * text) {
  return new QAccessibleTextInsertEvent(iface, position, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextInsertEvent_dQAccessibleTextInsertEvent(QAccessibleTextInsertEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextInsertEvent_textInserted(QAccessibleTextInsertEvent const * this_ptr) {
  return new QString(this_ptr->textInserted());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextInsertEvent_changePosition(QAccessibleTextInsertEvent const * this_ptr) {
  return this_ptr->changePosition();
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent(QObject * obj, int position, QString const * text) {
  return new QAccessibleTextRemoveEvent(obj, position, *text);
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_QAccessibleTextRemoveEvent_QAccessibleTextRemoveEvent1(QAccessibleInterface * iface, int position, QString const * text) {
  return new QAccessibleTextRemoveEvent(iface, position, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextRemoveEvent_dQAccessibleTextRemoveEvent(QAccessibleTextRemoveEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextRemoveEvent_textRemoved(QAccessibleTextRemoveEvent const * this_ptr) {
  return new QString(this_ptr->textRemoved());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextRemoveEvent_changePosition(QAccessibleTextRemoveEvent const * this_ptr) {
  return this_ptr->changePosition();
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent(QObject * obj, int position, QString const * oldText, QString const * text) {
  return new QAccessibleTextUpdateEvent(obj, position, *oldText, *text);
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_QAccessibleTextUpdateEvent1(QAccessibleInterface * iface, int position, QString const * oldText, QString const * text) {
  return new QAccessibleTextUpdateEvent(iface, position, *oldText, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_dQAccessibleTextUpdateEvent(QAccessibleTextUpdateEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_textRemoved(QAccessibleTextUpdateEvent const * this_ptr) {
  return new QString(this_ptr->textRemoved());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_textInserted(QAccessibleTextUpdateEvent const * this_ptr) {
  return new QString(this_ptr->textInserted());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTextUpdateEvent_changePosition(QAccessibleTextUpdateEvent const * this_ptr) {
  return this_ptr->changePosition();
}


RITUAL_EXPORT QAccessibleValueChangeEvent * ctr_qt_gui_ffi_QAccessibleValueChangeEvent_QAccessibleValueChangeEvent(QObject * obj, QVariant const * val) {
  return new QAccessibleValueChangeEvent(obj, *val);
}


RITUAL_EXPORT QAccessibleValueChangeEvent * ctr_qt_gui_ffi_QAccessibleValueChangeEvent_QAccessibleValueChangeEvent1(QAccessibleInterface * iface, QVariant const * val) {
  return new QAccessibleValueChangeEvent(iface, *val);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleValueChangeEvent_dQAccessibleValueChangeEvent(QAccessibleValueChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleValueChangeEvent_setValue(QAccessibleValueChangeEvent * this_ptr, QVariant const * val) {
  this_ptr->setValue(*val);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QAccessibleValueChangeEvent_value(QAccessibleValueChangeEvent const * this_ptr) {
  return new QVariant(this_ptr->value());
}


RITUAL_EXPORT QAccessibleTableModelChangeEvent * ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent(QObject * obj, QAccessibleTableModelChangeEvent::ModelChangeType changeType) {
  return new QAccessibleTableModelChangeEvent(obj, changeType);
}


RITUAL_EXPORT QAccessibleTableModelChangeEvent * ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_QAccessibleTableModelChangeEvent1(QAccessibleInterface * iface, QAccessibleTableModelChangeEvent::ModelChangeType changeType) {
  return new QAccessibleTableModelChangeEvent(iface, changeType);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_dQAccessibleTableModelChangeEvent(QAccessibleTableModelChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_setModelChangeType(QAccessibleTableModelChangeEvent * this_ptr, QAccessibleTableModelChangeEvent::ModelChangeType changeType) {
  this_ptr->setModelChangeType(changeType);
}


RITUAL_EXPORT QAccessibleTableModelChangeEvent::ModelChangeType ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_modelChangeType(QAccessibleTableModelChangeEvent const * this_ptr) {
  return this_ptr->modelChangeType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_setFirstRow(QAccessibleTableModelChangeEvent * this_ptr, int row) {
  this_ptr->setFirstRow(row);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_setFirstColumn(QAccessibleTableModelChangeEvent * this_ptr, int col) {
  this_ptr->setFirstColumn(col);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_setLastRow(QAccessibleTableModelChangeEvent * this_ptr, int row) {
  this_ptr->setLastRow(row);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_setLastColumn(QAccessibleTableModelChangeEvent * this_ptr, int col) {
  this_ptr->setLastColumn(col);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_firstRow(QAccessibleTableModelChangeEvent const * this_ptr) {
  return this_ptr->firstRow();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_firstColumn(QAccessibleTableModelChangeEvent const * this_ptr) {
  return this_ptr->firstColumn();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_lastRow(QAccessibleTableModelChangeEvent const * this_ptr) {
  return this_ptr->lastRow();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessibleTableModelChangeEvent_lastColumn(QAccessibleTableModelChangeEvent const * this_ptr) {
  return this_ptr->lastColumn();
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_qAccessibleRoleString(QAccessible::Role role) {
  return qAccessibleRoleString(role);
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_qAccessibleEventString(QAccessible::Event event) {
  return qAccessibleEventString(event);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_qAccessibleLocalizedActionDescription(QString const * actionName) {
  return new QString(qAccessibleLocalizedActionDescription(*actionName));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__61(QDebug const * d, QAccessibleInterface const * iface) {
  return new QDebug(operator<<(*d, iface));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__62(QDebug const * d, QAccessibleEvent const * ev) {
  return new QDebug(operator<<(*d, *ev));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAccessibleObject_isValid(QAccessibleObject const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QAccessibleObject_object(QAccessibleObject const * this_ptr) {
  return this_ptr->object();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QAccessibleObject_rect(QAccessibleObject const * this_ptr) {
  return new QRect(this_ptr->rect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessibleObject_setText(QAccessibleObject * this_ptr, QAccessible::Text t, QString const * text) {
  this_ptr->setText(t, *text);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleObject_childAt(QAccessibleObject const * this_ptr, int x, int y) {
  return this_ptr->childAt(x, y);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QAccessiblePlugin_metaObject(QAccessiblePlugin const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QAccessiblePlugin_qt_metacast(QAccessiblePlugin * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QAccessiblePlugin_qt_metacall(QAccessiblePlugin * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessiblePlugin_tr(char const * s, char const * c, int n) {
  return new QString(QAccessiblePlugin::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QAccessiblePlugin_trUtf8(char const * s, char const * c, int n) {
  return new QString(QAccessiblePlugin::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessiblePlugin_dQAccessiblePlugin(QAccessiblePlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessiblePlugin_create(QAccessiblePlugin * this_ptr, QString const * key, QObject * object) {
  return this_ptr->create(*key, object);
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurfaceFormat_QSurfaceFormat() {
  return new QSurfaceFormat();
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurfaceFormat_QSurfaceFormat1(int options) {
  return new QSurfaceFormat(QFlags< QSurfaceFormat::FormatOption >(options));
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurfaceFormat_QSurfaceFormat2(QSurfaceFormat const * other) {
  return new QSurfaceFormat(*other);
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurfaceFormat_operator_(QSurfaceFormat * this_ptr, QSurfaceFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_dQSurfaceFormat(QSurfaceFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setDepthBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setDepthBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_depthBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->depthBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setStencilBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setStencilBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_stencilBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->stencilBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setRedBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setRedBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_redBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->redBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setGreenBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setGreenBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_greenBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->greenBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setBlueBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setBlueBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_blueBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->blueBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setAlphaBufferSize(QSurfaceFormat * this_ptr, int size) {
  this_ptr->setAlphaBufferSize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_alphaBufferSize(QSurfaceFormat const * this_ptr) {
  return this_ptr->alphaBufferSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setSamples(QSurfaceFormat * this_ptr, int numSamples) {
  this_ptr->setSamples(numSamples);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_samples(QSurfaceFormat const * this_ptr) {
  return this_ptr->samples();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setSwapBehavior(QSurfaceFormat * this_ptr, QSurfaceFormat::SwapBehavior behavior) {
  this_ptr->setSwapBehavior(behavior);
}


RITUAL_EXPORT QSurfaceFormat::SwapBehavior ctr_qt_gui_ffi_QSurfaceFormat_swapBehavior(QSurfaceFormat const * this_ptr) {
  return this_ptr->swapBehavior();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSurfaceFormat_hasAlpha(QSurfaceFormat const * this_ptr) {
  return this_ptr->hasAlpha();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setProfile(QSurfaceFormat * this_ptr, QSurfaceFormat::OpenGLContextProfile profile) {
  this_ptr->setProfile(profile);
}


RITUAL_EXPORT QSurfaceFormat::OpenGLContextProfile ctr_qt_gui_ffi_QSurfaceFormat_profile(QSurfaceFormat const * this_ptr) {
  return this_ptr->profile();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setRenderableType(QSurfaceFormat * this_ptr, QSurfaceFormat::RenderableType type) {
  this_ptr->setRenderableType(type);
}


RITUAL_EXPORT QSurfaceFormat::RenderableType ctr_qt_gui_ffi_QSurfaceFormat_renderableType(QSurfaceFormat const * this_ptr) {
  return this_ptr->renderableType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setMajorVersion(QSurfaceFormat * this_ptr, int majorVersion) {
  this_ptr->setMajorVersion(majorVersion);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_majorVersion(QSurfaceFormat const * this_ptr) {
  return this_ptr->majorVersion();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setMinorVersion(QSurfaceFormat * this_ptr, int minorVersion) {
  this_ptr->setMinorVersion(minorVersion);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_minorVersion(QSurfaceFormat const * this_ptr) {
  return this_ptr->minorVersion();
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QSurfaceFormat_version(QSurfaceFormat const * this_ptr) {
  return new QPair< int, int >(this_ptr->version());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setVersion(QSurfaceFormat * this_ptr, int major, int minor) {
  this_ptr->setVersion(major, minor);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSurfaceFormat_stereo(QSurfaceFormat const * this_ptr) {
  return this_ptr->stereo();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setStereo(QSurfaceFormat * this_ptr, bool enable) {
  this_ptr->setStereo(enable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setOption(QSurfaceFormat * this_ptr, int opt) {
  this_ptr->setOption(QFlags< QSurfaceFormat::FormatOption >(opt));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSurfaceFormat_testOption(QSurfaceFormat const * this_ptr, int opt) {
  return this_ptr->testOption(QFlags< QSurfaceFormat::FormatOption >(opt));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setOptions(QSurfaceFormat * this_ptr, int options) {
  this_ptr->setOptions(QFlags< QSurfaceFormat::FormatOption >(options));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setOption1(QSurfaceFormat * this_ptr, QSurfaceFormat::FormatOption option, bool on) {
  this_ptr->setOption(option, on);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSurfaceFormat_testOption1(QSurfaceFormat const * this_ptr, QSurfaceFormat::FormatOption option) {
  return this_ptr->testOption(option);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_options(QSurfaceFormat const * this_ptr) {
  return int(this_ptr->options());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSurfaceFormat_swapInterval(QSurfaceFormat const * this_ptr) {
  return this_ptr->swapInterval();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setSwapInterval(QSurfaceFormat * this_ptr, int interval) {
  this_ptr->setSwapInterval(interval);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setDefaultFormat(QSurfaceFormat const * format) {
  QSurfaceFormat::setDefaultFormat(*format);
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurfaceFormat_defaultFormat() {
  return new QSurfaceFormat(QSurfaceFormat::defaultFormat());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__63(QSurfaceFormat const * arg1, QSurfaceFormat const * arg2) {
  return operator==(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__65(QDebug const * arg1, QSurfaceFormat const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurface_dQSurface(QSurface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSurface::SurfaceClass ctr_qt_gui_ffi_QSurface_surfaceClass(QSurface const * this_ptr) {
  return this_ptr->surfaceClass();
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QSurface_format(QSurface const * this_ptr) {
  return new QSurfaceFormat(this_ptr->format());
}


RITUAL_EXPORT QSurface::SurfaceType ctr_qt_gui_ffi_QSurface_surfaceType(QSurface const * this_ptr) {
  return this_ptr->surfaceType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSurface_supportsOpenGL(QSurface const * this_ptr) {
  return this_ptr->supportsOpenGL();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QSurface_size(QSurface const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_QIcon() {
  return new QIcon();
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_QIcon1(QPixmap const * pixmap) {
  return new QIcon(*pixmap);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_QIcon2(QIcon const * other) {
  return new QIcon(*other);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_QIcon4(QString const * fileName) {
  return new QIcon(*fileName);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_QIcon5(QIconEngine * engine) {
  return new QIcon(engine);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_dQIcon(QIcon * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_operator_(QIcon * this_ptr, QIcon const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_swap(QIcon * this_ptr, QIcon * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QIcon_operator_QVariant(QIcon const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap(QIcon const * this_ptr, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QPixmap(this_ptr->pixmap(*size, mode, state));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap1(QIcon const * this_ptr, int w, int h, QIcon::Mode mode, QIcon::State state) {
  return new QPixmap(this_ptr->pixmap(w, h, mode, state));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap2(QIcon const * this_ptr, int extent, QIcon::Mode mode, QIcon::State state) {
  return new QPixmap(this_ptr->pixmap(extent, mode, state));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap3(QIcon const * this_ptr, QWindow * window, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QPixmap(this_ptr->pixmap(window, *size, mode, state));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize(QIcon const * this_ptr, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QSize(this_ptr->actualSize(*size, mode, state));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize1(QIcon const * this_ptr, QWindow * window, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QSize(this_ptr->actualSize(window, *size, mode, state));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIcon_name(QIcon const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint(QIcon const * this_ptr, QPainter * painter, QRect const * rect, int alignment, QIcon::Mode mode, QIcon::State state) {
  this_ptr->paint(painter, *rect, QFlags< Qt::AlignmentFlag >(alignment), mode, state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint1(QIcon const * this_ptr, QPainter * painter, int x, int y, int w, int h, int alignment, QIcon::Mode mode, QIcon::State state) {
  this_ptr->paint(painter, x, y, w, h, QFlags< Qt::AlignmentFlag >(alignment), mode, state);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIcon_isNull(QIcon const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIcon_isDetached(QIcon const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_detach(QIcon * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QIcon_cacheKey(QIcon const * this_ptr) {
  return this_ptr->cacheKey();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addPixmap(QIcon * this_ptr, QPixmap const * pixmap, QIcon::Mode mode, QIcon::State state) {
  this_ptr->addPixmap(*pixmap, mode, state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addFile(QIcon * this_ptr, QString const * fileName, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  this_ptr->addFile(*fileName, *size, mode, state);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIcon_availableSizes(QIcon const * this_ptr, QIcon::Mode mode, QIcon::State state) {
  return new QList< QSize >(this_ptr->availableSizes(mode, state));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_setIsMask(QIcon * this_ptr, bool isMask) {
  this_ptr->setIsMask(isMask);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIcon_isMask(QIcon const * this_ptr) {
  return this_ptr->isMask();
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_fromTheme(QString const * name) {
  return new QIcon(QIcon::fromTheme(*name));
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QIcon_fromTheme1(QString const * name, QIcon const * fallback) {
  return new QIcon(QIcon::fromTheme(*name, *fallback));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIcon_hasThemeIcon(QString const * name) {
  return QIcon::hasThemeIcon(*name);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QIcon_themeSearchPaths() {
  return new QStringList(QIcon::themeSearchPaths());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_setThemeSearchPaths(QStringList const * searchpath) {
  QIcon::setThemeSearchPaths(*searchpath);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIcon_themeName() {
  return new QString(QIcon::themeName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_setThemeName(QString const * path) {
  QIcon::setThemeName(*path);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap22(QIcon * value1, QIcon * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__66(QDataStream * arg1, QIcon const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__67(QDataStream * arg1, QIcon * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__68(QDebug const * dbg, QIcon const * arg2) {
  return new QDebug(operator<<(*dbg, *arg2));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_qt_findAtNxFile(QString const * baseFileName, double targetDevicePixelRatio, double * sourceDevicePixelRatio) {
  return new QString(qt_findAtNxFile(*baseFileName, targetDevicePixelRatio, sourceDevicePixelRatio));
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor() {
  return new QCursor();
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor1(Qt::CursorShape shape) {
  return new QCursor(shape);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor2(QBitmap const * bitmap, QBitmap const * mask, int hotX, int hotY) {
  return new QCursor(*bitmap, *mask, hotX, hotY);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor3(QPixmap const * pixmap, int hotX, int hotY) {
  return new QCursor(*pixmap, hotX, hotY);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor4(QCursor const * cursor) {
  return new QCursor(*cursor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_dQCursor(QCursor * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_operator_(QCursor * this_ptr, QCursor const * cursor) {
  return &this_ptr->operator=(*cursor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_swap(QCursor * this_ptr, QCursor * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QCursor_operator_QVariant(QCursor const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT Qt::CursorShape ctr_qt_gui_ffi_QCursor_shape(QCursor const * this_ptr) {
  return this_ptr->shape();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_setShape(QCursor * this_ptr, Qt::CursorShape newShape) {
  this_ptr->setShape(newShape);
}


RITUAL_EXPORT QBitmap const * ctr_qt_gui_ffi_QCursor_bitmap(QCursor const * this_ptr) {
  return this_ptr->bitmap();
}


RITUAL_EXPORT QBitmap const * ctr_qt_gui_ffi_QCursor_mask(QCursor const * this_ptr) {
  return this_ptr->mask();
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QCursor_pixmap(QCursor const * this_ptr) {
  return new QPixmap(this_ptr->pixmap());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QCursor_hotSpot(QCursor const * this_ptr) {
  return new QPoint(this_ptr->hotSpot());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QCursor_pos() {
  return new QPoint(QCursor::pos());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QCursor_pos1(QScreen const * screen) {
  return new QPoint(QCursor::pos(screen));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_setPos(int x, int y) {
  QCursor::setPos(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_setPos1(QScreen * screen, int x, int y) {
  QCursor::setPos(screen, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_setPos2(QPoint const * p) {
  QCursor::setPos(*p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QCursor_setPos3(QScreen * screen, QPoint const * p) {
  QCursor::setPos(screen, *p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap23(QCursor * value1, QCursor * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__69(QDataStream * outS, QCursor const * cursor) {
  return &operator<<(*outS, *cursor);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__70(QDataStream * inS, QCursor * cursor) {
  return &operator>>(*inS, *cursor);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__71(QDebug const * arg1, QCursor const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QWindow_metaObject(QWindow const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QWindow_qt_metacast(QWindow * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_qt_metacall(QWindow * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QWindow_tr(char const * s, char const * c, int n) {
  return new QString(QWindow::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QWindow_trUtf8(char const * s, char const * c, int n) {
  return new QString(QWindow::trUtf8(s, c, n));
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_QWindow(QScreen * screen) {
  return new QWindow(screen);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_QWindow1(QWindow * parent) {
  return new QWindow(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_dQWindow(QWindow * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setSurfaceType(QWindow * this_ptr, QSurface::SurfaceType surfaceType) {
  this_ptr->setSurfaceType(surfaceType);
}


RITUAL_EXPORT QSurface::SurfaceType ctr_qt_gui_ffi_QWindow_surfaceType(QWindow const * this_ptr) {
  return this_ptr->surfaceType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isVisible(QWindow const * this_ptr) {
  return this_ptr->isVisible();
}


RITUAL_EXPORT QWindow::Visibility ctr_qt_gui_ffi_QWindow_visibility(QWindow const * this_ptr) {
  return this_ptr->visibility();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setVisibility(QWindow * this_ptr, QWindow::Visibility v) {
  this_ptr->setVisibility(v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_create(QWindow * this_ptr) {
  this_ptr->create();
}


RITUAL_EXPORT unsigned long long ctr_qt_gui_ffi_QWindow_winId(QWindow const * this_ptr) {
  return this_ptr->winId();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_parent(QWindow const * this_ptr, QWindow::AncestorMode mode) {
  return this_ptr->parent(mode);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_parent1(QWindow const * this_ptr) {
  return this_ptr->parent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setParent(QWindow * this_ptr, QWindow * parent) {
  this_ptr->setParent(parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isTopLevel(QWindow const * this_ptr) {
  return this_ptr->isTopLevel();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isModal(QWindow const * this_ptr) {
  return this_ptr->isModal();
}


RITUAL_EXPORT Qt::WindowModality ctr_qt_gui_ffi_QWindow_modality(QWindow const * this_ptr) {
  return this_ptr->modality();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setModality(QWindow * this_ptr, Qt::WindowModality modality) {
  this_ptr->setModality(modality);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFormat(QWindow * this_ptr, QSurfaceFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QWindow_format(QWindow const * this_ptr) {
  return new QSurfaceFormat(this_ptr->format());
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QWindow_requestedFormat(QWindow const * this_ptr) {
  return new QSurfaceFormat(this_ptr->requestedFormat());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFlags(QWindow * this_ptr, int flags) {
  this_ptr->setFlags(QFlags< Qt::WindowType >(flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_flags(QWindow const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFlag(QWindow * this_ptr, Qt::WindowType arg1, bool on) {
  this_ptr->setFlag(arg1, on);
}


RITUAL_EXPORT Qt::WindowType ctr_qt_gui_ffi_QWindow_type(QWindow const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QWindow_title(QWindow const * this_ptr) {
  return new QString(this_ptr->title());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setOpacity(QWindow * this_ptr, double level) {
  this_ptr->setOpacity(level);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QWindow_opacity(QWindow const * this_ptr) {
  return this_ptr->opacity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMask(QWindow * this_ptr, QRegion const * region) {
  this_ptr->setMask(*region);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QWindow_mask(QWindow const * this_ptr) {
  return new QRegion(this_ptr->mask());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isActive(QWindow const * this_ptr) {
  return this_ptr->isActive();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_reportContentOrientationChange(QWindow * this_ptr, Qt::ScreenOrientation orientation) {
  this_ptr->reportContentOrientationChange(orientation);
}


RITUAL_EXPORT Qt::ScreenOrientation ctr_qt_gui_ffi_QWindow_contentOrientation(QWindow const * this_ptr) {
  return this_ptr->contentOrientation();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QWindow_devicePixelRatio(QWindow const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT Qt::WindowState ctr_qt_gui_ffi_QWindow_windowState(QWindow const * this_ptr) {
  return this_ptr->windowState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setWindowState(QWindow * this_ptr, Qt::WindowState state) {
  this_ptr->setWindowState(state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setTransientParent(QWindow * this_ptr, QWindow * parent) {
  this_ptr->setTransientParent(parent);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_transientParent(QWindow const * this_ptr) {
  return this_ptr->transientParent();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isAncestorOf(QWindow const * this_ptr, QWindow const * child, QWindow::AncestorMode mode) {
  return this_ptr->isAncestorOf(child, mode);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isExposed(QWindow const * this_ptr) {
  return this_ptr->isExposed();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_minimumWidth(QWindow const * this_ptr) {
  return this_ptr->minimumWidth();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_minimumHeight(QWindow const * this_ptr) {
  return this_ptr->minimumHeight();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_maximumWidth(QWindow const * this_ptr) {
  return this_ptr->maximumWidth();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_maximumHeight(QWindow const * this_ptr) {
  return this_ptr->maximumHeight();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QWindow_minimumSize(QWindow const * this_ptr) {
  return new QSize(this_ptr->minimumSize());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QWindow_maximumSize(QWindow const * this_ptr) {
  return new QSize(this_ptr->maximumSize());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QWindow_baseSize(QWindow const * this_ptr) {
  return new QSize(this_ptr->baseSize());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QWindow_sizeIncrement(QWindow const * this_ptr) {
  return new QSize(this_ptr->sizeIncrement());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMinimumSize(QWindow * this_ptr, QSize const * size) {
  this_ptr->setMinimumSize(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMaximumSize(QWindow * this_ptr, QSize const * size) {
  this_ptr->setMaximumSize(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setBaseSize(QWindow * this_ptr, QSize const * size) {
  this_ptr->setBaseSize(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setSizeIncrement(QWindow * this_ptr, QSize const * size) {
  this_ptr->setSizeIncrement(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setGeometry(QWindow * this_ptr, int posx, int posy, int w, int h) {
  this_ptr->setGeometry(posx, posy, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setGeometry1(QWindow * this_ptr, QRect const * rect) {
  this_ptr->setGeometry(*rect);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QWindow_geometry(QWindow const * this_ptr) {
  return new QRect(this_ptr->geometry());
}


RITUAL_EXPORT QMargins * ctr_qt_gui_ffi_QWindow_frameMargins(QWindow const * this_ptr) {
  return new QMargins(this_ptr->frameMargins());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QWindow_frameGeometry(QWindow const * this_ptr) {
  return new QRect(this_ptr->frameGeometry());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWindow_framePosition(QWindow const * this_ptr) {
  return new QPoint(this_ptr->framePosition());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFramePosition(QWindow * this_ptr, QPoint const * point) {
  this_ptr->setFramePosition(*point);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_width(QWindow const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_height(QWindow const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_x(QWindow const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_y(QWindow const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QWindow_size(QWindow const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWindow_position(QWindow const * this_ptr) {
  return new QPoint(this_ptr->position());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setPosition(QWindow * this_ptr, QPoint const * pt) {
  this_ptr->setPosition(*pt);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setPosition1(QWindow * this_ptr, int posx, int posy) {
  this_ptr->setPosition(posx, posy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_resize(QWindow * this_ptr, QSize const * newSize) {
  this_ptr->resize(*newSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_resize1(QWindow * this_ptr, int w, int h) {
  this_ptr->resize(w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFilePath(QWindow * this_ptr, QString const * filePath) {
  this_ptr->setFilePath(*filePath);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QWindow_filePath(QWindow const * this_ptr) {
  return new QString(this_ptr->filePath());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setIcon(QWindow * this_ptr, QIcon const * icon) {
  this_ptr->setIcon(*icon);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QWindow_icon(QWindow const * this_ptr) {
  return new QIcon(this_ptr->icon());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_destroy(QWindow * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_setKeyboardGrabEnabled(QWindow * this_ptr, bool grab) {
  return this_ptr->setKeyboardGrabEnabled(grab);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_setMouseGrabEnabled(QWindow * this_ptr, bool grab) {
  return this_ptr->setMouseGrabEnabled(grab);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QWindow_screen(QWindow const * this_ptr) {
  return this_ptr->screen();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setScreen(QWindow * this_ptr, QScreen * screen) {
  this_ptr->setScreen(screen);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QWindow_accessibleRoot(QWindow const * this_ptr) {
  return this_ptr->accessibleRoot();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QWindow_focusObject(QWindow const * this_ptr) {
  return this_ptr->focusObject();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWindow_mapToGlobal(QWindow const * this_ptr, QPoint const * pos) {
  return new QPoint(this_ptr->mapToGlobal(*pos));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QWindow_mapFromGlobal(QWindow const * this_ptr, QPoint const * pos) {
  return new QPoint(this_ptr->mapFromGlobal(*pos));
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QWindow_cursor(QWindow const * this_ptr) {
  return new QCursor(this_ptr->cursor());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setCursor(QWindow * this_ptr, QCursor const * arg1) {
  this_ptr->setCursor(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_unsetCursor(QWindow * this_ptr) {
  this_ptr->unsetCursor();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_fromWinId(unsigned long long id) {
  return QWindow::fromWinId(id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_requestActivate(QWindow * this_ptr) {
  this_ptr->requestActivate();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setVisible(QWindow * this_ptr, bool visible) {
  this_ptr->setVisible(visible);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_show(QWindow * this_ptr) {
  this_ptr->show();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_hide(QWindow * this_ptr) {
  this_ptr->hide();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_showMinimized(QWindow * this_ptr) {
  this_ptr->showMinimized();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_showMaximized(QWindow * this_ptr) {
  this_ptr->showMaximized();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_showFullScreen(QWindow * this_ptr) {
  this_ptr->showFullScreen();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_showNormal(QWindow * this_ptr) {
  this_ptr->showNormal();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_close(QWindow * this_ptr) {
  return this_ptr->close();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_raise(QWindow * this_ptr) {
  this_ptr->raise();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_lower(QWindow * this_ptr) {
  this_ptr->lower();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setTitle(QWindow * this_ptr, QString const * arg1) {
  this_ptr->setTitle(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setX(QWindow * this_ptr, int arg) {
  this_ptr->setX(arg);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setY(QWindow * this_ptr, int arg) {
  this_ptr->setY(arg);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setWidth(QWindow * this_ptr, int arg) {
  this_ptr->setWidth(arg);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setHeight(QWindow * this_ptr, int arg) {
  this_ptr->setHeight(arg);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMinimumWidth(QWindow * this_ptr, int w) {
  this_ptr->setMinimumWidth(w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMinimumHeight(QWindow * this_ptr, int h) {
  this_ptr->setMinimumHeight(h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMaximumWidth(QWindow * this_ptr, int w) {
  this_ptr->setMaximumWidth(w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setMaximumHeight(QWindow * this_ptr, int h) {
  this_ptr->setMaximumHeight(h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_alert(QWindow * this_ptr, int msec) {
  this_ptr->alert(msec);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_requestUpdate(QWindow * this_ptr) {
  this_ptr->requestUpdate();
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__72(QDebug const * arg1, QWindow const * arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QBackingStore * ctr_qt_gui_ffi_QBackingStore_QBackingStore(QWindow * window) {
  return new QBackingStore(window);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_dQBackingStore(QBackingStore * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QBackingStore_window(QBackingStore const * this_ptr) {
  return this_ptr->window();
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QBackingStore_paintDevice(QBackingStore * this_ptr) {
  return this_ptr->paintDevice();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_flush(QBackingStore * this_ptr, QRegion const * region, QWindow * window, QPoint const * offset) {
  this_ptr->flush(*region, window, *offset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_resize(QBackingStore * this_ptr, QSize const * size) {
  this_ptr->resize(*size);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QBackingStore_size(QBackingStore const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QBackingStore_scroll(QBackingStore * this_ptr, QRegion const * area, int dx, int dy) {
  return this_ptr->scroll(*area, dx, dy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_beginPaint(QBackingStore * this_ptr, QRegion const * arg1) {
  this_ptr->beginPaint(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_endPaint(QBackingStore * this_ptr) {
  this_ptr->endPaint();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_setStaticContents(QBackingStore * this_ptr, QRegion const * region) {
  this_ptr->setStaticContents(*region);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QBackingStore_staticContents(QBackingStore const * this_ptr) {
  return new QRegion(this_ptr->staticContents());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QBackingStore_hasStaticContents(QBackingStore const * this_ptr) {
  return this_ptr->hasStaticContents();
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap() {
  return new QBitmap();
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap1(QPixmap const * arg1) {
  return new QBitmap(*arg1);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap2(int w, int h) {
  return new QBitmap(w, h);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap3(QSize const * arg1) {
  return new QBitmap(*arg1);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap4(QString const * fileName, char const * format) {
  return new QBitmap(*fileName, format);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap5(QBitmap const * other) {
  return new QBitmap(*other);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_operator_(QBitmap * this_ptr, QBitmap const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBitmap_dQBitmap(QBitmap * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_operator_2(QBitmap * this_ptr, QPixmap const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBitmap_swap(QBitmap * this_ptr, QBitmap * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QBitmap_operator_QVariant(QBitmap const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBitmap_clear(QBitmap * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_fromImage(QImage const * image, int flags) {
  return new QBitmap(QBitmap::fromImage(*image, QFlags< Qt::ImageConversionFlag >(flags)));
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_fromData(QSize const * size, unsigned char const * bits, QImage::Format monoFormat) {
  return new QBitmap(QBitmap::fromData(*size, bits, monoFormat));
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_transformed(QBitmap const * this_ptr, QMatrix const * arg1) {
  return new QBitmap(this_ptr->transformed(*arg1));
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_transformed1(QBitmap const * this_ptr, QTransform const * matrix) {
  return new QBitmap(this_ptr->transformed(*matrix));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap24(QBitmap * value1, QBitmap * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QClipboard_metaObject(QClipboard const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QClipboard_qt_metacast(QClipboard * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QClipboard_qt_metacall(QClipboard * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_tr(char const * s, char const * c, int n) {
  return new QString(QClipboard::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_trUtf8(char const * s, char const * c, int n) {
  return new QString(QClipboard::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_clear(QClipboard * this_ptr, QClipboard::Mode mode) {
  this_ptr->clear(mode);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QClipboard_supportsSelection(QClipboard const * this_ptr) {
  return this_ptr->supportsSelection();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QClipboard_supportsFindBuffer(QClipboard const * this_ptr) {
  return this_ptr->supportsFindBuffer();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QClipboard_ownsSelection(QClipboard const * this_ptr) {
  return this_ptr->ownsSelection();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QClipboard_ownsClipboard(QClipboard const * this_ptr) {
  return this_ptr->ownsClipboard();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QClipboard_ownsFindBuffer(QClipboard const * this_ptr) {
  return this_ptr->ownsFindBuffer();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_text(QClipboard const * this_ptr, QClipboard::Mode mode) {
  return new QString(this_ptr->text(mode));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_text1(QClipboard const * this_ptr, QString * subtype, QClipboard::Mode mode) {
  return new QString(this_ptr->text(*subtype, mode));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setText(QClipboard * this_ptr, QString const * arg1, QClipboard::Mode mode) {
  this_ptr->setText(*arg1, mode);
}


RITUAL_EXPORT QMimeData const * ctr_qt_gui_ffi_QClipboard_mimeData(QClipboard const * this_ptr, QClipboard::Mode mode) {
  return this_ptr->mimeData(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setMimeData(QClipboard * this_ptr, QMimeData * data, QClipboard::Mode mode) {
  this_ptr->setMimeData(data, mode);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QClipboard_image(QClipboard const * this_ptr, QClipboard::Mode mode) {
  return new QImage(this_ptr->image(mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QClipboard_pixmap(QClipboard const * this_ptr, QClipboard::Mode mode) {
  return new QPixmap(this_ptr->pixmap(mode));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setImage(QClipboard * this_ptr, QImage const * arg1, QClipboard::Mode mode) {
  this_ptr->setImage(*arg1, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setPixmap(QClipboard * this_ptr, QPixmap const * arg1, QClipboard::Mode mode) {
  this_ptr->setPixmap(*arg1, mode);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QDesktopServices_openUrl(QUrl const * url) {
  return QDesktopServices::openUrl(*url);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDesktopServices_setUrlHandler(QString const * scheme, QObject * receiver, char const * method) {
  QDesktopServices::setUrlHandler(*scheme, receiver, method);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDesktopServices_unsetUrlHandler(QString const * scheme) {
  QDesktopServices::unsetUrlHandler(*scheme);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QDrag_metaObject(QDrag const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QDrag_qt_metacast(QDrag * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDrag_qt_metacall(QDrag * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QDrag_tr(char const * s, char const * c, int n) {
  return new QString(QDrag::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QDrag_trUtf8(char const * s, char const * c, int n) {
  return new QString(QDrag::trUtf8(s, c, n));
}


RITUAL_EXPORT QDrag * ctr_qt_gui_ffi_QDrag_QDrag(QObject * dragSource) {
  return new QDrag(dragSource);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_dQDrag(QDrag * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_setMimeData(QDrag * this_ptr, QMimeData * data) {
  this_ptr->setMimeData(data);
}


RITUAL_EXPORT QMimeData * ctr_qt_gui_ffi_QDrag_mimeData(QDrag const * this_ptr) {
  return this_ptr->mimeData();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_setPixmap(QDrag * this_ptr, QPixmap const * arg1) {
  this_ptr->setPixmap(*arg1);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QDrag_pixmap(QDrag const * this_ptr) {
  return new QPixmap(this_ptr->pixmap());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_setHotSpot(QDrag * this_ptr, QPoint const * hotspot) {
  this_ptr->setHotSpot(*hotspot);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QDrag_hotSpot(QDrag const * this_ptr) {
  return new QPoint(this_ptr->hotSpot());
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QDrag_source(QDrag const * this_ptr) {
  return this_ptr->source();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QDrag_target(QDrag const * this_ptr) {
  return this_ptr->target();
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_start(QDrag * this_ptr, int supportedActions) {
  return this_ptr->start(QFlags< Qt::DropAction >(supportedActions));
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_exec(QDrag * this_ptr, int supportedActions) {
  return this_ptr->exec(QFlags< Qt::DropAction >(supportedActions));
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_exec1(QDrag * this_ptr, int supportedActions, Qt::DropAction defaultAction) {
  return this_ptr->exec(QFlags< Qt::DropAction >(supportedActions), defaultAction);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_setDragCursor(QDrag * this_ptr, QPixmap const * cursor, Qt::DropAction action) {
  this_ptr->setDragCursor(*cursor, action);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QDrag_dragCursor(QDrag const * this_ptr, Qt::DropAction action) {
  return new QPixmap(this_ptr->dragCursor(action));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDrag_supportedActions(QDrag const * this_ptr) {
  return int(this_ptr->supportedActions());
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_defaultAction(QDrag const * this_ptr) {
  return this_ptr->defaultAction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDrag_cancel() {
  QDrag::cancel();
}


RITUAL_EXPORT QFontInfo * ctr_qt_gui_ffi_QFontInfo_QFontInfo(QFont const * arg1) {
  return new QFontInfo(*arg1);
}


RITUAL_EXPORT QFontInfo * ctr_qt_gui_ffi_QFontInfo_QFontInfo1(QFontInfo const * arg1) {
  return new QFontInfo(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontInfo_dQFontInfo(QFontInfo * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFontInfo * ctr_qt_gui_ffi_QFontInfo_operator_(QFontInfo * this_ptr, QFontInfo const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontInfo_swap(QFontInfo * this_ptr, QFontInfo * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontInfo_family(QFontInfo const * this_ptr) {
  return new QString(this_ptr->family());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontInfo_styleName(QFontInfo const * this_ptr) {
  return new QString(this_ptr->styleName());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontInfo_pixelSize(QFontInfo const * this_ptr) {
  return this_ptr->pixelSize();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontInfo_pointSize(QFontInfo const * this_ptr) {
  return this_ptr->pointSize();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontInfo_pointSizeF(QFontInfo const * this_ptr) {
  return this_ptr->pointSizeF();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_italic(QFontInfo const * this_ptr) {
  return this_ptr->italic();
}


RITUAL_EXPORT QFont::Style ctr_qt_gui_ffi_QFontInfo_style(QFontInfo const * this_ptr) {
  return this_ptr->style();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontInfo_weight(QFontInfo const * this_ptr) {
  return this_ptr->weight();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_bold(QFontInfo const * this_ptr) {
  return this_ptr->bold();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_underline(QFontInfo const * this_ptr) {
  return this_ptr->underline();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_overline(QFontInfo const * this_ptr) {
  return this_ptr->overline();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_strikeOut(QFontInfo const * this_ptr) {
  return this_ptr->strikeOut();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_fixedPitch(QFontInfo const * this_ptr) {
  return this_ptr->fixedPitch();
}


RITUAL_EXPORT QFont::StyleHint ctr_qt_gui_ffi_QFontInfo_styleHint(QFontInfo const * this_ptr) {
  return this_ptr->styleHint();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_rawMode(QFontInfo const * this_ptr) {
  return this_ptr->rawMode();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontInfo_exactMatch(QFontInfo const * this_ptr) {
  return this_ptr->exactMatch();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap25(QFontInfo * value1, QFontInfo * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QFontMetrics * ctr_qt_gui_ffi_QFontMetrics_QFontMetrics(QFont const * arg1) {
  return new QFontMetrics(*arg1);
}


RITUAL_EXPORT QFontMetrics * ctr_qt_gui_ffi_QFontMetrics_QFontMetrics1(QFont const * arg1, QPaintDevice * pd) {
  return new QFontMetrics(*arg1, pd);
}


RITUAL_EXPORT QFontMetrics * ctr_qt_gui_ffi_QFontMetrics_QFontMetrics2(QFontMetrics const * arg1) {
  return new QFontMetrics(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontMetrics_dQFontMetrics(QFontMetrics * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFontMetrics * ctr_qt_gui_ffi_QFontMetrics_operator_(QFontMetrics * this_ptr, QFontMetrics const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontMetrics_swap(QFontMetrics * this_ptr, QFontMetrics * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_ascent(QFontMetrics const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_capHeight(QFontMetrics const * this_ptr) {
  return this_ptr->capHeight();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_descent(QFontMetrics const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_height(QFontMetrics const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_leading(QFontMetrics const * this_ptr) {
  return this_ptr->leading();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_lineSpacing(QFontMetrics const * this_ptr) {
  return this_ptr->lineSpacing();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_minLeftBearing(QFontMetrics const * this_ptr) {
  return this_ptr->minLeftBearing();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_minRightBearing(QFontMetrics const * this_ptr) {
  return this_ptr->minRightBearing();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_maxWidth(QFontMetrics const * this_ptr) {
  return this_ptr->maxWidth();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_xHeight(QFontMetrics const * this_ptr) {
  return this_ptr->xHeight();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_averageCharWidth(QFontMetrics const * this_ptr) {
  return this_ptr->averageCharWidth();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetrics_inFont(QFontMetrics const * this_ptr, QChar const * arg1) {
  return this_ptr->inFont(*arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetrics_inFontUcs4(QFontMetrics const * this_ptr, unsigned int ucs4) {
  return this_ptr->inFontUcs4(ucs4);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_leftBearing(QFontMetrics const * this_ptr, QChar const * arg1) {
  return this_ptr->leftBearing(*arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_rightBearing(QFontMetrics const * this_ptr, QChar const * arg1) {
  return this_ptr->rightBearing(*arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_width(QFontMetrics const * this_ptr, QString const * arg1, int len) {
  return this_ptr->width(*arg1, len);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_width1(QFontMetrics const * this_ptr, QString const * arg1, int len, int flags) {
  return this_ptr->width(*arg1, len, flags);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_width2(QFontMetrics const * this_ptr, QChar const * arg1) {
  return this_ptr->width(*arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_charWidth(QFontMetrics const * this_ptr, QString const * str, int pos) {
  return this_ptr->charWidth(*str, pos);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect(QFontMetrics const * this_ptr, QChar const * arg1) {
  return new QRect(this_ptr->boundingRect(*arg1));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect1(QFontMetrics const * this_ptr, QString const * text) {
  return new QRect(this_ptr->boundingRect(*text));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect2(QFontMetrics const * this_ptr, QRect const * r, int flags, QString const * text, int tabstops, int * tabarray) {
  return new QRect(this_ptr->boundingRect(*r, flags, *text, tabstops, tabarray));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect3(QFontMetrics const * this_ptr, int x, int y, int w, int h, int flags, QString const * text, int tabstops, int * tabarray) {
  return new QRect(this_ptr->boundingRect(x, y, w, h, flags, *text, tabstops, tabarray));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QFontMetrics_size(QFontMetrics const * this_ptr, int flags, QString const * str, int tabstops, int * tabarray) {
  return new QSize(this_ptr->size(flags, *str, tabstops, tabarray));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_tightBoundingRect(QFontMetrics const * this_ptr, QString const * text) {
  return new QRect(this_ptr->tightBoundingRect(*text));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontMetrics_elidedText(QFontMetrics const * this_ptr, QString const * text, Qt::TextElideMode mode, int width, int flags) {
  return new QString(this_ptr->elidedText(*text, mode, width, flags));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_underlinePos(QFontMetrics const * this_ptr) {
  return this_ptr->underlinePos();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_overlinePos(QFontMetrics const * this_ptr) {
  return this_ptr->overlinePos();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_strikeOutPos(QFontMetrics const * this_ptr) {
  return this_ptr->strikeOutPos();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_lineWidth(QFontMetrics const * this_ptr) {
  return this_ptr->lineWidth();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetrics_operator__(QFontMetrics const * this_ptr, QFontMetrics const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap26(QFontMetrics * value1, QFontMetrics * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_QFontMetricsF(QFont const * arg1) {
  return new QFontMetricsF(*arg1);
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_QFontMetricsF1(QFont const * arg1, QPaintDevice * pd) {
  return new QFontMetricsF(*arg1, pd);
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_QFontMetricsF2(QFontMetrics const * arg1) {
  return new QFontMetricsF(*arg1);
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_QFontMetricsF3(QFontMetricsF const * arg1) {
  return new QFontMetricsF(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontMetricsF_dQFontMetricsF(QFontMetricsF * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_operator_(QFontMetricsF * this_ptr, QFontMetricsF const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT QFontMetricsF * ctr_qt_gui_ffi_QFontMetricsF_operator_1(QFontMetricsF * this_ptr, QFontMetrics const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontMetricsF_swap(QFontMetricsF * this_ptr, QFontMetricsF * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_ascent(QFontMetricsF const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_capHeight(QFontMetricsF const * this_ptr) {
  return this_ptr->capHeight();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_descent(QFontMetricsF const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_height(QFontMetricsF const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_leading(QFontMetricsF const * this_ptr) {
  return this_ptr->leading();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_lineSpacing(QFontMetricsF const * this_ptr) {
  return this_ptr->lineSpacing();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_minLeftBearing(QFontMetricsF const * this_ptr) {
  return this_ptr->minLeftBearing();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_minRightBearing(QFontMetricsF const * this_ptr) {
  return this_ptr->minRightBearing();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_maxWidth(QFontMetricsF const * this_ptr) {
  return this_ptr->maxWidth();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_xHeight(QFontMetricsF const * this_ptr) {
  return this_ptr->xHeight();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_averageCharWidth(QFontMetricsF const * this_ptr) {
  return this_ptr->averageCharWidth();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetricsF_inFont(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return this_ptr->inFont(*arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetricsF_inFontUcs4(QFontMetricsF const * this_ptr, unsigned int ucs4) {
  return this_ptr->inFontUcs4(ucs4);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_leftBearing(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return this_ptr->leftBearing(*arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_rightBearing(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return this_ptr->rightBearing(*arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_width(QFontMetricsF const * this_ptr, QString const * string) {
  return this_ptr->width(*string);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_width1(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return this_ptr->width(*arg1);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_boundingRect(QFontMetricsF const * this_ptr, QString const * string) {
  return new QRectF(this_ptr->boundingRect(*string));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_boundingRect1(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return new QRectF(this_ptr->boundingRect(*arg1));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_boundingRect2(QFontMetricsF const * this_ptr, QRectF const * r, int flags, QString const * string, int tabstops, int * tabarray) {
  return new QRectF(this_ptr->boundingRect(*r, flags, *string, tabstops, tabarray));
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QFontMetricsF_size(QFontMetricsF const * this_ptr, int flags, QString const * str, int tabstops, int * tabarray) {
  return new QSizeF(this_ptr->size(flags, *str, tabstops, tabarray));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_tightBoundingRect(QFontMetricsF const * this_ptr, QString const * text) {
  return new QRectF(this_ptr->tightBoundingRect(*text));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontMetricsF_elidedText(QFontMetricsF const * this_ptr, QString const * text, Qt::TextElideMode mode, double width, int flags) {
  return new QString(this_ptr->elidedText(*text, mode, width, flags));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_underlinePos(QFontMetricsF const * this_ptr) {
  return this_ptr->underlinePos();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_overlinePos(QFontMetricsF const * this_ptr) {
  return this_ptr->overlinePos();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_strikeOutPos(QFontMetricsF const * this_ptr) {
  return this_ptr->strikeOutPos();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_lineWidth(QFontMetricsF const * this_ptr) {
  return this_ptr->lineWidth();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontMetricsF_operator__(QFontMetricsF const * this_ptr, QFontMetricsF const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap27(QFontMetricsF * value1, QFontMetricsF * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QGenericPlugin_metaObject(QGenericPlugin const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QGenericPlugin_qt_metacast(QGenericPlugin * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGenericPlugin_qt_metacall(QGenericPlugin * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGenericPlugin_tr(char const * s, char const * c, int n) {
  return new QString(QGenericPlugin::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGenericPlugin_trUtf8(char const * s, char const * c, int n) {
  return new QString(QGenericPlugin::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGenericPlugin_dQGenericPlugin(QGenericPlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QGenericPlugin_create(QGenericPlugin * this_ptr, QString const * name, QString const * spec) {
  return this_ptr->create(*name, *spec);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QGenericPluginFactory_keys() {
  return new QStringList(QGenericPluginFactory::keys());
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QGenericPluginFactory_create(QString const * arg1, QString const * arg2) {
  return QGenericPluginFactory::create(*arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QInputMethod_metaObject(QInputMethod const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QInputMethod_qt_metacast(QInputMethod * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QInputMethod_qt_metacall(QInputMethod * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QInputMethod_tr(char const * s, char const * c, int n) {
  return new QString(QInputMethod::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QInputMethod_trUtf8(char const * s, char const * c, int n) {
  return new QString(QInputMethod::trUtf8(s, c, n));
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QInputMethod_inputItemTransform(QInputMethod const * this_ptr) {
  return new QTransform(this_ptr->inputItemTransform());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_setInputItemTransform(QInputMethod * this_ptr, QTransform const * transform) {
  this_ptr->setInputItemTransform(*transform);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QInputMethod_inputItemRectangle(QInputMethod const * this_ptr) {
  return new QRectF(this_ptr->inputItemRectangle());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_setInputItemRectangle(QInputMethod * this_ptr, QRectF const * rect) {
  this_ptr->setInputItemRectangle(*rect);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QInputMethod_cursorRectangle(QInputMethod const * this_ptr) {
  return new QRectF(this_ptr->cursorRectangle());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QInputMethod_anchorRectangle(QInputMethod const * this_ptr) {
  return new QRectF(this_ptr->anchorRectangle());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QInputMethod_keyboardRectangle(QInputMethod const * this_ptr) {
  return new QRectF(this_ptr->keyboardRectangle());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QInputMethod_inputItemClipRectangle(QInputMethod const * this_ptr) {
  return new QRectF(this_ptr->inputItemClipRectangle());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QInputMethod_isVisible(QInputMethod const * this_ptr) {
  return this_ptr->isVisible();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_setVisible(QInputMethod * this_ptr, bool visible) {
  this_ptr->setVisible(visible);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QInputMethod_isAnimating(QInputMethod const * this_ptr) {
  return this_ptr->isAnimating();
}


RITUAL_EXPORT QLocale * ctr_qt_gui_ffi_QInputMethod_locale(QInputMethod const * this_ptr) {
  return new QLocale(this_ptr->locale());
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QInputMethod_inputDirection(QInputMethod const * this_ptr) {
  return this_ptr->inputDirection();
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QInputMethod_queryFocusObject(Qt::InputMethodQuery query, QVariant const * argument) {
  return new QVariant(QInputMethod::queryFocusObject(query, *argument));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_show(QInputMethod * this_ptr) {
  this_ptr->show();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_hide(QInputMethod * this_ptr) {
  this_ptr->hide();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_update(QInputMethod * this_ptr, int queries) {
  this_ptr->update(QFlags< Qt::InputMethodQuery >(queries));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_reset(QInputMethod * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_commit(QInputMethod * this_ptr) {
  this_ptr->commit();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethod_invokeAction(QInputMethod * this_ptr, QInputMethod::Action a, int cursorPosition) {
  this_ptr->invokeAction(a, cursorPosition);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QGuiApplication_metaObject(QGuiApplication const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QGuiApplication_qt_metacast(QGuiApplication * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGuiApplication_qt_metacall(QGuiApplication * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_tr(char const * s, char const * c, int n) {
  return new QString(QGuiApplication::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_trUtf8(char const * s, char const * c, int n) {
  return new QString(QGuiApplication::trUtf8(s, c, n));
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_QGuiApplication_QGuiApplication(int * argc, char * * argv, int arg3) {
  return new QGuiApplication(*argc, argv, arg3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_dQGuiApplication(QGuiApplication * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setApplicationDisplayName(QString const * name) {
  QGuiApplication::setApplicationDisplayName(*name);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_applicationDisplayName() {
  return new QString(QGuiApplication::applicationDisplayName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setDesktopFileName(QString const * name) {
  QGuiApplication::setDesktopFileName(*name);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_desktopFileName() {
  return new QString(QGuiApplication::desktopFileName());
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QGuiApplication_allWindows() {
  return new QList< QWindow * >(QGuiApplication::allWindows());
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QGuiApplication_topLevelWindows() {
  return new QList< QWindow * >(QGuiApplication::topLevelWindows());
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QGuiApplication_topLevelAt(QPoint const * pos) {
  return QGuiApplication::topLevelAt(*pos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setWindowIcon(QIcon const * icon) {
  QGuiApplication::setWindowIcon(*icon);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QGuiApplication_windowIcon() {
  return new QIcon(QGuiApplication::windowIcon());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_platformName() {
  return new QString(QGuiApplication::platformName());
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QGuiApplication_modalWindow() {
  return QGuiApplication::modalWindow();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QGuiApplication_focusWindow() {
  return QGuiApplication::focusWindow();
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_QGuiApplication_focusObject() {
  return QGuiApplication::focusObject();
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QGuiApplication_primaryScreen() {
  return QGuiApplication::primaryScreen();
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QGuiApplication_screens() {
  return new QList< QScreen * >(QGuiApplication::screens());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QGuiApplication_devicePixelRatio(QGuiApplication const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QGuiApplication_overrideCursor() {
  return QGuiApplication::overrideCursor();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setOverrideCursor(QCursor const * arg1) {
  QGuiApplication::setOverrideCursor(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_changeOverrideCursor(QCursor const * arg1) {
  QGuiApplication::changeOverrideCursor(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_restoreOverrideCursor() {
  QGuiApplication::restoreOverrideCursor();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QGuiApplication_font() {
  return new QFont(QGuiApplication::font());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setFont(QFont const * arg1) {
  QGuiApplication::setFont(*arg1);
}


RITUAL_EXPORT QClipboard * ctr_qt_gui_ffi_QGuiApplication_clipboard() {
  return QGuiApplication::clipboard();
}


RITUAL_EXPORT QPalette * ctr_qt_gui_ffi_QGuiApplication_palette() {
  return new QPalette(QGuiApplication::palette());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setPalette(QPalette const * pal) {
  QGuiApplication::setPalette(*pal);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGuiApplication_keyboardModifiers() {
  return int(QGuiApplication::keyboardModifiers());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGuiApplication_queryKeyboardModifiers() {
  return int(QGuiApplication::queryKeyboardModifiers());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGuiApplication_mouseButtons() {
  return int(QGuiApplication::mouseButtons());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setLayoutDirection(Qt::LayoutDirection direction) {
  QGuiApplication::setLayoutDirection(direction);
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QGuiApplication_layoutDirection() {
  return QGuiApplication::layoutDirection();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_isRightToLeft() {
  return QGuiApplication::isRightToLeft();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_isLeftToRight() {
  return QGuiApplication::isLeftToRight();
}


RITUAL_EXPORT QStyleHints * ctr_qt_gui_ffi_QGuiApplication_styleHints() {
  return QGuiApplication::styleHints();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setDesktopSettingsAware(bool on) {
  QGuiApplication::setDesktopSettingsAware(on);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_desktopSettingsAware() {
  return QGuiApplication::desktopSettingsAware();
}


RITUAL_EXPORT QInputMethod * ctr_qt_gui_ffi_QGuiApplication_inputMethod() {
  return QGuiApplication::inputMethod();
}


RITUAL_EXPORT void (*ctr_qt_gui_ffi_QGuiApplication_platformFunction(QByteArray const * function))() {
  return QGuiApplication::platformFunction(*function);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setQuitOnLastWindowClosed(bool quit) {
  QGuiApplication::setQuitOnLastWindowClosed(quit);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_quitOnLastWindowClosed() {
  return QGuiApplication::quitOnLastWindowClosed();
}


RITUAL_EXPORT Qt::ApplicationState ctr_qt_gui_ffi_QGuiApplication_applicationState() {
  return QGuiApplication::applicationState();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QGuiApplication_exec() {
  return QGuiApplication::exec();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_notify(QGuiApplication * this_ptr, QObject * arg1, QEvent * arg2) {
  return this_ptr->notify(arg1, arg2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_isSessionRestored(QGuiApplication const * this_ptr) {
  return this_ptr->isSessionRestored();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_sessionId(QGuiApplication const * this_ptr) {
  return new QString(this_ptr->sessionId());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QGuiApplication_sessionKey(QGuiApplication const * this_ptr) {
  return new QString(this_ptr->sessionKey());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_isSavingSession(QGuiApplication const * this_ptr) {
  return this_ptr->isSavingSession();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QGuiApplication_isFallbackSessionManagementEnabled() {
  return QGuiApplication::isFallbackSessionManagementEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setFallbackSessionManagementEnabled(bool arg1) {
  QGuiApplication::setFallbackSessionManagementEnabled(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_sync() {
  QGuiApplication::sync();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_dQIconEngine(QIconEngine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_paint(QIconEngine * this_ptr, QPainter * painter, QRect const * rect, QIcon::Mode mode, QIcon::State state) {
  this_ptr->paint(painter, *rect, mode, state);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIconEngine_actualSize(QIconEngine * this_ptr, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QSize(this_ptr->actualSize(*size, mode, state));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIconEngine_pixmap(QIconEngine * this_ptr, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  return new QPixmap(this_ptr->pixmap(*size, mode, state));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_addPixmap(QIconEngine * this_ptr, QPixmap const * pixmap, QIcon::Mode mode, QIcon::State state) {
  this_ptr->addPixmap(*pixmap, mode, state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_addFile(QIconEngine * this_ptr, QString const * fileName, QSize const * size, QIcon::Mode mode, QIcon::State state) {
  this_ptr->addFile(*fileName, *size, mode, state);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIconEngine_key(QIconEngine const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT QIconEngine * ctr_qt_gui_ffi_QIconEngine_clone(QIconEngine const * this_ptr) {
  return this_ptr->clone();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIconEngine_read(QIconEngine * this_ptr, QDataStream * in) {
  return this_ptr->read(*in);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIconEngine_write(QIconEngine const * this_ptr, QDataStream * out) {
  return this_ptr->write(*out);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIconEngine_availableSizes(QIconEngine const * this_ptr, QIcon::Mode mode, QIcon::State state) {
  return new QList< QSize >(this_ptr->availableSizes(mode, state));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIconEngine_iconName(QIconEngine const * this_ptr) {
  return new QString(this_ptr->iconName());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QIconEngine_isNull(QIconEngine const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIconEngine_scaledPixmap(QIconEngine * this_ptr, QSize const * size, QIcon::Mode mode, QIcon::State state, double scale) {
  return new QPixmap(this_ptr->scaledPixmap(*size, mode, state, scale));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_virtual_hook(QIconEngine * this_ptr, int id, void * data) {
  this_ptr->virtual_hook(id, data);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QIconEnginePlugin_metaObject(QIconEnginePlugin const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QIconEnginePlugin_qt_metacast(QIconEnginePlugin * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QIconEnginePlugin_qt_metacall(QIconEnginePlugin * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIconEnginePlugin_tr(char const * s, char const * c, int n) {
  return new QString(QIconEnginePlugin::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIconEnginePlugin_trUtf8(char const * s, char const * c, int n) {
  return new QString(QIconEnginePlugin::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEnginePlugin_dQIconEnginePlugin(QIconEnginePlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIconEngine * ctr_qt_gui_ffi_QIconEnginePlugin_create(QIconEnginePlugin * this_ptr, QString const * filename) {
  return this_ptr->create(*filename);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOHandler_dQImageIOHandler(QImageIOHandler * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOHandler_setDevice(QImageIOHandler * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QImageIOHandler_device(QImageIOHandler const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOHandler_setFormat(QImageIOHandler * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOHandler_setFormat1(QImageIOHandler const * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageIOHandler_format(QImageIOHandler const * this_ptr) {
  return new QByteArray(this_ptr->format());
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageIOHandler_name(QImageIOHandler const * this_ptr) {
  return new QByteArray(this_ptr->name());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_canRead(QImageIOHandler const * this_ptr) {
  return this_ptr->canRead();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_read(QImageIOHandler * this_ptr, QImage * image) {
  return this_ptr->read(image);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_write(QImageIOHandler * this_ptr, QImage const * image) {
  return this_ptr->write(*image);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QImageIOHandler_option(QImageIOHandler const * this_ptr, QImageIOHandler::ImageOption option) {
  return new QVariant(this_ptr->option(option));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOHandler_setOption(QImageIOHandler * this_ptr, QImageIOHandler::ImageOption option, QVariant const * value) {
  this_ptr->setOption(option, *value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_supportsOption(QImageIOHandler const * this_ptr, QImageIOHandler::ImageOption option) {
  return this_ptr->supportsOption(option);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_jumpToNextImage(QImageIOHandler * this_ptr) {
  return this_ptr->jumpToNextImage();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageIOHandler_jumpToImage(QImageIOHandler * this_ptr, int imageNumber) {
  return this_ptr->jumpToImage(imageNumber);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOHandler_loopCount(QImageIOHandler const * this_ptr) {
  return this_ptr->loopCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOHandler_imageCount(QImageIOHandler const * this_ptr) {
  return this_ptr->imageCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOHandler_nextImageDelay(QImageIOHandler const * this_ptr) {
  return this_ptr->nextImageDelay();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOHandler_currentImageNumber(QImageIOHandler const * this_ptr) {
  return this_ptr->currentImageNumber();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QImageIOHandler_currentImageRect(QImageIOHandler const * this_ptr) {
  return new QRect(this_ptr->currentImageRect());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QImageIOPlugin_metaObject(QImageIOPlugin const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QImageIOPlugin_qt_metacast(QImageIOPlugin * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOPlugin_qt_metacall(QImageIOPlugin * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageIOPlugin_tr(char const * s, char const * c, int n) {
  return new QString(QImageIOPlugin::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageIOPlugin_trUtf8(char const * s, char const * c, int n) {
  return new QString(QImageIOPlugin::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageIOPlugin_dQImageIOPlugin(QImageIOPlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageIOPlugin_capabilities(QImageIOPlugin const * this_ptr, QIODevice * device, QByteArray const * format) {
  return int(this_ptr->capabilities(device, *format));
}


RITUAL_EXPORT QImageIOHandler * ctr_qt_gui_ffi_QImageIOPlugin_create(QImageIOPlugin const * this_ptr, QIODevice * device, QByteArray const * format) {
  return this_ptr->create(device, *format);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageReader_tr(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QImageReader::tr(sourceText, disambiguation, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageReader_trUtf8(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QImageReader::trUtf8(sourceText, disambiguation, n));
}


RITUAL_EXPORT QImageReader * ctr_qt_gui_ffi_QImageReader_QImageReader() {
  return new QImageReader();
}


RITUAL_EXPORT QImageReader * ctr_qt_gui_ffi_QImageReader_QImageReader1(QIODevice * device, QByteArray const * format) {
  return new QImageReader(device, *format);
}


RITUAL_EXPORT QImageReader * ctr_qt_gui_ffi_QImageReader_QImageReader2(QString const * fileName, QByteArray const * format) {
  return new QImageReader(*fileName, *format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_dQImageReader(QImageReader * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setFormat(QImageReader * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageReader_format(QImageReader const * this_ptr) {
  return new QByteArray(this_ptr->format());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setAutoDetectImageFormat(QImageReader * this_ptr, bool enabled) {
  this_ptr->setAutoDetectImageFormat(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_autoDetectImageFormat(QImageReader const * this_ptr) {
  return this_ptr->autoDetectImageFormat();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setDecideFormatFromContent(QImageReader * this_ptr, bool ignored) {
  this_ptr->setDecideFormatFromContent(ignored);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_decideFormatFromContent(QImageReader const * this_ptr) {
  return this_ptr->decideFormatFromContent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setDevice(QImageReader * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QImageReader_device(QImageReader const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setFileName(QImageReader * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageReader_fileName(QImageReader const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QImageReader_size(QImageReader const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QImage::Format ctr_qt_gui_ffi_QImageReader_imageFormat(QImageReader const * this_ptr) {
  return this_ptr->imageFormat();
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QImageReader_textKeys(QImageReader const * this_ptr) {
  return new QStringList(this_ptr->textKeys());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageReader_text(QImageReader const * this_ptr, QString const * key) {
  return new QString(this_ptr->text(*key));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setClipRect(QImageReader * this_ptr, QRect const * rect) {
  this_ptr->setClipRect(*rect);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QImageReader_clipRect(QImageReader const * this_ptr) {
  return new QRect(this_ptr->clipRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setScaledSize(QImageReader * this_ptr, QSize const * size) {
  this_ptr->setScaledSize(*size);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QImageReader_scaledSize(QImageReader const * this_ptr) {
  return new QSize(this_ptr->scaledSize());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setQuality(QImageReader * this_ptr, int quality) {
  this_ptr->setQuality(quality);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_quality(QImageReader const * this_ptr) {
  return this_ptr->quality();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setScaledClipRect(QImageReader * this_ptr, QRect const * rect) {
  this_ptr->setScaledClipRect(*rect);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QImageReader_scaledClipRect(QImageReader const * this_ptr) {
  return new QRect(this_ptr->scaledClipRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setBackgroundColor(QImageReader * this_ptr, QColor const * color) {
  this_ptr->setBackgroundColor(*color);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QImageReader_backgroundColor(QImageReader const * this_ptr) {
  return new QColor(this_ptr->backgroundColor());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_supportsAnimation(QImageReader const * this_ptr) {
  return this_ptr->supportsAnimation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_transformation(QImageReader const * this_ptr) {
  return int(this_ptr->transformation());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setAutoTransform(QImageReader * this_ptr, bool enabled) {
  this_ptr->setAutoTransform(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_autoTransform(QImageReader const * this_ptr) {
  return this_ptr->autoTransform();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageReader_setGamma(QImageReader * this_ptr, float gamma) {
  this_ptr->setGamma(gamma);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QImageReader_gamma(QImageReader const * this_ptr) {
  return this_ptr->gamma();
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageReader_subType(QImageReader const * this_ptr) {
  return new QByteArray(this_ptr->subType());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageReader_supportedSubTypes(QImageReader const * this_ptr) {
  return new QList< QByteArray >(this_ptr->supportedSubTypes());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_canRead(QImageReader const * this_ptr) {
  return this_ptr->canRead();
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImageReader_read(QImageReader * this_ptr) {
  return new QImage(this_ptr->read());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_read1(QImageReader * this_ptr, QImage * image) {
  return this_ptr->read(image);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_jumpToNextImage(QImageReader * this_ptr) {
  return this_ptr->jumpToNextImage();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_jumpToImage(QImageReader * this_ptr, int imageNumber) {
  return this_ptr->jumpToImage(imageNumber);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_loopCount(QImageReader const * this_ptr) {
  return this_ptr->loopCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_imageCount(QImageReader const * this_ptr) {
  return this_ptr->imageCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_nextImageDelay(QImageReader const * this_ptr) {
  return this_ptr->nextImageDelay();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageReader_currentImageNumber(QImageReader const * this_ptr) {
  return this_ptr->currentImageNumber();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QImageReader_currentImageRect(QImageReader const * this_ptr) {
  return new QRect(this_ptr->currentImageRect());
}


RITUAL_EXPORT QImageReader::ImageReaderError ctr_qt_gui_ffi_QImageReader_error(QImageReader const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageReader_errorString(QImageReader const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageReader_supportsOption(QImageReader const * this_ptr, QImageIOHandler::ImageOption option) {
  return this_ptr->supportsOption(option);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageReader_imageFormat1(QString const * fileName) {
  return new QByteArray(QImageReader::imageFormat(*fileName));
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageReader_imageFormat2(QIODevice * device) {
  return new QByteArray(QImageReader::imageFormat(device));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageReader_supportedImageFormats() {
  return new QList< QByteArray >(QImageReader::supportedImageFormats());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageReader_supportedMimeTypes() {
  return new QList< QByteArray >(QImageReader::supportedMimeTypes());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageWriter_tr(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QImageWriter::tr(sourceText, disambiguation, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageWriter_trUtf8(char const * sourceText, char const * disambiguation, int n) {
  return new QString(QImageWriter::trUtf8(sourceText, disambiguation, n));
}


RITUAL_EXPORT QImageWriter * ctr_qt_gui_ffi_QImageWriter_QImageWriter() {
  return new QImageWriter();
}


RITUAL_EXPORT QImageWriter * ctr_qt_gui_ffi_QImageWriter_QImageWriter1(QIODevice * device, QByteArray const * format) {
  return new QImageWriter(device, *format);
}


RITUAL_EXPORT QImageWriter * ctr_qt_gui_ffi_QImageWriter_QImageWriter2(QString const * fileName, QByteArray const * format) {
  return new QImageWriter(*fileName, *format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_dQImageWriter(QImageWriter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setFormat(QImageWriter * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageWriter_format(QImageWriter const * this_ptr) {
  return new QByteArray(this_ptr->format());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setDevice(QImageWriter * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QImageWriter_device(QImageWriter const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setFileName(QImageWriter * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageWriter_fileName(QImageWriter const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setQuality(QImageWriter * this_ptr, int quality) {
  this_ptr->setQuality(quality);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageWriter_quality(QImageWriter const * this_ptr) {
  return this_ptr->quality();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setCompression(QImageWriter * this_ptr, int compression) {
  this_ptr->setCompression(compression);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageWriter_compression(QImageWriter const * this_ptr) {
  return this_ptr->compression();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setGamma(QImageWriter * this_ptr, float gamma) {
  this_ptr->setGamma(gamma);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QImageWriter_gamma(QImageWriter const * this_ptr) {
  return this_ptr->gamma();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setSubType(QImageWriter * this_ptr, QByteArray const * type) {
  this_ptr->setSubType(*type);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QImageWriter_subType(QImageWriter const * this_ptr) {
  return new QByteArray(this_ptr->subType());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageWriter_supportedSubTypes(QImageWriter const * this_ptr) {
  return new QList< QByteArray >(this_ptr->supportedSubTypes());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setOptimizedWrite(QImageWriter * this_ptr, bool optimize) {
  this_ptr->setOptimizedWrite(optimize);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageWriter_optimizedWrite(QImageWriter const * this_ptr) {
  return this_ptr->optimizedWrite();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setProgressiveScanWrite(QImageWriter * this_ptr, bool progressive) {
  this_ptr->setProgressiveScanWrite(progressive);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageWriter_progressiveScanWrite(QImageWriter const * this_ptr) {
  return this_ptr->progressiveScanWrite();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QImageWriter_transformation(QImageWriter const * this_ptr) {
  return int(this_ptr->transformation());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setTransformation(QImageWriter * this_ptr, int orientation) {
  this_ptr->setTransformation(QFlags< QImageIOHandler::Transformation >(orientation));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setDescription(QImageWriter * this_ptr, QString const * description) {
  this_ptr->setDescription(*description);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageWriter_description(QImageWriter const * this_ptr) {
  return new QString(this_ptr->description());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImageWriter_setText(QImageWriter * this_ptr, QString const * key, QString const * text) {
  this_ptr->setText(*key, *text);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageWriter_canWrite(QImageWriter const * this_ptr) {
  return this_ptr->canWrite();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageWriter_write(QImageWriter * this_ptr, QImage const * image) {
  return this_ptr->write(*image);
}


RITUAL_EXPORT QImageWriter::ImageWriterError ctr_qt_gui_ffi_QImageWriter_error(QImageWriter const * this_ptr) {
  return this_ptr->error();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImageWriter_errorString(QImageWriter const * this_ptr) {
  return new QString(this_ptr->errorString());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImageWriter_supportsOption(QImageWriter const * this_ptr, QImageIOHandler::ImageOption option) {
  return this_ptr->supportsOption(option);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageWriter_supportedImageFormats() {
  return new QList< QByteArray >(QImageWriter::supportedImageFormats());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageWriter_supportedMimeTypes() {
  return new QList< QByteArray >(QImageWriter::supportedMimeTypes());
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D() {
  return new QVector3D();
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D2(float xpos, float ypos, float zpos) {
  return new QVector3D(xpos, ypos, zpos);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D3(QPoint const * point) {
  return new QVector3D(*point);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D4(QPointF const * point) {
  return new QVector3D(*point);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D5(QVector2D const * vector) {
  return new QVector3D(*vector);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D6(QVector2D const * vector, float zpos) {
  return new QVector3D(*vector, zpos);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D7(QVector4D const * vector) {
  return new QVector3D(*vector);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector3D_isNull(QVector3D const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_x(QVector3D const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_y(QVector3D const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_z(QVector3D const * this_ptr) {
  return this_ptr->z();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector3D_setX(QVector3D * this_ptr, float x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector3D_setY(QVector3D * this_ptr, float y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector3D_setZ(QVector3D * this_ptr, float z) {
  this_ptr->setZ(z);
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector3D_operator__(QVector3D * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_operator__1(QVector3D const * this_ptr, int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_length(QVector3D const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_lengthSquared(QVector3D const * this_ptr) {
  return this_ptr->lengthSquared();
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_normalized(QVector3D const * this_ptr) {
  return new QVector3D(this_ptr->normalized());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector3D_normalize(QVector3D * this_ptr) {
  this_ptr->normalize();
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__2(QVector3D * this_ptr, QVector3D const * vector) {
  return &this_ptr->operator+=(*vector);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__3(QVector3D * this_ptr, QVector3D const * vector) {
  return &this_ptr->operator-=(*vector);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__4(QVector3D * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__5(QVector3D * this_ptr, QVector3D const * vector) {
  return &this_ptr->operator*=(*vector);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__6(QVector3D * this_ptr, float divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator__7(QVector3D * this_ptr, QVector3D const * vector) {
  return &this_ptr->operator/=(*vector);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_dotProduct(QVector3D const * v1, QVector3D const * v2) {
  return QVector3D::dotProduct(*v1, *v2);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_crossProduct(QVector3D const * v1, QVector3D const * v2) {
  return new QVector3D(QVector3D::crossProduct(*v1, *v2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_normal(QVector3D const * v1, QVector3D const * v2) {
  return new QVector3D(QVector3D::normal(*v1, *v2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_normal1(QVector3D const * v1, QVector3D const * v2, QVector3D const * v3) {
  return new QVector3D(QVector3D::normal(*v1, *v2, *v3));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_project(QVector3D const * this_ptr, QMatrix4x4 const * modelView, QMatrix4x4 const * projection, QRect const * viewport) {
  return new QVector3D(this_ptr->project(*modelView, *projection, *viewport));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_unproject(QVector3D const * this_ptr, QMatrix4x4 const * modelView, QMatrix4x4 const * projection, QRect const * viewport) {
  return new QVector3D(this_ptr->unproject(*modelView, *projection, *viewport));
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_distanceToPoint(QVector3D const * this_ptr, QVector3D const * point) {
  return this_ptr->distanceToPoint(*point);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_distanceToPlane(QVector3D const * this_ptr, QVector3D const * plane, QVector3D const * normal) {
  return this_ptr->distanceToPlane(*plane, *normal);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_distanceToPlane1(QVector3D const * this_ptr, QVector3D const * plane1, QVector3D const * plane2, QVector3D const * plane3) {
  return this_ptr->distanceToPlane(*plane1, *plane2, *plane3);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector3D_distanceToLine(QVector3D const * this_ptr, QVector3D const * point, QVector3D const * direction) {
  return this_ptr->distanceToLine(*point, *direction);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector3D_toVector2D(QVector3D const * this_ptr) {
  return new QVector2D(this_ptr->toVector2D());
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector3D_toVector4D(QVector3D const * this_ptr) {
  return new QVector4D(this_ptr->toVector4D());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector3D_toPoint(QVector3D const * this_ptr) {
  return new QPoint(this_ptr->toPoint());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QVector3D_toPointF(QVector3D const * this_ptr) {
  return new QPointF(this_ptr->toPointF());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QVector3D_operator_QVariant(QVector3D const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__73(QVector3D const * v1, QVector3D const * v2) {
  return operator==(*v1, *v2);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_55(QVector3D const * v1, QVector3D const * v2) {
  return new QVector3D(operator+(*v1, *v2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_56(QVector3D const * v1, QVector3D const * v2) {
  return new QVector3D(operator-(*v1, *v2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_57(float factor, QVector3D const * vector) {
  return new QVector3D(operator*(factor, *vector));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_58(QVector3D const * vector, float factor) {
  return new QVector3D(operator*(*vector, factor));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_59(QVector3D const * v1, QVector3D const * v2) {
  return new QVector3D(operator*(*v1, *v2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_60(QVector3D const * vector) {
  return new QVector3D(operator-(*vector));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_61(QVector3D const * vector, float divisor) {
  return new QVector3D(operator/(*vector, divisor));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_62(QVector3D const * vector, QVector3D const * divisor) {
  return new QVector3D(operator/(*vector, *divisor));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare3(QVector3D const * v1, QVector3D const * v2) {
  return qFuzzyCompare(*v1, *v2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__75(QDebug const * dbg, QVector3D const * vector) {
  return new QDebug(operator<<(*dbg, *vector));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__76(QDataStream * arg1, QVector3D const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__77(QDataStream * arg1, QVector3D * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D() {
  return new QVector4D();
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D2(float xpos, float ypos, float zpos, float wpos) {
  return new QVector4D(xpos, ypos, zpos, wpos);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D3(QPoint const * point) {
  return new QVector4D(*point);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D4(QPointF const * point) {
  return new QVector4D(*point);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D5(QVector2D const * vector) {
  return new QVector4D(*vector);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D6(QVector2D const * vector, float zpos, float wpos) {
  return new QVector4D(*vector, zpos, wpos);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D7(QVector3D const * vector) {
  return new QVector4D(*vector);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D8(QVector3D const * vector, float wpos) {
  return new QVector4D(*vector, wpos);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector4D_isNull(QVector4D const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_x(QVector4D const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_y(QVector4D const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_z(QVector4D const * this_ptr) {
  return this_ptr->z();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_w(QVector4D const * this_ptr) {
  return this_ptr->w();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_setX(QVector4D * this_ptr, float x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_setY(QVector4D * this_ptr, float y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_setZ(QVector4D * this_ptr, float z) {
  this_ptr->setZ(z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_setW(QVector4D * this_ptr, float w) {
  this_ptr->setW(w);
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector4D_operator__(QVector4D * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_operator__1(QVector4D const * this_ptr, int i) {
  return this_ptr->operator[](i);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_length(QVector4D const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_lengthSquared(QVector4D const * this_ptr) {
  return this_ptr->lengthSquared();
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_normalized(QVector4D const * this_ptr) {
  return new QVector4D(this_ptr->normalized());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_normalize(QVector4D * this_ptr) {
  this_ptr->normalize();
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__2(QVector4D * this_ptr, QVector4D const * vector) {
  return &this_ptr->operator+=(*vector);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__3(QVector4D * this_ptr, QVector4D const * vector) {
  return &this_ptr->operator-=(*vector);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__4(QVector4D * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__5(QVector4D * this_ptr, QVector4D const * vector) {
  return &this_ptr->operator*=(*vector);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__6(QVector4D * this_ptr, float divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator__7(QVector4D * this_ptr, QVector4D const * vector) {
  return &this_ptr->operator/=(*vector);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector4D_dotProduct(QVector4D const * v1, QVector4D const * v2) {
  return QVector4D::dotProduct(*v1, *v2);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector4D_toVector2D(QVector4D const * this_ptr) {
  return new QVector2D(this_ptr->toVector2D());
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector4D_toVector2DAffine(QVector4D const * this_ptr) {
  return new QVector2D(this_ptr->toVector2DAffine());
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector4D_toVector3D(QVector4D const * this_ptr) {
  return new QVector3D(this_ptr->toVector3D());
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector4D_toVector3DAffine(QVector4D const * this_ptr) {
  return new QVector3D(this_ptr->toVector3DAffine());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector4D_toPoint(QVector4D const * this_ptr) {
  return new QPoint(this_ptr->toPoint());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QVector4D_toPointF(QVector4D const * this_ptr) {
  return new QPointF(this_ptr->toPointF());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QVector4D_operator_QVariant(QVector4D const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__78(QVector4D const * v1, QVector4D const * v2) {
  return operator==(*v1, *v2);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_63(QVector4D const * v1, QVector4D const * v2) {
  return new QVector4D(operator+(*v1, *v2));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_64(QVector4D const * v1, QVector4D const * v2) {
  return new QVector4D(operator-(*v1, *v2));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_65(float factor, QVector4D const * vector) {
  return new QVector4D(operator*(factor, *vector));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_66(QVector4D const * vector, float factor) {
  return new QVector4D(operator*(*vector, factor));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_67(QVector4D const * v1, QVector4D const * v2) {
  return new QVector4D(operator*(*v1, *v2));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_68(QVector4D const * vector) {
  return new QVector4D(operator-(*vector));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_69(QVector4D const * vector, float divisor) {
  return new QVector4D(operator/(*vector, divisor));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_70(QVector4D const * vector, QVector4D const * divisor) {
  return new QVector4D(operator/(*vector, *divisor));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare4(QVector4D const * v1, QVector4D const * v2) {
  return qFuzzyCompare(*v1, *v2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__80(QDebug const * dbg, QVector4D const * vector) {
  return new QDebug(operator<<(*dbg, *vector));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__81(QDataStream * arg1, QVector4D const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__82(QDataStream * arg1, QVector4D * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_QQuaternion() {
  return new QQuaternion();
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_QQuaternion2(float scalar, float xpos, float ypos, float zpos) {
  return new QQuaternion(scalar, xpos, ypos, zpos);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_QQuaternion3(float scalar, QVector3D const * vector) {
  return new QQuaternion(scalar, *vector);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_QQuaternion4(QVector4D const * vector) {
  return new QQuaternion(*vector);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QQuaternion_isNull(QQuaternion const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QQuaternion_isIdentity(QQuaternion const * this_ptr) {
  return this_ptr->isIdentity();
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QQuaternion_vector(QQuaternion const * this_ptr) {
  return new QVector3D(this_ptr->vector());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setVector(QQuaternion * this_ptr, QVector3D const * vector) {
  this_ptr->setVector(*vector);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setVector1(QQuaternion * this_ptr, float x, float y, float z) {
  this_ptr->setVector(x, y, z);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_x(QQuaternion const * this_ptr) {
  return this_ptr->x();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_y(QQuaternion const * this_ptr) {
  return this_ptr->y();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_z(QQuaternion const * this_ptr) {
  return this_ptr->z();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_scalar(QQuaternion const * this_ptr) {
  return this_ptr->scalar();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setX(QQuaternion * this_ptr, float x) {
  this_ptr->setX(x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setY(QQuaternion * this_ptr, float y) {
  this_ptr->setY(y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setZ(QQuaternion * this_ptr, float z) {
  this_ptr->setZ(z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_setScalar(QQuaternion * this_ptr, float scalar) {
  this_ptr->setScalar(scalar);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_dotProduct(QQuaternion const * q1, QQuaternion const * q2) {
  return QQuaternion::dotProduct(*q1, *q2);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_length(QQuaternion const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QQuaternion_lengthSquared(QQuaternion const * this_ptr) {
  return this_ptr->lengthSquared();
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_normalized(QQuaternion const * this_ptr) {
  return new QQuaternion(this_ptr->normalized());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_normalize(QQuaternion * this_ptr) {
  this_ptr->normalize();
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_inverted(QQuaternion const * this_ptr) {
  return new QQuaternion(this_ptr->inverted());
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_conjugated(QQuaternion const * this_ptr) {
  return new QQuaternion(this_ptr->conjugated());
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_conjugate(QQuaternion const * this_ptr) {
  return new QQuaternion(this_ptr->conjugate());
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QQuaternion_rotatedVector(QQuaternion const * this_ptr, QVector3D const * vector) {
  return new QVector3D(this_ptr->rotatedVector(*vector));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator__(QQuaternion * this_ptr, QQuaternion const * quaternion) {
  return &this_ptr->operator+=(*quaternion);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator__1(QQuaternion * this_ptr, QQuaternion const * quaternion) {
  return &this_ptr->operator-=(*quaternion);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator__2(QQuaternion * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator__3(QQuaternion * this_ptr, QQuaternion const * quaternion) {
  return &this_ptr->operator*=(*quaternion);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator__4(QQuaternion * this_ptr, float divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QQuaternion_toVector4D(QQuaternion const * this_ptr) {
  return new QVector4D(this_ptr->toVector4D());
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QQuaternion_operator_QVariant(QQuaternion const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_getAxisAndAngle(QQuaternion const * this_ptr, QVector3D * axis, float * angle) {
  this_ptr->getAxisAndAngle(axis, angle);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromAxisAndAngle(QVector3D const * axis, float angle) {
  return new QQuaternion(QQuaternion::fromAxisAndAngle(*axis, angle));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_getAxisAndAngle1(QQuaternion const * this_ptr, float * x, float * y, float * z, float * angle) {
  this_ptr->getAxisAndAngle(x, y, z, angle);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromAxisAndAngle1(float x, float y, float z, float angle) {
  return new QQuaternion(QQuaternion::fromAxisAndAngle(x, y, z, angle));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QQuaternion_toEulerAngles(QQuaternion const * this_ptr) {
  return new QVector3D(this_ptr->toEulerAngles());
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromEulerAngles(QVector3D const * eulerAngles) {
  return new QQuaternion(QQuaternion::fromEulerAngles(*eulerAngles));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_getEulerAngles(QQuaternion const * this_ptr, float * pitch, float * yaw, float * roll) {
  this_ptr->getEulerAngles(pitch, yaw, roll);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromEulerAngles1(float pitch, float yaw, float roll) {
  return new QQuaternion(QQuaternion::fromEulerAngles(pitch, yaw, roll));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_getAxes(QQuaternion const * this_ptr, QVector3D * xAxis, QVector3D * yAxis, QVector3D * zAxis) {
  this_ptr->getAxes(xAxis, yAxis, zAxis);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromAxes(QVector3D const * xAxis, QVector3D const * yAxis, QVector3D const * zAxis) {
  return new QQuaternion(QQuaternion::fromAxes(*xAxis, *yAxis, *zAxis));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_fromDirection(QVector3D const * direction, QVector3D const * up) {
  return new QQuaternion(QQuaternion::fromDirection(*direction, *up));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_rotationTo(QVector3D const * from, QVector3D const * to) {
  return new QQuaternion(QQuaternion::rotationTo(*from, *to));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_slerp(QQuaternion const * q1, QQuaternion const * q2, float t) {
  return new QQuaternion(QQuaternion::slerp(*q1, *q2, t));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_nlerp(QQuaternion const * q1, QQuaternion const * q2, float t) {
  return new QQuaternion(QQuaternion::nlerp(*q1, *q2, t));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__83(QQuaternion const * q1, QQuaternion const * q2) {
  return operator==(*q1, *q2);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_71(QQuaternion const * q1, QQuaternion const * q2) {
  return new QQuaternion(operator*(*q1, *q2));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_72(QQuaternion const * q1, QQuaternion const * q2) {
  return new QQuaternion(operator+(*q1, *q2));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_73(QQuaternion const * q1, QQuaternion const * q2) {
  return new QQuaternion(operator-(*q1, *q2));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_74(float factor, QQuaternion const * quaternion) {
  return new QQuaternion(operator*(factor, *quaternion));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_75(QQuaternion const * quaternion, float factor) {
  return new QQuaternion(operator*(*quaternion, factor));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_76(QQuaternion const * quaternion) {
  return new QQuaternion(operator-(*quaternion));
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_operator_77(QQuaternion const * quaternion, float divisor) {
  return new QQuaternion(operator/(*quaternion, divisor));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare5(QQuaternion const * q1, QQuaternion const * q2) {
  return qFuzzyCompare(*q1, *q2);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_78(QQuaternion const * quaternion, QVector3D const * vec) {
  return new QVector3D(operator*(*quaternion, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__85(QDebug const * dbg, QQuaternion const * q) {
  return new QDebug(operator<<(*dbg, *q));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__86(QDataStream * arg1, QQuaternion const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__87(QDataStream * arg1, QQuaternion * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x4() {
  return new QMatrix4x4();
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x42(float const * values) {
  return new QMatrix4x4(values);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x43(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) {
  return new QMatrix4x4(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x44(float const * values, int cols, int rows) {
  return new QMatrix4x4(values, cols, rows);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x45(QTransform const * transform) {
  return new QMatrix4x4(*transform);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x46(QMatrix const * matrix) {
  return new QMatrix4x4(*matrix);
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QMatrix4x4_operator__(QMatrix4x4 const * this_ptr, int row, int column) {
  return &this_ptr->operator()(row, column);
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QMatrix4x4_operator__1(QMatrix4x4 * this_ptr, int row, int column) {
  return &this_ptr->operator()(row, column);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QMatrix4x4_column(QMatrix4x4 const * this_ptr, int index) {
  return new QVector4D(this_ptr->column(index));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_setColumn(QMatrix4x4 * this_ptr, int index, QVector4D const * value) {
  this_ptr->setColumn(index, *value);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QMatrix4x4_row(QMatrix4x4 const * this_ptr, int index) {
  return new QVector4D(this_ptr->row(index));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_setRow(QMatrix4x4 * this_ptr, int index, QVector4D const * value) {
  this_ptr->setRow(index, *value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix4x4_isAffine(QMatrix4x4 const * this_ptr) {
  return this_ptr->isAffine();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix4x4_isIdentity(QMatrix4x4 const * this_ptr) {
  return this_ptr->isIdentity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_setToIdentity(QMatrix4x4 * this_ptr) {
  this_ptr->setToIdentity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_fill(QMatrix4x4 * this_ptr, float value) {
  this_ptr->fill(value);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QMatrix4x4_determinant(QMatrix4x4 const * this_ptr) {
  return this_ptr->determinant();
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_inverted(QMatrix4x4 const * this_ptr, bool * invertible) {
  return new QMatrix4x4(this_ptr->inverted(invertible));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_transposed(QMatrix4x4 const * this_ptr) {
  return new QMatrix4x4(this_ptr->transposed());
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator__2(QMatrix4x4 * this_ptr, QMatrix4x4 const * other) {
  return &this_ptr->operator+=(*other);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator__3(QMatrix4x4 * this_ptr, QMatrix4x4 const * other) {
  return &this_ptr->operator-=(*other);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator__4(QMatrix4x4 * this_ptr, QMatrix4x4 const * other) {
  return &this_ptr->operator*=(*other);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator__5(QMatrix4x4 * this_ptr, float factor) {
  return &this_ptr->operator*=(factor);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator__6(QMatrix4x4 * this_ptr, float divisor) {
  return &this_ptr->operator/=(divisor);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMatrix4x4_operator__7(QMatrix4x4 const * this_ptr, QMatrix4x4 const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_scale(QMatrix4x4 * this_ptr, QVector3D const * vector) {
  this_ptr->scale(*vector);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_translate(QMatrix4x4 * this_ptr, QVector3D const * vector) {
  this_ptr->translate(*vector);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_rotate(QMatrix4x4 * this_ptr, float angle, QVector3D const * vector) {
  this_ptr->rotate(angle, *vector);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_scale1(QMatrix4x4 * this_ptr, float x, float y) {
  this_ptr->scale(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_scale2(QMatrix4x4 * this_ptr, float x, float y, float z) {
  this_ptr->scale(x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_scale3(QMatrix4x4 * this_ptr, float factor) {
  this_ptr->scale(factor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_translate1(QMatrix4x4 * this_ptr, float x, float y) {
  this_ptr->translate(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_translate2(QMatrix4x4 * this_ptr, float x, float y, float z) {
  this_ptr->translate(x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_rotate1(QMatrix4x4 * this_ptr, float angle, float x, float y, float z) {
  this_ptr->rotate(angle, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_rotate2(QMatrix4x4 * this_ptr, QQuaternion const * quaternion) {
  this_ptr->rotate(*quaternion);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_ortho(QMatrix4x4 * this_ptr, QRect const * rect) {
  this_ptr->ortho(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_ortho1(QMatrix4x4 * this_ptr, QRectF const * rect) {
  this_ptr->ortho(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_ortho2(QMatrix4x4 * this_ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane) {
  this_ptr->ortho(left, right, bottom, top, nearPlane, farPlane);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_frustum(QMatrix4x4 * this_ptr, float left, float right, float bottom, float top, float nearPlane, float farPlane) {
  this_ptr->frustum(left, right, bottom, top, nearPlane, farPlane);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_perspective(QMatrix4x4 * this_ptr, float verticalAngle, float aspectRatio, float nearPlane, float farPlane) {
  this_ptr->perspective(verticalAngle, aspectRatio, nearPlane, farPlane);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_lookAt(QMatrix4x4 * this_ptr, QVector3D const * eye, QVector3D const * center, QVector3D const * up) {
  this_ptr->lookAt(*eye, *center, *up);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_viewport(QMatrix4x4 * this_ptr, QRectF const * rect) {
  this_ptr->viewport(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_viewport1(QMatrix4x4 * this_ptr, float left, float bottom, float width, float height, float nearPlane, float farPlane) {
  this_ptr->viewport(left, bottom, width, height, nearPlane, farPlane);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_flipCoordinates(QMatrix4x4 * this_ptr) {
  this_ptr->flipCoordinates();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_copyDataTo(QMatrix4x4 const * this_ptr, float * values) {
  this_ptr->copyDataTo(values);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix4x4_toAffine(QMatrix4x4 const * this_ptr) {
  return new QMatrix(this_ptr->toAffine());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QMatrix4x4_toTransform(QMatrix4x4 const * this_ptr) {
  return new QTransform(this_ptr->toTransform());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QMatrix4x4_toTransform1(QMatrix4x4 const * this_ptr, float distanceToPlane) {
  return new QTransform(this_ptr->toTransform(distanceToPlane));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QMatrix4x4_map(QMatrix4x4 const * this_ptr, QPoint const * point) {
  return new QPoint(this_ptr->map(*point));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QMatrix4x4_map1(QMatrix4x4 const * this_ptr, QPointF const * point) {
  return new QPointF(this_ptr->map(*point));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QMatrix4x4_map2(QMatrix4x4 const * this_ptr, QVector3D const * point) {
  return new QVector3D(this_ptr->map(*point));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QMatrix4x4_mapVector(QMatrix4x4 const * this_ptr, QVector3D const * vector) {
  return new QVector3D(this_ptr->mapVector(*vector));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QMatrix4x4_map3(QMatrix4x4 const * this_ptr, QVector4D const * point) {
  return new QVector4D(this_ptr->map(*point));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QMatrix4x4_mapRect(QMatrix4x4 const * this_ptr, QRect const * rect) {
  return new QRect(this_ptr->mapRect(*rect));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QMatrix4x4_mapRect1(QMatrix4x4 const * this_ptr, QRectF const * rect) {
  return new QRectF(this_ptr->mapRect(*rect));
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QMatrix4x4_data(QMatrix4x4 * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QMatrix4x4_data1(QMatrix4x4 const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QMatrix4x4_constData(QMatrix4x4 const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_optimize(QMatrix4x4 * this_ptr) {
  this_ptr->optimize();
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QMatrix4x4_operator_QVariant(QMatrix4x4 const * this_ptr) {
  return new QVariant(this_ptr->operator QVariant());
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_79(QMatrix4x4 const * matrix, float divisor) {
  return new QMatrix4x4(operator/(*matrix, divisor));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_80(QMatrix4x4 const * m1, QMatrix4x4 const * m2) {
  return new QMatrix4x4(operator+(*m1, *m2));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_81(QMatrix4x4 const * m1, QMatrix4x4 const * m2) {
  return new QMatrix4x4(operator-(*m1, *m2));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_82(QMatrix4x4 const * m1, QMatrix4x4 const * m2) {
  return new QMatrix4x4(operator*(*m1, *m2));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_83(QVector3D const * vector, QMatrix4x4 const * matrix) {
  return new QVector3D(operator*(*vector, *matrix));
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_operator_84(QMatrix4x4 const * matrix, QVector3D const * vector) {
  return new QVector3D(operator*(*matrix, *vector));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_85(QVector4D const * vector, QMatrix4x4 const * matrix) {
  return new QVector4D(operator*(*vector, *matrix));
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_operator_86(QMatrix4x4 const * matrix, QVector4D const * vector) {
  return new QVector4D(operator*(*matrix, *vector));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_operator_87(QPoint const * point, QMatrix4x4 const * matrix) {
  return new QPoint(operator*(*point, *matrix));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_operator_88(QPointF const * point, QMatrix4x4 const * matrix) {
  return new QPointF(operator*(*point, *matrix));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_operator_89(QMatrix4x4 const * matrix, QPoint const * point) {
  return new QPoint(operator*(*matrix, *point));
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_operator_90(QMatrix4x4 const * matrix, QPointF const * point) {
  return new QPointF(operator*(*matrix, *point));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_91(QMatrix4x4 const * matrix) {
  return new QMatrix4x4(operator-(*matrix));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_92(float factor, QMatrix4x4 const * matrix) {
  return new QMatrix4x4(operator*(factor, *matrix));
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_operator_93(QMatrix4x4 const * matrix, float factor) {
  return new QMatrix4x4(operator*(*matrix, factor));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_qFuzzyCompare6(QMatrix4x4 const * m1, QMatrix4x4 const * m2) {
  return qFuzzyCompare(*m1, *m2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__88(QDebug const * dbg, QMatrix4x4 const * m) {
  return new QDebug(operator<<(*dbg, *m));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__89(QDataStream * arg1, QMatrix4x4 const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__90(QDataStream * arg1, QMatrix4x4 * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QMovie_metaObject(QMovie const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QMovie_qt_metacast(QMovie * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_qt_metacall(QMovie * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QMovie_tr(char const * s, char const * c, int n) {
  return new QString(QMovie::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QMovie_trUtf8(char const * s, char const * c, int n) {
  return new QString(QMovie::trUtf8(s, c, n));
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie(QObject * parent) {
  return new QMovie(parent);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie1(QIODevice * device, QByteArray const * format, QObject * parent) {
  return new QMovie(device, *format, parent);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie2(QString const * fileName, QByteArray const * format, QObject * parent) {
  return new QMovie(*fileName, *format, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_dQMovie(QMovie * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QMovie_supportedFormats() {
  return new QList< QByteArray >(QMovie::supportedFormats());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setDevice(QMovie * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QMovie_device(QMovie const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setFileName(QMovie * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QMovie_fileName(QMovie const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setFormat(QMovie * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QMovie_format(QMovie const * this_ptr) {
  return new QByteArray(this_ptr->format());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setBackgroundColor(QMovie * this_ptr, QColor const * color) {
  this_ptr->setBackgroundColor(*color);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QMovie_backgroundColor(QMovie const * this_ptr) {
  return new QColor(this_ptr->backgroundColor());
}


RITUAL_EXPORT QMovie::MovieState ctr_qt_gui_ffi_QMovie_state(QMovie const * this_ptr) {
  return this_ptr->state();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QMovie_frameRect(QMovie const * this_ptr) {
  return new QRect(this_ptr->frameRect());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QMovie_currentImage(QMovie const * this_ptr) {
  return new QImage(this_ptr->currentImage());
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QMovie_currentPixmap(QMovie const * this_ptr) {
  return new QPixmap(this_ptr->currentPixmap());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMovie_isValid(QMovie const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMovie_jumpToFrame(QMovie * this_ptr, int frameNumber) {
  return this_ptr->jumpToFrame(frameNumber);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_loopCount(QMovie const * this_ptr) {
  return this_ptr->loopCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_frameCount(QMovie const * this_ptr) {
  return this_ptr->frameCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_nextFrameDelay(QMovie const * this_ptr) {
  return this_ptr->nextFrameDelay();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_currentFrameNumber(QMovie const * this_ptr) {
  return this_ptr->currentFrameNumber();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QMovie_speed(QMovie const * this_ptr) {
  return this_ptr->speed();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QMovie_scaledSize(QMovie * this_ptr) {
  return new QSize(this_ptr->scaledSize());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setScaledSize(QMovie * this_ptr, QSize const * size) {
  this_ptr->setScaledSize(*size);
}


RITUAL_EXPORT QMovie::CacheMode ctr_qt_gui_ffi_QMovie_cacheMode(QMovie const * this_ptr) {
  return this_ptr->cacheMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setCacheMode(QMovie * this_ptr, QMovie::CacheMode mode) {
  this_ptr->setCacheMode(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_start(QMovie * this_ptr) {
  this_ptr->start();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QMovie_jumpToNextFrame(QMovie * this_ptr) {
  return this_ptr->jumpToNextFrame();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setPaused(QMovie * this_ptr, bool paused) {
  this_ptr->setPaused(paused);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_stop(QMovie * this_ptr) {
  this_ptr->stop();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMovie_setSpeed(QMovie * this_ptr, int percentSpeed) {
  this_ptr->setSpeed(percentSpeed);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOffscreenSurface_metaObject(QOffscreenSurface const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOffscreenSurface_qt_metacast(QOffscreenSurface * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOffscreenSurface_qt_metacall(QOffscreenSurface * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOffscreenSurface_tr(char const * s, char const * c, int n) {
  return new QString(QOffscreenSurface::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOffscreenSurface_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOffscreenSurface::trUtf8(s, c, n));
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_QOffscreenSurface_QOffscreenSurface(QScreen * screen) {
  return new QOffscreenSurface(screen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_dQOffscreenSurface(QOffscreenSurface * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSurface::SurfaceType ctr_qt_gui_ffi_QOffscreenSurface_surfaceType(QOffscreenSurface const * this_ptr) {
  return this_ptr->surfaceType();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_create(QOffscreenSurface * this_ptr) {
  this_ptr->create();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_destroy(QOffscreenSurface * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOffscreenSurface_isValid(QOffscreenSurface const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_setFormat(QOffscreenSurface * this_ptr, QSurfaceFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QOffscreenSurface_format(QOffscreenSurface const * this_ptr) {
  return new QSurfaceFormat(this_ptr->format());
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QOffscreenSurface_requestedFormat(QOffscreenSurface const * this_ptr) {
  return new QSurfaceFormat(this_ptr->requestedFormat());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QOffscreenSurface_size(QOffscreenSurface const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QOffscreenSurface_screen(QOffscreenSurface const * this_ptr) {
  return this_ptr->screen();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_setScreen(QOffscreenSurface * this_ptr, QScreen * screen) {
  this_ptr->setScreen(screen);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOffscreenSurface_nativeHandle(QOffscreenSurface const * this_ptr) {
  return this_ptr->nativeHandle();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOffscreenSurface_setNativeHandle(QOffscreenSurface * this_ptr, void * handle) {
  this_ptr->setNativeHandle(handle);
}


RITUAL_EXPORT QOpenGLBuffer * ctr_qt_gui_ffi_QOpenGLBuffer_QOpenGLBuffer() {
  return new QOpenGLBuffer();
}


RITUAL_EXPORT QOpenGLBuffer * ctr_qt_gui_ffi_QOpenGLBuffer_QOpenGLBuffer1(QOpenGLBuffer::Type type) {
  return new QOpenGLBuffer(type);
}


RITUAL_EXPORT QOpenGLBuffer * ctr_qt_gui_ffi_QOpenGLBuffer_QOpenGLBuffer2(QOpenGLBuffer const * other) {
  return new QOpenGLBuffer(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_dQOpenGLBuffer(QOpenGLBuffer * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOpenGLBuffer * ctr_qt_gui_ffi_QOpenGLBuffer_operator_(QOpenGLBuffer * this_ptr, QOpenGLBuffer const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QOpenGLBuffer::Type ctr_qt_gui_ffi_QOpenGLBuffer_type(QOpenGLBuffer const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QOpenGLBuffer::UsagePattern ctr_qt_gui_ffi_QOpenGLBuffer_usagePattern(QOpenGLBuffer const * this_ptr) {
  return this_ptr->usagePattern();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_setUsagePattern(QOpenGLBuffer * this_ptr, QOpenGLBuffer::UsagePattern value) {
  this_ptr->setUsagePattern(value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLBuffer_create(QOpenGLBuffer * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLBuffer_isCreated(QOpenGLBuffer const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_destroy(QOpenGLBuffer * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLBuffer_bind(QOpenGLBuffer * this_ptr) {
  return this_ptr->bind();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_release(QOpenGLBuffer * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_release1(QOpenGLBuffer::Type type) {
  QOpenGLBuffer::release(type);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLBuffer_bufferId(QOpenGLBuffer const * this_ptr) {
  return this_ptr->bufferId();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLBuffer_size(QOpenGLBuffer const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLBuffer_read(QOpenGLBuffer * this_ptr, int offset, void * data, int count) {
  return this_ptr->read(offset, data, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_write(QOpenGLBuffer * this_ptr, int offset, void const * data, int count) {
  this_ptr->write(offset, data, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_allocate(QOpenGLBuffer * this_ptr, void const * data, int count) {
  this_ptr->allocate(data, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLBuffer_allocate1(QOpenGLBuffer * this_ptr, int count) {
  this_ptr->allocate(count);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLBuffer_map(QOpenGLBuffer * this_ptr, QOpenGLBuffer::Access access) {
  return this_ptr->map(access);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLBuffer_mapRange(QOpenGLBuffer * this_ptr, int offset, int count, int access) {
  return this_ptr->mapRange(offset, count, QFlags< QOpenGLBuffer::RangeAccessFlag >(access));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLBuffer_unmap(QOpenGLBuffer * this_ptr) {
  return this_ptr->unmap();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractOpenGLFunctions_dQAbstractOpenGLFunctions(QAbstractOpenGLFunctions * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QAbstractOpenGLFunctions_initializeOpenGLFunctions(QAbstractOpenGLFunctions * this_ptr) {
  return this_ptr->initializeOpenGLFunctions();
}


RITUAL_EXPORT QOpenGLVersionProfile * ctr_qt_gui_ffi_QOpenGLVersionProfile_QOpenGLVersionProfile() {
  return new QOpenGLVersionProfile();
}


RITUAL_EXPORT QOpenGLVersionProfile * ctr_qt_gui_ffi_QOpenGLVersionProfile_QOpenGLVersionProfile1(QSurfaceFormat const * format) {
  return new QOpenGLVersionProfile(*format);
}


RITUAL_EXPORT QOpenGLVersionProfile * ctr_qt_gui_ffi_QOpenGLVersionProfile_QOpenGLVersionProfile2(QOpenGLVersionProfile const * other) {
  return new QOpenGLVersionProfile(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVersionProfile_dQOpenGLVersionProfile(QOpenGLVersionProfile * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOpenGLVersionProfile * ctr_qt_gui_ffi_QOpenGLVersionProfile_operator_(QOpenGLVersionProfile * this_ptr, QOpenGLVersionProfile const * rhs) {
  return &this_ptr->operator=(*rhs);
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QOpenGLVersionProfile_version(QOpenGLVersionProfile const * this_ptr) {
  return new QPair< int, int >(this_ptr->version());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVersionProfile_setVersion(QOpenGLVersionProfile * this_ptr, int majorVersion, int minorVersion) {
  this_ptr->setVersion(majorVersion, minorVersion);
}


RITUAL_EXPORT QSurfaceFormat::OpenGLContextProfile ctr_qt_gui_ffi_QOpenGLVersionProfile_profile(QOpenGLVersionProfile const * this_ptr) {
  return this_ptr->profile();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVersionProfile_setProfile(QOpenGLVersionProfile * this_ptr, QSurfaceFormat::OpenGLContextProfile profile) {
  this_ptr->setProfile(profile);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLVersionProfile_hasProfiles(QOpenGLVersionProfile const * this_ptr) {
  return this_ptr->hasProfiles();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLVersionProfile_isLegacyVersion(QOpenGLVersionProfile const * this_ptr) {
  return this_ptr->isLegacyVersion();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLVersionProfile_isValid(QOpenGLVersionProfile const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash6(QOpenGLVersionProfile const * v, unsigned int seed) {
  return qHash(*v, seed);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__91(QOpenGLVersionProfile const * lhs, QOpenGLVersionProfile const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLContextGroup_metaObject(QOpenGLContextGroup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLContextGroup_qt_metacast(QOpenGLContextGroup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLContextGroup_qt_metacall(QOpenGLContextGroup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLContextGroup_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLContextGroup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLContextGroup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLContextGroup::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContextGroup_dQOpenGLContextGroup(QOpenGLContextGroup * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QOpenGLContextGroup_shares(QOpenGLContextGroup const * this_ptr) {
  return new QList< QOpenGLContext * >(this_ptr->shares());
}


RITUAL_EXPORT QOpenGLContextGroup * ctr_qt_gui_ffi_QOpenGLContextGroup_currentContextGroup() {
  return QOpenGLContextGroup::currentContextGroup();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLContext_metaObject(QOpenGLContext const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLContext_qt_metacast(QOpenGLContext * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLContext_qt_metacall(QOpenGLContext * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLContext_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLContext::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLContext_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLContext::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLContext_QOpenGLContext(QObject * parent) {
  return new QOpenGLContext(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_dQOpenGLContext(QOpenGLContext * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_setFormat(QOpenGLContext * this_ptr, QSurfaceFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_setShareContext(QOpenGLContext * this_ptr, QOpenGLContext * shareContext) {
  this_ptr->setShareContext(shareContext);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_setScreen(QOpenGLContext * this_ptr, QScreen * screen) {
  this_ptr->setScreen(screen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_setNativeHandle(QOpenGLContext * this_ptr, QVariant const * handle) {
  this_ptr->setNativeHandle(*handle);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_create(QOpenGLContext * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_isValid(QOpenGLContext const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QSurfaceFormat * ctr_qt_gui_ffi_QOpenGLContext_format(QOpenGLContext const * this_ptr) {
  return new QSurfaceFormat(this_ptr->format());
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLContext_shareContext(QOpenGLContext const * this_ptr) {
  return this_ptr->shareContext();
}


RITUAL_EXPORT QOpenGLContextGroup * ctr_qt_gui_ffi_QOpenGLContext_shareGroup(QOpenGLContext const * this_ptr) {
  return this_ptr->shareGroup();
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QOpenGLContext_screen(QOpenGLContext const * this_ptr) {
  return this_ptr->screen();
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QOpenGLContext_nativeHandle(QOpenGLContext const * this_ptr) {
  return new QVariant(this_ptr->nativeHandle());
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLContext_defaultFramebufferObject(QOpenGLContext const * this_ptr) {
  return this_ptr->defaultFramebufferObject();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_makeCurrent(QOpenGLContext * this_ptr, QSurface * surface) {
  return this_ptr->makeCurrent(surface);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_doneCurrent(QOpenGLContext * this_ptr) {
  this_ptr->doneCurrent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLContext_swapBuffers(QOpenGLContext * this_ptr, QSurface * surface) {
  this_ptr->swapBuffers(surface);
}


RITUAL_EXPORT void (*ctr_qt_gui_ffi_QOpenGLContext_getProcAddress(QOpenGLContext const * this_ptr, QByteArray const * procName))() {
  return this_ptr->getProcAddress(*procName);
}


RITUAL_EXPORT void (*ctr_qt_gui_ffi_QOpenGLContext_getProcAddress1(QOpenGLContext const * this_ptr, char const * procName))() {
  return this_ptr->getProcAddress(procName);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_QOpenGLContext_surface(QOpenGLContext const * this_ptr) {
  return this_ptr->surface();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLContext_currentContext() {
  return QOpenGLContext::currentContext();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_areSharing(QOpenGLContext * first, QOpenGLContext * second) {
  return QOpenGLContext::areSharing(first, second);
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLContext_functions(QOpenGLContext const * this_ptr) {
  return this_ptr->functions();
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_QOpenGLContext_extraFunctions(QOpenGLContext const * this_ptr) {
  return this_ptr->extraFunctions();
}


RITUAL_EXPORT QAbstractOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLContext_versionFunctions(QOpenGLContext const * this_ptr, QOpenGLVersionProfile const * versionProfile) {
  return this_ptr->versionFunctions(*versionProfile);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QOpenGLContext_extensions(QOpenGLContext const * this_ptr) {
  return new QSet< QByteArray >(this_ptr->extensions());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_hasExtension(QOpenGLContext const * this_ptr, QByteArray const * extension) {
  return this_ptr->hasExtension(*extension);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLContext_openGLModuleHandle() {
  return QOpenGLContext::openGLModuleHandle();
}


RITUAL_EXPORT QOpenGLContext::OpenGLModuleType ctr_qt_gui_ffi_QOpenGLContext_openGLModuleType() {
  return QOpenGLContext::openGLModuleType();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_isOpenGLES(QOpenGLContext const * this_ptr) {
  return this_ptr->isOpenGLES();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLContext_supportsThreadedOpenGL() {
  return QOpenGLContext::supportsThreadedOpenGL();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLContext_globalShareContext() {
  return QOpenGLContext::globalShareContext();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_QOpenGLDebugMessage() {
  return new QOpenGLDebugMessage();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_QOpenGLDebugMessage1(QOpenGLDebugMessage const * debugMessage) {
  return new QOpenGLDebugMessage(*debugMessage);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_operator_(QOpenGLDebugMessage * this_ptr, QOpenGLDebugMessage const * debugMessage) {
  return &this_ptr->operator=(*debugMessage);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugMessage_dQOpenGLDebugMessage(QOpenGLDebugMessage * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugMessage_swap(QOpenGLDebugMessage * this_ptr, QOpenGLDebugMessage * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT QOpenGLDebugMessage::Source ctr_qt_gui_ffi_QOpenGLDebugMessage_source(QOpenGLDebugMessage const * this_ptr) {
  return this_ptr->source();
}


RITUAL_EXPORT QOpenGLDebugMessage::Type ctr_qt_gui_ffi_QOpenGLDebugMessage_type(QOpenGLDebugMessage const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT QOpenGLDebugMessage::Severity ctr_qt_gui_ffi_QOpenGLDebugMessage_severity(QOpenGLDebugMessage const * this_ptr) {
  return this_ptr->severity();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLDebugMessage_id(QOpenGLDebugMessage const * this_ptr) {
  return this_ptr->id();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLDebugMessage_message(QOpenGLDebugMessage const * this_ptr) {
  return new QString(this_ptr->message());
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createApplicationMessage(QString const * text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createApplicationMessage(*text, id, severity, type));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createThirdPartyMessage(QString const * text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createThirdPartyMessage(*text, id, severity, type));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLDebugMessage_operator__(QOpenGLDebugMessage const * this_ptr, QOpenGLDebugMessage const * debugMessage) {
  return this_ptr->operator==(*debugMessage);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap28(QOpenGLDebugMessage * value1, QOpenGLDebugMessage * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__93(QDebug const * debug, QOpenGLDebugMessage const * message) {
  return new QDebug(operator<<(*debug, *message));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__94(QDebug const * debug, QOpenGLDebugMessage::Source source) {
  return new QDebug(operator<<(*debug, source));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__95(QDebug const * debug, QOpenGLDebugMessage::Type type) {
  return new QDebug(operator<<(*debug, type));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__96(QDebug const * debug, QOpenGLDebugMessage::Severity severity) {
  return new QDebug(operator<<(*debug, severity));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLDebugLogger_metaObject(QOpenGLDebugLogger const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLDebugLogger_qt_metacast(QOpenGLDebugLogger * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLDebugLogger_qt_metacall(QOpenGLDebugLogger * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLDebugLogger_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLDebugLogger::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLDebugLogger_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLDebugLogger::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLDebugLogger * ctr_qt_gui_ffi_QOpenGLDebugLogger_QOpenGLDebugLogger(QObject * parent) {
  return new QOpenGLDebugLogger(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_dQOpenGLDebugLogger(QOpenGLDebugLogger * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLDebugLogger_initialize(QOpenGLDebugLogger * this_ptr) {
  return this_ptr->initialize();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLDebugLogger_isLogging(QOpenGLDebugLogger const * this_ptr) {
  return this_ptr->isLogging();
}


RITUAL_EXPORT QOpenGLDebugLogger::LoggingMode ctr_qt_gui_ffi_QOpenGLDebugLogger_loggingMode(QOpenGLDebugLogger const * this_ptr) {
  return this_ptr->loggingMode();
}


RITUAL_EXPORT qint64 ctr_qt_gui_ffi_QOpenGLDebugLogger_maximumMessageLength(QOpenGLDebugLogger const * this_ptr) {
  return this_ptr->maximumMessageLength();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_pushGroup(QOpenGLDebugLogger * this_ptr, QString const * name, GLuint id, QOpenGLDebugMessage::Source source) {
  this_ptr->pushGroup(*name, id, source);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_popGroup(QOpenGLDebugLogger * this_ptr) {
  this_ptr->popGroup();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages(QOpenGLDebugLogger * this_ptr, int sources, int types, int severities) {
  this_ptr->enableMessages(QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types), QFlags< QOpenGLDebugMessage::Severity >(severities));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages1(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids, int sources, int types) {
  this_ptr->enableMessages(*ids, QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages(QOpenGLDebugLogger * this_ptr, int sources, int types, int severities) {
  this_ptr->disableMessages(QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types), QFlags< QOpenGLDebugMessage::Severity >(severities));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages1(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids, int sources, int types) {
  this_ptr->disableMessages(*ids, QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QOpenGLDebugLogger_loggedMessages(QOpenGLDebugLogger const * this_ptr) {
  return new QList< QOpenGLDebugMessage >(this_ptr->loggedMessages());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_logMessage(QOpenGLDebugLogger * this_ptr, QOpenGLDebugMessage const * debugMessage) {
  this_ptr->logMessage(*debugMessage);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_startLogging(QOpenGLDebugLogger * this_ptr, QOpenGLDebugLogger::LoggingMode loggingMode) {
  this_ptr->startLogging(loggingMode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_stopLogging(QOpenGLDebugLogger * this_ptr) {
  this_ptr->stopLogging();
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLFunctions_QOpenGLFunctions() {
  return new QOpenGLFunctions();
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLFunctions_QOpenGLFunctions1(QOpenGLContext * context) {
  return new QOpenGLFunctions(context);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_dQOpenGLFunctions(QOpenGLFunctions * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLFunctions_openGLFeatures(QOpenGLFunctions const * this_ptr) {
  return int(this_ptr->openGLFeatures());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFunctions_hasOpenGLFeature(QOpenGLFunctions const * this_ptr, QOpenGLFunctions::OpenGLFeature feature) {
  return this_ptr->hasOpenGLFeature(feature);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_initializeOpenGLFunctions(QOpenGLFunctions * this_ptr) {
  this_ptr->initializeOpenGLFunctions();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBindTexture(QOpenGLFunctions * this_ptr, unsigned int target, GLuint texture) {
  this_ptr->glBindTexture(target, texture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBlendFunc(QOpenGLFunctions * this_ptr, unsigned int sfactor, unsigned int dfactor) {
  this_ptr->glBlendFunc(sfactor, dfactor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glClear(QOpenGLFunctions * this_ptr, unsigned int mask) {
  this_ptr->glClear(mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glClearColor(QOpenGLFunctions * this_ptr, float red, float green, float blue, float alpha) {
  this_ptr->glClearColor(red, green, blue, alpha);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glClearStencil(QOpenGLFunctions * this_ptr, GLint s) {
  this_ptr->glClearStencil(s);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glColorMask(QOpenGLFunctions * this_ptr, unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha) {
  this_ptr->glColorMask(red, green, blue, alpha);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCopyTexImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, unsigned int internalformat, GLint x, GLint y, int width, int height, GLint border) {
  this_ptr->glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCopyTexSubImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, int width, int height) {
  this_ptr->glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCullFace(QOpenGLFunctions * this_ptr, unsigned int mode) {
  this_ptr->glCullFace(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteTextures(QOpenGLFunctions * this_ptr, int n, GLuint const * textures) {
  this_ptr->glDeleteTextures(n, textures);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDepthFunc(QOpenGLFunctions * this_ptr, unsigned int func) {
  this_ptr->glDepthFunc(func);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDepthMask(QOpenGLFunctions * this_ptr, unsigned char flag) {
  this_ptr->glDepthMask(flag);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDisable(QOpenGLFunctions * this_ptr, unsigned int cap) {
  this_ptr->glDisable(cap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDrawArrays(QOpenGLFunctions * this_ptr, unsigned int mode, GLint first, int count) {
  this_ptr->glDrawArrays(mode, first, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDrawElements(QOpenGLFunctions * this_ptr, unsigned int mode, int count, unsigned int type, void const * indices) {
  this_ptr->glDrawElements(mode, count, type, indices);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glEnable(QOpenGLFunctions * this_ptr, unsigned int cap) {
  this_ptr->glEnable(cap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glFinish(QOpenGLFunctions * this_ptr) {
  this_ptr->glFinish();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glFlush(QOpenGLFunctions * this_ptr) {
  this_ptr->glFlush();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glFrontFace(QOpenGLFunctions * this_ptr, unsigned int mode) {
  this_ptr->glFrontFace(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGenTextures(QOpenGLFunctions * this_ptr, int n, GLuint * textures) {
  this_ptr->glGenTextures(n, textures);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetBooleanv(QOpenGLFunctions * this_ptr, unsigned int pname, unsigned char * params) {
  this_ptr->glGetBooleanv(pname, params);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QOpenGLFunctions_glGetError(QOpenGLFunctions * this_ptr) {
  return this_ptr->glGetError();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetFloatv(QOpenGLFunctions * this_ptr, unsigned int pname, float * params) {
  this_ptr->glGetFloatv(pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetIntegerv(QOpenGLFunctions * this_ptr, unsigned int pname, GLint * params) {
  this_ptr->glGetIntegerv(pname, params);
}


RITUAL_EXPORT GLubyte const * ctr_qt_gui_ffi_QOpenGLFunctions_glGetString(QOpenGLFunctions * this_ptr, unsigned int name) {
  return this_ptr->glGetString(name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetTexParameterfv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, float * params) {
  this_ptr->glGetTexParameterfv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetTexParameteriv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetTexParameteriv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glHint(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int mode) {
  this_ptr->glHint(target, mode);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsEnabled(QOpenGLFunctions * this_ptr, unsigned int cap) {
  return this_ptr->glIsEnabled(cap);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsTexture(QOpenGLFunctions * this_ptr, GLuint texture) {
  return this_ptr->glIsTexture(texture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glLineWidth(QOpenGLFunctions * this_ptr, float width) {
  this_ptr->glLineWidth(width);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glPixelStorei(QOpenGLFunctions * this_ptr, unsigned int pname, GLint param) {
  this_ptr->glPixelStorei(pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glPolygonOffset(QOpenGLFunctions * this_ptr, float factor, float units) {
  this_ptr->glPolygonOffset(factor, units);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glReadPixels(QOpenGLFunctions * this_ptr, GLint x, GLint y, int width, int height, unsigned int format, unsigned int type, void * pixels) {
  this_ptr->glReadPixels(x, y, width, height, format, type, pixels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glScissor(QOpenGLFunctions * this_ptr, GLint x, GLint y, int width, int height) {
  this_ptr->glScissor(x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilFunc(QOpenGLFunctions * this_ptr, unsigned int func, GLint ref, GLuint mask) {
  this_ptr->glStencilFunc(func, ref, mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilMask(QOpenGLFunctions * this_ptr, GLuint mask) {
  this_ptr->glStencilMask(mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilOp(QOpenGLFunctions * this_ptr, unsigned int fail, unsigned int zfail, unsigned int zpass) {
  this_ptr->glStencilOp(fail, zfail, zpass);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, GLint internalformat, int width, int height, GLint border, unsigned int format, unsigned int type, void const * pixels) {
  this_ptr->glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexParameterf(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, float param) {
  this_ptr->glTexParameterf(target, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexParameterfv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, float const * params) {
  this_ptr->glTexParameterfv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexParameteri(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, GLint param) {
  this_ptr->glTexParameteri(target, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexParameteriv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, GLint const * params) {
  this_ptr->glTexParameteriv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glTexSubImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, int width, int height, unsigned int format, unsigned int type, void const * pixels) {
  this_ptr->glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glViewport(QOpenGLFunctions * this_ptr, GLint x, GLint y, int width, int height) {
  this_ptr->glViewport(x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glActiveTexture(QOpenGLFunctions * this_ptr, unsigned int texture) {
  this_ptr->glActiveTexture(texture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glAttachShader(QOpenGLFunctions * this_ptr, GLuint program, GLuint shader) {
  this_ptr->glAttachShader(program, shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBindAttribLocation(QOpenGLFunctions * this_ptr, GLuint program, GLuint index, char const * name) {
  this_ptr->glBindAttribLocation(program, index, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBindBuffer(QOpenGLFunctions * this_ptr, unsigned int target, GLuint buffer) {
  this_ptr->glBindBuffer(target, buffer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBindFramebuffer(QOpenGLFunctions * this_ptr, unsigned int target, GLuint framebuffer) {
  this_ptr->glBindFramebuffer(target, framebuffer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBindRenderbuffer(QOpenGLFunctions * this_ptr, unsigned int target, GLuint renderbuffer) {
  this_ptr->glBindRenderbuffer(target, renderbuffer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBlendColor(QOpenGLFunctions * this_ptr, float red, float green, float blue, float alpha) {
  this_ptr->glBlendColor(red, green, blue, alpha);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBlendEquation(QOpenGLFunctions * this_ptr, unsigned int mode) {
  this_ptr->glBlendEquation(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBlendEquationSeparate(QOpenGLFunctions * this_ptr, unsigned int modeRGB, unsigned int modeAlpha) {
  this_ptr->glBlendEquationSeparate(modeRGB, modeAlpha);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBlendFuncSeparate(QOpenGLFunctions * this_ptr, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha) {
  this_ptr->glBlendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBufferData(QOpenGLFunctions * this_ptr, unsigned int target, long size, void const * data, unsigned int usage) {
  this_ptr->glBufferData(target, size, data, usage);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glBufferSubData(QOpenGLFunctions * this_ptr, unsigned int target, long offset, long size, void const * data) {
  this_ptr->glBufferSubData(target, offset, size, data);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QOpenGLFunctions_glCheckFramebufferStatus(QOpenGLFunctions * this_ptr, unsigned int target) {
  return this_ptr->glCheckFramebufferStatus(target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glClearDepthf(QOpenGLFunctions * this_ptr, float depth) {
  this_ptr->glClearDepthf(depth);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCompileShader(QOpenGLFunctions * this_ptr, GLuint shader) {
  this_ptr->glCompileShader(shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCompressedTexImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, unsigned int internalformat, int width, int height, GLint border, int imageSize, void const * data) {
  this_ptr->glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glCompressedTexSubImage2D(QOpenGLFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, int width, int height, unsigned int format, int imageSize, void const * data) {
  this_ptr->glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFunctions_glCreateProgram(QOpenGLFunctions * this_ptr) {
  return this_ptr->glCreateProgram();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFunctions_glCreateShader(QOpenGLFunctions * this_ptr, unsigned int type) {
  return this_ptr->glCreateShader(type);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteBuffers(QOpenGLFunctions * this_ptr, int n, GLuint const * buffers) {
  this_ptr->glDeleteBuffers(n, buffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteFramebuffers(QOpenGLFunctions * this_ptr, int n, GLuint const * framebuffers) {
  this_ptr->glDeleteFramebuffers(n, framebuffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteProgram(QOpenGLFunctions * this_ptr, GLuint program) {
  this_ptr->glDeleteProgram(program);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteRenderbuffers(QOpenGLFunctions * this_ptr, int n, GLuint const * renderbuffers) {
  this_ptr->glDeleteRenderbuffers(n, renderbuffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDeleteShader(QOpenGLFunctions * this_ptr, GLuint shader) {
  this_ptr->glDeleteShader(shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDepthRangef(QOpenGLFunctions * this_ptr, float zNear, float zFar) {
  this_ptr->glDepthRangef(zNear, zFar);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDetachShader(QOpenGLFunctions * this_ptr, GLuint program, GLuint shader) {
  this_ptr->glDetachShader(program, shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glDisableVertexAttribArray(QOpenGLFunctions * this_ptr, GLuint index) {
  this_ptr->glDisableVertexAttribArray(index);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glEnableVertexAttribArray(QOpenGLFunctions * this_ptr, GLuint index) {
  this_ptr->glEnableVertexAttribArray(index);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glFramebufferRenderbuffer(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int attachment, unsigned int renderbuffertarget, GLuint renderbuffer) {
  this_ptr->glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glFramebufferTexture2D(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int attachment, unsigned int textarget, GLuint texture, GLint level) {
  this_ptr->glFramebufferTexture2D(target, attachment, textarget, texture, level);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGenBuffers(QOpenGLFunctions * this_ptr, int n, GLuint * buffers) {
  this_ptr->glGenBuffers(n, buffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGenerateMipmap(QOpenGLFunctions * this_ptr, unsigned int target) {
  this_ptr->glGenerateMipmap(target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGenFramebuffers(QOpenGLFunctions * this_ptr, int n, GLuint * framebuffers) {
  this_ptr->glGenFramebuffers(n, framebuffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGenRenderbuffers(QOpenGLFunctions * this_ptr, int n, GLuint * renderbuffers) {
  this_ptr->glGenRenderbuffers(n, renderbuffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetActiveAttrib(QOpenGLFunctions * this_ptr, GLuint program, GLuint index, int bufsize, int * length, GLint * size, unsigned int * type, char * name) {
  this_ptr->glGetActiveAttrib(program, index, bufsize, length, size, type, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetActiveUniform(QOpenGLFunctions * this_ptr, GLuint program, GLuint index, int bufsize, int * length, GLint * size, unsigned int * type, char * name) {
  this_ptr->glGetActiveUniform(program, index, bufsize, length, size, type, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetAttachedShaders(QOpenGLFunctions * this_ptr, GLuint program, int maxcount, int * count, GLuint * shaders) {
  this_ptr->glGetAttachedShaders(program, maxcount, count, shaders);
}


RITUAL_EXPORT GLint ctr_qt_gui_ffi_QOpenGLFunctions_glGetAttribLocation(QOpenGLFunctions * this_ptr, GLuint program, char const * name) {
  return this_ptr->glGetAttribLocation(program, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetBufferParameteriv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetBufferParameteriv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetFramebufferAttachmentParameteriv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int attachment, unsigned int pname, GLint * params) {
  this_ptr->glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetProgramiv(QOpenGLFunctions * this_ptr, GLuint program, unsigned int pname, GLint * params) {
  this_ptr->glGetProgramiv(program, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetProgramInfoLog(QOpenGLFunctions * this_ptr, GLuint program, int bufsize, int * length, char * infolog) {
  this_ptr->glGetProgramInfoLog(program, bufsize, length, infolog);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetRenderbufferParameteriv(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetRenderbufferParameteriv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetShaderiv(QOpenGLFunctions * this_ptr, GLuint shader, unsigned int pname, GLint * params) {
  this_ptr->glGetShaderiv(shader, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetShaderInfoLog(QOpenGLFunctions * this_ptr, GLuint shader, int bufsize, int * length, char * infolog) {
  this_ptr->glGetShaderInfoLog(shader, bufsize, length, infolog);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetShaderPrecisionFormat(QOpenGLFunctions * this_ptr, unsigned int shadertype, unsigned int precisiontype, GLint * range, GLint * precision) {
  this_ptr->glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetShaderSource(QOpenGLFunctions * this_ptr, GLuint shader, int bufsize, int * length, char * source) {
  this_ptr->glGetShaderSource(shader, bufsize, length, source);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetUniformfv(QOpenGLFunctions * this_ptr, GLuint program, GLint location, float * params) {
  this_ptr->glGetUniformfv(program, location, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetUniformiv(QOpenGLFunctions * this_ptr, GLuint program, GLint location, GLint * params) {
  this_ptr->glGetUniformiv(program, location, params);
}


RITUAL_EXPORT GLint ctr_qt_gui_ffi_QOpenGLFunctions_glGetUniformLocation(QOpenGLFunctions * this_ptr, GLuint program, char const * name) {
  return this_ptr->glGetUniformLocation(program, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetVertexAttribfv(QOpenGLFunctions * this_ptr, GLuint index, unsigned int pname, float * params) {
  this_ptr->glGetVertexAttribfv(index, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetVertexAttribiv(QOpenGLFunctions * this_ptr, GLuint index, unsigned int pname, GLint * params) {
  this_ptr->glGetVertexAttribiv(index, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glGetVertexAttribPointerv(QOpenGLFunctions * this_ptr, GLuint index, unsigned int pname, void * * pointer) {
  this_ptr->glGetVertexAttribPointerv(index, pname, pointer);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsBuffer(QOpenGLFunctions * this_ptr, GLuint buffer) {
  return this_ptr->glIsBuffer(buffer);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsFramebuffer(QOpenGLFunctions * this_ptr, GLuint framebuffer) {
  return this_ptr->glIsFramebuffer(framebuffer);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsProgram(QOpenGLFunctions * this_ptr, GLuint program) {
  return this_ptr->glIsProgram(program);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsRenderbuffer(QOpenGLFunctions * this_ptr, GLuint renderbuffer) {
  return this_ptr->glIsRenderbuffer(renderbuffer);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLFunctions_glIsShader(QOpenGLFunctions * this_ptr, GLuint shader) {
  return this_ptr->glIsShader(shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glLinkProgram(QOpenGLFunctions * this_ptr, GLuint program) {
  this_ptr->glLinkProgram(program);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glReleaseShaderCompiler(QOpenGLFunctions * this_ptr) {
  this_ptr->glReleaseShaderCompiler();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glRenderbufferStorage(QOpenGLFunctions * this_ptr, unsigned int target, unsigned int internalformat, int width, int height) {
  this_ptr->glRenderbufferStorage(target, internalformat, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glSampleCoverage(QOpenGLFunctions * this_ptr, float value, unsigned char invert) {
  this_ptr->glSampleCoverage(value, invert);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glShaderBinary(QOpenGLFunctions * this_ptr, GLint n, GLuint const * shaders, unsigned int binaryformat, void const * binary, GLint length) {
  this_ptr->glShaderBinary(n, shaders, binaryformat, binary, length);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glShaderSource(QOpenGLFunctions * this_ptr, GLuint shader, int count, char const * * string, GLint const * length) {
  this_ptr->glShaderSource(shader, count, string, length);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilFuncSeparate(QOpenGLFunctions * this_ptr, unsigned int face, unsigned int func, GLint ref, GLuint mask) {
  this_ptr->glStencilFuncSeparate(face, func, ref, mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilMaskSeparate(QOpenGLFunctions * this_ptr, unsigned int face, GLuint mask) {
  this_ptr->glStencilMaskSeparate(face, mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glStencilOpSeparate(QOpenGLFunctions * this_ptr, unsigned int face, unsigned int fail, unsigned int zfail, unsigned int zpass) {
  this_ptr->glStencilOpSeparate(face, fail, zfail, zpass);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform1f(QOpenGLFunctions * this_ptr, GLint location, float x) {
  this_ptr->glUniform1f(location, x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform1fv(QOpenGLFunctions * this_ptr, GLint location, int count, float const * v) {
  this_ptr->glUniform1fv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform1i(QOpenGLFunctions * this_ptr, GLint location, GLint x) {
  this_ptr->glUniform1i(location, x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform1iv(QOpenGLFunctions * this_ptr, GLint location, int count, GLint const * v) {
  this_ptr->glUniform1iv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform2f(QOpenGLFunctions * this_ptr, GLint location, float x, float y) {
  this_ptr->glUniform2f(location, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform2fv(QOpenGLFunctions * this_ptr, GLint location, int count, float const * v) {
  this_ptr->glUniform2fv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform2i(QOpenGLFunctions * this_ptr, GLint location, GLint x, GLint y) {
  this_ptr->glUniform2i(location, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform2iv(QOpenGLFunctions * this_ptr, GLint location, int count, GLint const * v) {
  this_ptr->glUniform2iv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform3f(QOpenGLFunctions * this_ptr, GLint location, float x, float y, float z) {
  this_ptr->glUniform3f(location, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform3fv(QOpenGLFunctions * this_ptr, GLint location, int count, float const * v) {
  this_ptr->glUniform3fv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform3i(QOpenGLFunctions * this_ptr, GLint location, GLint x, GLint y, GLint z) {
  this_ptr->glUniform3i(location, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform3iv(QOpenGLFunctions * this_ptr, GLint location, int count, GLint const * v) {
  this_ptr->glUniform3iv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform4f(QOpenGLFunctions * this_ptr, GLint location, float x, float y, float z, float w) {
  this_ptr->glUniform4f(location, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform4fv(QOpenGLFunctions * this_ptr, GLint location, int count, float const * v) {
  this_ptr->glUniform4fv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform4i(QOpenGLFunctions * this_ptr, GLint location, GLint x, GLint y, GLint z, GLint w) {
  this_ptr->glUniform4i(location, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniform4iv(QOpenGLFunctions * this_ptr, GLint location, int count, GLint const * v) {
  this_ptr->glUniform4iv(location, count, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniformMatrix2fv(QOpenGLFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix2fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniformMatrix3fv(QOpenGLFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix3fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUniformMatrix4fv(QOpenGLFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix4fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glUseProgram(QOpenGLFunctions * this_ptr, GLuint program) {
  this_ptr->glUseProgram(program);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glValidateProgram(QOpenGLFunctions * this_ptr, GLuint program) {
  this_ptr->glValidateProgram(program);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib1f(QOpenGLFunctions * this_ptr, GLuint indx, float x) {
  this_ptr->glVertexAttrib1f(indx, x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib1fv(QOpenGLFunctions * this_ptr, GLuint indx, float const * values) {
  this_ptr->glVertexAttrib1fv(indx, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib2f(QOpenGLFunctions * this_ptr, GLuint indx, float x, float y) {
  this_ptr->glVertexAttrib2f(indx, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib2fv(QOpenGLFunctions * this_ptr, GLuint indx, float const * values) {
  this_ptr->glVertexAttrib2fv(indx, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib3f(QOpenGLFunctions * this_ptr, GLuint indx, float x, float y, float z) {
  this_ptr->glVertexAttrib3f(indx, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib3fv(QOpenGLFunctions * this_ptr, GLuint indx, float const * values) {
  this_ptr->glVertexAttrib3fv(indx, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib4f(QOpenGLFunctions * this_ptr, GLuint indx, float x, float y, float z, float w) {
  this_ptr->glVertexAttrib4f(indx, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttrib4fv(QOpenGLFunctions * this_ptr, GLuint indx, float const * values) {
  this_ptr->glVertexAttrib4fv(indx, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFunctions_glVertexAttribPointer(QOpenGLFunctions * this_ptr, GLuint indx, GLint size, unsigned int type, unsigned char normalized, int stride, void const * ptr) {
  this_ptr->glVertexAttribPointer(indx, size, type, normalized, stride, ptr);
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_QOpenGLExtraFunctions_QOpenGLExtraFunctions() {
  return new QOpenGLExtraFunctions();
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_QOpenGLExtraFunctions_QOpenGLExtraFunctions1(QOpenGLContext * context) {
  return new QOpenGLExtraFunctions(context);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_dQOpenGLExtraFunctions(QOpenGLExtraFunctions * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glReadBuffer(QOpenGLExtraFunctions * this_ptr, unsigned int mode) {
  this_ptr->glReadBuffer(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawRangeElements(QOpenGLExtraFunctions * this_ptr, unsigned int mode, GLuint start, GLuint end, int count, unsigned int type, void const * indices) {
  this_ptr->glDrawRangeElements(mode, start, end, count, type, indices);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexImage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, GLint internalformat, int width, int height, int depth, GLint border, unsigned int format, unsigned int type, void const * pixels) {
  this_ptr->glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexSubImage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, int width, int height, int depth, unsigned int format, unsigned int type, void const * pixels) {
  this_ptr->glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCopyTexSubImage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, int width, int height) {
  this_ptr->glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCompressedTexImage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, unsigned int internalformat, int width, int height, int depth, GLint border, int imageSize, void const * data) {
  this_ptr->glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCompressedTexSubImage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, int width, int height, int depth, unsigned int format, int imageSize, void const * data) {
  this_ptr->glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGenQueries(QOpenGLExtraFunctions * this_ptr, int n, GLuint * ids) {
  this_ptr->glGenQueries(n, ids);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDeleteQueries(QOpenGLExtraFunctions * this_ptr, int n, GLuint const * ids) {
  this_ptr->glDeleteQueries(n, ids);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsQuery(QOpenGLExtraFunctions * this_ptr, GLuint id) {
  return this_ptr->glIsQuery(id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBeginQuery(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint id) {
  this_ptr->glBeginQuery(target, id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glEndQuery(QOpenGLExtraFunctions * this_ptr, unsigned int target) {
  this_ptr->glEndQuery(target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetQueryiv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetQueryiv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetQueryObjectuiv(QOpenGLExtraFunctions * this_ptr, GLuint id, unsigned int pname, GLuint * params) {
  this_ptr->glGetQueryObjectuiv(id, pname, params);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUnmapBuffer(QOpenGLExtraFunctions * this_ptr, unsigned int target) {
  return this_ptr->glUnmapBuffer(target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetBufferPointerv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, void * * params) {
  this_ptr->glGetBufferPointerv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawBuffers(QOpenGLExtraFunctions * this_ptr, int n, unsigned int const * bufs) {
  this_ptr->glDrawBuffers(n, bufs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix2x3fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix2x3fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix3x2fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix3x2fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix2x4fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix2x4fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix4x2fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix4x2fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix3x4fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix3x4fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformMatrix4x3fv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glUniformMatrix4x3fv(location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlitFramebuffer(QOpenGLExtraFunctions * this_ptr, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, unsigned int mask, unsigned int filter) {
  this_ptr->glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glRenderbufferStorageMultisample(QOpenGLExtraFunctions * this_ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height) {
  this_ptr->glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glFramebufferTextureLayer(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int attachment, GLuint texture, GLint level, GLint layer) {
  this_ptr->glFramebufferTextureLayer(target, attachment, texture, level, layer);
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLExtraFunctions_glMapBufferRange(QOpenGLExtraFunctions * this_ptr, unsigned int target, long offset, long length, unsigned int access) {
  return this_ptr->glMapBufferRange(target, offset, length, access);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glFlushMappedBufferRange(QOpenGLExtraFunctions * this_ptr, unsigned int target, long offset, long length) {
  this_ptr->glFlushMappedBufferRange(target, offset, length);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindVertexArray(QOpenGLExtraFunctions * this_ptr, GLuint array) {
  this_ptr->glBindVertexArray(array);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDeleteVertexArrays(QOpenGLExtraFunctions * this_ptr, int n, GLuint const * arrays) {
  this_ptr->glDeleteVertexArrays(n, arrays);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGenVertexArrays(QOpenGLExtraFunctions * this_ptr, int n, GLuint * arrays) {
  this_ptr->glGenVertexArrays(n, arrays);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsVertexArray(QOpenGLExtraFunctions * this_ptr, GLuint array) {
  return this_ptr->glIsVertexArray(array);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetIntegeri_v(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index, GLint * data) {
  this_ptr->glGetIntegeri_v(target, index, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBeginTransformFeedback(QOpenGLExtraFunctions * this_ptr, unsigned int primitiveMode) {
  this_ptr->glBeginTransformFeedback(primitiveMode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glEndTransformFeedback(QOpenGLExtraFunctions * this_ptr) {
  this_ptr->glEndTransformFeedback();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindBufferRange(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index, GLuint buffer, long offset, long size) {
  this_ptr->glBindBufferRange(target, index, buffer, offset, size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindBufferBase(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index, GLuint buffer) {
  this_ptr->glBindBufferBase(target, index, buffer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTransformFeedbackVaryings(QOpenGLExtraFunctions * this_ptr, GLuint program, int count, char const * const * varyings, unsigned int bufferMode) {
  this_ptr->glTransformFeedbackVaryings(program, count, varyings, bufferMode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetTransformFeedbackVarying(QOpenGLExtraFunctions * this_ptr, GLuint program, GLuint index, int bufSize, int * length, int * size, unsigned int * type, char * name) {
  this_ptr->glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribIPointer(QOpenGLExtraFunctions * this_ptr, GLuint index, GLint size, unsigned int type, int stride, void const * pointer) {
  this_ptr->glVertexAttribIPointer(index, size, type, stride, pointer);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetVertexAttribIiv(QOpenGLExtraFunctions * this_ptr, GLuint index, unsigned int pname, GLint * params) {
  this_ptr->glGetVertexAttribIiv(index, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetVertexAttribIuiv(QOpenGLExtraFunctions * this_ptr, GLuint index, unsigned int pname, GLuint * params) {
  this_ptr->glGetVertexAttribIuiv(index, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribI4i(QOpenGLExtraFunctions * this_ptr, GLuint index, GLint x, GLint y, GLint z, GLint w) {
  this_ptr->glVertexAttribI4i(index, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribI4ui(QOpenGLExtraFunctions * this_ptr, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) {
  this_ptr->glVertexAttribI4ui(index, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribI4iv(QOpenGLExtraFunctions * this_ptr, GLuint index, GLint const * v) {
  this_ptr->glVertexAttribI4iv(index, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribI4uiv(QOpenGLExtraFunctions * this_ptr, GLuint index, GLuint const * v) {
  this_ptr->glVertexAttribI4uiv(index, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetUniformuiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLuint * params) {
  this_ptr->glGetUniformuiv(program, location, params);
}


RITUAL_EXPORT GLint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetFragDataLocation(QOpenGLExtraFunctions * this_ptr, GLuint program, char const * name) {
  return this_ptr->glGetFragDataLocation(program, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform1ui(QOpenGLExtraFunctions * this_ptr, GLint location, GLuint v0) {
  this_ptr->glUniform1ui(location, v0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform2ui(QOpenGLExtraFunctions * this_ptr, GLint location, GLuint v0, GLuint v1) {
  this_ptr->glUniform2ui(location, v0, v1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform3ui(QOpenGLExtraFunctions * this_ptr, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  this_ptr->glUniform3ui(location, v0, v1, v2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform4ui(QOpenGLExtraFunctions * this_ptr, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  this_ptr->glUniform4ui(location, v0, v1, v2, v3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform1uiv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, GLuint const * value) {
  this_ptr->glUniform1uiv(location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform2uiv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, GLuint const * value) {
  this_ptr->glUniform2uiv(location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform3uiv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, GLuint const * value) {
  this_ptr->glUniform3uiv(location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniform4uiv(QOpenGLExtraFunctions * this_ptr, GLint location, int count, GLuint const * value) {
  this_ptr->glUniform4uiv(location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glClearBufferiv(QOpenGLExtraFunctions * this_ptr, unsigned int buffer, GLint drawbuffer, GLint const * value) {
  this_ptr->glClearBufferiv(buffer, drawbuffer, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glClearBufferuiv(QOpenGLExtraFunctions * this_ptr, unsigned int buffer, GLint drawbuffer, GLuint const * value) {
  this_ptr->glClearBufferuiv(buffer, drawbuffer, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glClearBufferfv(QOpenGLExtraFunctions * this_ptr, unsigned int buffer, GLint drawbuffer, float const * value) {
  this_ptr->glClearBufferfv(buffer, drawbuffer, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glClearBufferfi(QOpenGLExtraFunctions * this_ptr, unsigned int buffer, GLint drawbuffer, float depth, GLint stencil) {
  this_ptr->glClearBufferfi(buffer, drawbuffer, depth, stencil);
}


RITUAL_EXPORT GLubyte const * ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetStringi(QOpenGLExtraFunctions * this_ptr, unsigned int name, GLuint index) {
  return this_ptr->glGetStringi(name, index);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCopyBufferSubData(QOpenGLExtraFunctions * this_ptr, unsigned int readTarget, unsigned int writeTarget, long readOffset, long writeOffset, long size) {
  this_ptr->glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetUniformIndices(QOpenGLExtraFunctions * this_ptr, GLuint program, int uniformCount, char const * const * uniformNames, GLuint * uniformIndices) {
  this_ptr->glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetActiveUniformsiv(QOpenGLExtraFunctions * this_ptr, GLuint program, int uniformCount, GLuint const * uniformIndices, unsigned int pname, GLint * params) {
  this_ptr->glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetUniformBlockIndex(QOpenGLExtraFunctions * this_ptr, GLuint program, char const * uniformBlockName) {
  return this_ptr->glGetUniformBlockIndex(program, uniformBlockName);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetActiveUniformBlockiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLuint uniformBlockIndex, unsigned int pname, GLint * params) {
  this_ptr->glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetActiveUniformBlockName(QOpenGLExtraFunctions * this_ptr, GLuint program, GLuint uniformBlockIndex, int bufSize, int * length, char * uniformBlockName) {
  this_ptr->glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUniformBlockBinding(QOpenGLExtraFunctions * this_ptr, GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) {
  this_ptr->glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawArraysInstanced(QOpenGLExtraFunctions * this_ptr, unsigned int mode, GLint first, int count, int instancecount) {
  this_ptr->glDrawArraysInstanced(mode, first, count, instancecount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawElementsInstanced(QOpenGLExtraFunctions * this_ptr, unsigned int mode, int count, unsigned int type, void const * indices, int instancecount) {
  this_ptr->glDrawElementsInstanced(mode, count, type, indices, instancecount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetInteger64v(QOpenGLExtraFunctions * this_ptr, unsigned int pname, GLint64 * data) {
  this_ptr->glGetInteger64v(pname, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetInteger64i_v(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index, GLint64 * data) {
  this_ptr->glGetInteger64i_v(target, index, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetBufferParameteri64v(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint64 * params) {
  this_ptr->glGetBufferParameteri64v(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGenSamplers(QOpenGLExtraFunctions * this_ptr, int count, GLuint * samplers) {
  this_ptr->glGenSamplers(count, samplers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDeleteSamplers(QOpenGLExtraFunctions * this_ptr, int count, GLuint const * samplers) {
  this_ptr->glDeleteSamplers(count, samplers);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsSampler(QOpenGLExtraFunctions * this_ptr, GLuint sampler) {
  return this_ptr->glIsSampler(sampler);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindSampler(QOpenGLExtraFunctions * this_ptr, GLuint unit, GLuint sampler) {
  this_ptr->glBindSampler(unit, sampler);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameteri(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLint param) {
  this_ptr->glSamplerParameteri(sampler, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameteriv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLint const * param) {
  this_ptr->glSamplerParameteriv(sampler, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameterf(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, float param) {
  this_ptr->glSamplerParameterf(sampler, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameterfv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, float const * param) {
  this_ptr->glSamplerParameterfv(sampler, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetSamplerParameteriv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLint * params) {
  this_ptr->glGetSamplerParameteriv(sampler, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetSamplerParameterfv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, float * params) {
  this_ptr->glGetSamplerParameterfv(sampler, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribDivisor(QOpenGLExtraFunctions * this_ptr, GLuint index, GLuint divisor) {
  this_ptr->glVertexAttribDivisor(index, divisor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindTransformFeedback(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint id) {
  this_ptr->glBindTransformFeedback(target, id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDeleteTransformFeedbacks(QOpenGLExtraFunctions * this_ptr, int n, GLuint const * ids) {
  this_ptr->glDeleteTransformFeedbacks(n, ids);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGenTransformFeedbacks(QOpenGLExtraFunctions * this_ptr, int n, GLuint * ids) {
  this_ptr->glGenTransformFeedbacks(n, ids);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsTransformFeedback(QOpenGLExtraFunctions * this_ptr, GLuint id) {
  return this_ptr->glIsTransformFeedback(id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glPauseTransformFeedback(QOpenGLExtraFunctions * this_ptr) {
  this_ptr->glPauseTransformFeedback();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glResumeTransformFeedback(QOpenGLExtraFunctions * this_ptr) {
  this_ptr->glResumeTransformFeedback();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramBinary(QOpenGLExtraFunctions * this_ptr, GLuint program, int bufSize, int * length, unsigned int * binaryFormat, void * binary) {
  this_ptr->glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramBinary(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int binaryFormat, void const * binary, int length) {
  this_ptr->glProgramBinary(program, binaryFormat, binary, length);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramParameteri(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int pname, GLint value) {
  this_ptr->glProgramParameteri(program, pname, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glInvalidateFramebuffer(QOpenGLExtraFunctions * this_ptr, unsigned int target, int numAttachments, unsigned int const * attachments) {
  this_ptr->glInvalidateFramebuffer(target, numAttachments, attachments);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glInvalidateSubFramebuffer(QOpenGLExtraFunctions * this_ptr, unsigned int target, int numAttachments, unsigned int const * attachments, GLint x, GLint y, int width, int height) {
  this_ptr->glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexStorage2D(QOpenGLExtraFunctions * this_ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height) {
  this_ptr->glTexStorage2D(target, levels, internalformat, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexStorage3D(QOpenGLExtraFunctions * this_ptr, unsigned int target, int levels, unsigned int internalformat, int width, int height, int depth) {
  this_ptr->glTexStorage3D(target, levels, internalformat, width, height, depth);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetInternalformativ(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int internalformat, unsigned int pname, int bufSize, GLint * params) {
  this_ptr->glGetInternalformativ(target, internalformat, pname, bufSize, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDispatchCompute(QOpenGLExtraFunctions * this_ptr, GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
  this_ptr->glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDispatchComputeIndirect(QOpenGLExtraFunctions * this_ptr, long indirect) {
  this_ptr->glDispatchComputeIndirect(indirect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawArraysIndirect(QOpenGLExtraFunctions * this_ptr, unsigned int mode, void const * indirect) {
  this_ptr->glDrawArraysIndirect(mode, indirect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawElementsIndirect(QOpenGLExtraFunctions * this_ptr, unsigned int mode, unsigned int type, void const * indirect) {
  this_ptr->glDrawElementsIndirect(mode, type, indirect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glFramebufferParameteri(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint param) {
  this_ptr->glFramebufferParameteri(target, pname, param);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetFramebufferParameteriv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetFramebufferParameteriv(target, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramInterfaceiv(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int programInterface, unsigned int pname, GLint * params) {
  this_ptr->glGetProgramInterfaceiv(program, programInterface, pname, params);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramResourceIndex(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int programInterface, char const * name) {
  return this_ptr->glGetProgramResourceIndex(program, programInterface, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramResourceName(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int programInterface, GLuint index, int bufSize, int * length, char * name) {
  this_ptr->glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramResourceiv(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int programInterface, GLuint index, int propCount, unsigned int const * props, int bufSize, int * length, GLint * params) {
  this_ptr->glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}


RITUAL_EXPORT GLint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramResourceLocation(QOpenGLExtraFunctions * this_ptr, GLuint program, unsigned int programInterface, char const * name) {
  return this_ptr->glGetProgramResourceLocation(program, programInterface, name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glUseProgramStages(QOpenGLExtraFunctions * this_ptr, GLuint pipeline, unsigned int stages, GLuint program) {
  this_ptr->glUseProgramStages(pipeline, stages, program);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glActiveShaderProgram(QOpenGLExtraFunctions * this_ptr, GLuint pipeline, GLuint program) {
  this_ptr->glActiveShaderProgram(pipeline, program);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCreateShaderProgramv(QOpenGLExtraFunctions * this_ptr, unsigned int type, int count, char const * const * strings) {
  return this_ptr->glCreateShaderProgramv(type, count, strings);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindProgramPipeline(QOpenGLExtraFunctions * this_ptr, GLuint pipeline) {
  this_ptr->glBindProgramPipeline(pipeline);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDeleteProgramPipelines(QOpenGLExtraFunctions * this_ptr, int n, GLuint const * pipelines) {
  this_ptr->glDeleteProgramPipelines(n, pipelines);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGenProgramPipelines(QOpenGLExtraFunctions * this_ptr, int n, GLuint * pipelines) {
  this_ptr->glGenProgramPipelines(n, pipelines);
}


RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsProgramPipeline(QOpenGLExtraFunctions * this_ptr, GLuint pipeline) {
  return this_ptr->glIsProgramPipeline(pipeline);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramPipelineiv(QOpenGLExtraFunctions * this_ptr, GLuint pipeline, unsigned int pname, GLint * params) {
  this_ptr->glGetProgramPipelineiv(pipeline, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1i(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLint v0) {
  this_ptr->glProgramUniform1i(program, location, v0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2i(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLint v0, GLint v1) {
  this_ptr->glProgramUniform2i(program, location, v0, v1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3i(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
  this_ptr->glProgramUniform3i(program, location, v0, v1, v2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4i(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  this_ptr->glProgramUniform4i(program, location, v0, v1, v2, v3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1ui(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLuint v0) {
  this_ptr->glProgramUniform1ui(program, location, v0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2ui(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLuint v0, GLuint v1) {
  this_ptr->glProgramUniform2ui(program, location, v0, v1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3ui(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) {
  this_ptr->glProgramUniform3ui(program, location, v0, v1, v2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4ui(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) {
  this_ptr->glProgramUniform4ui(program, location, v0, v1, v2, v3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1f(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, float v0) {
  this_ptr->glProgramUniform1f(program, location, v0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2f(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, float v0, float v1) {
  this_ptr->glProgramUniform2f(program, location, v0, v1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3f(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, float v0, float v1, float v2) {
  this_ptr->glProgramUniform3f(program, location, v0, v1, v2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4f(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, float v0, float v1, float v2, float v3) {
  this_ptr->glProgramUniform4f(program, location, v0, v1, v2, v3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1iv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLint const * value) {
  this_ptr->glProgramUniform1iv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2iv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLint const * value) {
  this_ptr->glProgramUniform2iv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3iv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLint const * value) {
  this_ptr->glProgramUniform3iv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4iv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLint const * value) {
  this_ptr->glProgramUniform4iv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1uiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLuint const * value) {
  this_ptr->glProgramUniform1uiv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2uiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLuint const * value) {
  this_ptr->glProgramUniform2uiv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3uiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLuint const * value) {
  this_ptr->glProgramUniform3uiv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4uiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, GLuint const * value) {
  this_ptr->glProgramUniform4uiv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform1fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, float const * value) {
  this_ptr->glProgramUniform1fv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform2fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, float const * value) {
  this_ptr->glProgramUniform2fv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform3fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, float const * value) {
  this_ptr->glProgramUniform3fv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniform4fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, float const * value) {
  this_ptr->glProgramUniform4fv(program, location, count, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix2fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix2fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix3fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix3fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix4fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix4fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix2x3fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix3x2fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix2x4fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix4x2fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix3x4fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glProgramUniformMatrix4x3fv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int count, unsigned char transpose, float const * value) {
  this_ptr->glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glValidateProgramPipeline(QOpenGLExtraFunctions * this_ptr, GLuint pipeline) {
  this_ptr->glValidateProgramPipeline(pipeline);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetProgramPipelineInfoLog(QOpenGLExtraFunctions * this_ptr, GLuint pipeline, int bufSize, int * length, char * infoLog) {
  this_ptr->glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindImageTexture(QOpenGLExtraFunctions * this_ptr, GLuint unit, GLuint texture, GLint level, unsigned char layered, GLint layer, unsigned int access, unsigned int format) {
  this_ptr->glBindImageTexture(unit, texture, level, layered, layer, access, format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetBooleani_v(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index, unsigned char * data) {
  this_ptr->glGetBooleani_v(target, index, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glMemoryBarrier(QOpenGLExtraFunctions * this_ptr, unsigned int barriers) {
  this_ptr->glMemoryBarrier(barriers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glMemoryBarrierByRegion(QOpenGLExtraFunctions * this_ptr, unsigned int barriers) {
  this_ptr->glMemoryBarrierByRegion(barriers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexStorage2DMultisample(QOpenGLExtraFunctions * this_ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, unsigned char fixedsamplelocations) {
  this_ptr->glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetMultisamplefv(QOpenGLExtraFunctions * this_ptr, unsigned int pname, GLuint index, float * val) {
  this_ptr->glGetMultisamplefv(pname, index, val);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSampleMaski(QOpenGLExtraFunctions * this_ptr, GLuint maskNumber, unsigned int mask) {
  this_ptr->glSampleMaski(maskNumber, mask);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetTexLevelParameteriv(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, unsigned int pname, GLint * params) {
  this_ptr->glGetTexLevelParameteriv(target, level, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetTexLevelParameterfv(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLint level, unsigned int pname, float * params) {
  this_ptr->glGetTexLevelParameterfv(target, level, pname, params);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBindVertexBuffer(QOpenGLExtraFunctions * this_ptr, GLuint bindingindex, GLuint buffer, long offset, int stride) {
  this_ptr->glBindVertexBuffer(bindingindex, buffer, offset, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribFormat(QOpenGLExtraFunctions * this_ptr, GLuint attribindex, GLint size, unsigned int type, unsigned char normalized, GLuint relativeoffset) {
  this_ptr->glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribIFormat(QOpenGLExtraFunctions * this_ptr, GLuint attribindex, GLint size, unsigned int type, GLuint relativeoffset) {
  this_ptr->glVertexAttribIFormat(attribindex, size, type, relativeoffset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexAttribBinding(QOpenGLExtraFunctions * this_ptr, GLuint attribindex, GLuint bindingindex) {
  this_ptr->glVertexAttribBinding(attribindex, bindingindex);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glVertexBindingDivisor(QOpenGLExtraFunctions * this_ptr, GLuint bindingindex, GLuint divisor) {
  this_ptr->glVertexBindingDivisor(bindingindex, divisor);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject(QSize const * size, unsigned int target) {
  return new QOpenGLFramebufferObject(*size, target);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject1(int width, int height, unsigned int target) {
  return new QOpenGLFramebufferObject(width, height, target);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject2(QSize const * size, QOpenGLFramebufferObject::Attachment attachment, unsigned int target, unsigned int internalFormat) {
  return new QOpenGLFramebufferObject(*size, attachment, target, internalFormat);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject3(int width, int height, QOpenGLFramebufferObject::Attachment attachment, unsigned int target, unsigned int internalFormat) {
  return new QOpenGLFramebufferObject(width, height, attachment, target, internalFormat);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject4(QSize const * size, QOpenGLFramebufferObjectFormat const * format) {
  return new QOpenGLFramebufferObject(*size, *format);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject5(int width, int height, QOpenGLFramebufferObjectFormat const * format) {
  return new QOpenGLFramebufferObject(width, height, *format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_dQOpenGLFramebufferObject(QOpenGLFramebufferObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_addColorAttachment(QOpenGLFramebufferObject * this_ptr, QSize const * size, unsigned int internalFormat) {
  this_ptr->addColorAttachment(*size, internalFormat);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_addColorAttachment1(QOpenGLFramebufferObject * this_ptr, int width, int height, unsigned int internalFormat) {
  this_ptr->addColorAttachment(width, height, internalFormat);
}


RITUAL_EXPORT QOpenGLFramebufferObjectFormat * ctr_qt_gui_ffi_QOpenGLFramebufferObject_format(QOpenGLFramebufferObject const * this_ptr) {
  return new QOpenGLFramebufferObjectFormat(this_ptr->format());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_isValid(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_isBound(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->isBound();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_bind(QOpenGLFramebufferObject * this_ptr) {
  return this_ptr->bind();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_release(QOpenGLFramebufferObject * this_ptr) {
  return this_ptr->release();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLFramebufferObject_width(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLFramebufferObject_height(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFramebufferObject_texture(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->texture();
}


RITUAL_EXPORT QVector< GLuint > * ctr_qt_gui_ffi_QOpenGLFramebufferObject_textures(QOpenGLFramebufferObject const * this_ptr) {
  return new QVector< GLuint >(this_ptr->textures());
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFramebufferObject_takeTexture(QOpenGLFramebufferObject * this_ptr) {
  return this_ptr->takeTexture();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFramebufferObject_takeTexture1(QOpenGLFramebufferObject * this_ptr, int colorAttachmentIndex) {
  return this_ptr->takeTexture(colorAttachmentIndex);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QOpenGLFramebufferObject_size(QOpenGLFramebufferObject const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QOpenGLFramebufferObject_sizes(QOpenGLFramebufferObject const * this_ptr) {
  return new QVector< QSize >(this_ptr->sizes());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QOpenGLFramebufferObject_toImage(QOpenGLFramebufferObject const * this_ptr) {
  return new QImage(this_ptr->toImage());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QOpenGLFramebufferObject_toImage1(QOpenGLFramebufferObject const * this_ptr, bool flipped) {
  return new QImage(this_ptr->toImage(flipped));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QOpenGLFramebufferObject_toImage2(QOpenGLFramebufferObject const * this_ptr, bool flipped, int colorAttachmentIndex) {
  return new QImage(this_ptr->toImage(flipped, colorAttachmentIndex));
}


RITUAL_EXPORT QOpenGLFramebufferObject::Attachment ctr_qt_gui_ffi_QOpenGLFramebufferObject_attachment(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->attachment();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_setAttachment(QOpenGLFramebufferObject * this_ptr, QOpenGLFramebufferObject::Attachment attachment) {
  this_ptr->setAttachment(attachment);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLFramebufferObject_handle(QOpenGLFramebufferObject const * this_ptr) {
  return this_ptr->handle();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_bindDefault() {
  return QOpenGLFramebufferObject::bindDefault();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_hasOpenGLFramebufferObjects() {
  return QOpenGLFramebufferObject::hasOpenGLFramebufferObjects();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObject_hasOpenGLFramebufferBlit() {
  return QOpenGLFramebufferObject::hasOpenGLFramebufferBlit();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer(QOpenGLFramebufferObject * target, QRect const * targetRect, QOpenGLFramebufferObject * source, QRect const * sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy) {
  QOpenGLFramebufferObject::blitFramebuffer(target, *targetRect, source, *sourceRect, buffers, filter, readColorAttachmentIndex, drawColorAttachmentIndex, restorePolicy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer1(QOpenGLFramebufferObject * target, QRect const * targetRect, QOpenGLFramebufferObject * source, QRect const * sourceRect, unsigned int buffers, unsigned int filter, int readColorAttachmentIndex, int drawColorAttachmentIndex) {
  QOpenGLFramebufferObject::blitFramebuffer(target, *targetRect, source, *sourceRect, buffers, filter, readColorAttachmentIndex, drawColorAttachmentIndex);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer2(QOpenGLFramebufferObject * target, QRect const * targetRect, QOpenGLFramebufferObject * source, QRect const * sourceRect, unsigned int buffers, unsigned int filter) {
  QOpenGLFramebufferObject::blitFramebuffer(target, *targetRect, source, *sourceRect, buffers, filter);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer3(QOpenGLFramebufferObject * target, QOpenGLFramebufferObject * source, unsigned int buffers, unsigned int filter) {
  QOpenGLFramebufferObject::blitFramebuffer(target, source, buffers, filter);
}


RITUAL_EXPORT QOpenGLFramebufferObjectFormat * ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_QOpenGLFramebufferObjectFormat() {
  return new QOpenGLFramebufferObjectFormat();
}


RITUAL_EXPORT QOpenGLFramebufferObjectFormat * ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_QOpenGLFramebufferObjectFormat1(QOpenGLFramebufferObjectFormat const * other) {
  return new QOpenGLFramebufferObjectFormat(*other);
}


RITUAL_EXPORT QOpenGLFramebufferObjectFormat * ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_operator_(QOpenGLFramebufferObjectFormat * this_ptr, QOpenGLFramebufferObjectFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_dQOpenGLFramebufferObjectFormat(QOpenGLFramebufferObjectFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_setSamples(QOpenGLFramebufferObjectFormat * this_ptr, int samples) {
  this_ptr->setSamples(samples);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_samples(QOpenGLFramebufferObjectFormat const * this_ptr) {
  return this_ptr->samples();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_setMipmap(QOpenGLFramebufferObjectFormat * this_ptr, bool enabled) {
  this_ptr->setMipmap(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_mipmap(QOpenGLFramebufferObjectFormat const * this_ptr) {
  return this_ptr->mipmap();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_setAttachment(QOpenGLFramebufferObjectFormat * this_ptr, QOpenGLFramebufferObject::Attachment attachment) {
  this_ptr->setAttachment(attachment);
}


RITUAL_EXPORT QOpenGLFramebufferObject::Attachment ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_attachment(QOpenGLFramebufferObjectFormat const * this_ptr) {
  return this_ptr->attachment();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_setTextureTarget(QOpenGLFramebufferObjectFormat * this_ptr, unsigned int target) {
  this_ptr->setTextureTarget(target);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_textureTarget(QOpenGLFramebufferObjectFormat const * this_ptr) {
  return this_ptr->textureTarget();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(QOpenGLFramebufferObjectFormat * this_ptr, unsigned int internalTextureFormat) {
  this_ptr->setInternalTextureFormat(internalTextureFormat);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_internalTextureFormat(QOpenGLFramebufferObjectFormat const * this_ptr) {
  return this_ptr->internalTextureFormat();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLFramebufferObjectFormat_operator__(QOpenGLFramebufferObjectFormat const * this_ptr, QOpenGLFramebufferObjectFormat const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QOpenGLPaintDevice * ctr_qt_gui_ffi_QOpenGLPaintDevice_QOpenGLPaintDevice() {
  return new QOpenGLPaintDevice();
}


RITUAL_EXPORT QOpenGLPaintDevice * ctr_qt_gui_ffi_QOpenGLPaintDevice_QOpenGLPaintDevice1(QSize const * size) {
  return new QOpenGLPaintDevice(*size);
}


RITUAL_EXPORT QOpenGLPaintDevice * ctr_qt_gui_ffi_QOpenGLPaintDevice_QOpenGLPaintDevice2(int width, int height) {
  return new QOpenGLPaintDevice(width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_dQOpenGLPaintDevice(QOpenGLPaintDevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPaintDevice_devType(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->devType();
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QOpenGLPaintDevice_paintEngine(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLPaintDevice_context(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->context();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QOpenGLPaintDevice_size(QOpenGLPaintDevice const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_setSize(QOpenGLPaintDevice * this_ptr, QSize const * size) {
  this_ptr->setSize(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_setDevicePixelRatio(QOpenGLPaintDevice * this_ptr, double devicePixelRatio) {
  this_ptr->setDevicePixelRatio(devicePixelRatio);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QOpenGLPaintDevice_dotsPerMeterX(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->dotsPerMeterX();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QOpenGLPaintDevice_dotsPerMeterY(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->dotsPerMeterY();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_setDotsPerMeterX(QOpenGLPaintDevice * this_ptr, double arg1) {
  this_ptr->setDotsPerMeterX(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_setDotsPerMeterY(QOpenGLPaintDevice * this_ptr, double arg1) {
  this_ptr->setDotsPerMeterY(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_setPaintFlipped(QOpenGLPaintDevice * this_ptr, bool flipped) {
  this_ptr->setPaintFlipped(flipped);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLPaintDevice_paintFlipped(QOpenGLPaintDevice const * this_ptr) {
  return this_ptr->paintFlipped();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPaintDevice_ensureActiveTarget(QOpenGLPaintDevice * this_ptr) {
  this_ptr->ensureActiveTarget();
}


RITUAL_EXPORT QOpenGLPixelTransferOptions * ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_QOpenGLPixelTransferOptions() {
  return new QOpenGLPixelTransferOptions();
}


RITUAL_EXPORT QOpenGLPixelTransferOptions * ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_QOpenGLPixelTransferOptions1(QOpenGLPixelTransferOptions const * arg1) {
  return new QOpenGLPixelTransferOptions(*arg1);
}


RITUAL_EXPORT QOpenGLPixelTransferOptions * ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_operator_1(QOpenGLPixelTransferOptions * this_ptr, QOpenGLPixelTransferOptions const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_dQOpenGLPixelTransferOptions(QOpenGLPixelTransferOptions * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_swap(QOpenGLPixelTransferOptions * this_ptr, QOpenGLPixelTransferOptions * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setAlignment(QOpenGLPixelTransferOptions * this_ptr, int alignment) {
  this_ptr->setAlignment(alignment);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_alignment(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->alignment();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setSkipImages(QOpenGLPixelTransferOptions * this_ptr, int skipImages) {
  this_ptr->setSkipImages(skipImages);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_skipImages(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->skipImages();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setSkipRows(QOpenGLPixelTransferOptions * this_ptr, int skipRows) {
  this_ptr->setSkipRows(skipRows);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_skipRows(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->skipRows();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setSkipPixels(QOpenGLPixelTransferOptions * this_ptr, int skipPixels) {
  this_ptr->setSkipPixels(skipPixels);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_skipPixels(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->skipPixels();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setImageHeight(QOpenGLPixelTransferOptions * this_ptr, int imageHeight) {
  this_ptr->setImageHeight(imageHeight);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_imageHeight(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->imageHeight();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setRowLength(QOpenGLPixelTransferOptions * this_ptr, int rowLength) {
  this_ptr->setRowLength(rowLength);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_rowLength(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->rowLength();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setLeastSignificantByteFirst(QOpenGLPixelTransferOptions * this_ptr, bool lsbFirst) {
  this_ptr->setLeastSignificantByteFirst(lsbFirst);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_isLeastSignificantBitFirst(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->isLeastSignificantBitFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_setSwapBytesEnabled(QOpenGLPixelTransferOptions * this_ptr, bool swapBytes) {
  this_ptr->setSwapBytesEnabled(swapBytes);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLPixelTransferOptions_isSwapBytesEnabled(QOpenGLPixelTransferOptions const * this_ptr) {
  return this_ptr->isSwapBytesEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap29(QOpenGLPixelTransferOptions * value1, QOpenGLPixelTransferOptions * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLShader_metaObject(QOpenGLShader const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLShader_qt_metacast(QOpenGLShader * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShader_qt_metacall(QOpenGLShader * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShader_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLShader::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShader_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLShader::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QOpenGLShader_QOpenGLShader(int type, QObject * parent) {
  return new QOpenGLShader(QFlags< QOpenGLShader::ShaderTypeBit >(type), parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShader_dQOpenGLShader(QOpenGLShader * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShader_shaderType(QOpenGLShader const * this_ptr) {
  return int(this_ptr->shaderType());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_compileSourceCode(QOpenGLShader * this_ptr, char const * source) {
  return this_ptr->compileSourceCode(source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_compileSourceCode1(QOpenGLShader * this_ptr, QByteArray const * source) {
  return this_ptr->compileSourceCode(*source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_compileSourceCode2(QOpenGLShader * this_ptr, QString const * source) {
  return this_ptr->compileSourceCode(*source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_compileSourceFile(QOpenGLShader * this_ptr, QString const * fileName) {
  return this_ptr->compileSourceFile(*fileName);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QOpenGLShader_sourceCode(QOpenGLShader const * this_ptr) {
  return new QByteArray(this_ptr->sourceCode());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_isCompiled(QOpenGLShader const * this_ptr) {
  return this_ptr->isCompiled();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShader_log(QOpenGLShader const * this_ptr) {
  return new QString(this_ptr->log());
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLShader_shaderId(QOpenGLShader const * this_ptr) {
  return this_ptr->shaderId();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_hasOpenGLShaders(int type, QOpenGLContext * context) {
  return QOpenGLShader::hasOpenGLShaders(QFlags< QOpenGLShader::ShaderTypeBit >(type), context);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLShaderProgram_metaObject(QOpenGLShaderProgram const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLShaderProgram_qt_metacast(QOpenGLShaderProgram * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_qt_metacall(QOpenGLShaderProgram * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShaderProgram_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLShaderProgram::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShaderProgram_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLShaderProgram::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLShaderProgram * ctr_qt_gui_ffi_QOpenGLShaderProgram_QOpenGLShaderProgram(QObject * parent) {
  return new QOpenGLShaderProgram(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_dQOpenGLShaderProgram(QOpenGLShaderProgram * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addShader(QOpenGLShaderProgram * this_ptr, QOpenGLShader * shader) {
  return this_ptr->addShader(shader);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_removeShader(QOpenGLShaderProgram * this_ptr, QOpenGLShader * shader) {
  this_ptr->removeShader(shader);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QOpenGLShaderProgram_shaders(QOpenGLShaderProgram const * this_ptr) {
  return new QList< QOpenGLShader * >(this_ptr->shaders());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addShaderFromSourceCode(QOpenGLShaderProgram * this_ptr, int type, char const * source) {
  return this_ptr->addShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addShaderFromSourceCode1(QOpenGLShaderProgram * this_ptr, int type, QByteArray const * source) {
  return this_ptr->addShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), *source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addShaderFromSourceCode2(QOpenGLShaderProgram * this_ptr, int type, QString const * source) {
  return this_ptr->addShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), *source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addShaderFromSourceFile(QOpenGLShaderProgram * this_ptr, int type, QString const * fileName) {
  return this_ptr->addShaderFromSourceFile(QFlags< QOpenGLShader::ShaderTypeBit >(type), *fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addCacheableShaderFromSourceCode(QOpenGLShaderProgram * this_ptr, int type, char const * source) {
  return this_ptr->addCacheableShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addCacheableShaderFromSourceCode1(QOpenGLShaderProgram * this_ptr, int type, QByteArray const * source) {
  return this_ptr->addCacheableShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), *source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addCacheableShaderFromSourceCode2(QOpenGLShaderProgram * this_ptr, int type, QString const * source) {
  return this_ptr->addCacheableShaderFromSourceCode(QFlags< QOpenGLShader::ShaderTypeBit >(type), *source);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_addCacheableShaderFromSourceFile(QOpenGLShaderProgram * this_ptr, int type, QString const * fileName) {
  return this_ptr->addCacheableShaderFromSourceFile(QFlags< QOpenGLShader::ShaderTypeBit >(type), *fileName);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_removeAllShaders(QOpenGLShaderProgram * this_ptr) {
  this_ptr->removeAllShaders();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_link(QOpenGLShaderProgram * this_ptr) {
  return this_ptr->link();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_isLinked(QOpenGLShaderProgram const * this_ptr) {
  return this_ptr->isLinked();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLShaderProgram_log(QOpenGLShaderProgram const * this_ptr) {
  return new QString(this_ptr->log());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_bind(QOpenGLShaderProgram * this_ptr) {
  return this_ptr->bind();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_release(QOpenGLShaderProgram * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_create(QOpenGLShaderProgram * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLShaderProgram_programId(QOpenGLShaderProgram const * this_ptr) {
  return this_ptr->programId();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_maxGeometryOutputVertices(QOpenGLShaderProgram const * this_ptr) {
  return this_ptr->maxGeometryOutputVertices();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setPatchVertexCount(QOpenGLShaderProgram * this_ptr, int count) {
  this_ptr->setPatchVertexCount(count);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_patchVertexCount(QOpenGLShaderProgram const * this_ptr) {
  return this_ptr->patchVertexCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setDefaultOuterTessellationLevels(QOpenGLShaderProgram * this_ptr, QVector< float > const * levels) {
  this_ptr->setDefaultOuterTessellationLevels(*levels);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QOpenGLShaderProgram_defaultOuterTessellationLevels(QOpenGLShaderProgram const * this_ptr) {
  return new QVector< float >(this_ptr->defaultOuterTessellationLevels());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setDefaultInnerTessellationLevels(QOpenGLShaderProgram * this_ptr, QVector< float > const * levels) {
  this_ptr->setDefaultInnerTessellationLevels(*levels);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QOpenGLShaderProgram_defaultInnerTessellationLevels(QOpenGLShaderProgram const * this_ptr) {
  return new QVector< float >(this_ptr->defaultInnerTessellationLevels());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_bindAttributeLocation(QOpenGLShaderProgram * this_ptr, char const * name, int location) {
  this_ptr->bindAttributeLocation(name, location);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_bindAttributeLocation1(QOpenGLShaderProgram * this_ptr, QByteArray const * name, int location) {
  this_ptr->bindAttributeLocation(*name, location);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_bindAttributeLocation2(QOpenGLShaderProgram * this_ptr, QString const * name, int location) {
  this_ptr->bindAttributeLocation(*name, location);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_attributeLocation(QOpenGLShaderProgram const * this_ptr, char const * name) {
  return this_ptr->attributeLocation(name);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_attributeLocation1(QOpenGLShaderProgram const * this_ptr, QByteArray const * name) {
  return this_ptr->attributeLocation(*name);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_attributeLocation2(QOpenGLShaderProgram const * this_ptr, QString const * name) {
  return this_ptr->attributeLocation(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue(QOpenGLShaderProgram * this_ptr, int location, float value) {
  this_ptr->setAttributeValue(location, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue1(QOpenGLShaderProgram * this_ptr, int location, float x, float y) {
  this_ptr->setAttributeValue(location, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue2(QOpenGLShaderProgram * this_ptr, int location, float x, float y, float z) {
  this_ptr->setAttributeValue(location, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue3(QOpenGLShaderProgram * this_ptr, int location, float x, float y, float z, float w) {
  this_ptr->setAttributeValue(location, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue4(QOpenGLShaderProgram * this_ptr, int location, QVector2D const * value) {
  this_ptr->setAttributeValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue5(QOpenGLShaderProgram * this_ptr, int location, QVector3D const * value) {
  this_ptr->setAttributeValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue6(QOpenGLShaderProgram * this_ptr, int location, QVector4D const * value) {
  this_ptr->setAttributeValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue7(QOpenGLShaderProgram * this_ptr, int location, QColor const * value) {
  this_ptr->setAttributeValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue8(QOpenGLShaderProgram * this_ptr, int location, float const * values, int columns, int rows) {
  this_ptr->setAttributeValue(location, values, columns, rows);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue9(QOpenGLShaderProgram * this_ptr, char const * name, float value) {
  this_ptr->setAttributeValue(name, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue10(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y) {
  this_ptr->setAttributeValue(name, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue11(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y, float z) {
  this_ptr->setAttributeValue(name, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue12(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y, float z, float w) {
  this_ptr->setAttributeValue(name, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue13(QOpenGLShaderProgram * this_ptr, char const * name, QVector2D const * value) {
  this_ptr->setAttributeValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue14(QOpenGLShaderProgram * this_ptr, char const * name, QVector3D const * value) {
  this_ptr->setAttributeValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue15(QOpenGLShaderProgram * this_ptr, char const * name, QVector4D const * value) {
  this_ptr->setAttributeValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue16(QOpenGLShaderProgram * this_ptr, char const * name, QColor const * value) {
  this_ptr->setAttributeValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeValue17(QOpenGLShaderProgram * this_ptr, char const * name, float const * values, int columns, int rows) {
  this_ptr->setAttributeValue(name, values, columns, rows);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray(QOpenGLShaderProgram * this_ptr, int location, float const * values, int tupleSize, int stride) {
  this_ptr->setAttributeArray(location, values, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray1(QOpenGLShaderProgram * this_ptr, int location, QVector2D const * values, int stride) {
  this_ptr->setAttributeArray(location, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray2(QOpenGLShaderProgram * this_ptr, int location, QVector3D const * values, int stride) {
  this_ptr->setAttributeArray(location, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray3(QOpenGLShaderProgram * this_ptr, int location, QVector4D const * values, int stride) {
  this_ptr->setAttributeArray(location, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray4(QOpenGLShaderProgram * this_ptr, int location, unsigned int type, void const * values, int tupleSize, int stride) {
  this_ptr->setAttributeArray(location, type, values, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray5(QOpenGLShaderProgram * this_ptr, char const * name, float const * values, int tupleSize, int stride) {
  this_ptr->setAttributeArray(name, values, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray6(QOpenGLShaderProgram * this_ptr, char const * name, QVector2D const * values, int stride) {
  this_ptr->setAttributeArray(name, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray7(QOpenGLShaderProgram * this_ptr, char const * name, QVector3D const * values, int stride) {
  this_ptr->setAttributeArray(name, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray8(QOpenGLShaderProgram * this_ptr, char const * name, QVector4D const * values, int stride) {
  this_ptr->setAttributeArray(name, values, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray9(QOpenGLShaderProgram * this_ptr, char const * name, unsigned int type, void const * values, int tupleSize, int stride) {
  this_ptr->setAttributeArray(name, type, values, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeBuffer(QOpenGLShaderProgram * this_ptr, int location, unsigned int type, int offset, int tupleSize, int stride) {
  this_ptr->setAttributeBuffer(location, type, offset, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeBuffer1(QOpenGLShaderProgram * this_ptr, char const * name, unsigned int type, int offset, int tupleSize, int stride) {
  this_ptr->setAttributeBuffer(name, type, offset, tupleSize, stride);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_enableAttributeArray(QOpenGLShaderProgram * this_ptr, int location) {
  this_ptr->enableAttributeArray(location);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_enableAttributeArray1(QOpenGLShaderProgram * this_ptr, char const * name) {
  this_ptr->enableAttributeArray(name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_disableAttributeArray(QOpenGLShaderProgram * this_ptr, int location) {
  this_ptr->disableAttributeArray(location);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_disableAttributeArray1(QOpenGLShaderProgram * this_ptr, char const * name) {
  this_ptr->disableAttributeArray(name);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_uniformLocation(QOpenGLShaderProgram const * this_ptr, char const * name) {
  return this_ptr->uniformLocation(name);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_uniformLocation1(QOpenGLShaderProgram const * this_ptr, QByteArray const * name) {
  return this_ptr->uniformLocation(*name);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLShaderProgram_uniformLocation2(QOpenGLShaderProgram const * this_ptr, QString const * name) {
  return this_ptr->uniformLocation(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue(QOpenGLShaderProgram * this_ptr, int location, float value) {
  this_ptr->setUniformValue(location, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue1(QOpenGLShaderProgram * this_ptr, int location, GLint value) {
  this_ptr->setUniformValue(location, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue2(QOpenGLShaderProgram * this_ptr, int location, GLuint value) {
  this_ptr->setUniformValue(location, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue3(QOpenGLShaderProgram * this_ptr, int location, float x, float y) {
  this_ptr->setUniformValue(location, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue4(QOpenGLShaderProgram * this_ptr, int location, float x, float y, float z) {
  this_ptr->setUniformValue(location, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue5(QOpenGLShaderProgram * this_ptr, int location, float x, float y, float z, float w) {
  this_ptr->setUniformValue(location, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue6(QOpenGLShaderProgram * this_ptr, int location, QVector2D const * value) {
  this_ptr->setUniformValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue7(QOpenGLShaderProgram * this_ptr, int location, QVector3D const * value) {
  this_ptr->setUniformValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue8(QOpenGLShaderProgram * this_ptr, int location, QVector4D const * value) {
  this_ptr->setUniformValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue9(QOpenGLShaderProgram * this_ptr, int location, QColor const * color) {
  this_ptr->setUniformValue(location, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue10(QOpenGLShaderProgram * this_ptr, int location, QPoint const * point) {
  this_ptr->setUniformValue(location, *point);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue11(QOpenGLShaderProgram * this_ptr, int location, QPointF const * point) {
  this_ptr->setUniformValue(location, *point);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue12(QOpenGLShaderProgram * this_ptr, int location, QSize const * size) {
  this_ptr->setUniformValue(location, *size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue13(QOpenGLShaderProgram * this_ptr, int location, QSizeF const * size) {
  this_ptr->setUniformValue(location, *size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue14(QOpenGLShaderProgram * this_ptr, int location, QMatrix4x4 const * value) {
  this_ptr->setUniformValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue15(QOpenGLShaderProgram * this_ptr, int location, QTransform const * value) {
  this_ptr->setUniformValue(location, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue16(QOpenGLShaderProgram * this_ptr, char const * name, float value) {
  this_ptr->setUniformValue(name, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue17(QOpenGLShaderProgram * this_ptr, char const * name, GLint value) {
  this_ptr->setUniformValue(name, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue18(QOpenGLShaderProgram * this_ptr, char const * name, GLuint value) {
  this_ptr->setUniformValue(name, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue19(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y) {
  this_ptr->setUniformValue(name, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue20(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y, float z) {
  this_ptr->setUniformValue(name, x, y, z);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue21(QOpenGLShaderProgram * this_ptr, char const * name, float x, float y, float z, float w) {
  this_ptr->setUniformValue(name, x, y, z, w);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue22(QOpenGLShaderProgram * this_ptr, char const * name, QVector2D const * value) {
  this_ptr->setUniformValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue23(QOpenGLShaderProgram * this_ptr, char const * name, QVector3D const * value) {
  this_ptr->setUniformValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue24(QOpenGLShaderProgram * this_ptr, char const * name, QVector4D const * value) {
  this_ptr->setUniformValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue25(QOpenGLShaderProgram * this_ptr, char const * name, QColor const * color) {
  this_ptr->setUniformValue(name, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue26(QOpenGLShaderProgram * this_ptr, char const * name, QPoint const * point) {
  this_ptr->setUniformValue(name, *point);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue27(QOpenGLShaderProgram * this_ptr, char const * name, QPointF const * point) {
  this_ptr->setUniformValue(name, *point);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue28(QOpenGLShaderProgram * this_ptr, char const * name, QSize const * size) {
  this_ptr->setUniformValue(name, *size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue29(QOpenGLShaderProgram * this_ptr, char const * name, QSizeF const * size) {
  this_ptr->setUniformValue(name, *size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue30(QOpenGLShaderProgram * this_ptr, char const * name, QMatrix4x4 const * value) {
  this_ptr->setUniformValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValue31(QOpenGLShaderProgram * this_ptr, char const * name, QTransform const * value) {
  this_ptr->setUniformValue(name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray(QOpenGLShaderProgram * this_ptr, int location, float const * values, int count, int tupleSize) {
  this_ptr->setUniformValueArray(location, values, count, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray1(QOpenGLShaderProgram * this_ptr, int location, GLint const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray2(QOpenGLShaderProgram * this_ptr, int location, GLuint const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray3(QOpenGLShaderProgram * this_ptr, int location, QVector2D const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray4(QOpenGLShaderProgram * this_ptr, int location, QVector3D const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray5(QOpenGLShaderProgram * this_ptr, int location, QVector4D const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray6(QOpenGLShaderProgram * this_ptr, int location, QMatrix4x4 const * values, int count) {
  this_ptr->setUniformValueArray(location, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray7(QOpenGLShaderProgram * this_ptr, char const * name, float const * values, int count, int tupleSize) {
  this_ptr->setUniformValueArray(name, values, count, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray8(QOpenGLShaderProgram * this_ptr, char const * name, GLint const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray9(QOpenGLShaderProgram * this_ptr, char const * name, GLuint const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray10(QOpenGLShaderProgram * this_ptr, char const * name, QVector2D const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray11(QOpenGLShaderProgram * this_ptr, char const * name, QVector3D const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray12(QOpenGLShaderProgram * this_ptr, char const * name, QVector4D const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setUniformValueArray13(QOpenGLShaderProgram * this_ptr, char const * name, QMatrix4x4 const * values, int count) {
  this_ptr->setUniformValueArray(name, values, count);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_hasOpenGLShaderPrograms(QOpenGLContext * context) {
  return QOpenGLShaderProgram::hasOpenGLShaderPrograms(context);
}


RITUAL_EXPORT QOpenGLTexture * ctr_qt_gui_ffi_QOpenGLTexture_QOpenGLTexture(QOpenGLTexture::Target target) {
  return new QOpenGLTexture(target);
}


RITUAL_EXPORT QOpenGLTexture * ctr_qt_gui_ffi_QOpenGLTexture_QOpenGLTexture1(QImage const * image, QOpenGLTexture::MipMapGeneration genMipMaps) {
  return new QOpenGLTexture(*image, genMipMaps);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_dQOpenGLTexture(QOpenGLTexture * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOpenGLTexture::Target ctr_qt_gui_ffi_QOpenGLTexture_target(QOpenGLTexture const * this_ptr) {
  return this_ptr->target();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_create(QOpenGLTexture * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_destroy(QOpenGLTexture * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isCreated(QOpenGLTexture const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLTexture_textureId(QOpenGLTexture const * this_ptr) {
  return this_ptr->textureId();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_bind(QOpenGLTexture * this_ptr) {
  this_ptr->bind();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_bind1(QOpenGLTexture * this_ptr, unsigned int unit, QOpenGLTexture::TextureUnitReset reset) {
  this_ptr->bind(unit, reset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_release(QOpenGLTexture * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_release1(QOpenGLTexture * this_ptr, unsigned int unit, QOpenGLTexture::TextureUnitReset reset) {
  this_ptr->release(unit, reset);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isBound(QOpenGLTexture const * this_ptr) {
  return this_ptr->isBound();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isBound1(QOpenGLTexture * this_ptr, unsigned int unit) {
  return this_ptr->isBound(unit);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLTexture_boundTextureId(QOpenGLTexture::BindingTarget target) {
  return QOpenGLTexture::boundTextureId(target);
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLTexture_boundTextureId1(unsigned int unit, QOpenGLTexture::BindingTarget target) {
  return QOpenGLTexture::boundTextureId(unit, target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setFormat(QOpenGLTexture * this_ptr, QOpenGLTexture::TextureFormat format) {
  this_ptr->setFormat(format);
}


RITUAL_EXPORT QOpenGLTexture::TextureFormat ctr_qt_gui_ffi_QOpenGLTexture_format(QOpenGLTexture const * this_ptr) {
  return this_ptr->format();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSize(QOpenGLTexture * this_ptr, int width, int height, int depth) {
  this_ptr->setSize(width, height, depth);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_width(QOpenGLTexture const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_height(QOpenGLTexture const * this_ptr) {
  return this_ptr->height();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_depth(QOpenGLTexture const * this_ptr) {
  return this_ptr->depth();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMipLevels(QOpenGLTexture * this_ptr, int levels) {
  this_ptr->setMipLevels(levels);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_mipLevels(QOpenGLTexture const * this_ptr) {
  return this_ptr->mipLevels();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_maximumMipLevels(QOpenGLTexture const * this_ptr) {
  return this_ptr->maximumMipLevels();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setLayers(QOpenGLTexture * this_ptr, int layers) {
  this_ptr->setLayers(layers);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_layers(QOpenGLTexture const * this_ptr) {
  return this_ptr->layers();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_faces(QOpenGLTexture const * this_ptr) {
  return this_ptr->faces();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSamples(QOpenGLTexture * this_ptr, int samples) {
  this_ptr->setSamples(samples);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_samples(QOpenGLTexture const * this_ptr) {
  return this_ptr->samples();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setFixedSamplePositions(QOpenGLTexture * this_ptr, bool fixed) {
  this_ptr->setFixedSamplePositions(fixed);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isFixedSamplePositions(QOpenGLTexture const * this_ptr) {
  return this_ptr->isFixedSamplePositions();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_allocateStorage(QOpenGLTexture * this_ptr) {
  this_ptr->allocateStorage();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_allocateStorage1(QOpenGLTexture * this_ptr, QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType) {
  this_ptr->allocateStorage(pixelFormat, pixelType);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isStorageAllocated(QOpenGLTexture const * this_ptr) {
  return this_ptr->isStorageAllocated();
}


RITUAL_EXPORT QOpenGLTexture * ctr_qt_gui_ffi_QOpenGLTexture_createTextureView(QOpenGLTexture const * this_ptr, QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer) {
  return this_ptr->createTextureView(target, viewFormat, minimumMipmapLevel, maximumMipmapLevel, minimumLayer, maximumLayer);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isTextureView(QOpenGLTexture const * this_ptr) {
  return this_ptr->isTextureView();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, layer, cubeFace, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData1(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, layer, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData2(QOpenGLTexture * this_ptr, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData3(QOpenGLTexture * this_ptr, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData4(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, layer, cubeFace, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData5(QOpenGLTexture * this_ptr, int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, layer, layerCount, cubeFace, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData6(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, layer, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData7(QOpenGLTexture * this_ptr, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(mipLevel, sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData8(QOpenGLTexture * this_ptr, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(sourceFormat, sourceType, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, layer, cubeFace, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData1(QOpenGLTexture * this_ptr, int mipLevel, int layer, int dataSize, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, layer, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData2(QOpenGLTexture * this_ptr, int mipLevel, int dataSize, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData3(QOpenGLTexture * this_ptr, int dataSize, void * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData4(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, layer, cubeFace, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData5(QOpenGLTexture * this_ptr, int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, layer, layerCount, cubeFace, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData6(QOpenGLTexture * this_ptr, int mipLevel, int layer, int dataSize, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, layer, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData7(QOpenGLTexture * this_ptr, int mipLevel, int dataSize, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(mipLevel, dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData8(QOpenGLTexture * this_ptr, int dataSize, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setCompressedData(dataSize, data, options);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData9(QOpenGLTexture * this_ptr, QImage const * image, QOpenGLTexture::MipMapGeneration genMipMaps) {
  this_ptr->setData(*image, genMipMaps);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_hasFeature(QOpenGLTexture::Feature feature) {
  return QOpenGLTexture::hasFeature(feature);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMipBaseLevel(QOpenGLTexture * this_ptr, int baseLevel) {
  this_ptr->setMipBaseLevel(baseLevel);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_mipBaseLevel(QOpenGLTexture const * this_ptr) {
  return this_ptr->mipBaseLevel();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMipMaxLevel(QOpenGLTexture * this_ptr, int maxLevel) {
  this_ptr->setMipMaxLevel(maxLevel);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTexture_mipMaxLevel(QOpenGLTexture const * this_ptr) {
  return this_ptr->mipMaxLevel();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMipLevelRange(QOpenGLTexture * this_ptr, int baseLevel, int maxLevel) {
  this_ptr->setMipLevelRange(baseLevel, maxLevel);
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QOpenGLTexture_mipLevelRange(QOpenGLTexture const * this_ptr) {
  return new QPair< int, int >(this_ptr->mipLevelRange());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setAutoMipMapGenerationEnabled(QOpenGLTexture * this_ptr, bool enabled) {
  this_ptr->setAutoMipMapGenerationEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTexture_isAutoMipMapGenerationEnabled(QOpenGLTexture const * this_ptr) {
  return this_ptr->isAutoMipMapGenerationEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_generateMipMaps(QOpenGLTexture * this_ptr) {
  this_ptr->generateMipMaps();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_generateMipMaps1(QOpenGLTexture * this_ptr, int baseLevel, bool resetBaseLevel) {
  this_ptr->generateMipMaps(baseLevel, resetBaseLevel);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSwizzleMask(QOpenGLTexture * this_ptr, QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value) {
  this_ptr->setSwizzleMask(component, value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSwizzleMask1(QOpenGLTexture * this_ptr, QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a) {
  this_ptr->setSwizzleMask(r, g, b, a);
}


RITUAL_EXPORT QOpenGLTexture::SwizzleValue ctr_qt_gui_ffi_QOpenGLTexture_swizzleMask(QOpenGLTexture const * this_ptr, QOpenGLTexture::SwizzleComponent component) {
  return this_ptr->swizzleMask(component);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setDepthStencilMode(QOpenGLTexture * this_ptr, QOpenGLTexture::DepthStencilMode mode) {
  this_ptr->setDepthStencilMode(mode);
}


RITUAL_EXPORT QOpenGLTexture::DepthStencilMode ctr_qt_gui_ffi_QOpenGLTexture_depthStencilMode(QOpenGLTexture const * this_ptr) {
  return this_ptr->depthStencilMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setComparisonFunction(QOpenGLTexture * this_ptr, QOpenGLTexture::ComparisonFunction function) {
  this_ptr->setComparisonFunction(function);
}


RITUAL_EXPORT QOpenGLTexture::ComparisonFunction ctr_qt_gui_ffi_QOpenGLTexture_comparisonFunction(QOpenGLTexture const * this_ptr) {
  return this_ptr->comparisonFunction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setComparisonMode(QOpenGLTexture * this_ptr, QOpenGLTexture::ComparisonMode mode) {
  this_ptr->setComparisonMode(mode);
}


RITUAL_EXPORT QOpenGLTexture::ComparisonMode ctr_qt_gui_ffi_QOpenGLTexture_comparisonMode(QOpenGLTexture const * this_ptr) {
  return this_ptr->comparisonMode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMinificationFilter(QOpenGLTexture * this_ptr, QOpenGLTexture::Filter filter) {
  this_ptr->setMinificationFilter(filter);
}


RITUAL_EXPORT QOpenGLTexture::Filter ctr_qt_gui_ffi_QOpenGLTexture_minificationFilter(QOpenGLTexture const * this_ptr) {
  return this_ptr->minificationFilter();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMagnificationFilter(QOpenGLTexture * this_ptr, QOpenGLTexture::Filter filter) {
  this_ptr->setMagnificationFilter(filter);
}


RITUAL_EXPORT QOpenGLTexture::Filter ctr_qt_gui_ffi_QOpenGLTexture_magnificationFilter(QOpenGLTexture const * this_ptr) {
  return this_ptr->magnificationFilter();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMinMagFilters(QOpenGLTexture * this_ptr, QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter) {
  this_ptr->setMinMagFilters(minificationFilter, magnificationFilter);
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_QOpenGLTexture_minMagFilters(QOpenGLTexture const * this_ptr) {
  return new QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter >(this_ptr->minMagFilters());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMaximumAnisotropy(QOpenGLTexture * this_ptr, float anisotropy) {
  this_ptr->setMaximumAnisotropy(anisotropy);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QOpenGLTexture_maximumAnisotropy(QOpenGLTexture const * this_ptr) {
  return this_ptr->maximumAnisotropy();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setWrapMode(QOpenGLTexture * this_ptr, QOpenGLTexture::WrapMode mode) {
  this_ptr->setWrapMode(mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setWrapMode1(QOpenGLTexture * this_ptr, QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode) {
  this_ptr->setWrapMode(direction, mode);
}


RITUAL_EXPORT QOpenGLTexture::WrapMode ctr_qt_gui_ffi_QOpenGLTexture_wrapMode(QOpenGLTexture const * this_ptr, QOpenGLTexture::CoordinateDirection direction) {
  return this_ptr->wrapMode(direction);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setBorderColor(QOpenGLTexture * this_ptr, QColor const * color) {
  this_ptr->setBorderColor(*color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setBorderColor1(QOpenGLTexture * this_ptr, float r, float g, float b, float a) {
  this_ptr->setBorderColor(r, g, b, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setBorderColor2(QOpenGLTexture * this_ptr, int r, int g, int b, int a) {
  this_ptr->setBorderColor(r, g, b, a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setBorderColor3(QOpenGLTexture * this_ptr, unsigned int r, unsigned int g, unsigned int b, unsigned int a) {
  this_ptr->setBorderColor(r, g, b, a);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QOpenGLTexture_borderColor(QOpenGLTexture const * this_ptr) {
  return new QColor(this_ptr->borderColor());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_borderColor1(QOpenGLTexture const * this_ptr, float * border) {
  this_ptr->borderColor(border);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_borderColor2(QOpenGLTexture const * this_ptr, int * border) {
  this_ptr->borderColor(border);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_borderColor3(QOpenGLTexture const * this_ptr, unsigned int * border) {
  this_ptr->borderColor(border);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMinimumLevelOfDetail(QOpenGLTexture * this_ptr, float value) {
  this_ptr->setMinimumLevelOfDetail(value);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QOpenGLTexture_minimumLevelOfDetail(QOpenGLTexture const * this_ptr) {
  return this_ptr->minimumLevelOfDetail();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setMaximumLevelOfDetail(QOpenGLTexture * this_ptr, float value) {
  this_ptr->setMaximumLevelOfDetail(value);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QOpenGLTexture_maximumLevelOfDetail(QOpenGLTexture const * this_ptr) {
  return this_ptr->maximumLevelOfDetail();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setLevelOfDetailRange(QOpenGLTexture * this_ptr, float min, float max) {
  this_ptr->setLevelOfDetailRange(min, max);
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_QOpenGLTexture_levelOfDetailRange(QOpenGLTexture const * this_ptr) {
  return new QPair< float, float >(this_ptr->levelOfDetailRange());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setLevelofDetailBias(QOpenGLTexture * this_ptr, float bias) {
  this_ptr->setLevelofDetailBias(bias);
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QOpenGLTexture_levelofDetailBias(QOpenGLTexture const * this_ptr) {
  return this_ptr->levelofDetailBias();
}


RITUAL_EXPORT QOpenGLTextureBlitter * ctr_qt_gui_ffi_QOpenGLTextureBlitter_QOpenGLTextureBlitter() {
  return new QOpenGLTextureBlitter();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_dQOpenGLTextureBlitter(QOpenGLTextureBlitter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTextureBlitter_create(QOpenGLTextureBlitter * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTextureBlitter_isCreated(QOpenGLTextureBlitter const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_destroy(QOpenGLTextureBlitter * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTextureBlitter_supportsExternalOESTarget(QOpenGLTextureBlitter const * this_ptr) {
  return this_ptr->supportsExternalOESTarget();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_bind(QOpenGLTextureBlitter * this_ptr, unsigned int target) {
  this_ptr->bind(target);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_release(QOpenGLTextureBlitter * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_setRedBlueSwizzle(QOpenGLTextureBlitter * this_ptr, bool swizzle) {
  this_ptr->setRedBlueSwizzle(swizzle);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_setOpacity(QOpenGLTextureBlitter * this_ptr, float opacity) {
  this_ptr->setOpacity(opacity);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_blit(QOpenGLTextureBlitter * this_ptr, GLuint texture, QMatrix4x4 const * targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin) {
  this_ptr->blit(texture, *targetTransform, sourceOrigin);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QOpenGLTextureBlitter_targetTransform(QRectF const * target, QRect const * viewport) {
  return new QMatrix4x4(QOpenGLTextureBlitter::targetTransform(*target, *viewport));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLTimerQuery_metaObject(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLTimerQuery_qt_metacast(QOpenGLTimerQuery * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTimerQuery_qt_metacall(QOpenGLTimerQuery * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLTimerQuery_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLTimerQuery::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLTimerQuery_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLTimerQuery::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLTimerQuery * ctr_qt_gui_ffi_QOpenGLTimerQuery_QOpenGLTimerQuery(QObject * parent) {
  return new QOpenGLTimerQuery(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimerQuery_dQOpenGLTimerQuery(QOpenGLTimerQuery * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimerQuery_create(QOpenGLTimerQuery * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimerQuery_destroy(QOpenGLTimerQuery * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimerQuery_isCreated(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLTimerQuery_objectId(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->objectId();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimerQuery_begin(QOpenGLTimerQuery * this_ptr) {
  this_ptr->begin();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimerQuery_end(QOpenGLTimerQuery * this_ptr) {
  this_ptr->end();
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QOpenGLTimerQuery_waitForTimestamp(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->waitForTimestamp();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimerQuery_recordTimestamp(QOpenGLTimerQuery * this_ptr) {
  this_ptr->recordTimestamp();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimerQuery_isResultAvailable(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->isResultAvailable();
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QOpenGLTimerQuery_waitForResult(QOpenGLTimerQuery const * this_ptr) {
  return this_ptr->waitForResult();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLTimeMonitor_metaObject(QOpenGLTimeMonitor const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLTimeMonitor_qt_metacast(QOpenGLTimeMonitor * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTimeMonitor_qt_metacall(QOpenGLTimeMonitor * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLTimeMonitor_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLTimeMonitor::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLTimeMonitor_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLTimeMonitor::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLTimeMonitor * ctr_qt_gui_ffi_QOpenGLTimeMonitor_QOpenGLTimeMonitor(QObject * parent) {
  return new QOpenGLTimeMonitor(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimeMonitor_dQOpenGLTimeMonitor(QOpenGLTimeMonitor * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimeMonitor_setSampleCount(QOpenGLTimeMonitor * this_ptr, int sampleCount) {
  this_ptr->setSampleCount(sampleCount);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTimeMonitor_sampleCount(QOpenGLTimeMonitor const * this_ptr) {
  return this_ptr->sampleCount();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimeMonitor_create(QOpenGLTimeMonitor * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimeMonitor_destroy(QOpenGLTimeMonitor * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimeMonitor_isCreated(QOpenGLTimeMonitor const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT QVector< GLuint > * ctr_qt_gui_ffi_QOpenGLTimeMonitor_objectIds(QOpenGLTimeMonitor const * this_ptr) {
  return new QVector< GLuint >(this_ptr->objectIds());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLTimeMonitor_recordSample(QOpenGLTimeMonitor * this_ptr) {
  return this_ptr->recordSample();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLTimeMonitor_isResultAvailable(QOpenGLTimeMonitor const * this_ptr) {
  return this_ptr->isResultAvailable();
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QOpenGLTimeMonitor_waitForSamples(QOpenGLTimeMonitor const * this_ptr) {
  return new QVector< GLuint64 >(this_ptr->waitForSamples());
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QOpenGLTimeMonitor_waitForIntervals(QOpenGLTimeMonitor const * this_ptr) {
  return new QVector< GLuint64 >(this_ptr->waitForIntervals());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTimeMonitor_reset(QOpenGLTimeMonitor * this_ptr) {
  this_ptr->reset();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_metaObject(QOpenGLVertexArrayObject const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_qt_metacast(QOpenGLVertexArrayObject * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLVertexArrayObject_qt_metacall(QOpenGLVertexArrayObject * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLVertexArrayObject::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLVertexArrayObject::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLVertexArrayObject * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_QOpenGLVertexArrayObject(QObject * parent) {
  return new QOpenGLVertexArrayObject(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_dQOpenGLVertexArrayObject(QOpenGLVertexArrayObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLVertexArrayObject_create(QOpenGLVertexArrayObject * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_destroy(QOpenGLVertexArrayObject * this_ptr) {
  this_ptr->destroy();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLVertexArrayObject_isCreated(QOpenGLVertexArrayObject const * this_ptr) {
  return this_ptr->isCreated();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLVertexArrayObject_objectId(QOpenGLVertexArrayObject const * this_ptr) {
  return this_ptr->objectId();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_bind(QOpenGLVertexArrayObject * this_ptr) {
  this_ptr->bind();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_release(QOpenGLVertexArrayObject * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT QOpenGLVertexArrayObject::Binder * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_Binder_Binder(QOpenGLVertexArrayObject * v) {
  return new QOpenGLVertexArrayObject::Binder(v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_Binder_dBinder(QOpenGLVertexArrayObject::Binder * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_Binder_release(QOpenGLVertexArrayObject::Binder * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLVertexArrayObject_Binder_rebind(QOpenGLVertexArrayObject::Binder * this_ptr) {
  this_ptr->rebind();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPaintDeviceWindow_metaObject(QPaintDeviceWindow const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QPaintDeviceWindow_qt_metacast(QPaintDeviceWindow * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintDeviceWindow_qt_metacall(QPaintDeviceWindow * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPaintDeviceWindow_tr(char const * s, char const * c, int n) {
  return new QString(QPaintDeviceWindow::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPaintDeviceWindow_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPaintDeviceWindow::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintDeviceWindow_update(QPaintDeviceWindow * this_ptr, QRect const * rect) {
  this_ptr->update(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintDeviceWindow_update1(QPaintDeviceWindow * this_ptr, QRegion const * region) {
  this_ptr->update(*region);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintDeviceWindow_update2(QPaintDeviceWindow * this_ptr) {
  this_ptr->update();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QOpenGLWindow_metaObject(QOpenGLWindow const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QOpenGLWindow_qt_metacast(QOpenGLWindow * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QOpenGLWindow_qt_metacall(QOpenGLWindow * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLWindow_tr(char const * s, char const * c, int n) {
  return new QString(QOpenGLWindow::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QOpenGLWindow_trUtf8(char const * s, char const * c, int n) {
  return new QString(QOpenGLWindow::trUtf8(s, c, n));
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow(QOpenGLWindow::UpdateBehavior updateBehavior, QWindow * parent) {
  return new QOpenGLWindow(updateBehavior, parent);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow1(QOpenGLContext * shareContext, QOpenGLWindow::UpdateBehavior updateBehavior, QWindow * parent) {
  return new QOpenGLWindow(shareContext, updateBehavior, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLWindow_dQOpenGLWindow(QOpenGLWindow * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOpenGLWindow::UpdateBehavior ctr_qt_gui_ffi_QOpenGLWindow_updateBehavior(QOpenGLWindow const * this_ptr) {
  return this_ptr->updateBehavior();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLWindow_isValid(QOpenGLWindow const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLWindow_makeCurrent(QOpenGLWindow * this_ptr) {
  this_ptr->makeCurrent();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLWindow_doneCurrent(QOpenGLWindow * this_ptr) {
  this_ptr->doneCurrent();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLWindow_context(QOpenGLWindow const * this_ptr) {
  return this_ptr->context();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLWindow_shareContext(QOpenGLWindow const * this_ptr) {
  return this_ptr->shareContext();
}


RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLWindow_defaultFramebufferObject(QOpenGLWindow const * this_ptr) {
  return this_ptr->defaultFramebufferObject();
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QOpenGLWindow_grabFramebuffer(QOpenGLWindow * this_ptr) {
  return new QImage(this_ptr->grabFramebuffer());
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize() {
  return new QPageSize();
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize1(QPageSize::PageSizeId pageSizeId) {
  return new QPageSize(pageSizeId);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize2(QSize const * pointSize, QString const * name, QPageSize::SizeMatchPolicy matchPolicy) {
  return new QPageSize(*pointSize, *name, matchPolicy);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize3(QSizeF const * size, QPageSize::Unit units, QString const * name, QPageSize::SizeMatchPolicy matchPolicy) {
  return new QPageSize(*size, units, *name, matchPolicy);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize4(QPageSize const * other) {
  return new QPageSize(*other);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_operator_1(QPageSize * this_ptr, QPageSize const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageSize_dQPageSize(QPageSize * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageSize_swap(QPageSize * this_ptr, QPageSize * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageSize_isEquivalentTo(QPageSize const * this_ptr, QPageSize const * other) {
  return this_ptr->isEquivalentTo(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageSize_isValid(QPageSize const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPageSize_key(QPageSize const * this_ptr) {
  return new QString(this_ptr->key());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPageSize_name(QPageSize const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id(QPageSize const * this_ptr) {
  return this_ptr->id();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPageSize_windowsId(QPageSize const * this_ptr) {
  return this_ptr->windowsId();
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QPageSize_definitionSize(QPageSize const * this_ptr) {
  return new QSizeF(this_ptr->definitionSize());
}


RITUAL_EXPORT QPageSize::Unit ctr_qt_gui_ffi_QPageSize_definitionUnits(QPageSize const * this_ptr) {
  return this_ptr->definitionUnits();
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QPageSize_size(QPageSize const * this_ptr, QPageSize::Unit units) {
  return new QSizeF(this_ptr->size(units));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QPageSize_sizePoints(QPageSize const * this_ptr) {
  return new QSize(this_ptr->sizePoints());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QPageSize_sizePixels(QPageSize const * this_ptr, int resolution) {
  return new QSize(this_ptr->sizePixels(resolution));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPageSize_rect(QPageSize const * this_ptr, QPageSize::Unit units) {
  return new QRectF(this_ptr->rect(units));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageSize_rectPoints(QPageSize const * this_ptr) {
  return new QRect(this_ptr->rectPoints());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageSize_rectPixels(QPageSize const * this_ptr, int resolution) {
  return new QRect(this_ptr->rectPixels(resolution));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPageSize_key1(QPageSize::PageSizeId pageSizeId) {
  return new QString(QPageSize::key(pageSizeId));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPageSize_name1(QPageSize::PageSizeId pageSizeId) {
  return new QString(QPageSize::name(pageSizeId));
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id1(QSize const * pointSize, QPageSize::SizeMatchPolicy matchPolicy) {
  return QPageSize::id(*pointSize, matchPolicy);
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id2(QSizeF const * size, QPageSize::Unit units, QPageSize::SizeMatchPolicy matchPolicy) {
  return QPageSize::id(*size, units, matchPolicy);
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id3(int windowsId) {
  return QPageSize::id(windowsId);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPageSize_windowsId1(QPageSize::PageSizeId pageSizeId) {
  return QPageSize::windowsId(pageSizeId);
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QPageSize_definitionSize1(QPageSize::PageSizeId pageSizeId) {
  return new QSizeF(QPageSize::definitionSize(pageSizeId));
}


RITUAL_EXPORT QPageSize::Unit ctr_qt_gui_ffi_QPageSize_definitionUnits1(QPageSize::PageSizeId pageSizeId) {
  return QPageSize::definitionUnits(pageSizeId);
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QPageSize_size1(QPageSize::PageSizeId pageSizeId, QPageSize::Unit units) {
  return new QSizeF(QPageSize::size(pageSizeId, units));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QPageSize_sizePoints1(QPageSize::PageSizeId pageSizeId) {
  return new QSize(QPageSize::sizePoints(pageSizeId));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QPageSize_sizePixels1(QPageSize::PageSizeId pageSizeId, int resolution) {
  return new QSize(QPageSize::sizePixels(pageSizeId, resolution));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap30(QPageSize * value1, QPageSize * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__97(QPageSize const * lhs, QPageSize const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__99(QDebug const * dbg, QPageSize const * pageSize) {
  return new QDebug(operator<<(*dbg, *pageSize));
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_QPageLayout() {
  return new QPageLayout();
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_QPageLayout1(QPageSize const * pageSize, QPageLayout::Orientation orientation, QMarginsF const * margins, QPageLayout::Unit units, QMarginsF const * minMargins) {
  return new QPageLayout(*pageSize, orientation, *margins, units, *minMargins);
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_QPageLayout2(QPageLayout const * other) {
  return new QPageLayout(*other);
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_operator_1(QPageLayout * this_ptr, QPageLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_dQPageLayout(QPageLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_swap(QPageLayout * this_ptr, QPageLayout * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_isEquivalentTo(QPageLayout const * this_ptr, QPageLayout const * other) {
  return this_ptr->isEquivalentTo(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_isValid(QPageLayout const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setMode(QPageLayout * this_ptr, QPageLayout::Mode mode) {
  this_ptr->setMode(mode);
}


RITUAL_EXPORT QPageLayout::Mode ctr_qt_gui_ffi_QPageLayout_mode(QPageLayout const * this_ptr) {
  return this_ptr->mode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setPageSize(QPageLayout * this_ptr, QPageSize const * pageSize, QMarginsF const * minMargins) {
  this_ptr->setPageSize(*pageSize, *minMargins);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageLayout_pageSize(QPageLayout const * this_ptr) {
  return new QPageSize(this_ptr->pageSize());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setOrientation(QPageLayout * this_ptr, QPageLayout::Orientation orientation) {
  this_ptr->setOrientation(orientation);
}


RITUAL_EXPORT QPageLayout::Orientation ctr_qt_gui_ffi_QPageLayout_orientation(QPageLayout const * this_ptr) {
  return this_ptr->orientation();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setUnits(QPageLayout * this_ptr, QPageLayout::Unit units) {
  this_ptr->setUnits(units);
}


RITUAL_EXPORT QPageLayout::Unit ctr_qt_gui_ffi_QPageLayout_units(QPageLayout const * this_ptr) {
  return this_ptr->units();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_setMargins(QPageLayout * this_ptr, QMarginsF const * margins) {
  return this_ptr->setMargins(*margins);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_setLeftMargin(QPageLayout * this_ptr, double leftMargin) {
  return this_ptr->setLeftMargin(leftMargin);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_setRightMargin(QPageLayout * this_ptr, double rightMargin) {
  return this_ptr->setRightMargin(rightMargin);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_setTopMargin(QPageLayout * this_ptr, double topMargin) {
  return this_ptr->setTopMargin(topMargin);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPageLayout_setBottomMargin(QPageLayout * this_ptr, double bottomMargin) {
  return this_ptr->setBottomMargin(bottomMargin);
}


RITUAL_EXPORT QMarginsF * ctr_qt_gui_ffi_QPageLayout_margins(QPageLayout const * this_ptr) {
  return new QMarginsF(this_ptr->margins());
}


RITUAL_EXPORT QMarginsF * ctr_qt_gui_ffi_QPageLayout_margins1(QPageLayout const * this_ptr, QPageLayout::Unit units) {
  return new QMarginsF(this_ptr->margins(units));
}


RITUAL_EXPORT QMargins * ctr_qt_gui_ffi_QPageLayout_marginsPoints(QPageLayout const * this_ptr) {
  return new QMargins(this_ptr->marginsPoints());
}


RITUAL_EXPORT QMargins * ctr_qt_gui_ffi_QPageLayout_marginsPixels(QPageLayout const * this_ptr, int resolution) {
  return new QMargins(this_ptr->marginsPixels(resolution));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setMinimumMargins(QPageLayout * this_ptr, QMarginsF const * minMargins) {
  this_ptr->setMinimumMargins(*minMargins);
}


RITUAL_EXPORT QMarginsF * ctr_qt_gui_ffi_QPageLayout_minimumMargins(QPageLayout const * this_ptr) {
  return new QMarginsF(this_ptr->minimumMargins());
}


RITUAL_EXPORT QMarginsF * ctr_qt_gui_ffi_QPageLayout_maximumMargins(QPageLayout const * this_ptr) {
  return new QMarginsF(this_ptr->maximumMargins());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPageLayout_fullRect(QPageLayout const * this_ptr) {
  return new QRectF(this_ptr->fullRect());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPageLayout_fullRect1(QPageLayout const * this_ptr, QPageLayout::Unit units) {
  return new QRectF(this_ptr->fullRect(units));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageLayout_fullRectPoints(QPageLayout const * this_ptr) {
  return new QRect(this_ptr->fullRectPoints());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageLayout_fullRectPixels(QPageLayout const * this_ptr, int resolution) {
  return new QRect(this_ptr->fullRectPixels(resolution));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPageLayout_paintRect(QPageLayout const * this_ptr) {
  return new QRectF(this_ptr->paintRect());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPageLayout_paintRect1(QPageLayout const * this_ptr, QPageLayout::Unit units) {
  return new QRectF(this_ptr->paintRect(units));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageLayout_paintRectPoints(QPageLayout const * this_ptr) {
  return new QRect(this_ptr->paintRectPoints());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPageLayout_paintRectPixels(QPageLayout const * this_ptr, int resolution) {
  return new QRect(this_ptr->paintRectPixels(resolution));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap31(QPageLayout * value1, QPageLayout * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__100(QPageLayout const * lhs, QPageLayout const * rhs) {
  return operator==(*lhs, *rhs);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__102(QDebug const * dbg, QPageLayout const * pageLayout) {
  return new QDebug(operator<<(*dbg, *pageLayout));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPagedPaintDevice_dQPagedPaintDevice(QPagedPaintDevice * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_newPage(QPagedPaintDevice * this_ptr) {
  return this_ptr->newPage();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_setPageLayout(QPagedPaintDevice * this_ptr, QPageLayout const * pageLayout) {
  return this_ptr->setPageLayout(*pageLayout);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_setPageSize(QPagedPaintDevice * this_ptr, QPageSize const * pageSize) {
  return this_ptr->setPageSize(*pageSize);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_setPageOrientation(QPagedPaintDevice * this_ptr, QPageLayout::Orientation orientation) {
  return this_ptr->setPageOrientation(orientation);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_setPageMargins(QPagedPaintDevice * this_ptr, QMarginsF const * margins) {
  return this_ptr->setPageMargins(*margins);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPagedPaintDevice_setPageMargins1(QPagedPaintDevice * this_ptr, QMarginsF const * margins, QPageLayout::Unit units) {
  return this_ptr->setPageMargins(*margins, units);
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPagedPaintDevice_pageLayout(QPagedPaintDevice const * this_ptr) {
  return new QPageLayout(this_ptr->pageLayout());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPagedPaintDevice_setPageSize1(QPagedPaintDevice * this_ptr, QPagedPaintDevice::PageSize size) {
  this_ptr->setPageSize(size);
}


RITUAL_EXPORT QPagedPaintDevice::PageSize ctr_qt_gui_ffi_QPagedPaintDevice_pageSize(QPagedPaintDevice const * this_ptr) {
  return this_ptr->pageSize();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPagedPaintDevice_setPageSizeMM(QPagedPaintDevice * this_ptr, QSizeF const * size) {
  this_ptr->setPageSizeMM(*size);
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QPagedPaintDevice_pageSizeMM(QPagedPaintDevice const * this_ptr) {
  return new QSizeF(this_ptr->pageSizeMM());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPagedPaintDevice_setMargins(QPagedPaintDevice * this_ptr, QPagedPaintDevice::Margins const * margins) {
  this_ptr->setMargins(*margins);
}


RITUAL_EXPORT QPagedPaintDevice::Margins * ctr_qt_gui_ffi_QPagedPaintDevice_margins(QPagedPaintDevice const * this_ptr) {
  return new QPagedPaintDevice::Margins(this_ptr->margins());
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_create(QPointF const * pos, QRectF const * sourceRect, double scaleX, double scaleY, double rotation, double opacity) {
  return new QPainter::PixmapFragment(QPainter::PixmapFragment::create(*pos, *sourceRect, scaleX, scaleY, rotation, opacity));
}


RITUAL_EXPORT QPainter * ctr_qt_gui_ffi_QPainter_QPainter() {
  return new QPainter();
}


RITUAL_EXPORT QPainter * ctr_qt_gui_ffi_QPainter_QPainter1(QPaintDevice * arg1) {
  return new QPainter(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_dQPainter(QPainter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QPainter_device(QPainter const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_begin(QPainter * this_ptr, QPaintDevice * arg1) {
  return this_ptr->begin(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_end(QPainter * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_isActive(QPainter const * this_ptr) {
  return this_ptr->isActive();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_initFrom(QPainter * this_ptr, QPaintDevice const * device) {
  this_ptr->initFrom(device);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setCompositionMode(QPainter * this_ptr, QPainter::CompositionMode mode) {
  this_ptr->setCompositionMode(mode);
}


RITUAL_EXPORT QPainter::CompositionMode ctr_qt_gui_ffi_QPainter_compositionMode(QPainter const * this_ptr) {
  return this_ptr->compositionMode();
}


RITUAL_EXPORT QFont const * ctr_qt_gui_ffi_QPainter_font(QPainter const * this_ptr) {
  return &this_ptr->font();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setFont(QPainter * this_ptr, QFont const * f) {
  this_ptr->setFont(*f);
}


RITUAL_EXPORT QFontMetrics * ctr_qt_gui_ffi_QPainter_fontMetrics(QPainter const * this_ptr) {
  return new QFontMetrics(this_ptr->fontMetrics());
}


RITUAL_EXPORT QFontInfo * ctr_qt_gui_ffi_QPainter_fontInfo(QPainter const * this_ptr) {
  return new QFontInfo(this_ptr->fontInfo());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setPen(QPainter * this_ptr, QColor const * color) {
  this_ptr->setPen(*color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setPen1(QPainter * this_ptr, QPen const * pen) {
  this_ptr->setPen(*pen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setPen2(QPainter * this_ptr, Qt::PenStyle style) {
  this_ptr->setPen(style);
}


RITUAL_EXPORT QPen const * ctr_qt_gui_ffi_QPainter_pen(QPainter const * this_ptr) {
  return &this_ptr->pen();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBrush(QPainter * this_ptr, QBrush const * brush) {
  this_ptr->setBrush(*brush);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBrush1(QPainter * this_ptr, Qt::BrushStyle style) {
  this_ptr->setBrush(style);
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPainter_brush(QPainter const * this_ptr) {
  return &this_ptr->brush();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBackgroundMode(QPainter * this_ptr, Qt::BGMode mode) {
  this_ptr->setBackgroundMode(mode);
}


RITUAL_EXPORT Qt::BGMode ctr_qt_gui_ffi_QPainter_backgroundMode(QPainter const * this_ptr) {
  return this_ptr->backgroundMode();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QPainter_brushOrigin(QPainter const * this_ptr) {
  return new QPoint(this_ptr->brushOrigin());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBrushOrigin(QPainter * this_ptr, int x, int y) {
  this_ptr->setBrushOrigin(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBrushOrigin1(QPainter * this_ptr, QPoint const * arg1) {
  this_ptr->setBrushOrigin(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBrushOrigin2(QPainter * this_ptr, QPointF const * arg1) {
  this_ptr->setBrushOrigin(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setBackground(QPainter * this_ptr, QBrush const * bg) {
  this_ptr->setBackground(*bg);
}


RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPainter_background(QPainter const * this_ptr) {
  return &this_ptr->background();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPainter_opacity(QPainter const * this_ptr) {
  return this_ptr->opacity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setOpacity(QPainter * this_ptr, double opacity) {
  this_ptr->setOpacity(opacity);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QPainter_clipRegion(QPainter const * this_ptr) {
  return new QRegion(this_ptr->clipRegion());
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPainter_clipPath(QPainter const * this_ptr) {
  return new QPainterPath(this_ptr->clipPath());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect(QPainter * this_ptr, QRectF const * arg1, Qt::ClipOperation op) {
  this_ptr->setClipRect(*arg1, op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect1(QPainter * this_ptr, QRect const * arg1, Qt::ClipOperation op) {
  this_ptr->setClipRect(*arg1, op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect2(QPainter * this_ptr, int x, int y, int w, int h, Qt::ClipOperation op) {
  this_ptr->setClipRect(x, y, w, h, op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRegion(QPainter * this_ptr, QRegion const * arg1, Qt::ClipOperation op) {
  this_ptr->setClipRegion(*arg1, op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipPath(QPainter * this_ptr, QPainterPath const * path, Qt::ClipOperation op) {
  this_ptr->setClipPath(*path, op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipping(QPainter * this_ptr, bool enable) {
  this_ptr->setClipping(enable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_hasClipping(QPainter const * this_ptr) {
  return this_ptr->hasClipping();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainter_clipBoundingRect(QPainter const * this_ptr) {
  return new QRectF(this_ptr->clipBoundingRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_save(QPainter * this_ptr) {
  this_ptr->save();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_restore(QPainter * this_ptr) {
  this_ptr->restore();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setMatrix(QPainter * this_ptr, QMatrix const * matrix, bool combine) {
  this_ptr->setMatrix(*matrix, combine);
}


RITUAL_EXPORT QMatrix const * ctr_qt_gui_ffi_QPainter_matrix(QPainter const * this_ptr) {
  return &this_ptr->matrix();
}


RITUAL_EXPORT QMatrix const * ctr_qt_gui_ffi_QPainter_deviceMatrix(QPainter const * this_ptr) {
  return &this_ptr->deviceMatrix();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_resetMatrix(QPainter * this_ptr) {
  this_ptr->resetMatrix();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setTransform(QPainter * this_ptr, QTransform const * transform, bool combine) {
  this_ptr->setTransform(*transform, combine);
}


RITUAL_EXPORT QTransform const * ctr_qt_gui_ffi_QPainter_transform(QPainter const * this_ptr) {
  return &this_ptr->transform();
}


RITUAL_EXPORT QTransform const * ctr_qt_gui_ffi_QPainter_deviceTransform(QPainter const * this_ptr) {
  return &this_ptr->deviceTransform();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_resetTransform(QPainter * this_ptr) {
  this_ptr->resetTransform();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWorldMatrix(QPainter * this_ptr, QMatrix const * matrix, bool combine) {
  this_ptr->setWorldMatrix(*matrix, combine);
}


RITUAL_EXPORT QMatrix const * ctr_qt_gui_ffi_QPainter_worldMatrix(QPainter const * this_ptr) {
  return &this_ptr->worldMatrix();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWorldTransform(QPainter * this_ptr, QTransform const * matrix, bool combine) {
  this_ptr->setWorldTransform(*matrix, combine);
}


RITUAL_EXPORT QTransform const * ctr_qt_gui_ffi_QPainter_worldTransform(QPainter const * this_ptr) {
  return &this_ptr->worldTransform();
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QPainter_combinedMatrix(QPainter const * this_ptr) {
  return new QMatrix(this_ptr->combinedMatrix());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QPainter_combinedTransform(QPainter const * this_ptr) {
  return new QTransform(this_ptr->combinedTransform());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setMatrixEnabled(QPainter * this_ptr, bool enabled) {
  this_ptr->setMatrixEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_matrixEnabled(QPainter const * this_ptr) {
  return this_ptr->matrixEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWorldMatrixEnabled(QPainter * this_ptr, bool enabled) {
  this_ptr->setWorldMatrixEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_worldMatrixEnabled(QPainter const * this_ptr) {
  return this_ptr->worldMatrixEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_scale(QPainter * this_ptr, double sx, double sy) {
  this_ptr->scale(sx, sy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_shear(QPainter * this_ptr, double sh, double sv) {
  this_ptr->shear(sh, sv);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_rotate(QPainter * this_ptr, double a) {
  this_ptr->rotate(a);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_translate(QPainter * this_ptr, QPointF const * offset) {
  this_ptr->translate(*offset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_translate1(QPainter * this_ptr, QPoint const * offset) {
  this_ptr->translate(*offset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_translate2(QPainter * this_ptr, double dx, double dy) {
  this_ptr->translate(dx, dy);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPainter_window(QPainter const * this_ptr) {
  return new QRect(this_ptr->window());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWindow(QPainter * this_ptr, QRect const * window) {
  this_ptr->setWindow(*window);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWindow1(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->setWindow(x, y, w, h);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPainter_viewport(QPainter const * this_ptr) {
  return new QRect(this_ptr->viewport());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setViewport(QPainter * this_ptr, QRect const * viewport) {
  this_ptr->setViewport(*viewport);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setViewport1(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->setViewport(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setViewTransformEnabled(QPainter * this_ptr, bool enable) {
  this_ptr->setViewTransformEnabled(enable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_viewTransformEnabled(QPainter const * this_ptr) {
  return this_ptr->viewTransformEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_strokePath(QPainter * this_ptr, QPainterPath const * path, QPen const * pen) {
  this_ptr->strokePath(*path, *pen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillPath(QPainter * this_ptr, QPainterPath const * path, QBrush const * brush) {
  this_ptr->fillPath(*path, *brush);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPath(QPainter * this_ptr, QPainterPath const * path) {
  this_ptr->drawPath(*path);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoint(QPainter * this_ptr, QPointF const * pt) {
  this_ptr->drawPoint(*pt);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoint1(QPainter * this_ptr, QPoint const * p) {
  this_ptr->drawPoint(*p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoint2(QPainter * this_ptr, int x, int y) {
  this_ptr->drawPoint(x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoints(QPainter * this_ptr, QPointF const * points, int pointCount) {
  this_ptr->drawPoints(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoints1(QPainter * this_ptr, QPolygonF const * points) {
  this_ptr->drawPoints(*points);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoints2(QPainter * this_ptr, QPoint const * points, int pointCount) {
  this_ptr->drawPoints(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPoints3(QPainter * this_ptr, QPolygon const * points) {
  this_ptr->drawPoints(*points);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLine(QPainter * this_ptr, QLineF const * line) {
  this_ptr->drawLine(*line);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLine1(QPainter * this_ptr, QLine const * line) {
  this_ptr->drawLine(*line);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLine2(QPainter * this_ptr, int x1, int y1, int x2, int y2) {
  this_ptr->drawLine(x1, y1, x2, y2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLine3(QPainter * this_ptr, QPoint const * p1, QPoint const * p2) {
  this_ptr->drawLine(*p1, *p2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLine4(QPainter * this_ptr, QPointF const * p1, QPointF const * p2) {
  this_ptr->drawLine(*p1, *p2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines(QPainter * this_ptr, QLineF const * lines, int lineCount) {
  this_ptr->drawLines(lines, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines1(QPainter * this_ptr, QVector< QLineF > const * lines) {
  this_ptr->drawLines(*lines);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines2(QPainter * this_ptr, QPointF const * pointPairs, int lineCount) {
  this_ptr->drawLines(pointPairs, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines3(QPainter * this_ptr, QVector< QPointF > const * pointPairs) {
  this_ptr->drawLines(*pointPairs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines4(QPainter * this_ptr, QLine const * lines, int lineCount) {
  this_ptr->drawLines(lines, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines5(QPainter * this_ptr, QVector< QLine > const * lines) {
  this_ptr->drawLines(*lines);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines6(QPainter * this_ptr, QPoint const * pointPairs, int lineCount) {
  this_ptr->drawLines(pointPairs, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawLines7(QPainter * this_ptr, QVector< QPoint > const * pointPairs) {
  this_ptr->drawLines(*pointPairs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRect(QPainter * this_ptr, QRectF const * rect) {
  this_ptr->drawRect(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRect1(QPainter * this_ptr, int x1, int y1, int w, int h) {
  this_ptr->drawRect(x1, y1, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRect2(QPainter * this_ptr, QRect const * rect) {
  this_ptr->drawRect(*rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRects(QPainter * this_ptr, QRectF const * rects, int rectCount) {
  this_ptr->drawRects(rects, rectCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRects1(QPainter * this_ptr, QVector< QRectF > const * rectangles) {
  this_ptr->drawRects(*rectangles);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRects2(QPainter * this_ptr, QRect const * rects, int rectCount) {
  this_ptr->drawRects(rects, rectCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRects3(QPainter * this_ptr, QVector< QRect > const * rectangles) {
  this_ptr->drawRects(*rectangles);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawEllipse(QPainter * this_ptr, QRectF const * r) {
  this_ptr->drawEllipse(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawEllipse1(QPainter * this_ptr, QRect const * r) {
  this_ptr->drawEllipse(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawEllipse2(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->drawEllipse(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawEllipse3(QPainter * this_ptr, QPointF const * center, double rx, double ry) {
  this_ptr->drawEllipse(*center, rx, ry);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawEllipse4(QPainter * this_ptr, QPoint const * center, int rx, int ry) {
  this_ptr->drawEllipse(*center, rx, ry);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolyline(QPainter * this_ptr, QPointF const * points, int pointCount) {
  this_ptr->drawPolyline(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolyline1(QPainter * this_ptr, QPolygonF const * polyline) {
  this_ptr->drawPolyline(*polyline);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolyline2(QPainter * this_ptr, QPoint const * points, int pointCount) {
  this_ptr->drawPolyline(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolyline3(QPainter * this_ptr, QPolygon const * polygon) {
  this_ptr->drawPolyline(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon(QPainter * this_ptr, QPointF const * points, int pointCount, Qt::FillRule fillRule) {
  this_ptr->drawPolygon(points, pointCount, fillRule);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon1(QPainter * this_ptr, QPolygonF const * polygon, Qt::FillRule fillRule) {
  this_ptr->drawPolygon(*polygon, fillRule);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon2(QPainter * this_ptr, QPoint const * points, int pointCount, Qt::FillRule fillRule) {
  this_ptr->drawPolygon(points, pointCount, fillRule);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon3(QPainter * this_ptr, QPolygon const * polygon, Qt::FillRule fillRule) {
  this_ptr->drawPolygon(*polygon, fillRule);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawConvexPolygon(QPainter * this_ptr, QPointF const * points, int pointCount) {
  this_ptr->drawConvexPolygon(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawConvexPolygon1(QPainter * this_ptr, QPolygonF const * polygon) {
  this_ptr->drawConvexPolygon(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawConvexPolygon2(QPainter * this_ptr, QPoint const * points, int pointCount) {
  this_ptr->drawConvexPolygon(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawConvexPolygon3(QPainter * this_ptr, QPolygon const * polygon) {
  this_ptr->drawConvexPolygon(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawArc(QPainter * this_ptr, QRectF const * rect, int a, int alen) {
  this_ptr->drawArc(*rect, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawArc1(QPainter * this_ptr, QRect const * arg1, int a, int alen) {
  this_ptr->drawArc(*arg1, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawArc2(QPainter * this_ptr, int x, int y, int w, int h, int a, int alen) {
  this_ptr->drawArc(x, y, w, h, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPie(QPainter * this_ptr, QRectF const * rect, int a, int alen) {
  this_ptr->drawPie(*rect, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPie1(QPainter * this_ptr, int x, int y, int w, int h, int a, int alen) {
  this_ptr->drawPie(x, y, w, h, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPie2(QPainter * this_ptr, QRect const * arg1, int a, int alen) {
  this_ptr->drawPie(*arg1, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawChord(QPainter * this_ptr, QRectF const * rect, int a, int alen) {
  this_ptr->drawChord(*rect, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawChord1(QPainter * this_ptr, int x, int y, int w, int h, int a, int alen) {
  this_ptr->drawChord(x, y, w, h, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawChord2(QPainter * this_ptr, QRect const * arg1, int a, int alen) {
  this_ptr->drawChord(*arg1, a, alen);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect(QPainter * this_ptr, QRectF const * rect, double xRadius, double yRadius, Qt::SizeMode mode) {
  this_ptr->drawRoundedRect(*rect, xRadius, yRadius, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect1(QPainter * this_ptr, int x, int y, int w, int h, double xRadius, double yRadius, Qt::SizeMode mode) {
  this_ptr->drawRoundedRect(x, y, w, h, xRadius, yRadius, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect2(QPainter * this_ptr, QRect const * rect, double xRadius, double yRadius, Qt::SizeMode mode) {
  this_ptr->drawRoundedRect(*rect, xRadius, yRadius, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect(QPainter * this_ptr, QRectF const * r, int xround, int yround) {
  this_ptr->drawRoundRect(*r, xround, yround);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect1(QPainter * this_ptr, int x, int y, int w, int h, int arg5, int arg6) {
  this_ptr->drawRoundRect(x, y, w, h, arg5, arg6);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect2(QPainter * this_ptr, QRect const * r, int xround, int yround) {
  this_ptr->drawRoundRect(*r, xround, yround);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap(QPainter * this_ptr, QRectF const * rect, QPixmap const * pm, QPointF const * offset) {
  this_ptr->drawTiledPixmap(*rect, *pm, *offset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap1(QPainter * this_ptr, int x, int y, int w, int h, QPixmap const * arg5, int sx, int sy) {
  this_ptr->drawTiledPixmap(x, y, w, h, *arg5, sx, sy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap2(QPainter * this_ptr, QRect const * arg1, QPixmap const * arg2, QPoint const * arg3) {
  this_ptr->drawTiledPixmap(*arg1, *arg2, *arg3);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPicture(QPainter * this_ptr, QPointF const * p, QPicture const * picture) {
  this_ptr->drawPicture(*p, *picture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPicture1(QPainter * this_ptr, int x, int y, QPicture const * picture) {
  this_ptr->drawPicture(x, y, *picture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPicture2(QPainter * this_ptr, QPoint const * p, QPicture const * picture) {
  this_ptr->drawPicture(*p, *picture);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap(QPainter * this_ptr, QRectF const * targetRect, QPixmap const * pixmap, QRectF const * sourceRect) {
  this_ptr->drawPixmap(*targetRect, *pixmap, *sourceRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap1(QPainter * this_ptr, QRect const * targetRect, QPixmap const * pixmap, QRect const * sourceRect) {
  this_ptr->drawPixmap(*targetRect, *pixmap, *sourceRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap2(QPainter * this_ptr, int x, int y, int w, int h, QPixmap const * pm, int sx, int sy, int sw, int sh) {
  this_ptr->drawPixmap(x, y, w, h, *pm, sx, sy, sw, sh);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap3(QPainter * this_ptr, int x, int y, QPixmap const * pm, int sx, int sy, int sw, int sh) {
  this_ptr->drawPixmap(x, y, *pm, sx, sy, sw, sh);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap4(QPainter * this_ptr, QPointF const * p, QPixmap const * pm, QRectF const * sr) {
  this_ptr->drawPixmap(*p, *pm, *sr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap5(QPainter * this_ptr, QPoint const * p, QPixmap const * pm, QRect const * sr) {
  this_ptr->drawPixmap(*p, *pm, *sr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap6(QPainter * this_ptr, QPointF const * p, QPixmap const * pm) {
  this_ptr->drawPixmap(*p, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap7(QPainter * this_ptr, QPoint const * p, QPixmap const * pm) {
  this_ptr->drawPixmap(*p, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap8(QPainter * this_ptr, int x, int y, QPixmap const * pm) {
  this_ptr->drawPixmap(x, y, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap9(QPainter * this_ptr, QRect const * r, QPixmap const * pm) {
  this_ptr->drawPixmap(*r, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmap10(QPainter * this_ptr, int x, int y, int w, int h, QPixmap const * pm) {
  this_ptr->drawPixmap(x, y, w, h, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmapFragments(QPainter * this_ptr, QPainter::PixmapFragment const * fragments, int fragmentCount, QPixmap const * pixmap, int hints) {
  this_ptr->drawPixmapFragments(fragments, fragmentCount, *pixmap, QFlags< QPainter::PixmapFragmentHint >(hints));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage(QPainter * this_ptr, QRectF const * targetRect, QImage const * image, QRectF const * sourceRect, int flags) {
  this_ptr->drawImage(*targetRect, *image, *sourceRect, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage1(QPainter * this_ptr, QRect const * targetRect, QImage const * image, QRect const * sourceRect, int flags) {
  this_ptr->drawImage(*targetRect, *image, *sourceRect, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage2(QPainter * this_ptr, QPointF const * p, QImage const * image, QRectF const * sr, int flags) {
  this_ptr->drawImage(*p, *image, *sr, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage3(QPainter * this_ptr, QPoint const * p, QImage const * image, QRect const * sr, int flags) {
  this_ptr->drawImage(*p, *image, *sr, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage4(QPainter * this_ptr, QRectF const * r, QImage const * image) {
  this_ptr->drawImage(*r, *image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage5(QPainter * this_ptr, QRect const * r, QImage const * image) {
  this_ptr->drawImage(*r, *image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage6(QPainter * this_ptr, QPointF const * p, QImage const * image) {
  this_ptr->drawImage(*p, *image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage7(QPainter * this_ptr, QPoint const * p, QImage const * image) {
  this_ptr->drawImage(*p, *image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage8(QPainter * this_ptr, int x, int y, QImage const * image, int sx, int sy, int sw, int sh, int flags) {
  this_ptr->drawImage(x, y, *image, sx, sy, sw, sh, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setLayoutDirection(QPainter * this_ptr, Qt::LayoutDirection direction) {
  this_ptr->setLayoutDirection(direction);
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QPainter_layoutDirection(QPainter const * this_ptr) {
  return this_ptr->layoutDirection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawGlyphRun(QPainter * this_ptr, QPointF const * position, QGlyphRun const * glyphRun) {
  this_ptr->drawGlyphRun(*position, *glyphRun);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawStaticText(QPainter * this_ptr, QPointF const * topLeftPosition, QStaticText const * staticText) {
  this_ptr->drawStaticText(*topLeftPosition, *staticText);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawStaticText1(QPainter * this_ptr, QPoint const * topLeftPosition, QStaticText const * staticText) {
  this_ptr->drawStaticText(*topLeftPosition, *staticText);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawStaticText2(QPainter * this_ptr, int left, int top, QStaticText const * staticText) {
  this_ptr->drawStaticText(left, top, *staticText);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText(QPainter * this_ptr, QPointF const * p, QString const * s) {
  this_ptr->drawText(*p, *s);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText1(QPainter * this_ptr, QPoint const * p, QString const * s) {
  this_ptr->drawText(*p, *s);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText2(QPainter * this_ptr, int x, int y, QString const * s) {
  this_ptr->drawText(x, y, *s);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText3(QPainter * this_ptr, QPointF const * p, QString const * str, int tf, int justificationPadding) {
  this_ptr->drawText(*p, *str, tf, justificationPadding);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText4(QPainter * this_ptr, QRectF const * r, int flags, QString const * text, QRectF * br) {
  this_ptr->drawText(*r, flags, *text, br);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText5(QPainter * this_ptr, QRect const * r, int flags, QString const * text, QRect * br) {
  this_ptr->drawText(*r, flags, *text, br);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText6(QPainter * this_ptr, int x, int y, int w, int h, int flags, QString const * text, QRect * br) {
  this_ptr->drawText(x, y, w, h, flags, *text, br);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText7(QPainter * this_ptr, QRectF const * r, QString const * text, QTextOption const * o) {
  this_ptr->drawText(*r, *text, *o);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainter_boundingRect(QPainter * this_ptr, QRectF const * rect, int flags, QString const * text) {
  return new QRectF(this_ptr->boundingRect(*rect, flags, *text));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPainter_boundingRect1(QPainter * this_ptr, QRect const * rect, int flags, QString const * text) {
  return new QRect(this_ptr->boundingRect(*rect, flags, *text));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPainter_boundingRect2(QPainter * this_ptr, int x, int y, int w, int h, int flags, QString const * text) {
  return new QRect(this_ptr->boundingRect(x, y, w, h, flags, *text));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainter_boundingRect3(QPainter * this_ptr, QRectF const * rect, QString const * text, QTextOption const * o) {
  return new QRectF(this_ptr->boundingRect(*rect, *text, *o));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTextItem(QPainter * this_ptr, QPointF const * p, QTextItem const * ti) {
  this_ptr->drawTextItem(*p, *ti);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTextItem1(QPainter * this_ptr, int x, int y, QTextItem const * ti) {
  this_ptr->drawTextItem(x, y, *ti);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTextItem2(QPainter * this_ptr, QPoint const * p, QTextItem const * ti) {
  this_ptr->drawTextItem(*p, *ti);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect(QPainter * this_ptr, QRectF const * arg1, QBrush const * arg2) {
  this_ptr->fillRect(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect1(QPainter * this_ptr, int x, int y, int w, int h, QBrush const * arg5) {
  this_ptr->fillRect(x, y, w, h, *arg5);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect2(QPainter * this_ptr, QRect const * arg1, QBrush const * arg2) {
  this_ptr->fillRect(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect3(QPainter * this_ptr, QRectF const * arg1, QColor const * color) {
  this_ptr->fillRect(*arg1, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect4(QPainter * this_ptr, int x, int y, int w, int h, QColor const * color) {
  this_ptr->fillRect(x, y, w, h, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect5(QPainter * this_ptr, QRect const * arg1, QColor const * color) {
  this_ptr->fillRect(*arg1, *color);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect6(QPainter * this_ptr, int x, int y, int w, int h, Qt::GlobalColor c) {
  this_ptr->fillRect(x, y, w, h, c);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect7(QPainter * this_ptr, QRect const * r, Qt::GlobalColor c) {
  this_ptr->fillRect(*r, c);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect8(QPainter * this_ptr, QRectF const * r, Qt::GlobalColor c) {
  this_ptr->fillRect(*r, c);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect9(QPainter * this_ptr, int x, int y, int w, int h, Qt::BrushStyle style) {
  this_ptr->fillRect(x, y, w, h, style);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect10(QPainter * this_ptr, QRect const * r, Qt::BrushStyle style) {
  this_ptr->fillRect(*r, style);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect11(QPainter * this_ptr, QRectF const * r, Qt::BrushStyle style) {
  this_ptr->fillRect(*r, style);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_eraseRect(QPainter * this_ptr, QRectF const * arg1) {
  this_ptr->eraseRect(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_eraseRect1(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->eraseRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_eraseRect2(QPainter * this_ptr, QRect const * arg1) {
  this_ptr->eraseRect(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRenderHint(QPainter * this_ptr, QPainter::RenderHint hint, bool on) {
  this_ptr->setRenderHint(hint, on);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRenderHints(QPainter * this_ptr, int hints, bool on) {
  this_ptr->setRenderHints(QFlags< QPainter::RenderHint >(hints), on);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPainter_renderHints(QPainter const * this_ptr) {
  return int(this_ptr->renderHints());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPainter_testRenderHint(QPainter const * this_ptr, QPainter::RenderHint hint) {
  return this_ptr->testRenderHint(hint);
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QPainter_paintEngine(QPainter const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRedirected(QPaintDevice const * device, QPaintDevice * replacement, QPoint const * offset) {
  QPainter::setRedirected(device, replacement, *offset);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QPainter_redirected(QPaintDevice const * device, QPoint * offset) {
  return QPainter::redirected(device, offset);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_restoreRedirected(QPaintDevice const * device) {
  QPainter::restoreRedirected(device);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_beginNativePainting(QPainter * this_ptr) {
  this_ptr->beginNativePainting();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_endNativePainting(QPainter * this_ptr) {
  this_ptr->endNativePainting();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextItem_descent(QTextItem const * this_ptr) {
  return this_ptr->descent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextItem_ascent(QTextItem const * this_ptr) {
  return this_ptr->ascent();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextItem_width(QTextItem const * this_ptr) {
  return this_ptr->width();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextItem_renderFlags(QTextItem const * this_ptr) {
  return int(this_ptr->renderFlags());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextItem_text(QTextItem const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QTextItem_font(QTextItem const * this_ptr) {
  return new QFont(this_ptr->font());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_dQPaintEngine(QPaintEngine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_isActive(QPaintEngine const * this_ptr) {
  return this_ptr->isActive();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_setActive(QPaintEngine * this_ptr, bool newState) {
  this_ptr->setActive(newState);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_begin(QPaintEngine * this_ptr, QPaintDevice * pdev) {
  return this_ptr->begin(pdev);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_end(QPaintEngine * this_ptr) {
  return this_ptr->end();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_updateState(QPaintEngine * this_ptr, QPaintEngineState const * state) {
  this_ptr->updateState(*state);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawRects(QPaintEngine * this_ptr, QRect const * rects, int rectCount) {
  this_ptr->drawRects(rects, rectCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawRects1(QPaintEngine * this_ptr, QRectF const * rects, int rectCount) {
  this_ptr->drawRects(rects, rectCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawLines(QPaintEngine * this_ptr, QLine const * lines, int lineCount) {
  this_ptr->drawLines(lines, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawLines1(QPaintEngine * this_ptr, QLineF const * lines, int lineCount) {
  this_ptr->drawLines(lines, lineCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawEllipse(QPaintEngine * this_ptr, QRectF const * r) {
  this_ptr->drawEllipse(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawEllipse1(QPaintEngine * this_ptr, QRect const * r) {
  this_ptr->drawEllipse(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPath(QPaintEngine * this_ptr, QPainterPath const * path) {
  this_ptr->drawPath(*path);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPoints(QPaintEngine * this_ptr, QPointF const * points, int pointCount) {
  this_ptr->drawPoints(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPoints1(QPaintEngine * this_ptr, QPoint const * points, int pointCount) {
  this_ptr->drawPoints(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPolygon(QPaintEngine * this_ptr, QPointF const * points, int pointCount, QPaintEngine::PolygonDrawMode mode) {
  this_ptr->drawPolygon(points, pointCount, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPolygon1(QPaintEngine * this_ptr, QPoint const * points, int pointCount, QPaintEngine::PolygonDrawMode mode) {
  this_ptr->drawPolygon(points, pointCount, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawPixmap(QPaintEngine * this_ptr, QRectF const * r, QPixmap const * pm, QRectF const * sr) {
  this_ptr->drawPixmap(*r, *pm, *sr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawTextItem(QPaintEngine * this_ptr, QPointF const * p, QTextItem const * textItem) {
  this_ptr->drawTextItem(*p, *textItem);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawTiledPixmap(QPaintEngine * this_ptr, QRectF const * r, QPixmap const * pixmap, QPointF const * s) {
  this_ptr->drawTiledPixmap(*r, *pixmap, *s);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawImage(QPaintEngine * this_ptr, QRectF const * r, QImage const * pm, QRectF const * sr, int flags) {
  this_ptr->drawImage(*r, *pm, *sr, QFlags< Qt::ImageConversionFlag >(flags));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_setPaintDevice(QPaintEngine * this_ptr, QPaintDevice * device) {
  this_ptr->setPaintDevice(device);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QPaintEngine_paintDevice(QPaintEngine const * this_ptr) {
  return this_ptr->paintDevice();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_setSystemClip(QPaintEngine * this_ptr, QRegion const * baseClip) {
  this_ptr->setSystemClip(*baseClip);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QPaintEngine_systemClip(QPaintEngine const * this_ptr) {
  return new QRegion(this_ptr->systemClip());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_setSystemRect(QPaintEngine * this_ptr, QRect const * rect) {
  this_ptr->setSystemRect(*rect);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPaintEngine_systemRect(QPaintEngine const * this_ptr) {
  return new QRect(this_ptr->systemRect());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QPaintEngine_coordinateOffset(QPaintEngine const * this_ptr) {
  return new QPoint(this_ptr->coordinateOffset());
}


RITUAL_EXPORT QPaintEngine::Type ctr_qt_gui_ffi_QPaintEngine_type(QPaintEngine const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_fix_neg_rect(QPaintEngine * this_ptr, int * x, int * y, int * w, int * h) {
  this_ptr->fix_neg_rect(x, y, w, h);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_testDirty(QPaintEngine * this_ptr, int df) {
  return this_ptr->testDirty(QFlags< QPaintEngine::DirtyFlag >(df));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_setDirty(QPaintEngine * this_ptr, int df) {
  this_ptr->setDirty(QFlags< QPaintEngine::DirtyFlag >(df));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_clearDirty(QPaintEngine * this_ptr, int df) {
  this_ptr->clearDirty(QFlags< QPaintEngine::DirtyFlag >(df));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_hasFeature(QPaintEngine const * this_ptr, int feature) {
  return this_ptr->hasFeature(QFlags< QPaintEngine::PaintEngineFeature >(feature));
}


RITUAL_EXPORT QPainter * ctr_qt_gui_ffi_QPaintEngine_painter(QPaintEngine const * this_ptr) {
  return this_ptr->painter();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_syncState(QPaintEngine * this_ptr) {
  this_ptr->syncState();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngine_isExtended(QPaintEngine const * this_ptr) {
  return this_ptr->isExtended();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintEngineState_state(QPaintEngineState const * this_ptr) {
  return int(this_ptr->state());
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPaintEngineState_pen(QPaintEngineState const * this_ptr) {
  return new QPen(this_ptr->pen());
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QPaintEngineState_brush(QPaintEngineState const * this_ptr) {
  return new QBrush(this_ptr->brush());
}


RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QPaintEngineState_brushOrigin(QPaintEngineState const * this_ptr) {
  return new QPointF(this_ptr->brushOrigin());
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QPaintEngineState_backgroundBrush(QPaintEngineState const * this_ptr) {
  return new QBrush(this_ptr->backgroundBrush());
}


RITUAL_EXPORT Qt::BGMode ctr_qt_gui_ffi_QPaintEngineState_backgroundMode(QPaintEngineState const * this_ptr) {
  return this_ptr->backgroundMode();
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QPaintEngineState_font(QPaintEngineState const * this_ptr) {
  return new QFont(this_ptr->font());
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QPaintEngineState_matrix(QPaintEngineState const * this_ptr) {
  return new QMatrix(this_ptr->matrix());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QPaintEngineState_transform(QPaintEngineState const * this_ptr) {
  return new QTransform(this_ptr->transform());
}


RITUAL_EXPORT Qt::ClipOperation ctr_qt_gui_ffi_QPaintEngineState_clipOperation(QPaintEngineState const * this_ptr) {
  return this_ptr->clipOperation();
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QPaintEngineState_clipRegion(QPaintEngineState const * this_ptr) {
  return new QRegion(this_ptr->clipRegion());
}


RITUAL_EXPORT QPainterPath * ctr_qt_gui_ffi_QPaintEngineState_clipPath(QPaintEngineState const * this_ptr) {
  return new QPainterPath(this_ptr->clipPath());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngineState_isClipEnabled(QPaintEngineState const * this_ptr) {
  return this_ptr->isClipEnabled();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPaintEngineState_renderHints(QPaintEngineState const * this_ptr) {
  return int(this_ptr->renderHints());
}


RITUAL_EXPORT QPainter::CompositionMode ctr_qt_gui_ffi_QPaintEngineState_compositionMode(QPaintEngineState const * this_ptr) {
  return this_ptr->compositionMode();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QPaintEngineState_opacity(QPaintEngineState const * this_ptr) {
  return this_ptr->opacity();
}


RITUAL_EXPORT QPainter * ctr_qt_gui_ffi_QPaintEngineState_painter(QPaintEngineState const * this_ptr) {
  return this_ptr->painter();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngineState_brushNeedsResolving(QPaintEngineState const * this_ptr) {
  return this_ptr->brushNeedsResolving();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPaintEngineState_penNeedsResolving(QPaintEngineState const * this_ptr) {
  return this_ptr->penNeedsResolving();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPdfWriter_metaObject(QPdfWriter const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QPdfWriter_qt_metacast(QPdfWriter * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPdfWriter_qt_metacall(QPdfWriter * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPdfWriter_tr(char const * s, char const * c, int n) {
  return new QString(QPdfWriter::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPdfWriter_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPdfWriter::trUtf8(s, c, n));
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_QPdfWriter_QPdfWriter(QString const * filename) {
  return new QPdfWriter(*filename);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_QPdfWriter_QPdfWriter1(QIODevice * device) {
  return new QPdfWriter(device);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_dQPdfWriter(QPdfWriter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPdfWriter_title(QPdfWriter const * this_ptr) {
  return new QString(this_ptr->title());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setTitle(QPdfWriter * this_ptr, QString const * title) {
  this_ptr->setTitle(*title);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPdfWriter_creator(QPdfWriter const * this_ptr) {
  return new QString(this_ptr->creator());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setCreator(QPdfWriter * this_ptr, QString const * creator) {
  this_ptr->setCreator(*creator);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPdfWriter_newPage(QPdfWriter * this_ptr) {
  return this_ptr->newPage();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setResolution(QPdfWriter * this_ptr, int resolution) {
  this_ptr->setResolution(resolution);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPdfWriter_resolution(QPdfWriter const * this_ptr) {
  return this_ptr->resolution();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setPageSize(QPdfWriter * this_ptr, QPagedPaintDevice::PageSize size) {
  this_ptr->setPageSize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setPageSizeMM(QPdfWriter * this_ptr, QSizeF const * size) {
  this_ptr->setPageSizeMM(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setMargins(QPdfWriter * this_ptr, QPagedPaintDevice::Margins const * m) {
  this_ptr->setMargins(*m);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_QPicture_QPicture(int formatVersion) {
  return new QPicture(formatVersion);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_QPicture_QPicture1(QPicture const * arg1) {
  return new QPicture(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPicture_dQPicture(QPicture * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_isNull(QPicture const * this_ptr) {
  return this_ptr->isNull();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPicture_devType(QPicture const * this_ptr) {
  return this_ptr->devType();
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QPicture_size(QPicture const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_QPicture_data(QPicture const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPicture_setData(QPicture * this_ptr, char const * data, unsigned int size) {
  this_ptr->setData(data, size);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_play(QPicture * this_ptr, QPainter * p) {
  return this_ptr->play(p);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_load(QPicture * this_ptr, QIODevice * dev, char const * format) {
  return this_ptr->load(dev, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_load1(QPicture * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->load(*fileName, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_save(QPicture * this_ptr, QIODevice * dev, char const * format) {
  return this_ptr->save(dev, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_save1(QPicture * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->save(*fileName, format);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QPicture_boundingRect(QPicture const * this_ptr) {
  return new QRect(this_ptr->boundingRect());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPicture_setBoundingRect(QPicture * this_ptr, QRect const * r) {
  this_ptr->setBoundingRect(*r);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_QPicture_operator_(QPicture * this_ptr, QPicture const * p) {
  return &this_ptr->operator=(*p);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPicture_swap(QPicture * this_ptr, QPicture * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPicture_detach(QPicture * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_isDetached(QPicture const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_QPicture_pictureFormat(QString const * fileName) {
  return QPicture::pictureFormat(*fileName);
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QPicture_inputFormats() {
  return new QList< QByteArray >(QPicture::inputFormats());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QPicture_outputFormats() {
  return new QList< QByteArray >(QPicture::outputFormats());
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QPicture_inputFormatList() {
  return new QStringList(QPicture::inputFormatList());
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QPicture_outputFormatList() {
  return new QStringList(QPicture::outputFormatList());
}


RITUAL_EXPORT QPaintEngine * ctr_qt_gui_ffi_QPicture_paintEngine(QPicture const * this_ptr) {
  return this_ptr->paintEngine();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap32(QPicture * value1, QPicture * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QPictureIO * ctr_qt_gui_ffi_QPictureIO_QPictureIO() {
  return new QPictureIO();
}


RITUAL_EXPORT QPictureIO * ctr_qt_gui_ffi_QPictureIO_QPictureIO1(QIODevice * ioDevice, char const * format) {
  return new QPictureIO(ioDevice, format);
}


RITUAL_EXPORT QPictureIO * ctr_qt_gui_ffi_QPictureIO_QPictureIO2(QString const * fileName, char const * format) {
  return new QPictureIO(*fileName, format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_dQPictureIO(QPictureIO * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPicture const * ctr_qt_gui_ffi_QPictureIO_picture(QPictureIO const * this_ptr) {
  return &this_ptr->picture();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPictureIO_status(QPictureIO const * this_ptr) {
  return this_ptr->status();
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_QPictureIO_format(QPictureIO const * this_ptr) {
  return this_ptr->format();
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QPictureIO_ioDevice(QPictureIO const * this_ptr) {
  return this_ptr->ioDevice();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPictureIO_fileName(QPictureIO const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPictureIO_quality(QPictureIO const * this_ptr) {
  return this_ptr->quality();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPictureIO_description(QPictureIO const * this_ptr) {
  return new QString(this_ptr->description());
}


RITUAL_EXPORT char const * ctr_qt_gui_ffi_QPictureIO_parameters(QPictureIO const * this_ptr) {
  return this_ptr->parameters();
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QPictureIO_gamma(QPictureIO const * this_ptr) {
  return this_ptr->gamma();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setPicture(QPictureIO * this_ptr, QPicture const * arg1) {
  this_ptr->setPicture(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setStatus(QPictureIO * this_ptr, int arg1) {
  this_ptr->setStatus(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setFormat(QPictureIO * this_ptr, char const * arg1) {
  this_ptr->setFormat(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setIODevice(QPictureIO * this_ptr, QIODevice * arg1) {
  this_ptr->setIODevice(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setFileName(QPictureIO * this_ptr, QString const * arg1) {
  this_ptr->setFileName(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setQuality(QPictureIO * this_ptr, int arg1) {
  this_ptr->setQuality(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setDescription(QPictureIO * this_ptr, QString const * arg1) {
  this_ptr->setDescription(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setParameters(QPictureIO * this_ptr, char const * arg1) {
  this_ptr->setParameters(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_setGamma(QPictureIO * this_ptr, float arg1) {
  this_ptr->setGamma(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPictureIO_read(QPictureIO * this_ptr) {
  return this_ptr->read();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPictureIO_write(QPictureIO * this_ptr) {
  return this_ptr->write();
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QPictureIO_pictureFormat(QString const * fileName) {
  return new QByteArray(QPictureIO::pictureFormat(*fileName));
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QPictureIO_pictureFormat1(QIODevice * arg1) {
  return new QByteArray(QPictureIO::pictureFormat(arg1));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QPictureIO_inputFormats() {
  return new QList< QByteArray >(QPictureIO::inputFormats());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QPictureIO_outputFormats() {
  return new QList< QByteArray >(QPictureIO::outputFormats());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureIO_defineIOHandler(char const * format, char const * header, char const * flags, void (*read_picture)(QPictureIO *), void (*write_picture)(QPictureIO *)) {
  QPictureIO::defineIOHandler(format, header, flags, read_picture, write_picture);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__103(QDataStream * arg1, QPicture const * arg2) {
  return &operator<<(*arg1, *arg2);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__104(QDataStream * arg1, QPicture * arg2) {
  return &operator>>(*arg1, *arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QPictureFormatPlugin_metaObject(QPictureFormatPlugin const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QPictureFormatPlugin_qt_metacast(QPictureFormatPlugin * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPictureFormatPlugin_qt_metacall(QPictureFormatPlugin * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPictureFormatPlugin_tr(char const * s, char const * c, int n) {
  return new QString(QPictureFormatPlugin::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QPictureFormatPlugin_trUtf8(char const * s, char const * c, int n) {
  return new QString(QPictureFormatPlugin::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPictureFormatPlugin_dQPictureFormatPlugin(QPictureFormatPlugin * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPictureFormatPlugin_loadPicture(QPictureFormatPlugin * this_ptr, QString const * format, QString const * filename, QPicture * pic) {
  return this_ptr->loadPicture(*format, *filename, pic);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPictureFormatPlugin_savePicture(QPictureFormatPlugin * this_ptr, QString const * format, QString const * filename, QPicture const * pic) {
  return this_ptr->savePicture(*format, *filename, *pic);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPictureFormatPlugin_installIOHandler(QPictureFormatPlugin * this_ptr, QString const * format) {
  return this_ptr->installIOHandler(*format);
}


RITUAL_EXPORT QPixmapCache::Key * ctr_qt_gui_ffi_QPixmapCache_Key_Key() {
  return new QPixmapCache::Key();
}


RITUAL_EXPORT QPixmapCache::Key * ctr_qt_gui_ffi_QPixmapCache_Key_Key1(QPixmapCache::Key const * other) {
  return new QPixmapCache::Key(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_Key_dKey(QPixmapCache::Key * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_Key_operator__(QPixmapCache::Key const * this_ptr, QPixmapCache::Key const * key) {
  return this_ptr->operator==(*key);
}


RITUAL_EXPORT QPixmapCache::Key * ctr_qt_gui_ffi_QPixmapCache_Key_operator_1(QPixmapCache::Key * this_ptr, QPixmapCache::Key const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_Key_swap(QPixmapCache::Key * this_ptr, QPixmapCache::Key * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_Key_isValid(QPixmapCache::Key const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QPixmapCache_cacheLimit() {
  return QPixmapCache::cacheLimit();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_setCacheLimit(int arg1) {
  QPixmapCache::setCacheLimit(arg1);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmapCache_find(QString const * key) {
  return QPixmapCache::find(*key);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_find1(QString const * key, QPixmap * pixmap) {
  return QPixmapCache::find(*key, *pixmap);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_find2(QString const * key, QPixmap * pixmap) {
  return QPixmapCache::find(*key, pixmap);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_find3(QPixmapCache::Key const * key, QPixmap * pixmap) {
  return QPixmapCache::find(*key, pixmap);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_insert(QString const * key, QPixmap const * pixmap) {
  return QPixmapCache::insert(*key, *pixmap);
}


RITUAL_EXPORT QPixmapCache::Key * ctr_qt_gui_ffi_QPixmapCache_insert1(QPixmap const * pixmap) {
  return new QPixmapCache::Key(QPixmapCache::insert(*pixmap));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmapCache_replace(QPixmapCache::Key const * key, QPixmap const * pixmap) {
  return QPixmapCache::replace(*key, *pixmap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_remove(QString const * key) {
  QPixmapCache::remove(*key);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_remove1(QPixmapCache::Key const * key) {
  QPixmapCache::remove(*key);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_clear() {
  QPixmapCache::clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap33(QPixmapCache::Key * value1, QPixmapCache::Key * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRasterWindow_metaObject(QRasterWindow const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QRasterWindow_qt_metacast(QRasterWindow * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QRasterWindow_qt_metacall(QRasterWindow * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRasterWindow_tr(char const * s, char const * c, int n) {
  return new QString(QRasterWindow::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRasterWindow_trUtf8(char const * s, char const * c, int n) {
  return new QString(QRasterWindow::trUtf8(s, c, n));
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_QRasterWindow_QRasterWindow(QWindow * parent) {
  return new QRasterWindow(parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRasterWindow_dQRasterWindow(QRasterWindow * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QScreen_metaObject(QScreen const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QScreen_qt_metacast(QScreen * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QScreen_qt_metacall(QScreen * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_tr(char const * s, char const * c, int n) {
  return new QString(QScreen::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_trUtf8(char const * s, char const * c, int n) {
  return new QString(QScreen::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScreen_dQScreen(QScreen * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_name(QScreen const * this_ptr) {
  return new QString(this_ptr->name());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_manufacturer(QScreen const * this_ptr) {
  return new QString(this_ptr->manufacturer());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_model(QScreen const * this_ptr) {
  return new QString(this_ptr->model());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QScreen_serialNumber(QScreen const * this_ptr) {
  return new QString(this_ptr->serialNumber());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QScreen_depth(QScreen const * this_ptr) {
  return this_ptr->depth();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QScreen_size(QScreen const * this_ptr) {
  return new QSize(this_ptr->size());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QScreen_geometry(QScreen const * this_ptr) {
  return new QRect(this_ptr->geometry());
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QScreen_physicalSize(QScreen const * this_ptr) {
  return new QSizeF(this_ptr->physicalSize());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_physicalDotsPerInchX(QScreen const * this_ptr) {
  return this_ptr->physicalDotsPerInchX();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_physicalDotsPerInchY(QScreen const * this_ptr) {
  return this_ptr->physicalDotsPerInchY();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_physicalDotsPerInch(QScreen const * this_ptr) {
  return this_ptr->physicalDotsPerInch();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_logicalDotsPerInchX(QScreen const * this_ptr) {
  return this_ptr->logicalDotsPerInchX();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_logicalDotsPerInchY(QScreen const * this_ptr) {
  return this_ptr->logicalDotsPerInchY();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_logicalDotsPerInch(QScreen const * this_ptr) {
  return this_ptr->logicalDotsPerInch();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_devicePixelRatio(QScreen const * this_ptr) {
  return this_ptr->devicePixelRatio();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QScreen_availableSize(QScreen const * this_ptr) {
  return new QSize(this_ptr->availableSize());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QScreen_availableGeometry(QScreen const * this_ptr) {
  return new QRect(this_ptr->availableGeometry());
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QScreen_virtualSiblings(QScreen const * this_ptr) {
  return new QList< QScreen * >(this_ptr->virtualSiblings());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QScreen_virtualSize(QScreen const * this_ptr) {
  return new QSize(this_ptr->virtualSize());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QScreen_virtualGeometry(QScreen const * this_ptr) {
  return new QRect(this_ptr->virtualGeometry());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QScreen_availableVirtualSize(QScreen const * this_ptr) {
  return new QSize(this_ptr->availableVirtualSize());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QScreen_availableVirtualGeometry(QScreen const * this_ptr) {
  return new QRect(this_ptr->availableVirtualGeometry());
}


RITUAL_EXPORT Qt::ScreenOrientation ctr_qt_gui_ffi_QScreen_primaryOrientation(QScreen const * this_ptr) {
  return this_ptr->primaryOrientation();
}


RITUAL_EXPORT Qt::ScreenOrientation ctr_qt_gui_ffi_QScreen_orientation(QScreen const * this_ptr) {
  return this_ptr->orientation();
}


RITUAL_EXPORT Qt::ScreenOrientation ctr_qt_gui_ffi_QScreen_nativeOrientation(QScreen const * this_ptr) {
  return this_ptr->nativeOrientation();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QScreen_orientationUpdateMask(QScreen const * this_ptr) {
  return int(this_ptr->orientationUpdateMask());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QScreen_setOrientationUpdateMask(QScreen * this_ptr, int mask) {
  this_ptr->setOrientationUpdateMask(QFlags< Qt::ScreenOrientation >(mask));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QScreen_angleBetween(QScreen const * this_ptr, Qt::ScreenOrientation a, Qt::ScreenOrientation b) {
  return this_ptr->angleBetween(a, b);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QScreen_transformBetween(QScreen const * this_ptr, Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect const * target) {
  return new QTransform(this_ptr->transformBetween(a, b, *target));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QScreen_mapBetween(QScreen const * this_ptr, Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect const * rect) {
  return new QRect(this_ptr->mapBetween(a, b, *rect));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QScreen_isPortrait(QScreen const * this_ptr, Qt::ScreenOrientation orientation) {
  return this_ptr->isPortrait(orientation);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QScreen_isLandscape(QScreen const * this_ptr, Qt::ScreenOrientation orientation) {
  return this_ptr->isLandscape(orientation);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QScreen_grabWindow(QScreen * this_ptr, unsigned long long window, int x, int y, int w, int h) {
  return new QPixmap(this_ptr->grabWindow(window, x, y, w, h));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QScreen_refreshRate(QScreen const * this_ptr) {
  return this_ptr->refreshRate();
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__105(QDebug const * arg1, QScreen const * arg2) {
  return new QDebug(operator<<(*arg1, arg2));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSessionManager_metaObject(QSessionManager const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QSessionManager_qt_metacast(QSessionManager * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSessionManager_qt_metacall(QSessionManager * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSessionManager_tr(char const * s, char const * c, int n) {
  return new QString(QSessionManager::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSessionManager_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSessionManager::trUtf8(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSessionManager_sessionId(QSessionManager const * this_ptr) {
  return new QString(this_ptr->sessionId());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSessionManager_sessionKey(QSessionManager const * this_ptr) {
  return new QString(this_ptr->sessionKey());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSessionManager_allowsInteraction(QSessionManager * this_ptr) {
  return this_ptr->allowsInteraction();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSessionManager_allowsErrorInteraction(QSessionManager * this_ptr) {
  return this_ptr->allowsErrorInteraction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_release(QSessionManager * this_ptr) {
  this_ptr->release();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_cancel(QSessionManager * this_ptr) {
  this_ptr->cancel();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_setRestartHint(QSessionManager * this_ptr, QSessionManager::RestartHint arg1) {
  this_ptr->setRestartHint(arg1);
}


RITUAL_EXPORT QSessionManager::RestartHint ctr_qt_gui_ffi_QSessionManager_restartHint(QSessionManager const * this_ptr) {
  return this_ptr->restartHint();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_setRestartCommand(QSessionManager * this_ptr, QStringList const * arg1) {
  this_ptr->setRestartCommand(*arg1);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QSessionManager_restartCommand(QSessionManager const * this_ptr) {
  return new QStringList(this_ptr->restartCommand());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_setDiscardCommand(QSessionManager * this_ptr, QStringList const * arg1) {
  this_ptr->setDiscardCommand(*arg1);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QSessionManager_discardCommand(QSessionManager const * this_ptr) {
  return new QStringList(this_ptr->discardCommand());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_setManagerProperty(QSessionManager * this_ptr, QString const * name, QString const * value) {
  this_ptr->setManagerProperty(*name, *value);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_setManagerProperty1(QSessionManager * this_ptr, QString const * name, QStringList const * value) {
  this_ptr->setManagerProperty(*name, *value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSessionManager_isPhase2(QSessionManager const * this_ptr) {
  return this_ptr->isPhase2();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSessionManager_requestPhase2(QSessionManager * this_ptr) {
  this_ptr->requestPhase2();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_QStandardItem() {
  return new QStandardItem();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_QStandardItem1(QString const * text) {
  return new QStandardItem(*text);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_QStandardItem2(QIcon const * icon, QString const * text) {
  return new QStandardItem(*icon, *text);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_QStandardItem3(int rows, int columns) {
  return new QStandardItem(rows, columns);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_dQStandardItem(QStandardItem * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItem_data(QStandardItem const * this_ptr, int role) {
  return new QVariant(this_ptr->data(role));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setData(QStandardItem * this_ptr, QVariant const * value, int role) {
  this_ptr->setData(*value, role);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_text(QStandardItem const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setText(QStandardItem * this_ptr, QString const * text) {
  this_ptr->setText(*text);
}


RITUAL_EXPORT QIcon * ctr_qt_gui_ffi_QStandardItem_icon(QStandardItem const * this_ptr) {
  return new QIcon(this_ptr->icon());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setIcon(QStandardItem * this_ptr, QIcon const * icon) {
  this_ptr->setIcon(*icon);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_toolTip(QStandardItem const * this_ptr) {
  return new QString(this_ptr->toolTip());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setToolTip(QStandardItem * this_ptr, QString const * toolTip) {
  this_ptr->setToolTip(*toolTip);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_statusTip(QStandardItem const * this_ptr) {
  return new QString(this_ptr->statusTip());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setStatusTip(QStandardItem * this_ptr, QString const * statusTip) {
  this_ptr->setStatusTip(*statusTip);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_whatsThis(QStandardItem const * this_ptr) {
  return new QString(this_ptr->whatsThis());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setWhatsThis(QStandardItem * this_ptr, QString const * whatsThis) {
  this_ptr->setWhatsThis(*whatsThis);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QStandardItem_sizeHint(QStandardItem const * this_ptr) {
  return new QSize(this_ptr->sizeHint());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setSizeHint(QStandardItem * this_ptr, QSize const * sizeHint) {
  this_ptr->setSizeHint(*sizeHint);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QStandardItem_font(QStandardItem const * this_ptr) {
  return new QFont(this_ptr->font());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setFont(QStandardItem * this_ptr, QFont const * font) {
  this_ptr->setFont(*font);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_textAlignment(QStandardItem const * this_ptr) {
  return int(this_ptr->textAlignment());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setTextAlignment(QStandardItem * this_ptr, int textAlignment) {
  this_ptr->setTextAlignment(QFlags< Qt::AlignmentFlag >(textAlignment));
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QStandardItem_background(QStandardItem const * this_ptr) {
  return new QBrush(this_ptr->background());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setBackground(QStandardItem * this_ptr, QBrush const * brush) {
  this_ptr->setBackground(*brush);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QStandardItem_foreground(QStandardItem const * this_ptr) {
  return new QBrush(this_ptr->foreground());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setForeground(QStandardItem * this_ptr, QBrush const * brush) {
  this_ptr->setForeground(*brush);
}


RITUAL_EXPORT Qt::CheckState ctr_qt_gui_ffi_QStandardItem_checkState(QStandardItem const * this_ptr) {
  return this_ptr->checkState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setCheckState(QStandardItem * this_ptr, Qt::CheckState checkState) {
  this_ptr->setCheckState(checkState);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_accessibleText(QStandardItem const * this_ptr) {
  return new QString(this_ptr->accessibleText());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setAccessibleText(QStandardItem * this_ptr, QString const * accessibleText) {
  this_ptr->setAccessibleText(*accessibleText);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItem_accessibleDescription(QStandardItem const * this_ptr) {
  return new QString(this_ptr->accessibleDescription());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setAccessibleDescription(QStandardItem * this_ptr, QString const * accessibleDescription) {
  this_ptr->setAccessibleDescription(*accessibleDescription);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_flags(QStandardItem const * this_ptr) {
  return int(this_ptr->flags());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setFlags(QStandardItem * this_ptr, int flags) {
  this_ptr->setFlags(QFlags< Qt::ItemFlag >(flags));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isEnabled(QStandardItem const * this_ptr) {
  return this_ptr->isEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setEnabled(QStandardItem * this_ptr, bool enabled) {
  this_ptr->setEnabled(enabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isEditable(QStandardItem const * this_ptr) {
  return this_ptr->isEditable();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setEditable(QStandardItem * this_ptr, bool editable) {
  this_ptr->setEditable(editable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isSelectable(QStandardItem const * this_ptr) {
  return this_ptr->isSelectable();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setSelectable(QStandardItem * this_ptr, bool selectable) {
  this_ptr->setSelectable(selectable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isCheckable(QStandardItem const * this_ptr) {
  return this_ptr->isCheckable();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setCheckable(QStandardItem * this_ptr, bool checkable) {
  this_ptr->setCheckable(checkable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isAutoTristate(QStandardItem const * this_ptr) {
  return this_ptr->isAutoTristate();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setAutoTristate(QStandardItem * this_ptr, bool tristate) {
  this_ptr->setAutoTristate(tristate);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isUserTristate(QStandardItem const * this_ptr) {
  return this_ptr->isUserTristate();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setUserTristate(QStandardItem * this_ptr, bool tristate) {
  this_ptr->setUserTristate(tristate);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isTristate(QStandardItem const * this_ptr) {
  return this_ptr->isTristate();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setTristate(QStandardItem * this_ptr, bool tristate) {
  this_ptr->setTristate(tristate);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isDragEnabled(QStandardItem const * this_ptr) {
  return this_ptr->isDragEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setDragEnabled(QStandardItem * this_ptr, bool dragEnabled) {
  this_ptr->setDragEnabled(dragEnabled);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_isDropEnabled(QStandardItem const * this_ptr) {
  return this_ptr->isDropEnabled();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setDropEnabled(QStandardItem * this_ptr, bool dropEnabled) {
  this_ptr->setDropEnabled(dropEnabled);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_parent(QStandardItem const * this_ptr) {
  return this_ptr->parent();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_row(QStandardItem const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_column(QStandardItem const * this_ptr) {
  return this_ptr->column();
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItem_index(QStandardItem const * this_ptr) {
  return new QModelIndex(this_ptr->index());
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_QStandardItem_model(QStandardItem const * this_ptr) {
  return this_ptr->model();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_rowCount(QStandardItem const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setRowCount(QStandardItem * this_ptr, int rows) {
  this_ptr->setRowCount(rows);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_columnCount(QStandardItem const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setColumnCount(QStandardItem * this_ptr, int columns) {
  this_ptr->setColumnCount(columns);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_hasChildren(QStandardItem const * this_ptr) {
  return this_ptr->hasChildren();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_child(QStandardItem const * this_ptr, int row, int column) {
  return this_ptr->child(row, column);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setChild(QStandardItem * this_ptr, int row, int column, QStandardItem * item) {
  this_ptr->setChild(row, column, item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setChild1(QStandardItem * this_ptr, int row, QStandardItem * item) {
  this_ptr->setChild(row, item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertRow(QStandardItem * this_ptr, int row, QList< QStandardItem * > const * items) {
  this_ptr->insertRow(row, *items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertColumn(QStandardItem * this_ptr, int column, QList< QStandardItem * > const * items) {
  this_ptr->insertColumn(column, *items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertRows(QStandardItem * this_ptr, int row, QList< QStandardItem * > const * items) {
  this_ptr->insertRows(row, *items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertRows1(QStandardItem * this_ptr, int row, int count) {
  this_ptr->insertRows(row, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertColumns(QStandardItem * this_ptr, int column, int count) {
  this_ptr->insertColumns(column, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_removeRow(QStandardItem * this_ptr, int row) {
  this_ptr->removeRow(row);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_removeColumn(QStandardItem * this_ptr, int column) {
  this_ptr->removeColumn(column);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_removeRows(QStandardItem * this_ptr, int row, int count) {
  this_ptr->removeRows(row, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_removeColumns(QStandardItem * this_ptr, int column, int count) {
  this_ptr->removeColumns(column, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_appendRow(QStandardItem * this_ptr, QList< QStandardItem * > const * items) {
  this_ptr->appendRow(*items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_appendRows(QStandardItem * this_ptr, QList< QStandardItem * > const * items) {
  this_ptr->appendRows(*items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_appendColumn(QStandardItem * this_ptr, QList< QStandardItem * > const * items) {
  this_ptr->appendColumn(*items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_insertRow1(QStandardItem * this_ptr, int row, QStandardItem * item) {
  this_ptr->insertRow(row, item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_appendRow1(QStandardItem * this_ptr, QStandardItem * item) {
  this_ptr->appendRow(item);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_takeChild(QStandardItem * this_ptr, int row, int column) {
  return this_ptr->takeChild(row, column);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItem_takeRow(QStandardItem * this_ptr, int row) {
  return new QList< QStandardItem * >(this_ptr->takeRow(row));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItem_takeColumn(QStandardItem * this_ptr, int column) {
  return new QList< QStandardItem * >(this_ptr->takeColumn(column));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_sortChildren(QStandardItem * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sortChildren(column, order);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_clone(QStandardItem const * this_ptr) {
  return this_ptr->clone();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItem_type(QStandardItem const * this_ptr) {
  return this_ptr->type();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_read(QStandardItem * this_ptr, QDataStream * in) {
  this_ptr->read(*in);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_write(QStandardItem const * this_ptr, QDataStream * out) {
  this_ptr->write(*out);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItem_operator_(QStandardItem const * this_ptr, QStandardItem const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QStandardItemModel_metaObject(QStandardItemModel const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QStandardItemModel_qt_metacast(QStandardItemModel * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_qt_metacall(QStandardItemModel * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItemModel_tr(char const * s, char const * c, int n) {
  return new QString(QStandardItemModel::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStandardItemModel_trUtf8(char const * s, char const * c, int n) {
  return new QString(QStandardItemModel::trUtf8(s, c, n));
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_QStandardItemModel_QStandardItemModel(QObject * parent) {
  return new QStandardItemModel(parent);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_QStandardItemModel_QStandardItemModel1(int rows, int columns, QObject * parent) {
  return new QStandardItemModel(rows, columns, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_dQStandardItemModel(QStandardItemModel * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setItemRoleNames(QStandardItemModel * this_ptr, QHash< int, QByteArray > const * roleNames) {
  this_ptr->setItemRoleNames(*roleNames);
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItemModel_index(QStandardItemModel const * this_ptr, int row, int column, QModelIndex const * parent) {
  return new QModelIndex(this_ptr->index(row, column, *parent));
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItemModel_parent(QStandardItemModel const * this_ptr, QModelIndex const * child) {
  return new QModelIndex(this_ptr->parent(*child));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_rowCount(QStandardItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->rowCount(*parent);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_columnCount(QStandardItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->columnCount(*parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_hasChildren(QStandardItemModel const * this_ptr, QModelIndex const * parent) {
  return this_ptr->hasChildren(*parent);
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItemModel_sibling(QStandardItemModel const * this_ptr, int row, int column, QModelIndex const * idx) {
  return new QModelIndex(this_ptr->sibling(row, column, *idx));
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItemModel_data(QStandardItemModel const * this_ptr, QModelIndex const * index, int role) {
  return new QVariant(this_ptr->data(*index, role));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_setData(QStandardItemModel * this_ptr, QModelIndex const * index, QVariant const * value, int role) {
  return this_ptr->setData(*index, *value, role);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItemModel_headerData(QStandardItemModel const * this_ptr, int section, Qt::Orientation orientation, int role) {
  return new QVariant(this_ptr->headerData(section, orientation, role));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_setHeaderData(QStandardItemModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value, int role) {
  return this_ptr->setHeaderData(section, orientation, *value, role);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertRows(QStandardItemModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->insertRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertColumns(QStandardItemModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->insertColumns(column, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_removeRows(QStandardItemModel * this_ptr, int row, int count, QModelIndex const * parent) {
  return this_ptr->removeRows(row, count, *parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_removeColumns(QStandardItemModel * this_ptr, int column, int count, QModelIndex const * parent) {
  return this_ptr->removeColumns(column, count, *parent);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_flags(QStandardItemModel const * this_ptr, QModelIndex const * index) {
  return int(this_ptr->flags(*index));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_supportedDropActions(QStandardItemModel const * this_ptr) {
  return int(this_ptr->supportedDropActions());
}


RITUAL_EXPORT QMap< int, QVariant > * ctr_qt_gui_ffi_QStandardItemModel_itemData(QStandardItemModel const * this_ptr, QModelIndex const * index) {
  return new QMap< int, QVariant >(this_ptr->itemData(*index));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_setItemData(QStandardItemModel * this_ptr, QModelIndex const * index, QMap< int, QVariant > const * roles) {
  return this_ptr->setItemData(*index, *roles);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_clear(QStandardItemModel * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_sort(QStandardItemModel * this_ptr, int column, Qt::SortOrder order) {
  this_ptr->sort(column, order);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_itemFromIndex(QStandardItemModel const * this_ptr, QModelIndex const * index) {
  return this_ptr->itemFromIndex(*index);
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItemModel_indexFromItem(QStandardItemModel const * this_ptr, QStandardItem const * item) {
  return new QModelIndex(this_ptr->indexFromItem(item));
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_item(QStandardItemModel const * this_ptr, int row, int column) {
  return this_ptr->item(row, column);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setItem(QStandardItemModel * this_ptr, int row, int column, QStandardItem * item) {
  this_ptr->setItem(row, column, item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setItem1(QStandardItemModel * this_ptr, int row, QStandardItem * item) {
  this_ptr->setItem(row, item);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_invisibleRootItem(QStandardItemModel const * this_ptr) {
  return this_ptr->invisibleRootItem();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_horizontalHeaderItem(QStandardItemModel const * this_ptr, int column) {
  return this_ptr->horizontalHeaderItem(column);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setHorizontalHeaderItem(QStandardItemModel * this_ptr, int column, QStandardItem * item) {
  this_ptr->setHorizontalHeaderItem(column, item);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_verticalHeaderItem(QStandardItemModel const * this_ptr, int row) {
  return this_ptr->verticalHeaderItem(row);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setVerticalHeaderItem(QStandardItemModel * this_ptr, int row, QStandardItem * item) {
  this_ptr->setVerticalHeaderItem(row, item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setHorizontalHeaderLabels(QStandardItemModel * this_ptr, QStringList const * labels) {
  this_ptr->setHorizontalHeaderLabels(*labels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setVerticalHeaderLabels(QStandardItemModel * this_ptr, QStringList const * labels) {
  this_ptr->setVerticalHeaderLabels(*labels);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setRowCount(QStandardItemModel * this_ptr, int rows) {
  this_ptr->setRowCount(rows);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setColumnCount(QStandardItemModel * this_ptr, int columns) {
  this_ptr->setColumnCount(columns);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_appendRow(QStandardItemModel * this_ptr, QList< QStandardItem * > const * items) {
  this_ptr->appendRow(*items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_appendColumn(QStandardItemModel * this_ptr, QList< QStandardItem * > const * items) {
  this_ptr->appendColumn(*items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_appendRow1(QStandardItemModel * this_ptr, QStandardItem * item) {
  this_ptr->appendRow(item);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_insertRow(QStandardItemModel * this_ptr, int row, QList< QStandardItem * > const * items) {
  this_ptr->insertRow(row, *items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_insertColumn(QStandardItemModel * this_ptr, int column, QList< QStandardItem * > const * items) {
  this_ptr->insertColumn(column, *items);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_insertRow1(QStandardItemModel * this_ptr, int row, QStandardItem * item) {
  this_ptr->insertRow(row, item);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertRow2(QStandardItemModel * this_ptr, int row, QModelIndex const * parent) {
  return this_ptr->insertRow(row, *parent);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertColumn1(QStandardItemModel * this_ptr, int column, QModelIndex const * parent) {
  return this_ptr->insertColumn(column, *parent);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_takeItem(QStandardItemModel * this_ptr, int row, int column) {
  return this_ptr->takeItem(row, column);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItemModel_takeRow(QStandardItemModel * this_ptr, int row) {
  return new QList< QStandardItem * >(this_ptr->takeRow(row));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItemModel_takeColumn(QStandardItemModel * this_ptr, int column) {
  return new QList< QStandardItem * >(this_ptr->takeColumn(column));
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_takeHorizontalHeaderItem(QStandardItemModel * this_ptr, int column) {
  return this_ptr->takeHorizontalHeaderItem(column);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_takeVerticalHeaderItem(QStandardItemModel * this_ptr, int row) {
  return this_ptr->takeVerticalHeaderItem(row);
}


RITUAL_EXPORT QStandardItem const * ctr_qt_gui_ffi_QStandardItemModel_itemPrototype(QStandardItemModel const * this_ptr) {
  return this_ptr->itemPrototype();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setItemPrototype(QStandardItemModel * this_ptr, QStandardItem const * item) {
  this_ptr->setItemPrototype(item);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItemModel_findItems(QStandardItemModel const * this_ptr, QString const * text, int flags, int column) {
  return new QList< QStandardItem * >(this_ptr->findItems(*text, QFlags< Qt::MatchFlag >(flags), column));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_sortRole(QStandardItemModel const * this_ptr) {
  return this_ptr->sortRole();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_setSortRole(QStandardItemModel * this_ptr, int role) {
  this_ptr->setSortRole(role);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QStandardItemModel_mimeTypes(QStandardItemModel const * this_ptr) {
  return new QStringList(this_ptr->mimeTypes());
}


RITUAL_EXPORT QMimeData * ctr_qt_gui_ffi_QStandardItemModel_mimeData(QStandardItemModel const * this_ptr, QList< QModelIndex > const * indexes) {
  return this_ptr->mimeData(*indexes);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_dropMimeData(QStandardItemModel * this_ptr, QMimeData const * data, Qt::DropAction action, int row, int column, QModelIndex const * parent) {
  return this_ptr->dropMimeData(data, action, row, column, *parent);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__106(QDataStream * in, QStandardItem * item) {
  return &operator>>(*in, *item);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__107(QDataStream * out, QStandardItem const * item) {
  return &operator<<(*out, *item);
}


RITUAL_EXPORT QStaticText * ctr_qt_gui_ffi_QStaticText_QStaticText() {
  return new QStaticText();
}


RITUAL_EXPORT QStaticText * ctr_qt_gui_ffi_QStaticText_QStaticText1(QString const * text) {
  return new QStaticText(*text);
}


RITUAL_EXPORT QStaticText * ctr_qt_gui_ffi_QStaticText_QStaticText2(QStaticText const * other) {
  return new QStaticText(*other);
}


RITUAL_EXPORT QStaticText * ctr_qt_gui_ffi_QStaticText_operator_1(QStaticText * this_ptr, QStaticText const * arg1) {
  return &this_ptr->operator=(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_dQStaticText(QStaticText * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_swap(QStaticText * this_ptr, QStaticText * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_setText(QStaticText * this_ptr, QString const * text) {
  this_ptr->setText(*text);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStaticText_text(QStaticText const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_setTextFormat(QStaticText * this_ptr, Qt::TextFormat textFormat) {
  this_ptr->setTextFormat(textFormat);
}


RITUAL_EXPORT Qt::TextFormat ctr_qt_gui_ffi_QStaticText_textFormat(QStaticText const * this_ptr) {
  return this_ptr->textFormat();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_setTextWidth(QStaticText * this_ptr, double textWidth) {
  this_ptr->setTextWidth(textWidth);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QStaticText_textWidth(QStaticText const * this_ptr) {
  return this_ptr->textWidth();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_setTextOption(QStaticText * this_ptr, QTextOption const * textOption) {
  this_ptr->setTextOption(*textOption);
}


RITUAL_EXPORT QTextOption * ctr_qt_gui_ffi_QStaticText_textOption(QStaticText const * this_ptr) {
  return new QTextOption(this_ptr->textOption());
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QStaticText_size(QStaticText const * this_ptr) {
  return new QSizeF(this_ptr->size());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_prepare(QStaticText * this_ptr, QTransform const * matrix, QFont const * font) {
  this_ptr->prepare(*matrix, *font);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_setPerformanceHint(QStaticText * this_ptr, QStaticText::PerformanceHint performanceHint) {
  this_ptr->setPerformanceHint(performanceHint);
}


RITUAL_EXPORT QStaticText::PerformanceHint ctr_qt_gui_ffi_QStaticText_performanceHint(QStaticText const * this_ptr) {
  return this_ptr->performanceHint();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStaticText_operator__(QStaticText const * this_ptr, QStaticText const * arg1) {
  return this_ptr->operator==(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_swap34(QStaticText * value1, QStaticText * value2) {
  swap(*value1, *value2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QStyleHints_metaObject(QStyleHints const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QStyleHints_qt_metacast(QStyleHints * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_qt_metacall(QStyleHints * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStyleHints_tr(char const * s, char const * c, int n) {
  return new QString(QStyleHints::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QStyleHints_trUtf8(char const * s, char const * c, int n) {
  return new QString(QStyleHints::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setMouseDoubleClickInterval(QStyleHints * this_ptr, int mouseDoubleClickInterval) {
  this_ptr->setMouseDoubleClickInterval(mouseDoubleClickInterval);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_mouseDoubleClickInterval(QStyleHints const * this_ptr) {
  return this_ptr->mouseDoubleClickInterval();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setMousePressAndHoldInterval(QStyleHints * this_ptr, int mousePressAndHoldInterval) {
  this_ptr->setMousePressAndHoldInterval(mousePressAndHoldInterval);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_mousePressAndHoldInterval(QStyleHints const * this_ptr) {
  return this_ptr->mousePressAndHoldInterval();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setStartDragDistance(QStyleHints * this_ptr, int startDragDistance) {
  this_ptr->setStartDragDistance(startDragDistance);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_startDragDistance(QStyleHints const * this_ptr) {
  return this_ptr->startDragDistance();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setStartDragTime(QStyleHints * this_ptr, int startDragTime) {
  this_ptr->setStartDragTime(startDragTime);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_startDragTime(QStyleHints const * this_ptr) {
  return this_ptr->startDragTime();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_startDragVelocity(QStyleHints const * this_ptr) {
  return this_ptr->startDragVelocity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setKeyboardInputInterval(QStyleHints * this_ptr, int keyboardInputInterval) {
  this_ptr->setKeyboardInputInterval(keyboardInputInterval);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_keyboardInputInterval(QStyleHints const * this_ptr) {
  return this_ptr->keyboardInputInterval();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_keyboardAutoRepeatRate(QStyleHints const * this_ptr) {
  return this_ptr->keyboardAutoRepeatRate();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setCursorFlashTime(QStyleHints * this_ptr, int cursorFlashTime) {
  this_ptr->setCursorFlashTime(cursorFlashTime);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_cursorFlashTime(QStyleHints const * this_ptr) {
  return this_ptr->cursorFlashTime();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_showIsFullScreen(QStyleHints const * this_ptr) {
  return this_ptr->showIsFullScreen();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_showIsMaximized(QStyleHints const * this_ptr) {
  return this_ptr->showIsMaximized();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_passwordMaskDelay(QStyleHints const * this_ptr) {
  return this_ptr->passwordMaskDelay();
}


RITUAL_EXPORT QChar * ctr_qt_gui_ffi_QStyleHints_passwordMaskCharacter(QStyleHints const * this_ptr) {
  return new QChar(this_ptr->passwordMaskCharacter());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QStyleHints_fontSmoothingGamma(QStyleHints const * this_ptr) {
  return this_ptr->fontSmoothingGamma();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_useRtlExtensions(QStyleHints const * this_ptr) {
  return this_ptr->useRtlExtensions();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_setFocusOnTouchRelease(QStyleHints const * this_ptr) {
  return this_ptr->setFocusOnTouchRelease();
}


RITUAL_EXPORT Qt::TabFocusBehavior ctr_qt_gui_ffi_QStyleHints_tabFocusBehavior(QStyleHints const * this_ptr) {
  return this_ptr->tabFocusBehavior();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setTabFocusBehavior(QStyleHints * this_ptr, Qt::TabFocusBehavior tabFocusBehavior) {
  this_ptr->setTabFocusBehavior(tabFocusBehavior);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_singleClickActivation(QStyleHints const * this_ptr) {
  return this_ptr->singleClickActivation();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_useHoverEffects(QStyleHints const * this_ptr) {
  return this_ptr->useHoverEffects();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setUseHoverEffects(QStyleHints * this_ptr, bool useHoverEffects) {
  this_ptr->setUseHoverEffects(useHoverEffects);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_wheelScrollLines(QStyleHints const * this_ptr) {
  return this_ptr->wheelScrollLines();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setWheelScrollLines(QStyleHints * this_ptr, int scrollLines) {
  this_ptr->setWheelScrollLines(scrollLines);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextObject_metaObject(QTextObject const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextObject_qt_metacast(QTextObject * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextObject_qt_metacall(QTextObject * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextObject_tr(char const * s, char const * c, int n) {
  return new QString(QTextObject::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextObject_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextObject::trUtf8(s, c, n));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QTextObject_format(QTextObject const * this_ptr) {
  return new QTextFormat(this_ptr->format());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextObject_formatIndex(QTextObject const * this_ptr) {
  return this_ptr->formatIndex();
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextObject_document(QTextObject const * this_ptr) {
  return this_ptr->document();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextObject_objectIndex(QTextObject const * this_ptr) {
  return this_ptr->objectIndex();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextBlockGroup_metaObject(QTextBlockGroup const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextBlockGroup_qt_metacast(QTextBlockGroup * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockGroup_qt_metacall(QTextBlockGroup * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextBlockGroup_tr(char const * s, char const * c, int n) {
  return new QString(QTextBlockGroup::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextBlockGroup_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextBlockGroup::trUtf8(s, c, n));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextFrame_metaObject(QTextFrame const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextFrame_qt_metacast(QTextFrame * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFrame_qt_metacall(QTextFrame * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextFrame_tr(char const * s, char const * c, int n) {
  return new QString(QTextFrame::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextFrame_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextFrame::trUtf8(s, c, n));
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextFrame_QTextFrame(QTextDocument * doc) {
  return new QTextFrame(doc);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrame_dQTextFrame(QTextFrame * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrame_setFrameFormat(QTextFrame * this_ptr, QTextFrameFormat const * format) {
  this_ptr->setFrameFormat(*format);
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_QTextFrame_frameFormat(QTextFrame const * this_ptr) {
  return new QTextFrameFormat(this_ptr->frameFormat());
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextFrame_firstCursorPosition(QTextFrame const * this_ptr) {
  return new QTextCursor(this_ptr->firstCursorPosition());
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextFrame_lastCursorPosition(QTextFrame const * this_ptr) {
  return new QTextCursor(this_ptr->lastCursorPosition());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFrame_firstPosition(QTextFrame const * this_ptr) {
  return this_ptr->firstPosition();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFrame_lastPosition(QTextFrame const * this_ptr) {
  return this_ptr->lastPosition();
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QTextFrame_childFrames(QTextFrame const * this_ptr) {
  return new QList< QTextFrame * >(this_ptr->childFrames());
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextFrame_parentFrame(QTextFrame const * this_ptr) {
  return this_ptr->parentFrame();
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_iterator() {
  return new QTextFrame::iterator();
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_iterator1(QTextFrame::iterator const * o) {
  return new QTextFrame::iterator(*o);
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_operator_(QTextFrame::iterator * this_ptr, QTextFrame::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextFrame_iterator_parentFrame(QTextFrame::iterator const * this_ptr) {
  return this_ptr->parentFrame();
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QTextFrame_iterator_currentFrame(QTextFrame::iterator const * this_ptr) {
  return this_ptr->currentFrame();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextFrame_iterator_currentBlock(QTextFrame::iterator const * this_ptr) {
  return new QTextBlock(this_ptr->currentBlock());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFrame_iterator_atEnd(QTextFrame::iterator const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFrame_iterator_operator__(QTextFrame::iterator const * this_ptr, QTextFrame::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_operator__2(QTextFrame::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_operator__3(QTextFrame::iterator * this_ptr, int arg1) {
  return new QTextFrame::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_operator__4(QTextFrame::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_iterator_operator__5(QTextFrame::iterator * this_ptr, int arg1) {
  return new QTextFrame::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_begin(QTextFrame const * this_ptr) {
  return new QTextFrame::iterator(this_ptr->begin());
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextFrame_end(QTextFrame const * this_ptr) {
  return new QTextFrame::iterator(this_ptr->end());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockUserData_dQTextBlockUserData(QTextBlockUserData * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextBlock_QTextBlock1() {
  return new QTextBlock();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextBlock_QTextBlock2(QTextBlock const * o) {
  return new QTextBlock(*o);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextBlock_operator_(QTextBlock * this_ptr, QTextBlock const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_isValid(QTextBlock const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_operator__(QTextBlock const * this_ptr, QTextBlock const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_operator_1(QTextBlock const * this_ptr, QTextBlock const * o) {
  return this_ptr->operator<(*o);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_position(QTextBlock const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_length(QTextBlock const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_contains(QTextBlock const * this_ptr, int position) {
  return this_ptr->contains(position);
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextBlock_layout(QTextBlock const * this_ptr) {
  return this_ptr->layout();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_clearLayout(QTextBlock * this_ptr) {
  this_ptr->clearLayout();
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextBlock_blockFormat(QTextBlock const * this_ptr) {
  return new QTextBlockFormat(this_ptr->blockFormat());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_blockFormatIndex(QTextBlock const * this_ptr) {
  return this_ptr->blockFormatIndex();
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextBlock_charFormat(QTextBlock const * this_ptr) {
  return new QTextCharFormat(this_ptr->charFormat());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_charFormatIndex(QTextBlock const * this_ptr) {
  return this_ptr->charFormatIndex();
}


RITUAL_EXPORT Qt::LayoutDirection ctr_qt_gui_ffi_QTextBlock_textDirection(QTextBlock const * this_ptr) {
  return this_ptr->textDirection();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextBlock_text(QTextBlock const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QTextBlock_textFormats(QTextBlock const * this_ptr) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->textFormats());
}


RITUAL_EXPORT QTextDocument const * ctr_qt_gui_ffi_QTextBlock_document(QTextBlock const * this_ptr) {
  return this_ptr->document();
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextBlock_textList(QTextBlock const * this_ptr) {
  return this_ptr->textList();
}


RITUAL_EXPORT QTextBlockUserData * ctr_qt_gui_ffi_QTextBlock_userData(QTextBlock const * this_ptr) {
  return this_ptr->userData();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_setUserData(QTextBlock * this_ptr, QTextBlockUserData * data) {
  this_ptr->setUserData(data);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_userState(QTextBlock const * this_ptr) {
  return this_ptr->userState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_setUserState(QTextBlock * this_ptr, int state) {
  this_ptr->setUserState(state);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_revision(QTextBlock const * this_ptr) {
  return this_ptr->revision();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_setRevision(QTextBlock * this_ptr, int rev) {
  this_ptr->setRevision(rev);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_isVisible(QTextBlock const * this_ptr) {
  return this_ptr->isVisible();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_setVisible(QTextBlock * this_ptr, bool visible) {
  this_ptr->setVisible(visible);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_blockNumber(QTextBlock const * this_ptr) {
  return this_ptr->blockNumber();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_firstLineNumber(QTextBlock const * this_ptr) {
  return this_ptr->firstLineNumber();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_setLineCount(QTextBlock * this_ptr, int count) {
  this_ptr->setLineCount(count);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_lineCount(QTextBlock const * this_ptr) {
  return this_ptr->lineCount();
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_iterator() {
  return new QTextBlock::iterator();
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_iterator1(QTextBlock::iterator const * o) {
  return new QTextBlock::iterator(*o);
}


RITUAL_EXPORT QTextFragment * ctr_qt_gui_ffi_QTextBlock_iterator_fragment(QTextBlock::iterator const * this_ptr) {
  return new QTextFragment(this_ptr->fragment());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_iterator_atEnd(QTextBlock::iterator const * this_ptr) {
  return this_ptr->atEnd();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextBlock_iterator_operator__(QTextBlock::iterator const * this_ptr, QTextBlock::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_operator__2(QTextBlock::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_operator__3(QTextBlock::iterator * this_ptr, int arg1) {
  return new QTextBlock::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_operator__4(QTextBlock::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_operator__5(QTextBlock::iterator * this_ptr, int arg1) {
  return new QTextBlock::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_begin(QTextBlock const * this_ptr) {
  return new QTextBlock::iterator(this_ptr->begin());
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_end(QTextBlock const * this_ptr) {
  return new QTextBlock::iterator(this_ptr->end());
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextBlock_next(QTextBlock const * this_ptr) {
  return new QTextBlock(this_ptr->next());
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextBlock_previous(QTextBlock const * this_ptr) {
  return new QTextBlock(this_ptr->previous());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlock_fragmentIndex(QTextBlock const * this_ptr) {
  return this_ptr->fragmentIndex();
}


RITUAL_EXPORT QTextFragment * ctr_qt_gui_ffi_QTextFragment_QTextFragment1() {
  return new QTextFragment();
}


RITUAL_EXPORT QTextFragment * ctr_qt_gui_ffi_QTextFragment_QTextFragment2(QTextFragment const * o) {
  return new QTextFragment(*o);
}


RITUAL_EXPORT QTextFragment * ctr_qt_gui_ffi_QTextFragment_operator_(QTextFragment * this_ptr, QTextFragment const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFragment_isValid(QTextFragment const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFragment_operator__(QTextFragment const * this_ptr, QTextFragment const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFragment_operator_1(QTextFragment const * this_ptr, QTextFragment const * o) {
  return this_ptr->operator<(*o);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFragment_position(QTextFragment const * this_ptr) {
  return this_ptr->position();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFragment_length(QTextFragment const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextFragment_contains(QTextFragment const * this_ptr, int position) {
  return this_ptr->contains(position);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextFragment_charFormat(QTextFragment const * this_ptr) {
  return new QTextCharFormat(this_ptr->charFormat());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextFragment_charFormatIndex(QTextFragment const * this_ptr) {
  return this_ptr->charFormatIndex();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextFragment_text(QTextFragment const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextFragment_glyphRuns(QTextFragment const * this_ptr, int from, int length) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from, length));
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSyntaxHighlighter_metaObject(QSyntaxHighlighter const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QSyntaxHighlighter_qt_metacast(QSyntaxHighlighter * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSyntaxHighlighter_qt_metacall(QSyntaxHighlighter * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSyntaxHighlighter_tr(char const * s, char const * c, int n) {
  return new QString(QSyntaxHighlighter::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QSyntaxHighlighter_trUtf8(char const * s, char const * c, int n) {
  return new QString(QSyntaxHighlighter::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSyntaxHighlighter_dQSyntaxHighlighter(QSyntaxHighlighter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSyntaxHighlighter_setDocument(QSyntaxHighlighter * this_ptr, QTextDocument * doc) {
  this_ptr->setDocument(doc);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QSyntaxHighlighter_document(QSyntaxHighlighter const * this_ptr) {
  return this_ptr->document();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSyntaxHighlighter_rehighlight(QSyntaxHighlighter * this_ptr) {
  this_ptr->rehighlight();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSyntaxHighlighter_rehighlightBlock(QSyntaxHighlighter * this_ptr, QTextBlock const * block) {
  this_ptr->rehighlightBlock(*block);
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_QTextDocumentFragment() {
  return new QTextDocumentFragment();
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_QTextDocumentFragment1(QTextDocument const * document) {
  return new QTextDocumentFragment(document);
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_QTextDocumentFragment2(QTextCursor const * range) {
  return new QTextDocumentFragment(*range);
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_QTextDocumentFragment3(QTextDocumentFragment const * rhs) {
  return new QTextDocumentFragment(*rhs);
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_operator_(QTextDocumentFragment * this_ptr, QTextDocumentFragment const * rhs) {
  return &this_ptr->operator=(*rhs);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentFragment_dQTextDocumentFragment(QTextDocumentFragment * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocumentFragment_isEmpty(QTextDocumentFragment const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocumentFragment_toPlainText(QTextDocumentFragment const * this_ptr) {
  return new QString(this_ptr->toPlainText());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocumentFragment_toHtml(QTextDocumentFragment const * this_ptr, QByteArray const * encoding) {
  return new QString(this_ptr->toHtml(*encoding));
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_fromPlainText(QString const * plainText) {
  return new QTextDocumentFragment(QTextDocumentFragment::fromPlainText(*plainText));
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_fromHtml(QString const * html) {
  return new QTextDocumentFragment(QTextDocumentFragment::fromHtml(*html));
}


RITUAL_EXPORT QTextDocumentFragment * ctr_qt_gui_ffi_QTextDocumentFragment_fromHtml1(QString const * html, QTextDocument const * resourceProvider) {
  return new QTextDocumentFragment(QTextDocumentFragment::fromHtml(*html, resourceProvider));
}


RITUAL_EXPORT QTextDocumentWriter * ctr_qt_gui_ffi_QTextDocumentWriter_QTextDocumentWriter() {
  return new QTextDocumentWriter();
}


RITUAL_EXPORT QTextDocumentWriter * ctr_qt_gui_ffi_QTextDocumentWriter_QTextDocumentWriter1(QIODevice * device, QByteArray const * format) {
  return new QTextDocumentWriter(device, *format);
}


RITUAL_EXPORT QTextDocumentWriter * ctr_qt_gui_ffi_QTextDocumentWriter_QTextDocumentWriter2(QString const * fileName, QByteArray const * format) {
  return new QTextDocumentWriter(*fileName, *format);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentWriter_dQTextDocumentWriter(QTextDocumentWriter * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentWriter_setFormat(QTextDocumentWriter * this_ptr, QByteArray const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QTextDocumentWriter_format(QTextDocumentWriter const * this_ptr) {
  return new QByteArray(this_ptr->format());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentWriter_setDevice(QTextDocumentWriter * this_ptr, QIODevice * device) {
  this_ptr->setDevice(device);
}


RITUAL_EXPORT QIODevice * ctr_qt_gui_ffi_QTextDocumentWriter_device(QTextDocumentWriter const * this_ptr) {
  return this_ptr->device();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentWriter_setFileName(QTextDocumentWriter * this_ptr, QString const * fileName) {
  this_ptr->setFileName(*fileName);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocumentWriter_fileName(QTextDocumentWriter const * this_ptr) {
  return new QString(this_ptr->fileName());
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocumentWriter_write(QTextDocumentWriter * this_ptr, QTextDocument const * document) {
  return this_ptr->write(document);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextDocumentWriter_write1(QTextDocumentWriter * this_ptr, QTextDocumentFragment const * fragment) {
  return this_ptr->write(*fragment);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocumentWriter_setCodec(QTextDocumentWriter * this_ptr, QTextCodec * codec) {
  this_ptr->setCodec(codec);
}


RITUAL_EXPORT QTextCodec * ctr_qt_gui_ffi_QTextDocumentWriter_codec(QTextDocumentWriter const * this_ptr) {
  return this_ptr->codec();
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QTextDocumentWriter_supportedDocumentFormats() {
  return new QList< QByteArray >(QTextDocumentWriter::supportedDocumentFormats());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextList_metaObject(QTextList const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextList_qt_metacast(QTextList * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextList_qt_metacall(QTextList * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextList_tr(char const * s, char const * c, int n) {
  return new QString(QTextList::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextList_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextList::trUtf8(s, c, n));
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_QTextList_QTextList(QTextDocument * doc) {
  return new QTextList(doc);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextList_dQTextList(QTextList * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextList_count(QTextList const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextList_isEmpty(QTextList const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QTextList_item(QTextList const * this_ptr, int i) {
  return new QTextBlock(this_ptr->item(i));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextList_itemNumber(QTextList const * this_ptr, QTextBlock const * arg1) {
  return this_ptr->itemNumber(*arg1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextList_itemText(QTextList const * this_ptr, QTextBlock const * arg1) {
  return new QString(this_ptr->itemText(*arg1));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextList_removeItem(QTextList * this_ptr, int i) {
  this_ptr->removeItem(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextList_remove(QTextList * this_ptr, QTextBlock const * arg1) {
  this_ptr->remove(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextList_add(QTextList * this_ptr, QTextBlock const * block) {
  this_ptr->add(*block);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextList_setFormat(QTextList * this_ptr, QTextListFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_QTextList_format(QTextList const * this_ptr) {
  return new QTextListFormat(this_ptr->format());
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTableCell_QTextTableCell() {
  return new QTextTableCell();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCell_dQTextTableCell(QTextTableCell * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTableCell_QTextTableCell1(QTextTableCell const * o) {
  return new QTextTableCell(*o);
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTableCell_operator_(QTextTableCell * this_ptr, QTextTableCell const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCell_setFormat(QTextTableCell * this_ptr, QTextCharFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextTableCell_format(QTextTableCell const * this_ptr) {
  return new QTextCharFormat(this_ptr->format());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_row(QTextTableCell const * this_ptr) {
  return this_ptr->row();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_column(QTextTableCell const * this_ptr) {
  return this_ptr->column();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_rowSpan(QTextTableCell const * this_ptr) {
  return this_ptr->rowSpan();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_columnSpan(QTextTableCell const * this_ptr) {
  return this_ptr->columnSpan();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextTableCell_isValid(QTextTableCell const * this_ptr) {
  return this_ptr->isValid();
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextTableCell_firstCursorPosition(QTextTableCell const * this_ptr) {
  return new QTextCursor(this_ptr->firstCursorPosition());
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextTableCell_lastCursorPosition(QTextTableCell const * this_ptr) {
  return new QTextCursor(this_ptr->lastCursorPosition());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_firstPosition(QTextTableCell const * this_ptr) {
  return this_ptr->firstPosition();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_lastPosition(QTextTableCell const * this_ptr) {
  return this_ptr->lastPosition();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextTableCell_operator__(QTextTableCell const * this_ptr, QTextTableCell const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextTableCell_begin(QTextTableCell const * this_ptr) {
  return new QTextFrame::iterator(this_ptr->begin());
}


RITUAL_EXPORT QTextFrame::iterator * ctr_qt_gui_ffi_QTextTableCell_end(QTextTableCell const * this_ptr) {
  return new QTextFrame::iterator(this_ptr->end());
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTableCell_tableCellFormatIndex(QTextTableCell const * this_ptr) {
  return this_ptr->tableCellFormatIndex();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QTextTable_metaObject(QTextTable const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QTextTable_qt_metacast(QTextTable * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTable_qt_metacall(QTextTable * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextTable_tr(char const * s, char const * c, int n) {
  return new QString(QTextTable::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextTable_trUtf8(char const * s, char const * c, int n) {
  return new QString(QTextTable::trUtf8(s, c, n));
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_QTextTable_QTextTable(QTextDocument * doc) {
  return new QTextTable(doc);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_dQTextTable(QTextTable * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_resize(QTextTable * this_ptr, int rows, int cols) {
  this_ptr->resize(rows, cols);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_insertRows(QTextTable * this_ptr, int pos, int num) {
  this_ptr->insertRows(pos, num);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_insertColumns(QTextTable * this_ptr, int pos, int num) {
  this_ptr->insertColumns(pos, num);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_appendRows(QTextTable * this_ptr, int count) {
  this_ptr->appendRows(count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_appendColumns(QTextTable * this_ptr, int count) {
  this_ptr->appendColumns(count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_removeRows(QTextTable * this_ptr, int pos, int num) {
  this_ptr->removeRows(pos, num);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_removeColumns(QTextTable * this_ptr, int pos, int num) {
  this_ptr->removeColumns(pos, num);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_mergeCells(QTextTable * this_ptr, int row, int col, int numRows, int numCols) {
  this_ptr->mergeCells(row, col, numRows, numCols);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_mergeCells1(QTextTable * this_ptr, QTextCursor const * cursor) {
  this_ptr->mergeCells(*cursor);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_splitCell(QTextTable * this_ptr, int row, int col, int numRows, int numCols) {
  this_ptr->splitCell(row, col, numRows, numCols);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTable_rows(QTextTable const * this_ptr) {
  return this_ptr->rows();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextTable_columns(QTextTable const * this_ptr) {
  return this_ptr->columns();
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTable_cellAt(QTextTable const * this_ptr, int row, int col) {
  return new QTextTableCell(this_ptr->cellAt(row, col));
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTable_cellAt1(QTextTable const * this_ptr, int position) {
  return new QTextTableCell(this_ptr->cellAt(position));
}


RITUAL_EXPORT QTextTableCell * ctr_qt_gui_ffi_QTextTable_cellAt2(QTextTable const * this_ptr, QTextCursor const * c) {
  return new QTextTableCell(this_ptr->cellAt(*c));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextTable_rowStart(QTextTable const * this_ptr, QTextCursor const * c) {
  return new QTextCursor(this_ptr->rowStart(*c));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextTable_rowEnd(QTextTable const * this_ptr, QTextCursor const * c) {
  return new QTextCursor(this_ptr->rowEnd(*c));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTable_setFormat(QTextTable * this_ptr, QTextTableFormat const * format) {
  this_ptr->setFormat(*format);
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_QTextTable_format(QTextTable const * this_ptr) {
  return new QTextTableFormat(this_ptr->format());
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QValidator_metaObject(QValidator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QValidator_qt_metacast(QValidator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QValidator_qt_metacall(QValidator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QValidator_tr(char const * s, char const * c, int n) {
  return new QString(QValidator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QValidator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QValidator::trUtf8(s, c, n));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QValidator_dQValidator(QValidator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QValidator_setLocale(QValidator * this_ptr, QLocale const * locale) {
  this_ptr->setLocale(*locale);
}


RITUAL_EXPORT QLocale * ctr_qt_gui_ffi_QValidator_locale(QValidator const * this_ptr) {
  return new QLocale(this_ptr->locale());
}


RITUAL_EXPORT QValidator::State ctr_qt_gui_ffi_QValidator_validate(QValidator const * this_ptr, QString * arg1, int * arg2) {
  return this_ptr->validate(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QValidator_fixup(QValidator const * this_ptr, QString * arg1) {
  this_ptr->fixup(*arg1);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QIntValidator_metaObject(QIntValidator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QIntValidator_qt_metacast(QIntValidator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QIntValidator_qt_metacall(QIntValidator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIntValidator_tr(char const * s, char const * c, int n) {
  return new QString(QIntValidator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIntValidator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QIntValidator::trUtf8(s, c, n));
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_QIntValidator_QIntValidator(QObject * parent) {
  return new QIntValidator(parent);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_QIntValidator_QIntValidator1(int bottom, int top, QObject * parent) {
  return new QIntValidator(bottom, top, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIntValidator_dQIntValidator(QIntValidator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QValidator::State ctr_qt_gui_ffi_QIntValidator_validate(QIntValidator const * this_ptr, QString * arg1, int * arg2) {
  return this_ptr->validate(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIntValidator_fixup(QIntValidator const * this_ptr, QString * input) {
  this_ptr->fixup(*input);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIntValidator_setBottom(QIntValidator * this_ptr, int arg1) {
  this_ptr->setBottom(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIntValidator_setTop(QIntValidator * this_ptr, int arg1) {
  this_ptr->setTop(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIntValidator_setRange(QIntValidator * this_ptr, int bottom, int top) {
  this_ptr->setRange(bottom, top);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QIntValidator_bottom(QIntValidator const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QIntValidator_top(QIntValidator const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QDoubleValidator_metaObject(QDoubleValidator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QDoubleValidator_qt_metacast(QDoubleValidator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDoubleValidator_qt_metacall(QDoubleValidator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QDoubleValidator_tr(char const * s, char const * c, int n) {
  return new QString(QDoubleValidator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QDoubleValidator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QDoubleValidator::trUtf8(s, c, n));
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_QDoubleValidator_QDoubleValidator(QObject * parent) {
  return new QDoubleValidator(parent);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_QDoubleValidator_QDoubleValidator1(double bottom, double top, int decimals, QObject * parent) {
  return new QDoubleValidator(bottom, top, decimals, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_dQDoubleValidator(QDoubleValidator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QValidator::State ctr_qt_gui_ffi_QDoubleValidator_validate(QDoubleValidator const * this_ptr, QString * arg1, int * arg2) {
  return this_ptr->validate(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setRange(QDoubleValidator * this_ptr, double bottom, double top, int decimals) {
  this_ptr->setRange(bottom, top, decimals);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setBottom(QDoubleValidator * this_ptr, double arg1) {
  this_ptr->setBottom(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setTop(QDoubleValidator * this_ptr, double arg1) {
  this_ptr->setTop(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setDecimals(QDoubleValidator * this_ptr, int arg1) {
  this_ptr->setDecimals(arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setNotation(QDoubleValidator * this_ptr, QDoubleValidator::Notation arg1) {
  this_ptr->setNotation(arg1);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QDoubleValidator_bottom(QDoubleValidator const * this_ptr) {
  return this_ptr->bottom();
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QDoubleValidator_top(QDoubleValidator const * this_ptr) {
  return this_ptr->top();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QDoubleValidator_decimals(QDoubleValidator const * this_ptr) {
  return this_ptr->decimals();
}


RITUAL_EXPORT QDoubleValidator::Notation ctr_qt_gui_ffi_QDoubleValidator_notation(QDoubleValidator const * this_ptr) {
  return this_ptr->notation();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRegExpValidator_metaObject(QRegExpValidator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QRegExpValidator_qt_metacast(QRegExpValidator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QRegExpValidator_qt_metacall(QRegExpValidator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRegExpValidator_tr(char const * s, char const * c, int n) {
  return new QString(QRegExpValidator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRegExpValidator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QRegExpValidator::trUtf8(s, c, n));
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_QRegExpValidator_QRegExpValidator(QObject * parent) {
  return new QRegExpValidator(parent);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_QRegExpValidator_QRegExpValidator1(QRegExp const * rx, QObject * parent) {
  return new QRegExpValidator(*rx, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegExpValidator_dQRegExpValidator(QRegExpValidator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QValidator::State ctr_qt_gui_ffi_QRegExpValidator_validate(QRegExpValidator const * this_ptr, QString * input, int * pos) {
  return this_ptr->validate(*input, *pos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegExpValidator_setRegExp(QRegExpValidator * this_ptr, QRegExp const * rx) {
  this_ptr->setRegExp(*rx);
}


RITUAL_EXPORT QRegExp const * ctr_qt_gui_ffi_QRegExpValidator_regExp(QRegExpValidator const * this_ptr) {
  return &this_ptr->regExp();
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QRegularExpressionValidator_metaObject(QRegularExpressionValidator const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_QRegularExpressionValidator_qt_metacast(QRegularExpressionValidator * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QRegularExpressionValidator_qt_metacall(QRegularExpressionValidator * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRegularExpressionValidator_tr(char const * s, char const * c, int n) {
  return new QString(QRegularExpressionValidator::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QRegularExpressionValidator_trUtf8(char const * s, char const * c, int n) {
  return new QString(QRegularExpressionValidator::trUtf8(s, c, n));
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_QRegularExpressionValidator_QRegularExpressionValidator(QObject * parent) {
  return new QRegularExpressionValidator(parent);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_QRegularExpressionValidator_QRegularExpressionValidator1(QRegularExpression const * re, QObject * parent) {
  return new QRegularExpressionValidator(*re, parent);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegularExpressionValidator_dQRegularExpressionValidator(QRegularExpressionValidator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QValidator::State ctr_qt_gui_ffi_QRegularExpressionValidator_validate(QRegularExpressionValidator const * this_ptr, QString * input, int * pos) {
  return this_ptr->validate(*input, *pos);
}


RITUAL_EXPORT QRegularExpression * ctr_qt_gui_ffi_QRegularExpressionValidator_regularExpression(QRegularExpressionValidator const * this_ptr) {
  return new QRegularExpression(this_ptr->regularExpression());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRegularExpressionValidator_setRegularExpression(QRegularExpressionValidator * this_ptr, QRegularExpression const * re) {
  this_ptr->setRegularExpression(*re);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRgba64_dQRgba64(QRgba64 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_QRgba641(QRgba64 const * other) {
  return new QRgba64(*other);
}


RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QRgba64_operator_1(QRgba64 * this_ptr, QRgba64 const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_dQColor(QColor * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector2D_dQVector2D(QVector2D * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_QVector2D7(QVector2D const * other) {
  return new QVector2D(*other);
}


RITUAL_EXPORT QVector2D * ctr_qt_gui_ffi_QVector2D_operator_(QVector2D * this_ptr, QVector2D const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTouchDevice * ctr_qt_gui_ffi_QTouchDevice_QTouchDevice1(QTouchDevice const * other) {
  return new QTouchDevice(*other);
}


RITUAL_EXPORT QTouchDevice * ctr_qt_gui_ffi_QTouchDevice_operator_(QTouchDevice * this_ptr, QTouchDevice const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_QInputEvent_QInputEvent2(QInputEvent const * other) {
  return new QInputEvent(*other);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_QInputEvent_operator_(QInputEvent * this_ptr, QInputEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QEnterEvent * ctr_qt_gui_ffi_QEnterEvent_QEnterEvent2(QEnterEvent const * other) {
  return new QEnterEvent(*other);
}


RITUAL_EXPORT QEnterEvent * ctr_qt_gui_ffi_QEnterEvent_operator_(QEnterEvent * this_ptr, QEnterEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_QMouseEvent5(QMouseEvent const * other) {
  return new QMouseEvent(*other);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_QMouseEvent_operator_(QMouseEvent * this_ptr, QMouseEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_QHoverEvent_QHoverEvent2(QHoverEvent const * other) {
  return new QHoverEvent(*other);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_QHoverEvent_operator_(QHoverEvent * this_ptr, QHoverEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent7(QWheelEvent const * other) {
  return new QWheelEvent(*other);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_operator_(QWheelEvent * this_ptr, QWheelEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_QTabletEvent_QTabletEvent3(QTabletEvent const * other) {
  return new QTabletEvent(*other);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_QTabletEvent_operator_(QTabletEvent * this_ptr, QTabletEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QNativeGestureEvent_dQNativeGestureEvent(QNativeGestureEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_QNativeGestureEvent_QNativeGestureEvent2(QNativeGestureEvent const * other) {
  return new QNativeGestureEvent(*other);
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_QNativeGestureEvent_operator_(QNativeGestureEvent * this_ptr, QNativeGestureEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent3(QKeyEvent const * other) {
  return new QKeyEvent(*other);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_operator_(QKeyEvent * this_ptr, QKeyEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_QFocusEvent_QFocusEvent2(QFocusEvent const * other) {
  return new QFocusEvent(*other);
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_QFocusEvent_operator_(QFocusEvent * this_ptr, QFocusEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_QPaintEvent_QPaintEvent3(QPaintEvent const * other) {
  return new QPaintEvent(*other);
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_QPaintEvent_operator_(QPaintEvent * this_ptr, QPaintEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMoveEvent * ctr_qt_gui_ffi_QMoveEvent_QMoveEvent2(QMoveEvent const * other) {
  return new QMoveEvent(*other);
}


RITUAL_EXPORT QMoveEvent * ctr_qt_gui_ffi_QMoveEvent_operator_(QMoveEvent * this_ptr, QMoveEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QExposeEvent * ctr_qt_gui_ffi_QExposeEvent_QExposeEvent2(QExposeEvent const * other) {
  return new QExposeEvent(*other);
}


RITUAL_EXPORT QExposeEvent * ctr_qt_gui_ffi_QExposeEvent_operator_(QExposeEvent * this_ptr, QExposeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPlatformSurfaceEvent * ctr_qt_gui_ffi_QPlatformSurfaceEvent_QPlatformSurfaceEvent2(QPlatformSurfaceEvent const * other) {
  return new QPlatformSurfaceEvent(*other);
}


RITUAL_EXPORT QPlatformSurfaceEvent * ctr_qt_gui_ffi_QPlatformSurfaceEvent_operator_(QPlatformSurfaceEvent * this_ptr, QPlatformSurfaceEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QResizeEvent * ctr_qt_gui_ffi_QResizeEvent_QResizeEvent2(QResizeEvent const * other) {
  return new QResizeEvent(*other);
}


RITUAL_EXPORT QResizeEvent * ctr_qt_gui_ffi_QResizeEvent_operator_(QResizeEvent * this_ptr, QResizeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QCloseEvent * ctr_qt_gui_ffi_QCloseEvent_QCloseEvent1(QCloseEvent const * other) {
  return new QCloseEvent(*other);
}


RITUAL_EXPORT QCloseEvent * ctr_qt_gui_ffi_QCloseEvent_operator_(QCloseEvent * this_ptr, QCloseEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QIconDragEvent * ctr_qt_gui_ffi_QIconDragEvent_QIconDragEvent1(QIconDragEvent const * other) {
  return new QIconDragEvent(*other);
}


RITUAL_EXPORT QIconDragEvent * ctr_qt_gui_ffi_QIconDragEvent_operator_(QIconDragEvent * this_ptr, QIconDragEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QShowEvent * ctr_qt_gui_ffi_QShowEvent_QShowEvent1(QShowEvent const * other) {
  return new QShowEvent(*other);
}


RITUAL_EXPORT QShowEvent * ctr_qt_gui_ffi_QShowEvent_operator_(QShowEvent * this_ptr, QShowEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHideEvent * ctr_qt_gui_ffi_QHideEvent_QHideEvent1(QHideEvent const * other) {
  return new QHideEvent(*other);
}


RITUAL_EXPORT QHideEvent * ctr_qt_gui_ffi_QHideEvent_operator_(QHideEvent * this_ptr, QHideEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_QContextMenuEvent_QContextMenuEvent4(QContextMenuEvent const * other) {
  return new QContextMenuEvent(*other);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_QContextMenuEvent_operator_(QContextMenuEvent * this_ptr, QContextMenuEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_QInputMethodEvent_operator_(QInputMethodEvent * this_ptr, QInputMethodEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodEvent_Attribute_dAttribute(QInputMethodEvent::Attribute * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_Attribute3(QInputMethodEvent::Attribute const * other) {
  return new QInputMethodEvent::Attribute(*other);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QInputMethodEvent_Attribute_operator_(QInputMethodEvent::Attribute * this_ptr, QInputMethodEvent::Attribute const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QInputMethodQueryEvent * ctr_qt_gui_ffi_QInputMethodQueryEvent_QInputMethodQueryEvent2(QInputMethodQueryEvent const * other) {
  return new QInputMethodQueryEvent(*other);
}


RITUAL_EXPORT QInputMethodQueryEvent * ctr_qt_gui_ffi_QInputMethodQueryEvent_operator_(QInputMethodQueryEvent * this_ptr, QInputMethodQueryEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_QDropEvent_QDropEvent2(QDropEvent const * other) {
  return new QDropEvent(*other);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_QDropEvent_operator_(QDropEvent * this_ptr, QDropEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_QDragMoveEvent_QDragMoveEvent2(QDragMoveEvent const * other) {
  return new QDragMoveEvent(*other);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_QDragMoveEvent_operator_(QDragMoveEvent * this_ptr, QDragMoveEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_QDragEnterEvent_QDragEnterEvent2(QDragEnterEvent const * other) {
  return new QDragEnterEvent(*other);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_QDragEnterEvent_operator_(QDragEnterEvent * this_ptr, QDragEnterEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QDragLeaveEvent * ctr_qt_gui_ffi_QDragLeaveEvent_QDragLeaveEvent1(QDragLeaveEvent const * other) {
  return new QDragLeaveEvent(*other);
}


RITUAL_EXPORT QDragLeaveEvent * ctr_qt_gui_ffi_QDragLeaveEvent_operator_(QDragLeaveEvent * this_ptr, QDragLeaveEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QHelpEvent * ctr_qt_gui_ffi_QHelpEvent_QHelpEvent2(QHelpEvent const * other) {
  return new QHelpEvent(*other);
}


RITUAL_EXPORT QHelpEvent * ctr_qt_gui_ffi_QHelpEvent_operator_(QHelpEvent * this_ptr, QHelpEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QStatusTipEvent * ctr_qt_gui_ffi_QStatusTipEvent_QStatusTipEvent2(QStatusTipEvent const * other) {
  return new QStatusTipEvent(*other);
}


RITUAL_EXPORT QStatusTipEvent * ctr_qt_gui_ffi_QStatusTipEvent_operator_(QStatusTipEvent * this_ptr, QStatusTipEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QWhatsThisClickedEvent * ctr_qt_gui_ffi_QWhatsThisClickedEvent_QWhatsThisClickedEvent2(QWhatsThisClickedEvent const * other) {
  return new QWhatsThisClickedEvent(*other);
}


RITUAL_EXPORT QWhatsThisClickedEvent * ctr_qt_gui_ffi_QWhatsThisClickedEvent_operator_(QWhatsThisClickedEvent * this_ptr, QWhatsThisClickedEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QActionEvent * ctr_qt_gui_ffi_QActionEvent_QActionEvent2(QActionEvent const * other) {
  return new QActionEvent(*other);
}


RITUAL_EXPORT QActionEvent * ctr_qt_gui_ffi_QActionEvent_operator_(QActionEvent * this_ptr, QActionEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_QFileOpenEvent_QFileOpenEvent3(QFileOpenEvent const * other) {
  return new QFileOpenEvent(*other);
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_QFileOpenEvent_operator_(QFileOpenEvent * this_ptr, QFileOpenEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QToolBarChangeEvent * ctr_qt_gui_ffi_QToolBarChangeEvent_QToolBarChangeEvent2(QToolBarChangeEvent const * other) {
  return new QToolBarChangeEvent(*other);
}


RITUAL_EXPORT QToolBarChangeEvent * ctr_qt_gui_ffi_QToolBarChangeEvent_operator_(QToolBarChangeEvent * this_ptr, QToolBarChangeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_QShortcutEvent_QShortcutEvent2(QShortcutEvent const * other) {
  return new QShortcutEvent(*other);
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_QShortcutEvent_operator_(QShortcutEvent * this_ptr, QShortcutEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_QWindowStateChangeEvent_QWindowStateChangeEvent2(QWindowStateChangeEvent const * other) {
  return new QWindowStateChangeEvent(*other);
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_QWindowStateChangeEvent_operator_(QWindowStateChangeEvent * this_ptr, QWindowStateChangeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPointingDeviceUniqueId_dQPointingDeviceUniqueId(QPointingDeviceUniqueId * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPointingDeviceUniqueId * ctr_qt_gui_ffi_QPointingDeviceUniqueId_QPointingDeviceUniqueId1(QPointingDeviceUniqueId const * other) {
  return new QPointingDeviceUniqueId(*other);
}


RITUAL_EXPORT QPointingDeviceUniqueId * ctr_qt_gui_ffi_QPointingDeviceUniqueId_operator_(QPointingDeviceUniqueId * this_ptr, QPointingDeviceUniqueId const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent2(QTouchEvent const * other) {
  return new QTouchEvent(*other);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_operator_(QTouchEvent * this_ptr, QTouchEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QTouchEvent_TouchPoint_TouchPoint3() {
  return new QTouchEvent::TouchPoint();
}


RITUAL_EXPORT QScrollPrepareEvent * ctr_qt_gui_ffi_QScrollPrepareEvent_QScrollPrepareEvent2(QScrollPrepareEvent const * other) {
  return new QScrollPrepareEvent(*other);
}


RITUAL_EXPORT QScrollPrepareEvent * ctr_qt_gui_ffi_QScrollPrepareEvent_operator_(QScrollPrepareEvent * this_ptr, QScrollPrepareEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QScrollEvent * ctr_qt_gui_ffi_QScrollEvent_QScrollEvent2(QScrollEvent const * other) {
  return new QScrollEvent(*other);
}


RITUAL_EXPORT QScrollEvent * ctr_qt_gui_ffi_QScrollEvent_operator_(QScrollEvent * this_ptr, QScrollEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QScreenOrientationChangeEvent * ctr_qt_gui_ffi_QScreenOrientationChangeEvent_QScreenOrientationChangeEvent2(QScreenOrientationChangeEvent const * other) {
  return new QScreenOrientationChangeEvent(*other);
}


RITUAL_EXPORT QScreenOrientationChangeEvent * ctr_qt_gui_ffi_QScreenOrientationChangeEvent_operator_(QScreenOrientationChangeEvent * this_ptr, QScreenOrientationChangeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QApplicationStateChangeEvent_dQApplicationStateChangeEvent(QApplicationStateChangeEvent * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QApplicationStateChangeEvent * ctr_qt_gui_ffi_QApplicationStateChangeEvent_QApplicationStateChangeEvent2(QApplicationStateChangeEvent const * other) {
  return new QApplicationStateChangeEvent(*other);
}


RITUAL_EXPORT QApplicationStateChangeEvent * ctr_qt_gui_ffi_QApplicationStateChangeEvent_operator_(QApplicationStateChangeEvent * this_ptr, QApplicationStateChangeEvent const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix_dQMatrix(QMatrix * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_Element_dElement(QPainterPath::Element * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPainterPath::Element * ctr_qt_gui_ffi_QPainterPath_Element_Element() {
  return new QPainterPath::Element();
}


RITUAL_EXPORT QPainterPath::Element * ctr_qt_gui_ffi_QPainterPath_Element_Element1(QPainterPath::Element const * other) {
  return new QPainterPath::Element(*other);
}


RITUAL_EXPORT QPainterPath::Element * ctr_qt_gui_ffi_QPainterPath_Element_operator_(QPainterPath::Element * this_ptr, QPainterPath::Element const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTransform_dQTransform(QTransform * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixelFormat_dQPixelFormat(QPixelFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_QPixelFormat2(QPixelFormat const * other) {
  return new QPixelFormat(*other);
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_operator_(QPixelFormat * this_ptr, QPixelFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGradient_dQGradient(QGradient * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_QGradient_QGradient1(QGradient const * other) {
  return new QGradient(*other);
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_QGradient_operator_(QGradient * this_ptr, QGradient const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QLinearGradient_dQLinearGradient(QLinearGradient * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_QLinearGradient_QLinearGradient3(QLinearGradient const * other) {
  return new QLinearGradient(*other);
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_QLinearGradient_operator_(QLinearGradient * this_ptr, QLinearGradient const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QRadialGradient_dQRadialGradient(QRadialGradient * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_QRadialGradient7(QRadialGradient const * other) {
  return new QRadialGradient(*other);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_QRadialGradient_operator_(QRadialGradient * this_ptr, QRadialGradient const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QConicalGradient_dQConicalGradient(QConicalGradient * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_QConicalGradient_QConicalGradient3(QConicalGradient const * other) {
  return new QConicalGradient(*other);
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_QConicalGradient_operator_(QConicalGradient * this_ptr, QConicalGradient const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_Tab_dTab(QTextOption::Tab * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QTextOption_Tab_Tab2(QTextOption::Tab const * other) {
  return new QTextOption::Tab(*other);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QTextOption_Tab_operator_(QTextOption::Tab * this_ptr, QTextOption::Tab const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLength_dQTextLength(QTextLength * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextLength_QTextLength2(QTextLength const * other) {
  return new QTextLength(*other);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QTextLength_operator_(QTextLength * this_ptr, QTextLength const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_dQTextCharFormat(QTextCharFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextCharFormat_QTextCharFormat1(QTextCharFormat const * other) {
  return new QTextCharFormat(*other);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_QTextCharFormat_operator_(QTextCharFormat * this_ptr, QTextCharFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_dQTextBlockFormat(QTextBlockFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextBlockFormat_QTextBlockFormat1(QTextBlockFormat const * other) {
  return new QTextBlockFormat(*other);
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_QTextBlockFormat_operator_(QTextBlockFormat * this_ptr, QTextBlockFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextListFormat_dQTextListFormat(QTextListFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_QTextListFormat_QTextListFormat1(QTextListFormat const * other) {
  return new QTextListFormat(*other);
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_QTextListFormat_operator_(QTextListFormat * this_ptr, QTextListFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_dQTextImageFormat(QTextImageFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_QTextImageFormat_QTextImageFormat1(QTextImageFormat const * other) {
  return new QTextImageFormat(*other);
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_QTextImageFormat_operator_(QTextImageFormat * this_ptr, QTextImageFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrameFormat_dQTextFrameFormat(QTextFrameFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_QTextFrameFormat_QTextFrameFormat1(QTextFrameFormat const * other) {
  return new QTextFrameFormat(*other);
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_QTextFrameFormat_operator_(QTextFrameFormat * this_ptr, QTextFrameFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_dQTextTableFormat(QTextTableFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_QTextTableFormat_QTextTableFormat1(QTextTableFormat const * other) {
  return new QTextTableFormat(*other);
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_QTextTableFormat_operator_(QTextTableFormat * this_ptr, QTextTableFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_dQTextTableCellFormat(QTextTableCellFormat * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_QTextTableCellFormat_QTextTableCellFormat1(QTextTableCellFormat const * other) {
  return new QTextTableCellFormat(*other);
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_QTextTableCellFormat_operator_(QTextTableCellFormat * this_ptr, QTextTableCellFormat const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFontDatabase_dQFontDatabase(QFontDatabase * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QFontDatabase * ctr_qt_gui_ffi_QFontDatabase_QFontDatabase1(QFontDatabase const * other) {
  return new QFontDatabase(*other);
}


RITUAL_EXPORT QFontDatabase * ctr_qt_gui_ffi_QFontDatabase_operator_(QFontDatabase * this_ptr, QFontDatabase const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextInlineObject_dQTextInlineObject(QTextInlineObject * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextInlineObject * ctr_qt_gui_ffi_QTextInlineObject_QTextInlineObject2(QTextInlineObject const * other) {
  return new QTextInlineObject(*other);
}


RITUAL_EXPORT QTextInlineObject * ctr_qt_gui_ffi_QTextInlineObject_operator_(QTextInlineObject * this_ptr, QTextInlineObject const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_FormatRange_dFormatRange(QTextLayout::FormatRange * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QTextLayout_FormatRange_FormatRange() {
  return new QTextLayout::FormatRange();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QTextLayout_FormatRange_FormatRange1(QTextLayout::FormatRange const * other) {
  return new QTextLayout::FormatRange(*other);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QTextLayout_FormatRange_operator_(QTextLayout::FormatRange * this_ptr, QTextLayout::FormatRange const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_dQTextLine(QTextLine * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLine_QTextLine1(QTextLine const * other) {
  return new QTextLine(*other);
}


RITUAL_EXPORT QTextLine * ctr_qt_gui_ffi_QTextLine_operator_(QTextLine * this_ptr, QTextLine const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAbstractUndoItem * ctr_qt_gui_ffi_QAbstractUndoItem_operator_(QAbstractUndoItem * this_ptr, QAbstractUndoItem const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_QTextDocument2() {
  return new QTextDocument();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_dSelection(QAbstractTextDocumentLayout::Selection * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_Selection() {
  return new QAbstractTextDocumentLayout::Selection();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_Selection1(QAbstractTextDocumentLayout::Selection const * other) {
  return new QAbstractTextDocumentLayout::Selection(*other);
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_Selection_operator_(QAbstractTextDocumentLayout::Selection * this_ptr, QAbstractTextDocumentLayout::Selection const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_dPaintContext(QAbstractTextDocumentLayout::PaintContext * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAbstractTextDocumentLayout::PaintContext * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_PaintContext1(QAbstractTextDocumentLayout::PaintContext const * other) {
  return new QAbstractTextDocumentLayout::PaintContext(*other);
}


RITUAL_EXPORT QAbstractTextDocumentLayout::PaintContext * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_PaintContext_operator_(QAbstractTextDocumentLayout::PaintContext * this_ptr, QAbstractTextDocumentLayout::PaintContext const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QTextObjectInterface * ctr_qt_gui_ffi_QTextObjectInterface_operator_(QTextObjectInterface * this_ptr, QTextObjectInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_dQAccessible(QAccessible * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessible * ctr_qt_gui_ffi_QAccessible_QAccessible(QAccessible const * other) {
  return new QAccessible(*other);
}


RITUAL_EXPORT QAccessible * ctr_qt_gui_ffi_QAccessible_operator_(QAccessible * this_ptr, QAccessible const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAccessible_State_dState(QAccessible::State * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QAccessible::State * ctr_qt_gui_ffi_QAccessible_State_State1(QAccessible::State const * other) {
  return new QAccessible::State(*other);
}


RITUAL_EXPORT QAccessible::State * ctr_qt_gui_ffi_QAccessible_State_operator_(QAccessible::State * this_ptr, QAccessible::State const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QAccessibleInterface_operator_(QAccessibleInterface * this_ptr, QAccessibleInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleTextInterface * ctr_qt_gui_ffi_QAccessibleTextInterface_operator_(QAccessibleTextInterface * this_ptr, QAccessibleTextInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleEditableTextInterface * ctr_qt_gui_ffi_QAccessibleEditableTextInterface_operator_(QAccessibleEditableTextInterface * this_ptr, QAccessibleEditableTextInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleValueInterface * ctr_qt_gui_ffi_QAccessibleValueInterface_operator_(QAccessibleValueInterface * this_ptr, QAccessibleValueInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleTableCellInterface * ctr_qt_gui_ffi_QAccessibleTableCellInterface_operator_(QAccessibleTableCellInterface * this_ptr, QAccessibleTableCellInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleTableInterface * ctr_qt_gui_ffi_QAccessibleTableInterface_operator_(QAccessibleTableInterface * this_ptr, QAccessibleTableInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QAccessibleActionInterface * ctr_qt_gui_ffi_QAccessibleActionInterface_operator_(QAccessibleActionInterface * this_ptr, QAccessibleActionInterface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_QSurface_operator_(QSurface * this_ptr, QSurface const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QWindow_QWindow2() {
  return new QWindow();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDesktopServices_dQDesktopServices(QDesktopServices * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QDesktopServices * ctr_qt_gui_ffi_QDesktopServices_QDesktopServices() {
  return new QDesktopServices();
}


RITUAL_EXPORT QDesktopServices * ctr_qt_gui_ffi_QDesktopServices_QDesktopServices1(QDesktopServices const * other) {
  return new QDesktopServices(*other);
}


RITUAL_EXPORT QDesktopServices * ctr_qt_gui_ffi_QDesktopServices_operator_(QDesktopServices * this_ptr, QDesktopServices const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGenericPluginFactory_dQGenericPluginFactory(QGenericPluginFactory * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QGenericPluginFactory * ctr_qt_gui_ffi_QGenericPluginFactory_QGenericPluginFactory() {
  return new QGenericPluginFactory();
}


RITUAL_EXPORT QGenericPluginFactory * ctr_qt_gui_ffi_QGenericPluginFactory_QGenericPluginFactory1(QGenericPluginFactory const * other) {
  return new QGenericPluginFactory(*other);
}


RITUAL_EXPORT QGenericPluginFactory * ctr_qt_gui_ffi_QGenericPluginFactory_operator_(QGenericPluginFactory * this_ptr, QGenericPluginFactory const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_dAvailableSizesArgument(QIconEngine::AvailableSizesArgument * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIconEngine::AvailableSizesArgument * ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_AvailableSizesArgument() {
  return new QIconEngine::AvailableSizesArgument();
}


RITUAL_EXPORT QIconEngine::AvailableSizesArgument * ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_AvailableSizesArgument1(QIconEngine::AvailableSizesArgument const * other) {
  return new QIconEngine::AvailableSizesArgument(*other);
}


RITUAL_EXPORT QIconEngine::AvailableSizesArgument * ctr_qt_gui_ffi_QIconEngine_AvailableSizesArgument_operator_(QIconEngine::AvailableSizesArgument * this_ptr, QIconEngine::AvailableSizesArgument const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_dScaledPixmapArgument(QIconEngine::ScaledPixmapArgument * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIconEngine::ScaledPixmapArgument * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_ScaledPixmapArgument() {
  return new QIconEngine::ScaledPixmapArgument();
}


RITUAL_EXPORT QIconEngine::ScaledPixmapArgument * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_ScaledPixmapArgument1(QIconEngine::ScaledPixmapArgument const * other) {
  return new QIconEngine::ScaledPixmapArgument(*other);
}


RITUAL_EXPORT QIconEngine::ScaledPixmapArgument * ctr_qt_gui_ffi_QIconEngine_ScaledPixmapArgument_operator_(QIconEngine::ScaledPixmapArgument * this_ptr, QIconEngine::ScaledPixmapArgument const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector3D_dQVector3D(QVector3D * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_QVector3D8(QVector3D const * other) {
  return new QVector3D(*other);
}


RITUAL_EXPORT QVector3D * ctr_qt_gui_ffi_QVector3D_operator_(QVector3D * this_ptr, QVector3D const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector4D_dQVector4D(QVector4D * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_QVector4D9(QVector4D const * other) {
  return new QVector4D(*other);
}


RITUAL_EXPORT QVector4D * ctr_qt_gui_ffi_QVector4D_operator_(QVector4D * this_ptr, QVector4D const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QQuaternion_dQQuaternion(QQuaternion * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_QQuaternion5(QQuaternion const * other) {
  return new QQuaternion(*other);
}


RITUAL_EXPORT QQuaternion * ctr_qt_gui_ffi_QQuaternion_operator_(QQuaternion * this_ptr, QQuaternion const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_dQMatrix4x4(QMatrix4x4 * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_QMatrix4x47(QMatrix4x4 const * other) {
  return new QMatrix4x4(*other);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_operator_(QMatrix4x4 * this_ptr, QMatrix4x4 const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie3() {
  return new QMovie();
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_QOffscreenSurface_QOffscreenSurface1() {
  return new QOffscreenSurface();
}


#if (RITUAL_CPP_LIB_VERSION == 50907)||(RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)
RITUAL_EXPORT QAbstractOpenGLFunctions * ctr_qt_gui_ffi_QAbstractOpenGLFunctions_QAbstractOpenGLFunctions(QAbstractOpenGLFunctions const * other) {
  return new QAbstractOpenGLFunctions(*other);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 50907)||(RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)
RITUAL_EXPORT QAbstractOpenGLFunctions * ctr_qt_gui_ffi_QAbstractOpenGLFunctions_operator_(QAbstractOpenGLFunctions * this_ptr, QAbstractOpenGLFunctions const * other) {
  return &this_ptr->operator=(*other);
}


#endif

RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QOpenGLContext_QOpenGLContext1() {
  return new QOpenGLContext();
}


RITUAL_EXPORT QOpenGLDebugLogger * ctr_qt_gui_ffi_QOpenGLDebugLogger_QOpenGLDebugLogger1() {
  return new QOpenGLDebugLogger();
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLFunctions_QOpenGLFunctions2(QOpenGLFunctions const * other) {
  return new QOpenGLFunctions(*other);
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLFunctions_operator_(QOpenGLFunctions * this_ptr, QOpenGLFunctions const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_QOpenGLExtraFunctions_QOpenGLExtraFunctions2(QOpenGLExtraFunctions const * other) {
  return new QOpenGLExtraFunctions(*other);
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_QOpenGLExtraFunctions_operator_(QOpenGLExtraFunctions * this_ptr, QOpenGLExtraFunctions const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QOpenGLShaderProgram * ctr_qt_gui_ffi_QOpenGLShaderProgram_QOpenGLShaderProgram1() {
  return new QOpenGLShaderProgram();
}


RITUAL_EXPORT QOpenGLTimerQuery * ctr_qt_gui_ffi_QOpenGLTimerQuery_QOpenGLTimerQuery1() {
  return new QOpenGLTimerQuery();
}


RITUAL_EXPORT QOpenGLTimeMonitor * ctr_qt_gui_ffi_QOpenGLTimeMonitor_QOpenGLTimeMonitor1() {
  return new QOpenGLTimeMonitor();
}


RITUAL_EXPORT QOpenGLVertexArrayObject * ctr_qt_gui_ffi_QOpenGLVertexArrayObject_QOpenGLVertexArrayObject1() {
  return new QOpenGLVertexArrayObject();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintDeviceWindow_dQPaintDeviceWindow(QPaintDeviceWindow * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow2() {
  return new QOpenGLWindow();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPagedPaintDevice_Margins_dMargins(QPagedPaintDevice::Margins * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPagedPaintDevice::Margins * ctr_qt_gui_ffi_QPagedPaintDevice_Margins_Margins() {
  return new QPagedPaintDevice::Margins();
}


RITUAL_EXPORT QPagedPaintDevice::Margins * ctr_qt_gui_ffi_QPagedPaintDevice_Margins_Margins1(QPagedPaintDevice::Margins const * other) {
  return new QPagedPaintDevice::Margins(*other);
}


RITUAL_EXPORT QPagedPaintDevice::Margins * ctr_qt_gui_ffi_QPagedPaintDevice_Margins_operator_(QPagedPaintDevice::Margins * this_ptr, QPagedPaintDevice::Margins const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_PixmapFragment_dPixmapFragment(QPainter::PixmapFragment * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_PixmapFragment() {
  return new QPainter::PixmapFragment();
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_PixmapFragment1(QPainter::PixmapFragment const * other) {
  return new QPainter::PixmapFragment(*other);
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_operator_(QPainter::PixmapFragment * this_ptr, QPainter::PixmapFragment const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextItem_dQTextItem(QTextItem * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextItem * ctr_qt_gui_ffi_QTextItem_QTextItem() {
  return new QTextItem();
}


RITUAL_EXPORT QTextItem * ctr_qt_gui_ffi_QTextItem_QTextItem1(QTextItem const * other) {
  return new QTextItem(*other);
}


RITUAL_EXPORT QTextItem * ctr_qt_gui_ffi_QTextItem_operator_(QTextItem * this_ptr, QTextItem const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngineState_dQPaintEngineState(QPaintEngineState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPaintEngineState * ctr_qt_gui_ffi_QPaintEngineState_QPaintEngineState() {
  return new QPaintEngineState();
}


RITUAL_EXPORT QPaintEngineState * ctr_qt_gui_ffi_QPaintEngineState_QPaintEngineState1(QPaintEngineState const * other) {
  return new QPaintEngineState(*other);
}


RITUAL_EXPORT QPaintEngineState * ctr_qt_gui_ffi_QPaintEngineState_operator_(QPaintEngineState * this_ptr, QPaintEngineState const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_QPicture_QPicture2() {
  return new QPicture();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmapCache_dQPixmapCache(QPixmapCache * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPixmapCache * ctr_qt_gui_ffi_QPixmapCache_QPixmapCache() {
  return new QPixmapCache();
}


RITUAL_EXPORT QPixmapCache * ctr_qt_gui_ffi_QPixmapCache_QPixmapCache1(QPixmapCache const * other) {
  return new QPixmapCache(*other);
}


RITUAL_EXPORT QPixmapCache * ctr_qt_gui_ffi_QPixmapCache_operator_(QPixmapCache * this_ptr, QPixmapCache const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_QRasterWindow_QRasterWindow1() {
  return new QRasterWindow();
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_QStandardItemModel_QStandardItemModel2() {
  return new QStandardItemModel();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_dQStyleHints(QStyleHints * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFrame_iterator_diterator(QTextFrame::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextBlockUserData * ctr_qt_gui_ffi_QTextBlockUserData_QTextBlockUserData() {
  return new QTextBlockUserData();
}


RITUAL_EXPORT QTextBlockUserData * ctr_qt_gui_ffi_QTextBlockUserData_QTextBlockUserData1(QTextBlockUserData const * other) {
  return new QTextBlockUserData(*other);
}


RITUAL_EXPORT QTextBlockUserData * ctr_qt_gui_ffi_QTextBlockUserData_operator_(QTextBlockUserData * this_ptr, QTextBlockUserData const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_dQTextBlock(QTextBlock * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlock_iterator_diterator(QTextBlock::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QTextBlock::iterator * ctr_qt_gui_ffi_QTextBlock_iterator_operator_(QTextBlock::iterator * this_ptr, QTextBlock::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextFragment_dQTextFragment(QTextFragment * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_QIntValidator_QIntValidator2() {
  return new QIntValidator();
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_QDoubleValidator_QDoubleValidator2() {
  return new QDoubleValidator();
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_QRegExpValidator_QRegExpValidator2() {
  return new QRegExpValidator();
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_QRegularExpressionValidator_QRegularExpressionValidator2() {
  return new QRegularExpressionValidator();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QPair_double_QColor_QPair() {
  return new QPair< double, QColor >();
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QPair_int_int_QPair() {
  return new QPair< int, int >();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QPair() {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >();
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_QPair() {
  return new QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter >();
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_QPair_float_float_QPair() {
  return new QPair< float, float >();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QPair_double_QColor_QPair1(double const * t1, QColor const * t2) {
  return new QPair< double, QColor >(*t1, *t2);
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QPair_int_int_QPair1(int const * t1, int const * t2) {
  return new QPair< int, int >(*t1, *t2);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QPair1(QAccessibleInterface * const * t1, int t2) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(*t1, QFlags< QAccessible::RelationFlag >(t2));
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_QPair1(QOpenGLTexture::Filter const * t1, QOpenGLTexture::Filter const * t2) {
  return new QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter >(*t1, *t2);
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_QPair_float_float_QPair1(float const * t1, float const * t2) {
  return new QPair< float, float >(*t1, *t2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_double_QColor_swap(QPair< double, QColor > * this_ptr, QPair< double, QColor > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_int_int_swap(QPair< int, int > * this_ptr, QPair< int, int > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_swap(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_swap(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * this_ptr, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_float_float_swap(QPair< float, float > * this_ptr, QPair< float, float > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__108(QPair< double, QColor > const * p1, QPair< double, QColor > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__109(QPair< int, int > const * p1, QPair< int, int > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__110(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p1, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__111(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p1, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__112(QPair< float, float > const * p1, QPair< float, float > const * p2) {
  return operator==(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_128(QPair< int, int > const * p1, QPair< int, int > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_129(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p1, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_130(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p1, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_131(QPair< float, float > const * p1, QPair< float, float > const * p2) {
  return operator<(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_133(QPair< int, int > const * p1, QPair< int, int > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_134(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p1, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_135(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p1, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_136(QPair< float, float > const * p1, QPair< float, float > const * p2) {
  return operator>(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__119(QPair< int, int > const * p1, QPair< int, int > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__120(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p1, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__121(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p1, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__122(QPair< float, float > const * p1, QPair< float, float > const * p2) {
  return operator<=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__124(QPair< int, int > const * p1, QPair< int, int > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__125(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p1, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__126(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p1, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__127(QPair< float, float > const * p1, QPair< float, float > const * p2) {
  return operator>=(*p1, *p2);
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_qMakePair(double const * x, QColor const * y) {
  return new QPair< double, QColor >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_qMakePair1(int const * x, int const * y) {
  return new QPair< int, int >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_qMakePair2(QAccessibleInterface * const * x, int y) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(qMakePair(*x, QFlags< QAccessible::RelationFlag >(y)));
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_qMakePair3(QOpenGLTexture::Filter const * x, QOpenGLTexture::Filter const * y) {
  return new QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter >(qMakePair(*x, *y));
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_qMakePair4(float const * x, float const * y) {
  return new QPair< float, float >(qMakePair(*x, *y));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash8(QPair< int, int > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash9(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash10(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash11(QPair< float, float > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_QList() {
  return new QList< QInputMethodEvent::Attribute >();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_QList() {
  return new QList< QTouchEvent::TouchPoint >();
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_QList() {
  return new QList< QSize >();
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_QList() {
  return new QList< QKeySequence >();
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_QList() {
  return new QList< QTouchDevice const * >();
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_QList() {
  return new QList< QPolygonF >();
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_QList() {
  return new QList< double >();
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_QList() {
  return new QList< QTextOption::Tab >();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_QList() {
  return new QList< QFontDatabase::WritingSystem >();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_QList() {
  return new QList< QTextLayout::FormatRange >();
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_QList() {
  return new QList< QGlyphRun >();
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_QList() {
  return new QList< QAccessibleInterface * >();
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_QList() {
  return new QList< QWindow * >();
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_QList() {
  return new QList< QScreen * >();
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_QList() {
  return new QList< QOpenGLContext * >();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_QList() {
  return new QList< QOpenGLDebugMessage >();
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_QList() {
  return new QList< QOpenGLShader * >();
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_QList() {
  return new QList< QStandardItem * >();
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_QList() {
  return new QList< QTextBlock >();
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_QList() {
  return new QList< QTextFrame * >();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_QList1(QList< QInputMethodEvent::Attribute > const * l) {
  return new QList< QInputMethodEvent::Attribute >(*l);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_QList1(QList< QTouchEvent::TouchPoint > const * l) {
  return new QList< QTouchEvent::TouchPoint >(*l);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_QList1(QList< QSize > const * l) {
  return new QList< QSize >(*l);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_QList1(QList< QKeySequence > const * l) {
  return new QList< QKeySequence >(*l);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_QList1(QList< QTouchDevice const * > const * l) {
  return new QList< QTouchDevice const * >(*l);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_QList1(QList< QPolygonF > const * l) {
  return new QList< QPolygonF >(*l);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_QList1(QList< double > const * l) {
  return new QList< double >(*l);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_QList1(QList< QTextOption::Tab > const * l) {
  return new QList< QTextOption::Tab >(*l);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_QList1(QList< QFontDatabase::WritingSystem > const * l) {
  return new QList< QFontDatabase::WritingSystem >(*l);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_QList1(QList< QTextLayout::FormatRange > const * l) {
  return new QList< QTextLayout::FormatRange >(*l);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_QList1(QList< QGlyphRun > const * l) {
  return new QList< QGlyphRun >(*l);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_QList1(QList< QAccessibleInterface * > const * l) {
  return new QList< QAccessibleInterface * >(*l);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_QList1(QList< QWindow * > const * l) {
  return new QList< QWindow * >(*l);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_QList1(QList< QScreen * > const * l) {
  return new QList< QScreen * >(*l);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_QList1(QList< QOpenGLContext * > const * l) {
  return new QList< QOpenGLContext * >(*l);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_QList1(QList< QOpenGLDebugMessage > const * l) {
  return new QList< QOpenGLDebugMessage >(*l);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_QList1(QList< QOpenGLShader * > const * l) {
  return new QList< QOpenGLShader * >(*l);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_QList1(QList< QStandardItem * > const * l) {
  return new QList< QStandardItem * >(*l);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_QList1(QList< QTextBlock > const * l) {
  return new QList< QTextBlock >(*l);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_QList1(QList< QTextFrame * > const * l) {
  return new QList< QTextFrame * >(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_dQList(QList< QInputMethodEvent::Attribute > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_dQList(QList< QTouchEvent::TouchPoint > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_dQList(QList< QSize > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_dQList(QList< QKeySequence > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_dQList(QList< QTouchDevice const * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_dQList(QList< QPolygonF > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_dQList(QList< double > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_dQList(QList< QTextOption::Tab > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_dQList(QList< QFontDatabase::WritingSystem > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_dQList(QList< QTextLayout::FormatRange > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_dQList(QList< QGlyphRun > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_dQList(QList< QAccessibleInterface * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_dQList(QList< QWindow * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_dQList(QList< QScreen * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_dQList(QList< QOpenGLContext * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_dQList(QList< QOpenGLDebugMessage > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_dQList(QList< QOpenGLShader * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_dQList(QList< QStandardItem * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_dQList(QList< QTextBlock > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_dQList(QList< QTextFrame * > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator_(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator_(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator_(QList< QSize > * this_ptr, QList< QSize > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator_(QList< QKeySequence > * this_ptr, QList< QKeySequence > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator_(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator_(QList< QPolygonF > * this_ptr, QList< QPolygonF > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator_(QList< double > * this_ptr, QList< double > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator_(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator_(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator_(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator_(QList< QGlyphRun > * this_ptr, QList< QGlyphRun > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator_(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator_(QList< QWindow * > * this_ptr, QList< QWindow * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator_(QList< QScreen * > * this_ptr, QList< QScreen * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator_(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator_(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator_(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator_(QList< QStandardItem * > * this_ptr, QList< QStandardItem * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator_(QList< QTextBlock > * this_ptr, QList< QTextBlock > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator_(QList< QTextFrame * > * this_ptr, QList< QTextFrame * > const * l) {
  return &this_ptr->operator=(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_swap(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_swap(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_swap(QList< QSize > * this_ptr, QList< QSize > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_swap(QList< QKeySequence > * this_ptr, QList< QKeySequence > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_swap(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_swap(QList< QPolygonF > * this_ptr, QList< QPolygonF > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_swap(QList< double > * this_ptr, QList< double > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_swap(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_swap(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_swap(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_swap(QList< QGlyphRun > * this_ptr, QList< QGlyphRun > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_swap(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_swap(QList< QWindow * > * this_ptr, QList< QWindow * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_swap(QList< QScreen * > * this_ptr, QList< QScreen * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_swap(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_swap(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_swap(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_swap(QList< QStandardItem * > * this_ptr, QList< QStandardItem * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_swap(QList< QTextBlock > * this_ptr, QList< QTextBlock > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_swap(QList< QTextFrame * > * this_ptr, QList< QTextFrame * > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_operator__(QList< QSize > const * this_ptr, QList< QSize > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_operator__(QList< QKeySequence > const * this_ptr, QList< QKeySequence > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__(QList< QTouchDevice const * > const * this_ptr, QList< QTouchDevice const * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_operator__(QList< QPolygonF > const * this_ptr, QList< QPolygonF > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_operator__(QList< double > const * this_ptr, QList< double > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__(QList< QTextOption::Tab > const * this_ptr, QList< QTextOption::Tab > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__(QList< QFontDatabase::WritingSystem > const * this_ptr, QList< QFontDatabase::WritingSystem > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__(QList< QTextLayout::FormatRange > const * this_ptr, QList< QTextLayout::FormatRange > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_operator__(QList< QGlyphRun > const * this_ptr, QList< QGlyphRun > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__(QList< QAccessibleInterface * > const * this_ptr, QList< QAccessibleInterface * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_operator__(QList< QWindow * > const * this_ptr, QList< QWindow * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_operator__(QList< QScreen * > const * this_ptr, QList< QScreen * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__(QList< QOpenGLContext * > const * this_ptr, QList< QOpenGLContext * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__(QList< QOpenGLDebugMessage > const * this_ptr, QList< QOpenGLDebugMessage > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__(QList< QOpenGLShader * > const * this_ptr, QList< QOpenGLShader * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__(QList< QStandardItem * > const * this_ptr, QList< QStandardItem * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_operator__(QList< QTextBlock > const * this_ptr, QList< QTextBlock > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__(QList< QTextFrame * > const * this_ptr, QList< QTextFrame * > const * l) {
  return this_ptr->operator==(*l);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_size(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_size(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_size(QList< QSize > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_size(QList< QKeySequence > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_size(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_size(QList< QPolygonF > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_size(QList< double > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_size(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_size(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_size(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_size(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_size(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_size(QList< QWindow * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_size(QList< QScreen * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_size(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_size(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_size(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_size(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_size(QList< QTextBlock > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_size(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_detach(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_detach(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_detach(QList< QSize > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_detach(QList< QKeySequence > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_detach(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_detach(QList< QPolygonF > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_detach(QList< double > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_detach(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_detach(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_detach(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_detach(QList< QGlyphRun > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_detach(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_detach(QList< QWindow * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_detach(QList< QScreen * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_detach(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_detach(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_detach(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_detach(QList< QStandardItem * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_detach(QList< QTextBlock > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_detach(QList< QTextFrame * > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_detachShared(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_detachShared(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_detachShared(QList< QSize > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_detachShared(QList< QKeySequence > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_detachShared(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_detachShared(QList< QPolygonF > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_detachShared(QList< double > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_detachShared(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_detachShared(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_detachShared(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_detachShared(QList< QGlyphRun > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_detachShared(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_detachShared(QList< QWindow * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_detachShared(QList< QScreen * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_detachShared(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_detachShared(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_detachShared(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_detachShared(QList< QStandardItem * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_detachShared(QList< QTextBlock > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_detachShared(QList< QTextFrame * > * this_ptr) {
  this_ptr->detachShared();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_isDetached(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_isDetached(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_isDetached(QList< QSize > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_isDetached(QList< QKeySequence > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_isDetached(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_isDetached(QList< QPolygonF > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_isDetached(QList< double > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_isDetached(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_isDetached(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_isDetached(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_isDetached(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_isDetached(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_isDetached(QList< QWindow * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_isDetached(QList< QScreen * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_isDetached(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_isDetached(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_isDetached(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_isDetached(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_isDetached(QList< QTextBlock > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_isDetached(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_setSharable(QList< QInputMethodEvent::Attribute > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_setSharable(QList< QTouchEvent::TouchPoint > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_setSharable(QList< QSize > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_setSharable(QList< QKeySequence > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_setSharable(QList< QTouchDevice const * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_setSharable(QList< QPolygonF > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_setSharable(QList< double > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_setSharable(QList< QTextOption::Tab > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_setSharable(QList< QFontDatabase::WritingSystem > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_setSharable(QList< QTextLayout::FormatRange > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_setSharable(QList< QGlyphRun > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_setSharable(QList< QAccessibleInterface * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_setSharable(QList< QWindow * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_setSharable(QList< QScreen * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_setSharable(QList< QOpenGLContext * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_setSharable(QList< QOpenGLDebugMessage > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_setSharable(QList< QOpenGLShader * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_setSharable(QList< QStandardItem * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_setSharable(QList< QTextBlock > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_setSharable(QList< QTextFrame * > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_isSharedWith(QList< QInputMethodEvent::Attribute > const * this_ptr, QList< QInputMethodEvent::Attribute > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_isSharedWith(QList< QTouchEvent::TouchPoint > const * this_ptr, QList< QTouchEvent::TouchPoint > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_isSharedWith(QList< QSize > const * this_ptr, QList< QSize > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_isSharedWith(QList< QKeySequence > const * this_ptr, QList< QKeySequence > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_isSharedWith(QList< QTouchDevice const * > const * this_ptr, QList< QTouchDevice const * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_isSharedWith(QList< QPolygonF > const * this_ptr, QList< QPolygonF > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_isSharedWith(QList< double > const * this_ptr, QList< double > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_isSharedWith(QList< QTextOption::Tab > const * this_ptr, QList< QTextOption::Tab > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_isSharedWith(QList< QFontDatabase::WritingSystem > const * this_ptr, QList< QFontDatabase::WritingSystem > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_isSharedWith(QList< QTextLayout::FormatRange > const * this_ptr, QList< QTextLayout::FormatRange > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_isSharedWith(QList< QGlyphRun > const * this_ptr, QList< QGlyphRun > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_isSharedWith(QList< QAccessibleInterface * > const * this_ptr, QList< QAccessibleInterface * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_isSharedWith(QList< QWindow * > const * this_ptr, QList< QWindow * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_isSharedWith(QList< QScreen * > const * this_ptr, QList< QScreen * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_isSharedWith(QList< QOpenGLContext * > const * this_ptr, QList< QOpenGLContext * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_isSharedWith(QList< QOpenGLDebugMessage > const * this_ptr, QList< QOpenGLDebugMessage > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_isSharedWith(QList< QOpenGLShader * > const * this_ptr, QList< QOpenGLShader * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_isSharedWith(QList< QStandardItem * > const * this_ptr, QList< QStandardItem * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_isSharedWith(QList< QTextBlock > const * this_ptr, QList< QTextBlock > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_isSharedWith(QList< QTextFrame * > const * this_ptr, QList< QTextFrame * > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_isEmpty(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_isEmpty(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_isEmpty(QList< QSize > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_isEmpty(QList< QKeySequence > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_isEmpty(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_isEmpty(QList< QPolygonF > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_isEmpty(QList< double > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_isEmpty(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_isEmpty(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_isEmpty(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_isEmpty(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_isEmpty(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_isEmpty(QList< QWindow * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_isEmpty(QList< QScreen * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_isEmpty(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_isEmpty(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_isEmpty(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_isEmpty(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_isEmpty(QList< QTextBlock > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_isEmpty(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_clear(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_clear(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_clear(QList< QSize > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_clear(QList< QKeySequence > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_clear(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_clear(QList< QPolygonF > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_clear(QList< double > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_clear(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_clear(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_clear(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_clear(QList< QGlyphRun > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_clear(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_clear(QList< QWindow * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_clear(QList< QScreen * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_clear(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_clear(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_clear(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_clear(QList< QStandardItem * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_clear(QList< QTextBlock > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_clear(QList< QTextFrame * > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_at(QList< QInputMethodEvent::Attribute > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_at(QList< QTouchEvent::TouchPoint > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_at(QList< QSize > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_at(QList< QKeySequence > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_at(QList< QTouchDevice const * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_at(QList< QPolygonF > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_at(QList< double > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_at(QList< QTextOption::Tab > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_at(QList< QFontDatabase::WritingSystem > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_at(QList< QTextLayout::FormatRange > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_at(QList< QGlyphRun > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_at(QList< QAccessibleInterface * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_at(QList< QWindow * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_at(QList< QScreen * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_at(QList< QOpenGLContext * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_at(QList< QOpenGLDebugMessage > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_at(QList< QOpenGLShader * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_at(QList< QStandardItem * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_at(QList< QTextBlock > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_at(QList< QTextFrame * > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__2(QList< QInputMethodEvent::Attribute > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__2(QList< QTouchEvent::TouchPoint > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_operator__2(QList< QSize > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_operator__2(QList< QKeySequence > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__2(QList< QTouchDevice const * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_operator__2(QList< QPolygonF > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_operator__2(QList< double > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__2(QList< QTextOption::Tab > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__2(QList< QFontDatabase::WritingSystem > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__2(QList< QTextLayout::FormatRange > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_operator__2(QList< QGlyphRun > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__2(QList< QAccessibleInterface * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__2(QList< QWindow * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__2(QList< QScreen * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__2(QList< QOpenGLContext * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__2(QList< QOpenGLDebugMessage > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__2(QList< QOpenGLShader * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__2(QList< QStandardItem * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_operator__2(QList< QTextBlock > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__2(QList< QTextFrame * > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__3(QList< QInputMethodEvent::Attribute > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__3(QList< QTouchEvent::TouchPoint > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_operator__3(QList< QSize > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_operator__3(QList< QKeySequence > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__3(QList< QTouchDevice const * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_operator__3(QList< QPolygonF > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_operator__3(QList< double > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__3(QList< QTextOption::Tab > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__3(QList< QFontDatabase::WritingSystem > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__3(QList< QTextLayout::FormatRange > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_operator__3(QList< QGlyphRun > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__3(QList< QAccessibleInterface * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__3(QList< QWindow * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__3(QList< QScreen * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__3(QList< QOpenGLContext * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__3(QList< QOpenGLDebugMessage > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__3(QList< QOpenGLShader * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__3(QList< QStandardItem * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_operator__3(QList< QTextBlock > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__3(QList< QTextFrame * > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_reserve(QList< QInputMethodEvent::Attribute > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_reserve(QList< QTouchEvent::TouchPoint > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_reserve(QList< QSize > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_reserve(QList< QKeySequence > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_reserve(QList< QTouchDevice const * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_reserve(QList< QPolygonF > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_reserve(QList< double > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_reserve(QList< QTextOption::Tab > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_reserve(QList< QFontDatabase::WritingSystem > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_reserve(QList< QTextLayout::FormatRange > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_reserve(QList< QGlyphRun > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_reserve(QList< QAccessibleInterface * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_reserve(QList< QWindow * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_reserve(QList< QScreen * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_reserve(QList< QOpenGLContext * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_reserve(QList< QOpenGLDebugMessage > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_reserve(QList< QOpenGLShader * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_reserve(QList< QStandardItem * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_reserve(QList< QTextBlock > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_reserve(QList< QTextFrame * > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_append(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_append(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_append(QList< QSize > * this_ptr, QSize const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_append(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_append(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_append(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_append(QList< double > * this_ptr, double const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_append(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_append(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_append(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_append(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_append(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_append(QList< QWindow * > * this_ptr, QWindow * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_append(QList< QScreen * > * this_ptr, QScreen * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_append(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_append(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_append(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_append(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_append(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_append(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_append1(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_append1(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_append1(QList< QSize > * this_ptr, QList< QSize > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_append1(QList< QKeySequence > * this_ptr, QList< QKeySequence > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_append1(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_append1(QList< QPolygonF > * this_ptr, QList< QPolygonF > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_append1(QList< double > * this_ptr, QList< double > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_append1(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_append1(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_append1(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_append1(QList< QGlyphRun > * this_ptr, QList< QGlyphRun > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_append1(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_append1(QList< QWindow * > * this_ptr, QList< QWindow * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_append1(QList< QScreen * > * this_ptr, QList< QScreen * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_append1(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_append1(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_append1(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_append1(QList< QStandardItem * > * this_ptr, QList< QStandardItem * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_append1(QList< QTextBlock > * this_ptr, QList< QTextBlock > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_append1(QList< QTextFrame * > * this_ptr, QList< QTextFrame * > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_prepend(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_prepend(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_prepend(QList< QSize > * this_ptr, QSize const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_prepend(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_prepend(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_prepend(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_prepend(QList< double > * this_ptr, double const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_prepend(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_prepend(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_prepend(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_prepend(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_prepend(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_prepend(QList< QWindow * > * this_ptr, QWindow * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_prepend(QList< QScreen * > * this_ptr, QScreen * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_prepend(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_prepend(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_prepend(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_prepend(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_prepend(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_prepend(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_insert(QList< QInputMethodEvent::Attribute > * this_ptr, int i, QInputMethodEvent::Attribute const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_insert(QList< QTouchEvent::TouchPoint > * this_ptr, int i, QTouchEvent::TouchPoint const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_insert(QList< QSize > * this_ptr, int i, QSize const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_insert(QList< QKeySequence > * this_ptr, int i, QKeySequence const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_insert(QList< QTouchDevice const * > * this_ptr, int i, QTouchDevice const * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_insert(QList< QPolygonF > * this_ptr, int i, QPolygonF const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_insert(QList< double > * this_ptr, int i, double const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_insert(QList< QTextOption::Tab > * this_ptr, int i, QTextOption::Tab const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_insert(QList< QFontDatabase::WritingSystem > * this_ptr, int i, QFontDatabase::WritingSystem const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_insert(QList< QTextLayout::FormatRange > * this_ptr, int i, QTextLayout::FormatRange const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_insert(QList< QGlyphRun > * this_ptr, int i, QGlyphRun const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_insert(QList< QAccessibleInterface * > * this_ptr, int i, QAccessibleInterface * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_insert(QList< QWindow * > * this_ptr, int i, QWindow * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_insert(QList< QScreen * > * this_ptr, int i, QScreen * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_insert(QList< QOpenGLContext * > * this_ptr, int i, QOpenGLContext * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_insert(QList< QOpenGLDebugMessage > * this_ptr, int i, QOpenGLDebugMessage const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_insert(QList< QOpenGLShader * > * this_ptr, int i, QOpenGLShader * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_insert(QList< QStandardItem * > * this_ptr, int i, QStandardItem * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_insert(QList< QTextBlock > * this_ptr, int i, QTextBlock const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_insert(QList< QTextFrame * > * this_ptr, int i, QTextFrame * const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_replace(QList< QInputMethodEvent::Attribute > * this_ptr, int i, QInputMethodEvent::Attribute const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_replace(QList< QTouchEvent::TouchPoint > * this_ptr, int i, QTouchEvent::TouchPoint const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_replace(QList< QSize > * this_ptr, int i, QSize const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_replace(QList< QKeySequence > * this_ptr, int i, QKeySequence const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_replace(QList< QTouchDevice const * > * this_ptr, int i, QTouchDevice const * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_replace(QList< QPolygonF > * this_ptr, int i, QPolygonF const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_replace(QList< double > * this_ptr, int i, double const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_replace(QList< QTextOption::Tab > * this_ptr, int i, QTextOption::Tab const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_replace(QList< QFontDatabase::WritingSystem > * this_ptr, int i, QFontDatabase::WritingSystem const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_replace(QList< QTextLayout::FormatRange > * this_ptr, int i, QTextLayout::FormatRange const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_replace(QList< QGlyphRun > * this_ptr, int i, QGlyphRun const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_replace(QList< QAccessibleInterface * > * this_ptr, int i, QAccessibleInterface * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_replace(QList< QWindow * > * this_ptr, int i, QWindow * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_replace(QList< QScreen * > * this_ptr, int i, QScreen * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_replace(QList< QOpenGLContext * > * this_ptr, int i, QOpenGLContext * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_replace(QList< QOpenGLDebugMessage > * this_ptr, int i, QOpenGLDebugMessage const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_replace(QList< QOpenGLShader * > * this_ptr, int i, QOpenGLShader * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_replace(QList< QStandardItem * > * this_ptr, int i, QStandardItem * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_replace(QList< QTextBlock > * this_ptr, int i, QTextBlock const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_replace(QList< QTextFrame * > * this_ptr, int i, QTextFrame * const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_removeAt(QList< QInputMethodEvent::Attribute > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_removeAt(QList< QTouchEvent::TouchPoint > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_removeAt(QList< QSize > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_removeAt(QList< QKeySequence > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_removeAt(QList< QTouchDevice const * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_removeAt(QList< QPolygonF > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_removeAt(QList< double > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_removeAt(QList< QTextOption::Tab > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_removeAt(QList< QFontDatabase::WritingSystem > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_removeAt(QList< QTextLayout::FormatRange > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_removeAt(QList< QGlyphRun > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_removeAt(QList< QAccessibleInterface * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_removeAt(QList< QWindow * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_removeAt(QList< QScreen * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_removeAt(QList< QOpenGLContext * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_removeAt(QList< QOpenGLDebugMessage > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_removeAt(QList< QOpenGLShader * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_removeAt(QList< QStandardItem * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_removeAt(QList< QTextBlock > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_removeAt(QList< QTextFrame * > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_removeAll(QList< QSize > * this_ptr, QSize const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_removeAll(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_removeAll(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_removeAll(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_removeAll(QList< double > * this_ptr, double const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_removeAll(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_removeAll(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_removeAll(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_removeAll(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_removeAll(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_removeAll(QList< QWindow * > * this_ptr, QWindow * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_removeAll(QList< QScreen * > * this_ptr, QScreen * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_removeAll(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_removeAll(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_removeAll(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_removeAll(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_removeAll(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_removeAll(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_removeOne(QList< QSize > * this_ptr, QSize const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_removeOne(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_removeOne(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_removeOne(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_removeOne(QList< double > * this_ptr, double const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_removeOne(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_removeOne(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_removeOne(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_removeOne(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_removeOne(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_removeOne(QList< QWindow * > * this_ptr, QWindow * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_removeOne(QList< QScreen * > * this_ptr, QScreen * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_removeOne(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_removeOne(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_removeOne(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_removeOne(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_removeOne(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_removeOne(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_takeAt(QList< QInputMethodEvent::Attribute > * this_ptr, int i) {
  return new QInputMethodEvent::Attribute(this_ptr->takeAt(i));
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_takeAt(QList< QTouchEvent::TouchPoint > * this_ptr, int i) {
  return new QTouchEvent::TouchPoint(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_takeAt(QList< QSize > * this_ptr, int i) {
  return new QSize(this_ptr->takeAt(i));
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_takeAt(QList< QKeySequence > * this_ptr, int i) {
  return new QKeySequence(this_ptr->takeAt(i));
}


RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_takeAt(QList< QTouchDevice const * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_takeAt(QList< QPolygonF > * this_ptr, int i) {
  return new QPolygonF(this_ptr->takeAt(i));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QList_double_takeAt(QList< double > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_takeAt(QList< QTextOption::Tab > * this_ptr, int i) {
  return new QTextOption::Tab(this_ptr->takeAt(i));
}


RITUAL_EXPORT QFontDatabase::WritingSystem ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_takeAt(QList< QFontDatabase::WritingSystem > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_takeAt(QList< QTextLayout::FormatRange > * this_ptr, int i) {
  return new QTextLayout::FormatRange(this_ptr->takeAt(i));
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_takeAt(QList< QGlyphRun > * this_ptr, int i) {
  return new QGlyphRun(this_ptr->takeAt(i));
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_takeAt(QList< QAccessibleInterface * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QList_QWindow_ptr_takeAt(QList< QWindow * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QList_QScreen_ptr_takeAt(QList< QScreen * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_takeAt(QList< QOpenGLContext * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_takeAt(QList< QOpenGLDebugMessage > * this_ptr, int i) {
  return new QOpenGLDebugMessage(this_ptr->takeAt(i));
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_takeAt(QList< QOpenGLShader * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QList_QStandardItem_ptr_takeAt(QList< QStandardItem * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_takeAt(QList< QTextBlock > * this_ptr, int i) {
  return new QTextBlock(this_ptr->takeAt(i));
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QList_QTextFrame_ptr_takeAt(QList< QTextFrame * > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_takeFirst(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return new QInputMethodEvent::Attribute(this_ptr->takeFirst());
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_takeFirst(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return new QTouchEvent::TouchPoint(this_ptr->takeFirst());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_takeFirst(QList< QSize > * this_ptr) {
  return new QSize(this_ptr->takeFirst());
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_takeFirst(QList< QKeySequence > * this_ptr) {
  return new QKeySequence(this_ptr->takeFirst());
}


RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_takeFirst(QList< QTouchDevice const * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_takeFirst(QList< QPolygonF > * this_ptr) {
  return new QPolygonF(this_ptr->takeFirst());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QList_double_takeFirst(QList< double > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_takeFirst(QList< QTextOption::Tab > * this_ptr) {
  return new QTextOption::Tab(this_ptr->takeFirst());
}


RITUAL_EXPORT QFontDatabase::WritingSystem ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_takeFirst(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_takeFirst(QList< QTextLayout::FormatRange > * this_ptr) {
  return new QTextLayout::FormatRange(this_ptr->takeFirst());
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_takeFirst(QList< QGlyphRun > * this_ptr) {
  return new QGlyphRun(this_ptr->takeFirst());
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_takeFirst(QList< QAccessibleInterface * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QList_QWindow_ptr_takeFirst(QList< QWindow * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QList_QScreen_ptr_takeFirst(QList< QScreen * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_takeFirst(QList< QOpenGLContext * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_takeFirst(QList< QOpenGLDebugMessage > * this_ptr) {
  return new QOpenGLDebugMessage(this_ptr->takeFirst());
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_takeFirst(QList< QOpenGLShader * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QList_QStandardItem_ptr_takeFirst(QList< QStandardItem * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_takeFirst(QList< QTextBlock > * this_ptr) {
  return new QTextBlock(this_ptr->takeFirst());
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QList_QTextFrame_ptr_takeFirst(QList< QTextFrame * > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_takeLast(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return new QInputMethodEvent::Attribute(this_ptr->takeLast());
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_takeLast(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return new QTouchEvent::TouchPoint(this_ptr->takeLast());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_takeLast(QList< QSize > * this_ptr) {
  return new QSize(this_ptr->takeLast());
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_takeLast(QList< QKeySequence > * this_ptr) {
  return new QKeySequence(this_ptr->takeLast());
}


RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_takeLast(QList< QTouchDevice const * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_takeLast(QList< QPolygonF > * this_ptr) {
  return new QPolygonF(this_ptr->takeLast());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QList_double_takeLast(QList< double > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_takeLast(QList< QTextOption::Tab > * this_ptr) {
  return new QTextOption::Tab(this_ptr->takeLast());
}


RITUAL_EXPORT QFontDatabase::WritingSystem ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_takeLast(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_takeLast(QList< QTextLayout::FormatRange > * this_ptr) {
  return new QTextLayout::FormatRange(this_ptr->takeLast());
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_takeLast(QList< QGlyphRun > * this_ptr) {
  return new QGlyphRun(this_ptr->takeLast());
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_takeLast(QList< QAccessibleInterface * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QList_QWindow_ptr_takeLast(QList< QWindow * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QList_QScreen_ptr_takeLast(QList< QScreen * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_takeLast(QList< QOpenGLContext * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_takeLast(QList< QOpenGLDebugMessage > * this_ptr) {
  return new QOpenGLDebugMessage(this_ptr->takeLast());
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_takeLast(QList< QOpenGLShader * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QList_QStandardItem_ptr_takeLast(QList< QStandardItem * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_takeLast(QList< QTextBlock > * this_ptr) {
  return new QTextBlock(this_ptr->takeLast());
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QList_QTextFrame_ptr_takeLast(QList< QTextFrame * > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_move(QList< QInputMethodEvent::Attribute > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_move(QList< QTouchEvent::TouchPoint > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_move(QList< QSize > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_move(QList< QKeySequence > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_move(QList< QTouchDevice const * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_move(QList< QPolygonF > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_move(QList< double > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_move(QList< QTextOption::Tab > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_move(QList< QFontDatabase::WritingSystem > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_move(QList< QTextLayout::FormatRange > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_move(QList< QGlyphRun > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_move(QList< QAccessibleInterface * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_move(QList< QWindow * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_move(QList< QScreen * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_move(QList< QOpenGLContext * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_move(QList< QOpenGLDebugMessage > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_move(QList< QOpenGLShader * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_move(QList< QStandardItem * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_move(QList< QTextBlock > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_move(QList< QTextFrame * > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_swap1(QList< QInputMethodEvent::Attribute > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_swap1(QList< QTouchEvent::TouchPoint > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_swap1(QList< QSize > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_swap1(QList< QKeySequence > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_swap1(QList< QTouchDevice const * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_swap1(QList< QPolygonF > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_swap1(QList< double > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_swap1(QList< QTextOption::Tab > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_swap1(QList< QFontDatabase::WritingSystem > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_swap1(QList< QTextLayout::FormatRange > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_swap1(QList< QGlyphRun > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_swap1(QList< QAccessibleInterface * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_swap1(QList< QWindow * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_swap1(QList< QScreen * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_swap1(QList< QOpenGLContext * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_swap1(QList< QOpenGLDebugMessage > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_swap1(QList< QOpenGLShader * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_swap1(QList< QStandardItem * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_swap1(QList< QTextBlock > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_swap1(QList< QTextFrame * > * this_ptr, int i, int j) {
  this_ptr->swap(i, j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_indexOf(QList< QSize > const * this_ptr, QSize const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_indexOf(QList< QKeySequence > const * this_ptr, QKeySequence const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_indexOf(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_indexOf(QList< QPolygonF > const * this_ptr, QPolygonF const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_indexOf(QList< double > const * this_ptr, double const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_indexOf(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_indexOf(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_indexOf(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_indexOf(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_indexOf(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_indexOf(QList< QWindow * > const * this_ptr, QWindow * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_indexOf(QList< QScreen * > const * this_ptr, QScreen * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_indexOf(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_indexOf(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_indexOf(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_indexOf(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_indexOf(QList< QTextBlock > const * this_ptr, QTextBlock const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_indexOf(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_lastIndexOf(QList< QSize > const * this_ptr, QSize const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_lastIndexOf(QList< QKeySequence > const * this_ptr, QKeySequence const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_lastIndexOf(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_lastIndexOf(QList< QPolygonF > const * this_ptr, QPolygonF const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_lastIndexOf(QList< double > const * this_ptr, double const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_lastIndexOf(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_lastIndexOf(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_lastIndexOf(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_lastIndexOf(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_lastIndexOf(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_lastIndexOf(QList< QWindow * > const * this_ptr, QWindow * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_lastIndexOf(QList< QScreen * > const * this_ptr, QScreen * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_lastIndexOf(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_lastIndexOf(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_lastIndexOf(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_lastIndexOf(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_lastIndexOf(QList< QTextBlock > const * this_ptr, QTextBlock const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_lastIndexOf(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_contains(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_contains(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_contains(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_contains(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_contains(QList< double > const * this_ptr, double const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_contains(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_contains(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_contains(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_contains(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_contains(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_contains(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_contains(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_contains(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_contains(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_contains(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_contains(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_contains(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_contains(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_count(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_count(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_count(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_count(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_count(QList< double > const * this_ptr, double const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_count(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_count(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_count(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_count(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_count(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_count(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_count(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_count(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_count(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_count(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_count(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_count(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_count(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_iterator() {
  return new QList< QInputMethodEvent::Attribute >::iterator();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_iterator() {
  return new QList< QTouchEvent::TouchPoint >::iterator();
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_iterator() {
  return new QList< QSize >::iterator();
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_iterator() {
  return new QList< QKeySequence >::iterator();
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_iterator() {
  return new QList< QTouchDevice const * >::iterator();
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_iterator() {
  return new QList< QPolygonF >::iterator();
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_iterator() {
  return new QList< double >::iterator();
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_iterator() {
  return new QList< QTextOption::Tab >::iterator();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_iterator() {
  return new QList< QFontDatabase::WritingSystem >::iterator();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_iterator() {
  return new QList< QTextLayout::FormatRange >::iterator();
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_iterator() {
  return new QList< QGlyphRun >::iterator();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_iterator() {
  return new QList< QAccessibleInterface * >::iterator();
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_iterator() {
  return new QList< QWindow * >::iterator();
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_iterator() {
  return new QList< QScreen * >::iterator();
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_iterator() {
  return new QList< QOpenGLContext * >::iterator();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_iterator() {
  return new QList< QOpenGLDebugMessage >::iterator();
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_iterator() {
  return new QList< QOpenGLShader * >::iterator();
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_iterator() {
  return new QList< QStandardItem * >::iterator();
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_iterator() {
  return new QList< QTextBlock >::iterator();
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_iterator() {
  return new QList< QTextFrame * >::iterator();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_iterator1(QList< QInputMethodEvent::Attribute >::iterator const * o) {
  return new QList< QInputMethodEvent::Attribute >::iterator(*o);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_iterator1(QList< QTouchEvent::TouchPoint >::iterator const * o) {
  return new QList< QTouchEvent::TouchPoint >::iterator(*o);
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_iterator1(QList< QSize >::iterator const * o) {
  return new QList< QSize >::iterator(*o);
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_iterator1(QList< QKeySequence >::iterator const * o) {
  return new QList< QKeySequence >::iterator(*o);
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_iterator1(QList< QTouchDevice const * >::iterator const * o) {
  return new QList< QTouchDevice const * >::iterator(*o);
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_iterator1(QList< QPolygonF >::iterator const * o) {
  return new QList< QPolygonF >::iterator(*o);
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_iterator1(QList< double >::iterator const * o) {
  return new QList< double >::iterator(*o);
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_iterator1(QList< QTextOption::Tab >::iterator const * o) {
  return new QList< QTextOption::Tab >::iterator(*o);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_iterator1(QList< QFontDatabase::WritingSystem >::iterator const * o) {
  return new QList< QFontDatabase::WritingSystem >::iterator(*o);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_iterator1(QList< QTextLayout::FormatRange >::iterator const * o) {
  return new QList< QTextLayout::FormatRange >::iterator(*o);
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_iterator1(QList< QGlyphRun >::iterator const * o) {
  return new QList< QGlyphRun >::iterator(*o);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_iterator1(QList< QAccessibleInterface * >::iterator const * o) {
  return new QList< QAccessibleInterface * >::iterator(*o);
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_iterator1(QList< QWindow * >::iterator const * o) {
  return new QList< QWindow * >::iterator(*o);
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_iterator1(QList< QScreen * >::iterator const * o) {
  return new QList< QScreen * >::iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_iterator1(QList< QOpenGLContext * >::iterator const * o) {
  return new QList< QOpenGLContext * >::iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_iterator1(QList< QOpenGLDebugMessage >::iterator const * o) {
  return new QList< QOpenGLDebugMessage >::iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_iterator1(QList< QOpenGLShader * >::iterator const * o) {
  return new QList< QOpenGLShader * >::iterator(*o);
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_iterator1(QList< QStandardItem * >::iterator const * o) {
  return new QList< QStandardItem * >::iterator(*o);
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_iterator1(QList< QTextBlock >::iterator const * o) {
  return new QList< QTextBlock >::iterator(*o);
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_iterator1(QList< QTextFrame * >::iterator const * o) {
  return new QList< QTextFrame * >::iterator(*o);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_iterator_operator_(QList< QSize >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_(QList< QKeySequence >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_(QList< QTouchDevice const * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_(QList< QPolygonF >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_iterator_operator_(QList< double >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_(QList< QTextOption::Tab >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_(QList< QTextLayout::FormatRange >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_(QList< QGlyphRun >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_(QList< QAccessibleInterface * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_(QList< QWindow * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_(QList< QScreen * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_(QList< QOpenGLContext * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_(QList< QOpenGLDebugMessage >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_(QList< QOpenGLShader * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_(QList< QStandardItem * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_(QList< QTextBlock >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_(QList< QTextFrame * >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_iterator_operator__(QList< QSize >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__(QList< QKeySequence >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__(QList< QTouchDevice const * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__(QList< QPolygonF >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_iterator_operator__(QList< double >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__(QList< QTextOption::Tab >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__(QList< QTextLayout::FormatRange >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__(QList< QGlyphRun >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__(QList< QAccessibleInterface * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__(QList< QWindow * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__(QList< QScreen * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__(QList< QOpenGLContext * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__(QList< QOpenGLDebugMessage >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__(QList< QOpenGLShader * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__(QList< QStandardItem * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__(QList< QTextBlock >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__(QList< QTextFrame * >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__1(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__1(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_iterator_operator__1(QList< QSize >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__1(QList< QKeySequence >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__1(QList< QTouchDevice const * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__1(QList< QPolygonF >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_iterator_operator__1(QList< double >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__1(QList< QTextOption::Tab >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__1(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__1(QList< QTextLayout::FormatRange >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__1(QList< QGlyphRun >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__1(QList< QAccessibleInterface * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__1(QList< QWindow * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__1(QList< QScreen * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__1(QList< QOpenGLContext * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__1(QList< QOpenGLDebugMessage >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__1(QList< QOpenGLShader * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__1(QList< QStandardItem * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__1(QList< QTextBlock >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__1(QList< QTextFrame * >::iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__2(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__2(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__2(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__2(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__2(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__2(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__2(QList< double >::iterator const * this_ptr, QList< double >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__2(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__2(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__2(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__2(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__2(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__2(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__2(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__2(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__2(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__2(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__2(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__2(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__2(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_1(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_1(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator_1(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_1(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_1(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_1(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator_1(QList< double >::iterator const * this_ptr, QList< double >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_1(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_1(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_1(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_1(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_1(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_1(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_1(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_1(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_1(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_1(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_1(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_1(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_1(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__4(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__4(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__4(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__4(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__4(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__4(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__4(QList< double >::iterator const * this_ptr, QList< double >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__4(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__4(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__4(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__4(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__4(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__4(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__4(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__4(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__4(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__4(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__4(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__4(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__4(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_2(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_2(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator_2(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_2(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_2(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_2(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator_2(QList< double >::iterator const * this_ptr, QList< double >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_2(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_2(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_2(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_2(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_2(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_2(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_2(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_2(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_2(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_2(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_2(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_2(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_2(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__5(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__5(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__5(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__5(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__5(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__5(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__5(QList< double >::iterator const * this_ptr, QList< double >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__5(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__5(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__5(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__5(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__5(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__5(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__5(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__5(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__5(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__5(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__5(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__5(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__5(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__6(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__6(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__6(QList< QSize >::iterator const * this_ptr, QList< QSize >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__6(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__6(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__6(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__6(QList< double >::iterator const * this_ptr, QList< double >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__6(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__6(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__6(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__6(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__6(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__6(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__6(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__6(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__6(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__6(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__6(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__6(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__6(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_3(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_3(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator_3(QList< QSize >::iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_3(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_3(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_3(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator_3(QList< double >::iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_3(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_3(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_3(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_3(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_3(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_3(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_3(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_3(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_3(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_3(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_3(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_3(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_3(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__8(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__8(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__8(QList< QSize >::iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__8(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__8(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__8(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__8(QList< double >::iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__8(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__8(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__8(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__8(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__8(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__8(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__8(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__8(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__8(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__8(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__8(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__8(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__8(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_4(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_4(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator_4(QList< QSize >::iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_4(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_4(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_4(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator_4(QList< double >::iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_4(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_4(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_4(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_4(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_4(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_4(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_4(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_4(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_4(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_4(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_4(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_4(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_4(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__9(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__9(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_iterator_operator__9(QList< QSize >::iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__9(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__9(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__9(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_iterator_operator__9(QList< double >::iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__9(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__9(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__9(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__9(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__9(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__9(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__9(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__9(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__9(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__9(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__9(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__9(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__9(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__10(QList< QInputMethodEvent::Attribute >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__10(QList< QTouchEvent::TouchPoint >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__10(QList< QSize >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__10(QList< QKeySequence >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__10(QList< QTouchDevice const * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__10(QList< QPolygonF >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__10(QList< double >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__10(QList< QTextOption::Tab >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__10(QList< QFontDatabase::WritingSystem >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__10(QList< QTextLayout::FormatRange >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__10(QList< QGlyphRun >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__10(QList< QAccessibleInterface * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__10(QList< QWindow * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__10(QList< QScreen * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__10(QList< QOpenGLContext * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__10(QList< QOpenGLDebugMessage >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__10(QList< QOpenGLShader * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__10(QList< QStandardItem * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__10(QList< QTextBlock >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__10(QList< QTextFrame * >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__11(QList< QInputMethodEvent::Attribute >::iterator * this_ptr, int arg1) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__11(QList< QTouchEvent::TouchPoint >::iterator * this_ptr, int arg1) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__11(QList< QSize >::iterator * this_ptr, int arg1) {
  return new QList< QSize >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__11(QList< QKeySequence >::iterator * this_ptr, int arg1) {
  return new QList< QKeySequence >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__11(QList< QTouchDevice const * >::iterator * this_ptr, int arg1) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__11(QList< QPolygonF >::iterator * this_ptr, int arg1) {
  return new QList< QPolygonF >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__11(QList< double >::iterator * this_ptr, int arg1) {
  return new QList< double >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__11(QList< QTextOption::Tab >::iterator * this_ptr, int arg1) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__11(QList< QFontDatabase::WritingSystem >::iterator * this_ptr, int arg1) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__11(QList< QTextLayout::FormatRange >::iterator * this_ptr, int arg1) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__11(QList< QGlyphRun >::iterator * this_ptr, int arg1) {
  return new QList< QGlyphRun >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__11(QList< QAccessibleInterface * >::iterator * this_ptr, int arg1) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__11(QList< QWindow * >::iterator * this_ptr, int arg1) {
  return new QList< QWindow * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__11(QList< QScreen * >::iterator * this_ptr, int arg1) {
  return new QList< QScreen * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__11(QList< QOpenGLContext * >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__11(QList< QOpenGLDebugMessage >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__11(QList< QOpenGLShader * >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__11(QList< QStandardItem * >::iterator * this_ptr, int arg1) {
  return new QList< QStandardItem * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__11(QList< QTextBlock >::iterator * this_ptr, int arg1) {
  return new QList< QTextBlock >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__11(QList< QTextFrame * >::iterator * this_ptr, int arg1) {
  return new QList< QTextFrame * >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__12(QList< QInputMethodEvent::Attribute >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__12(QList< QTouchEvent::TouchPoint >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__12(QList< QSize >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__12(QList< QKeySequence >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__12(QList< QTouchDevice const * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__12(QList< QPolygonF >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__12(QList< double >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__12(QList< QTextOption::Tab >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__12(QList< QFontDatabase::WritingSystem >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__12(QList< QTextLayout::FormatRange >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__12(QList< QGlyphRun >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__12(QList< QAccessibleInterface * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__12(QList< QWindow * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__12(QList< QScreen * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__12(QList< QOpenGLContext * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__12(QList< QOpenGLDebugMessage >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__12(QList< QOpenGLShader * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__12(QList< QStandardItem * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__12(QList< QTextBlock >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__12(QList< QTextFrame * >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__13(QList< QInputMethodEvent::Attribute >::iterator * this_ptr, int arg1) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__13(QList< QTouchEvent::TouchPoint >::iterator * this_ptr, int arg1) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__13(QList< QSize >::iterator * this_ptr, int arg1) {
  return new QList< QSize >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__13(QList< QKeySequence >::iterator * this_ptr, int arg1) {
  return new QList< QKeySequence >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__13(QList< QTouchDevice const * >::iterator * this_ptr, int arg1) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__13(QList< QPolygonF >::iterator * this_ptr, int arg1) {
  return new QList< QPolygonF >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__13(QList< double >::iterator * this_ptr, int arg1) {
  return new QList< double >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__13(QList< QTextOption::Tab >::iterator * this_ptr, int arg1) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__13(QList< QFontDatabase::WritingSystem >::iterator * this_ptr, int arg1) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__13(QList< QTextLayout::FormatRange >::iterator * this_ptr, int arg1) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__13(QList< QGlyphRun >::iterator * this_ptr, int arg1) {
  return new QList< QGlyphRun >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__13(QList< QAccessibleInterface * >::iterator * this_ptr, int arg1) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__13(QList< QWindow * >::iterator * this_ptr, int arg1) {
  return new QList< QWindow * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__13(QList< QScreen * >::iterator * this_ptr, int arg1) {
  return new QList< QScreen * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__13(QList< QOpenGLContext * >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__13(QList< QOpenGLDebugMessage >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__13(QList< QOpenGLShader * >::iterator * this_ptr, int arg1) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__13(QList< QStandardItem * >::iterator * this_ptr, int arg1) {
  return new QList< QStandardItem * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__13(QList< QTextBlock >::iterator * this_ptr, int arg1) {
  return new QList< QTextBlock >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__13(QList< QTextFrame * >::iterator * this_ptr, int arg1) {
  return new QList< QTextFrame * >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__14(QList< QInputMethodEvent::Attribute >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__14(QList< QTouchEvent::TouchPoint >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__14(QList< QSize >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__14(QList< QKeySequence >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__14(QList< QTouchDevice const * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__14(QList< QPolygonF >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__14(QList< double >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__14(QList< QTextOption::Tab >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__14(QList< QFontDatabase::WritingSystem >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__14(QList< QTextLayout::FormatRange >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__14(QList< QGlyphRun >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__14(QList< QAccessibleInterface * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__14(QList< QWindow * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__14(QList< QScreen * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__14(QList< QOpenGLContext * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__14(QList< QOpenGLDebugMessage >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__14(QList< QOpenGLShader * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__14(QList< QStandardItem * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__14(QList< QTextBlock >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__14(QList< QTextFrame * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator__15(QList< QInputMethodEvent::Attribute >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator__15(QList< QTouchEvent::TouchPoint >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator__15(QList< QSize >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator__15(QList< QKeySequence >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator__15(QList< QTouchDevice const * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator__15(QList< QPolygonF >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator__15(QList< double >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator__15(QList< QTextOption::Tab >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator__15(QList< QFontDatabase::WritingSystem >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator__15(QList< QTextLayout::FormatRange >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator__15(QList< QGlyphRun >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator__15(QList< QAccessibleInterface * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator__15(QList< QWindow * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator__15(QList< QScreen * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator__15(QList< QOpenGLContext * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator__15(QList< QOpenGLDebugMessage >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator__15(QList< QOpenGLShader * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator__15(QList< QStandardItem * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator__15(QList< QTextBlock >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator__15(QList< QTextFrame * >::iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_5(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, long long j) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_5(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, long long j) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator_5(QList< QSize >::iterator const * this_ptr, long long j) {
  return new QList< QSize >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_5(QList< QKeySequence >::iterator const * this_ptr, long long j) {
  return new QList< QKeySequence >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_5(QList< QTouchDevice const * >::iterator const * this_ptr, long long j) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_5(QList< QPolygonF >::iterator const * this_ptr, long long j) {
  return new QList< QPolygonF >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator_5(QList< double >::iterator const * this_ptr, long long j) {
  return new QList< double >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_5(QList< QTextOption::Tab >::iterator const * this_ptr, long long j) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_5(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, long long j) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_5(QList< QTextLayout::FormatRange >::iterator const * this_ptr, long long j) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_5(QList< QGlyphRun >::iterator const * this_ptr, long long j) {
  return new QList< QGlyphRun >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_5(QList< QAccessibleInterface * >::iterator const * this_ptr, long long j) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_5(QList< QWindow * >::iterator const * this_ptr, long long j) {
  return new QList< QWindow * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_5(QList< QScreen * >::iterator const * this_ptr, long long j) {
  return new QList< QScreen * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_5(QList< QOpenGLContext * >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_5(QList< QOpenGLDebugMessage >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_5(QList< QOpenGLShader * >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_5(QList< QStandardItem * >::iterator const * this_ptr, long long j) {
  return new QList< QStandardItem * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_5(QList< QTextBlock >::iterator const * this_ptr, long long j) {
  return new QList< QTextBlock >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_5(QList< QTextFrame * >::iterator const * this_ptr, long long j) {
  return new QList< QTextFrame * >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_6(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, long long j) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_6(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, long long j) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator_6(QList< QSize >::iterator const * this_ptr, long long j) {
  return new QList< QSize >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_6(QList< QKeySequence >::iterator const * this_ptr, long long j) {
  return new QList< QKeySequence >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_6(QList< QTouchDevice const * >::iterator const * this_ptr, long long j) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_6(QList< QPolygonF >::iterator const * this_ptr, long long j) {
  return new QList< QPolygonF >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator_6(QList< double >::iterator const * this_ptr, long long j) {
  return new QList< double >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_6(QList< QTextOption::Tab >::iterator const * this_ptr, long long j) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_6(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, long long j) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_6(QList< QTextLayout::FormatRange >::iterator const * this_ptr, long long j) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_6(QList< QGlyphRun >::iterator const * this_ptr, long long j) {
  return new QList< QGlyphRun >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_6(QList< QAccessibleInterface * >::iterator const * this_ptr, long long j) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_6(QList< QWindow * >::iterator const * this_ptr, long long j) {
  return new QList< QWindow * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_6(QList< QScreen * >::iterator const * this_ptr, long long j) {
  return new QList< QScreen * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_6(QList< QOpenGLContext * >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_6(QList< QOpenGLDebugMessage >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_6(QList< QOpenGLShader * >::iterator const * this_ptr, long long j) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_6(QList< QStandardItem * >::iterator const * this_ptr, long long j) {
  return new QList< QStandardItem * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_6(QList< QTextBlock >::iterator const * this_ptr, long long j) {
  return new QList< QTextBlock >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_6(QList< QTextFrame * >::iterator const * this_ptr, long long j) {
  return new QList< QTextFrame * >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_7(QList< QInputMethodEvent::Attribute >::iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_7(QList< QTouchEvent::TouchPoint >::iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_iterator_operator_7(QList< QSize >::iterator const * this_ptr, QList< QSize >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_7(QList< QKeySequence >::iterator const * this_ptr, QList< QKeySequence >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_7(QList< QTouchDevice const * >::iterator const * this_ptr, QList< QTouchDevice const * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_7(QList< QPolygonF >::iterator const * this_ptr, QList< QPolygonF >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_iterator_operator_7(QList< double >::iterator const * this_ptr, QList< double >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_7(QList< QTextOption::Tab >::iterator const * this_ptr, QList< QTextOption::Tab >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_7(QList< QFontDatabase::WritingSystem >::iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_7(QList< QTextLayout::FormatRange >::iterator const * this_ptr, QList< QTextLayout::FormatRange >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_7(QList< QGlyphRun >::iterator const * this_ptr, QList< QGlyphRun >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_7(QList< QAccessibleInterface * >::iterator const * this_ptr, QList< QAccessibleInterface * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_7(QList< QWindow * >::iterator const * this_ptr, QList< QWindow * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_7(QList< QScreen * >::iterator const * this_ptr, QList< QScreen * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_7(QList< QOpenGLContext * >::iterator const * this_ptr, QList< QOpenGLContext * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_7(QList< QOpenGLDebugMessage >::iterator const * this_ptr, QList< QOpenGLDebugMessage >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_7(QList< QOpenGLShader * >::iterator const * this_ptr, QList< QOpenGLShader * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_7(QList< QStandardItem * >::iterator const * this_ptr, QList< QStandardItem * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_7(QList< QTextBlock >::iterator const * this_ptr, QList< QTextBlock >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_7(QList< QTextFrame * >::iterator const * this_ptr, QList< QTextFrame * >::iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_const_iterator() {
  return new QList< QInputMethodEvent::Attribute >::const_iterator();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_const_iterator() {
  return new QList< QTouchEvent::TouchPoint >::const_iterator();
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_const_iterator() {
  return new QList< QSize >::const_iterator();
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_const_iterator() {
  return new QList< QKeySequence >::const_iterator();
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_const_iterator() {
  return new QList< QTouchDevice const * >::const_iterator();
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_const_iterator() {
  return new QList< QPolygonF >::const_iterator();
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_const_iterator() {
  return new QList< double >::const_iterator();
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_const_iterator() {
  return new QList< QTextOption::Tab >::const_iterator();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_const_iterator() {
  return new QList< QFontDatabase::WritingSystem >::const_iterator();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_const_iterator() {
  return new QList< QTextLayout::FormatRange >::const_iterator();
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_const_iterator() {
  return new QList< QGlyphRun >::const_iterator();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_const_iterator() {
  return new QList< QAccessibleInterface * >::const_iterator();
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_const_iterator() {
  return new QList< QWindow * >::const_iterator();
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_const_iterator() {
  return new QList< QScreen * >::const_iterator();
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_const_iterator() {
  return new QList< QOpenGLContext * >::const_iterator();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_const_iterator() {
  return new QList< QOpenGLDebugMessage >::const_iterator();
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_const_iterator() {
  return new QList< QOpenGLShader * >::const_iterator();
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_const_iterator() {
  return new QList< QStandardItem * >::const_iterator();
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_const_iterator() {
  return new QList< QTextBlock >::const_iterator();
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_const_iterator() {
  return new QList< QTextFrame * >::const_iterator();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_const_iterator1(QList< QInputMethodEvent::Attribute >::const_iterator const * o) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_const_iterator1(QList< QTouchEvent::TouchPoint >::const_iterator const * o) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_const_iterator1(QList< QSize >::const_iterator const * o) {
  return new QList< QSize >::const_iterator(*o);
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_const_iterator1(QList< QKeySequence >::const_iterator const * o) {
  return new QList< QKeySequence >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_const_iterator1(QList< QTouchDevice const * >::const_iterator const * o) {
  return new QList< QTouchDevice const * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_const_iterator1(QList< QPolygonF >::const_iterator const * o) {
  return new QList< QPolygonF >::const_iterator(*o);
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_const_iterator1(QList< double >::const_iterator const * o) {
  return new QList< double >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_const_iterator1(QList< QTextOption::Tab >::const_iterator const * o) {
  return new QList< QTextOption::Tab >::const_iterator(*o);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_const_iterator1(QList< QFontDatabase::WritingSystem >::const_iterator const * o) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_const_iterator1(QList< QTextLayout::FormatRange >::const_iterator const * o) {
  return new QList< QTextLayout::FormatRange >::const_iterator(*o);
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_const_iterator1(QList< QGlyphRun >::const_iterator const * o) {
  return new QList< QGlyphRun >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_const_iterator1(QList< QAccessibleInterface * >::const_iterator const * o) {
  return new QList< QAccessibleInterface * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_const_iterator1(QList< QWindow * >::const_iterator const * o) {
  return new QList< QWindow * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_const_iterator1(QList< QScreen * >::const_iterator const * o) {
  return new QList< QScreen * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_const_iterator1(QList< QOpenGLContext * >::const_iterator const * o) {
  return new QList< QOpenGLContext * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_const_iterator1(QList< QOpenGLDebugMessage >::const_iterator const * o) {
  return new QList< QOpenGLDebugMessage >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_const_iterator1(QList< QOpenGLShader * >::const_iterator const * o) {
  return new QList< QOpenGLShader * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_const_iterator1(QList< QStandardItem * >::const_iterator const * o) {
  return new QList< QStandardItem * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_const_iterator1(QList< QTextBlock >::const_iterator const * o) {
  return new QList< QTextBlock >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_const_iterator1(QList< QTextFrame * >::const_iterator const * o) {
  return new QList< QTextFrame * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_const_iterator2(QList< QInputMethodEvent::Attribute >::iterator const * o) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_const_iterator2(QList< QTouchEvent::TouchPoint >::iterator const * o) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(*o);
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_const_iterator2(QList< QSize >::iterator const * o) {
  return new QList< QSize >::const_iterator(*o);
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_const_iterator2(QList< QKeySequence >::iterator const * o) {
  return new QList< QKeySequence >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_const_iterator2(QList< QTouchDevice const * >::iterator const * o) {
  return new QList< QTouchDevice const * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_const_iterator2(QList< QPolygonF >::iterator const * o) {
  return new QList< QPolygonF >::const_iterator(*o);
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_const_iterator2(QList< double >::iterator const * o) {
  return new QList< double >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_const_iterator2(QList< QTextOption::Tab >::iterator const * o) {
  return new QList< QTextOption::Tab >::const_iterator(*o);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_const_iterator2(QList< QFontDatabase::WritingSystem >::iterator const * o) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_const_iterator2(QList< QTextLayout::FormatRange >::iterator const * o) {
  return new QList< QTextLayout::FormatRange >::const_iterator(*o);
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_const_iterator2(QList< QGlyphRun >::iterator const * o) {
  return new QList< QGlyphRun >::const_iterator(*o);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_const_iterator2(QList< QAccessibleInterface * >::iterator const * o) {
  return new QList< QAccessibleInterface * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_const_iterator2(QList< QWindow * >::iterator const * o) {
  return new QList< QWindow * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_const_iterator2(QList< QScreen * >::iterator const * o) {
  return new QList< QScreen * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_const_iterator2(QList< QOpenGLContext * >::iterator const * o) {
  return new QList< QOpenGLContext * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_const_iterator2(QList< QOpenGLDebugMessage >::iterator const * o) {
  return new QList< QOpenGLDebugMessage >::const_iterator(*o);
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_const_iterator2(QList< QOpenGLShader * >::iterator const * o) {
  return new QList< QOpenGLShader * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_const_iterator2(QList< QStandardItem * >::iterator const * o) {
  return new QList< QStandardItem * >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_const_iterator2(QList< QTextBlock >::iterator const * o) {
  return new QList< QTextBlock >::const_iterator(*o);
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_const_iterator2(QList< QTextFrame * >::iterator const * o) {
  return new QList< QTextFrame * >::const_iterator(*o);
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_(QList< QSize >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_(QList< QKeySequence >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_(QList< QTouchDevice const * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_(QList< QPolygonF >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_const_iterator_operator_(QList< double >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_(QList< QTextOption::Tab >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_(QList< QGlyphRun >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_(QList< QAccessibleInterface * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_(QList< QWindow * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_(QList< QScreen * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_(QList< QOpenGLContext * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_(QList< QOpenGLShader * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_(QList< QStandardItem * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_(QList< QTextBlock >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_(QList< QTextFrame * >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__(QList< QSize >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__(QList< QKeySequence >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__(QList< QTouchDevice const * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__(QList< QPolygonF >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_const_iterator_operator__(QList< double >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__(QList< QTextOption::Tab >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__(QList< QGlyphRun >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__(QList< QAccessibleInterface * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__(QList< QWindow * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__(QList< QScreen * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__(QList< QOpenGLContext * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__(QList< QOpenGLShader * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__(QList< QStandardItem * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__(QList< QTextBlock >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__(QList< QTextFrame * >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__1(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__1(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__1(QList< QSize >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__1(QList< QKeySequence >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__1(QList< QTouchDevice const * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__1(QList< QPolygonF >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_const_iterator_operator__1(QList< double >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__1(QList< QTextOption::Tab >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__1(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__1(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__1(QList< QGlyphRun >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__1(QList< QAccessibleInterface * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__1(QList< QWindow * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__1(QList< QScreen * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__1(QList< QOpenGLContext * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__1(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__1(QList< QOpenGLShader * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__1(QList< QStandardItem * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__1(QList< QTextBlock >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__1(QList< QTextFrame * >::const_iterator const * this_ptr, long long j) {
  return &this_ptr->operator[](j);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__2(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__2(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__2(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__2(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__2(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__2(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_const_iterator_operator__2(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__2(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__2(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__2(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__2(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__2(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__2(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__2(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__2(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__2(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__2(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__2(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__2(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__2(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_1(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_1(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_1(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_1(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_1(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_1(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_const_iterator_operator_1(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_1(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_1(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_1(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_1(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_1(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_1(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_1(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_1(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_1(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_1(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_1(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_1(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_1(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator<(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__4(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__4(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__4(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__4(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__4(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__4(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_const_iterator_operator__4(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__4(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__4(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__4(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__4(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__4(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__4(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__4(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__4(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__4(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__4(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__4(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__4(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__4(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator<=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_2(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_2(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_2(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_2(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_2(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_2(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_const_iterator_operator_2(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_2(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_2(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_2(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_2(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_2(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_2(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_2(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_2(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_2(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_2(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_2(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_2(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_2(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator>(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__5(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__5(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__5(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__5(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__5(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__5(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_const_iterator_operator__5(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__5(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__5(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__5(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__5(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__5(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__5(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__5(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__5(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__5(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__5(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__5(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__5(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__5(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return this_ptr->operator>=(*other);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__6(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__6(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__6(QList< QSize >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__6(QList< QKeySequence >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__6(QList< QTouchDevice const * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__6(QList< QPolygonF >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__6(QList< double >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__6(QList< QTextOption::Tab >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__6(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__6(QList< QTextLayout::FormatRange >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__6(QList< QGlyphRun >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__6(QList< QAccessibleInterface * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__6(QList< QWindow * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__6(QList< QScreen * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__6(QList< QOpenGLContext * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__6(QList< QOpenGLDebugMessage >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__6(QList< QOpenGLShader * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__6(QList< QStandardItem * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__6(QList< QTextBlock >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__6(QList< QTextFrame * >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__7(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr, int arg1) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__7(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr, int arg1) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__7(QList< QSize >::const_iterator * this_ptr, int arg1) {
  return new QList< QSize >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__7(QList< QKeySequence >::const_iterator * this_ptr, int arg1) {
  return new QList< QKeySequence >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__7(QList< QTouchDevice const * >::const_iterator * this_ptr, int arg1) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__7(QList< QPolygonF >::const_iterator * this_ptr, int arg1) {
  return new QList< QPolygonF >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__7(QList< double >::const_iterator * this_ptr, int arg1) {
  return new QList< double >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__7(QList< QTextOption::Tab >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__7(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr, int arg1) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__7(QList< QTextLayout::FormatRange >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__7(QList< QGlyphRun >::const_iterator * this_ptr, int arg1) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__7(QList< QAccessibleInterface * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__7(QList< QWindow * >::const_iterator * this_ptr, int arg1) {
  return new QList< QWindow * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__7(QList< QScreen * >::const_iterator * this_ptr, int arg1) {
  return new QList< QScreen * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__7(QList< QOpenGLContext * >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__7(QList< QOpenGLDebugMessage >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__7(QList< QOpenGLShader * >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__7(QList< QStandardItem * >::const_iterator * this_ptr, int arg1) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__7(QList< QTextBlock >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextBlock >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__7(QList< QTextFrame * >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__8(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__8(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__8(QList< QSize >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__8(QList< QKeySequence >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__8(QList< QTouchDevice const * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__8(QList< QPolygonF >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__8(QList< double >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__8(QList< QTextOption::Tab >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__8(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__8(QList< QTextLayout::FormatRange >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__8(QList< QGlyphRun >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__8(QList< QAccessibleInterface * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__8(QList< QWindow * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__8(QList< QScreen * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__8(QList< QOpenGLContext * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__8(QList< QOpenGLDebugMessage >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__8(QList< QOpenGLShader * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__8(QList< QStandardItem * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__8(QList< QTextBlock >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__8(QList< QTextFrame * >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__9(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr, int arg1) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__9(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr, int arg1) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__9(QList< QSize >::const_iterator * this_ptr, int arg1) {
  return new QList< QSize >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__9(QList< QKeySequence >::const_iterator * this_ptr, int arg1) {
  return new QList< QKeySequence >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__9(QList< QTouchDevice const * >::const_iterator * this_ptr, int arg1) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__9(QList< QPolygonF >::const_iterator * this_ptr, int arg1) {
  return new QList< QPolygonF >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__9(QList< double >::const_iterator * this_ptr, int arg1) {
  return new QList< double >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__9(QList< QTextOption::Tab >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__9(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr, int arg1) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__9(QList< QTextLayout::FormatRange >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__9(QList< QGlyphRun >::const_iterator * this_ptr, int arg1) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__9(QList< QAccessibleInterface * >::const_iterator * this_ptr, int arg1) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__9(QList< QWindow * >::const_iterator * this_ptr, int arg1) {
  return new QList< QWindow * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__9(QList< QScreen * >::const_iterator * this_ptr, int arg1) {
  return new QList< QScreen * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__9(QList< QOpenGLContext * >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__9(QList< QOpenGLDebugMessage >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__9(QList< QOpenGLShader * >::const_iterator * this_ptr, int arg1) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__9(QList< QStandardItem * >::const_iterator * this_ptr, int arg1) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__9(QList< QTextBlock >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextBlock >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__9(QList< QTextFrame * >::const_iterator * this_ptr, int arg1) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__10(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__10(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__10(QList< QSize >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__10(QList< QKeySequence >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__10(QList< QTouchDevice const * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__10(QList< QPolygonF >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__10(QList< double >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__10(QList< QTextOption::Tab >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__10(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__10(QList< QTextLayout::FormatRange >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__10(QList< QGlyphRun >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__10(QList< QAccessibleInterface * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__10(QList< QWindow * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__10(QList< QScreen * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__10(QList< QOpenGLContext * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__10(QList< QOpenGLDebugMessage >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__10(QList< QOpenGLShader * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__10(QList< QStandardItem * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__10(QList< QTextBlock >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__10(QList< QTextFrame * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator__11(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator__11(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator__11(QList< QSize >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator__11(QList< QKeySequence >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator__11(QList< QTouchDevice const * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator__11(QList< QPolygonF >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator__11(QList< double >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator__11(QList< QTextOption::Tab >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator__11(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator__11(QList< QTextLayout::FormatRange >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator__11(QList< QGlyphRun >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator__11(QList< QAccessibleInterface * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator__11(QList< QWindow * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator__11(QList< QScreen * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator__11(QList< QOpenGLContext * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator__11(QList< QOpenGLDebugMessage >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator__11(QList< QOpenGLShader * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator__11(QList< QStandardItem * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator__11(QList< QTextBlock >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator__11(QList< QTextFrame * >::const_iterator * this_ptr, long long j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_3(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, long long j) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_3(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, long long j) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_3(QList< QSize >::const_iterator const * this_ptr, long long j) {
  return new QList< QSize >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_3(QList< QKeySequence >::const_iterator const * this_ptr, long long j) {
  return new QList< QKeySequence >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_3(QList< QTouchDevice const * >::const_iterator const * this_ptr, long long j) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_3(QList< QPolygonF >::const_iterator const * this_ptr, long long j) {
  return new QList< QPolygonF >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator_3(QList< double >::const_iterator const * this_ptr, long long j) {
  return new QList< double >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_3(QList< QTextOption::Tab >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_3(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, long long j) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_3(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_3(QList< QGlyphRun >::const_iterator const * this_ptr, long long j) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_3(QList< QAccessibleInterface * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_3(QList< QWindow * >::const_iterator const * this_ptr, long long j) {
  return new QList< QWindow * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_3(QList< QScreen * >::const_iterator const * this_ptr, long long j) {
  return new QList< QScreen * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_3(QList< QOpenGLContext * >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_3(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_3(QList< QOpenGLShader * >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_3(QList< QStandardItem * >::const_iterator const * this_ptr, long long j) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_3(QList< QTextBlock >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextBlock >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_3(QList< QTextFrame * >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_4(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, long long j) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_4(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, long long j) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_4(QList< QSize >::const_iterator const * this_ptr, long long j) {
  return new QList< QSize >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_4(QList< QKeySequence >::const_iterator const * this_ptr, long long j) {
  return new QList< QKeySequence >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_4(QList< QTouchDevice const * >::const_iterator const * this_ptr, long long j) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_4(QList< QPolygonF >::const_iterator const * this_ptr, long long j) {
  return new QList< QPolygonF >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator_4(QList< double >::const_iterator const * this_ptr, long long j) {
  return new QList< double >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_4(QList< QTextOption::Tab >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_4(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, long long j) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_4(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_4(QList< QGlyphRun >::const_iterator const * this_ptr, long long j) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_4(QList< QAccessibleInterface * >::const_iterator const * this_ptr, long long j) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_4(QList< QWindow * >::const_iterator const * this_ptr, long long j) {
  return new QList< QWindow * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_4(QList< QScreen * >::const_iterator const * this_ptr, long long j) {
  return new QList< QScreen * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_4(QList< QOpenGLContext * >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_4(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_4(QList< QOpenGLShader * >::const_iterator const * this_ptr, long long j) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_4(QList< QStandardItem * >::const_iterator const * this_ptr, long long j) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_4(QList< QTextBlock >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextBlock >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_4(QList< QTextFrame * >::const_iterator const * this_ptr, long long j) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_5(QList< QInputMethodEvent::Attribute >::const_iterator const * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_5(QList< QTouchEvent::TouchPoint >::const_iterator const * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_5(QList< QSize >::const_iterator const * this_ptr, QList< QSize >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_5(QList< QKeySequence >::const_iterator const * this_ptr, QList< QKeySequence >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_5(QList< QTouchDevice const * >::const_iterator const * this_ptr, QList< QTouchDevice const * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_5(QList< QPolygonF >::const_iterator const * this_ptr, QList< QPolygonF >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_const_iterator_operator_5(QList< double >::const_iterator const * this_ptr, QList< double >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_5(QList< QTextOption::Tab >::const_iterator const * this_ptr, QList< QTextOption::Tab >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_5(QList< QFontDatabase::WritingSystem >::const_iterator const * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_5(QList< QTextLayout::FormatRange >::const_iterator const * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_5(QList< QGlyphRun >::const_iterator const * this_ptr, QList< QGlyphRun >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_5(QList< QAccessibleInterface * >::const_iterator const * this_ptr, QList< QAccessibleInterface * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_5(QList< QWindow * >::const_iterator const * this_ptr, QList< QWindow * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_5(QList< QScreen * >::const_iterator const * this_ptr, QList< QScreen * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_5(QList< QOpenGLContext * >::const_iterator const * this_ptr, QList< QOpenGLContext * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_5(QList< QOpenGLDebugMessage >::const_iterator const * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_5(QList< QOpenGLShader * >::const_iterator const * this_ptr, QList< QOpenGLShader * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_5(QList< QStandardItem * >::const_iterator const * this_ptr, QList< QStandardItem * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_5(QList< QTextBlock >::const_iterator const * this_ptr, QList< QTextBlock >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_5(QList< QTextFrame * >::const_iterator const * this_ptr, QList< QTextFrame * >::const_iterator const * j) {
  return this_ptr->operator-(*j);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_begin(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_begin(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_begin(QList< QSize > * this_ptr) {
  return new QList< QSize >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_begin(QList< QKeySequence > * this_ptr) {
  return new QList< QKeySequence >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_begin(QList< QTouchDevice const * > * this_ptr) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_begin(QList< QPolygonF > * this_ptr) {
  return new QList< QPolygonF >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_begin(QList< double > * this_ptr) {
  return new QList< double >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_begin(QList< QTextOption::Tab > * this_ptr) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_begin(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_begin(QList< QTextLayout::FormatRange > * this_ptr) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_begin(QList< QGlyphRun > * this_ptr) {
  return new QList< QGlyphRun >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_begin(QList< QAccessibleInterface * > * this_ptr) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_begin(QList< QWindow * > * this_ptr) {
  return new QList< QWindow * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_begin(QList< QScreen * > * this_ptr) {
  return new QList< QScreen * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_begin(QList< QOpenGLContext * > * this_ptr) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_begin(QList< QOpenGLDebugMessage > * this_ptr) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_begin(QList< QOpenGLShader * > * this_ptr) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_begin(QList< QStandardItem * > * this_ptr) {
  return new QList< QStandardItem * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_begin(QList< QTextBlock > * this_ptr) {
  return new QList< QTextBlock >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_begin(QList< QTextFrame * > * this_ptr) {
  return new QList< QTextFrame * >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_begin1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_begin1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_begin1(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_begin1(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_begin1(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_begin1(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_begin1(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_begin1(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_begin1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_begin1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_begin1(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_begin1(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_begin1(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_begin1(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_begin1(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_begin1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_begin1(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_begin1(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_begin1(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_begin1(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_cbegin(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_cbegin(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_cbegin(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_cbegin(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_cbegin(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_cbegin(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_cbegin(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_cbegin(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_cbegin(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_cbegin(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_cbegin(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_cbegin(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_cbegin(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_cbegin(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_cbegin(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_cbegin(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_cbegin(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_cbegin(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_cbegin(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_cbegin(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_constBegin(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_constBegin(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_constBegin(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_constBegin(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_constBegin(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_constBegin(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_constBegin(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_constBegin(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_constBegin(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_constBegin(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_constBegin(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_constBegin(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_constBegin(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_constBegin(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_constBegin(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_constBegin(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_constBegin(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_constBegin(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_constBegin(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_constBegin(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_end(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_end(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_end(QList< QSize > * this_ptr) {
  return new QList< QSize >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_end(QList< QKeySequence > * this_ptr) {
  return new QList< QKeySequence >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_end(QList< QTouchDevice const * > * this_ptr) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_end(QList< QPolygonF > * this_ptr) {
  return new QList< QPolygonF >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_end(QList< double > * this_ptr) {
  return new QList< double >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_end(QList< QTextOption::Tab > * this_ptr) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_end(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_end(QList< QTextLayout::FormatRange > * this_ptr) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_end(QList< QGlyphRun > * this_ptr) {
  return new QList< QGlyphRun >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_end(QList< QAccessibleInterface * > * this_ptr) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_end(QList< QWindow * > * this_ptr) {
  return new QList< QWindow * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_end(QList< QScreen * > * this_ptr) {
  return new QList< QScreen * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_end(QList< QOpenGLContext * > * this_ptr) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_end(QList< QOpenGLDebugMessage > * this_ptr) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_end(QList< QOpenGLShader * > * this_ptr) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_end(QList< QStandardItem * > * this_ptr) {
  return new QList< QStandardItem * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_end(QList< QTextBlock > * this_ptr) {
  return new QList< QTextBlock >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_end(QList< QTextFrame * > * this_ptr) {
  return new QList< QTextFrame * >::iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_end1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_end1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_end1(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_end1(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_end1(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_end1(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_end1(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_end1(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_end1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_end1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_end1(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_end1(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_end1(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_end1(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_end1(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_end1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_end1(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_end1(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_end1(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_end1(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_cend(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_cend(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_cend(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_cend(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_cend(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_cend(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_cend(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_cend(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_cend(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_cend(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_cend(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_cend(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_cend(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_cend(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_cend(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_cend(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_cend(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_cend(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_cend(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_cend(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_constEnd(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return new QList< QInputMethodEvent::Attribute >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_constEnd(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return new QList< QTouchEvent::TouchPoint >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_constEnd(QList< QSize > const * this_ptr) {
  return new QList< QSize >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_constEnd(QList< QKeySequence > const * this_ptr) {
  return new QList< QKeySequence >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_constEnd(QList< QTouchDevice const * > const * this_ptr) {
  return new QList< QTouchDevice const * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_constEnd(QList< QPolygonF > const * this_ptr) {
  return new QList< QPolygonF >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_constEnd(QList< double > const * this_ptr) {
  return new QList< double >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_constEnd(QList< QTextOption::Tab > const * this_ptr) {
  return new QList< QTextOption::Tab >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_constEnd(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return new QList< QFontDatabase::WritingSystem >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_constEnd(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_constEnd(QList< QGlyphRun > const * this_ptr) {
  return new QList< QGlyphRun >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_constEnd(QList< QAccessibleInterface * > const * this_ptr) {
  return new QList< QAccessibleInterface * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_constEnd(QList< QWindow * > const * this_ptr) {
  return new QList< QWindow * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_constEnd(QList< QScreen * > const * this_ptr) {
  return new QList< QScreen * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_constEnd(QList< QOpenGLContext * > const * this_ptr) {
  return new QList< QOpenGLContext * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_constEnd(QList< QOpenGLDebugMessage > const * this_ptr) {
  return new QList< QOpenGLDebugMessage >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_constEnd(QList< QOpenGLShader * > const * this_ptr) {
  return new QList< QOpenGLShader * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_constEnd(QList< QStandardItem * > const * this_ptr) {
  return new QList< QStandardItem * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_constEnd(QList< QTextBlock > const * this_ptr) {
  return new QList< QTextBlock >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_constEnd(QList< QTextFrame * > const * this_ptr) {
  return new QList< QTextFrame * >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_insert1(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * before, QInputMethodEvent::Attribute const * t) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_insert1(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * before, QTouchEvent::TouchPoint const * t) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_insert1(QList< QSize > * this_ptr, QList< QSize >::iterator const * before, QSize const * t) {
  return new QList< QSize >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_insert1(QList< QKeySequence > * this_ptr, QList< QKeySequence >::iterator const * before, QKeySequence const * t) {
  return new QList< QKeySequence >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_insert1(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * >::iterator const * before, QTouchDevice const * const * t) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_insert1(QList< QPolygonF > * this_ptr, QList< QPolygonF >::iterator const * before, QPolygonF const * t) {
  return new QList< QPolygonF >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_insert1(QList< double > * this_ptr, QList< double >::iterator const * before, double const * t) {
  return new QList< double >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_insert1(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab >::iterator const * before, QTextOption::Tab const * t) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_insert1(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * before, QFontDatabase::WritingSystem const * t) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_insert1(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange >::iterator const * before, QTextLayout::FormatRange const * t) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_insert1(QList< QGlyphRun > * this_ptr, QList< QGlyphRun >::iterator const * before, QGlyphRun const * t) {
  return new QList< QGlyphRun >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_insert1(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * >::iterator const * before, QAccessibleInterface * const * t) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_insert1(QList< QWindow * > * this_ptr, QList< QWindow * >::iterator const * before, QWindow * const * t) {
  return new QList< QWindow * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_insert1(QList< QScreen * > * this_ptr, QList< QScreen * >::iterator const * before, QScreen * const * t) {
  return new QList< QScreen * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_insert1(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * >::iterator const * before, QOpenGLContext * const * t) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_insert1(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage >::iterator const * before, QOpenGLDebugMessage const * t) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_insert1(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * >::iterator const * before, QOpenGLShader * const * t) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_insert1(QList< QStandardItem * > * this_ptr, QList< QStandardItem * >::iterator const * before, QStandardItem * const * t) {
  return new QList< QStandardItem * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_insert1(QList< QTextBlock > * this_ptr, QList< QTextBlock >::iterator const * before, QTextBlock const * t) {
  return new QList< QTextBlock >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_insert1(QList< QTextFrame * > * this_ptr, QList< QTextFrame * >::iterator const * before, QTextFrame * const * t) {
  return new QList< QTextFrame * >::iterator(this_ptr->insert(*before, *t));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_erase(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * pos) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_erase(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * pos) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_erase(QList< QSize > * this_ptr, QList< QSize >::iterator const * pos) {
  return new QList< QSize >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_erase(QList< QKeySequence > * this_ptr, QList< QKeySequence >::iterator const * pos) {
  return new QList< QKeySequence >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_erase(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * >::iterator const * pos) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_erase(QList< QPolygonF > * this_ptr, QList< QPolygonF >::iterator const * pos) {
  return new QList< QPolygonF >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_erase(QList< double > * this_ptr, QList< double >::iterator const * pos) {
  return new QList< double >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_erase(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab >::iterator const * pos) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_erase(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * pos) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_erase(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange >::iterator const * pos) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_erase(QList< QGlyphRun > * this_ptr, QList< QGlyphRun >::iterator const * pos) {
  return new QList< QGlyphRun >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_erase(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * >::iterator const * pos) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_erase(QList< QWindow * > * this_ptr, QList< QWindow * >::iterator const * pos) {
  return new QList< QWindow * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_erase(QList< QScreen * > * this_ptr, QList< QScreen * >::iterator const * pos) {
  return new QList< QScreen * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_erase(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * >::iterator const * pos) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_erase(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage >::iterator const * pos) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_erase(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * >::iterator const * pos) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_erase(QList< QStandardItem * > * this_ptr, QList< QStandardItem * >::iterator const * pos) {
  return new QList< QStandardItem * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_erase(QList< QTextBlock > * this_ptr, QList< QTextBlock >::iterator const * pos) {
  return new QList< QTextBlock >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_erase(QList< QTextFrame * > * this_ptr, QList< QTextFrame * >::iterator const * pos) {
  return new QList< QTextFrame * >::iterator(this_ptr->erase(*pos));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_erase1(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * first, QList< QInputMethodEvent::Attribute >::iterator const * last) {
  return new QList< QInputMethodEvent::Attribute >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_erase1(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * first, QList< QTouchEvent::TouchPoint >::iterator const * last) {
  return new QList< QTouchEvent::TouchPoint >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_erase1(QList< QSize > * this_ptr, QList< QSize >::iterator const * first, QList< QSize >::iterator const * last) {
  return new QList< QSize >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_erase1(QList< QKeySequence > * this_ptr, QList< QKeySequence >::iterator const * first, QList< QKeySequence >::iterator const * last) {
  return new QList< QKeySequence >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_erase1(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * >::iterator const * first, QList< QTouchDevice const * >::iterator const * last) {
  return new QList< QTouchDevice const * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_erase1(QList< QPolygonF > * this_ptr, QList< QPolygonF >::iterator const * first, QList< QPolygonF >::iterator const * last) {
  return new QList< QPolygonF >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_erase1(QList< double > * this_ptr, QList< double >::iterator const * first, QList< double >::iterator const * last) {
  return new QList< double >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_erase1(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab >::iterator const * first, QList< QTextOption::Tab >::iterator const * last) {
  return new QList< QTextOption::Tab >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_erase1(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * first, QList< QFontDatabase::WritingSystem >::iterator const * last) {
  return new QList< QFontDatabase::WritingSystem >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_erase1(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange >::iterator const * first, QList< QTextLayout::FormatRange >::iterator const * last) {
  return new QList< QTextLayout::FormatRange >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_erase1(QList< QGlyphRun > * this_ptr, QList< QGlyphRun >::iterator const * first, QList< QGlyphRun >::iterator const * last) {
  return new QList< QGlyphRun >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_erase1(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * >::iterator const * first, QList< QAccessibleInterface * >::iterator const * last) {
  return new QList< QAccessibleInterface * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_erase1(QList< QWindow * > * this_ptr, QList< QWindow * >::iterator const * first, QList< QWindow * >::iterator const * last) {
  return new QList< QWindow * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_erase1(QList< QScreen * > * this_ptr, QList< QScreen * >::iterator const * first, QList< QScreen * >::iterator const * last) {
  return new QList< QScreen * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_erase1(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * >::iterator const * first, QList< QOpenGLContext * >::iterator const * last) {
  return new QList< QOpenGLContext * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_erase1(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage >::iterator const * first, QList< QOpenGLDebugMessage >::iterator const * last) {
  return new QList< QOpenGLDebugMessage >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_erase1(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * >::iterator const * first, QList< QOpenGLShader * >::iterator const * last) {
  return new QList< QOpenGLShader * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_erase1(QList< QStandardItem * > * this_ptr, QList< QStandardItem * >::iterator const * first, QList< QStandardItem * >::iterator const * last) {
  return new QList< QStandardItem * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_erase1(QList< QTextBlock > * this_ptr, QList< QTextBlock >::iterator const * first, QList< QTextBlock >::iterator const * last) {
  return new QList< QTextBlock >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_erase1(QList< QTextFrame * > * this_ptr, QList< QTextFrame * >::iterator const * first, QList< QTextFrame * >::iterator const * last) {
  return new QList< QTextFrame * >::iterator(this_ptr->erase(*first, *last));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_count1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_count1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_count1(QList< QSize > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_count1(QList< QKeySequence > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_count1(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_count1(QList< QPolygonF > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_count1(QList< double > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_count1(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_count1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_count1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_count1(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_count1(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_count1(QList< QWindow * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_count1(QList< QScreen * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_count1(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_count1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_count1(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_count1(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_count1(QList< QTextBlock > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_count1(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_length(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_length(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_length(QList< QSize > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_length(QList< QKeySequence > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_length(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_length(QList< QPolygonF > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_length(QList< double > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_length(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_length(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_length(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_length(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_length(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_length(QList< QWindow * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_length(QList< QScreen * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_length(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_length(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_length(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_length(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_length(QList< QTextBlock > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_length(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_first(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_first(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_first(QList< QSize > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_first(QList< QKeySequence > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_first(QList< QTouchDevice const * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_first(QList< QPolygonF > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_first(QList< double > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_first(QList< QTextOption::Tab > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_first(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_first(QList< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_first(QList< QGlyphRun > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_first(QList< QAccessibleInterface * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_first(QList< QWindow * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_first(QList< QScreen * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_first(QList< QOpenGLContext * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_first(QList< QOpenGLDebugMessage > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_first(QList< QOpenGLShader * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_first(QList< QStandardItem * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_first(QList< QTextBlock > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_first(QList< QTextFrame * > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_constFirst(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_constFirst(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_constFirst(QList< QSize > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_constFirst(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_constFirst(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_constFirst(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_constFirst(QList< double > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_constFirst(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_constFirst(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_constFirst(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_constFirst(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_constFirst(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_constFirst(QList< QWindow * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_constFirst(QList< QScreen * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_constFirst(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_constFirst(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_constFirst(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_constFirst(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_constFirst(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_constFirst(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_first1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_first1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_first1(QList< QSize > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_first1(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_first1(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_first1(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_first1(QList< double > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_first1(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_first1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_first1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_first1(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_first1(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_first1(QList< QWindow * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_first1(QList< QScreen * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_first1(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_first1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_first1(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_first1(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_first1(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_first1(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_last(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_last(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_last(QList< QSize > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_last(QList< QKeySequence > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_last(QList< QTouchDevice const * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_last(QList< QPolygonF > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_last(QList< double > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_last(QList< QTextOption::Tab > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_last(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_last(QList< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_last(QList< QGlyphRun > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_last(QList< QAccessibleInterface * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_last(QList< QWindow * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_last(QList< QScreen * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_last(QList< QOpenGLContext * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_last(QList< QOpenGLDebugMessage > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_last(QList< QOpenGLShader * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_last(QList< QStandardItem * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_last(QList< QTextBlock > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_last(QList< QTextFrame * > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_last1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_last1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_last1(QList< QSize > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_last1(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_last1(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_last1(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_last1(QList< double > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_last1(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_last1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_last1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_last1(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_last1(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_last1(QList< QWindow * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_last1(QList< QScreen * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_last1(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_last1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_last1(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_last1(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_last1(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_last1(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_constLast(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_constLast(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_constLast(QList< QSize > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_constLast(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_constLast(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_constLast(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_constLast(QList< double > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_constLast(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_constLast(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_constLast(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_constLast(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_constLast(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_constLast(QList< QWindow * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_constLast(QList< QScreen * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_constLast(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_constLast(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_constLast(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_constLast(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_constLast(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_constLast(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_removeFirst(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_removeFirst(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_removeFirst(QList< QSize > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_removeFirst(QList< QKeySequence > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_removeFirst(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_removeFirst(QList< QPolygonF > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_removeFirst(QList< double > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_removeFirst(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_removeFirst(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_removeFirst(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_removeFirst(QList< QGlyphRun > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_removeFirst(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_removeFirst(QList< QWindow * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_removeFirst(QList< QScreen * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_removeFirst(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_removeFirst(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_removeFirst(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_removeFirst(QList< QStandardItem * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_removeFirst(QList< QTextBlock > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_removeFirst(QList< QTextFrame * > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_removeLast(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_removeLast(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_removeLast(QList< QSize > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_removeLast(QList< QKeySequence > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_removeLast(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_removeLast(QList< QPolygonF > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_removeLast(QList< double > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_removeLast(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_removeLast(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_removeLast(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_removeLast(QList< QGlyphRun > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_removeLast(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_removeLast(QList< QWindow * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_removeLast(QList< QScreen * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_removeLast(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_removeLast(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_removeLast(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_removeLast(QList< QStandardItem * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_removeLast(QList< QTextBlock > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_removeLast(QList< QTextFrame * > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_startsWith(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_startsWith(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_startsWith(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_startsWith(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_startsWith(QList< double > const * this_ptr, double const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_startsWith(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_startsWith(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_startsWith(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_startsWith(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_startsWith(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_startsWith(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_startsWith(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_startsWith(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_startsWith(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_startsWith(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_startsWith(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_startsWith(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_startsWith(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_endsWith(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_endsWith(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_endsWith(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_endsWith(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_endsWith(QList< double > const * this_ptr, double const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_endsWith(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_endsWith(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_endsWith(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_endsWith(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_endsWith(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_endsWith(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_endsWith(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_endsWith(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_endsWith(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_endsWith(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_endsWith(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_endsWith(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_endsWith(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_mid(QList< QInputMethodEvent::Attribute > const * this_ptr, int pos, int length) {
  return new QList< QInputMethodEvent::Attribute >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_mid(QList< QTouchEvent::TouchPoint > const * this_ptr, int pos, int length) {
  return new QList< QTouchEvent::TouchPoint >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_mid(QList< QSize > const * this_ptr, int pos, int length) {
  return new QList< QSize >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_mid(QList< QKeySequence > const * this_ptr, int pos, int length) {
  return new QList< QKeySequence >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_mid(QList< QTouchDevice const * > const * this_ptr, int pos, int length) {
  return new QList< QTouchDevice const * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_mid(QList< QPolygonF > const * this_ptr, int pos, int length) {
  return new QList< QPolygonF >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_mid(QList< double > const * this_ptr, int pos, int length) {
  return new QList< double >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_mid(QList< QTextOption::Tab > const * this_ptr, int pos, int length) {
  return new QList< QTextOption::Tab >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_mid(QList< QFontDatabase::WritingSystem > const * this_ptr, int pos, int length) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_mid(QList< QTextLayout::FormatRange > const * this_ptr, int pos, int length) {
  return new QList< QTextLayout::FormatRange >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_mid(QList< QGlyphRun > const * this_ptr, int pos, int length) {
  return new QList< QGlyphRun >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_mid(QList< QAccessibleInterface * > const * this_ptr, int pos, int length) {
  return new QList< QAccessibleInterface * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_mid(QList< QWindow * > const * this_ptr, int pos, int length) {
  return new QList< QWindow * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_mid(QList< QScreen * > const * this_ptr, int pos, int length) {
  return new QList< QScreen * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_mid(QList< QOpenGLContext * > const * this_ptr, int pos, int length) {
  return new QList< QOpenGLContext * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_mid(QList< QOpenGLDebugMessage > const * this_ptr, int pos, int length) {
  return new QList< QOpenGLDebugMessage >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_mid(QList< QOpenGLShader * > const * this_ptr, int pos, int length) {
  return new QList< QOpenGLShader * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_mid(QList< QStandardItem * > const * this_ptr, int pos, int length) {
  return new QList< QStandardItem * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_mid(QList< QTextBlock > const * this_ptr, int pos, int length) {
  return new QList< QTextBlock >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_mid(QList< QTextFrame * > const * this_ptr, int pos, int length) {
  return new QList< QTextFrame * >(this_ptr->mid(pos, length));
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_value(QList< QTouchEvent::TouchPoint > const * this_ptr, int i) {
  return new QTouchEvent::TouchPoint(this_ptr->value(i));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_value(QList< QSize > const * this_ptr, int i) {
  return new QSize(this_ptr->value(i));
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_value(QList< QKeySequence > const * this_ptr, int i) {
  return new QKeySequence(this_ptr->value(i));
}


RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_value(QList< QTouchDevice const * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_value(QList< QPolygonF > const * this_ptr, int i) {
  return new QPolygonF(this_ptr->value(i));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QList_double_value(QList< double > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_value(QList< QTextOption::Tab > const * this_ptr, int i) {
  return new QTextOption::Tab(this_ptr->value(i));
}


RITUAL_EXPORT QFontDatabase::WritingSystem ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_value(QList< QFontDatabase::WritingSystem > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_value(QList< QTextLayout::FormatRange > const * this_ptr, int i) {
  return new QTextLayout::FormatRange(this_ptr->value(i));
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_value(QList< QGlyphRun > const * this_ptr, int i) {
  return new QGlyphRun(this_ptr->value(i));
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_value(QList< QAccessibleInterface * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QList_QWindow_ptr_value(QList< QWindow * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QList_QScreen_ptr_value(QList< QScreen * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_value(QList< QOpenGLContext * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_value(QList< QOpenGLDebugMessage > const * this_ptr, int i) {
  return new QOpenGLDebugMessage(this_ptr->value(i));
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_value(QList< QOpenGLShader * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QList_QStandardItem_ptr_value(QList< QStandardItem * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_value(QList< QTextBlock > const * this_ptr, int i) {
  return new QTextBlock(this_ptr->value(i));
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QList_QTextFrame_ptr_value(QList< QTextFrame * > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_value1(QList< QInputMethodEvent::Attribute > const * this_ptr, int i, QInputMethodEvent::Attribute const * defaultValue) {
  return new QInputMethodEvent::Attribute(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_value1(QList< QTouchEvent::TouchPoint > const * this_ptr, int i, QTouchEvent::TouchPoint const * defaultValue) {
  return new QTouchEvent::TouchPoint(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_value1(QList< QSize > const * this_ptr, int i, QSize const * defaultValue) {
  return new QSize(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_value1(QList< QKeySequence > const * this_ptr, int i, QKeySequence const * defaultValue) {
  return new QKeySequence(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_value1(QList< QTouchDevice const * > const * this_ptr, int i, QTouchDevice const * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_value1(QList< QPolygonF > const * this_ptr, int i, QPolygonF const * defaultValue) {
  return new QPolygonF(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QList_double_value1(QList< double > const * this_ptr, int i, double const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_value1(QList< QTextOption::Tab > const * this_ptr, int i, QTextOption::Tab const * defaultValue) {
  return new QTextOption::Tab(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QFontDatabase::WritingSystem ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_value1(QList< QFontDatabase::WritingSystem > const * this_ptr, int i, QFontDatabase::WritingSystem const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_value1(QList< QTextLayout::FormatRange > const * this_ptr, int i, QTextLayout::FormatRange const * defaultValue) {
  return new QTextLayout::FormatRange(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_value1(QList< QGlyphRun > const * this_ptr, int i, QGlyphRun const * defaultValue) {
  return new QGlyphRun(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_value1(QList< QAccessibleInterface * > const * this_ptr, int i, QAccessibleInterface * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_QList_QWindow_ptr_value1(QList< QWindow * > const * this_ptr, int i, QWindow * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QList_QScreen_ptr_value1(QList< QScreen * > const * this_ptr, int i, QScreen * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_value1(QList< QOpenGLContext * > const * this_ptr, int i, QOpenGLContext * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_value1(QList< QOpenGLDebugMessage > const * this_ptr, int i, QOpenGLDebugMessage const * defaultValue) {
  return new QOpenGLDebugMessage(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_value1(QList< QOpenGLShader * > const * this_ptr, int i, QOpenGLShader * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QList_QStandardItem_ptr_value1(QList< QStandardItem * > const * this_ptr, int i, QStandardItem * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_value1(QList< QTextBlock > const * this_ptr, int i, QTextBlock const * defaultValue) {
  return new QTextBlock(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_QList_QTextFrame_ptr_value1(QList< QTextFrame * > const * this_ptr, int i, QTextFrame * const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_push_back(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_push_back(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_push_back(QList< QSize > * this_ptr, QSize const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_push_back(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_push_back(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_push_back(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_push_back(QList< double > * this_ptr, double const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_push_back(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_push_back(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_push_back(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_push_back(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_push_back(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_push_back(QList< QWindow * > * this_ptr, QWindow * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_push_back(QList< QScreen * > * this_ptr, QScreen * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_push_back(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_push_back(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_push_back(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_push_back(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_push_back(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_push_back(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_push_front(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_push_front(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_push_front(QList< QSize > * this_ptr, QSize const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_push_front(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_push_front(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_push_front(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_push_front(QList< double > * this_ptr, double const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_push_front(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_push_front(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_push_front(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_push_front(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_push_front(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_push_front(QList< QWindow * > * this_ptr, QWindow * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_push_front(QList< QScreen * > * this_ptr, QScreen * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_push_front(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_push_front(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_push_front(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_push_front(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_push_front(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_push_front(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_front(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_front(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_front(QList< QSize > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_front(QList< QKeySequence > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_front(QList< QTouchDevice const * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_front(QList< QPolygonF > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_front(QList< double > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_front(QList< QTextOption::Tab > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_front(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_front(QList< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_front(QList< QGlyphRun > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_front(QList< QAccessibleInterface * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_front(QList< QWindow * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_front(QList< QScreen * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_front(QList< QOpenGLContext * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_front(QList< QOpenGLDebugMessage > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_front(QList< QOpenGLShader * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_front(QList< QStandardItem * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_front(QList< QTextBlock > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_front(QList< QTextFrame * > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_front1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_front1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_front1(QList< QSize > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_front1(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_front1(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_front1(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_front1(QList< double > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_front1(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_front1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_front1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_front1(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_front1(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_front1(QList< QWindow * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_front1(QList< QScreen * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_front1(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_front1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_front1(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_front1(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_front1(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_front1(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QInputMethodEvent::Attribute * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_back(QList< QInputMethodEvent::Attribute > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTouchEvent::TouchPoint * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_back(QList< QTouchEvent::TouchPoint > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QList_QSize_back(QList< QSize > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QList_QKeySequence_back(QList< QKeySequence > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTouchDevice const * * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_back(QList< QTouchDevice const * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QList_QPolygonF_back(QList< QPolygonF > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QList_double_back(QList< double > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QList_QTextOption_Tab_back(QList< QTextOption::Tab > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QFontDatabase::WritingSystem * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_back(QList< QFontDatabase::WritingSystem > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_back(QList< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QGlyphRun * ctr_qt_gui_ffi_QList_QGlyphRun_back(QList< QGlyphRun > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAccessibleInterface * * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_back(QList< QAccessibleInterface * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QWindow * * ctr_qt_gui_ffi_QList_QWindow_ptr_back(QList< QWindow * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QScreen * * ctr_qt_gui_ffi_QList_QScreen_ptr_back(QList< QScreen * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLContext * * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_back(QList< QOpenGLContext * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_back(QList< QOpenGLDebugMessage > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLShader * * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_back(QList< QOpenGLShader * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStandardItem * * ctr_qt_gui_ffi_QList_QStandardItem_ptr_back(QList< QStandardItem * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QList_QTextBlock_back(QList< QTextBlock > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextFrame * * ctr_qt_gui_ffi_QList_QTextFrame_ptr_back(QList< QTextFrame * > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QInputMethodEvent::Attribute const * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_back1(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTouchEvent::TouchPoint const * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_back1(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QList_QSize_back1(QList< QSize > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QKeySequence const * ctr_qt_gui_ffi_QList_QKeySequence_back1(QList< QKeySequence > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTouchDevice const * const * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_back1(QList< QTouchDevice const * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPolygonF const * ctr_qt_gui_ffi_QList_QPolygonF_back1(QList< QPolygonF > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QList_double_back1(QList< double > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextOption::Tab const * ctr_qt_gui_ffi_QList_QTextOption_Tab_back1(QList< QTextOption::Tab > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QFontDatabase::WritingSystem const * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_back1(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_back1(QList< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QGlyphRun const * ctr_qt_gui_ffi_QList_QGlyphRun_back1(QList< QGlyphRun > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAccessibleInterface * const * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_back1(QList< QAccessibleInterface * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QWindow * const * ctr_qt_gui_ffi_QList_QWindow_ptr_back1(QList< QWindow * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QScreen * const * ctr_qt_gui_ffi_QList_QScreen_ptr_back1(QList< QScreen * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLContext * const * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_back1(QList< QOpenGLContext * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLDebugMessage const * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_back1(QList< QOpenGLDebugMessage > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QOpenGLShader * const * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_back1(QList< QOpenGLShader * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QStandardItem * const * ctr_qt_gui_ffi_QList_QStandardItem_ptr_back1(QList< QStandardItem * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextBlock const * ctr_qt_gui_ffi_QList_QTextBlock_back1(QList< QTextBlock > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextFrame * const * ctr_qt_gui_ffi_QList_QTextFrame_ptr_back1(QList< QTextFrame * > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_pop_front(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_pop_front(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_pop_front(QList< QSize > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_pop_front(QList< QKeySequence > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_pop_front(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_pop_front(QList< QPolygonF > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_pop_front(QList< double > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_pop_front(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_pop_front(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_pop_front(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_pop_front(QList< QGlyphRun > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_pop_front(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_pop_front(QList< QWindow * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_pop_front(QList< QScreen * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_pop_front(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_pop_front(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_pop_front(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_pop_front(QList< QStandardItem * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_pop_front(QList< QTextBlock > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_pop_front(QList< QTextFrame * > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_pop_back(QList< QInputMethodEvent::Attribute > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_pop_back(QList< QTouchEvent::TouchPoint > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_pop_back(QList< QSize > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_pop_back(QList< QKeySequence > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_pop_back(QList< QTouchDevice const * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_pop_back(QList< QPolygonF > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_pop_back(QList< double > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_pop_back(QList< QTextOption::Tab > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_pop_back(QList< QFontDatabase::WritingSystem > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_pop_back(QList< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_pop_back(QList< QGlyphRun > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_pop_back(QList< QAccessibleInterface * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_pop_back(QList< QWindow * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_pop_back(QList< QScreen * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_pop_back(QList< QOpenGLContext * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_pop_back(QList< QOpenGLDebugMessage > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_pop_back(QList< QOpenGLShader * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_pop_back(QList< QStandardItem * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_pop_back(QList< QTextBlock > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_pop_back(QList< QTextFrame * > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_empty(QList< QInputMethodEvent::Attribute > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_empty(QList< QTouchEvent::TouchPoint > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QSize_empty(QList< QSize > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QKeySequence_empty(QList< QKeySequence > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_empty(QList< QTouchDevice const * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QPolygonF_empty(QList< QPolygonF > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_double_empty(QList< double > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextOption_Tab_empty(QList< QTextOption::Tab > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_empty(QList< QFontDatabase::WritingSystem > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_empty(QList< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QGlyphRun_empty(QList< QGlyphRun > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_empty(QList< QAccessibleInterface * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QWindow_ptr_empty(QList< QWindow * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QScreen_ptr_empty(QList< QScreen * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_empty(QList< QOpenGLContext * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_empty(QList< QOpenGLDebugMessage > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_empty(QList< QOpenGLShader * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QStandardItem_ptr_empty(QList< QStandardItem * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextBlock_empty(QList< QTextBlock > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QList_QTextFrame_ptr_empty(QList< QTextFrame * > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__4(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__4(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator__4(QList< QSize > * this_ptr, QList< QSize > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator__4(QList< QKeySequence > * this_ptr, QList< QKeySequence > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__4(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator__4(QList< QPolygonF > * this_ptr, QList< QPolygonF > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator__4(QList< double > * this_ptr, QList< double > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__4(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__4(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__4(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator__4(QList< QGlyphRun > * this_ptr, QList< QGlyphRun > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__4(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__4(QList< QWindow * > * this_ptr, QList< QWindow * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__4(QList< QScreen * > * this_ptr, QList< QScreen * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__4(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__4(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__4(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__4(QList< QStandardItem * > * this_ptr, QList< QStandardItem * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator__4(QList< QTextBlock > * this_ptr, QList< QTextBlock > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__4(QList< QTextFrame * > * this_ptr, QList< QTextFrame * > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator_2(QList< QInputMethodEvent::Attribute > const * this_ptr, QList< QInputMethodEvent::Attribute > const * l) {
  return new QList< QInputMethodEvent::Attribute >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator_2(QList< QTouchEvent::TouchPoint > const * this_ptr, QList< QTouchEvent::TouchPoint > const * l) {
  return new QList< QTouchEvent::TouchPoint >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator_2(QList< QSize > const * this_ptr, QList< QSize > const * l) {
  return new QList< QSize >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator_2(QList< QKeySequence > const * this_ptr, QList< QKeySequence > const * l) {
  return new QList< QKeySequence >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator_2(QList< QTouchDevice const * > const * this_ptr, QList< QTouchDevice const * > const * l) {
  return new QList< QTouchDevice const * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator_2(QList< QPolygonF > const * this_ptr, QList< QPolygonF > const * l) {
  return new QList< QPolygonF >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator_2(QList< double > const * this_ptr, QList< double > const * l) {
  return new QList< double >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator_2(QList< QTextOption::Tab > const * this_ptr, QList< QTextOption::Tab > const * l) {
  return new QList< QTextOption::Tab >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator_2(QList< QFontDatabase::WritingSystem > const * this_ptr, QList< QFontDatabase::WritingSystem > const * l) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator_2(QList< QTextLayout::FormatRange > const * this_ptr, QList< QTextLayout::FormatRange > const * l) {
  return new QList< QTextLayout::FormatRange >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator_2(QList< QGlyphRun > const * this_ptr, QList< QGlyphRun > const * l) {
  return new QList< QGlyphRun >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator_2(QList< QAccessibleInterface * > const * this_ptr, QList< QAccessibleInterface * > const * l) {
  return new QList< QAccessibleInterface * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator_2(QList< QWindow * > const * this_ptr, QList< QWindow * > const * l) {
  return new QList< QWindow * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator_2(QList< QScreen * > const * this_ptr, QList< QScreen * > const * l) {
  return new QList< QScreen * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator_2(QList< QOpenGLContext * > const * this_ptr, QList< QOpenGLContext * > const * l) {
  return new QList< QOpenGLContext * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator_2(QList< QOpenGLDebugMessage > const * this_ptr, QList< QOpenGLDebugMessage > const * l) {
  return new QList< QOpenGLDebugMessage >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator_2(QList< QOpenGLShader * > const * this_ptr, QList< QOpenGLShader * > const * l) {
  return new QList< QOpenGLShader * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator_2(QList< QStandardItem * > const * this_ptr, QList< QStandardItem * > const * l) {
  return new QList< QStandardItem * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator_2(QList< QTextBlock > const * this_ptr, QList< QTextBlock > const * l) {
  return new QList< QTextBlock >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator_2(QList< QTextFrame * > const * this_ptr, QList< QTextFrame * > const * l) {
  return new QList< QTextFrame * >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__5(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__5(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator__5(QList< QSize > * this_ptr, QSize const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator__5(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__5(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator__5(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator__5(QList< double > * this_ptr, double const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__5(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__5(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__5(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator__5(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__5(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__5(QList< QWindow * > * this_ptr, QWindow * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__5(QList< QScreen * > * this_ptr, QScreen * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__5(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__5(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__5(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__5(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator__5(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__5(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__6(QList< QInputMethodEvent::Attribute > * this_ptr, QInputMethodEvent::Attribute const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__6(QList< QTouchEvent::TouchPoint > * this_ptr, QTouchEvent::TouchPoint const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator__6(QList< QSize > * this_ptr, QSize const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator__6(QList< QKeySequence > * this_ptr, QKeySequence const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__6(QList< QTouchDevice const * > * this_ptr, QTouchDevice const * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator__6(QList< QPolygonF > * this_ptr, QPolygonF const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator__6(QList< double > * this_ptr, double const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__6(QList< QTextOption::Tab > * this_ptr, QTextOption::Tab const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__6(QList< QFontDatabase::WritingSystem > * this_ptr, QFontDatabase::WritingSystem const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__6(QList< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator__6(QList< QGlyphRun > * this_ptr, QGlyphRun const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__6(QList< QAccessibleInterface * > * this_ptr, QAccessibleInterface * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__6(QList< QWindow * > * this_ptr, QWindow * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__6(QList< QScreen * > * this_ptr, QScreen * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__6(QList< QOpenGLContext * > * this_ptr, QOpenGLContext * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__6(QList< QOpenGLDebugMessage > * this_ptr, QOpenGLDebugMessage const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__6(QList< QOpenGLShader * > * this_ptr, QOpenGLShader * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__6(QList< QStandardItem * > * this_ptr, QStandardItem * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator__6(QList< QTextBlock > * this_ptr, QTextBlock const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__6(QList< QTextFrame * > * this_ptr, QTextFrame * const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_operator__7(QList< QInputMethodEvent::Attribute > * this_ptr, QList< QInputMethodEvent::Attribute > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_operator__7(QList< QTouchEvent::TouchPoint > * this_ptr, QList< QTouchEvent::TouchPoint > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_operator__7(QList< QSize > * this_ptr, QList< QSize > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_operator__7(QList< QKeySequence > * this_ptr, QList< QKeySequence > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_operator__7(QList< QTouchDevice const * > * this_ptr, QList< QTouchDevice const * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_operator__7(QList< QPolygonF > * this_ptr, QList< QPolygonF > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_operator__7(QList< double > * this_ptr, QList< double > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_operator__7(QList< QTextOption::Tab > * this_ptr, QList< QTextOption::Tab > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_operator__7(QList< QFontDatabase::WritingSystem > * this_ptr, QList< QFontDatabase::WritingSystem > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_operator__7(QList< QTextLayout::FormatRange > * this_ptr, QList< QTextLayout::FormatRange > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_operator__7(QList< QGlyphRun > * this_ptr, QList< QGlyphRun > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_operator__7(QList< QAccessibleInterface * > * this_ptr, QList< QAccessibleInterface * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_operator__7(QList< QWindow * > * this_ptr, QList< QWindow * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_operator__7(QList< QScreen * > * this_ptr, QList< QScreen * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_operator__7(QList< QOpenGLContext * > * this_ptr, QList< QOpenGLContext * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_operator__7(QList< QOpenGLDebugMessage > * this_ptr, QList< QOpenGLDebugMessage > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_operator__7(QList< QOpenGLShader * > * this_ptr, QList< QOpenGLShader * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_operator__7(QList< QStandardItem * > * this_ptr, QList< QStandardItem * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_operator__7(QList< QTextBlock > * this_ptr, QList< QTextBlock > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_operator__7(QList< QTextFrame * > * this_ptr, QList< QTextFrame * > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QList_QSize_toVector(QList< QSize > const * this_ptr) {
  return new QVector< QSize >(this_ptr->toVector());
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QList_double_toVector(QList< double > const * this_ptr) {
  return new QVector< double >(this_ptr->toVector());
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_toVector(QList< QTextLayout::FormatRange > const * this_ptr) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->toVector());
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_fromVector(QVector< QSize > const * vector) {
  return new QList< QSize >(QList< QSize >::fromVector(*vector));
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_fromVector(QVector< double > const * vector) {
  return new QList< double >(QList< double >::fromVector(*vector));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_fromVector(QVector< QTextLayout::FormatRange > const * vector) {
  return new QList< QTextLayout::FormatRange >(QList< QTextLayout::FormatRange >::fromVector(*vector));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash15(QList< QKeySequence > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash16(QList< QTouchDevice const * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash18(QList< double > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash20(QList< QFontDatabase::WritingSystem > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash23(QList< QAccessibleInterface * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash24(QList< QWindow * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash25(QList< QScreen * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash26(QList< QOpenGLContext * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash28(QList< QOpenGLShader * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash29(QList< QStandardItem * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash31(QList< QTextFrame * > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_140(QList< QKeySequence > const * lhs, QList< QKeySequence > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_141(QList< QTouchDevice const * > const * lhs, QList< QTouchDevice const * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_143(QList< double > const * lhs, QList< double > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_145(QList< QFontDatabase::WritingSystem > const * lhs, QList< QFontDatabase::WritingSystem > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_148(QList< QAccessibleInterface * > const * lhs, QList< QAccessibleInterface * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_149(QList< QWindow * > const * lhs, QList< QWindow * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_150(QList< QScreen * > const * lhs, QList< QScreen * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_151(QList< QOpenGLContext * > const * lhs, QList< QOpenGLContext * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_153(QList< QOpenGLShader * > const * lhs, QList< QOpenGLShader * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_154(QList< QStandardItem * > const * lhs, QList< QStandardItem * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_155(QList< QTextBlock > const * lhs, QList< QTextBlock > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_156(QList< QTextFrame * > const * lhs, QList< QTextFrame * > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_160(QList< QKeySequence > const * lhs, QList< QKeySequence > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_161(QList< QTouchDevice const * > const * lhs, QList< QTouchDevice const * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_163(QList< double > const * lhs, QList< double > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_165(QList< QFontDatabase::WritingSystem > const * lhs, QList< QFontDatabase::WritingSystem > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_168(QList< QAccessibleInterface * > const * lhs, QList< QAccessibleInterface * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_169(QList< QWindow * > const * lhs, QList< QWindow * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_170(QList< QScreen * > const * lhs, QList< QScreen * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_171(QList< QOpenGLContext * > const * lhs, QList< QOpenGLContext * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_173(QList< QOpenGLShader * > const * lhs, QList< QOpenGLShader * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_174(QList< QStandardItem * > const * lhs, QList< QStandardItem * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_175(QList< QTextBlock > const * lhs, QList< QTextBlock > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_176(QList< QTextFrame * > const * lhs, QList< QTextFrame * > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__131(QList< QKeySequence > const * lhs, QList< QKeySequence > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__132(QList< QTouchDevice const * > const * lhs, QList< QTouchDevice const * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__134(QList< double > const * lhs, QList< double > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__136(QList< QFontDatabase::WritingSystem > const * lhs, QList< QFontDatabase::WritingSystem > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__139(QList< QAccessibleInterface * > const * lhs, QList< QAccessibleInterface * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__140(QList< QWindow * > const * lhs, QList< QWindow * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__141(QList< QScreen * > const * lhs, QList< QScreen * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__142(QList< QOpenGLContext * > const * lhs, QList< QOpenGLContext * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__144(QList< QOpenGLShader * > const * lhs, QList< QOpenGLShader * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__145(QList< QStandardItem * > const * lhs, QList< QStandardItem * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__146(QList< QTextBlock > const * lhs, QList< QTextBlock > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__147(QList< QTextFrame * > const * lhs, QList< QTextFrame * > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__151(QList< QKeySequence > const * lhs, QList< QKeySequence > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__152(QList< QTouchDevice const * > const * lhs, QList< QTouchDevice const * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__154(QList< double > const * lhs, QList< double > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__156(QList< QFontDatabase::WritingSystem > const * lhs, QList< QFontDatabase::WritingSystem > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__159(QList< QAccessibleInterface * > const * lhs, QList< QAccessibleInterface * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__160(QList< QWindow * > const * lhs, QList< QWindow * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__161(QList< QScreen * > const * lhs, QList< QScreen * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__162(QList< QOpenGLContext * > const * lhs, QList< QOpenGLContext * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__164(QList< QOpenGLShader * > const * lhs, QList< QOpenGLShader * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__165(QList< QStandardItem * > const * lhs, QList< QStandardItem * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__166(QList< QTextBlock > const * lhs, QList< QTextBlock > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__167(QList< QTextFrame * > const * lhs, QList< QTextFrame * > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_QVector() {
  return new QVector< QPoint >();
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_QVector() {
  return new QVector< QPair< double, QColor > >();
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_QVector() {
  return new QVector< QAbstractTextDocumentLayout::Selection >();
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_QVector() {
  return new QVector< QRect >();
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_QVector() {
  return new QVector< double >();
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_QVector() {
  return new QVector< QTextLength >();
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_QVector() {
  return new QVector< quint32 >();
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_QVector() {
  return new QVector< QTextLayout::FormatRange >();
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_QVector() {
  return new QVector< QTextFormat >();
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QVector() {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >();
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_QVector() {
  return new QVector< QSize >();
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_QVector() {
  return new QVector< float >();
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_QVector() {
  return new QVector< GLuint64 >();
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_QVector() {
  return new QVector< QLineF >();
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_QVector() {
  return new QVector< QLine >();
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_QVector() {
  return new QVector< QRectF >();
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_QVector1(int size) {
  return new QVector< QPoint >(size);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_QVector1(int size) {
  return new QVector< QPair< double, QColor > >(size);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_QVector1(int size) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(size);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_QVector1(int size) {
  return new QVector< QRect >(size);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_QVector1(int size) {
  return new QVector< double >(size);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_QVector1(int size) {
  return new QVector< QTextLength >(size);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_QVector1(int size) {
  return new QVector< quint32 >(size);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_QVector1(int size) {
  return new QVector< QTextLayout::FormatRange >(size);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_QVector1(int size) {
  return new QVector< QTextFormat >(size);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QVector1(int size) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(size);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_QVector1(int size) {
  return new QVector< QSize >(size);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_QVector1(int size) {
  return new QVector< float >(size);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_QVector1(int size) {
  return new QVector< GLuint64 >(size);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_QVector1(int size) {
  return new QVector< QLineF >(size);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_QVector1(int size) {
  return new QVector< QLine >(size);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_QVector1(int size) {
  return new QVector< QRectF >(size);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_QVector2(int size, QPoint const * t) {
  return new QVector< QPoint >(size, *t);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_QVector2(int size, QPair< double, QColor > const * t) {
  return new QVector< QPair< double, QColor > >(size, *t);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_QVector2(int size, QAbstractTextDocumentLayout::Selection const * t) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(size, *t);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_QVector2(int size, QRect const * t) {
  return new QVector< QRect >(size, *t);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_QVector2(int size, double const * t) {
  return new QVector< double >(size, *t);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_QVector2(int size, QTextLength const * t) {
  return new QVector< QTextLength >(size, *t);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_QVector2(int size, quint32 const * t) {
  return new QVector< quint32 >(size, *t);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_QVector2(int size, QTextLayout::FormatRange const * t) {
  return new QVector< QTextLayout::FormatRange >(size, *t);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_QVector2(int size, QTextFormat const * t) {
  return new QVector< QTextFormat >(size, *t);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QVector2(int size, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(size, *t);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_QVector2(int size, QSize const * t) {
  return new QVector< QSize >(size, *t);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_QVector2(int size, float const * t) {
  return new QVector< float >(size, *t);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_QVector2(int size, GLuint64 const * t) {
  return new QVector< GLuint64 >(size, *t);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_QVector2(int size, QLineF const * t) {
  return new QVector< QLineF >(size, *t);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_QVector2(int size, QLine const * t) {
  return new QVector< QLine >(size, *t);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_QVector2(int size, QRectF const * t) {
  return new QVector< QRectF >(size, *t);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_QVector3(QVector< QPoint > const * v) {
  return new QVector< QPoint >(*v);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_QVector3(QVector< QPair< double, QColor > > const * v) {
  return new QVector< QPair< double, QColor > >(*v);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_QVector3(QVector< QAbstractTextDocumentLayout::Selection > const * v) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(*v);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_QVector3(QVector< QRect > const * v) {
  return new QVector< QRect >(*v);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_QVector3(QVector< double > const * v) {
  return new QVector< double >(*v);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_QVector3(QVector< QTextLength > const * v) {
  return new QVector< QTextLength >(*v);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_QVector3(QVector< quint32 > const * v) {
  return new QVector< quint32 >(*v);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_QVector3(QVector< QTextLayout::FormatRange > const * v) {
  return new QVector< QTextLayout::FormatRange >(*v);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_QVector3(QVector< QTextFormat > const * v) {
  return new QVector< QTextFormat >(*v);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QVector3(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * v) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(*v);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_QVector3(QVector< QSize > const * v) {
  return new QVector< QSize >(*v);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_QVector3(QVector< float > const * v) {
  return new QVector< float >(*v);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_QVector3(QVector< GLuint64 > const * v) {
  return new QVector< GLuint64 >(*v);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_QVector3(QVector< QLineF > const * v) {
  return new QVector< QLineF >(*v);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_QVector3(QVector< QLine > const * v) {
  return new QVector< QLine >(*v);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_QVector3(QVector< QRectF > const * v) {
  return new QVector< QRectF >(*v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_dQVector(QVector< QPoint > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_dQVector(QVector< QPair< double, QColor > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_dQVector(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_dQVector(QVector< QRect > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_dQVector(QVector< double > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_dQVector(QVector< QTextLength > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_dQVector(QVector< quint32 > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_dQVector(QVector< QTextLayout::FormatRange > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_dQVector(QVector< QTextFormat > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_dQVector(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_dQVector(QVector< QSize > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_dQVector(QVector< float > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_dQVector(QVector< GLuint64 > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_dQVector(QVector< QLineF > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_dQVector(QVector< QLine > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_dQVector(QVector< QRectF > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator_(QVector< QPoint > * this_ptr, QVector< QPoint > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator_(QVector< QPair< double, QColor > > * this_ptr, QVector< QPair< double, QColor > > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator_(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator_(QVector< QRect > * this_ptr, QVector< QRect > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator_(QVector< double > * this_ptr, QVector< double > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator_(QVector< QTextLength > * this_ptr, QVector< QTextLength > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator_(QVector< quint32 > * this_ptr, QVector< quint32 > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator_(QVector< QTextLayout::FormatRange > * this_ptr, QVector< QTextLayout::FormatRange > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator_(QVector< QTextFormat > * this_ptr, QVector< QTextFormat > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator_(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator_(QVector< QSize > * this_ptr, QVector< QSize > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator_(QVector< float > * this_ptr, QVector< float > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator_(QVector< GLuint64 > * this_ptr, QVector< GLuint64 > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator_(QVector< QLineF > * this_ptr, QVector< QLineF > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator_(QVector< QLine > * this_ptr, QVector< QLine > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator_(QVector< QRectF > * this_ptr, QVector< QRectF > const * v) {
  return &this_ptr->operator=(*v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_swap(QVector< QPoint > * this_ptr, QVector< QPoint > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_swap(QVector< QPair< double, QColor > > * this_ptr, QVector< QPair< double, QColor > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_swap(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_swap(QVector< QRect > * this_ptr, QVector< QRect > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_swap(QVector< double > * this_ptr, QVector< double > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_swap(QVector< QTextLength > * this_ptr, QVector< QTextLength > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_swap(QVector< quint32 > * this_ptr, QVector< quint32 > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_swap(QVector< QTextLayout::FormatRange > * this_ptr, QVector< QTextLayout::FormatRange > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_swap(QVector< QTextFormat > * this_ptr, QVector< QTextFormat > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_swap(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_swap(QVector< QSize > * this_ptr, QVector< QSize > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_swap(QVector< float > * this_ptr, QVector< float > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_swap(QVector< GLuint64 > * this_ptr, QVector< GLuint64 > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_swap(QVector< QLineF > * this_ptr, QVector< QLineF > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_swap(QVector< QLine > * this_ptr, QVector< QLine > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_swap(QVector< QRectF > * this_ptr, QVector< QRectF > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_operator__(QVector< QPoint > const * this_ptr, QVector< QPoint > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__(QVector< QPair< double, QColor > > const * this_ptr, QVector< QPair< double, QColor > > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_operator__(QVector< QRect > const * this_ptr, QVector< QRect > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_operator__(QVector< double > const * this_ptr, QVector< double > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_operator__(QVector< QTextLength > const * this_ptr, QVector< QTextLength > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_operator__(QVector< quint32 > const * this_ptr, QVector< quint32 > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__(QVector< QTextLayout::FormatRange > const * this_ptr, QVector< QTextLayout::FormatRange > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_operator__(QVector< QTextFormat > const * this_ptr, QVector< QTextFormat > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_operator__(QVector< QSize > const * this_ptr, QVector< QSize > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_operator__(QVector< float > const * this_ptr, QVector< float > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_operator__(QVector< GLuint64 > const * this_ptr, QVector< GLuint64 > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_operator__(QVector< QLineF > const * this_ptr, QVector< QLineF > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_operator__(QVector< QLine > const * this_ptr, QVector< QLine > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_operator__(QVector< QRectF > const * this_ptr, QVector< QRectF > const * v) {
  return this_ptr->operator==(*v);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_size(QVector< QPoint > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_size(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_size(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_size(QVector< QRect > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_size(QVector< double > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_size(QVector< QTextLength > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_size(QVector< quint32 > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_size(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_size(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_size(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_size(QVector< QSize > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_size(QVector< float > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_size(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_size(QVector< QLineF > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_size(QVector< QLine > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_size(QVector< QRectF > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_isEmpty(QVector< QPoint > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_isEmpty(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_isEmpty(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_isEmpty(QVector< QRect > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_isEmpty(QVector< double > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_isEmpty(QVector< QTextLength > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_isEmpty(QVector< quint32 > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_isEmpty(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_isEmpty(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_isEmpty(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_isEmpty(QVector< QSize > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_isEmpty(QVector< float > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_isEmpty(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_isEmpty(QVector< QLineF > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_isEmpty(QVector< QLine > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_isEmpty(QVector< QRectF > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_resize(QVector< QPoint > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_resize(QVector< QPair< double, QColor > > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_resize(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_resize(QVector< QRect > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_resize(QVector< double > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_resize(QVector< QTextLength > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_resize(QVector< quint32 > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_resize(QVector< QTextLayout::FormatRange > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_resize(QVector< QTextFormat > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_resize(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_resize(QVector< QSize > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_resize(QVector< float > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_resize(QVector< GLuint64 > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_resize(QVector< QLineF > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_resize(QVector< QLine > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_resize(QVector< QRectF > * this_ptr, int size) {
  this_ptr->resize(size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_capacity(QVector< QPoint > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_capacity(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_capacity(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_capacity(QVector< QRect > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_capacity(QVector< double > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_capacity(QVector< QTextLength > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_capacity(QVector< quint32 > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_capacity(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_capacity(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_capacity(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_capacity(QVector< QSize > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_capacity(QVector< float > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_capacity(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_capacity(QVector< QLineF > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_capacity(QVector< QLine > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_capacity(QVector< QRectF > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_reserve(QVector< QPoint > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_reserve(QVector< QPair< double, QColor > > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_reserve(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_reserve(QVector< QRect > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_reserve(QVector< double > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_reserve(QVector< QTextLength > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_reserve(QVector< quint32 > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_reserve(QVector< QTextLayout::FormatRange > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_reserve(QVector< QTextFormat > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_reserve(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_reserve(QVector< QSize > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_reserve(QVector< float > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_reserve(QVector< GLuint64 > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_reserve(QVector< QLineF > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_reserve(QVector< QLine > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_reserve(QVector< QRectF > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_squeeze(QVector< QPoint > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_squeeze(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_squeeze(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_squeeze(QVector< QRect > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_squeeze(QVector< double > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_squeeze(QVector< QTextLength > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_squeeze(QVector< quint32 > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_squeeze(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_squeeze(QVector< QTextFormat > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_squeeze(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_squeeze(QVector< QSize > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_squeeze(QVector< float > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_squeeze(QVector< GLuint64 > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_squeeze(QVector< QLineF > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_squeeze(QVector< QLine > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_squeeze(QVector< QRectF > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_detach(QVector< QPoint > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_detach(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_detach(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_detach(QVector< QRect > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_detach(QVector< double > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_detach(QVector< QTextLength > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_detach(QVector< quint32 > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_detach(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_detach(QVector< QTextFormat > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_detach(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_detach(QVector< QSize > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_detach(QVector< float > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_detach(QVector< GLuint64 > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_detach(QVector< QLineF > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_detach(QVector< QLine > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_detach(QVector< QRectF > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_isDetached(QVector< QPoint > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_isDetached(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_isDetached(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_isDetached(QVector< QRect > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_isDetached(QVector< double > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_isDetached(QVector< QTextLength > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_isDetached(QVector< quint32 > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_isDetached(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_isDetached(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_isDetached(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_isDetached(QVector< QSize > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_isDetached(QVector< float > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_isDetached(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_isDetached(QVector< QLineF > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_isDetached(QVector< QLine > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_isDetached(QVector< QRectF > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_setSharable(QVector< QPoint > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_setSharable(QVector< QPair< double, QColor > > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_setSharable(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_setSharable(QVector< QRect > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_setSharable(QVector< double > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_setSharable(QVector< QTextLength > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_setSharable(QVector< quint32 > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_setSharable(QVector< QTextLayout::FormatRange > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_setSharable(QVector< QTextFormat > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_setSharable(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_setSharable(QVector< QSize > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_setSharable(QVector< float > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_setSharable(QVector< GLuint64 > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_setSharable(QVector< QLineF > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_setSharable(QVector< QLine > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_setSharable(QVector< QRectF > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_isSharedWith(QVector< QPoint > const * this_ptr, QVector< QPoint > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_isSharedWith(QVector< QPair< double, QColor > > const * this_ptr, QVector< QPair< double, QColor > > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_isSharedWith(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_isSharedWith(QVector< QRect > const * this_ptr, QVector< QRect > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_isSharedWith(QVector< double > const * this_ptr, QVector< double > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_isSharedWith(QVector< QTextLength > const * this_ptr, QVector< QTextLength > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_isSharedWith(QVector< quint32 > const * this_ptr, QVector< quint32 > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_isSharedWith(QVector< QTextLayout::FormatRange > const * this_ptr, QVector< QTextLayout::FormatRange > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_isSharedWith(QVector< QTextFormat > const * this_ptr, QVector< QTextFormat > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_isSharedWith(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_isSharedWith(QVector< QSize > const * this_ptr, QVector< QSize > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_isSharedWith(QVector< float > const * this_ptr, QVector< float > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_isSharedWith(QVector< GLuint64 > const * this_ptr, QVector< GLuint64 > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_isSharedWith(QVector< QLineF > const * this_ptr, QVector< QLineF > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_isSharedWith(QVector< QLine > const * this_ptr, QVector< QLine > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_isSharedWith(QVector< QRectF > const * this_ptr, QVector< QRectF > const * other) {
  return this_ptr->isSharedWith(*other);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_data(QVector< QPoint > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_data(QVector< QPair< double, QColor > > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_data(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_data(QVector< QRect > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_data(QVector< double > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_data(QVector< QTextLength > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_data(QVector< quint32 > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_data(QVector< QTextLayout::FormatRange > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_data(QVector< QTextFormat > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_data(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_data(QVector< QSize > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_data(QVector< float > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_data(QVector< GLuint64 > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_data(QVector< QLineF > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_data(QVector< QLine > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_data(QVector< QRectF > * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_data1(QVector< QPoint > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_data1(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_data1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_data1(QVector< QRect > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_data1(QVector< double > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_data1(QVector< QTextLength > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_data1(QVector< quint32 > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_data1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_data1(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_data1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_data1(QVector< QSize > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_data1(QVector< float > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_data1(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_data1(QVector< QLineF > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_data1(QVector< QLine > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_data1(QVector< QRectF > const * this_ptr) {
  return this_ptr->data();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_constData(QVector< QPoint > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_constData(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_constData(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_constData(QVector< QRect > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_constData(QVector< double > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_constData(QVector< QTextLength > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_constData(QVector< quint32 > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_constData(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_constData(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_constData(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_constData(QVector< QSize > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_constData(QVector< float > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_constData(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_constData(QVector< QLineF > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_constData(QVector< QLine > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_constData(QVector< QRectF > const * this_ptr) {
  return this_ptr->constData();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_clear(QVector< QPoint > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_clear(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_clear(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_clear(QVector< QRect > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_clear(QVector< double > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_clear(QVector< QTextLength > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_clear(QVector< quint32 > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_clear(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_clear(QVector< QTextFormat > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_clear(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_clear(QVector< QSize > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_clear(QVector< float > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_clear(QVector< GLuint64 > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_clear(QVector< QLineF > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_clear(QVector< QLine > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_clear(QVector< QRectF > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_at(QVector< QPoint > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_at(QVector< QPair< double, QColor > > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_at(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_at(QVector< QRect > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_at(QVector< double > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_at(QVector< QTextLength > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_at(QVector< quint32 > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_at(QVector< QTextLayout::FormatRange > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_at(QVector< QTextFormat > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_at(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_at(QVector< QSize > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_at(QVector< float > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_at(QVector< GLuint64 > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_at(QVector< QLineF > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_at(QVector< QLine > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_at(QVector< QRectF > const * this_ptr, int i) {
  return &this_ptr->at(i);
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_operator__2(QVector< QPoint > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__2(QVector< QPair< double, QColor > > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__2(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_operator__2(QVector< QRect > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_operator__2(QVector< double > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_operator__2(QVector< QTextLength > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_operator__2(QVector< quint32 > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__2(QVector< QTextLayout::FormatRange > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_operator__2(QVector< QTextFormat > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__2(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_operator__2(QVector< QSize > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_operator__2(QVector< float > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_operator__2(QVector< GLuint64 > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_operator__2(QVector< QLineF > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_operator__2(QVector< QLine > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_operator__2(QVector< QRectF > * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_operator__3(QVector< QPoint > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__3(QVector< QPair< double, QColor > > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__3(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_operator__3(QVector< QRect > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_operator__3(QVector< double > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_operator__3(QVector< QTextLength > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_operator__3(QVector< quint32 > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__3(QVector< QTextLayout::FormatRange > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_operator__3(QVector< QTextFormat > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__3(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_operator__3(QVector< QSize > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_operator__3(QVector< float > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_operator__3(QVector< GLuint64 > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_operator__3(QVector< QLineF > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_operator__3(QVector< QLine > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_operator__3(QVector< QRectF > const * this_ptr, int i) {
  return &this_ptr->operator[](i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_append(QVector< QPoint > * this_ptr, QPoint const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_append(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_append(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_append(QVector< QRect > * this_ptr, QRect const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_append(QVector< double > * this_ptr, double const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_append(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_append(QVector< quint32 > * this_ptr, quint32 const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_append(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_append(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_append(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_append(QVector< QSize > * this_ptr, QSize const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_append(QVector< float > * this_ptr, float const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_append(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_append(QVector< QLineF > * this_ptr, QLineF const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_append(QVector< QLine > * this_ptr, QLine const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_append(QVector< QRectF > * this_ptr, QRectF const * t) {
  this_ptr->append(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_append2(QVector< QPoint > * this_ptr, QVector< QPoint > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_append2(QVector< QPair< double, QColor > > * this_ptr, QVector< QPair< double, QColor > > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_append2(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_append2(QVector< QRect > * this_ptr, QVector< QRect > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_append2(QVector< double > * this_ptr, QVector< double > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_append2(QVector< QTextLength > * this_ptr, QVector< QTextLength > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_append2(QVector< quint32 > * this_ptr, QVector< quint32 > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_append2(QVector< QTextLayout::FormatRange > * this_ptr, QVector< QTextLayout::FormatRange > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_append2(QVector< QTextFormat > * this_ptr, QVector< QTextFormat > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_append2(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_append2(QVector< QSize > * this_ptr, QVector< QSize > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_append2(QVector< float > * this_ptr, QVector< float > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_append2(QVector< GLuint64 > * this_ptr, QVector< GLuint64 > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_append2(QVector< QLineF > * this_ptr, QVector< QLineF > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_append2(QVector< QLine > * this_ptr, QVector< QLine > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_append2(QVector< QRectF > * this_ptr, QVector< QRectF > const * l) {
  this_ptr->append(*l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_prepend(QVector< QPoint > * this_ptr, QPoint const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_prepend(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_prepend(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_prepend(QVector< QRect > * this_ptr, QRect const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_prepend(QVector< double > * this_ptr, double const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_prepend(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_prepend(QVector< quint32 > * this_ptr, quint32 const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_prepend(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_prepend(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_prepend(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_prepend(QVector< QSize > * this_ptr, QSize const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_prepend(QVector< float > * this_ptr, float const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_prepend(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_prepend(QVector< QLineF > * this_ptr, QLineF const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_prepend(QVector< QLine > * this_ptr, QLine const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_prepend(QVector< QRectF > * this_ptr, QRectF const * t) {
  this_ptr->prepend(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_insert(QVector< QPoint > * this_ptr, int i, QPoint const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_insert(QVector< QPair< double, QColor > > * this_ptr, int i, QPair< double, QColor > const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_insert(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_insert(QVector< QRect > * this_ptr, int i, QRect const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_insert(QVector< double > * this_ptr, int i, double const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_insert(QVector< QTextLength > * this_ptr, int i, QTextLength const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_insert(QVector< quint32 > * this_ptr, int i, quint32 const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_insert(QVector< QTextLayout::FormatRange > * this_ptr, int i, QTextLayout::FormatRange const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_insert(QVector< QTextFormat > * this_ptr, int i, QTextFormat const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_insert(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_insert(QVector< QSize > * this_ptr, int i, QSize const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_insert(QVector< float > * this_ptr, int i, float const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_insert(QVector< GLuint64 > * this_ptr, int i, GLuint64 const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_insert(QVector< QLineF > * this_ptr, int i, QLineF const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_insert(QVector< QLine > * this_ptr, int i, QLine const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_insert(QVector< QRectF > * this_ptr, int i, QRectF const * t) {
  this_ptr->insert(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_insert1(QVector< QPoint > * this_ptr, int i, int n, QPoint const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_insert1(QVector< QPair< double, QColor > > * this_ptr, int i, int n, QPair< double, QColor > const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_insert1(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i, int n, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_insert1(QVector< QRect > * this_ptr, int i, int n, QRect const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_insert1(QVector< double > * this_ptr, int i, int n, double const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_insert1(QVector< QTextLength > * this_ptr, int i, int n, QTextLength const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_insert1(QVector< quint32 > * this_ptr, int i, int n, quint32 const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_insert1(QVector< QTextLayout::FormatRange > * this_ptr, int i, int n, QTextLayout::FormatRange const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_insert1(QVector< QTextFormat > * this_ptr, int i, int n, QTextFormat const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_insert1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i, int n, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_insert1(QVector< QSize > * this_ptr, int i, int n, QSize const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_insert1(QVector< float > * this_ptr, int i, int n, float const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_insert1(QVector< GLuint64 > * this_ptr, int i, int n, GLuint64 const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_insert1(QVector< QLineF > * this_ptr, int i, int n, QLineF const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_insert1(QVector< QLine > * this_ptr, int i, int n, QLine const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_insert1(QVector< QRectF > * this_ptr, int i, int n, QRectF const * t) {
  this_ptr->insert(i, n, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_replace(QVector< QPoint > * this_ptr, int i, QPoint const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_replace(QVector< QPair< double, QColor > > * this_ptr, int i, QPair< double, QColor > const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_replace(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_replace(QVector< QRect > * this_ptr, int i, QRect const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_replace(QVector< double > * this_ptr, int i, double const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_replace(QVector< QTextLength > * this_ptr, int i, QTextLength const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_replace(QVector< quint32 > * this_ptr, int i, quint32 const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_replace(QVector< QTextLayout::FormatRange > * this_ptr, int i, QTextLayout::FormatRange const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_replace(QVector< QTextFormat > * this_ptr, int i, QTextFormat const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_replace(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_replace(QVector< QSize > * this_ptr, int i, QSize const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_replace(QVector< float > * this_ptr, int i, float const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_replace(QVector< GLuint64 > * this_ptr, int i, GLuint64 const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_replace(QVector< QLineF > * this_ptr, int i, QLineF const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_replace(QVector< QLine > * this_ptr, int i, QLine const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_replace(QVector< QRectF > * this_ptr, int i, QRectF const * t) {
  this_ptr->replace(i, *t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_remove(QVector< QPoint > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_remove(QVector< QPair< double, QColor > > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_remove(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_remove(QVector< QRect > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_remove(QVector< double > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_remove(QVector< QTextLength > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_remove(QVector< quint32 > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_remove(QVector< QTextLayout::FormatRange > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_remove(QVector< QTextFormat > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_remove(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_remove(QVector< QSize > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_remove(QVector< float > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_remove(QVector< GLuint64 > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_remove(QVector< QLineF > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_remove(QVector< QLine > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_remove(QVector< QRectF > * this_ptr, int i) {
  this_ptr->remove(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_remove1(QVector< QPoint > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_remove1(QVector< QPair< double, QColor > > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_remove1(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_remove1(QVector< QRect > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_remove1(QVector< double > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_remove1(QVector< QTextLength > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_remove1(QVector< quint32 > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_remove1(QVector< QTextLayout::FormatRange > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_remove1(QVector< QTextFormat > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_remove1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_remove1(QVector< QSize > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_remove1(QVector< float > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_remove1(QVector< GLuint64 > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_remove1(QVector< QLineF > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_remove1(QVector< QLine > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_remove1(QVector< QRectF > * this_ptr, int i, int n) {
  this_ptr->remove(i, n);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_removeFirst(QVector< QPoint > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_removeFirst(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_removeFirst(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_removeFirst(QVector< QRect > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_removeFirst(QVector< double > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_removeFirst(QVector< QTextLength > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_removeFirst(QVector< quint32 > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_removeFirst(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_removeFirst(QVector< QTextFormat > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_removeFirst(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_removeFirst(QVector< QSize > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_removeFirst(QVector< float > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_removeFirst(QVector< GLuint64 > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_removeFirst(QVector< QLineF > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_removeFirst(QVector< QLine > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_removeFirst(QVector< QRectF > * this_ptr) {
  this_ptr->removeFirst();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_removeLast(QVector< QPoint > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_removeLast(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_removeLast(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_removeLast(QVector< QRect > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_removeLast(QVector< double > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_removeLast(QVector< QTextLength > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_removeLast(QVector< quint32 > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_removeLast(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_removeLast(QVector< QTextFormat > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_removeLast(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_removeLast(QVector< QSize > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_removeLast(QVector< float > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_removeLast(QVector< GLuint64 > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_removeLast(QVector< QLineF > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_removeLast(QVector< QLine > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_removeLast(QVector< QRectF > * this_ptr) {
  this_ptr->removeLast();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_takeFirst(QVector< QPoint > * this_ptr) {
  return new QPoint(this_ptr->takeFirst());
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_takeFirst(QVector< QPair< double, QColor > > * this_ptr) {
  return new QPair< double, QColor >(this_ptr->takeFirst());
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_takeFirst(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return new QAbstractTextDocumentLayout::Selection(this_ptr->takeFirst());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_takeFirst(QVector< QRect > * this_ptr) {
  return new QRect(this_ptr->takeFirst());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QVector_double_takeFirst(QVector< double > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_takeFirst(QVector< QTextLength > * this_ptr) {
  return new QTextLength(this_ptr->takeFirst());
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QVector_quint32_takeFirst(QVector< quint32 > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_takeFirst(QVector< QTextLayout::FormatRange > * this_ptr) {
  return new QTextLayout::FormatRange(this_ptr->takeFirst());
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_takeFirst(QVector< QTextFormat > * this_ptr) {
  return new QTextFormat(this_ptr->takeFirst());
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_takeFirst(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(this_ptr->takeFirst());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_takeFirst(QVector< QSize > * this_ptr) {
  return new QSize(this_ptr->takeFirst());
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector_float_takeFirst(QVector< float > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QVector_GLuint64_takeFirst(QVector< GLuint64 > * this_ptr) {
  return this_ptr->takeFirst();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_takeFirst(QVector< QLineF > * this_ptr) {
  return new QLineF(this_ptr->takeFirst());
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_takeFirst(QVector< QLine > * this_ptr) {
  return new QLine(this_ptr->takeFirst());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_takeFirst(QVector< QRectF > * this_ptr) {
  return new QRectF(this_ptr->takeFirst());
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_takeLast(QVector< QPoint > * this_ptr) {
  return new QPoint(this_ptr->takeLast());
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_takeLast(QVector< QPair< double, QColor > > * this_ptr) {
  return new QPair< double, QColor >(this_ptr->takeLast());
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_takeLast(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return new QAbstractTextDocumentLayout::Selection(this_ptr->takeLast());
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_takeLast(QVector< QRect > * this_ptr) {
  return new QRect(this_ptr->takeLast());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QVector_double_takeLast(QVector< double > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_takeLast(QVector< QTextLength > * this_ptr) {
  return new QTextLength(this_ptr->takeLast());
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QVector_quint32_takeLast(QVector< quint32 > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_takeLast(QVector< QTextLayout::FormatRange > * this_ptr) {
  return new QTextLayout::FormatRange(this_ptr->takeLast());
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_takeLast(QVector< QTextFormat > * this_ptr) {
  return new QTextFormat(this_ptr->takeLast());
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_takeLast(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(this_ptr->takeLast());
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_takeLast(QVector< QSize > * this_ptr) {
  return new QSize(this_ptr->takeLast());
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector_float_takeLast(QVector< float > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QVector_GLuint64_takeLast(QVector< GLuint64 > * this_ptr) {
  return this_ptr->takeLast();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_takeLast(QVector< QLineF > * this_ptr) {
  return new QLineF(this_ptr->takeLast());
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_takeLast(QVector< QLine > * this_ptr) {
  return new QLine(this_ptr->takeLast());
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_takeLast(QVector< QRectF > * this_ptr) {
  return new QRectF(this_ptr->takeLast());
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_fill(QVector< QPoint > * this_ptr, QPoint const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_fill(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_fill(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_fill(QVector< QRect > * this_ptr, QRect const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_fill(QVector< double > * this_ptr, double const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_fill(QVector< QTextLength > * this_ptr, QTextLength const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_fill(QVector< quint32 > * this_ptr, quint32 const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_fill(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_fill(QVector< QTextFormat > * this_ptr, QTextFormat const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_fill(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_fill(QVector< QSize > * this_ptr, QSize const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_fill(QVector< float > * this_ptr, float const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_fill(QVector< GLuint64 > * this_ptr, GLuint64 const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_fill(QVector< QLineF > * this_ptr, QLineF const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_fill(QVector< QLine > * this_ptr, QLine const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_fill(QVector< QRectF > * this_ptr, QRectF const * t, int size) {
  return &this_ptr->fill(*t, size);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_indexOf(QVector< QPoint > const * this_ptr, QPoint const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_indexOf(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_indexOf(QVector< QRect > const * this_ptr, QRect const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_indexOf(QVector< double > const * this_ptr, double const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_indexOf(QVector< QTextLength > const * this_ptr, QTextLength const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_indexOf(QVector< quint32 > const * this_ptr, quint32 const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_indexOf(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_indexOf(QVector< QTextFormat > const * this_ptr, QTextFormat const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_indexOf(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_indexOf(QVector< QSize > const * this_ptr, QSize const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_indexOf(QVector< float > const * this_ptr, float const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_indexOf(QVector< GLuint64 > const * this_ptr, GLuint64 const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_indexOf(QVector< QLineF > const * this_ptr, QLineF const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_indexOf(QVector< QLine > const * this_ptr, QLine const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_indexOf(QVector< QRectF > const * this_ptr, QRectF const * t, int from) {
  return this_ptr->indexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_lastIndexOf(QVector< QPoint > const * this_ptr, QPoint const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_lastIndexOf(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_lastIndexOf(QVector< QRect > const * this_ptr, QRect const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_lastIndexOf(QVector< double > const * this_ptr, double const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_lastIndexOf(QVector< QTextLength > const * this_ptr, QTextLength const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_lastIndexOf(QVector< quint32 > const * this_ptr, quint32 const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_lastIndexOf(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_lastIndexOf(QVector< QTextFormat > const * this_ptr, QTextFormat const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_lastIndexOf(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_lastIndexOf(QVector< QSize > const * this_ptr, QSize const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_lastIndexOf(QVector< float > const * this_ptr, float const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_lastIndexOf(QVector< GLuint64 > const * this_ptr, GLuint64 const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_lastIndexOf(QVector< QLineF > const * this_ptr, QLineF const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_lastIndexOf(QVector< QLine > const * this_ptr, QLine const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_lastIndexOf(QVector< QRectF > const * this_ptr, QRectF const * t, int from) {
  return this_ptr->lastIndexOf(*t, from);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_contains(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_contains(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_contains(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_contains(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_contains(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_contains(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_contains(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_contains(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_contains(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_contains(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_contains(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_contains(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_contains(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_contains(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_contains(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->contains(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_count(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_count(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_count(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_count(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_count(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_count(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_count(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_count(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_count(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_count(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_count(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_count(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_count(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_count(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_count(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->count(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_removeAt(QVector< QPoint > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_removeAt(QVector< QPair< double, QColor > > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_removeAt(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_removeAt(QVector< QRect > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_removeAt(QVector< double > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_removeAt(QVector< QTextLength > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_removeAt(QVector< quint32 > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_removeAt(QVector< QTextLayout::FormatRange > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_removeAt(QVector< QTextFormat > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_removeAt(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_removeAt(QVector< QSize > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_removeAt(QVector< float > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_removeAt(QVector< GLuint64 > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_removeAt(QVector< QLineF > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_removeAt(QVector< QLine > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_removeAt(QVector< QRectF > * this_ptr, int i) {
  this_ptr->removeAt(i);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_removeAll(QVector< QPoint > * this_ptr, QPoint const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_removeAll(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_removeAll(QVector< QRect > * this_ptr, QRect const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_removeAll(QVector< double > * this_ptr, double const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_removeAll(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_removeAll(QVector< quint32 > * this_ptr, quint32 const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_removeAll(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_removeAll(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_removeAll(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_removeAll(QVector< QSize > * this_ptr, QSize const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_removeAll(QVector< float > * this_ptr, float const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_removeAll(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_removeAll(QVector< QLineF > * this_ptr, QLineF const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_removeAll(QVector< QLine > * this_ptr, QLine const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_removeAll(QVector< QRectF > * this_ptr, QRectF const * t) {
  return this_ptr->removeAll(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_removeOne(QVector< QPoint > * this_ptr, QPoint const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_removeOne(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_removeOne(QVector< QRect > * this_ptr, QRect const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_removeOne(QVector< double > * this_ptr, double const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_removeOne(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_removeOne(QVector< quint32 > * this_ptr, quint32 const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_removeOne(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_removeOne(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_removeOne(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_removeOne(QVector< QSize > * this_ptr, QSize const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_removeOne(QVector< float > * this_ptr, float const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_removeOne(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_removeOne(QVector< QLineF > * this_ptr, QLineF const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_removeOne(QVector< QLine > * this_ptr, QLine const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_removeOne(QVector< QRectF > * this_ptr, QRectF const * t) {
  return this_ptr->removeOne(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_length(QVector< QPoint > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_length(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_length(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_length(QVector< QRect > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_length(QVector< double > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_length(QVector< QTextLength > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_length(QVector< quint32 > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_length(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_length(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_length(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_length(QVector< QSize > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_length(QVector< float > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_length(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_length(QVector< QLineF > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_length(QVector< QLine > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_length(QVector< QRectF > const * this_ptr) {
  return this_ptr->length();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_takeAt(QVector< QPoint > * this_ptr, int i) {
  return new QPoint(this_ptr->takeAt(i));
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_takeAt(QVector< QPair< double, QColor > > * this_ptr, int i) {
  return new QPair< double, QColor >(this_ptr->takeAt(i));
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_takeAt(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i) {
  return new QAbstractTextDocumentLayout::Selection(this_ptr->takeAt(i));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_takeAt(QVector< QRect > * this_ptr, int i) {
  return new QRect(this_ptr->takeAt(i));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QVector_double_takeAt(QVector< double > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_takeAt(QVector< QTextLength > * this_ptr, int i) {
  return new QTextLength(this_ptr->takeAt(i));
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QVector_quint32_takeAt(QVector< quint32 > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_takeAt(QVector< QTextLayout::FormatRange > * this_ptr, int i) {
  return new QTextLayout::FormatRange(this_ptr->takeAt(i));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_takeAt(QVector< QTextFormat > * this_ptr, int i) {
  return new QTextFormat(this_ptr->takeAt(i));
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_takeAt(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(this_ptr->takeAt(i));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_takeAt(QVector< QSize > * this_ptr, int i) {
  return new QSize(this_ptr->takeAt(i));
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector_float_takeAt(QVector< float > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QVector_GLuint64_takeAt(QVector< GLuint64 > * this_ptr, int i) {
  return this_ptr->takeAt(i);
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_takeAt(QVector< QLineF > * this_ptr, int i) {
  return new QLineF(this_ptr->takeAt(i));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_takeAt(QVector< QLine > * this_ptr, int i) {
  return new QLine(this_ptr->takeAt(i));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_takeAt(QVector< QRectF > * this_ptr, int i) {
  return new QRectF(this_ptr->takeAt(i));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_move(QVector< QPoint > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_move(QVector< QPair< double, QColor > > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_move(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_move(QVector< QRect > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_move(QVector< double > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_move(QVector< QTextLength > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_move(QVector< quint32 > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_move(QVector< QTextLayout::FormatRange > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_move(QVector< QTextFormat > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_move(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_move(QVector< QSize > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_move(QVector< float > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_move(QVector< GLuint64 > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_move(QVector< QLineF > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_move(QVector< QLine > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_move(QVector< QRectF > * this_ptr, int from, int to) {
  this_ptr->move(from, to);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_count1(QVector< QPoint > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_count1(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_count1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_count1(QVector< QRect > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_count1(QVector< double > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_count1(QVector< QTextLength > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_count1(QVector< quint32 > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_count1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_count1(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_count1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_count1(QVector< QSize > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_count1(QVector< float > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_count1(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_count1(QVector< QLineF > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_count1(QVector< QLine > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_count1(QVector< QRectF > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_first(QVector< QPoint > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_first(QVector< QPair< double, QColor > > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_first(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_first(QVector< QRect > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_first(QVector< double > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_first(QVector< QTextLength > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_first(QVector< quint32 > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_first(QVector< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_first(QVector< QTextFormat > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_first(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_first(QVector< QSize > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_first(QVector< float > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_first(QVector< GLuint64 > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_first(QVector< QLineF > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_first(QVector< QLine > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_first(QVector< QRectF > * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_first1(QVector< QPoint > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_first1(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_first1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_first1(QVector< QRect > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_first1(QVector< double > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_first1(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_first1(QVector< quint32 > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_first1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_first1(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_first1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_first1(QVector< QSize > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_first1(QVector< float > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_first1(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_first1(QVector< QLineF > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_first1(QVector< QLine > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_first1(QVector< QRectF > const * this_ptr) {
  return &this_ptr->first();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_constFirst(QVector< QPoint > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_constFirst(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_constFirst(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_constFirst(QVector< QRect > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_constFirst(QVector< double > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_constFirst(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_constFirst(QVector< quint32 > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_constFirst(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_constFirst(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_constFirst(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_constFirst(QVector< QSize > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_constFirst(QVector< float > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_constFirst(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_constFirst(QVector< QLineF > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_constFirst(QVector< QLine > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_constFirst(QVector< QRectF > const * this_ptr) {
  return &this_ptr->constFirst();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_last(QVector< QPoint > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_last(QVector< QPair< double, QColor > > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_last(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_last(QVector< QRect > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_last(QVector< double > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_last(QVector< QTextLength > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_last(QVector< quint32 > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_last(QVector< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_last(QVector< QTextFormat > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_last(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_last(QVector< QSize > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_last(QVector< float > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_last(QVector< GLuint64 > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_last(QVector< QLineF > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_last(QVector< QLine > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_last(QVector< QRectF > * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_last1(QVector< QPoint > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_last1(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_last1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_last1(QVector< QRect > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_last1(QVector< double > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_last1(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_last1(QVector< quint32 > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_last1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_last1(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_last1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_last1(QVector< QSize > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_last1(QVector< float > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_last1(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_last1(QVector< QLineF > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_last1(QVector< QLine > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_last1(QVector< QRectF > const * this_ptr) {
  return &this_ptr->last();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_constLast(QVector< QPoint > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_constLast(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_constLast(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_constLast(QVector< QRect > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_constLast(QVector< double > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_constLast(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_constLast(QVector< quint32 > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_constLast(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_constLast(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_constLast(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_constLast(QVector< QSize > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_constLast(QVector< float > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_constLast(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_constLast(QVector< QLineF > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_constLast(QVector< QLine > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_constLast(QVector< QRectF > const * this_ptr) {
  return &this_ptr->constLast();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_startsWith(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_startsWith(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_startsWith(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_startsWith(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_startsWith(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_startsWith(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_startsWith(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_startsWith(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_startsWith(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_startsWith(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_startsWith(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_startsWith(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_startsWith(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_startsWith(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_startsWith(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->startsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_endsWith(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_endsWith(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_endsWith(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_endsWith(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_endsWith(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_endsWith(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_endsWith(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_endsWith(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_endsWith(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_endsWith(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_endsWith(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_endsWith(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_endsWith(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_endsWith(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_endsWith(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->endsWith(*t);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_mid(QVector< QPoint > const * this_ptr, int pos, int len) {
  return new QVector< QPoint >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_mid(QVector< QPair< double, QColor > > const * this_ptr, int pos, int len) {
  return new QVector< QPair< double, QColor > >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_mid(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int pos, int len) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_mid(QVector< QRect > const * this_ptr, int pos, int len) {
  return new QVector< QRect >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_mid(QVector< double > const * this_ptr, int pos, int len) {
  return new QVector< double >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_mid(QVector< QTextLength > const * this_ptr, int pos, int len) {
  return new QVector< QTextLength >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_mid(QVector< quint32 > const * this_ptr, int pos, int len) {
  return new QVector< quint32 >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_mid(QVector< QTextLayout::FormatRange > const * this_ptr, int pos, int len) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_mid(QVector< QTextFormat > const * this_ptr, int pos, int len) {
  return new QVector< QTextFormat >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_mid(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int pos, int len) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_mid(QVector< QSize > const * this_ptr, int pos, int len) {
  return new QVector< QSize >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_mid(QVector< float > const * this_ptr, int pos, int len) {
  return new QVector< float >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_mid(QVector< GLuint64 > const * this_ptr, int pos, int len) {
  return new QVector< GLuint64 >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_mid(QVector< QLineF > const * this_ptr, int pos, int len) {
  return new QVector< QLineF >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_mid(QVector< QLine > const * this_ptr, int pos, int len) {
  return new QVector< QLine >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_mid(QVector< QRectF > const * this_ptr, int pos, int len) {
  return new QVector< QRectF >(this_ptr->mid(pos, len));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_value(QVector< QPoint > const * this_ptr, int i) {
  return new QPoint(this_ptr->value(i));
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_value(QVector< QPair< double, QColor > > const * this_ptr, int i) {
  return new QPair< double, QColor >(this_ptr->value(i));
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_value(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int i) {
  return new QAbstractTextDocumentLayout::Selection(this_ptr->value(i));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_value(QVector< QRect > const * this_ptr, int i) {
  return new QRect(this_ptr->value(i));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QVector_double_value(QVector< double > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_value(QVector< QTextLength > const * this_ptr, int i) {
  return new QTextLength(this_ptr->value(i));
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QVector_quint32_value(QVector< quint32 > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_value(QVector< QTextLayout::FormatRange > const * this_ptr, int i) {
  return new QTextLayout::FormatRange(this_ptr->value(i));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_value(QVector< QTextFormat > const * this_ptr, int i) {
  return new QTextFormat(this_ptr->value(i));
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_value(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int i) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(this_ptr->value(i));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_value(QVector< QSize > const * this_ptr, int i) {
  return new QSize(this_ptr->value(i));
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector_float_value(QVector< float > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QVector_GLuint64_value(QVector< GLuint64 > const * this_ptr, int i) {
  return this_ptr->value(i);
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_value(QVector< QLineF > const * this_ptr, int i) {
  return new QLineF(this_ptr->value(i));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_value(QVector< QLine > const * this_ptr, int i) {
  return new QLine(this_ptr->value(i));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_value(QVector< QRectF > const * this_ptr, int i) {
  return new QRectF(this_ptr->value(i));
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_value1(QVector< QPoint > const * this_ptr, int i, QPoint const * defaultValue) {
  return new QPoint(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_value1(QVector< QPair< double, QColor > > const * this_ptr, int i, QPair< double, QColor > const * defaultValue) {
  return new QPair< double, QColor >(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_value1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int i, QAbstractTextDocumentLayout::Selection const * defaultValue) {
  return new QAbstractTextDocumentLayout::Selection(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_value1(QVector< QRect > const * this_ptr, int i, QRect const * defaultValue) {
  return new QRect(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QVector_double_value1(QVector< double > const * this_ptr, int i, double const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_value1(QVector< QTextLength > const * this_ptr, int i, QTextLength const * defaultValue) {
  return new QTextLength(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT quint32 ctr_qt_gui_ffi_QVector_quint32_value1(QVector< quint32 > const * this_ptr, int i, quint32 const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_value1(QVector< QTextLayout::FormatRange > const * this_ptr, int i, QTextLayout::FormatRange const * defaultValue) {
  return new QTextLayout::FormatRange(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_value1(QVector< QTextFormat > const * this_ptr, int i, QTextFormat const * defaultValue) {
  return new QTextFormat(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_value1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int i, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * defaultValue) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_value1(QVector< QSize > const * this_ptr, int i, QSize const * defaultValue) {
  return new QSize(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT float ctr_qt_gui_ffi_QVector_float_value1(QVector< float > const * this_ptr, int i, float const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT GLuint64 ctr_qt_gui_ffi_QVector_GLuint64_value1(QVector< GLuint64 > const * this_ptr, int i, GLuint64 const * defaultValue) {
  return this_ptr->value(i, *defaultValue);
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_value1(QVector< QLineF > const * this_ptr, int i, QLineF const * defaultValue) {
  return new QLineF(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_value1(QVector< QLine > const * this_ptr, int i, QLine const * defaultValue) {
  return new QLine(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_value1(QVector< QRectF > const * this_ptr, int i, QRectF const * defaultValue) {
  return new QRectF(this_ptr->value(i, *defaultValue));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_push_back(QVector< QPoint > * this_ptr, QPoint const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_push_back(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_push_back(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_push_back(QVector< QRect > * this_ptr, QRect const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_push_back(QVector< double > * this_ptr, double const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_push_back(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_push_back(QVector< quint32 > * this_ptr, quint32 const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_push_back(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_push_back(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_push_back(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_push_back(QVector< QSize > * this_ptr, QSize const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_push_back(QVector< float > * this_ptr, float const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_push_back(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_push_back(QVector< QLineF > * this_ptr, QLineF const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_push_back(QVector< QLine > * this_ptr, QLine const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_push_back(QVector< QRectF > * this_ptr, QRectF const * t) {
  this_ptr->push_back(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_push_front(QVector< QPoint > * this_ptr, QPoint const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_push_front(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_push_front(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_push_front(QVector< QRect > * this_ptr, QRect const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_push_front(QVector< double > * this_ptr, double const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_push_front(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_push_front(QVector< quint32 > * this_ptr, quint32 const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_push_front(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_push_front(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_push_front(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_push_front(QVector< QSize > * this_ptr, QSize const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_push_front(QVector< float > * this_ptr, float const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_push_front(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_push_front(QVector< QLineF > * this_ptr, QLineF const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_push_front(QVector< QLine > * this_ptr, QLine const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_push_front(QVector< QRectF > * this_ptr, QRectF const * t) {
  this_ptr->push_front(*t);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_pop_back(QVector< QPoint > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_pop_back(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_pop_back(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_pop_back(QVector< QRect > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_pop_back(QVector< double > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_pop_back(QVector< QTextLength > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_pop_back(QVector< quint32 > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_pop_back(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_pop_back(QVector< QTextFormat > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_pop_back(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_pop_back(QVector< QSize > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_pop_back(QVector< float > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_pop_back(QVector< GLuint64 > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_pop_back(QVector< QLineF > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_pop_back(QVector< QLine > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_pop_back(QVector< QRectF > * this_ptr) {
  this_ptr->pop_back();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_pop_front(QVector< QPoint > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_pop_front(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_pop_front(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_pop_front(QVector< QRect > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_pop_front(QVector< double > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_pop_front(QVector< QTextLength > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_pop_front(QVector< quint32 > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_pop_front(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_pop_front(QVector< QTextFormat > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_pop_front(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_pop_front(QVector< QSize > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_pop_front(QVector< float > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_pop_front(QVector< GLuint64 > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_pop_front(QVector< QLineF > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_pop_front(QVector< QLine > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_pop_front(QVector< QRectF > * this_ptr) {
  this_ptr->pop_front();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPoint_empty(QVector< QPoint > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_double_QColor_empty(QVector< QPair< double, QColor > > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_empty(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRect_empty(QVector< QRect > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_double_empty(QVector< double > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLength_empty(QVector< QTextLength > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_quint32_empty(QVector< quint32 > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_empty(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QTextFormat_empty(QVector< QTextFormat > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_empty(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QSize_empty(QVector< QSize > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_float_empty(QVector< float > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_GLuint64_empty(QVector< GLuint64 > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLineF_empty(QVector< QLineF > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QLine_empty(QVector< QLine > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QVector_QRectF_empty(QVector< QRectF > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_front(QVector< QPoint > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_front(QVector< QPair< double, QColor > > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_front(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_front(QVector< QRect > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_front(QVector< double > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_front(QVector< QTextLength > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_front(QVector< quint32 > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_front(QVector< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_front(QVector< QTextFormat > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_front(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_front(QVector< QSize > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_front(QVector< float > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_front(QVector< GLuint64 > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_front(QVector< QLineF > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_front(QVector< QLine > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_front(QVector< QRectF > * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_front1(QVector< QPoint > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_front1(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_front1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_front1(QVector< QRect > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_front1(QVector< double > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_front1(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_front1(QVector< quint32 > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_front1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_front1(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_front1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_front1(QVector< QSize > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_front1(QVector< float > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_front1(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_front1(QVector< QLineF > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_front1(QVector< QLine > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_front1(QVector< QRectF > const * this_ptr) {
  return &this_ptr->front();
}


RITUAL_EXPORT QPoint * ctr_qt_gui_ffi_QVector_QPoint_back(QVector< QPoint > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_back(QVector< QPair< double, QColor > > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_back(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QVector_QRect_back(QVector< QRect > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT double * ctr_qt_gui_ffi_QVector_double_back(QVector< double > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLength * ctr_qt_gui_ffi_QVector_QTextLength_back(QVector< QTextLength > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT quint32 * ctr_qt_gui_ffi_QVector_quint32_back(QVector< quint32 > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLayout::FormatRange * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_back(QVector< QTextLayout::FormatRange > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_QVector_QTextFormat_back(QVector< QTextFormat > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_back(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QVector_QSize_back(QVector< QSize > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT float * ctr_qt_gui_ffi_QVector_float_back(QVector< float > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT GLuint64 * ctr_qt_gui_ffi_QVector_GLuint64_back(QVector< GLuint64 > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLineF * ctr_qt_gui_ffi_QVector_QLineF_back(QVector< QLineF > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLine * ctr_qt_gui_ffi_QVector_QLine_back(QVector< QLine > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QVector_QRectF_back(QVector< QRectF > * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPoint const * ctr_qt_gui_ffi_QVector_QPoint_back1(QVector< QPoint > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< double, QColor > const * ctr_qt_gui_ffi_QVector_QPair_double_QColor_back1(QVector< QPair< double, QColor > > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QAbstractTextDocumentLayout::Selection const * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_back1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QRect const * ctr_qt_gui_ffi_QVector_QRect_back1(QVector< QRect > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT double const * ctr_qt_gui_ffi_QVector_double_back1(QVector< double > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLength const * ctr_qt_gui_ffi_QVector_QTextLength_back1(QVector< QTextLength > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT quint32 const * ctr_qt_gui_ffi_QVector_quint32_back1(QVector< quint32 > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextLayout::FormatRange const * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_back1(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QTextFormat const * ctr_qt_gui_ffi_QVector_QTextFormat_back1(QVector< QTextFormat > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_back1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QSize const * ctr_qt_gui_ffi_QVector_QSize_back1(QVector< QSize > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT float const * ctr_qt_gui_ffi_QVector_float_back1(QVector< float > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT GLuint64 const * ctr_qt_gui_ffi_QVector_GLuint64_back1(QVector< GLuint64 > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLineF const * ctr_qt_gui_ffi_QVector_QLineF_back1(QVector< QLineF > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QLine const * ctr_qt_gui_ffi_QVector_QLine_back1(QVector< QLine > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QRectF const * ctr_qt_gui_ffi_QVector_QRectF_back1(QVector< QRectF > const * this_ptr) {
  return &this_ptr->back();
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator__4(QVector< QPoint > * this_ptr, QVector< QPoint > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__4(QVector< QPair< double, QColor > > * this_ptr, QVector< QPair< double, QColor > > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__4(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator__4(QVector< QRect > * this_ptr, QVector< QRect > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator__4(QVector< double > * this_ptr, QVector< double > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator__4(QVector< QTextLength > * this_ptr, QVector< QTextLength > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator__4(QVector< quint32 > * this_ptr, QVector< quint32 > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__4(QVector< QTextLayout::FormatRange > * this_ptr, QVector< QTextLayout::FormatRange > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator__4(QVector< QTextFormat > * this_ptr, QVector< QTextFormat > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__4(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator__4(QVector< QSize > * this_ptr, QVector< QSize > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator__4(QVector< float > * this_ptr, QVector< float > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator__4(QVector< GLuint64 > * this_ptr, QVector< GLuint64 > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator__4(QVector< QLineF > * this_ptr, QVector< QLineF > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator__4(QVector< QLine > * this_ptr, QVector< QLine > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator__4(QVector< QRectF > * this_ptr, QVector< QRectF > const * l) {
  return &this_ptr->operator+=(*l);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator_2(QVector< QPoint > const * this_ptr, QVector< QPoint > const * l) {
  return new QVector< QPoint >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator_2(QVector< QPair< double, QColor > > const * this_ptr, QVector< QPair< double, QColor > > const * l) {
  return new QVector< QPair< double, QColor > >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator_2(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * l) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator_2(QVector< QRect > const * this_ptr, QVector< QRect > const * l) {
  return new QVector< QRect >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator_2(QVector< double > const * this_ptr, QVector< double > const * l) {
  return new QVector< double >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator_2(QVector< QTextLength > const * this_ptr, QVector< QTextLength > const * l) {
  return new QVector< QTextLength >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator_2(QVector< quint32 > const * this_ptr, QVector< quint32 > const * l) {
  return new QVector< quint32 >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator_2(QVector< QTextLayout::FormatRange > const * this_ptr, QVector< QTextLayout::FormatRange > const * l) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator_2(QVector< QTextFormat > const * this_ptr, QVector< QTextFormat > const * l) {
  return new QVector< QTextFormat >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator_2(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * l) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator_2(QVector< QSize > const * this_ptr, QVector< QSize > const * l) {
  return new QVector< QSize >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator_2(QVector< float > const * this_ptr, QVector< float > const * l) {
  return new QVector< float >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator_2(QVector< GLuint64 > const * this_ptr, QVector< GLuint64 > const * l) {
  return new QVector< GLuint64 >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator_2(QVector< QLineF > const * this_ptr, QVector< QLineF > const * l) {
  return new QVector< QLineF >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator_2(QVector< QLine > const * this_ptr, QVector< QLine > const * l) {
  return new QVector< QLine >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator_2(QVector< QRectF > const * this_ptr, QVector< QRectF > const * l) {
  return new QVector< QRectF >(this_ptr->operator+(*l));
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator__5(QVector< QPoint > * this_ptr, QPoint const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__5(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__5(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator__5(QVector< QRect > * this_ptr, QRect const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator__5(QVector< double > * this_ptr, double const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator__5(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator__5(QVector< quint32 > * this_ptr, quint32 const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__5(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator__5(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__5(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator__5(QVector< QSize > * this_ptr, QSize const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator__5(QVector< float > * this_ptr, float const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator__5(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator__5(QVector< QLineF > * this_ptr, QLineF const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator__5(QVector< QLine > * this_ptr, QLine const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator__5(QVector< QRectF > * this_ptr, QRectF const * t) {
  return &this_ptr->operator+=(*t);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator__6(QVector< QPoint > * this_ptr, QPoint const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__6(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__6(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator__6(QVector< QRect > * this_ptr, QRect const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator__6(QVector< double > * this_ptr, double const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator__6(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator__6(QVector< quint32 > * this_ptr, quint32 const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__6(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator__6(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__6(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator__6(QVector< QSize > * this_ptr, QSize const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator__6(QVector< float > * this_ptr, float const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator__6(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator__6(QVector< QLineF > * this_ptr, QLineF const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator__6(QVector< QLine > * this_ptr, QLine const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator__6(QVector< QRectF > * this_ptr, QRectF const * t) {
  return &this_ptr->operator<<(*t);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_operator__7(QVector< QPoint > * this_ptr, QVector< QPoint > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_operator__7(QVector< QPair< double, QColor > > * this_ptr, QVector< QPair< double, QColor > > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_operator__7(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QVector< QAbstractTextDocumentLayout::Selection > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_operator__7(QVector< QRect > * this_ptr, QVector< QRect > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_operator__7(QVector< double > * this_ptr, QVector< double > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_operator__7(QVector< QTextLength > * this_ptr, QVector< QTextLength > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_operator__7(QVector< quint32 > * this_ptr, QVector< quint32 > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_operator__7(QVector< QTextLayout::FormatRange > * this_ptr, QVector< QTextLayout::FormatRange > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_operator__7(QVector< QTextFormat > * this_ptr, QVector< QTextFormat > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator__7(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_operator__7(QVector< QSize > * this_ptr, QVector< QSize > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_operator__7(QVector< float > * this_ptr, QVector< float > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_operator__7(QVector< GLuint64 > * this_ptr, QVector< GLuint64 > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_operator__7(QVector< QLineF > * this_ptr, QVector< QLineF > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_operator__7(QVector< QLine > * this_ptr, QVector< QLine > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_operator__7(QVector< QRectF > * this_ptr, QVector< QRectF > const * l) {
  return &this_ptr->operator<<(*l);
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QVector_double_toList(QVector< double > const * this_ptr) {
  return new QList< double >(this_ptr->toList());
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_toList(QVector< QTextLayout::FormatRange > const * this_ptr) {
  return new QList< QTextLayout::FormatRange >(this_ptr->toList());
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QVector_QSize_toList(QVector< QSize > const * this_ptr) {
  return new QList< QSize >(this_ptr->toList());
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_fromList(QList< double > const * list) {
  return new QVector< double >(QVector< double >::fromList(*list));
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_fromList(QList< QTextLayout::FormatRange > const * list) {
  return new QVector< QTextLayout::FormatRange >(QVector< QTextLayout::FormatRange >::fromList(*list));
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_fromList(QList< QSize > const * list) {
  return new QVector< QSize >(QVector< QSize >::fromList(*list));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash36(QVector< double > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash38(QVector< quint32 > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash41(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash43(QVector< float > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash44(QVector< GLuint64 > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_181(QVector< double > const * lhs, QVector< double > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_183(QVector< quint32 > const * lhs, QVector< quint32 > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_186(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * lhs, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_188(QVector< float > const * lhs, QVector< float > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_189(QVector< GLuint64 > const * lhs, QVector< GLuint64 > const * rhs) {
  return operator<(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_197(QVector< double > const * lhs, QVector< double > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_199(QVector< quint32 > const * lhs, QVector< quint32 > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_202(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * lhs, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_204(QVector< float > const * lhs, QVector< float > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator_205(QVector< GLuint64 > const * lhs, QVector< GLuint64 > const * rhs) {
  return operator>(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__172(QVector< double > const * lhs, QVector< double > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__174(QVector< quint32 > const * lhs, QVector< quint32 > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__177(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * lhs, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__179(QVector< float > const * lhs, QVector< float > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__180(QVector< GLuint64 > const * lhs, QVector< GLuint64 > const * rhs) {
  return operator<=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__188(QVector< double > const * lhs, QVector< double > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__190(QVector< quint32 > const * lhs, QVector< quint32 > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__193(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * lhs, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__195(QVector< float > const * lhs, QVector< float > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__196(QVector< GLuint64 > const * lhs, QVector< GLuint64 > const * rhs) {
  return operator>=(*lhs, *rhs);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__200(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QPaintEngine::PaintEngineFeature >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__201(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QPaintEngine::DirtyFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__202(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTouchDevice::CapabilityFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__203(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTouchEvent::TouchPoint::InfoFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__204(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextOption::Flag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__205(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextFormat::PageBreakFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__206(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QRawFont::LayoutFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__207(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QGlyphRun::GlyphRunFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__208(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextDocument::FindFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__209(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QAccessible::RelationFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__210(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QSurfaceFormat::FormatOption >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__211(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QImageIOPlugin::Capability >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__212(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QImageIOHandler::Transformation >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__213(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLBuffer::RangeAccessFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__214(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLDebugMessage::Source >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__215(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLDebugMessage::Type >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__216(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLDebugMessage::Severity >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__217(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLFunctions::OpenGLFeature >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__218(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLShader::ShaderTypeBit >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__219(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QOpenGLTexture::Feature >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__220(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QPainter::PixmapFragmentHint >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__221(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QPainter::RenderHint >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__222(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextItem::RenderFlag >(e));
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__248(QDataStream * s, QList< QSize > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__249(QDataStream * s, QList< QKeySequence > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__251(QDataStream * s, QList< QPolygonF > * l) {
  return &operator>>(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__252(QDataStream * s, QList< double > * l) {
  return &operator>>(*s, *l);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__254(QDataStream * s, QList< QFontDatabase::WritingSystem > * l) {
  return &operator>>(*s, *l);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__268(QDataStream * s, QList< QSize > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__269(QDataStream * s, QList< QKeySequence > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__270(QDataStream * s, QList< QTouchDevice const * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__271(QDataStream * s, QList< QPolygonF > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__272(QDataStream * s, QList< double > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__274(QDataStream * s, QList< QFontDatabase::WritingSystem > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__277(QDataStream * s, QList< QAccessibleInterface * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__278(QDataStream * s, QList< QWindow * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__279(QDataStream * s, QList< QScreen * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__280(QDataStream * s, QList< QOpenGLContext * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__282(QDataStream * s, QList< QOpenGLShader * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__283(QDataStream * s, QList< QStandardItem * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__285(QDataStream * s, QList< QTextFrame * > const * l) {
  return &operator<<(*s, *l);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__286(QDataStream * s, QVector< QPoint > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__287(QDataStream * s, QVector< QPair< double, QColor > > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__289(QDataStream * s, QVector< QRect > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__290(QDataStream * s, QVector< double > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__291(QDataStream * s, QVector< QTextLength > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__292(QDataStream * s, QVector< quint32 > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__294(QDataStream * s, QVector< QTextFormat > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__296(QDataStream * s, QVector< QSize > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__297(QDataStream * s, QVector< float > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__299(QDataStream * s, QVector< QLineF > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__300(QDataStream * s, QVector< QLine > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__301(QDataStream * s, QVector< QRectF > * v) {
  return &operator>>(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__302(QDataStream * s, QVector< QPoint > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__303(QDataStream * s, QVector< QPair< double, QColor > > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__305(QDataStream * s, QVector< QRect > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__306(QDataStream * s, QVector< double > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__307(QDataStream * s, QVector< QTextLength > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__308(QDataStream * s, QVector< quint32 > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__310(QDataStream * s, QVector< QTextFormat > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__311(QDataStream * s, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__312(QDataStream * s, QVector< QSize > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__313(QDataStream * s, QVector< float > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__315(QDataStream * s, QVector< QLineF > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__316(QDataStream * s, QVector< QLine > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__317(QDataStream * s, QVector< QRectF > const * v) {
  return &operator<<(*s, *v);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__318(QDataStream * s, QSet< QByteArray > * set) {
  return &operator>>(*s, *set);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__319(QDataStream * s, QSet< QByteArray > const * set) {
  return &operator<<(*s, *set);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__320(QDataStream * s, QPair< double, QColor > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__321(QDataStream * s, QPair< int, int > * p) {
  return &operator>>(*s, *p);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__323(QDataStream * s, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * p) {
  return &operator>>(*s, *p);
}


#endif

RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__324(QDataStream * s, QPair< float, float > * p) {
  return &operator>>(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__325(QDataStream * s, QPair< double, QColor > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__326(QDataStream * s, QPair< int, int > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__327(QDataStream * s, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__328(QDataStream * s, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__329(QDataStream * s, QPair< float, float > const * p) {
  return &operator<<(*s, *p);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_QSet() {
  return new QSet< QByteArray >();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_swap(QSet< QByteArray > * this_ptr, QSet< QByteArray > * other) {
  this_ptr->swap(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_operator__(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return this_ptr->operator==(*other);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSet_QByteArray_size(QSet< QByteArray > const * this_ptr) {
  return this_ptr->size();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_isEmpty(QSet< QByteArray > const * this_ptr) {
  return this_ptr->isEmpty();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSet_QByteArray_capacity(QSet< QByteArray > const * this_ptr) {
  return this_ptr->capacity();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_reserve(QSet< QByteArray > * this_ptr, int size) {
  this_ptr->reserve(size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_squeeze(QSet< QByteArray > * this_ptr) {
  this_ptr->squeeze();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_detach(QSet< QByteArray > * this_ptr) {
  this_ptr->detach();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_isDetached(QSet< QByteArray > const * this_ptr) {
  return this_ptr->isDetached();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_setSharable(QSet< QByteArray > * this_ptr, bool sharable) {
  this_ptr->setSharable(sharable);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_clear(QSet< QByteArray > * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_remove(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return this_ptr->remove(*value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_contains(QSet< QByteArray > const * this_ptr, QByteArray const * value) {
  return this_ptr->contains(*value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_contains1(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * set) {
  return this_ptr->contains(*set);
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_iterator() {
  return new QSet< QByteArray >::iterator();
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_iterator1(QSet< QByteArray >::iterator const * o) {
  return new QSet< QByteArray >::iterator(*o);
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator_(QSet< QByteArray >::iterator * this_ptr, QSet< QByteArray >::iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QByteArray const * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator_1(QSet< QByteArray >::iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray const * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__(QSet< QByteArray >::iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__1(QSet< QByteArray >::iterator const * this_ptr, QSet< QByteArray >::iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__3(QSet< QByteArray >::iterator const * this_ptr, QSet< QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__5(QSet< QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__6(QSet< QByteArray >::iterator * this_ptr, int arg1) {
  return new QSet< QByteArray >::iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__7(QSet< QByteArray >::iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__8(QSet< QByteArray >::iterator * this_ptr, int arg1) {
  return new QSet< QByteArray >::iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator_2(QSet< QByteArray >::iterator const * this_ptr, int j) {
  return new QSet< QByteArray >::iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator_3(QSet< QByteArray >::iterator const * this_ptr, int j) {
  return new QSet< QByteArray >::iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__9(QSet< QByteArray >::iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_iterator_operator__10(QSet< QByteArray >::iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_const_iterator() {
  return new QSet< QByteArray >::const_iterator();
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_const_iterator1(QSet< QByteArray >::const_iterator const * o) {
  return new QSet< QByteArray >::const_iterator(*o);
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_const_iterator2(QSet< QByteArray >::iterator const * o) {
  return new QSet< QByteArray >::const_iterator(*o);
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator_(QSet< QByteArray >::const_iterator * this_ptr, QSet< QByteArray >::const_iterator const * o) {
  return &this_ptr->operator=(*o);
}


RITUAL_EXPORT QByteArray const * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator_1(QSet< QByteArray >::const_iterator const * this_ptr) {
  return &this_ptr->operator*();
}


RITUAL_EXPORT QByteArray const * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__(QSet< QByteArray >::const_iterator const * this_ptr) {
  return this_ptr->operator->();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__1(QSet< QByteArray >::const_iterator const * this_ptr, QSet< QByteArray >::const_iterator const * o) {
  return this_ptr->operator==(*o);
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__3(QSet< QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator++();
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__4(QSet< QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QSet< QByteArray >::const_iterator(this_ptr->operator++(arg1));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__5(QSet< QByteArray >::const_iterator * this_ptr) {
  return &this_ptr->operator--();
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__6(QSet< QByteArray >::const_iterator * this_ptr, int arg1) {
  return new QSet< QByteArray >::const_iterator(this_ptr->operator--(arg1));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator_2(QSet< QByteArray >::const_iterator const * this_ptr, int j) {
  return new QSet< QByteArray >::const_iterator(this_ptr->operator+(j));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator_3(QSet< QByteArray >::const_iterator const * this_ptr, int j) {
  return new QSet< QByteArray >::const_iterator(this_ptr->operator-(j));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__7(QSet< QByteArray >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator+=(j);
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_operator__8(QSet< QByteArray >::const_iterator * this_ptr, int j) {
  return &this_ptr->operator-=(j);
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_begin(QSet< QByteArray > * this_ptr) {
  return new QSet< QByteArray >::iterator(this_ptr->begin());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_begin1(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->begin());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_cbegin(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->cbegin());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_constBegin(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->constBegin());
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_end(QSet< QByteArray > * this_ptr) {
  return new QSet< QByteArray >::iterator(this_ptr->end());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_end1(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->end());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_cend(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->cend());
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_constEnd(QSet< QByteArray > const * this_ptr) {
  return new QSet< QByteArray >::const_iterator(this_ptr->constEnd());
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_erase(QSet< QByteArray > * this_ptr, QSet< QByteArray >::iterator const * i) {
  return new QSet< QByteArray >::iterator(this_ptr->erase(*i));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_erase1(QSet< QByteArray > * this_ptr, QSet< QByteArray >::const_iterator const * i) {
  return new QSet< QByteArray >::iterator(this_ptr->erase(*i));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QSet_QByteArray_count(QSet< QByteArray > const * this_ptr) {
  return this_ptr->count();
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_insert(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return new QSet< QByteArray >::iterator(this_ptr->insert(*value));
}


RITUAL_EXPORT QSet< QByteArray >::iterator * ctr_qt_gui_ffi_QSet_QByteArray_find(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return new QSet< QByteArray >::iterator(this_ptr->find(*value));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_find1(QSet< QByteArray > const * this_ptr, QByteArray const * value) {
  return new QSet< QByteArray >::const_iterator(this_ptr->find(*value));
}


RITUAL_EXPORT QSet< QByteArray >::const_iterator * ctr_qt_gui_ffi_QSet_QByteArray_constFind(QSet< QByteArray > const * this_ptr, QByteArray const * value) {
  return new QSet< QByteArray >::const_iterator(this_ptr->constFind(*value));
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_unite(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->unite(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_intersect(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->intersect(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_intersects(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return this_ptr->intersects(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_subtract(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->subtract(*other);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QSet_QByteArray_empty(QSet< QByteArray > const * this_ptr) {
  return this_ptr->empty();
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__2(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return &this_ptr->operator<<(*value);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__3(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->operator|=(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__4(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return &this_ptr->operator|=(*value);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__5(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->operator&=(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__6(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return &this_ptr->operator&=(*value);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__7(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->operator+=(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__8(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return &this_ptr->operator+=(*value);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__9(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->operator-=(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator__10(QSet< QByteArray > * this_ptr, QByteArray const * value) {
  return &this_ptr->operator-=(*value);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator_(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return new QSet< QByteArray >(this_ptr->operator|(*other));
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator_1(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return new QSet< QByteArray >(this_ptr->operator&(*other));
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator_2(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return new QSet< QByteArray >(this_ptr->operator+(*other));
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator_3(QSet< QByteArray > const * this_ptr, QSet< QByteArray > const * other) {
  return new QSet< QByteArray >(this_ptr->operator-(*other));
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_toList(QSet< QByteArray > const * this_ptr) {
  return new QList< QByteArray >(this_ptr->toList());
}


RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_values(QSet< QByteArray > const * this_ptr) {
  return new QList< QByteArray >(this_ptr->values());
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_fromList(QList< QByteArray > const * list) {
  return new QSet< QByteArray >(QSet< QByteArray >::fromList(*list));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash48(QSet< QByteArray > const * key, unsigned int seed) {
  return qHash(*key, seed);
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__331(QDebug const * debug, QList< QTouchEvent::TouchPoint > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__332(QDebug const * debug, QList< QSize > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__333(QDebug const * debug, QList< QKeySequence > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__334(QDebug const * debug, QList< QTouchDevice const * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__335(QDebug const * debug, QList< QPolygonF > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__336(QDebug const * debug, QList< double > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__338(QDebug const * debug, QList< QFontDatabase::WritingSystem > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__341(QDebug const * debug, QList< QAccessibleInterface * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__342(QDebug const * debug, QList< QWindow * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__343(QDebug const * debug, QList< QScreen * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__344(QDebug const * debug, QList< QOpenGLContext * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__345(QDebug const * debug, QList< QOpenGLDebugMessage > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__346(QDebug const * debug, QList< QOpenGLShader * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__347(QDebug const * debug, QList< QStandardItem * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__349(QDebug const * debug, QList< QTextFrame * > const * list) {
  return new QDebug(operator<<(*debug, *list));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__350(QDebug const * debug, QVector< QPoint > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__351(QDebug const * debug, QVector< QPair< double, QColor > > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__353(QDebug const * debug, QVector< QRect > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__354(QDebug const * debug, QVector< double > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__355(QDebug const * debug, QVector< QTextLength > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__356(QDebug const * debug, QVector< quint32 > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__358(QDebug const * debug, QVector< QTextFormat > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__359(QDebug const * debug, QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__360(QDebug const * debug, QVector< QSize > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__361(QDebug const * debug, QVector< float > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__362(QDebug const * debug, QVector< GLuint64 > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__363(QDebug const * debug, QVector< QLineF > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__364(QDebug const * debug, QVector< QLine > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__365(QDebug const * debug, QVector< QRectF > const * vec) {
  return new QDebug(operator<<(*debug, *vec));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__366(QDebug const * debug, QPair< double, QColor > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__367(QDebug const * debug, QPair< int, int > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__368(QDebug const * debug, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__369(QDebug const * debug, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__370(QDebug const * debug, QPair< float, float > const * pair) {
  return new QDebug(operator<<(*debug, *pair));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__371(QDebug const * debug, QSet< QByteArray > const * set) {
  return new QDebug(operator<<(*debug, *set));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__372(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QPaintEngine::PaintEngineFeature >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__373(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QPaintEngine::DirtyFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__374(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTouchDevice::CapabilityFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__375(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTouchEvent::TouchPoint::InfoFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__376(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextOption::Flag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__377(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextFormat::PageBreakFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__378(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QRawFont::LayoutFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__379(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QGlyphRun::GlyphRunFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__380(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextDocument::FindFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__381(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QAccessible::RelationFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__382(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QSurfaceFormat::FormatOption >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__383(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QImageIOPlugin::Capability >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__384(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QImageIOHandler::Transformation >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__385(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLBuffer::RangeAccessFlag >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__386(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLDebugMessage::Source >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__387(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLDebugMessage::Type >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__388(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLDebugMessage::Severity >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__389(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLFunctions::OpenGLFeature >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__390(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLShader::ShaderTypeBit >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__391(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QOpenGLTexture::Feature >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__392(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QPainter::PixmapFragmentHint >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__393(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QPainter::RenderHint >(flags)));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__394(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextItem::RenderFlag >(flags)));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_double_QColor_dQPair(QPair< double, QColor > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_int_int_dQPair(QPair< int, int > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_dQPair(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_dQPair(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPair_float_float_dQPair(QPair< float, float > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QPair_double_QColor_QPair2(QPair< double, QColor > const * other) {
  return new QPair< double, QColor >(*other);
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QPair_int_int_QPair2(QPair< int, int > const * other) {
  return new QPair< int, int >(*other);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_QPair2(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * other) {
  return new QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > >(*other);
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_QPair2(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * other) {
  return new QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter >(*other);
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_QPair_float_float_QPair2(QPair< float, float > const * other) {
  return new QPair< float, float >(*other);
}


RITUAL_EXPORT QPair< double, QColor > * ctr_qt_gui_ffi_QPair_double_QColor_operator_(QPair< double, QColor > * this_ptr, QPair< double, QColor > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< int, int > * ctr_qt_gui_ffi_QPair_int_int_operator_(QPair< int, int > * this_ptr, QPair< int, int > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * ctr_qt_gui_ffi_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_operator_(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * ctr_qt_gui_ffi_QPair_QOpenGLTexture_Filter_QOpenGLTexture_Filter_operator_(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > * this_ptr, QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QPair< float, float > * ctr_qt_gui_ffi_QPair_float_float_operator_(QPair< float, float > * this_ptr, QPair< float, float > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_diterator(QList< QInputMethodEvent::Attribute >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_diterator(QList< QTouchEvent::TouchPoint >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_iterator_diterator(QList< QSize >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_iterator_diterator(QList< QKeySequence >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_diterator(QList< QTouchDevice const * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_iterator_diterator(QList< QPolygonF >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_iterator_diterator(QList< double >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_diterator(QList< QTextOption::Tab >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_diterator(QList< QFontDatabase::WritingSystem >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_diterator(QList< QTextLayout::FormatRange >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_iterator_diterator(QList< QGlyphRun >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_diterator(QList< QAccessibleInterface * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_diterator(QList< QWindow * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_diterator(QList< QScreen * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_diterator(QList< QOpenGLContext * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_diterator(QList< QOpenGLDebugMessage >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_diterator(QList< QOpenGLShader * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_diterator(QList< QStandardItem * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_iterator_diterator(QList< QTextBlock >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_diterator(QList< QTextFrame * >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_iterator_operator_8(QList< QInputMethodEvent::Attribute >::iterator * this_ptr, QList< QInputMethodEvent::Attribute >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_iterator_operator_8(QList< QTouchEvent::TouchPoint >::iterator * this_ptr, QList< QTouchEvent::TouchPoint >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSize >::iterator * ctr_qt_gui_ffi_QList_QSize_iterator_operator_8(QList< QSize >::iterator * this_ptr, QList< QSize >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QKeySequence >::iterator * ctr_qt_gui_ffi_QList_QKeySequence_iterator_operator_8(QList< QKeySequence >::iterator * this_ptr, QList< QKeySequence >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchDevice const * >::iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_iterator_operator_8(QList< QTouchDevice const * >::iterator * this_ptr, QList< QTouchDevice const * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPolygonF >::iterator * ctr_qt_gui_ffi_QList_QPolygonF_iterator_operator_8(QList< QPolygonF >::iterator * this_ptr, QList< QPolygonF >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< double >::iterator * ctr_qt_gui_ffi_QList_double_iterator_operator_8(QList< double >::iterator * this_ptr, QList< double >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextOption::Tab >::iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_iterator_operator_8(QList< QTextOption::Tab >::iterator * this_ptr, QList< QTextOption::Tab >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_iterator_operator_8(QList< QFontDatabase::WritingSystem >::iterator * this_ptr, QList< QFontDatabase::WritingSystem >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_iterator_operator_8(QList< QTextLayout::FormatRange >::iterator * this_ptr, QList< QTextLayout::FormatRange >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QGlyphRun >::iterator * ctr_qt_gui_ffi_QList_QGlyphRun_iterator_operator_8(QList< QGlyphRun >::iterator * this_ptr, QList< QGlyphRun >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_iterator_operator_8(QList< QAccessibleInterface * >::iterator * this_ptr, QList< QAccessibleInterface * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QWindow * >::iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_iterator_operator_8(QList< QWindow * >::iterator * this_ptr, QList< QWindow * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QScreen * >::iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_iterator_operator_8(QList< QScreen * >::iterator * this_ptr, QList< QScreen * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLContext * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_iterator_operator_8(QList< QOpenGLContext * >::iterator * this_ptr, QList< QOpenGLContext * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_iterator_operator_8(QList< QOpenGLDebugMessage >::iterator * this_ptr, QList< QOpenGLDebugMessage >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLShader * >::iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_iterator_operator_8(QList< QOpenGLShader * >::iterator * this_ptr, QList< QOpenGLShader * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStandardItem * >::iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_iterator_operator_8(QList< QStandardItem * >::iterator * this_ptr, QList< QStandardItem * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextBlock >::iterator * ctr_qt_gui_ffi_QList_QTextBlock_iterator_operator_8(QList< QTextBlock >::iterator * this_ptr, QList< QTextBlock >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextFrame * >::iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_iterator_operator_8(QList< QTextFrame * >::iterator * this_ptr, QList< QTextFrame * >::iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_dconst_iterator(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_dconst_iterator(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_const_iterator_dconst_iterator(QList< QSize >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_dconst_iterator(QList< QKeySequence >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_dconst_iterator(QList< QTouchDevice const * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_dconst_iterator(QList< QPolygonF >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_const_iterator_dconst_iterator(QList< double >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_dconst_iterator(QList< QTextOption::Tab >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_dconst_iterator(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_dconst_iterator(QList< QTextLayout::FormatRange >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_dconst_iterator(QList< QGlyphRun >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_dconst_iterator(QList< QAccessibleInterface * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_dconst_iterator(QList< QWindow * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_dconst_iterator(QList< QScreen * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_dconst_iterator(QList< QOpenGLContext * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_dconst_iterator(QList< QOpenGLDebugMessage >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_dconst_iterator(QList< QOpenGLShader * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_dconst_iterator(QList< QStandardItem * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_dconst_iterator(QList< QTextBlock >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_dconst_iterator(QList< QTextFrame * >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::const_iterator * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_const_iterator_operator_6(QList< QInputMethodEvent::Attribute >::const_iterator * this_ptr, QList< QInputMethodEvent::Attribute >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::const_iterator * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_const_iterator_operator_6(QList< QTouchEvent::TouchPoint >::const_iterator * this_ptr, QList< QTouchEvent::TouchPoint >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSize >::const_iterator * ctr_qt_gui_ffi_QList_QSize_const_iterator_operator_6(QList< QSize >::const_iterator * this_ptr, QList< QSize >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QKeySequence >::const_iterator * ctr_qt_gui_ffi_QList_QKeySequence_const_iterator_operator_6(QList< QKeySequence >::const_iterator * this_ptr, QList< QKeySequence >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchDevice const * >::const_iterator * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_const_iterator_operator_6(QList< QTouchDevice const * >::const_iterator * this_ptr, QList< QTouchDevice const * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPolygonF >::const_iterator * ctr_qt_gui_ffi_QList_QPolygonF_const_iterator_operator_6(QList< QPolygonF >::const_iterator * this_ptr, QList< QPolygonF >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< double >::const_iterator * ctr_qt_gui_ffi_QList_double_const_iterator_operator_6(QList< double >::const_iterator * this_ptr, QList< double >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextOption::Tab >::const_iterator * ctr_qt_gui_ffi_QList_QTextOption_Tab_const_iterator_operator_6(QList< QTextOption::Tab >::const_iterator * this_ptr, QList< QTextOption::Tab >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::const_iterator * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_const_iterator_operator_6(QList< QFontDatabase::WritingSystem >::const_iterator * this_ptr, QList< QFontDatabase::WritingSystem >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::const_iterator * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_const_iterator_operator_6(QList< QTextLayout::FormatRange >::const_iterator * this_ptr, QList< QTextLayout::FormatRange >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QGlyphRun >::const_iterator * ctr_qt_gui_ffi_QList_QGlyphRun_const_iterator_operator_6(QList< QGlyphRun >::const_iterator * this_ptr, QList< QGlyphRun >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::const_iterator * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_const_iterator_operator_6(QList< QAccessibleInterface * >::const_iterator * this_ptr, QList< QAccessibleInterface * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QWindow * >::const_iterator * ctr_qt_gui_ffi_QList_QWindow_ptr_const_iterator_operator_6(QList< QWindow * >::const_iterator * this_ptr, QList< QWindow * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QScreen * >::const_iterator * ctr_qt_gui_ffi_QList_QScreen_ptr_const_iterator_operator_6(QList< QScreen * >::const_iterator * this_ptr, QList< QScreen * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLContext * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_const_iterator_operator_6(QList< QOpenGLContext * >::const_iterator * this_ptr, QList< QOpenGLContext * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_const_iterator_operator_6(QList< QOpenGLDebugMessage >::const_iterator * this_ptr, QList< QOpenGLDebugMessage >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLShader * >::const_iterator * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_const_iterator_operator_6(QList< QOpenGLShader * >::const_iterator * this_ptr, QList< QOpenGLShader * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStandardItem * >::const_iterator * ctr_qt_gui_ffi_QList_QStandardItem_ptr_const_iterator_operator_6(QList< QStandardItem * >::const_iterator * this_ptr, QList< QStandardItem * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextBlock >::const_iterator * ctr_qt_gui_ffi_QList_QTextBlock_const_iterator_operator_6(QList< QTextBlock >::const_iterator * this_ptr, QList< QTextBlock >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextFrame * >::const_iterator * ctr_qt_gui_ffi_QList_QTextFrame_ptr_const_iterator_operator_6(QList< QTextFrame * >::const_iterator * this_ptr, QList< QTextFrame * >::const_iterator const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_dQSet(QSet< QByteArray > * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_QSet1(QSet< QByteArray > const * other) {
  return new QSet< QByteArray >(*other);
}


RITUAL_EXPORT QSet< QByteArray > * ctr_qt_gui_ffi_QSet_QByteArray_operator_4(QSet< QByteArray > * this_ptr, QSet< QByteArray > const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_iterator_diterator(QSet< QByteArray >::iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSet_QByteArray_const_iterator_dconst_iterator(QSet< QByteArray >::const_iterator * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash50(QPair< int, int > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash51(QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash52(QPair< QOpenGLTexture::Filter, QOpenGLTexture::Filter > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash53(QPair< float, float > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_indexOf1(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_indexOf1(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_indexOf1(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_indexOf1(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_indexOf1(QList< double > const * this_ptr, double const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_indexOf1(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_indexOf1(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_indexOf1(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_indexOf1(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_indexOf1(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_indexOf1(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_indexOf1(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_indexOf1(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_indexOf1(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_indexOf1(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_indexOf1(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_indexOf1(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_indexOf1(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QSize_lastIndexOf1(QList< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QKeySequence_lastIndexOf1(QList< QKeySequence > const * this_ptr, QKeySequence const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_lastIndexOf1(QList< QTouchDevice const * > const * this_ptr, QTouchDevice const * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QPolygonF_lastIndexOf1(QList< QPolygonF > const * this_ptr, QPolygonF const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_double_lastIndexOf1(QList< double > const * this_ptr, double const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextOption_Tab_lastIndexOf1(QList< QTextOption::Tab > const * this_ptr, QTextOption::Tab const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_lastIndexOf1(QList< QFontDatabase::WritingSystem > const * this_ptr, QFontDatabase::WritingSystem const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_lastIndexOf1(QList< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QGlyphRun_lastIndexOf1(QList< QGlyphRun > const * this_ptr, QGlyphRun const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_lastIndexOf1(QList< QAccessibleInterface * > const * this_ptr, QAccessibleInterface * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QWindow_ptr_lastIndexOf1(QList< QWindow * > const * this_ptr, QWindow * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QScreen_ptr_lastIndexOf1(QList< QScreen * > const * this_ptr, QScreen * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_lastIndexOf1(QList< QOpenGLContext * > const * this_ptr, QOpenGLContext * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_lastIndexOf1(QList< QOpenGLDebugMessage > const * this_ptr, QOpenGLDebugMessage const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_lastIndexOf1(QList< QOpenGLShader * > const * this_ptr, QOpenGLShader * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QStandardItem_ptr_lastIndexOf1(QList< QStandardItem * > const * this_ptr, QStandardItem * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextBlock_lastIndexOf1(QList< QTextBlock > const * this_ptr, QTextBlock const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QList_QTextFrame_ptr_lastIndexOf1(QList< QTextFrame * > const * this_ptr, QTextFrame * const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute > * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_mid1(QList< QInputMethodEvent::Attribute > const * this_ptr, int pos) {
  return new QList< QInputMethodEvent::Attribute >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint > * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_mid1(QList< QTouchEvent::TouchPoint > const * this_ptr, int pos) {
  return new QList< QTouchEvent::TouchPoint >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QList_QSize_mid1(QList< QSize > const * this_ptr, int pos) {
  return new QList< QSize >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QList_QKeySequence_mid1(QList< QKeySequence > const * this_ptr, int pos) {
  return new QList< QKeySequence >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTouchDevice const * > * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_mid1(QList< QTouchDevice const * > const * this_ptr, int pos) {
  return new QList< QTouchDevice const * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QList_QPolygonF_mid1(QList< QPolygonF > const * this_ptr, int pos) {
  return new QList< QPolygonF >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< double > * ctr_qt_gui_ffi_QList_double_mid1(QList< double > const * this_ptr, int pos) {
  return new QList< double >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTextOption::Tab > * ctr_qt_gui_ffi_QList_QTextOption_Tab_mid1(QList< QTextOption::Tab > const * this_ptr, int pos) {
  return new QList< QTextOption::Tab >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem > * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_mid1(QList< QFontDatabase::WritingSystem > const * this_ptr, int pos) {
  return new QList< QFontDatabase::WritingSystem >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_mid1(QList< QTextLayout::FormatRange > const * this_ptr, int pos) {
  return new QList< QTextLayout::FormatRange >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QList_QGlyphRun_mid1(QList< QGlyphRun > const * this_ptr, int pos) {
  return new QList< QGlyphRun >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QAccessibleInterface * > * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_mid1(QList< QAccessibleInterface * > const * this_ptr, int pos) {
  return new QList< QAccessibleInterface * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QWindow * > * ctr_qt_gui_ffi_QList_QWindow_ptr_mid1(QList< QWindow * > const * this_ptr, int pos) {
  return new QList< QWindow * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QScreen * > * ctr_qt_gui_ffi_QList_QScreen_ptr_mid1(QList< QScreen * > const * this_ptr, int pos) {
  return new QList< QScreen * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QOpenGLContext * > * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_mid1(QList< QOpenGLContext * > const * this_ptr, int pos) {
  return new QList< QOpenGLContext * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QOpenGLDebugMessage > * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_mid1(QList< QOpenGLDebugMessage > const * this_ptr, int pos) {
  return new QList< QOpenGLDebugMessage >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QOpenGLShader * > * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_mid1(QList< QOpenGLShader * > const * this_ptr, int pos) {
  return new QList< QOpenGLShader * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QList_QStandardItem_ptr_mid1(QList< QStandardItem * > const * this_ptr, int pos) {
  return new QList< QStandardItem * >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTextBlock > * ctr_qt_gui_ffi_QList_QTextBlock_mid1(QList< QTextBlock > const * this_ptr, int pos) {
  return new QList< QTextBlock >(this_ptr->mid(pos));
}


RITUAL_EXPORT QList< QTextFrame * > * ctr_qt_gui_ffi_QList_QTextFrame_ptr_mid1(QList< QTextFrame * > const * this_ptr, int pos) {
  return new QList< QTextFrame * >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash57(QList< QKeySequence > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash58(QList< QTouchDevice const * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash60(QList< double > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash62(QList< QFontDatabase::WritingSystem > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash65(QList< QAccessibleInterface * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash66(QList< QWindow * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash67(QList< QScreen * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash68(QList< QOpenGLContext * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash70(QList< QOpenGLShader * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash71(QList< QStandardItem * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash73(QList< QTextFrame * > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_fill1(QVector< QPoint > * this_ptr, QPoint const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_fill1(QVector< QPair< double, QColor > > * this_ptr, QPair< double, QColor > const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_fill1(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, QAbstractTextDocumentLayout::Selection const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_fill1(QVector< QRect > * this_ptr, QRect const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_fill1(QVector< double > * this_ptr, double const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_fill1(QVector< QTextLength > * this_ptr, QTextLength const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_fill1(QVector< quint32 > * this_ptr, quint32 const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_fill1(QVector< QTextLayout::FormatRange > * this_ptr, QTextLayout::FormatRange const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_fill1(QVector< QTextFormat > * this_ptr, QTextFormat const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_fill1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_fill1(QVector< QSize > * this_ptr, QSize const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_fill1(QVector< float > * this_ptr, float const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_fill1(QVector< GLuint64 > * this_ptr, GLuint64 const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_fill1(QVector< QLineF > * this_ptr, QLineF const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_fill1(QVector< QLine > * this_ptr, QLine const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_fill1(QVector< QRectF > * this_ptr, QRectF const * t) {
  return &this_ptr->fill(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_indexOf1(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_indexOf1(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_indexOf1(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_indexOf1(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_indexOf1(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_indexOf1(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_indexOf1(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_indexOf1(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_indexOf1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_indexOf1(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_indexOf1(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_indexOf1(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_indexOf1(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_indexOf1(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_indexOf1(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->indexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPoint_lastIndexOf1(QVector< QPoint > const * this_ptr, QPoint const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_double_QColor_lastIndexOf1(QVector< QPair< double, QColor > > const * this_ptr, QPair< double, QColor > const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRect_lastIndexOf1(QVector< QRect > const * this_ptr, QRect const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_double_lastIndexOf1(QVector< double > const * this_ptr, double const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLength_lastIndexOf1(QVector< QTextLength > const * this_ptr, QTextLength const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_quint32_lastIndexOf1(QVector< quint32 > const * this_ptr, quint32 const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_lastIndexOf1(QVector< QTextLayout::FormatRange > const * this_ptr, QTextLayout::FormatRange const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QTextFormat_lastIndexOf1(QVector< QTextFormat > const * this_ptr, QTextFormat const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_lastIndexOf1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QSize_lastIndexOf1(QVector< QSize > const * this_ptr, QSize const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_float_lastIndexOf1(QVector< float > const * this_ptr, float const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_GLuint64_lastIndexOf1(QVector< GLuint64 > const * this_ptr, GLuint64 const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLineF_lastIndexOf1(QVector< QLineF > const * this_ptr, QLineF const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QLine_lastIndexOf1(QVector< QLine > const * this_ptr, QLine const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QVector_QRectF_lastIndexOf1(QVector< QRectF > const * this_ptr, QRectF const * t) {
  return this_ptr->lastIndexOf(*t);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_QVector_QPoint_mid1(QVector< QPoint > const * this_ptr, int pos) {
  return new QVector< QPoint >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QPair< double, QColor > > * ctr_qt_gui_ffi_QVector_QPair_double_QColor_mid1(QVector< QPair< double, QColor > > const * this_ptr, int pos) {
  return new QVector< QPair< double, QColor > >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QAbstractTextDocumentLayout::Selection > * ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_mid1(QVector< QAbstractTextDocumentLayout::Selection > const * this_ptr, int pos) {
  return new QVector< QAbstractTextDocumentLayout::Selection >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QRect > * ctr_qt_gui_ffi_QVector_QRect_mid1(QVector< QRect > const * this_ptr, int pos) {
  return new QVector< QRect >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< double > * ctr_qt_gui_ffi_QVector_double_mid1(QVector< double > const * this_ptr, int pos) {
  return new QVector< double >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QTextLength > * ctr_qt_gui_ffi_QVector_QTextLength_mid1(QVector< QTextLength > const * this_ptr, int pos) {
  return new QVector< QTextLength >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< quint32 > * ctr_qt_gui_ffi_QVector_quint32_mid1(QVector< quint32 > const * this_ptr, int pos) {
  return new QVector< quint32 >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QTextLayout::FormatRange > * ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_mid1(QVector< QTextLayout::FormatRange > const * this_ptr, int pos) {
  return new QVector< QTextLayout::FormatRange >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QTextFormat > * ctr_qt_gui_ffi_QVector_QTextFormat_mid1(QVector< QTextFormat > const * this_ptr, int pos) {
  return new QVector< QTextFormat >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_mid1(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * this_ptr, int pos) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QSize > * ctr_qt_gui_ffi_QVector_QSize_mid1(QVector< QSize > const * this_ptr, int pos) {
  return new QVector< QSize >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< float > * ctr_qt_gui_ffi_QVector_float_mid1(QVector< float > const * this_ptr, int pos) {
  return new QVector< float >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< GLuint64 > * ctr_qt_gui_ffi_QVector_GLuint64_mid1(QVector< GLuint64 > const * this_ptr, int pos) {
  return new QVector< GLuint64 >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QLineF > * ctr_qt_gui_ffi_QVector_QLineF_mid1(QVector< QLineF > const * this_ptr, int pos) {
  return new QVector< QLineF >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QLine > * ctr_qt_gui_ffi_QVector_QLine_mid1(QVector< QLine > const * this_ptr, int pos) {
  return new QVector< QLine >(this_ptr->mid(pos));
}


RITUAL_EXPORT QVector< QRectF > * ctr_qt_gui_ffi_QVector_QRectF_mid1(QVector< QRectF > const * this_ptr, int pos) {
  return new QVector< QRectF >(this_ptr->mid(pos));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash78(QVector< double > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash80(QVector< quint32 > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash83(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash85(QVector< float > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash86(QVector< GLuint64 > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash90(QSet< QByteArray > const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor11(int r, int g, int b) {
  return new QColor(r, g, b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getRgb1(QColor const * this_ptr, int * r, int * g, int * b) {
  this_ptr->getRgb(r, g, b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgb2(QColor * this_ptr, int r, int g, int b) {
  this_ptr->setRgb(r, g, b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getRgbF1(QColor const * this_ptr, double * r, double * g, double * b) {
  this_ptr->getRgbF(r, g, b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setRgbF1(QColor * this_ptr, double r, double g, double b) {
  this_ptr->setRgbF(r, g, b);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsv1(QColor const * this_ptr, int * h, int * s, int * v) {
  this_ptr->getHsv(h, s, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsv1(QColor * this_ptr, int h, int s, int v) {
  this_ptr->setHsv(h, s, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsvF1(QColor const * this_ptr, double * h, double * s, double * v) {
  this_ptr->getHsvF(h, s, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsvF1(QColor * this_ptr, double h, double s, double v) {
  this_ptr->setHsvF(h, s, v);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmyk1(QColor * this_ptr, int * c, int * m, int * y, int * k) {
  this_ptr->getCmyk(c, m, y, k);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setCmyk1(QColor * this_ptr, int c, int m, int y, int k) {
  this_ptr->setCmyk(c, m, y, k);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmykF1(QColor * this_ptr, double * c, double * m, double * y, double * k) {
  this_ptr->getCmykF(c, m, y, k);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setCmykF1(QColor * this_ptr, double c, double m, double y, double k) {
  this_ptr->setCmykF(c, m, y, k);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHsl1(QColor const * this_ptr, int * h, int * s, int * l) {
  this_ptr->getHsl(h, s, l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHsl1(QColor * this_ptr, int h, int s, int l) {
  this_ptr->setHsl(h, s, l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getHslF1(QColor const * this_ptr, double * h, double * s, double * l) {
  this_ptr->getHslF(h, s, l);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setHslF1(QColor * this_ptr, double h, double s, double l) {
  this_ptr->setHslF(h, s, l);
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgb2(int r, int g, int b) {
  return new QColor(QColor::fromRgb(r, g, b));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgbF1(double r, double g, double b) {
  return new QColor(QColor::fromRgbF(r, g, b));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromRgba642(unsigned short r, unsigned short g, unsigned short b) {
  return new QColor(QColor::fromRgba64(r, g, b));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsv1(int h, int s, int v) {
  return new QColor(QColor::fromHsv(h, s, v));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsvF1(double h, double s, double v) {
  return new QColor(QColor::fromHsvF(h, s, v));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromCmyk1(int c, int m, int y, int k) {
  return new QColor(QColor::fromCmyk(c, m, y, k));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromCmykF1(double c, double m, double y, double k) {
  return new QColor(QColor::fromCmykF(c, m, y, k));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHsl1(int h, int s, int l) {
  return new QColor(QColor::fromHsl(h, s, l));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_fromHslF1(double h, double s, double l) {
  return new QColor(QColor::fromHslF(h, s, l));
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_light1(QColor const * this_ptr) {
  return new QColor(this_ptr->light());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_lighter1(QColor const * this_ptr) {
  return new QColor(this_ptr->lighter());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_dark1(QColor const * this_ptr) {
  return new QColor(this_ptr->dark());
}


RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_darker1(QColor const * this_ptr) {
  return new QColor(this_ptr->darker());
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion7(int x, int y, int w, int h) {
  return new QRegion(x, y, w, h);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion8(QRect const * r) {
  return new QRegion(*r);
}


RITUAL_EXPORT QRegion * ctr_qt_gui_ffi_QRegion_QRegion9(QPolygon const * pa) {
  return new QRegion(*pa);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash91(QKeySequence const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence5(QString const * key) {
  return new QKeySequence(*key);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence6(int k1, int k2, int k3) {
  return new QKeySequence(k1, k2, k3);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence7(int k1, int k2) {
  return new QKeySequence(k1, k2);
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_QKeySequence8(int k1) {
  return new QKeySequence(k1);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QKeySequence_toString1(QKeySequence const * this_ptr) {
  return new QString(this_ptr->toString());
}


RITUAL_EXPORT QKeySequence * ctr_qt_gui_ffi_QKeySequence_fromString1(QString const * str) {
  return new QKeySequence(QKeySequence::fromString(*str));
}


RITUAL_EXPORT QList< QKeySequence > * ctr_qt_gui_ffi_QKeySequence_listFromString1(QString const * str) {
  return new QList< QKeySequence >(QKeySequence::listFromString(*str));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QKeySequence_listToString1(QList< QKeySequence > const * list) {
  return new QString(QKeySequence::listToString(*list));
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_QInputEvent_QInputEvent3(QEvent::Type type) {
  return new QInputEvent(type);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_QHoverEvent_QHoverEvent3(QEvent::Type type, QPointF const * pos, QPointF const * oldPos) {
  return new QHoverEvent(type, *pos, *oldPos);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent8(QPointF const * pos, int delta, int buttons, int modifiers) {
  return new QWheelEvent(*pos, delta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent9(QPointF const * pos, QPointF const * globalPos, int delta, int buttons, int modifiers) {
  return new QWheelEvent(*pos, *globalPos, delta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent4(QEvent::Type type, int key, int modifiers, QString const * text, bool autorep) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), *text, autorep);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent5(QEvent::Type type, int key, int modifiers, QString const * text) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), *text);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent6(QEvent::Type type, int key, int modifiers) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent7(QEvent::Type type, int key, int modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, QString const * text, bool autorep) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), nativeScanCode, nativeVirtualKey, nativeModifiers, *text, autorep);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent8(QEvent::Type type, int key, int modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, QString const * text) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), nativeScanCode, nativeVirtualKey, nativeModifiers, *text);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_QKeyEvent_QKeyEvent9(QEvent::Type type, int key, int modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers) {
  return new QKeyEvent(type, key, QFlags< Qt::KeyboardModifier >(modifiers), nativeScanCode, nativeVirtualKey, nativeModifiers);
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_QFocusEvent_QFocusEvent3(QEvent::Type type) {
  return new QFocusEvent(type);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodEvent_setCommitString1(QInputMethodEvent * this_ptr, QString const * commitString, int replaceFrom) {
  this_ptr->setCommitString(*commitString, replaceFrom);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QInputMethodEvent_setCommitString2(QInputMethodEvent * this_ptr, QString const * commitString) {
  this_ptr->setCommitString(*commitString);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_QDropEvent_QDropEvent3(QPointF const * pos, int actions, QMimeData const * data, int buttons, int modifiers) {
  return new QDropEvent(*pos, QFlags< Qt::DropAction >(actions), data, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_QDragMoveEvent_QDragMoveEvent3(QPoint const * pos, int actions, QMimeData const * data, int buttons, int modifiers) {
  return new QDragMoveEvent(*pos, QFlags< Qt::DropAction >(actions), data, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_QShortcutEvent_QShortcutEvent3(QKeySequence const * key, int id) {
  return new QShortcutEvent(*key, id);
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_QWindowStateChangeEvent_QWindowStateChangeEvent3(int aOldState) {
  return new QWindowStateChangeEvent(QFlags< Qt::WindowState >(aOldState));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash92(QPointingDeviceUniqueId const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent3(QEvent::Type eventType, QTouchDevice * device, int modifiers, int touchPointStates) {
  return new QTouchEvent(eventType, device, QFlags< Qt::KeyboardModifier >(modifiers), QFlags< Qt::TouchPointState >(touchPointStates));
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent4(QEvent::Type eventType, QTouchDevice * device, int modifiers) {
  return new QTouchEvent(eventType, device, QFlags< Qt::KeyboardModifier >(modifiers));
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent5(QEvent::Type eventType, QTouchDevice * device) {
  return new QTouchEvent(eventType, device);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_QTouchEvent_QTouchEvent6(QEvent::Type eventType) {
  return new QTouchEvent(eventType);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont4(QString const * family, int pointSize, int weight) {
  return new QFont(*family, pointSize, weight);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont5(QString const * family, int pointSize) {
  return new QFont(*family, pointSize);
}


RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont6(QString const * family) {
  return new QFont(*family);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setStyleHint1(QFont * this_ptr, QFont::StyleHint arg1) {
  this_ptr->setStyleHint(arg1);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash93(QFont const * font) {
  return qHash(*font);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_QPolygon_QPolygon8(QRect const * r) {
  return new QPolygon(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPolygon_putPoints3(QPolygon * this_ptr, int index, int nPoints, QPolygon const * from) {
  this_ptr->putPoints(index, nPoints, *from);
}


RITUAL_EXPORT QMatrix * ctr_qt_gui_ffi_QMatrix_inverted1(QMatrix const * this_ptr) {
  return new QMatrix(this_ptr->inverted());
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash94(QMatrix const * key) {
  return qHash(*key);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundedRect2(QPainterPath * this_ptr, QRectF const * rect, double xRadius, double yRadius) {
  this_ptr->addRoundedRect(*rect, xRadius, yRadius);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_addRoundedRect3(QPainterPath * this_ptr, double x, double y, double w, double h, double xRadius, double yRadius) {
  this_ptr->addRoundedRect(x, y, w, h, xRadius, yRadius);
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toSubpathPolygons2(QPainterPath const * this_ptr) {
  return new QList< QPolygonF >(this_ptr->toSubpathPolygons());
}


RITUAL_EXPORT QList< QPolygonF > * ctr_qt_gui_ffi_QPainterPath_toFillPolygons2(QPainterPath const * this_ptr) {
  return new QList< QPolygonF >(this_ptr->toFillPolygons());
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_QPainterPath_toFillPolygon2(QPainterPath const * this_ptr) {
  return new QPolygonF(this_ptr->toFillPolygon());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_QTransform7(double h11, double h12, double h13, double h21, double h22, double h23, double h31, double h32) {
  return new QTransform(h11, h12, h13, h21, h22, h23, h31, h32);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_inverted1(QTransform const * this_ptr) {
  return new QTransform(this_ptr->inverted());
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_rotate1(QTransform * this_ptr, double a) {
  return &this_ptr->rotate(a);
}


RITUAL_EXPORT QTransform * ctr_qt_gui_ffi_QTransform_rotateRadians1(QTransform * this_ptr, double a) {
  return &this_ptr->rotateRadians(a);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash95(QTransform const * key) {
  return qHash(*key);
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_QPixelFormat3(QPixelFormat::ColorModel colorModel, unsigned char firstSize, unsigned char secondSize, unsigned char thirdSize, unsigned char fourthSize, unsigned char fifthSize, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation, QPixelFormat::ByteOrder byteOrder) {
  return new QPixelFormat(colorModel, firstSize, secondSize, thirdSize, fourthSize, fifthSize, alphaSize, alphaUsage, alphaPosition, premultiplied, typeInterpretation, byteOrder);
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_QPixelFormat_QPixelFormat4(QPixelFormat::ColorModel colorModel, unsigned char firstSize, unsigned char secondSize, unsigned char thirdSize, unsigned char fourthSize, unsigned char fifthSize, unsigned char alphaSize, QPixelFormat::AlphaUsage alphaUsage, QPixelFormat::AlphaPosition alphaPosition, QPixelFormat::AlphaPremultiplied premultiplied, QPixelFormat::TypeInterpretation typeInterpretation) {
  return new QPixelFormat(colorModel, firstSize, secondSize, thirdSize, fourthSize, fifthSize, alphaSize, alphaUsage, alphaPosition, premultiplied, typeInterpretation);
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatRgba1(unsigned char red, unsigned char green, unsigned char blue, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::AlphaPremultiplied pmul) {
  return new QPixelFormat(qPixelFormatRgba(red, green, blue, alfa, usage, position, pmul));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatRgba2(unsigned char red, unsigned char green, unsigned char blue, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position) {
  return new QPixelFormat(qPixelFormatRgba(red, green, blue, alfa, usage, position));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatGrayscale1(unsigned char channelSize) {
  return new QPixelFormat(qPixelFormatGrayscale(channelSize));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatAlpha1(unsigned char channelSize) {
  return new QPixelFormat(qPixelFormatAlpha(channelSize));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatCmyk1(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position) {
  return new QPixelFormat(qPixelFormatCmyk(channelSize, alfa, usage, position));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatCmyk2(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage) {
  return new QPixelFormat(qPixelFormatCmyk(channelSize, alfa, usage));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatCmyk3(unsigned char channelSize, unsigned char alfa) {
  return new QPixelFormat(qPixelFormatCmyk(channelSize, alfa));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatCmyk4(unsigned char channelSize) {
  return new QPixelFormat(qPixelFormatCmyk(channelSize));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsl1(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position) {
  return new QPixelFormat(qPixelFormatHsl(channelSize, alfa, usage, position));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsl2(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage) {
  return new QPixelFormat(qPixelFormatHsl(channelSize, alfa, usage));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsl3(unsigned char channelSize, unsigned char alfa) {
  return new QPixelFormat(qPixelFormatHsl(channelSize, alfa));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsl4(unsigned char channelSize) {
  return new QPixelFormat(qPixelFormatHsl(channelSize));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsv1(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position) {
  return new QPixelFormat(qPixelFormatHsv(channelSize, alfa, usage, position));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsv2(unsigned char channelSize, unsigned char alfa, QPixelFormat::AlphaUsage usage) {
  return new QPixelFormat(qPixelFormatHsv(channelSize, alfa, usage));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsv3(unsigned char channelSize, unsigned char alfa) {
  return new QPixelFormat(qPixelFormatHsv(channelSize, alfa));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatHsv4(unsigned char channelSize) {
  return new QPixelFormat(qPixelFormatHsv(channelSize));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv1(QPixelFormat::YUVLayout layout, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::AlphaPremultiplied p_mul, QPixelFormat::TypeInterpretation typeInt) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa, usage, position, p_mul, typeInt));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv2(QPixelFormat::YUVLayout layout, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position, QPixelFormat::AlphaPremultiplied p_mul) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa, usage, position, p_mul));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv3(QPixelFormat::YUVLayout layout, unsigned char alfa, QPixelFormat::AlphaUsage usage, QPixelFormat::AlphaPosition position) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa, usage, position));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv4(QPixelFormat::YUVLayout layout, unsigned char alfa, QPixelFormat::AlphaUsage usage) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa, usage));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv5(QPixelFormat::YUVLayout layout, unsigned char alfa) {
  return new QPixelFormat(qPixelFormatYuv(layout, alfa));
}


RITUAL_EXPORT QPixelFormat * ctr_qt_gui_ffi_qPixelFormatYuv6(QPixelFormat::YUVLayout layout) {
  return new QPixelFormat(qPixelFormatYuv(layout));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage10(unsigned char * data, int width, int height, QImage::Format format, void (*cleanupFunction)(void *)) {
  return new QImage(data, width, height, format, cleanupFunction);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage11(unsigned char * data, int width, int height, QImage::Format format) {
  return new QImage(data, width, height, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage12(unsigned char const * data, int width, int height, QImage::Format format, void (*cleanupFunction)(void *)) {
  return new QImage(data, width, height, format, cleanupFunction);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage13(unsigned char const * data, int width, int height, QImage::Format format) {
  return new QImage(data, width, height, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage14(unsigned char * data, int width, int height, int bytesPerLine, QImage::Format format, void (*cleanupFunction)(void *)) {
  return new QImage(data, width, height, bytesPerLine, format, cleanupFunction);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage15(unsigned char * data, int width, int height, int bytesPerLine, QImage::Format format) {
  return new QImage(data, width, height, bytesPerLine, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage16(unsigned char const * data, int width, int height, int bytesPerLine, QImage::Format format, void (*cleanupFunction)(void *)) {
  return new QImage(data, width, height, bytesPerLine, format, cleanupFunction);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage17(unsigned char const * data, int width, int height, int bytesPerLine, QImage::Format format) {
  return new QImage(data, width, height, bytesPerLine, format);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_QImage18(QString const * fileName) {
  return new QImage(*fileName);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_copy2(QImage const * this_ptr) {
  return new QImage(this_ptr->copy());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat3(QImage const * this_ptr, QImage::Format f) {
  return new QImage(this_ptr->convertToFormat(f));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat4(QImage * this_ptr, QImage::Format f) {
  return new QImage(this_ptr->convertToFormat(f));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertToFormat5(QImage const * this_ptr, QImage::Format f, QVector< unsigned int > const * colorTable) {
  return new QImage(this_ptr->convertToFormat(f, *colorTable));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createAlphaMask1(QImage const * this_ptr) {
  return new QImage(this_ptr->createAlphaMask());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createHeuristicMask1(QImage const * this_ptr) {
  return new QImage(this_ptr->createHeuristicMask());
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_createMaskFromColor1(QImage const * this_ptr, unsigned int color) {
  return new QImage(this_ptr->createMaskFromColor(color));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled2(QImage const * this_ptr, int w, int h, Qt::AspectRatioMode aspectMode) {
  return new QImage(this_ptr->scaled(w, h, aspectMode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled3(QImage const * this_ptr, int w, int h) {
  return new QImage(this_ptr->scaled(w, h));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled4(QImage const * this_ptr, QSize const * s, Qt::AspectRatioMode aspectMode) {
  return new QImage(this_ptr->scaled(*s, aspectMode));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaled5(QImage const * this_ptr, QSize const * s) {
  return new QImage(this_ptr->scaled(*s));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaledToWidth1(QImage const * this_ptr, int w) {
  return new QImage(this_ptr->scaledToWidth(w));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_scaledToHeight1(QImage const * this_ptr, int h) {
  return new QImage(this_ptr->scaledToHeight(h));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_transformed2(QImage const * this_ptr, QMatrix const * matrix) {
  return new QImage(this_ptr->transformed(*matrix));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_transformed3(QImage const * this_ptr, QTransform const * matrix) {
  return new QImage(this_ptr->transformed(*matrix));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_mirrored2(QImage const * this_ptr, bool horizontally) {
  return new QImage(this_ptr->mirrored(horizontally));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_mirrored3(QImage const * this_ptr) {
  return new QImage(this_ptr->mirrored());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_invertPixels1(QImage * this_ptr) {
  this_ptr->invertPixels();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_load2(QImage * this_ptr, QString const * fileName) {
  return this_ptr->load(*fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_loadFromData2(QImage * this_ptr, unsigned char const * buf, int len) {
  return this_ptr->loadFromData(buf, len);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_loadFromData3(QImage * this_ptr, QByteArray const * data) {
  return this_ptr->loadFromData(*data);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save2(QImage const * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->save(*fileName, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save3(QImage const * this_ptr, QString const * fileName) {
  return this_ptr->save(*fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save4(QImage const * this_ptr, QIODevice * device, char const * format) {
  return this_ptr->save(device, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QImage_save5(QImage const * this_ptr, QIODevice * device) {
  return this_ptr->save(device);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_fromData2(unsigned char const * data, int size) {
  return new QImage(QImage::fromData(data, size));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_fromData3(QByteArray const * data) {
  return new QImage(QImage::fromData(*data));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QImage_text1(QImage const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap6(QString const * fileName, char const * format) {
  return new QPixmap(*fileName, format);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_QPixmap7(QString const * fileName) {
  return new QPixmap(*fileName);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_fill3(QPixmap * this_ptr) {
  this_ptr->fill();
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QPixmap_createHeuristicMask1(QPixmap const * this_ptr) {
  return new QBitmap(this_ptr->createHeuristicMask());
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QPixmap_createMaskFromColor1(QPixmap const * this_ptr, QColor const * maskColor) {
  return new QBitmap(this_ptr->createMaskFromColor(*maskColor));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWindow1(unsigned long long arg1, int x, int y, int w) {
  return new QPixmap(QPixmap::grabWindow(arg1, x, y, w));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWindow2(unsigned long long arg1, int x, int y) {
  return new QPixmap(QPixmap::grabWindow(arg1, x, y));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWindow3(unsigned long long arg1, int x) {
  return new QPixmap(QPixmap::grabWindow(arg1, x));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWindow4(unsigned long long arg1) {
  return new QPixmap(QPixmap::grabWindow(arg1));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget2(QObject * widget, int x, int y, int w) {
  return new QPixmap(QPixmap::grabWidget(widget, x, y, w));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget3(QObject * widget, int x, int y) {
  return new QPixmap(QPixmap::grabWidget(widget, x, y));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget4(QObject * widget, int x) {
  return new QPixmap(QPixmap::grabWidget(widget, x));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_grabWidget5(QObject * widget) {
  return new QPixmap(QPixmap::grabWidget(widget));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled2(QPixmap const * this_ptr, int w, int h, Qt::AspectRatioMode aspectMode) {
  return new QPixmap(this_ptr->scaled(w, h, aspectMode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled3(QPixmap const * this_ptr, int w, int h) {
  return new QPixmap(this_ptr->scaled(w, h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled4(QPixmap const * this_ptr, QSize const * s, Qt::AspectRatioMode aspectMode) {
  return new QPixmap(this_ptr->scaled(*s, aspectMode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaled5(QPixmap const * this_ptr, QSize const * s) {
  return new QPixmap(this_ptr->scaled(*s));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaledToWidth1(QPixmap const * this_ptr, int w) {
  return new QPixmap(this_ptr->scaledToWidth(w));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_scaledToHeight1(QPixmap const * this_ptr, int h) {
  return new QPixmap(this_ptr->scaledToHeight(h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_transformed2(QPixmap const * this_ptr, QMatrix const * arg1) {
  return new QPixmap(this_ptr->transformed(*arg1));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_transformed3(QPixmap const * this_ptr, QTransform const * arg1) {
  return new QPixmap(this_ptr->transformed(*arg1));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_fromImage2(QImage const * image) {
  return new QPixmap(QPixmap::fromImage(*image));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_fromImageReader1(QImageReader * imageReader) {
  return new QPixmap(QPixmap::fromImageReader(imageReader));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_load1(QPixmap * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->load(*fileName, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_load2(QPixmap * this_ptr, QString const * fileName) {
  return this_ptr->load(*fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData2(QPixmap * this_ptr, unsigned char const * buf, unsigned int len, char const * format) {
  return this_ptr->loadFromData(buf, len, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData3(QPixmap * this_ptr, unsigned char const * buf, unsigned int len) {
  return this_ptr->loadFromData(buf, len);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData4(QPixmap * this_ptr, QByteArray const * data, char const * format) {
  return this_ptr->loadFromData(*data, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_loadFromData5(QPixmap * this_ptr, QByteArray const * data) {
  return this_ptr->loadFromData(*data);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save2(QPixmap const * this_ptr, QString const * fileName, char const * format) {
  return this_ptr->save(*fileName, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save3(QPixmap const * this_ptr, QString const * fileName) {
  return this_ptr->save(*fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save4(QPixmap const * this_ptr, QIODevice * device, char const * format) {
  return this_ptr->save(device, format);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_save5(QPixmap const * this_ptr, QIODevice * device) {
  return this_ptr->save(device);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPixmap_convertFromImage1(QPixmap * this_ptr, QImage const * img) {
  return this_ptr->convertFromImage(*img);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QPixmap_copy2(QPixmap const * this_ptr) {
  return new QPixmap(this_ptr->copy());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_scroll2(QPixmap * this_ptr, int dx, int dy, int x, int y, int width, int height) {
  this_ptr->scroll(dx, dy, x, y, width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPixmap_scroll3(QPixmap * this_ptr, int dx, int dy, QRect const * rect) {
  this_ptr->scroll(dx, dy, *rect);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush10(QColor const * color) {
  return new QBrush(*color);
}


RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QBrush_QBrush11(Qt::GlobalColor color) {
  return new QBrush(color);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen6(QBrush const * brush, double width, Qt::PenStyle s, Qt::PenCapStyle c) {
  return new QPen(*brush, width, s, c);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen7(QBrush const * brush, double width, Qt::PenStyle s) {
  return new QPen(*brush, width, s);
}


RITUAL_EXPORT QPen * ctr_qt_gui_ffi_QPen_QPen8(QBrush const * brush, double width) {
  return new QPen(*brush, width);
}


RITUAL_EXPORT QTextOption::Tab * ctr_qt_gui_ffi_QTextOption_Tab_Tab3(double pos, QTextOption::TabType tabType) {
  return new QTextOption::Tab(pos, tabType);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStyleHint1(QTextCharFormat * this_ptr, QFont::StyleHint hint) {
  this_ptr->setFontStyleHint(hint);
}


RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFontDatabase_families1(QFontDatabase const * this_ptr) {
  return new QStringList(this_ptr->families());
}


RITUAL_EXPORT QList< int > * ctr_qt_gui_ffi_QFontDatabase_pointSizes1(QFontDatabase * this_ptr, QString const * family) {
  return new QList< int >(this_ptr->pointSizes(*family));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isBitmapScalable1(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->isBitmapScalable(*family);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isSmoothlyScalable1(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->isSmoothlyScalable(*family);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isScalable1(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->isScalable(*family);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QFontDatabase_isFixedPitch1(QFontDatabase const * this_ptr, QString const * family) {
  return this_ptr->isFixedPitch(*family);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont4(QString const * fileName, double pixelSize) {
  return new QRawFont(*fileName, pixelSize);
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_QRawFont5(QByteArray const * fontData, double pixelSize) {
  return new QRawFont(*fontData, pixelSize);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QRawFont_alphaMapForGlyph1(QRawFont const * this_ptr, quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType) {
  return new QImage(this_ptr->alphaMapForGlyph(glyphIndex, antialiasingType));
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QRawFont_alphaMapForGlyph2(QRawFont const * this_ptr, quint32 glyphIndex) {
  return new QImage(this_ptr->alphaMapForGlyph(glyphIndex));
}


RITUAL_EXPORT QRawFont * ctr_qt_gui_ffi_QRawFont_fromFont1(QFont const * font) {
  return new QRawFont(QRawFont::fromFont(*font));
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash96(QRawFont const * font) {
  return qHash(*font);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QGlyphRun_setFlag1(QGlyphRun * this_ptr, QGlyphRun::GlyphRunFlag flag) {
  this_ptr->setFlag(flag);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_setPosition1(QTextCursor * this_ptr, int pos) {
  this_ptr->setPosition(pos);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_movePosition1(QTextCursor * this_ptr, QTextCursor::MoveOperation op, QTextCursor::MoveMode arg2) {
  return this_ptr->movePosition(op, arg2);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextCursor_movePosition2(QTextCursor * this_ptr, QTextCursor::MoveOperation op) {
  return this_ptr->movePosition(op);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCursor_insertImage4(QTextCursor * this_ptr, QImage const * image) {
  this_ptr->insertImage(*image);
}


RITUAL_EXPORT QTextLayout * ctr_qt_gui_ffi_QTextLayout_QTextLayout4(QString const * text, QFont const * font) {
  return new QTextLayout(*text, *font);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_nextCursorPosition1(QTextLayout const * this_ptr, int oldPos) {
  return this_ptr->nextCursorPosition(oldPos);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLayout_previousCursorPosition1(QTextLayout const * this_ptr, int oldPos) {
  return this_ptr->previousCursorPosition(oldPos);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_draw1(QTextLayout const * this_ptr, QPainter * p, QPointF const * pos, QVector< QTextLayout::FormatRange > const * selections) {
  this_ptr->draw(p, *pos, *selections);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLayout_draw2(QTextLayout const * this_ptr, QPainter * p, QPointF const * pos) {
  this_ptr->draw(p, *pos);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLayout_glyphRuns1(QTextLayout const * this_ptr, int from) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLayout_glyphRuns2(QTextLayout const * this_ptr) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns());
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_cursorToX2(QTextLine const * this_ptr, int * cursorPos) {
  return this_ptr->cursorToX(cursorPos);
}


RITUAL_EXPORT double ctr_qt_gui_ffi_QTextLine_cursorToX3(QTextLine const * this_ptr, int cursorPos) {
  return this_ptr->cursorToX(cursorPos);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QTextLine_xToCursor1(QTextLine const * this_ptr, double x) {
  return this_ptr->xToCursor(x);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextLine_draw1(QTextLine const * this_ptr, QPainter * p, QPointF const * point) {
  this_ptr->draw(p, *point);
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLine_glyphRuns1(QTextLine const * this_ptr, int from) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextLine_glyphRuns2(QTextLine const * this_ptr) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_Qt_convertFromPlainText1(QString const * plain) {
  return new QString(Qt::convertFromPlainText(*plain));
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_QTextDocument3(QString const * text) {
  return new QTextDocument(*text);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_QTextDocument_clone1(QTextDocument const * this_ptr) {
  return this_ptr->clone();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toHtml1(QTextDocument const * this_ptr) {
  return new QString(this_ptr->toHtml());
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find6(QTextDocument const * this_ptr, QString const * subString, int from) {
  return new QTextCursor(this_ptr->find(*subString, from));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find7(QTextDocument const * this_ptr, QString const * subString) {
  return new QTextCursor(this_ptr->find(*subString));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find8(QTextDocument const * this_ptr, QString const * subString, QTextCursor const * cursor) {
  return new QTextCursor(this_ptr->find(*subString, *cursor));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find9(QTextDocument const * this_ptr, QRegExp const * expr, int from) {
  return new QTextCursor(this_ptr->find(*expr, from));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find10(QTextDocument const * this_ptr, QRegExp const * expr) {
  return new QTextCursor(this_ptr->find(*expr));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find11(QTextDocument const * this_ptr, QRegExp const * expr, QTextCursor const * cursor) {
  return new QTextCursor(this_ptr->find(*expr, *cursor));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find12(QTextDocument const * this_ptr, QRegularExpression const * expr, int from) {
  return new QTextCursor(this_ptr->find(*expr, from));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find13(QTextDocument const * this_ptr, QRegularExpression const * expr) {
  return new QTextCursor(this_ptr->find(*expr));
}


RITUAL_EXPORT QTextCursor * ctr_qt_gui_ffi_QTextDocument_find14(QTextDocument const * this_ptr, QRegularExpression const * expr, QTextCursor const * cursor) {
  return new QTextCursor(this_ptr->find(*expr, *cursor));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_drawContents1(QTextDocument * this_ptr, QPainter * painter) {
  this_ptr->drawContents(painter);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_clearUndoRedoStacks1(QTextDocument * this_ptr) {
  this_ptr->clearUndoRedoStacks();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setModified1(QTextDocument * this_ptr) {
  this_ptr->setModified();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QAbstractTextDocumentLayout_unregisterHandler1(QAbstractTextDocumentLayout * this_ptr, int objectType) {
  this_ptr->unregisterHandler(objectType);
}


RITUAL_EXPORT QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * ctr_qt_gui_ffi_QAccessibleInterface_relations1(QAccessibleInterface const * this_ptr) {
  return new QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > >(this_ptr->relations());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setOption2(QSurfaceFormat * this_ptr, QSurfaceFormat::FormatOption option) {
  this_ptr->setOption(option);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap4(QIcon const * this_ptr, QSize const * size, QIcon::Mode mode) {
  return new QPixmap(this_ptr->pixmap(*size, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap5(QIcon const * this_ptr, QSize const * size) {
  return new QPixmap(this_ptr->pixmap(*size));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap6(QIcon const * this_ptr, int w, int h, QIcon::Mode mode) {
  return new QPixmap(this_ptr->pixmap(w, h, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap7(QIcon const * this_ptr, int w, int h) {
  return new QPixmap(this_ptr->pixmap(w, h));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap8(QIcon const * this_ptr, int extent, QIcon::Mode mode) {
  return new QPixmap(this_ptr->pixmap(extent, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap9(QIcon const * this_ptr, int extent) {
  return new QPixmap(this_ptr->pixmap(extent));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap10(QIcon const * this_ptr, QWindow * window, QSize const * size, QIcon::Mode mode) {
  return new QPixmap(this_ptr->pixmap(window, *size, mode));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QIcon_pixmap11(QIcon const * this_ptr, QWindow * window, QSize const * size) {
  return new QPixmap(this_ptr->pixmap(window, *size));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize2(QIcon const * this_ptr, QSize const * size, QIcon::Mode mode) {
  return new QSize(this_ptr->actualSize(*size, mode));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize3(QIcon const * this_ptr, QSize const * size) {
  return new QSize(this_ptr->actualSize(*size));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize4(QIcon const * this_ptr, QWindow * window, QSize const * size, QIcon::Mode mode) {
  return new QSize(this_ptr->actualSize(window, *size, mode));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QIcon_actualSize5(QIcon const * this_ptr, QWindow * window, QSize const * size) {
  return new QSize(this_ptr->actualSize(window, *size));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint2(QIcon const * this_ptr, QPainter * painter, QRect const * rect, int alignment, QIcon::Mode mode) {
  this_ptr->paint(painter, *rect, QFlags< Qt::AlignmentFlag >(alignment), mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint3(QIcon const * this_ptr, QPainter * painter, QRect const * rect, int alignment) {
  this_ptr->paint(painter, *rect, QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint4(QIcon const * this_ptr, QPainter * painter, QRect const * rect) {
  this_ptr->paint(painter, *rect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint5(QIcon const * this_ptr, QPainter * painter, int x, int y, int w, int h, int alignment, QIcon::Mode mode) {
  this_ptr->paint(painter, x, y, w, h, QFlags< Qt::AlignmentFlag >(alignment), mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint6(QIcon const * this_ptr, QPainter * painter, int x, int y, int w, int h, int alignment) {
  this_ptr->paint(painter, x, y, w, h, QFlags< Qt::AlignmentFlag >(alignment));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_paint7(QIcon const * this_ptr, QPainter * painter, int x, int y, int w, int h) {
  this_ptr->paint(painter, x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addPixmap1(QIcon * this_ptr, QPixmap const * pixmap, QIcon::Mode mode) {
  this_ptr->addPixmap(*pixmap, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addPixmap2(QIcon * this_ptr, QPixmap const * pixmap) {
  this_ptr->addPixmap(*pixmap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addFile1(QIcon * this_ptr, QString const * fileName, QSize const * size, QIcon::Mode mode) {
  this_ptr->addFile(*fileName, *size, mode);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addFile2(QIcon * this_ptr, QString const * fileName, QSize const * size) {
  this_ptr->addFile(*fileName, *size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_addFile3(QIcon * this_ptr, QString const * fileName) {
  this_ptr->addFile(*fileName);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIcon_availableSizes1(QIcon const * this_ptr, QIcon::Mode mode) {
  return new QList< QSize >(this_ptr->availableSizes(mode));
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIcon_availableSizes2(QIcon const * this_ptr) {
  return new QList< QSize >(this_ptr->availableSizes());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_qt_findAtNxFile1(QString const * baseFileName, double targetDevicePixelRatio) {
  return new QString(qt_findAtNxFile(*baseFileName, targetDevicePixelRatio));
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor6(QBitmap const * bitmap, QBitmap const * mask, int hotX) {
  return new QCursor(*bitmap, *mask, hotX);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor7(QBitmap const * bitmap, QBitmap const * mask) {
  return new QCursor(*bitmap, *mask);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor8(QPixmap const * pixmap, int hotX) {
  return new QCursor(*pixmap, hotX);
}


RITUAL_EXPORT QCursor * ctr_qt_gui_ffi_QCursor_QCursor9(QPixmap const * pixmap) {
  return new QCursor(*pixmap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setFlag1(QWindow * this_ptr, Qt::WindowType arg1) {
  this_ptr->setFlag(arg1);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QWindow_isAncestorOf1(QWindow const * this_ptr, QWindow const * child) {
  return this_ptr->isAncestorOf(child);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_flush1(QBackingStore * this_ptr, QRegion const * region, QWindow * window) {
  this_ptr->flush(*region, window);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QBackingStore_flush2(QBackingStore * this_ptr, QRegion const * region) {
  this_ptr->flush(*region);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_QBitmap6(QString const * fileName) {
  return new QBitmap(*fileName);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_fromImage1(QImage const * image) {
  return new QBitmap(QBitmap::fromImage(*image));
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_QBitmap_fromData1(QSize const * size, unsigned char const * bits) {
  return new QBitmap(QBitmap::fromData(*size, bits));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_clear1(QClipboard * this_ptr) {
  this_ptr->clear();
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_text2(QClipboard const * this_ptr) {
  return new QString(this_ptr->text());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QClipboard_text3(QClipboard const * this_ptr, QString * subtype) {
  return new QString(this_ptr->text(*subtype));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setText1(QClipboard * this_ptr, QString const * arg1) {
  this_ptr->setText(*arg1);
}


RITUAL_EXPORT QMimeData const * ctr_qt_gui_ffi_QClipboard_mimeData1(QClipboard const * this_ptr) {
  return this_ptr->mimeData();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setMimeData1(QClipboard * this_ptr, QMimeData * data) {
  this_ptr->setMimeData(data);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QClipboard_image1(QClipboard const * this_ptr) {
  return new QImage(this_ptr->image());
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QClipboard_pixmap1(QClipboard const * this_ptr) {
  return new QPixmap(this_ptr->pixmap());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setImage1(QClipboard * this_ptr, QImage const * arg1) {
  this_ptr->setImage(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QClipboard_setPixmap1(QClipboard * this_ptr, QPixmap const * arg1) {
  this_ptr->setPixmap(*arg1);
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_start1(QDrag * this_ptr) {
  return this_ptr->start();
}


RITUAL_EXPORT Qt::DropAction ctr_qt_gui_ffi_QDrag_exec2(QDrag * this_ptr) {
  return this_ptr->exec();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_width3(QFontMetrics const * this_ptr, QString const * arg1) {
  return this_ptr->width(*arg1);
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect4(QFontMetrics const * this_ptr, QRect const * r, int flags, QString const * text, int tabstops) {
  return new QRect(this_ptr->boundingRect(*r, flags, *text, tabstops));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect5(QFontMetrics const * this_ptr, QRect const * r, int flags, QString const * text) {
  return new QRect(this_ptr->boundingRect(*r, flags, *text));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect6(QFontMetrics const * this_ptr, int x, int y, int w, int h, int flags, QString const * text, int tabstops) {
  return new QRect(this_ptr->boundingRect(x, y, w, h, flags, *text, tabstops));
}


RITUAL_EXPORT QRect * ctr_qt_gui_ffi_QFontMetrics_boundingRect7(QFontMetrics const * this_ptr, int x, int y, int w, int h, int flags, QString const * text) {
  return new QRect(this_ptr->boundingRect(x, y, w, h, flags, *text));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QFontMetrics_size1(QFontMetrics const * this_ptr, int flags, QString const * str, int tabstops) {
  return new QSize(this_ptr->size(flags, *str, tabstops));
}


RITUAL_EXPORT QSize * ctr_qt_gui_ffi_QFontMetrics_size2(QFontMetrics const * this_ptr, int flags, QString const * str) {
  return new QSize(this_ptr->size(flags, *str));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontMetrics_elidedText1(QFontMetrics const * this_ptr, QString const * text, Qt::TextElideMode mode, int width) {
  return new QString(this_ptr->elidedText(*text, mode, width));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_boundingRect3(QFontMetricsF const * this_ptr, QRectF const * r, int flags, QString const * string, int tabstops) {
  return new QRectF(this_ptr->boundingRect(*r, flags, *string, tabstops));
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QFontMetricsF_boundingRect4(QFontMetricsF const * this_ptr, QRectF const * r, int flags, QString const * string) {
  return new QRectF(this_ptr->boundingRect(*r, flags, *string));
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QFontMetricsF_size1(QFontMetricsF const * this_ptr, int flags, QString const * str, int tabstops) {
  return new QSizeF(this_ptr->size(flags, *str, tabstops));
}


RITUAL_EXPORT QSizeF * ctr_qt_gui_ffi_QFontMetricsF_size2(QFontMetricsF const * this_ptr, int flags, QString const * str) {
  return new QSizeF(this_ptr->size(flags, *str));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QFontMetricsF_elidedText1(QFontMetricsF const * this_ptr, QString const * text, Qt::TextElideMode mode, double width) {
  return new QString(this_ptr->elidedText(*text, mode, width));
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_QGuiApplication_QGuiApplication2(int * argc, char * * argv) {
  return new QGuiApplication(*argc, argv);
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIconEngine_availableSizes1(QIconEngine const * this_ptr, QIcon::Mode mode) {
  return new QList< QSize >(this_ptr->availableSizes(mode));
}


RITUAL_EXPORT QList< QSize > * ctr_qt_gui_ffi_QIconEngine_availableSizes2(QIconEngine const * this_ptr) {
  return new QList< QSize >(this_ptr->availableSizes());
}


RITUAL_EXPORT QIconEngine * ctr_qt_gui_ffi_QIconEnginePlugin_create1(QIconEnginePlugin * this_ptr) {
  return this_ptr->create();
}


RITUAL_EXPORT QImageIOHandler * ctr_qt_gui_ffi_QImageIOPlugin_create1(QImageIOPlugin const * this_ptr, QIODevice * device) {
  return this_ptr->create(device);
}


RITUAL_EXPORT QImageReader * ctr_qt_gui_ffi_QImageReader_QImageReader3(QIODevice * device) {
  return new QImageReader(device);
}


RITUAL_EXPORT QImageReader * ctr_qt_gui_ffi_QImageReader_QImageReader4(QString const * fileName) {
  return new QImageReader(*fileName);
}


RITUAL_EXPORT QImageWriter * ctr_qt_gui_ffi_QImageWriter_QImageWriter3(QString const * fileName) {
  return new QImageWriter(*fileName);
}


RITUAL_EXPORT QMatrix4x4 * ctr_qt_gui_ffi_QMatrix4x4_inverted1(QMatrix4x4 const * this_ptr) {
  return new QMatrix4x4(this_ptr->inverted());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_rotate3(QMatrix4x4 * this_ptr, float angle, float x, float y) {
  this_ptr->rotate(angle, x, y);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_viewport2(QMatrix4x4 * this_ptr, float left, float bottom, float width, float height, float nearPlane) {
  this_ptr->viewport(left, bottom, width, height, nearPlane);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QMatrix4x4_viewport3(QMatrix4x4 * this_ptr, float left, float bottom, float width, float height) {
  this_ptr->viewport(left, bottom, width, height);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie4(QIODevice * device, QByteArray const * format) {
  return new QMovie(device, *format);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie5(QIODevice * device) {
  return new QMovie(device);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie6(QString const * fileName, QByteArray const * format) {
  return new QMovie(*fileName, *format);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_QMovie_QMovie7(QString const * fileName) {
  return new QMovie(*fileName);
}


RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_qHash97(QOpenGLVersionProfile const * v) {
  return qHash(*v);
}


RITUAL_EXPORT QAbstractOpenGLFunctions * ctr_qt_gui_ffi_QOpenGLContext_versionFunctions1(QOpenGLContext const * this_ptr) {
  return this_ptr->versionFunctions();
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createApplicationMessage1(QString const * text, GLuint id, QOpenGLDebugMessage::Severity severity) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createApplicationMessage(*text, id, severity));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createApplicationMessage2(QString const * text, GLuint id) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createApplicationMessage(*text, id));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createApplicationMessage3(QString const * text) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createApplicationMessage(*text));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createThirdPartyMessage1(QString const * text, GLuint id, QOpenGLDebugMessage::Severity severity) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createThirdPartyMessage(*text, id, severity));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createThirdPartyMessage2(QString const * text, GLuint id) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createThirdPartyMessage(*text, id));
}


RITUAL_EXPORT QOpenGLDebugMessage * ctr_qt_gui_ffi_QOpenGLDebugMessage_createThirdPartyMessage3(QString const * text) {
  return new QOpenGLDebugMessage(QOpenGLDebugMessage::createThirdPartyMessage(*text));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_pushGroup1(QOpenGLDebugLogger * this_ptr, QString const * name, GLuint id) {
  this_ptr->pushGroup(*name, id);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_pushGroup2(QOpenGLDebugLogger * this_ptr, QString const * name) {
  this_ptr->pushGroup(*name);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages2(QOpenGLDebugLogger * this_ptr, int sources, int types) {
  this_ptr->enableMessages(QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages3(QOpenGLDebugLogger * this_ptr, int sources) {
  this_ptr->enableMessages(QFlags< QOpenGLDebugMessage::Source >(sources));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages4(QOpenGLDebugLogger * this_ptr) {
  this_ptr->enableMessages();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages5(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids, int sources) {
  this_ptr->enableMessages(*ids, QFlags< QOpenGLDebugMessage::Source >(sources));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_enableMessages6(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids) {
  this_ptr->enableMessages(*ids);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages2(QOpenGLDebugLogger * this_ptr, int sources, int types) {
  this_ptr->disableMessages(QFlags< QOpenGLDebugMessage::Source >(sources), QFlags< QOpenGLDebugMessage::Type >(types));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages3(QOpenGLDebugLogger * this_ptr, int sources) {
  this_ptr->disableMessages(QFlags< QOpenGLDebugMessage::Source >(sources));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages4(QOpenGLDebugLogger * this_ptr) {
  this_ptr->disableMessages();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages5(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids, int sources) {
  this_ptr->disableMessages(*ids, QFlags< QOpenGLDebugMessage::Source >(sources));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_disableMessages6(QOpenGLDebugLogger * this_ptr, QVector< GLuint > const * ids) {
  this_ptr->disableMessages(*ids);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLDebugLogger_startLogging1(QOpenGLDebugLogger * this_ptr) {
  this_ptr->startLogging();
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject7(QSize const * size) {
  return new QOpenGLFramebufferObject(*size);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject8(int width, int height) {
  return new QOpenGLFramebufferObject(width, height);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject9(QSize const * size, QOpenGLFramebufferObject::Attachment attachment, unsigned int target) {
  return new QOpenGLFramebufferObject(*size, attachment, target);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject10(QSize const * size, QOpenGLFramebufferObject::Attachment attachment) {
  return new QOpenGLFramebufferObject(*size, attachment);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject11(int width, int height, QOpenGLFramebufferObject::Attachment attachment, unsigned int target) {
  return new QOpenGLFramebufferObject(width, height, attachment, target);
}


RITUAL_EXPORT QOpenGLFramebufferObject * ctr_qt_gui_ffi_QOpenGLFramebufferObject_QOpenGLFramebufferObject12(int width, int height, QOpenGLFramebufferObject::Attachment attachment) {
  return new QOpenGLFramebufferObject(width, height, attachment);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_addColorAttachment2(QOpenGLFramebufferObject * this_ptr, QSize const * size) {
  this_ptr->addColorAttachment(*size);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_addColorAttachment3(QOpenGLFramebufferObject * this_ptr, int width, int height) {
  this_ptr->addColorAttachment(width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer4(QOpenGLFramebufferObject * target, QRect const * targetRect, QOpenGLFramebufferObject * source, QRect const * sourceRect, unsigned int buffers) {
  QOpenGLFramebufferObject::blitFramebuffer(target, *targetRect, source, *sourceRect, buffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer5(QOpenGLFramebufferObject * target, QRect const * targetRect, QOpenGLFramebufferObject * source, QRect const * sourceRect) {
  QOpenGLFramebufferObject::blitFramebuffer(target, *targetRect, source, *sourceRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer6(QOpenGLFramebufferObject * target, QOpenGLFramebufferObject * source, unsigned int buffers) {
  QOpenGLFramebufferObject::blitFramebuffer(target, source, buffers);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLFramebufferObject_blitFramebuffer7(QOpenGLFramebufferObject * target, QOpenGLFramebufferObject * source) {
  QOpenGLFramebufferObject::blitFramebuffer(target, source);
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_QOpenGLShader_QOpenGLShader2(int type) {
  return new QOpenGLShader(QFlags< QOpenGLShader::ShaderTypeBit >(type));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShader_hasOpenGLShaders1(int type) {
  return QOpenGLShader::hasOpenGLShaders(QFlags< QOpenGLShader::ShaderTypeBit >(type));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray10(QOpenGLShaderProgram * this_ptr, int location, float const * values, int tupleSize) {
  this_ptr->setAttributeArray(location, values, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray11(QOpenGLShaderProgram * this_ptr, int location, QVector2D const * values) {
  this_ptr->setAttributeArray(location, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray12(QOpenGLShaderProgram * this_ptr, int location, QVector3D const * values) {
  this_ptr->setAttributeArray(location, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray13(QOpenGLShaderProgram * this_ptr, int location, QVector4D const * values) {
  this_ptr->setAttributeArray(location, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray14(QOpenGLShaderProgram * this_ptr, int location, unsigned int type, void const * values, int tupleSize) {
  this_ptr->setAttributeArray(location, type, values, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray15(QOpenGLShaderProgram * this_ptr, char const * name, float const * values, int tupleSize) {
  this_ptr->setAttributeArray(name, values, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray16(QOpenGLShaderProgram * this_ptr, char const * name, QVector2D const * values) {
  this_ptr->setAttributeArray(name, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray17(QOpenGLShaderProgram * this_ptr, char const * name, QVector3D const * values) {
  this_ptr->setAttributeArray(name, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray18(QOpenGLShaderProgram * this_ptr, char const * name, QVector4D const * values) {
  this_ptr->setAttributeArray(name, values);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeArray19(QOpenGLShaderProgram * this_ptr, char const * name, unsigned int type, void const * values, int tupleSize) {
  this_ptr->setAttributeArray(name, type, values, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeBuffer2(QOpenGLShaderProgram * this_ptr, int location, unsigned int type, int offset, int tupleSize) {
  this_ptr->setAttributeBuffer(location, type, offset, tupleSize);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLShaderProgram_setAttributeBuffer3(QOpenGLShaderProgram * this_ptr, char const * name, unsigned int type, int offset, int tupleSize) {
  this_ptr->setAttributeBuffer(name, type, offset, tupleSize);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QOpenGLShaderProgram_hasOpenGLShaderPrograms1() {
  return QOpenGLShaderProgram::hasOpenGLShaderPrograms();
}


RITUAL_EXPORT QOpenGLTexture * ctr_qt_gui_ffi_QOpenGLTexture_QOpenGLTexture3(QImage const * image) {
  return new QOpenGLTexture(*image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_bind2(QOpenGLTexture * this_ptr, unsigned int unit) {
  this_ptr->bind(unit);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_release2(QOpenGLTexture * this_ptr, unsigned int unit) {
  this_ptr->release(unit);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSize1(QOpenGLTexture * this_ptr, int width, int height) {
  this_ptr->setSize(width, height);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setSize2(QOpenGLTexture * this_ptr, int width) {
  this_ptr->setSize(width);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData10(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data) {
  this_ptr->setData(mipLevel, layer, cubeFace, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData11(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data) {
  this_ptr->setData(mipLevel, layer, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData12(QOpenGLTexture * this_ptr, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data) {
  this_ptr->setData(mipLevel, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData13(QOpenGLTexture * this_ptr, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void * data) {
  this_ptr->setData(sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData14(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(mipLevel, layer, cubeFace, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData15(QOpenGLTexture * this_ptr, int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(mipLevel, layer, layerCount, cubeFace, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData16(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(mipLevel, layer, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData17(QOpenGLTexture * this_ptr, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(mipLevel, sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData18(QOpenGLTexture * this_ptr, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(sourceFormat, sourceType, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData9(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void * data) {
  this_ptr->setCompressedData(mipLevel, layer, cubeFace, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData10(QOpenGLTexture * this_ptr, int mipLevel, int layer, int dataSize, void * data) {
  this_ptr->setCompressedData(mipLevel, layer, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData11(QOpenGLTexture * this_ptr, int mipLevel, int dataSize, void * data) {
  this_ptr->setCompressedData(mipLevel, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData12(QOpenGLTexture * this_ptr, int dataSize, void * data) {
  this_ptr->setCompressedData(dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData13(QOpenGLTexture * this_ptr, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void const * data) {
  this_ptr->setCompressedData(mipLevel, layer, cubeFace, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData14(QOpenGLTexture * this_ptr, int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void const * data) {
  this_ptr->setCompressedData(mipLevel, layer, layerCount, cubeFace, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData15(QOpenGLTexture * this_ptr, int mipLevel, int layer, int dataSize, void const * data) {
  this_ptr->setCompressedData(mipLevel, layer, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData16(QOpenGLTexture * this_ptr, int mipLevel, int dataSize, void const * data) {
  this_ptr->setCompressedData(mipLevel, dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setCompressedData17(QOpenGLTexture * this_ptr, int dataSize, void const * data) {
  this_ptr->setCompressedData(dataSize, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData19(QOpenGLTexture * this_ptr, QImage const * image) {
  this_ptr->setData(*image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_generateMipMaps2(QOpenGLTexture * this_ptr, int baseLevel) {
  this_ptr->generateMipMaps(baseLevel);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTextureBlitter_bind1(QOpenGLTextureBlitter * this_ptr) {
  this_ptr->bind();
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow3(QOpenGLWindow::UpdateBehavior updateBehavior) {
  return new QOpenGLWindow(updateBehavior);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow4(QOpenGLContext * shareContext, QOpenGLWindow::UpdateBehavior updateBehavior) {
  return new QOpenGLWindow(shareContext, updateBehavior);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_QOpenGLWindow_QOpenGLWindow5(QOpenGLContext * shareContext) {
  return new QOpenGLWindow(shareContext);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize5(QSize const * pointSize, QString const * name) {
  return new QPageSize(*pointSize, *name);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize6(QSize const * pointSize) {
  return new QPageSize(*pointSize);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize7(QSizeF const * size, QPageSize::Unit units, QString const * name) {
  return new QPageSize(*size, units, *name);
}


RITUAL_EXPORT QPageSize * ctr_qt_gui_ffi_QPageSize_QPageSize8(QSizeF const * size, QPageSize::Unit units) {
  return new QPageSize(*size, units);
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id4(QSize const * pointSize) {
  return QPageSize::id(*pointSize);
}


RITUAL_EXPORT QPageSize::PageSizeId ctr_qt_gui_ffi_QPageSize_id5(QSizeF const * size, QPageSize::Unit units) {
  return QPageSize::id(*size, units);
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_QPageLayout3(QPageSize const * pageSize, QPageLayout::Orientation orientation, QMarginsF const * margins, QPageLayout::Unit units) {
  return new QPageLayout(*pageSize, orientation, *margins, units);
}


RITUAL_EXPORT QPageLayout * ctr_qt_gui_ffi_QPageLayout_QPageLayout4(QPageSize const * pageSize, QPageLayout::Orientation orientation, QMarginsF const * margins) {
  return new QPageLayout(*pageSize, orientation, *margins);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPageLayout_setPageSize1(QPageLayout * this_ptr, QPageSize const * pageSize) {
  this_ptr->setPageSize(*pageSize);
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_create1(QPointF const * pos, QRectF const * sourceRect, double scaleX, double scaleY, double rotation) {
  return new QPainter::PixmapFragment(QPainter::PixmapFragment::create(*pos, *sourceRect, scaleX, scaleY, rotation));
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_create2(QPointF const * pos, QRectF const * sourceRect, double scaleX, double scaleY) {
  return new QPainter::PixmapFragment(QPainter::PixmapFragment::create(*pos, *sourceRect, scaleX, scaleY));
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_create3(QPointF const * pos, QRectF const * sourceRect, double scaleX) {
  return new QPainter::PixmapFragment(QPainter::PixmapFragment::create(*pos, *sourceRect, scaleX));
}


RITUAL_EXPORT QPainter::PixmapFragment * ctr_qt_gui_ffi_QPainter_PixmapFragment_create4(QPointF const * pos, QRectF const * sourceRect) {
  return new QPainter::PixmapFragment(QPainter::PixmapFragment::create(*pos, *sourceRect));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect3(QPainter * this_ptr, QRectF const * arg1) {
  this_ptr->setClipRect(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect4(QPainter * this_ptr, QRect const * arg1) {
  this_ptr->setClipRect(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRect5(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->setClipRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipRegion1(QPainter * this_ptr, QRegion const * arg1) {
  this_ptr->setClipRegion(*arg1);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setClipPath1(QPainter * this_ptr, QPainterPath const * path) {
  this_ptr->setClipPath(*path);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setMatrix1(QPainter * this_ptr, QMatrix const * matrix) {
  this_ptr->setMatrix(*matrix);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setTransform1(QPainter * this_ptr, QTransform const * transform) {
  this_ptr->setTransform(*transform);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWorldMatrix1(QPainter * this_ptr, QMatrix const * matrix) {
  this_ptr->setWorldMatrix(*matrix);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setWorldTransform1(QPainter * this_ptr, QTransform const * matrix) {
  this_ptr->setWorldTransform(*matrix);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon4(QPainter * this_ptr, QPointF const * points, int pointCount) {
  this_ptr->drawPolygon(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon5(QPainter * this_ptr, QPolygonF const * polygon) {
  this_ptr->drawPolygon(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon6(QPainter * this_ptr, QPoint const * points, int pointCount) {
  this_ptr->drawPolygon(points, pointCount);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPolygon7(QPainter * this_ptr, QPolygon const * polygon) {
  this_ptr->drawPolygon(*polygon);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect3(QPainter * this_ptr, QRectF const * rect, double xRadius, double yRadius) {
  this_ptr->drawRoundedRect(*rect, xRadius, yRadius);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect4(QPainter * this_ptr, int x, int y, int w, int h, double xRadius, double yRadius) {
  this_ptr->drawRoundedRect(x, y, w, h, xRadius, yRadius);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundedRect5(QPainter * this_ptr, QRect const * rect, double xRadius, double yRadius) {
  this_ptr->drawRoundedRect(*rect, xRadius, yRadius);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect3(QPainter * this_ptr, QRectF const * r, int xround) {
  this_ptr->drawRoundRect(*r, xround);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect4(QPainter * this_ptr, QRectF const * r) {
  this_ptr->drawRoundRect(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect5(QPainter * this_ptr, int x, int y, int w, int h, int arg5) {
  this_ptr->drawRoundRect(x, y, w, h, arg5);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect6(QPainter * this_ptr, int x, int y, int w, int h) {
  this_ptr->drawRoundRect(x, y, w, h);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect7(QPainter * this_ptr, QRect const * r, int xround) {
  this_ptr->drawRoundRect(*r, xround);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawRoundRect8(QPainter * this_ptr, QRect const * r) {
  this_ptr->drawRoundRect(*r);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap3(QPainter * this_ptr, QRectF const * rect, QPixmap const * pm) {
  this_ptr->drawTiledPixmap(*rect, *pm);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap4(QPainter * this_ptr, int x, int y, int w, int h, QPixmap const * arg5, int sx) {
  this_ptr->drawTiledPixmap(x, y, w, h, *arg5, sx);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap5(QPainter * this_ptr, int x, int y, int w, int h, QPixmap const * arg5) {
  this_ptr->drawTiledPixmap(x, y, w, h, *arg5);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawTiledPixmap6(QPainter * this_ptr, QRect const * arg1, QPixmap const * arg2) {
  this_ptr->drawTiledPixmap(*arg1, *arg2);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawPixmapFragments1(QPainter * this_ptr, QPainter::PixmapFragment const * fragments, int fragmentCount, QPixmap const * pixmap) {
  this_ptr->drawPixmapFragments(fragments, fragmentCount, *pixmap);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage9(QPainter * this_ptr, QRectF const * targetRect, QImage const * image, QRectF const * sourceRect) {
  this_ptr->drawImage(*targetRect, *image, *sourceRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage10(QPainter * this_ptr, QRect const * targetRect, QImage const * image, QRect const * sourceRect) {
  this_ptr->drawImage(*targetRect, *image, *sourceRect);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage11(QPainter * this_ptr, QPointF const * p, QImage const * image, QRectF const * sr) {
  this_ptr->drawImage(*p, *image, *sr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage12(QPainter * this_ptr, QPoint const * p, QImage const * image, QRect const * sr) {
  this_ptr->drawImage(*p, *image, *sr);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage13(QPainter * this_ptr, int x, int y, QImage const * image, int sx, int sy, int sw, int sh) {
  this_ptr->drawImage(x, y, *image, sx, sy, sw, sh);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage14(QPainter * this_ptr, int x, int y, QImage const * image, int sx, int sy, int sw) {
  this_ptr->drawImage(x, y, *image, sx, sy, sw);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage15(QPainter * this_ptr, int x, int y, QImage const * image, int sx, int sy) {
  this_ptr->drawImage(x, y, *image, sx, sy);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage16(QPainter * this_ptr, int x, int y, QImage const * image, int sx) {
  this_ptr->drawImage(x, y, *image, sx);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawImage17(QPainter * this_ptr, int x, int y, QImage const * image) {
  this_ptr->drawImage(x, y, *image);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText8(QPainter * this_ptr, QRectF const * r, int flags, QString const * text) {
  this_ptr->drawText(*r, flags, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText9(QPainter * this_ptr, QRect const * r, int flags, QString const * text) {
  this_ptr->drawText(*r, flags, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText10(QPainter * this_ptr, int x, int y, int w, int h, int flags, QString const * text) {
  this_ptr->drawText(x, y, w, h, flags, *text);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_drawText11(QPainter * this_ptr, QRectF const * r, QString const * text) {
  this_ptr->drawText(*r, *text);
}


RITUAL_EXPORT QRectF * ctr_qt_gui_ffi_QPainter_boundingRect4(QPainter * this_ptr, QRectF const * rect, QString const * text) {
  return new QRectF(this_ptr->boundingRect(*rect, *text));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRenderHint1(QPainter * this_ptr, QPainter::RenderHint hint) {
  this_ptr->setRenderHint(hint);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRenderHints1(QPainter * this_ptr, int hints) {
  this_ptr->setRenderHints(QFlags< QPainter::RenderHint >(hints));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_setRedirected1(QPaintDevice const * device, QPaintDevice * replacement) {
  QPainter::setRedirected(device, replacement);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_QPainter_redirected1(QPaintDevice const * device) {
  return QPainter::redirected(device);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QPaintEngine_drawImage1(QPaintEngine * this_ptr, QRectF const * r, QImage const * pm, QRectF const * sr) {
  this_ptr->drawImage(*r, *pm, *sr);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_load2(QPicture * this_ptr, QIODevice * dev) {
  return this_ptr->load(dev);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_load3(QPicture * this_ptr, QString const * fileName) {
  return this_ptr->load(*fileName);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_save2(QPicture * this_ptr, QIODevice * dev) {
  return this_ptr->save(dev);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QPicture_save3(QPicture * this_ptr, QString const * fileName) {
  return this_ptr->save(*fileName);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QScreen_grabWindow1(QScreen * this_ptr, unsigned long long window, int x, int y, int w) {
  return new QPixmap(this_ptr->grabWindow(window, x, y, w));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QScreen_grabWindow2(QScreen * this_ptr, unsigned long long window, int x, int y) {
  return new QPixmap(this_ptr->grabWindow(window, x, y));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QScreen_grabWindow3(QScreen * this_ptr, unsigned long long window, int x) {
  return new QPixmap(this_ptr->grabWindow(window, x));
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_QScreen_grabWindow4(QScreen * this_ptr, unsigned long long window) {
  return new QPixmap(this_ptr->grabWindow(window));
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_QStandardItem4(int rows) {
  return new QStandardItem(rows);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItem_data1(QStandardItem const * this_ptr) {
  return new QVariant(this_ptr->data());
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_setData1(QStandardItem * this_ptr, QVariant const * value) {
  this_ptr->setData(*value);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_child1(QStandardItem const * this_ptr, int row) {
  return this_ptr->child(row);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItem_takeChild1(QStandardItem * this_ptr, int row) {
  return this_ptr->takeChild(row);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_sortChildren1(QStandardItem * this_ptr, int column) {
  this_ptr->sortChildren(column);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_QStandardItemModel_QStandardItemModel3(int rows, int columns) {
  return new QStandardItemModel(rows, columns);
}


RITUAL_EXPORT QModelIndex * ctr_qt_gui_ffi_QStandardItemModel_index1(QStandardItemModel const * this_ptr, int row, int column) {
  return new QModelIndex(this_ptr->index(row, column));
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_rowCount1(QStandardItemModel const * this_ptr) {
  return this_ptr->rowCount();
}


RITUAL_EXPORT int ctr_qt_gui_ffi_QStandardItemModel_columnCount1(QStandardItemModel const * this_ptr) {
  return this_ptr->columnCount();
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_hasChildren1(QStandardItemModel const * this_ptr) {
  return this_ptr->hasChildren();
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItemModel_data1(QStandardItemModel const * this_ptr, QModelIndex const * index) {
  return new QVariant(this_ptr->data(*index));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_setData1(QStandardItemModel * this_ptr, QModelIndex const * index, QVariant const * value) {
  return this_ptr->setData(*index, *value);
}


RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QStandardItemModel_headerData1(QStandardItemModel const * this_ptr, int section, Qt::Orientation orientation) {
  return new QVariant(this_ptr->headerData(section, orientation));
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_setHeaderData1(QStandardItemModel * this_ptr, int section, Qt::Orientation orientation, QVariant const * value) {
  return this_ptr->setHeaderData(section, orientation, *value);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertRows1(QStandardItemModel * this_ptr, int row, int count) {
  return this_ptr->insertRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertColumns1(QStandardItemModel * this_ptr, int column, int count) {
  return this_ptr->insertColumns(column, count);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_removeRows1(QStandardItemModel * this_ptr, int row, int count) {
  return this_ptr->removeRows(row, count);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_removeColumns1(QStandardItemModel * this_ptr, int column, int count) {
  return this_ptr->removeColumns(column, count);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItemModel_sort1(QStandardItemModel * this_ptr, int column) {
  this_ptr->sort(column);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_item1(QStandardItemModel const * this_ptr, int row) {
  return this_ptr->item(row);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertRow3(QStandardItemModel * this_ptr, int row) {
  return this_ptr->insertRow(row);
}


RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_insertColumn2(QStandardItemModel * this_ptr, int column) {
  return this_ptr->insertColumn(column);
}


RITUAL_EXPORT QStandardItem * ctr_qt_gui_ffi_QStandardItemModel_takeItem1(QStandardItemModel * this_ptr, int row) {
  return this_ptr->takeItem(row);
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItemModel_findItems1(QStandardItemModel const * this_ptr, QString const * text, int flags) {
  return new QList< QStandardItem * >(this_ptr->findItems(*text, QFlags< Qt::MatchFlag >(flags)));
}


RITUAL_EXPORT QList< QStandardItem * > * ctr_qt_gui_ffi_QStandardItemModel_findItems2(QStandardItemModel const * this_ptr, QString const * text) {
  return new QList< QStandardItem * >(this_ptr->findItems(*text));
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_prepare1(QStaticText * this_ptr, QTransform const * matrix) {
  this_ptr->prepare(*matrix);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QStaticText_prepare2(QStaticText * this_ptr) {
  this_ptr->prepare();
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextFragment_glyphRuns1(QTextFragment const * this_ptr, int from) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns(from));
}


RITUAL_EXPORT QList< QGlyphRun > * ctr_qt_gui_ffi_QTextFragment_glyphRuns2(QTextFragment const * this_ptr) {
  return new QList< QGlyphRun >(this_ptr->glyphRuns());
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocumentFragment_toHtml1(QTextDocumentFragment const * this_ptr) {
  return new QString(this_ptr->toHtml());
}


RITUAL_EXPORT QTextDocumentWriter * ctr_qt_gui_ffi_QTextDocumentWriter_QTextDocumentWriter3(QString const * fileName) {
  return new QTextDocumentWriter(*fileName);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_QIntValidator_QIntValidator3(int bottom, int top) {
  return new QIntValidator(bottom, top);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_QDoubleValidator_QDoubleValidator3(double bottom, double top, int decimals) {
  return new QDoubleValidator(bottom, top, decimals);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QDoubleValidator_setRange1(QDoubleValidator * this_ptr, double bottom, double top) {
  this_ptr->setRange(bottom, top);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_QRegExpValidator_QRegExpValidator3(QRegExp const * rx) {
  return new QRegExpValidator(*rx);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_QRegularExpressionValidator_QRegularExpressionValidator3(QRegularExpression const * re) {
  return new QRegularExpressionValidator(*re);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr(QEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr(QInputEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_dynamic_cast_QInputEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QEnterEvent * ctr_qt_gui_ffi_static_cast_QEnterEvent_ptr(QEvent * ptr) {
  return static_cast< QEnterEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr1(QEnterEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QEnterEvent * ctr_qt_gui_ffi_dynamic_cast_QEnterEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QEnterEvent * >(ptr);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_static_cast_QMouseEvent_ptr(QInputEvent * ptr) {
  return static_cast< QMouseEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr1(QMouseEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_dynamic_cast_QMouseEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QMouseEvent * >(ptr);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_static_cast_QMouseEvent_ptr1(QEvent * ptr) {
  return static_cast< QMouseEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr2(QMouseEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QMouseEvent * ctr_qt_gui_ffi_dynamic_cast_QMouseEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QMouseEvent * >(ptr);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_static_cast_QHoverEvent_ptr(QInputEvent * ptr) {
  return static_cast< QHoverEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr2(QHoverEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_dynamic_cast_QHoverEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QHoverEvent * >(ptr);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_static_cast_QHoverEvent_ptr1(QEvent * ptr) {
  return static_cast< QHoverEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr3(QHoverEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QHoverEvent * ctr_qt_gui_ffi_dynamic_cast_QHoverEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QHoverEvent * >(ptr);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_static_cast_QWheelEvent_ptr(QInputEvent * ptr) {
  return static_cast< QWheelEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr3(QWheelEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_dynamic_cast_QWheelEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QWheelEvent * >(ptr);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_static_cast_QWheelEvent_ptr1(QEvent * ptr) {
  return static_cast< QWheelEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr4(QWheelEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_dynamic_cast_QWheelEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QWheelEvent * >(ptr);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_static_cast_QTabletEvent_ptr(QInputEvent * ptr) {
  return static_cast< QTabletEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr4(QTabletEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_dynamic_cast_QTabletEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QTabletEvent * >(ptr);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_static_cast_QTabletEvent_ptr1(QEvent * ptr) {
  return static_cast< QTabletEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr5(QTabletEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QTabletEvent * ctr_qt_gui_ffi_dynamic_cast_QTabletEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QTabletEvent * >(ptr);
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_static_cast_QNativeGestureEvent_ptr(QInputEvent * ptr) {
  return static_cast< QNativeGestureEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr5(QNativeGestureEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_dynamic_cast_QNativeGestureEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QNativeGestureEvent * >(ptr);
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_static_cast_QNativeGestureEvent_ptr1(QEvent * ptr) {
  return static_cast< QNativeGestureEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr6(QNativeGestureEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_dynamic_cast_QNativeGestureEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QNativeGestureEvent * >(ptr);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_static_cast_QKeyEvent_ptr(QInputEvent * ptr) {
  return static_cast< QKeyEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr6(QKeyEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_dynamic_cast_QKeyEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QKeyEvent * >(ptr);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_static_cast_QKeyEvent_ptr1(QEvent * ptr) {
  return static_cast< QKeyEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr7(QKeyEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QKeyEvent * ctr_qt_gui_ffi_dynamic_cast_QKeyEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QKeyEvent * >(ptr);
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_static_cast_QFocusEvent_ptr(QEvent * ptr) {
  return static_cast< QFocusEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr8(QFocusEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QFocusEvent * ctr_qt_gui_ffi_dynamic_cast_QFocusEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QFocusEvent * >(ptr);
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_static_cast_QPaintEvent_ptr(QEvent * ptr) {
  return static_cast< QPaintEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr9(QPaintEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QPaintEvent * ctr_qt_gui_ffi_dynamic_cast_QPaintEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QPaintEvent * >(ptr);
}


RITUAL_EXPORT QMoveEvent * ctr_qt_gui_ffi_static_cast_QMoveEvent_ptr(QEvent * ptr) {
  return static_cast< QMoveEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr10(QMoveEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QMoveEvent * ctr_qt_gui_ffi_dynamic_cast_QMoveEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QMoveEvent * >(ptr);
}


RITUAL_EXPORT QExposeEvent * ctr_qt_gui_ffi_static_cast_QExposeEvent_ptr(QEvent * ptr) {
  return static_cast< QExposeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr11(QExposeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QExposeEvent * ctr_qt_gui_ffi_dynamic_cast_QExposeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QExposeEvent * >(ptr);
}


RITUAL_EXPORT QPlatformSurfaceEvent * ctr_qt_gui_ffi_static_cast_QPlatformSurfaceEvent_ptr(QEvent * ptr) {
  return static_cast< QPlatformSurfaceEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr12(QPlatformSurfaceEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QPlatformSurfaceEvent * ctr_qt_gui_ffi_dynamic_cast_QPlatformSurfaceEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QPlatformSurfaceEvent * >(ptr);
}


RITUAL_EXPORT QResizeEvent * ctr_qt_gui_ffi_static_cast_QResizeEvent_ptr(QEvent * ptr) {
  return static_cast< QResizeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr13(QResizeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QResizeEvent * ctr_qt_gui_ffi_dynamic_cast_QResizeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QResizeEvent * >(ptr);
}


RITUAL_EXPORT QCloseEvent * ctr_qt_gui_ffi_static_cast_QCloseEvent_ptr(QEvent * ptr) {
  return static_cast< QCloseEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr14(QCloseEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QCloseEvent * ctr_qt_gui_ffi_dynamic_cast_QCloseEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QCloseEvent * >(ptr);
}


RITUAL_EXPORT QIconDragEvent * ctr_qt_gui_ffi_static_cast_QIconDragEvent_ptr(QEvent * ptr) {
  return static_cast< QIconDragEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr15(QIconDragEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QIconDragEvent * ctr_qt_gui_ffi_dynamic_cast_QIconDragEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QIconDragEvent * >(ptr);
}


RITUAL_EXPORT QShowEvent * ctr_qt_gui_ffi_static_cast_QShowEvent_ptr(QEvent * ptr) {
  return static_cast< QShowEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr16(QShowEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QShowEvent * ctr_qt_gui_ffi_dynamic_cast_QShowEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QShowEvent * >(ptr);
}


RITUAL_EXPORT QHideEvent * ctr_qt_gui_ffi_static_cast_QHideEvent_ptr(QEvent * ptr) {
  return static_cast< QHideEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr17(QHideEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QHideEvent * ctr_qt_gui_ffi_dynamic_cast_QHideEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QHideEvent * >(ptr);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_static_cast_QContextMenuEvent_ptr(QInputEvent * ptr) {
  return static_cast< QContextMenuEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr7(QContextMenuEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_dynamic_cast_QContextMenuEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QContextMenuEvent * >(ptr);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_static_cast_QContextMenuEvent_ptr1(QEvent * ptr) {
  return static_cast< QContextMenuEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr18(QContextMenuEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QContextMenuEvent * ctr_qt_gui_ffi_dynamic_cast_QContextMenuEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QContextMenuEvent * >(ptr);
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_static_cast_QInputMethodEvent_ptr(QEvent * ptr) {
  return static_cast< QInputMethodEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr19(QInputMethodEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QInputMethodEvent * ctr_qt_gui_ffi_dynamic_cast_QInputMethodEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QInputMethodEvent * >(ptr);
}


RITUAL_EXPORT QInputMethodQueryEvent * ctr_qt_gui_ffi_static_cast_QInputMethodQueryEvent_ptr(QEvent * ptr) {
  return static_cast< QInputMethodQueryEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr20(QInputMethodQueryEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QInputMethodQueryEvent * ctr_qt_gui_ffi_dynamic_cast_QInputMethodQueryEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QInputMethodQueryEvent * >(ptr);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_static_cast_QDropEvent_ptr(QEvent * ptr) {
  return static_cast< QDropEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr21(QDropEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_dynamic_cast_QDropEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QDropEvent * >(ptr);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_static_cast_QDragMoveEvent_ptr(QDropEvent * ptr) {
  return static_cast< QDragMoveEvent * >(ptr);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_static_cast_QDropEvent_ptr1(QDragMoveEvent * ptr) {
  return static_cast< QDropEvent * >(ptr);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_dynamic_cast_QDragMoveEvent_ptr(QDropEvent * ptr) {
  return dynamic_cast< QDragMoveEvent * >(ptr);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_static_cast_QDragMoveEvent_ptr1(QEvent * ptr) {
  return static_cast< QDragMoveEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr22(QDragMoveEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_dynamic_cast_QDragMoveEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QDragMoveEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_static_cast_QDragEnterEvent_ptr(QDragMoveEvent * ptr) {
  return static_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QDragMoveEvent * ctr_qt_gui_ffi_static_cast_QDragMoveEvent_ptr2(QDragEnterEvent * ptr) {
  return static_cast< QDragMoveEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_dynamic_cast_QDragEnterEvent_ptr(QDragMoveEvent * ptr) {
  return dynamic_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_static_cast_QDragEnterEvent_ptr1(QDropEvent * ptr) {
  return static_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QDropEvent * ctr_qt_gui_ffi_static_cast_QDropEvent_ptr2(QDragEnterEvent * ptr) {
  return static_cast< QDropEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_dynamic_cast_QDragEnterEvent_ptr1(QDropEvent * ptr) {
  return dynamic_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_static_cast_QDragEnterEvent_ptr2(QEvent * ptr) {
  return static_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr23(QDragEnterEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDragEnterEvent * ctr_qt_gui_ffi_dynamic_cast_QDragEnterEvent_ptr2(QEvent * ptr) {
  return dynamic_cast< QDragEnterEvent * >(ptr);
}


RITUAL_EXPORT QDragLeaveEvent * ctr_qt_gui_ffi_static_cast_QDragLeaveEvent_ptr(QEvent * ptr) {
  return static_cast< QDragLeaveEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr24(QDragLeaveEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QDragLeaveEvent * ctr_qt_gui_ffi_dynamic_cast_QDragLeaveEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QDragLeaveEvent * >(ptr);
}


RITUAL_EXPORT QHelpEvent * ctr_qt_gui_ffi_static_cast_QHelpEvent_ptr(QEvent * ptr) {
  return static_cast< QHelpEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr25(QHelpEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QHelpEvent * ctr_qt_gui_ffi_dynamic_cast_QHelpEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QHelpEvent * >(ptr);
}


RITUAL_EXPORT QStatusTipEvent * ctr_qt_gui_ffi_static_cast_QStatusTipEvent_ptr(QEvent * ptr) {
  return static_cast< QStatusTipEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr26(QStatusTipEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QStatusTipEvent * ctr_qt_gui_ffi_dynamic_cast_QStatusTipEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QStatusTipEvent * >(ptr);
}


RITUAL_EXPORT QWhatsThisClickedEvent * ctr_qt_gui_ffi_static_cast_QWhatsThisClickedEvent_ptr(QEvent * ptr) {
  return static_cast< QWhatsThisClickedEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr27(QWhatsThisClickedEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QWhatsThisClickedEvent * ctr_qt_gui_ffi_dynamic_cast_QWhatsThisClickedEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QWhatsThisClickedEvent * >(ptr);
}


RITUAL_EXPORT QActionEvent * ctr_qt_gui_ffi_static_cast_QActionEvent_ptr(QEvent * ptr) {
  return static_cast< QActionEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr28(QActionEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QActionEvent * ctr_qt_gui_ffi_dynamic_cast_QActionEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QActionEvent * >(ptr);
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_static_cast_QFileOpenEvent_ptr(QEvent * ptr) {
  return static_cast< QFileOpenEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr29(QFileOpenEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QFileOpenEvent * ctr_qt_gui_ffi_dynamic_cast_QFileOpenEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QFileOpenEvent * >(ptr);
}


RITUAL_EXPORT QToolBarChangeEvent * ctr_qt_gui_ffi_static_cast_QToolBarChangeEvent_ptr(QEvent * ptr) {
  return static_cast< QToolBarChangeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr30(QToolBarChangeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QToolBarChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QToolBarChangeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QToolBarChangeEvent * >(ptr);
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_static_cast_QShortcutEvent_ptr(QEvent * ptr) {
  return static_cast< QShortcutEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr31(QShortcutEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QShortcutEvent * ctr_qt_gui_ffi_dynamic_cast_QShortcutEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QShortcutEvent * >(ptr);
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_static_cast_QWindowStateChangeEvent_ptr(QEvent * ptr) {
  return static_cast< QWindowStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr32(QWindowStateChangeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QWindowStateChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QWindowStateChangeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QWindowStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_static_cast_QTouchEvent_ptr(QInputEvent * ptr) {
  return static_cast< QTouchEvent * >(ptr);
}


RITUAL_EXPORT QInputEvent * ctr_qt_gui_ffi_static_cast_QInputEvent_ptr8(QTouchEvent * ptr) {
  return static_cast< QInputEvent * >(ptr);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_dynamic_cast_QTouchEvent_ptr(QInputEvent * ptr) {
  return dynamic_cast< QTouchEvent * >(ptr);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_static_cast_QTouchEvent_ptr1(QEvent * ptr) {
  return static_cast< QTouchEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr33(QTouchEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QTouchEvent * ctr_qt_gui_ffi_dynamic_cast_QTouchEvent_ptr1(QEvent * ptr) {
  return dynamic_cast< QTouchEvent * >(ptr);
}


RITUAL_EXPORT QScrollPrepareEvent * ctr_qt_gui_ffi_static_cast_QScrollPrepareEvent_ptr(QEvent * ptr) {
  return static_cast< QScrollPrepareEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr34(QScrollPrepareEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QScrollPrepareEvent * ctr_qt_gui_ffi_dynamic_cast_QScrollPrepareEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QScrollPrepareEvent * >(ptr);
}


RITUAL_EXPORT QScrollEvent * ctr_qt_gui_ffi_static_cast_QScrollEvent_ptr(QEvent * ptr) {
  return static_cast< QScrollEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr35(QScrollEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QScrollEvent * ctr_qt_gui_ffi_dynamic_cast_QScrollEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QScrollEvent * >(ptr);
}


RITUAL_EXPORT QScreenOrientationChangeEvent * ctr_qt_gui_ffi_static_cast_QScreenOrientationChangeEvent_ptr(QEvent * ptr) {
  return static_cast< QScreenOrientationChangeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr36(QScreenOrientationChangeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QScreenOrientationChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QScreenOrientationChangeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QScreenOrientationChangeEvent * >(ptr);
}


RITUAL_EXPORT QApplicationStateChangeEvent * ctr_qt_gui_ffi_static_cast_QApplicationStateChangeEvent_ptr(QEvent * ptr) {
  return static_cast< QApplicationStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QEvent * ctr_qt_gui_ffi_static_cast_QEvent_ptr37(QApplicationStateChangeEvent * ptr) {
  return static_cast< QEvent * >(ptr);
}


RITUAL_EXPORT QApplicationStateChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QApplicationStateChangeEvent_ptr(QEvent * ptr) {
  return dynamic_cast< QApplicationStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QPolygon * ctr_qt_gui_ffi_static_cast_QPolygon_ptr(QVector< QPoint > * ptr) {
  return static_cast< QPolygon * >(ptr);
}


RITUAL_EXPORT QVector< QPoint > * ctr_qt_gui_ffi_static_cast_QVector_QPoint_ptr(QPolygon * ptr) {
  return static_cast< QVector< QPoint > * >(ptr);
}


RITUAL_EXPORT QPolygonF * ctr_qt_gui_ffi_static_cast_QPolygonF_ptr(QVector< QPointF > * ptr) {
  return static_cast< QPolygonF * >(ptr);
}


RITUAL_EXPORT QVector< QPointF > * ctr_qt_gui_ffi_static_cast_QVector_QPointF_ptr(QPolygonF * ptr) {
  return static_cast< QVector< QPointF > * >(ptr);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_static_cast_QImage_ptr(QPaintDevice * ptr) {
  return static_cast< QImage * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr(QImage * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QImage * ctr_qt_gui_ffi_dynamic_cast_QImage_ptr(QPaintDevice * ptr) {
  return dynamic_cast< QImage * >(ptr);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_static_cast_QPixmap_ptr(QPaintDevice * ptr) {
  return static_cast< QPixmap * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr1(QPixmap * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_dynamic_cast_QPixmap_ptr(QPaintDevice * ptr) {
  return dynamic_cast< QPixmap * >(ptr);
}


RITUAL_EXPORT QLinearGradient * ctr_qt_gui_ffi_static_cast_QLinearGradient_ptr(QGradient * ptr) {
  return static_cast< QLinearGradient * >(ptr);
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_static_cast_QGradient_ptr(QLinearGradient * ptr) {
  return static_cast< QGradient * >(ptr);
}


RITUAL_EXPORT QRadialGradient * ctr_qt_gui_ffi_static_cast_QRadialGradient_ptr(QGradient * ptr) {
  return static_cast< QRadialGradient * >(ptr);
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_static_cast_QGradient_ptr1(QRadialGradient * ptr) {
  return static_cast< QGradient * >(ptr);
}


RITUAL_EXPORT QConicalGradient * ctr_qt_gui_ffi_static_cast_QConicalGradient_ptr(QGradient * ptr) {
  return static_cast< QConicalGradient * >(ptr);
}


RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_static_cast_QGradient_ptr2(QConicalGradient * ptr) {
  return static_cast< QGradient * >(ptr);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_static_cast_QTextCharFormat_ptr(QTextFormat * ptr) {
  return static_cast< QTextCharFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr(QTextCharFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextBlockFormat * ctr_qt_gui_ffi_static_cast_QTextBlockFormat_ptr(QTextFormat * ptr) {
  return static_cast< QTextBlockFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr1(QTextBlockFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextListFormat * ctr_qt_gui_ffi_static_cast_QTextListFormat_ptr(QTextFormat * ptr) {
  return static_cast< QTextListFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr2(QTextListFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_static_cast_QTextImageFormat_ptr(QTextCharFormat * ptr) {
  return static_cast< QTextImageFormat * >(ptr);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_static_cast_QTextCharFormat_ptr1(QTextImageFormat * ptr) {
  return static_cast< QTextCharFormat * >(ptr);
}


RITUAL_EXPORT QTextImageFormat * ctr_qt_gui_ffi_static_cast_QTextImageFormat_ptr1(QTextFormat * ptr) {
  return static_cast< QTextImageFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr3(QTextImageFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_static_cast_QTextFrameFormat_ptr(QTextFormat * ptr) {
  return static_cast< QTextFrameFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr4(QTextFrameFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_static_cast_QTextTableFormat_ptr(QTextFrameFormat * ptr) {
  return static_cast< QTextTableFormat * >(ptr);
}


RITUAL_EXPORT QTextFrameFormat * ctr_qt_gui_ffi_static_cast_QTextFrameFormat_ptr1(QTextTableFormat * ptr) {
  return static_cast< QTextFrameFormat * >(ptr);
}


RITUAL_EXPORT QTextTableFormat * ctr_qt_gui_ffi_static_cast_QTextTableFormat_ptr1(QTextFormat * ptr) {
  return static_cast< QTextTableFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr5(QTextTableFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_static_cast_QTextTableCellFormat_ptr(QTextCharFormat * ptr) {
  return static_cast< QTextTableCellFormat * >(ptr);
}


RITUAL_EXPORT QTextCharFormat * ctr_qt_gui_ffi_static_cast_QTextCharFormat_ptr2(QTextTableCellFormat * ptr) {
  return static_cast< QTextCharFormat * >(ptr);
}


RITUAL_EXPORT QTextTableCellFormat * ctr_qt_gui_ffi_static_cast_QTextTableCellFormat_ptr1(QTextFormat * ptr) {
  return static_cast< QTextTableCellFormat * >(ptr);
}


RITUAL_EXPORT QTextFormat * ctr_qt_gui_ffi_static_cast_QTextFormat_ptr6(QTextTableCellFormat * ptr) {
  return static_cast< QTextFormat * >(ptr);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_static_cast_QTextDocument_ptr(QObject * ptr) {
  return static_cast< QTextDocument * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr(QTextDocument * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextDocument * ctr_qt_gui_ffi_dynamic_cast_QTextDocument_ptr(QObject * ptr) {
  return dynamic_cast< QTextDocument * >(ptr);
}


RITUAL_EXPORT QAbstractTextDocumentLayout * ctr_qt_gui_ffi_static_cast_QAbstractTextDocumentLayout_ptr(QObject * ptr) {
  return static_cast< QAbstractTextDocumentLayout * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr1(QAbstractTextDocumentLayout * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAbstractTextDocumentLayout * ctr_qt_gui_ffi_dynamic_cast_QAbstractTextDocumentLayout_ptr(QObject * ptr) {
  return dynamic_cast< QAbstractTextDocumentLayout * >(ptr);
}


RITUAL_EXPORT QAccessibleStateChangeEvent * ctr_qt_gui_ffi_static_cast_QAccessibleStateChangeEvent_ptr(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr(QAccessibleStateChangeEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleStateChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleStateChangeEvent_ptr(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleStateChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextCursorEvent_ptr(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr1(QAccessibleTextCursorEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextCursorEvent_ptr(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextSelectionEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return static_cast< QAccessibleTextSelectionEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextCursorEvent_ptr1(QAccessibleTextSelectionEvent * ptr) {
  return static_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextSelectionEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return dynamic_cast< QAccessibleTextSelectionEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextSelectionEvent_ptr1(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTextSelectionEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr2(QAccessibleTextSelectionEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextSelectionEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextSelectionEvent_ptr1(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTextSelectionEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextInsertEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return static_cast< QAccessibleTextInsertEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextCursorEvent_ptr2(QAccessibleTextInsertEvent * ptr) {
  return static_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextInsertEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return dynamic_cast< QAccessibleTextInsertEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextInsertEvent_ptr1(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTextInsertEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr3(QAccessibleTextInsertEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextInsertEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextInsertEvent_ptr1(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTextInsertEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextRemoveEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return static_cast< QAccessibleTextRemoveEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextCursorEvent_ptr3(QAccessibleTextRemoveEvent * ptr) {
  return static_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextRemoveEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return dynamic_cast< QAccessibleTextRemoveEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextRemoveEvent_ptr1(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTextRemoveEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr4(QAccessibleTextRemoveEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextRemoveEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextRemoveEvent_ptr1(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTextRemoveEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextUpdateEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return static_cast< QAccessibleTextUpdateEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextCursorEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextCursorEvent_ptr4(QAccessibleTextUpdateEvent * ptr) {
  return static_cast< QAccessibleTextCursorEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextUpdateEvent_ptr(QAccessibleTextCursorEvent * ptr) {
  return dynamic_cast< QAccessibleTextUpdateEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTextUpdateEvent_ptr1(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTextUpdateEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr5(QAccessibleTextUpdateEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTextUpdateEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTextUpdateEvent_ptr1(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTextUpdateEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleValueChangeEvent * ctr_qt_gui_ffi_static_cast_QAccessibleValueChangeEvent_ptr(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleValueChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr6(QAccessibleValueChangeEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleValueChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleValueChangeEvent_ptr(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleValueChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTableModelChangeEvent * ctr_qt_gui_ffi_static_cast_QAccessibleTableModelChangeEvent_ptr(QAccessibleEvent * ptr) {
  return static_cast< QAccessibleTableModelChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleEvent * ctr_qt_gui_ffi_static_cast_QAccessibleEvent_ptr7(QAccessibleTableModelChangeEvent * ptr) {
  return static_cast< QAccessibleEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleTableModelChangeEvent * ctr_qt_gui_ffi_dynamic_cast_QAccessibleTableModelChangeEvent_ptr(QAccessibleEvent * ptr) {
  return dynamic_cast< QAccessibleTableModelChangeEvent * >(ptr);
}


RITUAL_EXPORT QAccessibleObject * ctr_qt_gui_ffi_static_cast_QAccessibleObject_ptr(QAccessibleInterface * ptr) {
  return static_cast< QAccessibleObject * >(ptr);
}


RITUAL_EXPORT QAccessibleInterface * ctr_qt_gui_ffi_static_cast_QAccessibleInterface_ptr(QAccessibleObject * ptr) {
  return static_cast< QAccessibleInterface * >(ptr);
}


RITUAL_EXPORT QAccessibleObject * ctr_qt_gui_ffi_dynamic_cast_QAccessibleObject_ptr(QAccessibleInterface * ptr) {
  return dynamic_cast< QAccessibleObject * >(ptr);
}


RITUAL_EXPORT QAccessiblePlugin * ctr_qt_gui_ffi_static_cast_QAccessiblePlugin_ptr(QObject * ptr) {
  return static_cast< QAccessiblePlugin * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr2(QAccessiblePlugin * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QAccessiblePlugin * ctr_qt_gui_ffi_dynamic_cast_QAccessiblePlugin_ptr(QObject * ptr) {
  return dynamic_cast< QAccessiblePlugin * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_static_cast_QWindow_ptr(QObject * ptr) {
  return static_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr3(QWindow * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_dynamic_cast_QWindow_ptr(QObject * ptr) {
  return dynamic_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_static_cast_QWindow_ptr1(QSurface * ptr) {
  return static_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_static_cast_QSurface_ptr(QWindow * ptr) {
  return static_cast< QSurface * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_dynamic_cast_QWindow_ptr1(QSurface * ptr) {
  return dynamic_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_static_cast_QBitmap_ptr(QPixmap * ptr) {
  return static_cast< QBitmap * >(ptr);
}


RITUAL_EXPORT QPixmap * ctr_qt_gui_ffi_static_cast_QPixmap_ptr1(QBitmap * ptr) {
  return static_cast< QPixmap * >(ptr);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_dynamic_cast_QBitmap_ptr(QPixmap * ptr) {
  return dynamic_cast< QBitmap * >(ptr);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_static_cast_QBitmap_ptr1(QPaintDevice * ptr) {
  return static_cast< QBitmap * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr2(QBitmap * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QBitmap * ctr_qt_gui_ffi_dynamic_cast_QBitmap_ptr1(QPaintDevice * ptr) {
  return dynamic_cast< QBitmap * >(ptr);
}


RITUAL_EXPORT QClipboard * ctr_qt_gui_ffi_static_cast_QClipboard_ptr(QObject * ptr) {
  return static_cast< QClipboard * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr4(QClipboard * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QClipboard * ctr_qt_gui_ffi_dynamic_cast_QClipboard_ptr(QObject * ptr) {
  return dynamic_cast< QClipboard * >(ptr);
}


RITUAL_EXPORT QDrag * ctr_qt_gui_ffi_static_cast_QDrag_ptr(QObject * ptr) {
  return static_cast< QDrag * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr5(QDrag * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QDrag * ctr_qt_gui_ffi_dynamic_cast_QDrag_ptr(QObject * ptr) {
  return dynamic_cast< QDrag * >(ptr);
}


RITUAL_EXPORT QGenericPlugin * ctr_qt_gui_ffi_static_cast_QGenericPlugin_ptr(QObject * ptr) {
  return static_cast< QGenericPlugin * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr6(QGenericPlugin * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QGenericPlugin * ctr_qt_gui_ffi_dynamic_cast_QGenericPlugin_ptr(QObject * ptr) {
  return dynamic_cast< QGenericPlugin * >(ptr);
}


RITUAL_EXPORT QInputMethod * ctr_qt_gui_ffi_static_cast_QInputMethod_ptr(QObject * ptr) {
  return static_cast< QInputMethod * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr7(QInputMethod * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QInputMethod * ctr_qt_gui_ffi_dynamic_cast_QInputMethod_ptr(QObject * ptr) {
  return dynamic_cast< QInputMethod * >(ptr);
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_static_cast_QGuiApplication_ptr(QCoreApplication * ptr) {
  return static_cast< QGuiApplication * >(ptr);
}


RITUAL_EXPORT QCoreApplication * ctr_qt_gui_ffi_static_cast_QCoreApplication_ptr(QGuiApplication * ptr) {
  return static_cast< QCoreApplication * >(ptr);
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_dynamic_cast_QGuiApplication_ptr(QCoreApplication * ptr) {
  return dynamic_cast< QGuiApplication * >(ptr);
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_static_cast_QGuiApplication_ptr1(QObject * ptr) {
  return static_cast< QGuiApplication * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr8(QGuiApplication * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QGuiApplication * ctr_qt_gui_ffi_dynamic_cast_QGuiApplication_ptr1(QObject * ptr) {
  return dynamic_cast< QGuiApplication * >(ptr);
}


RITUAL_EXPORT QIconEnginePlugin * ctr_qt_gui_ffi_static_cast_QIconEnginePlugin_ptr(QObject * ptr) {
  return static_cast< QIconEnginePlugin * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr9(QIconEnginePlugin * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QIconEnginePlugin * ctr_qt_gui_ffi_dynamic_cast_QIconEnginePlugin_ptr(QObject * ptr) {
  return dynamic_cast< QIconEnginePlugin * >(ptr);
}


RITUAL_EXPORT QImageIOPlugin * ctr_qt_gui_ffi_static_cast_QImageIOPlugin_ptr(QObject * ptr) {
  return static_cast< QImageIOPlugin * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr10(QImageIOPlugin * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QImageIOPlugin * ctr_qt_gui_ffi_dynamic_cast_QImageIOPlugin_ptr(QObject * ptr) {
  return dynamic_cast< QImageIOPlugin * >(ptr);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_static_cast_QMovie_ptr(QObject * ptr) {
  return static_cast< QMovie * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr11(QMovie * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QMovie * ctr_qt_gui_ffi_dynamic_cast_QMovie_ptr(QObject * ptr) {
  return dynamic_cast< QMovie * >(ptr);
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_static_cast_QOffscreenSurface_ptr(QObject * ptr) {
  return static_cast< QOffscreenSurface * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr12(QOffscreenSurface * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_dynamic_cast_QOffscreenSurface_ptr(QObject * ptr) {
  return dynamic_cast< QOffscreenSurface * >(ptr);
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_static_cast_QOffscreenSurface_ptr1(QSurface * ptr) {
  return static_cast< QOffscreenSurface * >(ptr);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_static_cast_QSurface_ptr1(QOffscreenSurface * ptr) {
  return static_cast< QSurface * >(ptr);
}


RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_dynamic_cast_QOffscreenSurface_ptr1(QSurface * ptr) {
  return dynamic_cast< QOffscreenSurface * >(ptr);
}


RITUAL_EXPORT QOpenGLContextGroup * ctr_qt_gui_ffi_static_cast_QOpenGLContextGroup_ptr(QObject * ptr) {
  return static_cast< QOpenGLContextGroup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr13(QOpenGLContextGroup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLContextGroup * ctr_qt_gui_ffi_dynamic_cast_QOpenGLContextGroup_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLContextGroup * >(ptr);
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_static_cast_QOpenGLContext_ptr(QObject * ptr) {
  return static_cast< QOpenGLContext * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr14(QOpenGLContext * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLContext * ctr_qt_gui_ffi_dynamic_cast_QOpenGLContext_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLContext * >(ptr);
}


RITUAL_EXPORT QOpenGLDebugLogger * ctr_qt_gui_ffi_static_cast_QOpenGLDebugLogger_ptr(QObject * ptr) {
  return static_cast< QOpenGLDebugLogger * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr15(QOpenGLDebugLogger * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLDebugLogger * ctr_qt_gui_ffi_dynamic_cast_QOpenGLDebugLogger_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLDebugLogger * >(ptr);
}


RITUAL_EXPORT QOpenGLExtraFunctions * ctr_qt_gui_ffi_static_cast_QOpenGLExtraFunctions_ptr(QOpenGLFunctions * ptr) {
  return static_cast< QOpenGLExtraFunctions * >(ptr);
}


RITUAL_EXPORT QOpenGLFunctions * ctr_qt_gui_ffi_static_cast_QOpenGLFunctions_ptr(QOpenGLExtraFunctions * ptr) {
  return static_cast< QOpenGLFunctions * >(ptr);
}


RITUAL_EXPORT QOpenGLPaintDevice * ctr_qt_gui_ffi_static_cast_QOpenGLPaintDevice_ptr(QPaintDevice * ptr) {
  return static_cast< QOpenGLPaintDevice * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr3(QOpenGLPaintDevice * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QOpenGLPaintDevice * ctr_qt_gui_ffi_dynamic_cast_QOpenGLPaintDevice_ptr(QPaintDevice * ptr) {
  return dynamic_cast< QOpenGLPaintDevice * >(ptr);
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_static_cast_QOpenGLShader_ptr(QObject * ptr) {
  return static_cast< QOpenGLShader * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr16(QOpenGLShader * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLShader * ctr_qt_gui_ffi_dynamic_cast_QOpenGLShader_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLShader * >(ptr);
}


RITUAL_EXPORT QOpenGLShaderProgram * ctr_qt_gui_ffi_static_cast_QOpenGLShaderProgram_ptr(QObject * ptr) {
  return static_cast< QOpenGLShaderProgram * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr17(QOpenGLShaderProgram * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLShaderProgram * ctr_qt_gui_ffi_dynamic_cast_QOpenGLShaderProgram_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLShaderProgram * >(ptr);
}


RITUAL_EXPORT QOpenGLTimerQuery * ctr_qt_gui_ffi_static_cast_QOpenGLTimerQuery_ptr(QObject * ptr) {
  return static_cast< QOpenGLTimerQuery * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr18(QOpenGLTimerQuery * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLTimerQuery * ctr_qt_gui_ffi_dynamic_cast_QOpenGLTimerQuery_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLTimerQuery * >(ptr);
}


RITUAL_EXPORT QOpenGLTimeMonitor * ctr_qt_gui_ffi_static_cast_QOpenGLTimeMonitor_ptr(QObject * ptr) {
  return static_cast< QOpenGLTimeMonitor * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr19(QOpenGLTimeMonitor * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLTimeMonitor * ctr_qt_gui_ffi_dynamic_cast_QOpenGLTimeMonitor_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLTimeMonitor * >(ptr);
}


RITUAL_EXPORT QOpenGLVertexArrayObject * ctr_qt_gui_ffi_static_cast_QOpenGLVertexArrayObject_ptr(QObject * ptr) {
  return static_cast< QOpenGLVertexArrayObject * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr20(QOpenGLVertexArrayObject * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLVertexArrayObject * ctr_qt_gui_ffi_dynamic_cast_QOpenGLVertexArrayObject_ptr(QObject * ptr) {
  return dynamic_cast< QOpenGLVertexArrayObject * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr(QWindow * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_static_cast_QWindow_ptr2(QPaintDeviceWindow * ptr) {
  return static_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_dynamic_cast_QPaintDeviceWindow_ptr(QWindow * ptr) {
  return dynamic_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr1(QObject * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr21(QPaintDeviceWindow * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_dynamic_cast_QPaintDeviceWindow_ptr1(QObject * ptr) {
  return dynamic_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr2(QSurface * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_static_cast_QSurface_ptr2(QPaintDeviceWindow * ptr) {
  return static_cast< QSurface * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_dynamic_cast_QPaintDeviceWindow_ptr2(QSurface * ptr) {
  return dynamic_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr3(QPaintDevice * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr4(QPaintDeviceWindow * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_dynamic_cast_QPaintDeviceWindow_ptr3(QPaintDevice * ptr) {
  return dynamic_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_static_cast_QOpenGLWindow_ptr(QPaintDeviceWindow * ptr) {
  return static_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr4(QOpenGLWindow * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_dynamic_cast_QOpenGLWindow_ptr(QPaintDeviceWindow * ptr) {
  return dynamic_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_static_cast_QOpenGLWindow_ptr1(QWindow * ptr) {
  return static_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_static_cast_QWindow_ptr3(QOpenGLWindow * ptr) {
  return static_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_dynamic_cast_QOpenGLWindow_ptr1(QWindow * ptr) {
  return dynamic_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_static_cast_QOpenGLWindow_ptr2(QObject * ptr) {
  return static_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr22(QOpenGLWindow * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_dynamic_cast_QOpenGLWindow_ptr2(QObject * ptr) {
  return dynamic_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_static_cast_QOpenGLWindow_ptr3(QSurface * ptr) {
  return static_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_static_cast_QSurface_ptr3(QOpenGLWindow * ptr) {
  return static_cast< QSurface * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_dynamic_cast_QOpenGLWindow_ptr3(QSurface * ptr) {
  return dynamic_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_static_cast_QOpenGLWindow_ptr4(QPaintDevice * ptr) {
  return static_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr5(QOpenGLWindow * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QOpenGLWindow * ctr_qt_gui_ffi_dynamic_cast_QOpenGLWindow_ptr4(QPaintDevice * ptr) {
  return dynamic_cast< QOpenGLWindow * >(ptr);
}


RITUAL_EXPORT QPagedPaintDevice * ctr_qt_gui_ffi_static_cast_QPagedPaintDevice_ptr(QPaintDevice * ptr) {
  return static_cast< QPagedPaintDevice * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr6(QPagedPaintDevice * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QPagedPaintDevice * ctr_qt_gui_ffi_dynamic_cast_QPagedPaintDevice_ptr(QPaintDevice * ptr) {
  return dynamic_cast< QPagedPaintDevice * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_static_cast_QPdfWriter_ptr(QObject * ptr) {
  return static_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr23(QPdfWriter * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_dynamic_cast_QPdfWriter_ptr(QObject * ptr) {
  return dynamic_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_static_cast_QPdfWriter_ptr1(QPagedPaintDevice * ptr) {
  return static_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QPagedPaintDevice * ctr_qt_gui_ffi_static_cast_QPagedPaintDevice_ptr1(QPdfWriter * ptr) {
  return static_cast< QPagedPaintDevice * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_dynamic_cast_QPdfWriter_ptr1(QPagedPaintDevice * ptr) {
  return dynamic_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_static_cast_QPdfWriter_ptr2(QPaintDevice * ptr) {
  return static_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr7(QPdfWriter * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QPdfWriter * ctr_qt_gui_ffi_dynamic_cast_QPdfWriter_ptr2(QPaintDevice * ptr) {
  return dynamic_cast< QPdfWriter * >(ptr);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_static_cast_QPicture_ptr(QPaintDevice * ptr) {
  return static_cast< QPicture * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr8(QPicture * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QPicture * ctr_qt_gui_ffi_dynamic_cast_QPicture_ptr(QPaintDevice * ptr) {
  return dynamic_cast< QPicture * >(ptr);
}


RITUAL_EXPORT QPictureFormatPlugin * ctr_qt_gui_ffi_static_cast_QPictureFormatPlugin_ptr(QObject * ptr) {
  return static_cast< QPictureFormatPlugin * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr24(QPictureFormatPlugin * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QPictureFormatPlugin * ctr_qt_gui_ffi_dynamic_cast_QPictureFormatPlugin_ptr(QObject * ptr) {
  return dynamic_cast< QPictureFormatPlugin * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_static_cast_QRasterWindow_ptr(QPaintDeviceWindow * ptr) {
  return static_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QPaintDeviceWindow * ctr_qt_gui_ffi_static_cast_QPaintDeviceWindow_ptr5(QRasterWindow * ptr) {
  return static_cast< QPaintDeviceWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_dynamic_cast_QRasterWindow_ptr(QPaintDeviceWindow * ptr) {
  return dynamic_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_static_cast_QRasterWindow_ptr1(QWindow * ptr) {
  return static_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QWindow * ctr_qt_gui_ffi_static_cast_QWindow_ptr4(QRasterWindow * ptr) {
  return static_cast< QWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_dynamic_cast_QRasterWindow_ptr1(QWindow * ptr) {
  return dynamic_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_static_cast_QRasterWindow_ptr2(QObject * ptr) {
  return static_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr25(QRasterWindow * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_dynamic_cast_QRasterWindow_ptr2(QObject * ptr) {
  return dynamic_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_static_cast_QRasterWindow_ptr3(QSurface * ptr) {
  return static_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QSurface * ctr_qt_gui_ffi_static_cast_QSurface_ptr4(QRasterWindow * ptr) {
  return static_cast< QSurface * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_dynamic_cast_QRasterWindow_ptr3(QSurface * ptr) {
  return dynamic_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_static_cast_QRasterWindow_ptr4(QPaintDevice * ptr) {
  return static_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QPaintDevice * ctr_qt_gui_ffi_static_cast_QPaintDevice_ptr9(QRasterWindow * ptr) {
  return static_cast< QPaintDevice * >(ptr);
}


RITUAL_EXPORT QRasterWindow * ctr_qt_gui_ffi_dynamic_cast_QRasterWindow_ptr4(QPaintDevice * ptr) {
  return dynamic_cast< QRasterWindow * >(ptr);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_static_cast_QScreen_ptr(QObject * ptr) {
  return static_cast< QScreen * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr26(QScreen * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_dynamic_cast_QScreen_ptr(QObject * ptr) {
  return dynamic_cast< QScreen * >(ptr);
}


RITUAL_EXPORT QSessionManager * ctr_qt_gui_ffi_static_cast_QSessionManager_ptr(QObject * ptr) {
  return static_cast< QSessionManager * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr27(QSessionManager * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSessionManager * ctr_qt_gui_ffi_dynamic_cast_QSessionManager_ptr(QObject * ptr) {
  return dynamic_cast< QSessionManager * >(ptr);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_static_cast_QStandardItemModel_ptr(QAbstractItemModel * ptr) {
  return static_cast< QStandardItemModel * >(ptr);
}


RITUAL_EXPORT QAbstractItemModel * ctr_qt_gui_ffi_static_cast_QAbstractItemModel_ptr(QStandardItemModel * ptr) {
  return static_cast< QAbstractItemModel * >(ptr);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_dynamic_cast_QStandardItemModel_ptr(QAbstractItemModel * ptr) {
  return dynamic_cast< QStandardItemModel * >(ptr);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_static_cast_QStandardItemModel_ptr1(QObject * ptr) {
  return static_cast< QStandardItemModel * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr28(QStandardItemModel * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QStandardItemModel * ctr_qt_gui_ffi_dynamic_cast_QStandardItemModel_ptr1(QObject * ptr) {
  return dynamic_cast< QStandardItemModel * >(ptr);
}


RITUAL_EXPORT QStyleHints * ctr_qt_gui_ffi_static_cast_QStyleHints_ptr(QObject * ptr) {
  return static_cast< QStyleHints * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr29(QStyleHints * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QStyleHints * ctr_qt_gui_ffi_dynamic_cast_QStyleHints_ptr(QObject * ptr) {
  return dynamic_cast< QStyleHints * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_static_cast_QTextObject_ptr(QObject * ptr) {
  return static_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr30(QTextObject * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_dynamic_cast_QTextObject_ptr(QObject * ptr) {
  return dynamic_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QTextBlockGroup * ctr_qt_gui_ffi_static_cast_QTextBlockGroup_ptr(QTextObject * ptr) {
  return static_cast< QTextBlockGroup * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_static_cast_QTextObject_ptr1(QTextBlockGroup * ptr) {
  return static_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QTextBlockGroup * ctr_qt_gui_ffi_dynamic_cast_QTextBlockGroup_ptr(QTextObject * ptr) {
  return dynamic_cast< QTextBlockGroup * >(ptr);
}


RITUAL_EXPORT QTextBlockGroup * ctr_qt_gui_ffi_static_cast_QTextBlockGroup_ptr1(QObject * ptr) {
  return static_cast< QTextBlockGroup * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr31(QTextBlockGroup * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextBlockGroup * ctr_qt_gui_ffi_dynamic_cast_QTextBlockGroup_ptr1(QObject * ptr) {
  return dynamic_cast< QTextBlockGroup * >(ptr);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_static_cast_QTextFrame_ptr(QTextObject * ptr) {
  return static_cast< QTextFrame * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_static_cast_QTextObject_ptr2(QTextFrame * ptr) {
  return static_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_dynamic_cast_QTextFrame_ptr(QTextObject * ptr) {
  return dynamic_cast< QTextFrame * >(ptr);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_static_cast_QTextFrame_ptr1(QObject * ptr) {
  return static_cast< QTextFrame * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr32(QTextFrame * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_dynamic_cast_QTextFrame_ptr1(QObject * ptr) {
  return dynamic_cast< QTextFrame * >(ptr);
}


RITUAL_EXPORT QSyntaxHighlighter * ctr_qt_gui_ffi_static_cast_QSyntaxHighlighter_ptr(QObject * ptr) {
  return static_cast< QSyntaxHighlighter * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr33(QSyntaxHighlighter * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QSyntaxHighlighter * ctr_qt_gui_ffi_dynamic_cast_QSyntaxHighlighter_ptr(QObject * ptr) {
  return dynamic_cast< QSyntaxHighlighter * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_static_cast_QTextList_ptr(QTextBlockGroup * ptr) {
  return static_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QTextBlockGroup * ctr_qt_gui_ffi_static_cast_QTextBlockGroup_ptr2(QTextList * ptr) {
  return static_cast< QTextBlockGroup * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_dynamic_cast_QTextList_ptr(QTextBlockGroup * ptr) {
  return dynamic_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_static_cast_QTextList_ptr1(QTextObject * ptr) {
  return static_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_static_cast_QTextObject_ptr3(QTextList * ptr) {
  return static_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_dynamic_cast_QTextList_ptr1(QTextObject * ptr) {
  return dynamic_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_static_cast_QTextList_ptr2(QObject * ptr) {
  return static_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr34(QTextList * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextList * ctr_qt_gui_ffi_dynamic_cast_QTextList_ptr2(QObject * ptr) {
  return dynamic_cast< QTextList * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_static_cast_QTextTable_ptr(QTextFrame * ptr) {
  return static_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QTextFrame * ctr_qt_gui_ffi_static_cast_QTextFrame_ptr2(QTextTable * ptr) {
  return static_cast< QTextFrame * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_dynamic_cast_QTextTable_ptr(QTextFrame * ptr) {
  return dynamic_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_static_cast_QTextTable_ptr1(QTextObject * ptr) {
  return static_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QTextObject * ctr_qt_gui_ffi_static_cast_QTextObject_ptr4(QTextTable * ptr) {
  return static_cast< QTextObject * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_dynamic_cast_QTextTable_ptr1(QTextObject * ptr) {
  return dynamic_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_static_cast_QTextTable_ptr2(QObject * ptr) {
  return static_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr35(QTextTable * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QTextTable * ctr_qt_gui_ffi_dynamic_cast_QTextTable_ptr2(QObject * ptr) {
  return dynamic_cast< QTextTable * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_static_cast_QValidator_ptr(QObject * ptr) {
  return static_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr36(QValidator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_dynamic_cast_QValidator_ptr(QObject * ptr) {
  return dynamic_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_static_cast_QIntValidator_ptr(QValidator * ptr) {
  return static_cast< QIntValidator * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_static_cast_QValidator_ptr1(QIntValidator * ptr) {
  return static_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_dynamic_cast_QIntValidator_ptr(QValidator * ptr) {
  return dynamic_cast< QIntValidator * >(ptr);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_static_cast_QIntValidator_ptr1(QObject * ptr) {
  return static_cast< QIntValidator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr37(QIntValidator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QIntValidator * ctr_qt_gui_ffi_dynamic_cast_QIntValidator_ptr1(QObject * ptr) {
  return dynamic_cast< QIntValidator * >(ptr);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_static_cast_QDoubleValidator_ptr(QValidator * ptr) {
  return static_cast< QDoubleValidator * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_static_cast_QValidator_ptr2(QDoubleValidator * ptr) {
  return static_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_dynamic_cast_QDoubleValidator_ptr(QValidator * ptr) {
  return dynamic_cast< QDoubleValidator * >(ptr);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_static_cast_QDoubleValidator_ptr1(QObject * ptr) {
  return static_cast< QDoubleValidator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr38(QDoubleValidator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QDoubleValidator * ctr_qt_gui_ffi_dynamic_cast_QDoubleValidator_ptr1(QObject * ptr) {
  return dynamic_cast< QDoubleValidator * >(ptr);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_static_cast_QRegExpValidator_ptr(QValidator * ptr) {
  return static_cast< QRegExpValidator * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_static_cast_QValidator_ptr3(QRegExpValidator * ptr) {
  return static_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_dynamic_cast_QRegExpValidator_ptr(QValidator * ptr) {
  return dynamic_cast< QRegExpValidator * >(ptr);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_static_cast_QRegExpValidator_ptr1(QObject * ptr) {
  return static_cast< QRegExpValidator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr39(QRegExpValidator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QRegExpValidator * ctr_qt_gui_ffi_dynamic_cast_QRegExpValidator_ptr1(QObject * ptr) {
  return dynamic_cast< QRegExpValidator * >(ptr);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_static_cast_QRegularExpressionValidator_ptr(QValidator * ptr) {
  return static_cast< QRegularExpressionValidator * >(ptr);
}


RITUAL_EXPORT QValidator * ctr_qt_gui_ffi_static_cast_QValidator_ptr4(QRegularExpressionValidator * ptr) {
  return static_cast< QValidator * >(ptr);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_dynamic_cast_QRegularExpressionValidator_ptr(QValidator * ptr) {
  return dynamic_cast< QRegularExpressionValidator * >(ptr);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_static_cast_QRegularExpressionValidator_ptr1(QObject * ptr) {
  return static_cast< QRegularExpressionValidator * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr40(QRegularExpressionValidator * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT QRegularExpressionValidator * ctr_qt_gui_ffi_dynamic_cast_QRegularExpressionValidator_ptr1(QObject * ptr) {
  return dynamic_cast< QRegularExpressionValidator * >(ptr);
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor23(QStringView const * name) {
  return new QColor(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_setNamedColor4(QColor * this_ptr, QStringView const * name) {
  this_ptr->setNamedColor(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_QColor_isValidColor4(QStringView const * arg1) {
  return QColor::isValidColor(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QNativeGestureEvent * ctr_qt_gui_ffi_QNativeGestureEvent_QNativeGestureEvent6(Qt::NativeGestureType type, QTouchDevice const * dev, QPointF const * localPos, QPointF const * windowPos, QPointF const * screenPos, double value, unsigned long sequenceId, quint64 intArgument) {
  return new QNativeGestureEvent(type, dev, *localPos, *windowPos, *screenPos, value, sequenceId, intArgument);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QTouchDevice const * ctr_qt_gui_ffi_QNativeGestureEvent_device(QNativeGestureEvent const * this_ptr) {
  return this_ptr->device();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_QPolygon_intersects(QPolygon const * this_ptr, QPolygon const * r) {
  return this_ptr->intersects(*r);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_QPolygonF_intersects(QPolygonF const * this_ptr, QPolygonF const * r) {
  return this_ptr->intersects(*r);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT long long ctr_qt_gui_ffi_QImage_sizeInBytes(QImage const * this_ptr) {
  return this_ptr->sizeInBytes();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextOption_setTabStopDistance(QTextOption * this_ptr, double tabStopDistance) {
  this_ptr->setTabStopDistance(tabStopDistance);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_gui_ffi_QTextOption_tabStopDistance(QTextOption const * this_ptr) {
  return this_ptr->tabStopDistance();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QSurfaceFormat::ColorSpace ctr_qt_gui_ffi_QSurfaceFormat_colorSpace(QSurfaceFormat const * this_ptr) {
  return this_ptr->colorSpace();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QSurfaceFormat_setColorSpace(QSurfaceFormat * this_ptr, QSurfaceFormat::ColorSpace colorSpace) {
  this_ptr->setColorSpace(colorSpace);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QIcon_fallbackSearchPaths() {
  return new QStringList(QIcon::fallbackSearchPaths());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_setFallbackSearchPaths(QStringList const * paths) {
  QIcon::setFallbackSearchPaths(*paths);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__790(QCursor const * lhs, QCursor const * rhs) {
  return operator==(*lhs, *rhs);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QWindow_windowStates(QWindow const * this_ptr) {
  return int(this_ptr->windowStates());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_setWindowStates(QWindow * this_ptr, int states) {
  this_ptr->setWindowStates(QFlags< Qt::WindowState >(states));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_horizontalAdvance(QFontMetrics const * this_ptr, QString const * arg1, int len) {
  return this_ptr->horizontalAdvance(*arg1, len);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_horizontalAdvance1(QFontMetrics const * this_ptr, QChar const * arg1) {
  return this_ptr->horizontalAdvance(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_horizontalAdvance(QFontMetricsF const * this_ptr, QString const * string, int length) {
  return this_ptr->horizontalAdvance(*string, length);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_horizontalAdvance1(QFontMetricsF const * this_ptr, QChar const * arg1) {
  return this_ptr->horizontalAdvance(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QScreen * ctr_qt_gui_ffi_QGuiApplication_screenAt(QPoint const * point) {
  return QGuiApplication::screenAt(*point);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_fontChanged(QGuiApplication * this_ptr, QFont const * font) {
  this_ptr->fontChanged(*font);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QImageReader::ImageReaderError ctr_qt_gui_ffi_QMovie_lastError(QMovie const * this_ptr) {
  return this_ptr->lastError();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_gui_ffi_QMovie_lastErrorString(QMovie const * this_ptr) {
  return new QString(this_ptr->lastErrorString());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QOffscreenSurface * ctr_qt_gui_ffi_QOffscreenSurface_QOffscreenSurface4(QScreen * screen, QObject * parent) {
  return new QOffscreenSurface(screen, parent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__792(QDebug const * debug, QOpenGLVersionProfile const * vp) {
  return new QDebug(operator<<(*debug, *vp));
}


#endif

RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__793(QDebug const * debug, QOpenGLContext const * ctx) {
  return new QDebug(operator<<(*debug, ctx));
}


RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__794(QDebug const * debug, QOpenGLContextGroup const * cg) {
  return new QDebug(operator<<(*debug, cg));
}


#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlendBarrier(QOpenGLExtraFunctions * this_ptr) {
  this_ptr->glBlendBarrier();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glCopyImageSubData(QOpenGLExtraFunctions * this_ptr, GLuint srcName, unsigned int srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, unsigned int dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, int srcWidth, int srcHeight, int srcDepth) {
  this_ptr->glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDebugMessageControl(QOpenGLExtraFunctions * this_ptr, unsigned int source, unsigned int type, unsigned int severity, int count, GLuint const * ids, unsigned char enabled) {
  this_ptr->glDebugMessageControl(source, type, severity, count, ids, enabled);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDebugMessageInsert(QOpenGLExtraFunctions * this_ptr, unsigned int source, unsigned int type, GLuint id, unsigned int severity, int length, char const * buf) {
  this_ptr->glDebugMessageInsert(source, type, id, severity, length, buf);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDebugMessageCallback(QOpenGLExtraFunctions * this_ptr, void (*callback)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const *, void const *), void const * userParam) {
  this_ptr->glDebugMessageCallback(callback, userParam);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT GLuint ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetDebugMessageLog(QOpenGLExtraFunctions * this_ptr, GLuint count, int bufSize, unsigned int * sources, unsigned int * types, GLuint * ids, unsigned int * severities, int * lengths, char * messageLog) {
  return this_ptr->glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glPushDebugGroup(QOpenGLExtraFunctions * this_ptr, unsigned int source, GLuint id, int length, char const * message) {
  this_ptr->glPushDebugGroup(source, id, length, message);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glPopDebugGroup(QOpenGLExtraFunctions * this_ptr) {
  this_ptr->glPopDebugGroup();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glObjectLabel(QOpenGLExtraFunctions * this_ptr, unsigned int identifier, GLuint name, int length, char const * label) {
  this_ptr->glObjectLabel(identifier, name, length, label);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetObjectLabel(QOpenGLExtraFunctions * this_ptr, unsigned int identifier, GLuint name, int bufSize, int * length, char * label) {
  this_ptr->glGetObjectLabel(identifier, name, bufSize, length, label);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glObjectPtrLabel(QOpenGLExtraFunctions * this_ptr, void const * ptr, int length, char const * label) {
  this_ptr->glObjectPtrLabel(ptr, length, label);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetObjectPtrLabel(QOpenGLExtraFunctions * this_ptr, void const * ptr, int bufSize, int * length, char * label) {
  this_ptr->glGetObjectPtrLabel(ptr, bufSize, length, label);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetPointerv(QOpenGLExtraFunctions * this_ptr, unsigned int pname, void * * params) {
  this_ptr->glGetPointerv(pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glEnablei(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index) {
  this_ptr->glEnablei(target, index);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDisablei(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index) {
  this_ptr->glDisablei(target, index);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlendEquationi(QOpenGLExtraFunctions * this_ptr, GLuint buf, unsigned int mode) {
  this_ptr->glBlendEquationi(buf, mode);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlendEquationSeparatei(QOpenGLExtraFunctions * this_ptr, GLuint buf, unsigned int modeRGB, unsigned int modeAlpha) {
  this_ptr->glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlendFunci(QOpenGLExtraFunctions * this_ptr, GLuint buf, unsigned int src, unsigned int dst) {
  this_ptr->glBlendFunci(buf, src, dst);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glBlendFuncSeparatei(QOpenGLExtraFunctions * this_ptr, GLuint buf, unsigned int srcRGB, unsigned int dstRGB, unsigned int srcAlpha, unsigned int dstAlpha) {
  this_ptr->glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glColorMaski(QOpenGLExtraFunctions * this_ptr, GLuint index, unsigned char r, unsigned char g, unsigned char b, unsigned char a) {
  this_ptr->glColorMaski(index, r, g, b, a);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned char ctr_qt_gui_ffi_QOpenGLExtraFunctions_glIsEnabledi(QOpenGLExtraFunctions * this_ptr, unsigned int target, GLuint index) {
  return this_ptr->glIsEnabledi(target, index);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawElementsBaseVertex(QOpenGLExtraFunctions * this_ptr, unsigned int mode, int count, unsigned int type, void const * indices, GLint basevertex) {
  this_ptr->glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawRangeElementsBaseVertex(QOpenGLExtraFunctions * this_ptr, unsigned int mode, GLuint start, GLuint end, int count, unsigned int type, void const * indices, GLint basevertex) {
  this_ptr->glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glDrawElementsInstancedBaseVertex(QOpenGLExtraFunctions * this_ptr, unsigned int mode, int count, unsigned int type, void const * indices, int instancecount, GLint basevertex) {
  this_ptr->glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glFramebufferTexture(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int attachment, GLuint texture, GLint level) {
  this_ptr->glFramebufferTexture(target, attachment, texture, level);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glPrimitiveBoundingBox(QOpenGLExtraFunctions * this_ptr, float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) {
  this_ptr->glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetGraphicsResetStatus(QOpenGLExtraFunctions * this_ptr) {
  return this_ptr->glGetGraphicsResetStatus();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glReadnPixels(QOpenGLExtraFunctions * this_ptr, GLint x, GLint y, int width, int height, unsigned int format, unsigned int type, int bufSize, void * data) {
  this_ptr->glReadnPixels(x, y, width, height, format, type, bufSize, data);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetnUniformfv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int bufSize, float * params) {
  this_ptr->glGetnUniformfv(program, location, bufSize, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetnUniformiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int bufSize, GLint * params) {
  this_ptr->glGetnUniformiv(program, location, bufSize, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetnUniformuiv(QOpenGLExtraFunctions * this_ptr, GLuint program, GLint location, int bufSize, GLuint * params) {
  this_ptr->glGetnUniformuiv(program, location, bufSize, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glMinSampleShading(QOpenGLExtraFunctions * this_ptr, float value) {
  this_ptr->glMinSampleShading(value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glPatchParameteri(QOpenGLExtraFunctions * this_ptr, unsigned int pname, GLint value) {
  this_ptr->glPatchParameteri(pname, value);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexParameterIiv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint const * params) {
  this_ptr->glTexParameterIiv(target, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexParameterIuiv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLuint const * params) {
  this_ptr->glTexParameterIuiv(target, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetTexParameterIiv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLint * params) {
  this_ptr->glGetTexParameterIiv(target, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetTexParameterIuiv(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int pname, GLuint * params) {
  this_ptr->glGetTexParameterIuiv(target, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameterIiv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLint const * param) {
  this_ptr->glSamplerParameterIiv(sampler, pname, param);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glSamplerParameterIuiv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLuint const * param) {
  this_ptr->glSamplerParameterIuiv(sampler, pname, param);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetSamplerParameterIiv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLint * params) {
  this_ptr->glGetSamplerParameterIiv(sampler, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glGetSamplerParameterIuiv(QOpenGLExtraFunctions * this_ptr, GLuint sampler, unsigned int pname, GLuint * params) {
  this_ptr->glGetSamplerParameterIuiv(sampler, pname, params);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexBuffer(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int internalformat, GLuint buffer) {
  this_ptr->glTexBuffer(target, internalformat, buffer);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexBufferRange(QOpenGLExtraFunctions * this_ptr, unsigned int target, unsigned int internalformat, GLuint buffer, long offset, long size) {
  this_ptr->glTexBufferRange(target, internalformat, buffer, offset, size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLExtraFunctions_glTexStorage3DMultisample(QOpenGLExtraFunctions * this_ptr, unsigned int target, int samples, unsigned int internalformat, int width, int height, int depth, unsigned char fixedsamplelocations) {
  this_ptr->glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__795(QDebug const * debug, QOpenGLTexture const * t) {
  return new QDebug(operator<<(*debug, t));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPdfWriter_setPdfVersion(QPdfWriter * this_ptr, QPagedPaintDevice::PdfVersion version) {
  this_ptr->setPdfVersion(version);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QPagedPaintDevice::PdfVersion ctr_qt_gui_ffi_QPdfWriter_pdfVersion(QPdfWriter const * this_ptr) {
  return this_ptr->pdfVersion();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_QStyleHints_showShortcutsInContextMenus(QStyleHints const * this_ptr) {
  return this_ptr->showShortcutsInContextMenus();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setMouseQuickSelectionThreshold(QStyleHints * this_ptr, int threshold) {
  this_ptr->setMouseQuickSelectionThreshold(threshold);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_mouseQuickSelectionThreshold(QStyleHints const * this_ptr) {
  return this_ptr->mouseQuickSelectionThreshold();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_mouseQuickSelectionThresholdChanged(QStyleHints * this_ptr, int threshold) {
  this_ptr->mouseQuickSelectionThresholdChanged(threshold);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_shrink_to_fit(QVector< QPoint > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_shrink_to_fit(QVector< QPair< double, QColor > > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_shrink_to_fit(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_shrink_to_fit(QVector< QRect > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_shrink_to_fit(QVector< double > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_shrink_to_fit(QVector< QTextLength > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_shrink_to_fit(QVector< quint32 > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_shrink_to_fit(QVector< QTextLayout::FormatRange > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_shrink_to_fit(QVector< QTextFormat > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_shrink_to_fit(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_shrink_to_fit(QVector< QSize > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_shrink_to_fit(QVector< float > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_shrink_to_fit(QVector< GLuint64 > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_shrink_to_fit(QVector< QLineF > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_shrink_to_fit(QVector< QLine > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_shrink_to_fit(QVector< QRectF > * this_ptr) {
  this_ptr->shrink_to_fit();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QFontMetrics_horizontalAdvance2(QFontMetrics const * this_ptr, QString const * arg1) {
  return this_ptr->horizontalAdvance(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51103)||(RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_horizontalAdvance2(QFontMetricsF const * this_ptr, QString const * string) {
  return this_ptr->horizontalAdvance(*string);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QImage_staticMetaObject() {
  return &QImage::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QSurface_staticMetaObject() {
  return &QSurface::staticMetaObject;
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent20(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int buttons, int modifiers, Qt::ScrollPhase phase, bool inverted, Qt::MouseEventSource source) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), phase, inverted, source);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QGradient * ctr_qt_gui_ffi_QGradient_QGradient4(QGradient::Preset arg1) {
  return new QGradient(arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setHeadingLevel(QTextBlockFormat * this_ptr, int alevel) {
  this_ptr->setHeadingLevel(alevel);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QTextBlockFormat_headingLevel(QTextBlockFormat const * this_ptr) {
  return this_ptr->headingLevel();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_setQuality(QTextImageFormat * this_ptr, int quality) {
  this_ptr->setQuality(quality);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QTextImageFormat_quality(QTextImageFormat const * this_ptr) {
  return this_ptr->quality();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QBrush const * ctr_qt_gui_ffi_QPalette_placeholderText(QPalette const * this_ptr) {
  return &this_ptr->placeholderText();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QString * ctr_qt_gui_ffi_QIcon_fallbackThemeName() {
  return new QString(QIcon::fallbackThemeName());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QIcon_setFallbackThemeName(QString const * name) {
  QIcon::setFallbackThemeName(*name);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageReader_imageFormatsForMimeType(QByteArray const * mimeType) {
  return new QList< QByteArray >(QImageReader::imageFormatsForMimeType(*mimeType));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QList< QByteArray > * ctr_qt_gui_ffi_QImageWriter_imageFormatsForMimeType(QByteArray const * mimeType) {
  return new QList< QByteArray >(QImageWriter::imageFormatsForMimeType(*mimeType));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect24(QPainter * this_ptr, int x, int y, int w, int h, QGradient::Preset preset) {
  this_ptr->fillRect(x, y, w, h, preset);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect25(QPainter * this_ptr, QRect const * r, QGradient::Preset preset) {
  this_ptr->fillRect(*r, preset);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPainter_fillRect26(QPainter * this_ptr, QRectF const * r, QGradient::Preset preset) {
  this_ptr->fillRect(*r, preset);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QStandardItem_clearData(QStandardItem * this_ptr) {
  this_ptr->clearData();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT bool ctr_qt_gui_ffi_QStandardItemModel_clearItemData(QStandardItemModel * this_ptr, QModelIndex const * index) {
  return this_ptr->clearItemData(*index);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QWheelEvent * ctr_qt_gui_ffi_QWheelEvent_QWheelEvent21(QPointF const * pos, QPointF const * globalPos, QPoint const * pixelDelta, QPoint const * angleDelta, int buttons, int modifiers, Qt::ScrollPhase phase, bool inverted) {
  return new QWheelEvent(*pos, *globalPos, *pixelDelta, *angleDelta, QFlags< Qt::MouseButton >(buttons), QFlags< Qt::KeyboardModifier >(modifiers), phase, inverted);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51202)||(RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextImageFormat_setQuality1(QTextImageFormat * this_ptr) {
  this_ptr->setQuality();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmyk4(QColor const * this_ptr, int * c, int * m, int * y, int * k, int * a) {
  this_ptr->getCmyk(c, m, y, k, a);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmykF4(QColor const * this_ptr, double * c, double * m, double * y, double * k, double * a) {
  this_ptr->getCmykF(c, m, y, k, a);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QFont * ctr_qt_gui_ffi_QFont_QFont14(QFont const * font, QPaintDevice const * pd) {
  return new QFont(*font, pd);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QStringList * ctr_qt_gui_ffi_QFont_families(QFont const * this_ptr) {
  return new QStringList(this_ptr->families());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QFont_setFamilies(QFont * this_ptr, QStringList const * arg1) {
  this_ptr->setFamilies(*arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_clear(QPainterPath * this_ptr) {
  this_ptr->clear();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QPainterPath_reserve(QPainterPath * this_ptr, int size) {
  this_ptr->reserve(size);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT int ctr_qt_gui_ffi_QPainterPath_capacity(QPainterPath const * this_ptr) {
  return this_ptr->capacity();
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_convertTo(QImage * this_ptr, QImage::Format f, int flags) {
  this_ptr->convertTo(f, QFlags< Qt::ImageConversionFlag >(flags));
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontFamilies(QTextCharFormat * this_ptr, QStringList const * families) {
  this_ptr->setFontFamilies(*families);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextCharFormat_fontFamilies(QTextCharFormat const * this_ptr) {
  return new QVariant(this_ptr->fontFamilies());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextCharFormat_setFontStyleName(QTextCharFormat * this_ptr, QString const * styleName) {
  this_ptr->setFontStyleName(*styleName);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT QVariant * ctr_qt_gui_ffi_QTextCharFormat_fontStyleName(QTextCharFormat const * this_ptr) {
  return new QVariant(this_ptr->fontStyleName());
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QWindow_transientParentChanged(QWindow * this_ptr, QWindow * transientParent) {
  this_ptr->transientParentChanged(transientParent);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_setShowShortcutsInContextMenus(QStyleHints * this_ptr, bool showShortcutsInContextMenus) {
  this_ptr->setShowShortcutsInContextMenus(showShortcutsInContextMenus);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QStyleHints_showShortcutsInContextMenusChanged(QStyleHints * this_ptr, bool arg1) {
  this_ptr->showShortcutsInContextMenusChanged(arg1);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_swapItemsAt(QList< QInputMethodEvent::Attribute > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_swapItemsAt(QList< QTouchEvent::TouchPoint > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_swapItemsAt(QList< QSize > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_swapItemsAt(QList< QKeySequence > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_swapItemsAt(QList< QTouchDevice const * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_swapItemsAt(QList< QPolygonF > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_swapItemsAt(QList< double > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_swapItemsAt(QList< QTextOption::Tab > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_swapItemsAt(QList< QFontDatabase::WritingSystem > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_swapItemsAt(QList< QTextLayout::FormatRange > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_swapItemsAt(QList< QGlyphRun > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_swapItemsAt(QList< QAccessibleInterface * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_swapItemsAt(QList< QWindow * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_swapItemsAt(QList< QScreen * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_swapItemsAt(QList< QOpenGLContext * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_swapItemsAt(QList< QOpenGLDebugMessage > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_swapItemsAt(QList< QOpenGLShader * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_swapItemsAt(QList< QStandardItem * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_swapItemsAt(QList< QTextBlock > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_swapItemsAt(QList< QTextFrame * > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmyk5(QColor const * this_ptr, int * c, int * m, int * y, int * k) {
  this_ptr->getCmyk(c, m, y, k);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QColor_getCmykF5(QColor const * this_ptr, double * c, double * m, double * y, double * k) {
  this_ptr->getCmykF(c, m, y, k);
}


#endif

#if (RITUAL_CPP_LIB_VERSION == 51300)||(RITUAL_CPP_LIB_VERSION == 51400)
RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_convertTo1(QImage * this_ptr, QImage::Format f) {
  this_ptr->convertTo(f);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_QColorSpace_staticMetaObject() {
  return &QColorSpace::staticMetaObject;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_toExtendedRgb(QColor const * this_ptr) {
  return new QColor(this_ptr->toExtendedRgb());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor25(QColor::Spec spec, unsigned short a1, unsigned short a2, unsigned short a3, unsigned short a4, unsigned short a5) {
  return new QColor(spec, a1, a2, a3, a4, a5);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QWheelEvent_position(QWheelEvent const * this_ptr) {
  return new QPointF(this_ptr->position());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QPointF * ctr_qt_gui_ffi_QWheelEvent_globalPosition(QWheelEvent const * this_ptr) {
  return new QPointF(this_ptr->globalPosition());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QImage_colorSpace(QImage const * this_ptr) {
  return new QColorSpace(this_ptr->colorSpace());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QImage * ctr_qt_gui_ffi_QImage_convertedToColorSpace(QImage const * this_ptr, QColorSpace const * arg1) {
  return new QImage(this_ptr->convertedToColorSpace(*arg1));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_convertToColorSpace(QImage * this_ptr, QColorSpace const * arg1) {
  this_ptr->convertToColorSpace(*arg1);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_setColorSpace(QImage * this_ptr, QColorSpace const * arg1) {
  this_ptr->setColorSpace(*arg1);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QImage_applyColorTransform(QImage * this_ptr, QColorTransform const * transform) {
  this_ptr->applyColorTransform(*transform);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextBlockFormat_setMarker(QTextBlockFormat * this_ptr, QTextBlockFormat::MarkerType marker) {
  this_ptr->setMarker(marker);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextBlockFormat::MarkerType ctr_qt_gui_ffi_QTextBlockFormat_marker(QTextBlockFormat const * this_ptr) {
  return this_ptr->marker();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableFormat_setBorderCollapse(QTextTableFormat * this_ptr, bool borderCollapse) {
  this_ptr->setBorderCollapse(borderCollapse);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_gui_ffi_QTextTableFormat_borderCollapse(QTextTableFormat const * this_ptr) {
  return this_ptr->borderCollapse();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setTopBorder(QTextTableCellFormat * this_ptr, double width) {
  this_ptr->setTopBorder(width);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_topBorder(QTextTableCellFormat const * this_ptr) {
  return this_ptr->topBorder();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBottomBorder(QTextTableCellFormat * this_ptr, double width) {
  this_ptr->setBottomBorder(width);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_bottomBorder(QTextTableCellFormat const * this_ptr) {
  return this_ptr->bottomBorder();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setLeftBorder(QTextTableCellFormat * this_ptr, double width) {
  this_ptr->setLeftBorder(width);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_leftBorder(QTextTableCellFormat const * this_ptr) {
  return this_ptr->leftBorder();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setRightBorder(QTextTableCellFormat * this_ptr, double width) {
  this_ptr->setRightBorder(width);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QTextTableCellFormat_rightBorder(QTextTableCellFormat const * this_ptr) {
  return this_ptr->rightBorder();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBorder(QTextTableCellFormat * this_ptr, double width) {
  this_ptr->setBorder(width);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setTopBorderStyle(QTextTableCellFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setTopBorderStyle(style);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextFrameFormat::BorderStyle ctr_qt_gui_ffi_QTextTableCellFormat_topBorderStyle(QTextTableCellFormat const * this_ptr) {
  return this_ptr->topBorderStyle();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBottomBorderStyle(QTextTableCellFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setBottomBorderStyle(style);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextFrameFormat::BorderStyle ctr_qt_gui_ffi_QTextTableCellFormat_bottomBorderStyle(QTextTableCellFormat const * this_ptr) {
  return this_ptr->bottomBorderStyle();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setLeftBorderStyle(QTextTableCellFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setLeftBorderStyle(style);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextFrameFormat::BorderStyle ctr_qt_gui_ffi_QTextTableCellFormat_leftBorderStyle(QTextTableCellFormat const * this_ptr) {
  return this_ptr->leftBorderStyle();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setRightBorderStyle(QTextTableCellFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setRightBorderStyle(style);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextFrameFormat::BorderStyle ctr_qt_gui_ffi_QTextTableCellFormat_rightBorderStyle(QTextTableCellFormat const * this_ptr) {
  return this_ptr->rightBorderStyle();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBorderStyle(QTextTableCellFormat * this_ptr, QTextFrameFormat::BorderStyle style) {
  this_ptr->setBorderStyle(style);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setTopBorderBrush(QTextTableCellFormat * this_ptr, QBrush const * brush) {
  this_ptr->setTopBorderBrush(*brush);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextTableCellFormat_topBorderBrush(QTextTableCellFormat const * this_ptr) {
  return new QBrush(this_ptr->topBorderBrush());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBottomBorderBrush(QTextTableCellFormat * this_ptr, QBrush const * brush) {
  this_ptr->setBottomBorderBrush(*brush);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextTableCellFormat_bottomBorderBrush(QTextTableCellFormat const * this_ptr) {
  return new QBrush(this_ptr->bottomBorderBrush());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setLeftBorderBrush(QTextTableCellFormat * this_ptr, QBrush const * brush) {
  this_ptr->setLeftBorderBrush(*brush);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextTableCellFormat_leftBorderBrush(QTextTableCellFormat const * this_ptr) {
  return new QBrush(this_ptr->leftBorderBrush());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setRightBorderBrush(QTextTableCellFormat * this_ptr, QBrush const * brush) {
  this_ptr->setRightBorderBrush(*brush);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QBrush * ctr_qt_gui_ffi_QTextTableCellFormat_rightBorderBrush(QTextTableCellFormat const * this_ptr) {
  return new QBrush(this_ptr->rightBorderBrush());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextTableCellFormat_setBorderBrush(QTextTableCellFormat * this_ptr, QBrush const * brush) {
  this_ptr->setBorderBrush(*brush);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toMarkdown(QTextDocument const * this_ptr, int features) {
  return new QString(this_ptr->toMarkdown(QFlags< QTextDocument::MarkdownFeature >(features)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setMarkdown(QTextDocument * this_ptr, QString const * markdown, int features) {
  this_ptr->setMarkdown(*markdown, QFlags< QTextDocument::MarkdownFeature >(features));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QTextBlock * ctr_qt_gui_ffi_QAbstractTextDocumentLayout_blockWithMarkerAt(QAbstractTextDocumentLayout const * this_ptr, QPointF const * pos) {
  return new QTextBlock(this_ptr->blockWithMarkerAt(*pos));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorTransform * ctr_qt_gui_ffi_QColorTransform_QColorTransform() {
  return new QColorTransform();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorTransform_dQColorTransform(QColorTransform * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorTransform * ctr_qt_gui_ffi_QColorTransform_QColorTransform1(QColorTransform const * colorTransform) {
  return new QColorTransform(*colorTransform);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorTransform * ctr_qt_gui_ffi_QColorTransform_operator_(QColorTransform * this_ptr, QColorTransform const * other) {
  return &this_ptr->operator=(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorTransform_swap(QColorTransform * this_ptr, QColorTransform * other) {
  this_ptr->swap(*other);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT unsigned int ctr_qt_gui_ffi_QColorTransform_map(QColorTransform const * this_ptr, unsigned int argb) {
  return this_ptr->map(argb);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QRgba64 * ctr_qt_gui_ffi_QColorTransform_map1(QColorTransform const * this_ptr, QRgba64 const * rgba64) {
  return new QRgba64(this_ptr->map(*rgba64));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColorTransform_map2(QColorTransform const * this_ptr, QColor const * color) {
  return new QColor(this_ptr->map(*color));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_swap70(QColorTransform * value1, QColorTransform * value2) {
  swap(*value1, *value2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace() {
  return new QColorSpace();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace1(QColorSpace::NamedColorSpace namedColorSpace) {
  return new QColorSpace(namedColorSpace);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace2(QColorSpace::Primaries primaries, QColorSpace::TransferFunction fun, float gamma) {
  return new QColorSpace(primaries, fun, gamma);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace3(QColorSpace::Primaries primaries, float gamma) {
  return new QColorSpace(primaries, gamma);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace4(QPointF const * whitePoint, QPointF const * redPoint, QPointF const * greenPoint, QPointF const * bluePoint, QColorSpace::TransferFunction fun, float gamma) {
  return new QColorSpace(*whitePoint, *redPoint, *greenPoint, *bluePoint, fun, gamma);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_dQColorSpace(QColorSpace * this_ptr) {
  delete this_ptr;
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace5(QColorSpace const * colorSpace) {
  return new QColorSpace(*colorSpace);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_operator_(QColorSpace * this_ptr, QColorSpace const * colorSpace) {
  return &this_ptr->operator=(*colorSpace);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_swap(QColorSpace * this_ptr, QColorSpace * colorSpace) {
  this_ptr->swap(*colorSpace);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace::Primaries ctr_qt_gui_ffi_QColorSpace_primaries(QColorSpace const * this_ptr) {
  return this_ptr->primaries();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace::TransferFunction ctr_qt_gui_ffi_QColorSpace_transferFunction(QColorSpace const * this_ptr) {
  return this_ptr->transferFunction();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT float ctr_qt_gui_ffi_QColorSpace_gamma(QColorSpace const * this_ptr) {
  return this_ptr->gamma();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_setTransferFunction(QColorSpace * this_ptr, QColorSpace::TransferFunction transferFunction, float gamma) {
  this_ptr->setTransferFunction(transferFunction, gamma);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_withTransferFunction(QColorSpace const * this_ptr, QColorSpace::TransferFunction transferFunction, float gamma) {
  return new QColorSpace(this_ptr->withTransferFunction(transferFunction, gamma));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_setPrimaries(QColorSpace * this_ptr, QColorSpace::Primaries primariesId) {
  this_ptr->setPrimaries(primariesId);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_setPrimaries1(QColorSpace * this_ptr, QPointF const * whitePoint, QPointF const * redPoint, QPointF const * greenPoint, QPointF const * bluePoint) {
  this_ptr->setPrimaries(*whitePoint, *redPoint, *greenPoint, *bluePoint);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_gui_ffi_QColorSpace_isValid(QColorSpace const * this_ptr) {
  return this_ptr->isValid();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_fromIccProfile(QByteArray const * iccProfile) {
  return new QColorSpace(QColorSpace::fromIccProfile(*iccProfile));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QByteArray * ctr_qt_gui_ffi_QColorSpace_iccProfile(QColorSpace const * this_ptr) {
  return new QByteArray(this_ptr->iccProfile());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorTransform * ctr_qt_gui_ffi_QColorSpace_transformationToColorSpace(QColorSpace const * this_ptr, QColorSpace const * colorspace) {
  return new QColorTransform(this_ptr->transformationToColorSpace(*colorspace));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT bool ctr_qt_gui_ffi_operator__802(QColorSpace const * colorSpace1, QColorSpace const * colorSpace2) {
  return operator==(*colorSpace1, *colorSpace2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_swap71(QColorSpace * value1, QColorSpace * value2) {
  swap(*value1, *value2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__804(QDataStream * arg1, QColorSpace const * arg2) {
  return &operator<<(*arg1, *arg2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__805(QDataStream * arg1, QColorSpace * arg2) {
  return &operator>>(*arg1, *arg2);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__806(QDebug const * arg1, QColorSpace const * arg2) {
  return new QDebug(operator<<(*arg1, *arg2));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetrics_fontDpi(QFontMetrics const * this_ptr) {
  return this_ptr->fontDpi();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT double ctr_qt_gui_ffi_QFontMetricsF_fontDpi(QFontMetricsF const * this_ptr) {
  return this_ptr->fontDpi();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QGuiApplication_setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy policy) {
  QGuiApplication::setHighDpiScaleFactorRoundingPolicy(policy);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT Qt::HighDpiScaleFactorRoundingPolicy ctr_qt_gui_ffi_QGuiApplication_highDpiScaleFactorRoundingPolicy() {
  return QGuiApplication::highDpiScaleFactorRoundingPolicy();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData40(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, sourceFormat, sourceType, data, options);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData41(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, sourceFormat, sourceType, data, options);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData42(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, sourceFormat, sourceType, data, options);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData43(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, cubeFace, sourceFormat, sourceType, data, options);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData44(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int layerCount, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data, QOpenGLPixelTransferOptions const * options) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, cubeFace, layerCount, sourceFormat, sourceType, data, options);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_mouseDoubleClickDistance(QStyleHints const * this_ptr) {
  return this_ptr->mouseDoubleClickDistance();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT int ctr_qt_gui_ffi_QStyleHints_touchDoubleTapDistance(QStyleHints const * this_ptr) {
  return this_ptr->touchDoubleTapDistance();
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDataStream * ctr_qt_gui_ffi_operator__807(QDataStream * s, int e) {
  return &operator<<(*s, QFlags< QTextDocument::MarkdownFeature >(e));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QDebug * ctr_qt_gui_ffi_operator__809(QDebug const * debug, int flags) {
  return new QDebug(operator<<(*debug, QFlags< QTextDocument::MarkdownFeature >(flags)));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPoint_swapItemsAt(QVector< QPoint > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_double_QColor_swapItemsAt(QVector< QPair< double, QColor > > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QAbstractTextDocumentLayout_Selection_swapItemsAt(QVector< QAbstractTextDocumentLayout::Selection > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRect_swapItemsAt(QVector< QRect > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_double_swapItemsAt(QVector< double > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLength_swapItemsAt(QVector< QTextLength > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_quint32_swapItemsAt(QVector< quint32 > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextLayout_FormatRange_swapItemsAt(QVector< QTextLayout::FormatRange > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QTextFormat_swapItemsAt(QVector< QTextFormat > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QPair_QAccessibleInterface_ptr_QFlags_QAccessible_RelationFlag_swapItemsAt(QVector< QPair< QAccessibleInterface *, QFlags< QAccessible::RelationFlag > > > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QSize_swapItemsAt(QVector< QSize > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_float_swapItemsAt(QVector< float > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_GLuint64_swapItemsAt(QVector< GLuint64 > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLineF_swapItemsAt(QVector< QLineF > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QLine_swapItemsAt(QVector< QLine > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QVector_QRectF_swapItemsAt(QVector< QRectF > * this_ptr, int i, int j) {
  this_ptr->swapItemsAt(i, j);
}


#endif

RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_MemoryLayout_dMemoryLayout(QList< QInputMethodEvent::Attribute >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_MemoryLayout_dMemoryLayout(QList< QTouchEvent::TouchPoint >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QSize_MemoryLayout_dMemoryLayout(QList< QSize >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QKeySequence_MemoryLayout_dMemoryLayout(QList< QKeySequence >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_MemoryLayout_dMemoryLayout(QList< QTouchDevice const * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QPolygonF_MemoryLayout_dMemoryLayout(QList< QPolygonF >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_double_MemoryLayout_dMemoryLayout(QList< double >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextOption_Tab_MemoryLayout_dMemoryLayout(QList< QTextOption::Tab >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_MemoryLayout_dMemoryLayout(QList< QFontDatabase::WritingSystem >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_MemoryLayout_dMemoryLayout(QList< QTextLayout::FormatRange >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QGlyphRun_MemoryLayout_dMemoryLayout(QList< QGlyphRun >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_MemoryLayout_dMemoryLayout(QList< QAccessibleInterface * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QWindow_ptr_MemoryLayout_dMemoryLayout(QList< QWindow * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QScreen_ptr_MemoryLayout_dMemoryLayout(QList< QScreen * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_MemoryLayout_dMemoryLayout(QList< QOpenGLContext * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_MemoryLayout_dMemoryLayout(QList< QOpenGLDebugMessage >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_MemoryLayout_dMemoryLayout(QList< QOpenGLShader * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QStandardItem_ptr_MemoryLayout_dMemoryLayout(QList< QStandardItem * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextBlock_MemoryLayout_dMemoryLayout(QList< QTextBlock >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_QList_QTextFrame_ptr_MemoryLayout_dMemoryLayout(QList< QTextFrame * >::MemoryLayout * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::MemoryLayout * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_MemoryLayout_MemoryLayout() {
  return new QList< QInputMethodEvent::Attribute >::MemoryLayout();
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_MemoryLayout_MemoryLayout() {
  return new QList< QTouchEvent::TouchPoint >::MemoryLayout();
}


RITUAL_EXPORT QList< QSize >::MemoryLayout * ctr_qt_gui_ffi_QList_QSize_MemoryLayout_MemoryLayout() {
  return new QList< QSize >::MemoryLayout();
}


RITUAL_EXPORT QList< QKeySequence >::MemoryLayout * ctr_qt_gui_ffi_QList_QKeySequence_MemoryLayout_MemoryLayout() {
  return new QList< QKeySequence >::MemoryLayout();
}


RITUAL_EXPORT QList< QTouchDevice const * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QTouchDevice const * >::MemoryLayout();
}


RITUAL_EXPORT QList< QPolygonF >::MemoryLayout * ctr_qt_gui_ffi_QList_QPolygonF_MemoryLayout_MemoryLayout() {
  return new QList< QPolygonF >::MemoryLayout();
}


RITUAL_EXPORT QList< double >::MemoryLayout * ctr_qt_gui_ffi_QList_double_MemoryLayout_MemoryLayout() {
  return new QList< double >::MemoryLayout();
}


RITUAL_EXPORT QList< QTextOption::Tab >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextOption_Tab_MemoryLayout_MemoryLayout() {
  return new QList< QTextOption::Tab >::MemoryLayout();
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::MemoryLayout * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_MemoryLayout_MemoryLayout() {
  return new QList< QFontDatabase::WritingSystem >::MemoryLayout();
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_MemoryLayout_MemoryLayout() {
  return new QList< QTextLayout::FormatRange >::MemoryLayout();
}


RITUAL_EXPORT QList< QGlyphRun >::MemoryLayout * ctr_qt_gui_ffi_QList_QGlyphRun_MemoryLayout_MemoryLayout() {
  return new QList< QGlyphRun >::MemoryLayout();
}


RITUAL_EXPORT QList< QAccessibleInterface * >::MemoryLayout * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QAccessibleInterface * >::MemoryLayout();
}


RITUAL_EXPORT QList< QWindow * >::MemoryLayout * ctr_qt_gui_ffi_QList_QWindow_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QWindow * >::MemoryLayout();
}


RITUAL_EXPORT QList< QScreen * >::MemoryLayout * ctr_qt_gui_ffi_QList_QScreen_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QScreen * >::MemoryLayout();
}


RITUAL_EXPORT QList< QOpenGLContext * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QOpenGLContext * >::MemoryLayout();
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_MemoryLayout_MemoryLayout() {
  return new QList< QOpenGLDebugMessage >::MemoryLayout();
}


RITUAL_EXPORT QList< QOpenGLShader * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QOpenGLShader * >::MemoryLayout();
}


RITUAL_EXPORT QList< QStandardItem * >::MemoryLayout * ctr_qt_gui_ffi_QList_QStandardItem_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QStandardItem * >::MemoryLayout();
}


RITUAL_EXPORT QList< QTextBlock >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextBlock_MemoryLayout_MemoryLayout() {
  return new QList< QTextBlock >::MemoryLayout();
}


RITUAL_EXPORT QList< QTextFrame * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextFrame_ptr_MemoryLayout_MemoryLayout() {
  return new QList< QTextFrame * >::MemoryLayout();
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::MemoryLayout * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_MemoryLayout_MemoryLayout1(QList< QInputMethodEvent::Attribute >::MemoryLayout const * other) {
  return new QList< QInputMethodEvent::Attribute >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_MemoryLayout_MemoryLayout1(QList< QTouchEvent::TouchPoint >::MemoryLayout const * other) {
  return new QList< QTouchEvent::TouchPoint >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QSize >::MemoryLayout * ctr_qt_gui_ffi_QList_QSize_MemoryLayout_MemoryLayout1(QList< QSize >::MemoryLayout const * other) {
  return new QList< QSize >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QKeySequence >::MemoryLayout * ctr_qt_gui_ffi_QList_QKeySequence_MemoryLayout_MemoryLayout1(QList< QKeySequence >::MemoryLayout const * other) {
  return new QList< QKeySequence >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTouchDevice const * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_MemoryLayout_MemoryLayout1(QList< QTouchDevice const * >::MemoryLayout const * other) {
  return new QList< QTouchDevice const * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QPolygonF >::MemoryLayout * ctr_qt_gui_ffi_QList_QPolygonF_MemoryLayout_MemoryLayout1(QList< QPolygonF >::MemoryLayout const * other) {
  return new QList< QPolygonF >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< double >::MemoryLayout * ctr_qt_gui_ffi_QList_double_MemoryLayout_MemoryLayout1(QList< double >::MemoryLayout const * other) {
  return new QList< double >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTextOption::Tab >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextOption_Tab_MemoryLayout_MemoryLayout1(QList< QTextOption::Tab >::MemoryLayout const * other) {
  return new QList< QTextOption::Tab >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::MemoryLayout * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_MemoryLayout_MemoryLayout1(QList< QFontDatabase::WritingSystem >::MemoryLayout const * other) {
  return new QList< QFontDatabase::WritingSystem >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_MemoryLayout_MemoryLayout1(QList< QTextLayout::FormatRange >::MemoryLayout const * other) {
  return new QList< QTextLayout::FormatRange >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QGlyphRun >::MemoryLayout * ctr_qt_gui_ffi_QList_QGlyphRun_MemoryLayout_MemoryLayout1(QList< QGlyphRun >::MemoryLayout const * other) {
  return new QList< QGlyphRun >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::MemoryLayout * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_MemoryLayout_MemoryLayout1(QList< QAccessibleInterface * >::MemoryLayout const * other) {
  return new QList< QAccessibleInterface * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QWindow * >::MemoryLayout * ctr_qt_gui_ffi_QList_QWindow_ptr_MemoryLayout_MemoryLayout1(QList< QWindow * >::MemoryLayout const * other) {
  return new QList< QWindow * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QScreen * >::MemoryLayout * ctr_qt_gui_ffi_QList_QScreen_ptr_MemoryLayout_MemoryLayout1(QList< QScreen * >::MemoryLayout const * other) {
  return new QList< QScreen * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QOpenGLContext * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_MemoryLayout_MemoryLayout1(QList< QOpenGLContext * >::MemoryLayout const * other) {
  return new QList< QOpenGLContext * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_MemoryLayout_MemoryLayout1(QList< QOpenGLDebugMessage >::MemoryLayout const * other) {
  return new QList< QOpenGLDebugMessage >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QOpenGLShader * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_MemoryLayout_MemoryLayout1(QList< QOpenGLShader * >::MemoryLayout const * other) {
  return new QList< QOpenGLShader * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QStandardItem * >::MemoryLayout * ctr_qt_gui_ffi_QList_QStandardItem_ptr_MemoryLayout_MemoryLayout1(QList< QStandardItem * >::MemoryLayout const * other) {
  return new QList< QStandardItem * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTextBlock >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextBlock_MemoryLayout_MemoryLayout1(QList< QTextBlock >::MemoryLayout const * other) {
  return new QList< QTextBlock >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QTextFrame * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextFrame_ptr_MemoryLayout_MemoryLayout1(QList< QTextFrame * >::MemoryLayout const * other) {
  return new QList< QTextFrame * >::MemoryLayout(*other);
}


RITUAL_EXPORT QList< QInputMethodEvent::Attribute >::MemoryLayout * ctr_qt_gui_ffi_QList_QInputMethodEvent_Attribute_MemoryLayout_operator_(QList< QInputMethodEvent::Attribute >::MemoryLayout * this_ptr, QList< QInputMethodEvent::Attribute >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchEvent::TouchPoint >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchEvent_TouchPoint_MemoryLayout_operator_(QList< QTouchEvent::TouchPoint >::MemoryLayout * this_ptr, QList< QTouchEvent::TouchPoint >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QSize >::MemoryLayout * ctr_qt_gui_ffi_QList_QSize_MemoryLayout_operator_(QList< QSize >::MemoryLayout * this_ptr, QList< QSize >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QKeySequence >::MemoryLayout * ctr_qt_gui_ffi_QList_QKeySequence_MemoryLayout_operator_(QList< QKeySequence >::MemoryLayout * this_ptr, QList< QKeySequence >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTouchDevice const * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTouchDevice_const_ptr_MemoryLayout_operator_(QList< QTouchDevice const * >::MemoryLayout * this_ptr, QList< QTouchDevice const * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QPolygonF >::MemoryLayout * ctr_qt_gui_ffi_QList_QPolygonF_MemoryLayout_operator_(QList< QPolygonF >::MemoryLayout * this_ptr, QList< QPolygonF >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< double >::MemoryLayout * ctr_qt_gui_ffi_QList_double_MemoryLayout_operator_(QList< double >::MemoryLayout * this_ptr, QList< double >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextOption::Tab >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextOption_Tab_MemoryLayout_operator_(QList< QTextOption::Tab >::MemoryLayout * this_ptr, QList< QTextOption::Tab >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QFontDatabase::WritingSystem >::MemoryLayout * ctr_qt_gui_ffi_QList_QFontDatabase_WritingSystem_MemoryLayout_operator_(QList< QFontDatabase::WritingSystem >::MemoryLayout * this_ptr, QList< QFontDatabase::WritingSystem >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextLayout::FormatRange >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextLayout_FormatRange_MemoryLayout_operator_(QList< QTextLayout::FormatRange >::MemoryLayout * this_ptr, QList< QTextLayout::FormatRange >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QGlyphRun >::MemoryLayout * ctr_qt_gui_ffi_QList_QGlyphRun_MemoryLayout_operator_(QList< QGlyphRun >::MemoryLayout * this_ptr, QList< QGlyphRun >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QAccessibleInterface * >::MemoryLayout * ctr_qt_gui_ffi_QList_QAccessibleInterface_ptr_MemoryLayout_operator_(QList< QAccessibleInterface * >::MemoryLayout * this_ptr, QList< QAccessibleInterface * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QWindow * >::MemoryLayout * ctr_qt_gui_ffi_QList_QWindow_ptr_MemoryLayout_operator_(QList< QWindow * >::MemoryLayout * this_ptr, QList< QWindow * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QScreen * >::MemoryLayout * ctr_qt_gui_ffi_QList_QScreen_ptr_MemoryLayout_operator_(QList< QScreen * >::MemoryLayout * this_ptr, QList< QScreen * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLContext * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLContext_ptr_MemoryLayout_operator_(QList< QOpenGLContext * >::MemoryLayout * this_ptr, QList< QOpenGLContext * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLDebugMessage >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLDebugMessage_MemoryLayout_operator_(QList< QOpenGLDebugMessage >::MemoryLayout * this_ptr, QList< QOpenGLDebugMessage >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QOpenGLShader * >::MemoryLayout * ctr_qt_gui_ffi_QList_QOpenGLShader_ptr_MemoryLayout_operator_(QList< QOpenGLShader * >::MemoryLayout * this_ptr, QList< QOpenGLShader * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QStandardItem * >::MemoryLayout * ctr_qt_gui_ffi_QList_QStandardItem_ptr_MemoryLayout_operator_(QList< QStandardItem * >::MemoryLayout * this_ptr, QList< QStandardItem * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextBlock >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextBlock_MemoryLayout_operator_(QList< QTextBlock >::MemoryLayout * this_ptr, QList< QTextBlock >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


RITUAL_EXPORT QList< QTextFrame * >::MemoryLayout * ctr_qt_gui_ffi_QList_QTextFrame_ptr_MemoryLayout_operator_(QList< QTextFrame * >::MemoryLayout * this_ptr, QList< QTextFrame * >::MemoryLayout const * other) {
  return &this_ptr->operator=(*other);
}


#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColor * ctr_qt_gui_ffi_QColor_QColor26(QColor::Spec spec, unsigned short a1, unsigned short a2, unsigned short a3, unsigned short a4) {
  return new QColor(spec, a1, a2, a3, a4);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QString * ctr_qt_gui_ffi_QTextDocument_toMarkdown1(QTextDocument const * this_ptr) {
  return new QString(this_ptr->toMarkdown());
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QTextDocument_setMarkdown1(QTextDocument * this_ptr, QString const * markdown) {
  this_ptr->setMarkdown(*markdown);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace7(QColorSpace::Primaries primaries, QColorSpace::TransferFunction fun) {
  return new QColorSpace(primaries, fun);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_QColorSpace8(QPointF const * whitePoint, QPointF const * redPoint, QPointF const * greenPoint, QPointF const * bluePoint, QColorSpace::TransferFunction fun) {
  return new QColorSpace(*whitePoint, *redPoint, *greenPoint, *bluePoint, fun);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QColorSpace_setTransferFunction1(QColorSpace * this_ptr, QColorSpace::TransferFunction transferFunction) {
  this_ptr->setTransferFunction(transferFunction);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT QColorSpace * ctr_qt_gui_ffi_QColorSpace_withTransferFunction1(QColorSpace const * this_ptr, QColorSpace::TransferFunction transferFunction) {
  return new QColorSpace(this_ptr->withTransferFunction(transferFunction));
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData45(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, sourceFormat, sourceType, data);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData46(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, sourceFormat, sourceType, data);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData47(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, sourceFormat, sourceType, data);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData48(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, cubeFace, sourceFormat, sourceType, data);
}


#endif

#if RITUAL_CPP_LIB_VERSION == 51400
RITUAL_EXPORT void ctr_qt_gui_ffi_QOpenGLTexture_setData49(QOpenGLTexture * this_ptr, int xOffset, int yOffset, int zOffset, int width, int height, int depth, int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int layerCount, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void const * data) {
  this_ptr->setData(xOffset, yOffset, zOffset, width, height, depth, mipLevel, layer, cubeFace, layerCount, sourceFormat, sourceType, data);
}


#endif

RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_int_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_metaObject(ctr_qt_gui_ffi_signal_wrapper_int_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_int_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_int_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_int_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_int_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_int_int_int * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_ctr_qt_gui_ffi_signal_wrapper_int_int_int() {
  return new ctr_qt_gui_ffi_signal_wrapper_int_int_int();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_emit_(ctr_qt_gui_ffi_signal_wrapper_int_int_int * this_ptr, int arg0, int arg1, int arg2) {
  this_ptr->emit_(arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_metaObject(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode() {
  return new ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_emit_(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * this_ptr, QClipboard::Mode arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * this_ptr, QPalette const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_metaObject(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState() {
  return new ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_emit_(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * this_ptr, QMovie::MovieState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * this_ptr, QTextCursor const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_metaObject(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility() {
  return new ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_emit_(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * this_ptr, QWindow::Visibility arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_metaObject(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr() {
  return new ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_emit_(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * this_ptr, QStandardItem * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * this_ptr, Qt::WindowState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * this_ptr, Qt::LayoutDirection arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, QOpenGLDebugMessage const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * this_ptr, QUrl const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * this_ptr, QTextBlock const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * this_ptr, Qt::TabFocusBehavior arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * this_ptr, QRegExp const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_metaObject(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError() {
  return new ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_emit_(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * this_ptr, QImageReader::ImageReaderError arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * this_ptr, QRect const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * this_ptr, Qt::DropAction arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * this_ptr, QSessionManager * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * this_ptr, Qt::WindowModality arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * this_ptr, QRectF const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * this_ptr, QSize const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * this_ptr, QSizeF const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_metaObject(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation() {
  return new ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_emit_(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * this_ptr, QDoubleValidator::Notation arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_metaObject(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr() {
  return new ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_emit_(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * this_ptr, QScreen * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_metaObject(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref() {
  return new ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_emit_(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * this_ptr, QRegularExpression const * arg0) {
  this_ptr->emit_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * this_ptr, Qt::ScreenOrientation arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_metaObject(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr() {
  return new ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_emit_(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * this_ptr, QWindow * arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_staticMetaObject() {
  return &ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_metaObject(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_qt_metacast(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_qt_metacall(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState() {
  return new ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState();
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_emit_(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * this_ptr, Qt::ApplicationState arg0) {
  this_ptr->emit_(arg0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_int_int_int_dctr_qt_gui_ffi_signal_wrapper_int_int_int(ctr_qt_gui_ffi_signal_wrapper_int_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_dctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_dctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_dctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_dctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_dctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_dctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_dctr_qt_gui_ffi_signal_wrapper_Qt_WindowState(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_dctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_dctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_dctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_dctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_dctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_dctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_dctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_dctr_qt_gui_ffi_signal_wrapper_QRect_const_ref(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_dctr_qt_gui_ffi_signal_wrapper_Qt_DropAction(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_dctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_dctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_dctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_dctr_qt_gui_ffi_signal_wrapper_QSize_const_ref(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_dctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_dctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_dctr_qt_gui_ffi_signal_wrapper_QScreen_ptr(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_dctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_dctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_dctr_qt_gui_ffi_signal_wrapper_QWindow_ptr(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_dctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_int_int_int * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_int_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_int_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr83(ctr_qt_gui_ffi_signal_wrapper_int_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_int_int_int * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_int_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_int_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr85(ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QClipboard_Mode * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr87(ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QPalette_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr89(ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QMovie_MovieState * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr91(ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QTextCursor_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr93(ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QWindow_Visibility * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr95(ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QStandardItem_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr97(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_WindowState * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr99(ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_LayoutDirection * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr101(ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QOpenGLDebugMessage_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr103(ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr105(ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QTextBlock_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr107(ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_TabFocusBehavior * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr109(ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QRegExp_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr111(ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QImageReader_ImageReaderError * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr113(ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QRect_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr115(ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_DropAction * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr117(ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QSessionManager_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr119(ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_WindowModality * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr121(ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QRectF_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr123(ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QSize_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr125(ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QSizeF_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr127(ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QDoubleValidator_Notation * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr129(ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QScreen_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr131(ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QRegularExpression_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr133(ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_ScreenOrientation * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr135(ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_QWindow_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr137(ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_signal_wrapper_Qt_ApplicationState * >(ptr);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref(QObject * parent, void (*callback)(void *, QPalette const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * this_ptr, void (*callback)(void *, QPalette const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * this_ptr, QPalette const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref(QObject * parent, void (*callback)(void *, QTextCursor const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * this_ptr, void (*callback)(void *, QTextCursor const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * this_ptr, QTextCursor const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_metaObject(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation(QObject * parent, void (*callback)(void *, QDoubleValidator::Notation), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_set(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * this_ptr, void (*callback)(void *, QDoubleValidator::Notation), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_slot_(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * this_ptr, QDoubleValidator::Notation arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_metaObject(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode(QObject * parent, void (*callback)(void *, QClipboard::Mode), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_set(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * this_ptr, void (*callback)(void *, QClipboard::Mode), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_slot_(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * this_ptr, QClipboard::Mode arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref(QObject * parent, void (*callback)(void *, QSessionManager *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_set(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * this_ptr, void (*callback)(void *, QSessionManager *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * this_ptr, QSessionManager * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_metaObject(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr(QObject * parent, void (*callback)(void *, QStandardItem *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_set(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * this_ptr, void (*callback)(void *, QStandardItem *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_slot_(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * this_ptr, QStandardItem * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState(QObject * parent, void (*callback)(void *, Qt::WindowState), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_set(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * this_ptr, void (*callback)(void *, Qt::WindowState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * this_ptr, Qt::WindowState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref(QObject * parent, void (*callback)(void *, QSize const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * this_ptr, void (*callback)(void *, QSize const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * this_ptr, QSize const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior(QObject * parent, void (*callback)(void *, Qt::TabFocusBehavior), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_set(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * this_ptr, void (*callback)(void *, Qt::TabFocusBehavior), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * this_ptr, Qt::TabFocusBehavior arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality(QObject * parent, void (*callback)(void *, Qt::WindowModality), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_set(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * this_ptr, void (*callback)(void *, Qt::WindowModality), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * this_ptr, Qt::WindowModality arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref(QObject * parent, void (*callback)(void *, QSizeF const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * this_ptr, void (*callback)(void *, QSizeF const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * this_ptr, QSizeF const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_metaObject(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError(QObject * parent, void (*callback)(void *, QImageReader::ImageReaderError), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_set(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * this_ptr, void (*callback)(void *, QImageReader::ImageReaderError), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_slot_(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * this_ptr, QImageReader::ImageReaderError arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref(QObject * parent, void (*callback)(void *, QRegularExpression const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * this_ptr, void (*callback)(void *, QRegularExpression const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * this_ptr, QRegularExpression const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref(QObject * parent, void (*callback)(void *, QUrl const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * this_ptr, void (*callback)(void *, QUrl const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * this_ptr, QUrl const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction(QObject * parent, void (*callback)(void *, Qt::DropAction), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_set(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * this_ptr, void (*callback)(void *, Qt::DropAction), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * this_ptr, Qt::DropAction arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState(QObject * parent, void (*callback)(void *, Qt::ApplicationState), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_set(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * this_ptr, void (*callback)(void *, Qt::ApplicationState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * this_ptr, Qt::ApplicationState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_metaObject(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr(QObject * parent, void (*callback)(void *, QScreen *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_set(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * this_ptr, void (*callback)(void *, QScreen *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_slot_(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * this_ptr, QScreen * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref(QObject * parent, void (*callback)(void *, QTextBlock const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * this_ptr, void (*callback)(void *, QTextBlock const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * this_ptr, QTextBlock const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_metaObject(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState(QObject * parent, void (*callback)(void *, QMovie::MovieState), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_set(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * this_ptr, void (*callback)(void *, QMovie::MovieState), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_slot_(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * this_ptr, QMovie::MovieState arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref(QObject * parent, void (*callback)(void *, QRegExp const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * this_ptr, void (*callback)(void *, QRegExp const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * this_ptr, QRegExp const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_int_int_int::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_metaObject(ctr_qt_gui_ffi_slot_wrapper_int_int_int const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_int_int_int * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_int_int_int * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_int_int_int::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_int_int_int::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_int_int_int * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_ctr_qt_gui_ffi_slot_wrapper_int_int_int(QObject * parent, void (*callback)(void *, int, int, int), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_int_int_int(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_set(ctr_qt_gui_ffi_slot_wrapper_int_int_int * this_ptr, void (*callback)(void *, int, int, int), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_slot_(ctr_qt_gui_ffi_slot_wrapper_int_int_int * this_ptr, int arg0, int arg1, int arg2) {
  this_ptr->slot_(arg0, arg1, arg2);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref(QObject * parent, void (*callback)(void *, QRect const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * this_ptr, void (*callback)(void *, QRect const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * this_ptr, QRect const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_metaObject(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr(QObject * parent, void (*callback)(void *, QWindow *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_set(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * this_ptr, void (*callback)(void *, QWindow *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_slot_(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * this_ptr, QWindow * arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection(QObject * parent, void (*callback)(void *, Qt::LayoutDirection), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_set(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * this_ptr, void (*callback)(void *, Qt::LayoutDirection), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * this_ptr, Qt::LayoutDirection arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref(QObject * parent, void (*callback)(void *, QRectF const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * this_ptr, void (*callback)(void *, QRectF const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * this_ptr, QRectF const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_metaObject(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility(QObject * parent, void (*callback)(void *, QWindow::Visibility), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_set(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * this_ptr, void (*callback)(void *, QWindow::Visibility), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_slot_(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * this_ptr, QWindow::Visibility arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_metaObject(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation(QObject * parent, void (*callback)(void *, Qt::ScreenOrientation), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_set(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * this_ptr, void (*callback)(void *, Qt::ScreenOrientation), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_slot_(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * this_ptr, Qt::ScreenOrientation arg0) {
  this_ptr->slot_(arg0);
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_staticMetaObject() {
  return &ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref::staticMetaObject;
}


RITUAL_EXPORT QMetaObject const * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_metaObject(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref const * this_ptr) {
  return this_ptr->metaObject();
}


RITUAL_EXPORT void * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_qt_metacast(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, char const * arg1) {
  return this_ptr->qt_metacast(arg1);
}


RITUAL_EXPORT int ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_qt_metacall(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, QMetaObject::Call arg1, int arg2, void * * arg3) {
  return this_ptr->qt_metacall(arg1, arg2, arg3);
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_tr(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref::tr(s, c, n));
}


RITUAL_EXPORT QString * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_trUtf8(char const * s, char const * c, int n) {
  return new QString(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref::trUtf8(s, c, n));
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref(QObject * parent, void (*callback)(void *, QOpenGLDebugMessage const *), void (*deleter)(void *), void * data) {
  return new ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref(parent, callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_set(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, void (*callback)(void *, QOpenGLDebugMessage const *), void (*deleter)(void *), void * data) {
  this_ptr->set(callback, deleter, data);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_slot_(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * this_ptr, QOpenGLDebugMessage const * arg0) {
  this_ptr->slot_(*arg0);
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_dctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_dctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_dctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_dctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_dctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_dctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_dctr_qt_gui_ffi_slot_wrapper_Qt_WindowState(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_dctr_qt_gui_ffi_slot_wrapper_QSize_const_ref(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_dctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_dctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_dctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_dctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_dctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_dctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_dctr_qt_gui_ffi_slot_wrapper_Qt_DropAction(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_dctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_dctr_qt_gui_ffi_slot_wrapper_QScreen_ptr(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_dctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_dctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_dctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_int_int_int_dctr_qt_gui_ffi_slot_wrapper_int_int_int(ctr_qt_gui_ffi_slot_wrapper_int_int_int * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_dctr_qt_gui_ffi_slot_wrapper_QRect_const_ref(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_dctr_qt_gui_ffi_slot_wrapper_QWindow_ptr(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_dctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_dctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_dctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_dctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT void ctr_qt_gui_ffi_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_dctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * this_ptr) {
  delete this_ptr;
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr138(ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QPalette_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr139(ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QTextCursor_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr140(ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QDoubleValidator_Notation * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr141(ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QClipboard_Mode * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr142(ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QSessionManager_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr143(ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QStandardItem_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr144(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_WindowState * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr145(ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QSize_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr146(ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_TabFocusBehavior * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr147(ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_WindowModality * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr148(ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QSizeF_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr149(ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QImageReader_ImageReaderError * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr150(ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QRegularExpression_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr151(ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QUrl_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr152(ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_DropAction * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr153(ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_ApplicationState * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr154(ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QScreen_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr155(ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QTextBlock_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr156(ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QMovie_MovieState * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr157(ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QRegExp_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_int_int_int * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_int_int_int_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_int_int_int * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr158(ctr_qt_gui_ffi_slot_wrapper_int_int_int * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_int_int_int * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_int_int_int_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_int_int_int * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr159(ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QRect_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr160(ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QWindow_ptr * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr161(ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_LayoutDirection * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr162(ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QRectF_const_ref * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr163(ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QWindow_Visibility * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr164(ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_Qt_ScreenOrientation * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_static_cast_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_ptr(QObject * ptr) {
  return static_cast< ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * >(ptr);
}


RITUAL_EXPORT QObject * ctr_qt_gui_ffi_static_cast_QObject_ptr165(ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * ptr) {
  return static_cast< QObject * >(ptr);
}


RITUAL_EXPORT ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * ctr_qt_gui_ffi_dynamic_cast_ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref_ptr(QObject * ptr) {
  return dynamic_cast< ctr_qt_gui_ffi_slot_wrapper_QOpenGLDebugMessage_const_ref * >(ptr);
}


} // extern "C"
#include "file1.moc"
